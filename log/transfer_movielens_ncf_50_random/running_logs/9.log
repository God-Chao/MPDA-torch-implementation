[2024-12-02 17:37:36.890811] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 9, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 567
test users = ['123926' '123935' '123945' '123946' '123981' '123996' '124040' '124078'
 '124087' '124093' '124102' '124123' '124126' '124130' '124146' '124177'
 '124186' '124208' '124210' '124229' '124239' '124257' '124258' '124313'
 '124318' '124339' '124352' '124381' '124401' '124404' '124440' '124493'
 '124498' '124591' '124741' '124743' '124763' '124795' '124828' '124831'
 '124833' '124915' '124922' '124933' '124952' '124963' '125007' '125010'
 '125025' '125065' '125084' '125113' '125137' '125147' '125198' '125226'
 '125243' '125250' '125258' '125263' '125269' '125335' '125342' '125344'
 '125356' '125417' '125424' '125439' '125456' '125486' '125493' '125507'
 '125513' '125514' '125597' '125644' '125649' '125659' '125701' '125731'
 '125777' '125794' '125821' '125838' '125846' '125855' '125896' '125903'
 '125924' '125930' '125937' '125978' '126009' '126034' '126040' '126055'
 '126067' '126098' '126121' '126134' '126184' '126231' '126265' '126269'
 '126274' '126293' '126294' '126338' '126344' '126467' '126526' '126527'
 '126575' '126611' '126680' '126718' '126751' '126778' '126797' '126865'
 '126887' '126917' '126946' '127114' '127124' '127138' '127141' '127154'
 '127256' '127301' '127303' '127323' '127334' '127361' '127374' '127379'
 '127389' '127424' '127425' '127453' '127478' '127513' '127555' '127559'
 '127596' '127601' '127624' '127689' '127713' '127719' '127757' '127759'
 '127766' '127776' '127783' '127793' '127809' '127836' '127871' '127883'
 '127890' '127901' '127944' '127948' '128034' '128050' '128077' '128095'
 '128116' '128146' '128175' '128216' '128224' '128233' '128248' '128258'
 '128263' '128277' '128285' '128309' '128323' '128384' '128401' '128426'
 '128460' '128503' '128540' '128542' '128543' '128546' '128596' '128630'
 '128666' '128721' '128762' '128840' '128908' '128912' '128924' '128972'
 '128992' '129005' '129008' '129042' '129049' '129053' '129054' '129058'
 '129102' '129131' '129183' '129226' '129307' '129336' '129338' '129354'
 '129362' '129473' '129494' '129500' '129548' '129583' '129584' '129605'
 '129607' '129654' '129683' '129746' '129802' '129863' '129989' '130020'
 '130062' '130112' '130130' '130165' '130185' '130192' '130202' '130273'
 '130276' '130280' '130384' '130390' '130407' '130420' '130446' '130465'
 '130472' '130479' '130485' '130516' '130517' '130544' '130603' '130605'
 '130685' '130689' '130766' '130767' '130779' '130784' '130795' '130799'
 '130812' '130819' '130825' '130827' '130915' '130934' '130968' '130987'
 '130988' '131013' '131051' '131068' '131132' '131138' '131153' '131162'
 '131168' '131173' '131204' '131227' '131239' '131241' '131255' '131261'
 '131320' '131342' '131347' '131357' '131364' '131366' '131393' '131400'
 '131403' '131422' '131439' '131501' '131514' '131515' '131520' '131545'
 '131585' '131611' '131615' '131630' '131651' '131657' '131711' '131727'
 '131730' '131733' '131746' '131768' '131822' '131829' '131854' '131905'
 '131910' '131934' '131943' '131961' '131965' '132108' '132146' '132154'
 '132185' '132187' '132287' '132289' '132321' '132322' '132368' '132386'
 '132393' '132417' '132419' '132519' '132586' '132603' '132606' '132630'
 '132643' '132658' '132787' '132809' '132840' '132852' '132941' '132958'
 '133038' '133048' '133096' '133098' '133125' '133133' '133168' '133187'
 '133220' '133267' '133324' '133325' '133329' '133394' '133473' '133486'
 '133634' '133684' '133699' '133701' '133703' '133713' '133762' '133811'
 '133825' '133848' '133850' '133916' '133925' '133955' '133961' '133968'
 '133983' '133992' '133997' '134029' '134101' '134136' '134144' '134156'
 '134175' '134181' '134183' '134205' '134210' '134235' '134279' '134290'
 '134291' '134295' '134296' '134297' '134304' '134352' '134380' '134401'
 '134461' '134497' '134508' '134513' '134525' '134528' '134543' '134547'
 '134567' '134612' '134627' '134637' '134649' '134653' '134674' '134690'
 '134728' '134773' '134801' '134810' '134845' '134922' '134952' '134982'
 '134995' '135035' '135068' '135071' '135075' '135088' '135092' '135095'
 '135102' '135105' '135123' '135138' '135155' '135194' '135285' '135343'
 '135363' '135418' '135425' '135476' '135500' '135505' '135550' '135562'
 '135572' '135639' '135694' '135703' '135720' '135767' '135795' '135811'
 '135819' '135826' '135834' '135984' '135993' '135994' '135996' '136000'
 '136012' '136022' '136047' '136050' '136053' '136091' '136132' '136151'
 '136174' '136190' '136223' '136262' '136268' '136319' '136326' '136426'
 '136439' '136485' '136555' '136564' '136576' '136581' '136599' '136642'
 '136747' '136754' '136794' '136806' '136810' '136821' '136855' '136875'
 '136899' '136903' '136908' '136919' '136941' '136946' '136957' '136965'
 '136989' '137022' '137026' '137065' '137118' '137202' '137232' '137255'
 '137313' '137342' '137343' '137421' '137489' '137509' '137528' '137570'
 '137581' '137633' '137648' '137671' '137683' '137686' '137746' '137758'
 '137791' '137805' '137854' '137869' '137879' '137922' '137936' '137955'
 '137993' '138015' '138103' '138134' '138137' '138145' '138148' '138161'
 '138162' '138186' '138194' '138200' '138201' '138208' '138211' '138235'
 '138246' '138254' '138307' '138335' '138406' '138437' '138472']
[2024-12-02 17:37:36.903784] start test on test users
[2024-12-02 17:37:36.903833] start test user 123926 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:39.804783] start test user 123926 0/567 recall augumented users by random, augumented_users = [104059, 132650, 131930, 69770, 76794, 37371, 51478, 137633, 34289, 20263, 128034, 132307, 49282, 17855, 53210, 81464, 5668, 110271, 62186, 128906, 118292, 138373, 94170, 63480, 57461, 46259, 17923, 56715, 119767, 122698, 19243, 115517, 2633, 32882, 100347, 94415, 53401, 104405, 17912, 63717, 36717, 84160, 78247, 30956, 47309, 38080, 68893, 123594, 48971, 54290]
[2024-12-02 17:37:39.831329] user = 123926 Cloud 0/567
[2024-12-02 17:37:44.472320] user = 123926 Local 0/567
[2024-12-02 17:37:45.082083] user = 123926 Local+ 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:47.802051] user = 123926 MPDA- 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7058823529411765
Training on augumented user 104059 0/50 current_auc = 0.7058823529411765
User 104059 AUC after training: 0.7038539553752535
User 104059 does not improve AUC. Reverting changes.
Training on augumented user 132650 1/50 current_auc = 0.7058823529411765
User 132650 AUC after training: 0.7038539553752535
User 132650 does not improve AUC. Reverting changes.
Training on augumented user 131930 2/50 current_auc = 0.7058823529411765
User 131930 AUC after training: 0.7079107505070994
User 131930 improves AUC. Keeping the model.
Training on augumented user 69770 3/50 current_auc = 0.7079107505070994
User 69770 AUC after training: 0.7058823529411764
User 69770 does not improve AUC. Reverting changes.
Training on augumented user 76794 4/50 current_auc = 0.7079107505070994
User 76794 AUC after training: 0.7058823529411764
User 76794 does not improve AUC. Reverting changes.
Training on augumented user 37371 5/50 current_auc = 0.7079107505070994
User 37371 AUC after training: 0.7079107505070994
User 37371 does not improve AUC. Reverting changes.
Training on augumented user 51478 6/50 current_auc = 0.7079107505070994
User 51478 AUC after training: 0.7079107505070994
User 51478 does not improve AUC. Reverting changes.
Training on augumented user 137633 7/50 current_auc = 0.7079107505070994
User 137633 AUC after training: 0.7119675456389453
User 137633 improves AUC. Keeping the model.
Training on augumented user 34289 8/50 current_auc = 0.7119675456389453
User 34289 AUC after training: 0.7099391480730224
User 34289 does not improve AUC. Reverting changes.
Training on augumented user 20263 9/50 current_auc = 0.7119675456389453
User 20263 AUC after training: 0.7079107505070994
User 20263 does not improve AUC. Reverting changes.
Training on augumented user 128034 10/50 current_auc = 0.7119675456389453
User 128034 AUC after training: 0.7079107505070994
User 128034 does not improve AUC. Reverting changes.
Training on augumented user 132307 11/50 current_auc = 0.7119675456389453
User 132307 AUC after training: 0.7160243407707911
User 132307 improves AUC. Keeping the model.
Training on augumented user 49282 12/50 current_auc = 0.7160243407707911
User 49282 AUC after training: 0.7160243407707911
User 49282 does not improve AUC. Reverting changes.
Training on augumented user 17855 13/50 current_auc = 0.7160243407707911
User 17855 AUC after training: 0.7119675456389453
User 17855 does not improve AUC. Reverting changes.
Training on augumented user 53210 14/50 current_auc = 0.7160243407707911
User 53210 AUC after training: 0.7119675456389453
User 53210 does not improve AUC. Reverting changes.
Training on augumented user 81464 15/50 current_auc = 0.7160243407707911
User 81464 AUC after training: 0.7160243407707911
User 81464 does not improve AUC. Reverting changes.
Training on augumented user 5668 16/50 current_auc = 0.7160243407707911
User 5668 AUC after training: 0.7160243407707911
User 5668 does not improve AUC. Reverting changes.
Training on augumented user 110271 17/50 current_auc = 0.7160243407707911
User 110271 AUC after training: 0.7119675456389453
User 110271 does not improve AUC. Reverting changes.
Training on augumented user 62186 18/50 current_auc = 0.7160243407707911
User 62186 AUC after training: 0.7139959432048681
User 62186 does not improve AUC. Reverting changes.
Training on augumented user 128906 19/50 current_auc = 0.7160243407707911
User 128906 AUC after training: 0.7160243407707911
User 128906 does not improve AUC. Reverting changes.
Training on augumented user 118292 20/50 current_auc = 0.7160243407707911
User 118292 AUC after training: 0.7139959432048681
User 118292 does not improve AUC. Reverting changes.
Training on augumented user 138373 21/50 current_auc = 0.7160243407707911
User 138373 AUC after training: 0.7160243407707911
User 138373 does not improve AUC. Reverting changes.
Training on augumented user 94170 22/50 current_auc = 0.7160243407707911
User 94170 AUC after training: 0.7119675456389453
User 94170 does not improve AUC. Reverting changes.
Training on augumented user 63480 23/50 current_auc = 0.7160243407707911
User 63480 AUC after training: 0.7119675456389453
User 63480 does not improve AUC. Reverting changes.
Training on augumented user 57461 24/50 current_auc = 0.7160243407707911
User 57461 AUC after training: 0.7119675456389453
User 57461 does not improve AUC. Reverting changes.
Training on augumented user 46259 25/50 current_auc = 0.7160243407707911
User 46259 AUC after training: 0.7139959432048681
User 46259 does not improve AUC. Reverting changes.
Training on augumented user 17923 26/50 current_auc = 0.7160243407707911
User 17923 AUC after training: 0.7119675456389453
User 17923 does not improve AUC. Reverting changes.
Training on augumented user 56715 27/50 current_auc = 0.7160243407707911
User 56715 AUC after training: 0.7119675456389453
User 56715 does not improve AUC. Reverting changes.
Training on augumented user 119767 28/50 current_auc = 0.7160243407707911
User 119767 AUC after training: 0.7139959432048681
User 119767 does not improve AUC. Reverting changes.
Training on augumented user 122698 29/50 current_auc = 0.7160243407707911
User 122698 AUC after training: 0.7119675456389453
User 122698 does not improve AUC. Reverting changes.
Training on augumented user 19243 30/50 current_auc = 0.7160243407707911
User 19243 AUC after training: 0.7139959432048681
User 19243 does not improve AUC. Reverting changes.
Training on augumented user 115517 31/50 current_auc = 0.7160243407707911
User 115517 AUC after training: 0.7119675456389453
User 115517 does not improve AUC. Reverting changes.
Training on augumented user 2633 32/50 current_auc = 0.7160243407707911
User 2633 AUC after training: 0.7160243407707911
User 2633 does not improve AUC. Reverting changes.
Training on augumented user 32882 33/50 current_auc = 0.7160243407707911
User 32882 AUC after training: 0.7139959432048681
User 32882 does not improve AUC. Reverting changes.
Training on augumented user 100347 34/50 current_auc = 0.7160243407707911
User 100347 AUC after training: 0.7160243407707911
User 100347 does not improve AUC. Reverting changes.
Training on augumented user 94415 35/50 current_auc = 0.7160243407707911
User 94415 AUC after training: 0.7119675456389453
User 94415 does not improve AUC. Reverting changes.
Training on augumented user 53401 36/50 current_auc = 0.7160243407707911
User 53401 AUC after training: 0.7139959432048681
User 53401 does not improve AUC. Reverting changes.
Training on augumented user 104405 37/50 current_auc = 0.7160243407707911
User 104405 AUC after training: 0.7139959432048681
User 104405 does not improve AUC. Reverting changes.
Training on augumented user 17912 38/50 current_auc = 0.7160243407707911
User 17912 AUC after training: 0.7119675456389453
User 17912 does not improve AUC. Reverting changes.
Training on augumented user 63717 39/50 current_auc = 0.7160243407707911
User 63717 AUC after training: 0.7099391480730224
User 63717 does not improve AUC. Reverting changes.
Training on augumented user 36717 40/50 current_auc = 0.7160243407707911
User 36717 AUC after training: 0.7119675456389453
User 36717 does not improve AUC. Reverting changes.
Training on augumented user 84160 41/50 current_auc = 0.7160243407707911
User 84160 AUC after training: 0.7119675456389453
User 84160 does not improve AUC. Reverting changes.
Training on augumented user 78247 42/50 current_auc = 0.7160243407707911
User 78247 AUC after training: 0.7119675456389453
User 78247 does not improve AUC. Reverting changes.
Training on augumented user 30956 43/50 current_auc = 0.7160243407707911
User 30956 AUC after training: 0.7119675456389453
User 30956 does not improve AUC. Reverting changes.
Training on augumented user 47309 44/50 current_auc = 0.7160243407707911
User 47309 AUC after training: 0.7099391480730224
User 47309 does not improve AUC. Reverting changes.
Training on augumented user 38080 45/50 current_auc = 0.7160243407707911
User 38080 AUC after training: 0.7139959432048681
User 38080 does not improve AUC. Reverting changes.
Training on augumented user 68893 46/50 current_auc = 0.7160243407707911
User 68893 AUC after training: 0.7139959432048681
User 68893 does not improve AUC. Reverting changes.
Training on augumented user 123594 47/50 current_auc = 0.7160243407707911
User 123594 AUC after training: 0.7079107505070994
User 123594 does not improve AUC. Reverting changes.
Training on augumented user 48971 48/50 current_auc = 0.7160243407707911
User 48971 AUC after training: 0.7119675456389453
User 48971 does not improve AUC. Reverting changes.
Training on augumented user 54290 49/50 current_auc = 0.7160243407707911
User 54290 AUC after training: 0.7160243407707911
User 54290 does not improve AUC. Reverting changes.
[2024-12-02 17:38:19.555146] start test user 123935 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:19.954153] start test user 123935 1/567 recall augumented users by random, augumented_users = [24773, 111914, 82204, 66593, 14786, 30925, 131072, 108295, 90432, 123252, 93111, 115392, 110693, 10697, 136004, 135342, 40415, 85449, 2590, 23339, 95305, 53439, 28151, 9189, 18683, 8779, 10620, 106017, 63634, 65646, 30186, 22698, 122972, 37341, 96390, 130229, 23217, 131446, 89698, 144, 83954, 30245, 122945, 50918, 123819, 24045, 111741, 84979, 131188, 36024]
[2024-12-02 17:38:19.969811] user = 123935 Cloud 1/567
[2024-12-02 17:38:19.987231] user = 123935 Local 1/567
[2024-12-02 17:38:20.031530] user = 123935 Local+ 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:21.704248] user = 123935 MPDA- 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7191119691119692
Training on augumented user 24773 0/50 current_auc = 0.7191119691119692
User 24773 AUC after training: 0.7200772200772201
User 24773 improves AUC. Keeping the model.
Training on augumented user 111914 1/50 current_auc = 0.7200772200772201
User 111914 AUC after training: 0.7191119691119692
User 111914 does not improve AUC. Reverting changes.
Training on augumented user 82204 2/50 current_auc = 0.7200772200772201
User 82204 AUC after training: 0.7191119691119692
User 82204 does not improve AUC. Reverting changes.
Training on augumented user 66593 3/50 current_auc = 0.7200772200772201
User 66593 AUC after training: 0.7191119691119692
User 66593 does not improve AUC. Reverting changes.
Training on augumented user 14786 4/50 current_auc = 0.7200772200772201
User 14786 AUC after training: 0.721042471042471
User 14786 improves AUC. Keeping the model.
Training on augumented user 30925 5/50 current_auc = 0.721042471042471
User 30925 AUC after training: 0.721042471042471
User 30925 does not improve AUC. Reverting changes.
Training on augumented user 131072 6/50 current_auc = 0.721042471042471
User 131072 AUC after training: 0.7181467181467182
User 131072 does not improve AUC. Reverting changes.
Training on augumented user 108295 7/50 current_auc = 0.721042471042471
User 108295 AUC after training: 0.7200772200772201
User 108295 does not improve AUC. Reverting changes.
Training on augumented user 90432 8/50 current_auc = 0.721042471042471
User 90432 AUC after training: 0.7200772200772201
User 90432 does not improve AUC. Reverting changes.
Training on augumented user 123252 9/50 current_auc = 0.721042471042471
User 123252 AUC after training: 0.722007722007722
User 123252 improves AUC. Keeping the model.
Training on augumented user 93111 10/50 current_auc = 0.722007722007722
User 93111 AUC after training: 0.721042471042471
User 93111 does not improve AUC. Reverting changes.
Training on augumented user 115392 11/50 current_auc = 0.722007722007722
User 115392 AUC after training: 0.721042471042471
User 115392 does not improve AUC. Reverting changes.
Training on augumented user 110693 12/50 current_auc = 0.722007722007722
User 110693 AUC after training: 0.7200772200772201
User 110693 does not improve AUC. Reverting changes.
Training on augumented user 10697 13/50 current_auc = 0.722007722007722
User 10697 AUC after training: 0.721042471042471
User 10697 does not improve AUC. Reverting changes.
Training on augumented user 136004 14/50 current_auc = 0.722007722007722
User 136004 AUC after training: 0.721042471042471
User 136004 does not improve AUC. Reverting changes.
Training on augumented user 135342 15/50 current_auc = 0.722007722007722
User 135342 AUC after training: 0.7200772200772201
User 135342 does not improve AUC. Reverting changes.
Training on augumented user 40415 16/50 current_auc = 0.722007722007722
User 40415 AUC after training: 0.7200772200772201
User 40415 does not improve AUC. Reverting changes.
Training on augumented user 85449 17/50 current_auc = 0.722007722007722
User 85449 AUC after training: 0.7181467181467182
User 85449 does not improve AUC. Reverting changes.
Training on augumented user 2590 18/50 current_auc = 0.722007722007722
User 2590 AUC after training: 0.721042471042471
User 2590 does not improve AUC. Reverting changes.
Training on augumented user 23339 19/50 current_auc = 0.722007722007722
User 23339 AUC after training: 0.721042471042471
User 23339 does not improve AUC. Reverting changes.
Training on augumented user 95305 20/50 current_auc = 0.722007722007722
User 95305 AUC after training: 0.7200772200772201
User 95305 does not improve AUC. Reverting changes.
Training on augumented user 53439 21/50 current_auc = 0.722007722007722
User 53439 AUC after training: 0.721042471042471
User 53439 does not improve AUC. Reverting changes.
Training on augumented user 28151 22/50 current_auc = 0.722007722007722
User 28151 AUC after training: 0.722007722007722
User 28151 does not improve AUC. Reverting changes.
Training on augumented user 9189 23/50 current_auc = 0.722007722007722
User 9189 AUC after training: 0.7191119691119692
User 9189 does not improve AUC. Reverting changes.
Training on augumented user 18683 24/50 current_auc = 0.722007722007722
User 18683 AUC after training: 0.722007722007722
User 18683 does not improve AUC. Reverting changes.
Training on augumented user 8779 25/50 current_auc = 0.722007722007722
User 8779 AUC after training: 0.721042471042471
User 8779 does not improve AUC. Reverting changes.
Training on augumented user 10620 26/50 current_auc = 0.722007722007722
User 10620 AUC after training: 0.721042471042471
User 10620 does not improve AUC. Reverting changes.
Training on augumented user 106017 27/50 current_auc = 0.722007722007722
User 106017 AUC after training: 0.7181467181467182
User 106017 does not improve AUC. Reverting changes.
Training on augumented user 63634 28/50 current_auc = 0.722007722007722
User 63634 AUC after training: 0.721042471042471
User 63634 does not improve AUC. Reverting changes.
Training on augumented user 65646 29/50 current_auc = 0.722007722007722
User 65646 AUC after training: 0.721042471042471
User 65646 does not improve AUC. Reverting changes.
Training on augumented user 30186 30/50 current_auc = 0.722007722007722
User 30186 AUC after training: 0.7200772200772201
User 30186 does not improve AUC. Reverting changes.
Training on augumented user 22698 31/50 current_auc = 0.722007722007722
User 22698 AUC after training: 0.722007722007722
User 22698 does not improve AUC. Reverting changes.
Training on augumented user 122972 32/50 current_auc = 0.722007722007722
User 122972 AUC after training: 0.7200772200772201
User 122972 does not improve AUC. Reverting changes.
Training on augumented user 37341 33/50 current_auc = 0.722007722007722
User 37341 AUC after training: 0.721042471042471
User 37341 does not improve AUC. Reverting changes.
Training on augumented user 96390 34/50 current_auc = 0.722007722007722
User 96390 AUC after training: 0.721042471042471
User 96390 does not improve AUC. Reverting changes.
Training on augumented user 130229 35/50 current_auc = 0.722007722007722
User 130229 AUC after training: 0.722007722007722
User 130229 does not improve AUC. Reverting changes.
Training on augumented user 23217 36/50 current_auc = 0.722007722007722
User 23217 AUC after training: 0.7181467181467182
User 23217 does not improve AUC. Reverting changes.
Training on augumented user 131446 37/50 current_auc = 0.722007722007722
User 131446 AUC after training: 0.7200772200772201
User 131446 does not improve AUC. Reverting changes.
Training on augumented user 89698 38/50 current_auc = 0.722007722007722
User 89698 AUC after training: 0.722007722007722
User 89698 does not improve AUC. Reverting changes.
Training on augumented user 144 39/50 current_auc = 0.722007722007722
User 144 AUC after training: 0.7181467181467182
User 144 does not improve AUC. Reverting changes.
Training on augumented user 83954 40/50 current_auc = 0.722007722007722
User 83954 AUC after training: 0.7200772200772201
User 83954 does not improve AUC. Reverting changes.
Training on augumented user 30245 41/50 current_auc = 0.722007722007722
User 30245 AUC after training: 0.722007722007722
User 30245 does not improve AUC. Reverting changes.
Training on augumented user 122945 42/50 current_auc = 0.722007722007722
User 122945 AUC after training: 0.721042471042471
User 122945 does not improve AUC. Reverting changes.
Training on augumented user 50918 43/50 current_auc = 0.722007722007722
User 50918 AUC after training: 0.7191119691119691
User 50918 does not improve AUC. Reverting changes.
Training on augumented user 123819 44/50 current_auc = 0.722007722007722
User 123819 AUC after training: 0.7133204633204633
User 123819 does not improve AUC. Reverting changes.
Training on augumented user 24045 45/50 current_auc = 0.722007722007722
User 24045 AUC after training: 0.721042471042471
User 24045 does not improve AUC. Reverting changes.
Training on augumented user 111741 46/50 current_auc = 0.722007722007722
User 111741 AUC after training: 0.7200772200772201
User 111741 does not improve AUC. Reverting changes.
Training on augumented user 84979 47/50 current_auc = 0.722007722007722
User 84979 AUC after training: 0.722007722007722
User 84979 does not improve AUC. Reverting changes.
Training on augumented user 131188 48/50 current_auc = 0.722007722007722
User 131188 AUC after training: 0.722007722007722
User 131188 does not improve AUC. Reverting changes.
Training on augumented user 36024 49/50 current_auc = 0.722007722007722
User 36024 AUC after training: 0.722007722007722
User 36024 does not improve AUC. Reverting changes.
[2024-12-02 17:38:49.253160] start test user 123945 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:50.033902] start test user 123945 2/567 recall augumented users by random, augumented_users = [88964, 61813, 108406, 26626, 67690, 34983, 41393, 98268, 72051, 32143, 67859, 72557, 121192, 119452, 86367, 122190, 67391, 79042, 106842, 41406, 83071, 80406, 91148, 126168, 86750, 25416, 41014, 31771, 60432, 94903, 54837, 99389, 70127, 3048, 54671, 46951, 95378, 56369, 59250, 105702, 67285, 89290, 115459, 10927, 101373, 1014, 107363, 138238, 11822, 136291]
[2024-12-02 17:38:50.062397] user = 123945 Cloud 2/567
[2024-12-02 17:38:50.094334] user = 123945 Local 2/567
[2024-12-02 17:38:50.239110] user = 123945 Local+ 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:52.858575] user = 123945 MPDA- 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5553150553150553
Training on augumented user 88964 0/50 current_auc = 0.5553150553150553
User 88964 AUC after training: 0.5556758056758058
User 88964 improves AUC. Keeping the model.
Training on augumented user 61813 1/50 current_auc = 0.5556758056758058
User 61813 AUC after training: 0.5553150553150553
User 61813 does not improve AUC. Reverting changes.
Training on augumented user 108406 2/50 current_auc = 0.5556758056758058
User 108406 AUC after training: 0.5557960557960558
User 108406 improves AUC. Keeping the model.
Training on augumented user 26626 3/50 current_auc = 0.5557960557960558
User 26626 AUC after training: 0.5559163059163059
User 26626 improves AUC. Keeping the model.
Training on augumented user 67690 4/50 current_auc = 0.5559163059163059
User 67690 AUC after training: 0.5556758056758058
User 67690 does not improve AUC. Reverting changes.
Training on augumented user 34983 5/50 current_auc = 0.5559163059163059
User 34983 AUC after training: 0.5557960557960558
User 34983 does not improve AUC. Reverting changes.
Training on augumented user 41393 6/50 current_auc = 0.5559163059163059
User 41393 AUC after training: 0.5560966810966811
User 41393 improves AUC. Keeping the model.
Training on augumented user 98268 7/50 current_auc = 0.5560966810966811
User 98268 AUC after training: 0.5559163059163059
User 98268 does not improve AUC. Reverting changes.
Training on augumented user 72051 8/50 current_auc = 0.5560966810966811
User 72051 AUC after training: 0.5555555555555556
User 72051 does not improve AUC. Reverting changes.
Training on augumented user 32143 9/50 current_auc = 0.5560966810966811
User 32143 AUC after training: 0.5562169312169313
User 32143 improves AUC. Keeping the model.
Training on augumented user 67859 10/50 current_auc = 0.5562169312169313
User 67859 AUC after training: 0.5566979316979317
User 67859 improves AUC. Keeping the model.
Training on augumented user 72557 11/50 current_auc = 0.5566979316979317
User 72557 AUC after training: 0.5565776815776816
User 72557 does not improve AUC. Reverting changes.
Training on augumented user 121192 12/50 current_auc = 0.5566979316979317
User 121192 AUC after training: 0.5571789321789322
User 121192 improves AUC. Keeping the model.
Training on augumented user 119452 13/50 current_auc = 0.5571789321789322
User 119452 AUC after training: 0.5562770562770563
User 119452 does not improve AUC. Reverting changes.
Training on augumented user 86367 14/50 current_auc = 0.5571789321789322
User 86367 AUC after training: 0.5572390572390573
User 86367 improves AUC. Keeping the model.
Training on augumented user 122190 15/50 current_auc = 0.5572390572390573
User 122190 AUC after training: 0.5572390572390573
User 122190 does not improve AUC. Reverting changes.
Training on augumented user 67391 16/50 current_auc = 0.5572390572390573
User 67391 AUC after training: 0.5573593073593074
User 67391 improves AUC. Keeping the model.
Training on augumented user 79042 17/50 current_auc = 0.5573593073593074
User 79042 AUC after training: 0.5572390572390572
User 79042 does not improve AUC. Reverting changes.
Training on augumented user 106842 18/50 current_auc = 0.5573593073593074
User 106842 AUC after training: 0.5572390572390572
User 106842 does not improve AUC. Reverting changes.
Training on augumented user 41406 19/50 current_auc = 0.5573593073593074
User 41406 AUC after training: 0.5572390572390573
User 41406 does not improve AUC. Reverting changes.
Training on augumented user 83071 20/50 current_auc = 0.5573593073593074
User 83071 AUC after training: 0.5572991822991823
User 83071 does not improve AUC. Reverting changes.
Training on augumented user 80406 21/50 current_auc = 0.5573593073593074
User 80406 AUC after training: 0.5567580567580568
User 80406 does not improve AUC. Reverting changes.
Training on augumented user 91148 22/50 current_auc = 0.5573593073593074
User 91148 AUC after training: 0.5571188071188071
User 91148 does not improve AUC. Reverting changes.
Training on augumented user 126168 23/50 current_auc = 0.5573593073593074
User 126168 AUC after training: 0.5575998075998077
User 126168 improves AUC. Keeping the model.
Training on augumented user 86750 24/50 current_auc = 0.5575998075998077
User 86750 AUC after training: 0.5574795574795575
User 86750 does not improve AUC. Reverting changes.
Training on augumented user 25416 25/50 current_auc = 0.5575998075998077
User 25416 AUC after training: 0.5574795574795575
User 25416 does not improve AUC. Reverting changes.
Training on augumented user 41014 26/50 current_auc = 0.5575998075998077
User 41014 AUC after training: 0.5572390572390573
User 41014 does not improve AUC. Reverting changes.
Training on augumented user 31771 27/50 current_auc = 0.5575998075998077
User 31771 AUC after training: 0.5566378066378066
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 60432 28/50 current_auc = 0.5575998075998077
User 60432 AUC after training: 0.5572390572390573
User 60432 does not improve AUC. Reverting changes.
Training on augumented user 94903 29/50 current_auc = 0.5575998075998077
User 94903 AUC after training: 0.5566979316979317
User 94903 does not improve AUC. Reverting changes.
Training on augumented user 54837 30/50 current_auc = 0.5575998075998077
User 54837 AUC after training: 0.5566979316979317
User 54837 does not improve AUC. Reverting changes.
Training on augumented user 99389 31/50 current_auc = 0.5575998075998077
User 99389 AUC after training: 0.5571188071188071
User 99389 does not improve AUC. Reverting changes.
Training on augumented user 70127 32/50 current_auc = 0.5575998075998077
User 70127 AUC after training: 0.5565776815776816
User 70127 does not improve AUC. Reverting changes.
Training on augumented user 3048 33/50 current_auc = 0.5575998075998077
User 3048 AUC after training: 0.5573593073593074
User 3048 does not improve AUC. Reverting changes.
Training on augumented user 54671 34/50 current_auc = 0.5575998075998077
User 54671 AUC after training: 0.5566979316979317
User 54671 does not improve AUC. Reverting changes.
Training on augumented user 46951 35/50 current_auc = 0.5575998075998077
User 46951 AUC after training: 0.5577801827801828
User 46951 improves AUC. Keeping the model.
Training on augumented user 95378 36/50 current_auc = 0.5577801827801828
User 95378 AUC after training: 0.5580808080808081
User 95378 improves AUC. Keeping the model.
Training on augumented user 56369 37/50 current_auc = 0.5580808080808081
User 56369 AUC after training: 0.5578403078403078
User 56369 does not improve AUC. Reverting changes.
Training on augumented user 59250 38/50 current_auc = 0.5580808080808081
User 59250 AUC after training: 0.5578403078403078
User 59250 does not improve AUC. Reverting changes.
Training on augumented user 105702 39/50 current_auc = 0.5580808080808081
User 105702 AUC after training: 0.5575998075998077
User 105702 does not improve AUC. Reverting changes.
Training on augumented user 67285 40/50 current_auc = 0.5580808080808081
User 67285 AUC after training: 0.5577200577200577
User 67285 does not improve AUC. Reverting changes.
Training on augumented user 89290 41/50 current_auc = 0.5580808080808081
User 89290 AUC after training: 0.5578403078403078
User 89290 does not improve AUC. Reverting changes.
Training on augumented user 115459 42/50 current_auc = 0.5580808080808081
User 115459 AUC after training: 0.5572390572390573
User 115459 does not improve AUC. Reverting changes.
Training on augumented user 10927 43/50 current_auc = 0.5580808080808081
User 10927 AUC after training: 0.5578403078403078
User 10927 does not improve AUC. Reverting changes.
Training on augumented user 101373 44/50 current_auc = 0.5580808080808081
User 101373 AUC after training: 0.5566378066378067
User 101373 does not improve AUC. Reverting changes.
Training on augumented user 1014 45/50 current_auc = 0.5580808080808081
User 1014 AUC after training: 0.5578403078403078
User 1014 does not improve AUC. Reverting changes.
Training on augumented user 107363 46/50 current_auc = 0.5580808080808081
User 107363 AUC after training: 0.5577200577200577
User 107363 does not improve AUC. Reverting changes.
Training on augumented user 138238 47/50 current_auc = 0.5580808080808081
User 138238 AUC after training: 0.5575998075998077
User 138238 does not improve AUC. Reverting changes.
Training on augumented user 11822 48/50 current_auc = 0.5580808080808081
User 11822 AUC after training: 0.5578403078403079
User 11822 does not improve AUC. Reverting changes.
Training on augumented user 136291 49/50 current_auc = 0.5580808080808081
User 136291 AUC after training: 0.5575998075998077
User 136291 does not improve AUC. Reverting changes.
[2024-12-02 17:39:23.174574] start test user 123946 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:23.774644] start test user 123946 3/567 recall augumented users by random, augumented_users = [120828, 49869, 59366, 132493, 111632, 2740, 114675, 66661, 96147, 74876, 115374, 62835, 128677, 78459, 37242, 129051, 126494, 12367, 97717, 102537, 70586, 114432, 56227, 128529, 37267, 89528, 22823, 97544, 23440, 48429, 17803, 51681, 54252, 74048, 86794, 137204, 3217, 35502, 75607, 59010, 121586, 53757, 2614, 50549, 126949, 23837, 66323, 90192, 72668, 89797]
[2024-12-02 17:39:23.813381] user = 123946 Cloud 3/567
[2024-12-02 17:39:23.849150] user = 123946 Local 3/567
[2024-12-02 17:39:23.965199] user = 123946 Local+ 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:26.817697] user = 123946 MPDA- 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8527472527472527
Training on augumented user 120828 0/50 current_auc = 0.8527472527472527
User 120828 AUC after training: 0.8522588522588522
User 120828 does not improve AUC. Reverting changes.
Training on augumented user 49869 1/50 current_auc = 0.8527472527472527
User 49869 AUC after training: 0.8529914529914531
User 49869 improves AUC. Keeping the model.
Training on augumented user 59366 2/50 current_auc = 0.8529914529914531
User 59366 AUC after training: 0.8527472527472527
User 59366 does not improve AUC. Reverting changes.
Training on augumented user 132493 3/50 current_auc = 0.8529914529914531
User 132493 AUC after training: 0.8527472527472527
User 132493 does not improve AUC. Reverting changes.
Training on augumented user 111632 4/50 current_auc = 0.8529914529914531
User 111632 AUC after training: 0.8556776556776556
User 111632 improves AUC. Keeping the model.
Training on augumented user 2740 5/50 current_auc = 0.8556776556776556
User 2740 AUC after training: 0.8559218559218559
User 2740 improves AUC. Keeping the model.
Training on augumented user 114675 6/50 current_auc = 0.8559218559218559
User 114675 AUC after training: 0.8564102564102565
User 114675 improves AUC. Keeping the model.
Training on augumented user 66661 7/50 current_auc = 0.8564102564102565
User 66661 AUC after training: 0.8561660561660561
User 66661 does not improve AUC. Reverting changes.
Training on augumented user 96147 8/50 current_auc = 0.8564102564102565
User 96147 AUC after training: 0.855921855921856
User 96147 does not improve AUC. Reverting changes.
Training on augumented user 74876 9/50 current_auc = 0.8564102564102565
User 74876 AUC after training: 0.8556776556776556
User 74876 does not improve AUC. Reverting changes.
Training on augumented user 115374 10/50 current_auc = 0.8564102564102565
User 115374 AUC after training: 0.8551892551892551
User 115374 does not improve AUC. Reverting changes.
Training on augumented user 62835 11/50 current_auc = 0.8564102564102565
User 62835 AUC after training: 0.8564102564102565
User 62835 does not improve AUC. Reverting changes.
Training on augumented user 128677 12/50 current_auc = 0.8564102564102565
User 128677 AUC after training: 0.8551892551892553
User 128677 does not improve AUC. Reverting changes.
Training on augumented user 78459 13/50 current_auc = 0.8564102564102565
User 78459 AUC after training: 0.8556776556776557
User 78459 does not improve AUC. Reverting changes.
Training on augumented user 37242 14/50 current_auc = 0.8564102564102565
User 37242 AUC after training: 0.8559218559218559
User 37242 does not improve AUC. Reverting changes.
Training on augumented user 129051 15/50 current_auc = 0.8564102564102565
User 129051 AUC after training: 0.8566544566544567
User 129051 improves AUC. Keeping the model.
Training on augumented user 126494 16/50 current_auc = 0.8566544566544567
User 126494 AUC after training: 0.8556776556776556
User 126494 does not improve AUC. Reverting changes.
Training on augumented user 12367 17/50 current_auc = 0.8566544566544567
User 12367 AUC after training: 0.856898656898657
User 12367 improves AUC. Keeping the model.
Training on augumented user 97717 18/50 current_auc = 0.856898656898657
User 97717 AUC after training: 0.8551892551892551
User 97717 does not improve AUC. Reverting changes.
Training on augumented user 102537 19/50 current_auc = 0.856898656898657
User 102537 AUC after training: 0.8573870573870574
User 102537 improves AUC. Keeping the model.
Training on augumented user 70586 20/50 current_auc = 0.8573870573870574
User 70586 AUC after training: 0.856898656898657
User 70586 does not improve AUC. Reverting changes.
Training on augumented user 114432 21/50 current_auc = 0.8573870573870574
User 114432 AUC after training: 0.8573870573870574
User 114432 does not improve AUC. Reverting changes.
Training on augumented user 56227 22/50 current_auc = 0.8573870573870574
User 56227 AUC after training: 0.856898656898657
User 56227 does not improve AUC. Reverting changes.
Training on augumented user 128529 23/50 current_auc = 0.8573870573870574
User 128529 AUC after training: 0.856898656898657
User 128529 does not improve AUC. Reverting changes.
Training on augumented user 37267 24/50 current_auc = 0.8573870573870574
User 37267 AUC after training: 0.856898656898657
User 37267 does not improve AUC. Reverting changes.
Training on augumented user 89528 25/50 current_auc = 0.8573870573870574
User 89528 AUC after training: 0.8566544566544567
User 89528 does not improve AUC. Reverting changes.
Training on augumented user 22823 26/50 current_auc = 0.8573870573870574
User 22823 AUC after training: 0.8571428571428572
User 22823 does not improve AUC. Reverting changes.
Training on augumented user 97544 27/50 current_auc = 0.8573870573870574
User 97544 AUC after training: 0.8556776556776556
User 97544 does not improve AUC. Reverting changes.
Training on augumented user 23440 28/50 current_auc = 0.8573870573870574
User 23440 AUC after training: 0.8571428571428572
User 23440 does not improve AUC. Reverting changes.
Training on augumented user 48429 29/50 current_auc = 0.8573870573870574
User 48429 AUC after training: 0.8571428571428572
User 48429 does not improve AUC. Reverting changes.
Training on augumented user 17803 30/50 current_auc = 0.8573870573870574
User 17803 AUC after training: 0.8573870573870574
User 17803 does not improve AUC. Reverting changes.
Training on augumented user 51681 31/50 current_auc = 0.8573870573870574
User 51681 AUC after training: 0.8571428571428572
User 51681 does not improve AUC. Reverting changes.
Training on augumented user 54252 32/50 current_auc = 0.8573870573870574
User 54252 AUC after training: 0.856898656898657
User 54252 does not improve AUC. Reverting changes.
Training on augumented user 74048 33/50 current_auc = 0.8573870573870574
User 74048 AUC after training: 0.8556776556776556
User 74048 does not improve AUC. Reverting changes.
Training on augumented user 86794 34/50 current_auc = 0.8573870573870574
User 86794 AUC after training: 0.8566544566544567
User 86794 does not improve AUC. Reverting changes.
Training on augumented user 137204 35/50 current_auc = 0.8573870573870574
User 137204 AUC after training: 0.856898656898657
User 137204 does not improve AUC. Reverting changes.
Training on augumented user 3217 36/50 current_auc = 0.8573870573870574
User 3217 AUC after training: 0.8573870573870574
User 3217 does not improve AUC. Reverting changes.
Training on augumented user 35502 37/50 current_auc = 0.8573870573870574
User 35502 AUC after training: 0.8571428571428572
User 35502 does not improve AUC. Reverting changes.
Training on augumented user 75607 38/50 current_auc = 0.8573870573870574
User 75607 AUC after training: 0.856898656898657
User 75607 does not improve AUC. Reverting changes.
Training on augumented user 59010 39/50 current_auc = 0.8573870573870574
User 59010 AUC after training: 0.8564102564102564
User 59010 does not improve AUC. Reverting changes.
Training on augumented user 121586 40/50 current_auc = 0.8573870573870574
User 121586 AUC after training: 0.8571428571428572
User 121586 does not improve AUC. Reverting changes.
Training on augumented user 53757 41/50 current_auc = 0.8573870573870574
User 53757 AUC after training: 0.8571428571428572
User 53757 does not improve AUC. Reverting changes.
Training on augumented user 2614 42/50 current_auc = 0.8573870573870574
User 2614 AUC after training: 0.856898656898657
User 2614 does not improve AUC. Reverting changes.
Training on augumented user 50549 43/50 current_auc = 0.8573870573870574
User 50549 AUC after training: 0.8571428571428572
User 50549 does not improve AUC. Reverting changes.
Training on augumented user 126949 44/50 current_auc = 0.8573870573870574
User 126949 AUC after training: 0.856898656898657
User 126949 does not improve AUC. Reverting changes.
Training on augumented user 23837 45/50 current_auc = 0.8573870573870574
User 23837 AUC after training: 0.8571428571428571
User 23837 does not improve AUC. Reverting changes.
Training on augumented user 66323 46/50 current_auc = 0.8573870573870574
User 66323 AUC after training: 0.8573870573870574
User 66323 does not improve AUC. Reverting changes.
Training on augumented user 90192 47/50 current_auc = 0.8573870573870574
User 90192 AUC after training: 0.8554334554334555
User 90192 does not improve AUC. Reverting changes.
Training on augumented user 72668 48/50 current_auc = 0.8573870573870574
User 72668 AUC after training: 0.856898656898657
User 72668 does not improve AUC. Reverting changes.
Training on augumented user 89797 49/50 current_auc = 0.8573870573870574
User 89797 AUC after training: 0.8561660561660561
User 89797 does not improve AUC. Reverting changes.
[2024-12-02 17:39:54.635438] start test user 123981 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:55.050697] start test user 123981 4/567 recall augumented users by random, augumented_users = [119554, 117838, 57217, 62666, 121048, 85868, 30888, 90350, 19385, 82319, 117598, 73057, 52178, 57520, 72411, 58305, 19004, 101650, 97398, 96710, 56971, 78227, 87382, 28053, 22596, 54925, 98480, 93476, 60172, 92200, 104143, 18638, 34821, 81854, 128871, 26691, 108876, 83156, 118027, 51043, 74823, 126591, 70606, 94590, 29742, 68897, 63445, 11121, 130584, 18199]
[2024-12-02 17:39:55.065757] user = 123981 Cloud 4/567
[2024-12-02 17:39:55.076041] user = 123981 Local 4/567
[2024-12-02 17:39:55.165504] user = 123981 Local+ 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:57.742748] user = 123981 MPDA- 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6888111888111889
Training on augumented user 119554 0/50 current_auc = 0.6888111888111889
User 119554 AUC after training: 0.6870629370629371
User 119554 does not improve AUC. Reverting changes.
Training on augumented user 117838 1/50 current_auc = 0.6888111888111889
User 117838 AUC after training: 0.6888111888111887
User 117838 does not improve AUC. Reverting changes.
Training on augumented user 57217 2/50 current_auc = 0.6888111888111889
User 57217 AUC after training: 0.6870629370629371
User 57217 does not improve AUC. Reverting changes.
Training on augumented user 62666 3/50 current_auc = 0.6888111888111889
User 62666 AUC after training: 0.6835664335664335
User 62666 does not improve AUC. Reverting changes.
Training on augumented user 121048 4/50 current_auc = 0.6888111888111889
User 121048 AUC after training: 0.6870629370629371
User 121048 does not improve AUC. Reverting changes.
Training on augumented user 85868 5/50 current_auc = 0.6888111888111889
User 85868 AUC after training: 0.6888111888111889
User 85868 does not improve AUC. Reverting changes.
Training on augumented user 30888 6/50 current_auc = 0.6888111888111889
User 30888 AUC after training: 0.6870629370629371
User 30888 does not improve AUC. Reverting changes.
Training on augumented user 90350 7/50 current_auc = 0.6888111888111889
User 90350 AUC after training: 0.6853146853146853
User 90350 does not improve AUC. Reverting changes.
Training on augumented user 19385 8/50 current_auc = 0.6888111888111889
User 19385 AUC after training: 0.6923076923076923
User 19385 improves AUC. Keeping the model.
Training on augumented user 82319 9/50 current_auc = 0.6923076923076923
User 82319 AUC after training: 0.6993006993006994
User 82319 improves AUC. Keeping the model.
Training on augumented user 117598 10/50 current_auc = 0.6993006993006994
User 117598 AUC after training: 0.6993006993006994
User 117598 does not improve AUC. Reverting changes.
Training on augumented user 73057 11/50 current_auc = 0.6993006993006994
User 73057 AUC after training: 0.6940559440559441
User 73057 does not improve AUC. Reverting changes.
Training on augumented user 52178 12/50 current_auc = 0.6993006993006994
User 52178 AUC after training: 0.6993006993006993
User 52178 does not improve AUC. Reverting changes.
Training on augumented user 57520 13/50 current_auc = 0.6993006993006994
User 57520 AUC after training: 0.6958041958041958
User 57520 does not improve AUC. Reverting changes.
Training on augumented user 72411 14/50 current_auc = 0.6993006993006994
User 72411 AUC after training: 0.6958041958041958
User 72411 does not improve AUC. Reverting changes.
Training on augumented user 58305 15/50 current_auc = 0.6993006993006994
User 58305 AUC after training: 0.6958041958041958
User 58305 does not improve AUC. Reverting changes.
Training on augumented user 19004 16/50 current_auc = 0.6993006993006994
User 19004 AUC after training: 0.6993006993006993
User 19004 does not improve AUC. Reverting changes.
Training on augumented user 101650 17/50 current_auc = 0.6993006993006994
User 101650 AUC after training: 0.6975524475524475
User 101650 does not improve AUC. Reverting changes.
Training on augumented user 97398 18/50 current_auc = 0.6993006993006994
User 97398 AUC after training: 0.6905594405594406
User 97398 does not improve AUC. Reverting changes.
Training on augumented user 96710 19/50 current_auc = 0.6993006993006994
User 96710 AUC after training: 0.6975524475524475
User 96710 does not improve AUC. Reverting changes.
Training on augumented user 56971 20/50 current_auc = 0.6993006993006994
User 56971 AUC after training: 0.701048951048951
User 56971 improves AUC. Keeping the model.
Training on augumented user 78227 21/50 current_auc = 0.701048951048951
User 78227 AUC after training: 0.6975524475524476
User 78227 does not improve AUC. Reverting changes.
Training on augumented user 87382 22/50 current_auc = 0.701048951048951
User 87382 AUC after training: 0.6993006993006993
User 87382 does not improve AUC. Reverting changes.
Training on augumented user 28053 23/50 current_auc = 0.701048951048951
User 28053 AUC after training: 0.6993006993006994
User 28053 does not improve AUC. Reverting changes.
Training on augumented user 22596 24/50 current_auc = 0.701048951048951
User 22596 AUC after training: 0.701048951048951
User 22596 does not improve AUC. Reverting changes.
Training on augumented user 54925 25/50 current_auc = 0.701048951048951
User 54925 AUC after training: 0.6958041958041958
User 54925 does not improve AUC. Reverting changes.
Training on augumented user 98480 26/50 current_auc = 0.701048951048951
User 98480 AUC after training: 0.6993006993006993
User 98480 does not improve AUC. Reverting changes.
Training on augumented user 93476 27/50 current_auc = 0.701048951048951
User 93476 AUC after training: 0.6975524475524475
User 93476 does not improve AUC. Reverting changes.
Training on augumented user 60172 28/50 current_auc = 0.701048951048951
User 60172 AUC after training: 0.6993006993006994
User 60172 does not improve AUC. Reverting changes.
Training on augumented user 92200 29/50 current_auc = 0.701048951048951
User 92200 AUC after training: 0.701048951048951
User 92200 does not improve AUC. Reverting changes.
Training on augumented user 104143 30/50 current_auc = 0.701048951048951
User 104143 AUC after training: 0.6958041958041958
User 104143 does not improve AUC. Reverting changes.
Training on augumented user 18638 31/50 current_auc = 0.701048951048951
User 18638 AUC after training: 0.701048951048951
User 18638 does not improve AUC. Reverting changes.
Training on augumented user 34821 32/50 current_auc = 0.701048951048951
User 34821 AUC after training: 0.6975524475524475
User 34821 does not improve AUC. Reverting changes.
Training on augumented user 81854 33/50 current_auc = 0.701048951048951
User 81854 AUC after training: 0.6958041958041958
User 81854 does not improve AUC. Reverting changes.
Training on augumented user 128871 34/50 current_auc = 0.701048951048951
User 128871 AUC after training: 0.701048951048951
User 128871 does not improve AUC. Reverting changes.
Training on augumented user 26691 35/50 current_auc = 0.701048951048951
User 26691 AUC after training: 0.6993006993006993
User 26691 does not improve AUC. Reverting changes.
Training on augumented user 108876 36/50 current_auc = 0.701048951048951
User 108876 AUC after training: 0.6993006993006994
User 108876 does not improve AUC. Reverting changes.
Training on augumented user 83156 37/50 current_auc = 0.701048951048951
User 83156 AUC after training: 0.701048951048951
User 83156 does not improve AUC. Reverting changes.
Training on augumented user 118027 38/50 current_auc = 0.701048951048951
User 118027 AUC after training: 0.6993006993006994
User 118027 does not improve AUC. Reverting changes.
Training on augumented user 51043 39/50 current_auc = 0.701048951048951
User 51043 AUC after training: 0.6993006993006994
User 51043 does not improve AUC. Reverting changes.
Training on augumented user 74823 40/50 current_auc = 0.701048951048951
User 74823 AUC after training: 0.6958041958041958
User 74823 does not improve AUC. Reverting changes.
Training on augumented user 126591 41/50 current_auc = 0.701048951048951
User 126591 AUC after training: 0.701048951048951
User 126591 does not improve AUC. Reverting changes.
Training on augumented user 70606 42/50 current_auc = 0.701048951048951
User 70606 AUC after training: 0.6975524475524476
User 70606 does not improve AUC. Reverting changes.
Training on augumented user 94590 43/50 current_auc = 0.701048951048951
User 94590 AUC after training: 0.6993006993006993
User 94590 does not improve AUC. Reverting changes.
Training on augumented user 29742 44/50 current_auc = 0.701048951048951
User 29742 AUC after training: 0.6993006993006993
User 29742 does not improve AUC. Reverting changes.
Training on augumented user 68897 45/50 current_auc = 0.701048951048951
User 68897 AUC after training: 0.6993006993006994
User 68897 does not improve AUC. Reverting changes.
Training on augumented user 63445 46/50 current_auc = 0.701048951048951
User 63445 AUC after training: 0.6993006993006994
User 63445 does not improve AUC. Reverting changes.
Training on augumented user 11121 47/50 current_auc = 0.701048951048951
User 11121 AUC after training: 0.6993006993006994
User 11121 does not improve AUC. Reverting changes.
Training on augumented user 130584 48/50 current_auc = 0.701048951048951
User 130584 AUC after training: 0.6975524475524475
User 130584 does not improve AUC. Reverting changes.
Training on augumented user 18199 49/50 current_auc = 0.701048951048951
User 18199 AUC after training: 0.6975524475524475
User 18199 does not improve AUC. Reverting changes.
[2024-12-02 17:40:29.139300] start test user 123996 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:29.718776] start test user 123996 5/567 recall augumented users by random, augumented_users = [13718, 51072, 136265, 17589, 118104, 36577, 111474, 40848, 31636, 56206, 12349, 124835, 133622, 30498, 66514, 53005, 86650, 100441, 116032, 59187, 125552, 25875, 114381, 85942, 75928, 22352, 114980, 39752, 104804, 29227, 43749, 28244, 38801, 72298, 117665, 82005, 28479, 51238, 26493, 78608, 82086, 53667, 116507, 134436, 55916, 131324, 83763, 42271, 44990, 34085]
[2024-12-02 17:40:29.740405] user = 123996 Cloud 5/567
[2024-12-02 17:40:29.750479] user = 123996 Local 5/567
[2024-12-02 17:40:29.773834] user = 123996 Local+ 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:32.144264] user = 123996 MPDA- 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48275862068965514
Training on augumented user 13718 0/50 current_auc = 0.48275862068965514
User 13718 AUC after training: 0.48589341692789967
User 13718 improves AUC. Keeping the model.
Training on augumented user 51072 1/50 current_auc = 0.48589341692789967
User 51072 AUC after training: 0.48589341692789967
User 51072 does not improve AUC. Reverting changes.
Training on augumented user 136265 2/50 current_auc = 0.48589341692789967
User 136265 AUC after training: 0.48589341692789967
User 136265 does not improve AUC. Reverting changes.
Training on augumented user 17589 3/50 current_auc = 0.48589341692789967
User 17589 AUC after training: 0.48589341692789967
User 17589 does not improve AUC. Reverting changes.
Training on augumented user 118104 4/50 current_auc = 0.48589341692789967
User 118104 AUC after training: 0.48275862068965514
User 118104 does not improve AUC. Reverting changes.
Training on augumented user 36577 5/50 current_auc = 0.48589341692789967
User 36577 AUC after training: 0.48275862068965514
User 36577 does not improve AUC. Reverting changes.
Training on augumented user 111474 6/50 current_auc = 0.48589341692789967
User 111474 AUC after training: 0.48589341692789967
User 111474 does not improve AUC. Reverting changes.
Training on augumented user 40848 7/50 current_auc = 0.48589341692789967
User 40848 AUC after training: 0.48589341692789967
User 40848 does not improve AUC. Reverting changes.
Training on augumented user 31636 8/50 current_auc = 0.48589341692789967
User 31636 AUC after training: 0.48589341692789967
User 31636 does not improve AUC. Reverting changes.
Training on augumented user 56206 9/50 current_auc = 0.48589341692789967
User 56206 AUC after training: 0.48589341692789967
User 56206 does not improve AUC. Reverting changes.
Training on augumented user 12349 10/50 current_auc = 0.48589341692789967
User 12349 AUC after training: 0.48275862068965514
User 12349 does not improve AUC. Reverting changes.
Training on augumented user 124835 11/50 current_auc = 0.48589341692789967
User 124835 AUC after training: 0.48275862068965514
User 124835 does not improve AUC. Reverting changes.
Training on augumented user 133622 12/50 current_auc = 0.48589341692789967
User 133622 AUC after training: 0.48589341692789967
User 133622 does not improve AUC. Reverting changes.
Training on augumented user 30498 13/50 current_auc = 0.48589341692789967
User 30498 AUC after training: 0.48589341692789967
User 30498 does not improve AUC. Reverting changes.
Training on augumented user 66514 14/50 current_auc = 0.48589341692789967
User 66514 AUC after training: 0.48589341692789967
User 66514 does not improve AUC. Reverting changes.
Training on augumented user 53005 15/50 current_auc = 0.48589341692789967
User 53005 AUC after training: 0.48275862068965514
User 53005 does not improve AUC. Reverting changes.
Training on augumented user 86650 16/50 current_auc = 0.48589341692789967
User 86650 AUC after training: 0.48589341692789967
User 86650 does not improve AUC. Reverting changes.
Training on augumented user 100441 17/50 current_auc = 0.48589341692789967
User 100441 AUC after training: 0.4890282131661442
User 100441 improves AUC. Keeping the model.
Training on augumented user 116032 18/50 current_auc = 0.4890282131661442
User 116032 AUC after training: 0.4890282131661442
User 116032 does not improve AUC. Reverting changes.
Training on augumented user 59187 19/50 current_auc = 0.4890282131661442
User 59187 AUC after training: 0.4890282131661442
User 59187 does not improve AUC. Reverting changes.
Training on augumented user 125552 20/50 current_auc = 0.4890282131661442
User 125552 AUC after training: 0.4890282131661442
User 125552 does not improve AUC. Reverting changes.
Training on augumented user 25875 21/50 current_auc = 0.4890282131661442
User 25875 AUC after training: 0.49216300940438873
User 25875 improves AUC. Keeping the model.
Training on augumented user 114381 22/50 current_auc = 0.49216300940438873
User 114381 AUC after training: 0.4890282131661442
User 114381 does not improve AUC. Reverting changes.
Training on augumented user 85942 23/50 current_auc = 0.49216300940438873
User 85942 AUC after training: 0.4858934169278997
User 85942 does not improve AUC. Reverting changes.
Training on augumented user 75928 24/50 current_auc = 0.49216300940438873
User 75928 AUC after training: 0.49216300940438873
User 75928 does not improve AUC. Reverting changes.
Training on augumented user 22352 25/50 current_auc = 0.49216300940438873
User 22352 AUC after training: 0.47335423197492166
User 22352 does not improve AUC. Reverting changes.
Training on augumented user 114980 26/50 current_auc = 0.49216300940438873
User 114980 AUC after training: 0.4858934169278997
User 114980 does not improve AUC. Reverting changes.
Training on augumented user 39752 27/50 current_auc = 0.49216300940438873
User 39752 AUC after training: 0.4890282131661442
User 39752 does not improve AUC. Reverting changes.
Training on augumented user 104804 28/50 current_auc = 0.49216300940438873
User 104804 AUC after training: 0.4796238244514106
User 104804 does not improve AUC. Reverting changes.
Training on augumented user 29227 29/50 current_auc = 0.49216300940438873
User 29227 AUC after training: 0.4858934169278997
User 29227 does not improve AUC. Reverting changes.
Training on augumented user 43749 30/50 current_auc = 0.49216300940438873
User 43749 AUC after training: 0.47962382445141066
User 43749 does not improve AUC. Reverting changes.
Training on augumented user 28244 31/50 current_auc = 0.49216300940438873
User 28244 AUC after training: 0.49216300940438873
User 28244 does not improve AUC. Reverting changes.
Training on augumented user 38801 32/50 current_auc = 0.49216300940438873
User 38801 AUC after training: 0.49216300940438873
User 38801 does not improve AUC. Reverting changes.
Training on augumented user 72298 33/50 current_auc = 0.49216300940438873
User 72298 AUC after training: 0.49216300940438873
User 72298 does not improve AUC. Reverting changes.
Training on augumented user 117665 34/50 current_auc = 0.49216300940438873
User 117665 AUC after training: 0.4890282131661442
User 117665 does not improve AUC. Reverting changes.
Training on augumented user 82005 35/50 current_auc = 0.49216300940438873
User 82005 AUC after training: 0.49216300940438873
User 82005 does not improve AUC. Reverting changes.
Training on augumented user 28479 36/50 current_auc = 0.49216300940438873
User 28479 AUC after training: 0.4890282131661442
User 28479 does not improve AUC. Reverting changes.
Training on augumented user 51238 37/50 current_auc = 0.49216300940438873
User 51238 AUC after training: 0.49216300940438873
User 51238 does not improve AUC. Reverting changes.
Training on augumented user 26493 38/50 current_auc = 0.49216300940438873
User 26493 AUC after training: 0.4796238244514106
User 26493 does not improve AUC. Reverting changes.
Training on augumented user 78608 39/50 current_auc = 0.49216300940438873
User 78608 AUC after training: 0.49216300940438873
User 78608 does not improve AUC. Reverting changes.
Training on augumented user 82086 40/50 current_auc = 0.49216300940438873
User 82086 AUC after training: 0.4890282131661442
User 82086 does not improve AUC. Reverting changes.
Training on augumented user 53667 41/50 current_auc = 0.49216300940438873
User 53667 AUC after training: 0.4858934169278997
User 53667 does not improve AUC. Reverting changes.
Training on augumented user 116507 42/50 current_auc = 0.49216300940438873
User 116507 AUC after training: 0.48589341692789967
User 116507 does not improve AUC. Reverting changes.
Training on augumented user 134436 43/50 current_auc = 0.49216300940438873
User 134436 AUC after training: 0.4827586206896552
User 134436 does not improve AUC. Reverting changes.
Training on augumented user 55916 44/50 current_auc = 0.49216300940438873
User 55916 AUC after training: 0.4827586206896552
User 55916 does not improve AUC. Reverting changes.
Training on augumented user 131324 45/50 current_auc = 0.49216300940438873
User 131324 AUC after training: 0.49216300940438873
User 131324 does not improve AUC. Reverting changes.
Training on augumented user 83763 46/50 current_auc = 0.49216300940438873
User 83763 AUC after training: 0.49216300940438873
User 83763 does not improve AUC. Reverting changes.
Training on augumented user 42271 47/50 current_auc = 0.49216300940438873
User 42271 AUC after training: 0.4890282131661442
User 42271 does not improve AUC. Reverting changes.
Training on augumented user 44990 48/50 current_auc = 0.49216300940438873
User 44990 AUC after training: 0.49216300940438873
User 44990 does not improve AUC. Reverting changes.
Training on augumented user 34085 49/50 current_auc = 0.49216300940438873
User 34085 AUC after training: 0.47962382445141066
User 34085 does not improve AUC. Reverting changes.
[2024-12-02 17:40:58.910663] start test user 124040 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:59.393055] start test user 124040 6/567 recall augumented users by random, augumented_users = [42464, 102175, 86661, 96606, 75384, 1290, 124051, 20908, 74288, 8357, 44921, 22256, 18165, 40817, 132078, 45699, 77676, 5717, 108909, 121480, 43565, 4887, 81712, 123321, 130906, 47839, 25814, 49442, 79746, 98830, 50109, 98499, 99243, 40765, 42633, 14295, 100670, 34560, 121925, 16531, 53862, 46332, 56839, 21864, 93291, 62316, 58772, 18312, 115729, 138019]
[2024-12-02 17:40:59.414161] user = 124040 Cloud 6/567
[2024-12-02 17:40:59.435323] user = 124040 Local 6/567
[2024-12-02 17:40:59.584027] user = 124040 Local+ 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:02.347580] user = 124040 MPDA- 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6545545047287207
Training on augumented user 42464 0/50 current_auc = 0.6545545047287207
User 42464 AUC after training: 0.6545545047287207
User 42464 does not improve AUC. Reverting changes.
Training on augumented user 102175 1/50 current_auc = 0.6545545047287207
User 102175 AUC after training: 0.6545545047287207
User 102175 does not improve AUC. Reverting changes.
Training on augumented user 86661 2/50 current_auc = 0.6545545047287207
User 86661 AUC after training: 0.6545545047287207
User 86661 does not improve AUC. Reverting changes.
Training on augumented user 96606 3/50 current_auc = 0.6545545047287207
User 96606 AUC after training: 0.6545545047287207
User 96606 does not improve AUC. Reverting changes.
Training on augumented user 75384 4/50 current_auc = 0.6545545047287207
User 75384 AUC after training: 0.6540567446490791
User 75384 does not improve AUC. Reverting changes.
Training on augumented user 1290 5/50 current_auc = 0.6545545047287207
User 1290 AUC after training: 0.6545545047287207
User 1290 does not improve AUC. Reverting changes.
Training on augumented user 124051 6/50 current_auc = 0.6545545047287207
User 124051 AUC after training: 0.653061224489796
User 124051 does not improve AUC. Reverting changes.
Training on augumented user 20908 7/50 current_auc = 0.6545545047287207
User 20908 AUC after training: 0.6550522648083623
User 20908 improves AUC. Keeping the model.
Training on augumented user 74288 8/50 current_auc = 0.6550522648083623
User 74288 AUC after training: 0.6545545047287207
User 74288 does not improve AUC. Reverting changes.
Training on augumented user 8357 9/50 current_auc = 0.6550522648083623
User 8357 AUC after training: 0.654056744649079
User 8357 does not improve AUC. Reverting changes.
Training on augumented user 44921 10/50 current_auc = 0.6550522648083623
User 44921 AUC after training: 0.6555500248880041
User 44921 improves AUC. Keeping the model.
Training on augumented user 22256 11/50 current_auc = 0.6555500248880041
User 22256 AUC after training: 0.6555500248880041
User 22256 does not improve AUC. Reverting changes.
Training on augumented user 18165 12/50 current_auc = 0.6555500248880041
User 18165 AUC after training: 0.6535589845694375
User 18165 does not improve AUC. Reverting changes.
Training on augumented user 40817 13/50 current_auc = 0.6555500248880041
User 40817 AUC after training: 0.6545545047287207
User 40817 does not improve AUC. Reverting changes.
Training on augumented user 132078 14/50 current_auc = 0.6555500248880041
User 132078 AUC after training: 0.6550522648083623
User 132078 does not improve AUC. Reverting changes.
Training on augumented user 45699 15/50 current_auc = 0.6555500248880041
User 45699 AUC after training: 0.6535589845694375
User 45699 does not improve AUC. Reverting changes.
Training on augumented user 77676 16/50 current_auc = 0.6555500248880041
User 77676 AUC after training: 0.6550522648083623
User 77676 does not improve AUC. Reverting changes.
Training on augumented user 5717 17/50 current_auc = 0.6555500248880041
User 5717 AUC after training: 0.6545545047287208
User 5717 does not improve AUC. Reverting changes.
Training on augumented user 108909 18/50 current_auc = 0.6555500248880041
User 108909 AUC after training: 0.653061224489796
User 108909 does not improve AUC. Reverting changes.
Training on augumented user 121480 19/50 current_auc = 0.6555500248880041
User 121480 AUC after training: 0.6535589845694376
User 121480 does not improve AUC. Reverting changes.
Training on augumented user 43565 20/50 current_auc = 0.6555500248880041
User 43565 AUC after training: 0.6545545047287207
User 43565 does not improve AUC. Reverting changes.
Training on augumented user 4887 21/50 current_auc = 0.6555500248880041
User 4887 AUC after training: 0.6550522648083624
User 4887 does not improve AUC. Reverting changes.
Training on augumented user 81712 22/50 current_auc = 0.6555500248880041
User 81712 AUC after training: 0.6550522648083623
User 81712 does not improve AUC. Reverting changes.
Training on augumented user 123321 23/50 current_auc = 0.6555500248880041
User 123321 AUC after training: 0.6570433051269289
User 123321 improves AUC. Keeping the model.
Training on augumented user 130906 24/50 current_auc = 0.6570433051269289
User 130906 AUC after training: 0.655550024888004
User 130906 does not improve AUC. Reverting changes.
Training on augumented user 47839 25/50 current_auc = 0.6570433051269289
User 47839 AUC after training: 0.6570433051269289
User 47839 does not improve AUC. Reverting changes.
Training on augumented user 25814 26/50 current_auc = 0.6570433051269289
User 25814 AUC after training: 0.6545545047287208
User 25814 does not improve AUC. Reverting changes.
Training on augumented user 49442 27/50 current_auc = 0.6570433051269289
User 49442 AUC after training: 0.6560477849676456
User 49442 does not improve AUC. Reverting changes.
Training on augumented user 79746 28/50 current_auc = 0.6570433051269289
User 79746 AUC after training: 0.6550522648083623
User 79746 does not improve AUC. Reverting changes.
Training on augumented user 98830 29/50 current_auc = 0.6570433051269289
User 98830 AUC after training: 0.6560477849676456
User 98830 does not improve AUC. Reverting changes.
Training on augumented user 50109 30/50 current_auc = 0.6570433051269289
User 50109 AUC after training: 0.655550024888004
User 50109 does not improve AUC. Reverting changes.
Training on augumented user 98499 31/50 current_auc = 0.6570433051269289
User 98499 AUC after training: 0.6560477849676456
User 98499 does not improve AUC. Reverting changes.
Training on augumented user 99243 32/50 current_auc = 0.6570433051269289
User 99243 AUC after training: 0.6570433051269289
User 99243 does not improve AUC. Reverting changes.
Training on augumented user 40765 33/50 current_auc = 0.6570433051269289
User 40765 AUC after training: 0.6565455450472872
User 40765 does not improve AUC. Reverting changes.
Training on augumented user 42633 34/50 current_auc = 0.6570433051269289
User 42633 AUC after training: 0.6565455450472872
User 42633 does not improve AUC. Reverting changes.
Training on augumented user 14295 35/50 current_auc = 0.6570433051269289
User 14295 AUC after training: 0.6565455450472872
User 14295 does not improve AUC. Reverting changes.
Training on augumented user 100670 36/50 current_auc = 0.6570433051269289
User 100670 AUC after training: 0.6560477849676456
User 100670 does not improve AUC. Reverting changes.
Training on augumented user 34560 37/50 current_auc = 0.6570433051269289
User 34560 AUC after training: 0.6560477849676456
User 34560 does not improve AUC. Reverting changes.
Training on augumented user 121925 38/50 current_auc = 0.6570433051269289
User 121925 AUC after training: 0.655550024888004
User 121925 does not improve AUC. Reverting changes.
Training on augumented user 16531 39/50 current_auc = 0.6570433051269289
User 16531 AUC after training: 0.6560477849676456
User 16531 does not improve AUC. Reverting changes.
Training on augumented user 53862 40/50 current_auc = 0.6570433051269289
User 53862 AUC after training: 0.6570433051269289
User 53862 does not improve AUC. Reverting changes.
Training on augumented user 46332 41/50 current_auc = 0.6570433051269289
User 46332 AUC after training: 0.6565455450472872
User 46332 does not improve AUC. Reverting changes.
Training on augumented user 56839 42/50 current_auc = 0.6570433051269289
User 56839 AUC after training: 0.6565455450472872
User 56839 does not improve AUC. Reverting changes.
Training on augumented user 21864 43/50 current_auc = 0.6570433051269289
User 21864 AUC after training: 0.6565455450472872
User 21864 does not improve AUC. Reverting changes.
Training on augumented user 93291 44/50 current_auc = 0.6570433051269289
User 93291 AUC after training: 0.6560477849676456
User 93291 does not improve AUC. Reverting changes.
Training on augumented user 62316 45/50 current_auc = 0.6570433051269289
User 62316 AUC after training: 0.6565455450472872
User 62316 does not improve AUC. Reverting changes.
Training on augumented user 58772 46/50 current_auc = 0.6570433051269289
User 58772 AUC after training: 0.655550024888004
User 58772 does not improve AUC. Reverting changes.
Training on augumented user 18312 47/50 current_auc = 0.6570433051269289
User 18312 AUC after training: 0.6560477849676456
User 18312 does not improve AUC. Reverting changes.
Training on augumented user 115729 48/50 current_auc = 0.6570433051269289
User 115729 AUC after training: 0.6560477849676456
User 115729 does not improve AUC. Reverting changes.
Training on augumented user 138019 49/50 current_auc = 0.6570433051269289
User 138019 AUC after training: 0.6570433051269289
User 138019 does not improve AUC. Reverting changes.
[2024-12-02 17:41:32.839126] start test user 124078 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:33.684790] start test user 124078 7/567 recall augumented users by random, augumented_users = [119295, 1617, 4170, 34635, 29550, 12681, 90343, 2783, 91696, 4256, 58519, 34244, 95150, 106683, 133446, 49390, 4993, 19943, 87583, 48874, 75647, 131077, 124050, 92846, 32759, 125689, 137633, 30596, 79192, 111942, 22040, 30257, 84797, 74899, 83806, 82382, 95196, 45302, 82726, 55451, 117777, 132774, 31163, 118058, 68127, 124181, 26450, 111120, 4023, 1212]
[2024-12-02 17:41:33.721720] user = 124078 Cloud 7/567
[2024-12-02 17:41:33.732845] user = 124078 Local 7/567
[2024-12-02 17:41:34.046690] user = 124078 Local+ 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:36.026581] user = 124078 MPDA- 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6333333333333333
Training on augumented user 119295 0/50 current_auc = 0.6333333333333333
User 119295 AUC after training: 0.6303030303030304
User 119295 does not improve AUC. Reverting changes.
Training on augumented user 1617 1/50 current_auc = 0.6333333333333333
User 1617 AUC after training: 0.6333333333333333
User 1617 does not improve AUC. Reverting changes.
Training on augumented user 4170 2/50 current_auc = 0.6333333333333333
User 4170 AUC after training: 0.6333333333333333
User 4170 does not improve AUC. Reverting changes.
Training on augumented user 34635 3/50 current_auc = 0.6333333333333333
User 34635 AUC after training: 0.6333333333333333
User 34635 does not improve AUC. Reverting changes.
Training on augumented user 29550 4/50 current_auc = 0.6333333333333333
User 29550 AUC after training: 0.6333333333333333
User 29550 does not improve AUC. Reverting changes.
Training on augumented user 12681 5/50 current_auc = 0.6333333333333333
User 12681 AUC after training: 0.6333333333333333
User 12681 does not improve AUC. Reverting changes.
Training on augumented user 90343 6/50 current_auc = 0.6333333333333333
User 90343 AUC after training: 0.6333333333333333
User 90343 does not improve AUC. Reverting changes.
Training on augumented user 2783 7/50 current_auc = 0.6333333333333333
User 2783 AUC after training: 0.6333333333333333
User 2783 does not improve AUC. Reverting changes.
Training on augumented user 91696 8/50 current_auc = 0.6333333333333333
User 91696 AUC after training: 0.6333333333333333
User 91696 does not improve AUC. Reverting changes.
Training on augumented user 4256 9/50 current_auc = 0.6333333333333333
User 4256 AUC after training: 0.6333333333333333
User 4256 does not improve AUC. Reverting changes.
Training on augumented user 58519 10/50 current_auc = 0.6333333333333333
User 58519 AUC after training: 0.6333333333333333
User 58519 does not improve AUC. Reverting changes.
Training on augumented user 34244 11/50 current_auc = 0.6333333333333333
User 34244 AUC after training: 0.6333333333333333
User 34244 does not improve AUC. Reverting changes.
Training on augumented user 95150 12/50 current_auc = 0.6333333333333333
User 95150 AUC after training: 0.6333333333333333
User 95150 does not improve AUC. Reverting changes.
Training on augumented user 106683 13/50 current_auc = 0.6333333333333333
User 106683 AUC after training: 0.6333333333333333
User 106683 does not improve AUC. Reverting changes.
Training on augumented user 133446 14/50 current_auc = 0.6333333333333333
User 133446 AUC after training: 0.6333333333333333
User 133446 does not improve AUC. Reverting changes.
Training on augumented user 49390 15/50 current_auc = 0.6333333333333333
User 49390 AUC after training: 0.6333333333333333
User 49390 does not improve AUC. Reverting changes.
Training on augumented user 4993 16/50 current_auc = 0.6333333333333333
User 4993 AUC after training: 0.6333333333333333
User 4993 does not improve AUC. Reverting changes.
Training on augumented user 19943 17/50 current_auc = 0.6333333333333333
User 19943 AUC after training: 0.6333333333333333
User 19943 does not improve AUC. Reverting changes.
Training on augumented user 87583 18/50 current_auc = 0.6333333333333333
User 87583 AUC after training: 0.6333333333333333
User 87583 does not improve AUC. Reverting changes.
Training on augumented user 48874 19/50 current_auc = 0.6333333333333333
User 48874 AUC after training: 0.6333333333333333
User 48874 does not improve AUC. Reverting changes.
Training on augumented user 75647 20/50 current_auc = 0.6333333333333333
User 75647 AUC after training: 0.6333333333333333
User 75647 does not improve AUC. Reverting changes.
Training on augumented user 131077 21/50 current_auc = 0.6333333333333333
User 131077 AUC after training: 0.6333333333333333
User 131077 does not improve AUC. Reverting changes.
Training on augumented user 124050 22/50 current_auc = 0.6333333333333333
User 124050 AUC after training: 0.6333333333333333
User 124050 does not improve AUC. Reverting changes.
Training on augumented user 92846 23/50 current_auc = 0.6333333333333333
User 92846 AUC after training: 0.6333333333333333
User 92846 does not improve AUC. Reverting changes.
Training on augumented user 32759 24/50 current_auc = 0.6333333333333333
User 32759 AUC after training: 0.6333333333333333
User 32759 does not improve AUC. Reverting changes.
Training on augumented user 125689 25/50 current_auc = 0.6333333333333333
User 125689 AUC after training: 0.6333333333333333
User 125689 does not improve AUC. Reverting changes.
Training on augumented user 137633 26/50 current_auc = 0.6333333333333333
User 137633 AUC after training: 0.6333333333333333
User 137633 does not improve AUC. Reverting changes.
Training on augumented user 30596 27/50 current_auc = 0.6333333333333333
User 30596 AUC after training: 0.6333333333333333
User 30596 does not improve AUC. Reverting changes.
Training on augumented user 79192 28/50 current_auc = 0.6333333333333333
User 79192 AUC after training: 0.6333333333333333
User 79192 does not improve AUC. Reverting changes.
Training on augumented user 111942 29/50 current_auc = 0.6333333333333333
User 111942 AUC after training: 0.6333333333333333
User 111942 does not improve AUC. Reverting changes.
Training on augumented user 22040 30/50 current_auc = 0.6333333333333333
User 22040 AUC after training: 0.6333333333333333
User 22040 does not improve AUC. Reverting changes.
Training on augumented user 30257 31/50 current_auc = 0.6333333333333333
User 30257 AUC after training: 0.6333333333333333
User 30257 does not improve AUC. Reverting changes.
Training on augumented user 84797 32/50 current_auc = 0.6333333333333333
User 84797 AUC after training: 0.6333333333333333
User 84797 does not improve AUC. Reverting changes.
Training on augumented user 74899 33/50 current_auc = 0.6333333333333333
User 74899 AUC after training: 0.6333333333333333
User 74899 does not improve AUC. Reverting changes.
Training on augumented user 83806 34/50 current_auc = 0.6333333333333333
User 83806 AUC after training: 0.6303030303030304
User 83806 does not improve AUC. Reverting changes.
Training on augumented user 82382 35/50 current_auc = 0.6333333333333333
User 82382 AUC after training: 0.6333333333333333
User 82382 does not improve AUC. Reverting changes.
Training on augumented user 95196 36/50 current_auc = 0.6333333333333333
User 95196 AUC after training: 0.6333333333333333
User 95196 does not improve AUC. Reverting changes.
Training on augumented user 45302 37/50 current_auc = 0.6333333333333333
User 45302 AUC after training: 0.6333333333333333
User 45302 does not improve AUC. Reverting changes.
Training on augumented user 82726 38/50 current_auc = 0.6333333333333333
User 82726 AUC after training: 0.6333333333333333
User 82726 does not improve AUC. Reverting changes.
Training on augumented user 55451 39/50 current_auc = 0.6333333333333333
User 55451 AUC after training: 0.6333333333333333
User 55451 does not improve AUC. Reverting changes.
Training on augumented user 117777 40/50 current_auc = 0.6333333333333333
User 117777 AUC after training: 0.6333333333333333
User 117777 does not improve AUC. Reverting changes.
Training on augumented user 132774 41/50 current_auc = 0.6333333333333333
User 132774 AUC after training: 0.6333333333333333
User 132774 does not improve AUC. Reverting changes.
Training on augumented user 31163 42/50 current_auc = 0.6333333333333333
User 31163 AUC after training: 0.6333333333333333
User 31163 does not improve AUC. Reverting changes.
Training on augumented user 118058 43/50 current_auc = 0.6333333333333333
User 118058 AUC after training: 0.6333333333333333
User 118058 does not improve AUC. Reverting changes.
Training on augumented user 68127 44/50 current_auc = 0.6333333333333333
User 68127 AUC after training: 0.6333333333333333
User 68127 does not improve AUC. Reverting changes.
Training on augumented user 124181 45/50 current_auc = 0.6333333333333333
User 124181 AUC after training: 0.6303030303030304
User 124181 does not improve AUC. Reverting changes.
Training on augumented user 26450 46/50 current_auc = 0.6333333333333333
User 26450 AUC after training: 0.6333333333333333
User 26450 does not improve AUC. Reverting changes.
Training on augumented user 111120 47/50 current_auc = 0.6333333333333333
User 111120 AUC after training: 0.6333333333333333
User 111120 does not improve AUC. Reverting changes.
Training on augumented user 4023 48/50 current_auc = 0.6333333333333333
User 4023 AUC after training: 0.6333333333333333
User 4023 does not improve AUC. Reverting changes.
Training on augumented user 1212 49/50 current_auc = 0.6333333333333333
User 1212 AUC after training: 0.6333333333333333
User 1212 does not improve AUC. Reverting changes.
[2024-12-02 17:42:05.824976] start test user 124087 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:06.609316] start test user 124087 8/567 recall augumented users by random, augumented_users = [96894, 124357, 31475, 95231, 2254, 135350, 84910, 8111, 70121, 40995, 119873, 135050, 87498, 111124, 92345, 1292, 19801, 134855, 89879, 6070, 28948, 120591, 120894, 681, 64719, 10937, 41330, 12683, 132926, 21883, 91957, 89730, 57911, 71402, 137748, 60545, 9058, 10484, 108360, 123126, 131994, 41648, 114431, 48861, 99266, 116171, 13256, 21174, 92737, 45307]
[2024-12-02 17:42:06.626105] user = 124087 Cloud 8/567
[2024-12-02 17:42:06.637174] user = 124087 Local 8/567
[2024-12-02 17:42:06.712444] user = 124087 Local+ 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:09.216274] user = 124087 MPDA- 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 96894 0/50 current_auc = 1.0
User 96894 AUC after training: 1.0
User 96894 does not improve AUC. Reverting changes.
Training on augumented user 124357 1/50 current_auc = 1.0
User 124357 AUC after training: 1.0
User 124357 does not improve AUC. Reverting changes.
Training on augumented user 31475 2/50 current_auc = 1.0
User 31475 AUC after training: 1.0
User 31475 does not improve AUC. Reverting changes.
Training on augumented user 95231 3/50 current_auc = 1.0
User 95231 AUC after training: 1.0
User 95231 does not improve AUC. Reverting changes.
Training on augumented user 2254 4/50 current_auc = 1.0
User 2254 AUC after training: 1.0
User 2254 does not improve AUC. Reverting changes.
Training on augumented user 135350 5/50 current_auc = 1.0
User 135350 AUC after training: 1.0
User 135350 does not improve AUC. Reverting changes.
Training on augumented user 84910 6/50 current_auc = 1.0
User 84910 AUC after training: 1.0
User 84910 does not improve AUC. Reverting changes.
Training on augumented user 8111 7/50 current_auc = 1.0
User 8111 AUC after training: 1.0
User 8111 does not improve AUC. Reverting changes.
Training on augumented user 70121 8/50 current_auc = 1.0
User 70121 AUC after training: 1.0
User 70121 does not improve AUC. Reverting changes.
Training on augumented user 40995 9/50 current_auc = 1.0
User 40995 AUC after training: 1.0
User 40995 does not improve AUC. Reverting changes.
Training on augumented user 119873 10/50 current_auc = 1.0
User 119873 AUC after training: 1.0
User 119873 does not improve AUC. Reverting changes.
Training on augumented user 135050 11/50 current_auc = 1.0
User 135050 AUC after training: 1.0
User 135050 does not improve AUC. Reverting changes.
Training on augumented user 87498 12/50 current_auc = 1.0
User 87498 AUC after training: 1.0
User 87498 does not improve AUC. Reverting changes.
Training on augumented user 111124 13/50 current_auc = 1.0
User 111124 AUC after training: 1.0
User 111124 does not improve AUC. Reverting changes.
Training on augumented user 92345 14/50 current_auc = 1.0
User 92345 AUC after training: 1.0
User 92345 does not improve AUC. Reverting changes.
Training on augumented user 1292 15/50 current_auc = 1.0
User 1292 AUC after training: 1.0
User 1292 does not improve AUC. Reverting changes.
Training on augumented user 19801 16/50 current_auc = 1.0
User 19801 AUC after training: 1.0
User 19801 does not improve AUC. Reverting changes.
Training on augumented user 134855 17/50 current_auc = 1.0
User 134855 AUC after training: 1.0
User 134855 does not improve AUC. Reverting changes.
Training on augumented user 89879 18/50 current_auc = 1.0
User 89879 AUC after training: 1.0
User 89879 does not improve AUC. Reverting changes.
Training on augumented user 6070 19/50 current_auc = 1.0
User 6070 AUC after training: 1.0
User 6070 does not improve AUC. Reverting changes.
Training on augumented user 28948 20/50 current_auc = 1.0
User 28948 AUC after training: 1.0
User 28948 does not improve AUC. Reverting changes.
Training on augumented user 120591 21/50 current_auc = 1.0
User 120591 AUC after training: 1.0
User 120591 does not improve AUC. Reverting changes.
Training on augumented user 120894 22/50 current_auc = 1.0
User 120894 AUC after training: 1.0
User 120894 does not improve AUC. Reverting changes.
Training on augumented user 681 23/50 current_auc = 1.0
User 681 AUC after training: 1.0
User 681 does not improve AUC. Reverting changes.
Training on augumented user 64719 24/50 current_auc = 1.0
User 64719 AUC after training: 1.0
User 64719 does not improve AUC. Reverting changes.
Training on augumented user 10937 25/50 current_auc = 1.0
User 10937 AUC after training: 1.0
User 10937 does not improve AUC. Reverting changes.
Training on augumented user 41330 26/50 current_auc = 1.0
User 41330 AUC after training: 1.0
User 41330 does not improve AUC. Reverting changes.
Training on augumented user 12683 27/50 current_auc = 1.0
User 12683 AUC after training: 1.0
User 12683 does not improve AUC. Reverting changes.
Training on augumented user 132926 28/50 current_auc = 1.0
User 132926 AUC after training: 1.0
User 132926 does not improve AUC. Reverting changes.
Training on augumented user 21883 29/50 current_auc = 1.0
User 21883 AUC after training: 1.0
User 21883 does not improve AUC. Reverting changes.
Training on augumented user 91957 30/50 current_auc = 1.0
User 91957 AUC after training: 1.0
User 91957 does not improve AUC. Reverting changes.
Training on augumented user 89730 31/50 current_auc = 1.0
User 89730 AUC after training: 1.0
User 89730 does not improve AUC. Reverting changes.
Training on augumented user 57911 32/50 current_auc = 1.0
User 57911 AUC after training: 1.0
User 57911 does not improve AUC. Reverting changes.
Training on augumented user 71402 33/50 current_auc = 1.0
User 71402 AUC after training: 1.0
User 71402 does not improve AUC. Reverting changes.
Training on augumented user 137748 34/50 current_auc = 1.0
User 137748 AUC after training: 1.0
User 137748 does not improve AUC. Reverting changes.
Training on augumented user 60545 35/50 current_auc = 1.0
User 60545 AUC after training: 1.0
User 60545 does not improve AUC. Reverting changes.
Training on augumented user 9058 36/50 current_auc = 1.0
User 9058 AUC after training: 1.0
User 9058 does not improve AUC. Reverting changes.
Training on augumented user 10484 37/50 current_auc = 1.0
User 10484 AUC after training: 1.0
User 10484 does not improve AUC. Reverting changes.
Training on augumented user 108360 38/50 current_auc = 1.0
User 108360 AUC after training: 1.0
User 108360 does not improve AUC. Reverting changes.
Training on augumented user 123126 39/50 current_auc = 1.0
User 123126 AUC after training: 1.0
User 123126 does not improve AUC. Reverting changes.
Training on augumented user 131994 40/50 current_auc = 1.0
User 131994 AUC after training: 1.0
User 131994 does not improve AUC. Reverting changes.
Training on augumented user 41648 41/50 current_auc = 1.0
User 41648 AUC after training: 1.0
User 41648 does not improve AUC. Reverting changes.
Training on augumented user 114431 42/50 current_auc = 1.0
User 114431 AUC after training: 1.0
User 114431 does not improve AUC. Reverting changes.
Training on augumented user 48861 43/50 current_auc = 1.0
User 48861 AUC after training: 1.0
User 48861 does not improve AUC. Reverting changes.
Training on augumented user 99266 44/50 current_auc = 1.0
User 99266 AUC after training: 1.0
User 99266 does not improve AUC. Reverting changes.
Training on augumented user 116171 45/50 current_auc = 1.0
User 116171 AUC after training: 1.0
User 116171 does not improve AUC. Reverting changes.
Training on augumented user 13256 46/50 current_auc = 1.0
User 13256 AUC after training: 1.0
User 13256 does not improve AUC. Reverting changes.
Training on augumented user 21174 47/50 current_auc = 1.0
User 21174 AUC after training: 1.0
User 21174 does not improve AUC. Reverting changes.
Training on augumented user 92737 48/50 current_auc = 1.0
User 92737 AUC after training: 1.0
User 92737 does not improve AUC. Reverting changes.
Training on augumented user 45307 49/50 current_auc = 1.0
User 45307 AUC after training: 1.0
User 45307 does not improve AUC. Reverting changes.
[2024-12-02 17:42:36.821081] start test user 124093 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:37.218098] start test user 124093 9/567 recall augumented users by random, augumented_users = [36597, 33075, 117275, 29783, 108679, 84312, 72426, 129767, 94987, 84150, 19341, 68468, 38352, 112750, 26550, 97384, 91426, 109805, 55788, 110137, 26727, 49230, 106085, 123346, 44947, 16256, 9560, 18755, 69925, 83165, 72309, 37271, 109919, 51268, 127663, 29784, 10103, 11315, 59093, 37246, 34384, 20934, 27315, 90258, 73593, 82789, 15220, 57832, 100184, 129476]
[2024-12-02 17:42:37.233019] user = 124093 Cloud 9/567
[2024-12-02 17:42:37.248892] user = 124093 Local 9/567
[2024-12-02 17:42:37.324358] user = 124093 Local+ 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:39.469491] user = 124093 MPDA- 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5079577569537408
Training on augumented user 36597 0/50 current_auc = 0.5079577569537408
User 36597 AUC after training: 0.5088502156775249
User 36597 improves AUC. Keeping the model.
Training on augumented user 33075 1/50 current_auc = 0.5088502156775249
User 33075 AUC after training: 0.5082552431950023
User 33075 does not improve AUC. Reverting changes.
Training on augumented user 117275 2/50 current_auc = 0.5088502156775249
User 117275 AUC after training: 0.5095939312806783
User 117275 improves AUC. Keeping the model.
Training on augumented user 29783 3/50 current_auc = 0.5095939312806783
User 29783 AUC after training: 0.5061728395061728
User 29783 does not improve AUC. Reverting changes.
Training on augumented user 108679 4/50 current_auc = 0.5095939312806783
User 108679 AUC after training: 0.5091477019187862
User 108679 does not improve AUC. Reverting changes.
Training on augumented user 84312 5/50 current_auc = 0.5095939312806783
User 84312 AUC after training: 0.5079577569537409
User 84312 does not improve AUC. Reverting changes.
Training on augumented user 72426 6/50 current_auc = 0.5095939312806783
User 72426 AUC after training: 0.5094451881600475
User 72426 does not improve AUC. Reverting changes.
Training on augumented user 129767 7/50 current_auc = 0.5095939312806783
User 129767 AUC after training: 0.5084039863156329
User 129767 does not improve AUC. Reverting changes.
Training on augumented user 94987 8/50 current_auc = 0.5095939312806783
User 94987 AUC after training: 0.509296445039417
User 94987 does not improve AUC. Reverting changes.
Training on augumented user 84150 9/50 current_auc = 0.5095939312806783
User 84150 AUC after training: 0.5098914175219396
User 84150 improves AUC. Keeping the model.
Training on augumented user 19341 10/50 current_auc = 0.5098914175219396
User 19341 AUC after training: 0.5082552431950023
User 19341 does not improve AUC. Reverting changes.
Training on augumented user 68468 11/50 current_auc = 0.5098914175219396
User 68468 AUC after training: 0.5095939312806782
User 68468 does not improve AUC. Reverting changes.
Training on augumented user 38352 12/50 current_auc = 0.5098914175219396
User 38352 AUC after training: 0.509296445039417
User 38352 does not improve AUC. Reverting changes.
Training on augumented user 112750 13/50 current_auc = 0.5098914175219396
User 112750 AUC after training: 0.5089989587981556
User 112750 does not improve AUC. Reverting changes.
Training on augumented user 26550 14/50 current_auc = 0.5098914175219396
User 26550 AUC after training: 0.5095939312806782
User 26550 does not improve AUC. Reverting changes.
Training on augumented user 97384 15/50 current_auc = 0.5098914175219396
User 97384 AUC after training: 0.5087014725568942
User 97384 does not improve AUC. Reverting changes.
Training on augumented user 91426 16/50 current_auc = 0.5098914175219396
User 91426 AUC after training: 0.5095939312806783
User 91426 does not improve AUC. Reverting changes.
Training on augumented user 109805 17/50 current_auc = 0.5098914175219396
User 109805 AUC after training: 0.5098914175219396
User 109805 does not improve AUC. Reverting changes.
Training on augumented user 55788 18/50 current_auc = 0.5098914175219396
User 55788 AUC after training: 0.5097426744013089
User 55788 does not improve AUC. Reverting changes.
Training on augumented user 110137 19/50 current_auc = 0.5098914175219396
User 110137 AUC after training: 0.5095939312806783
User 110137 does not improve AUC. Reverting changes.
Training on augumented user 26727 20/50 current_auc = 0.5098914175219396
User 26727 AUC after training: 0.5094451881600476
User 26727 does not improve AUC. Reverting changes.
Training on augumented user 49230 21/50 current_auc = 0.5098914175219396
User 49230 AUC after training: 0.5100401606425703
User 49230 improves AUC. Keeping the model.
Training on augumented user 106085 22/50 current_auc = 0.5100401606425703
User 106085 AUC after training: 0.5095939312806783
User 106085 does not improve AUC. Reverting changes.
Training on augumented user 123346 23/50 current_auc = 0.5100401606425703
User 123346 AUC after training: 0.5084039863156329
User 123346 does not improve AUC. Reverting changes.
Training on augumented user 44947 24/50 current_auc = 0.5100401606425703
User 44947 AUC after training: 0.5098914175219396
User 44947 does not improve AUC. Reverting changes.
Training on augumented user 16256 25/50 current_auc = 0.5100401606425703
User 16256 AUC after training: 0.5098914175219396
User 16256 does not improve AUC. Reverting changes.
Training on augumented user 9560 26/50 current_auc = 0.5100401606425703
User 9560 AUC after training: 0.5112301056076156
User 9560 improves AUC. Keeping the model.
Training on augumented user 18755 27/50 current_auc = 0.5112301056076156
User 18755 AUC after training: 0.5106351331250929
User 18755 does not improve AUC. Reverting changes.
Training on augumented user 69925 28/50 current_auc = 0.5112301056076156
User 69925 AUC after training: 0.511081362486985
User 69925 does not improve AUC. Reverting changes.
Training on augumented user 83165 29/50 current_auc = 0.5112301056076156
User 83165 AUC after training: 0.511081362486985
User 83165 does not improve AUC. Reverting changes.
Training on augumented user 72309 30/50 current_auc = 0.5112301056076156
User 72309 AUC after training: 0.510635133125093
User 72309 does not improve AUC. Reverting changes.
Training on augumented user 37271 31/50 current_auc = 0.5112301056076156
User 37271 AUC after training: 0.5103376468838317
User 37271 does not improve AUC. Reverting changes.
Training on augumented user 109919 32/50 current_auc = 0.5112301056076156
User 109919 AUC after training: 0.511081362486985
User 109919 does not improve AUC. Reverting changes.
Training on augumented user 51268 33/50 current_auc = 0.5112301056076156
User 51268 AUC after training: 0.5109326193663543
User 51268 does not improve AUC. Reverting changes.
Training on augumented user 127663 34/50 current_auc = 0.5112301056076156
User 127663 AUC after training: 0.5104863900044623
User 127663 does not improve AUC. Reverting changes.
Training on augumented user 29784 35/50 current_auc = 0.5112301056076156
User 29784 AUC after training: 0.5109326193663544
User 29784 does not improve AUC. Reverting changes.
Training on augumented user 10103 36/50 current_auc = 0.5112301056076156
User 10103 AUC after training: 0.5109326193663543
User 10103 does not improve AUC. Reverting changes.
Training on augumented user 11315 37/50 current_auc = 0.5112301056076156
User 11315 AUC after training: 0.511081362486985
User 11315 does not improve AUC. Reverting changes.
Training on augumented user 59093 38/50 current_auc = 0.5112301056076156
User 59093 AUC after training: 0.5081065000743715
User 59093 does not improve AUC. Reverting changes.
Training on augumented user 37246 39/50 current_auc = 0.5112301056076156
User 37246 AUC after training: 0.5107838762457236
User 37246 does not improve AUC. Reverting changes.
Training on augumented user 34384 40/50 current_auc = 0.5112301056076156
User 34384 AUC after training: 0.5106351331250929
User 34384 does not improve AUC. Reverting changes.
Training on augumented user 20934 41/50 current_auc = 0.5112301056076156
User 20934 AUC after training: 0.5106351331250929
User 20934 does not improve AUC. Reverting changes.
Training on augumented user 27315 42/50 current_auc = 0.5112301056076156
User 27315 AUC after training: 0.511081362486985
User 27315 does not improve AUC. Reverting changes.
Training on augumented user 90258 43/50 current_auc = 0.5112301056076156
User 90258 AUC after training: 0.5097426744013089
User 90258 does not improve AUC. Reverting changes.
Training on augumented user 73593 44/50 current_auc = 0.5112301056076156
User 73593 AUC after training: 0.5104863900044623
User 73593 does not improve AUC. Reverting changes.
Training on augumented user 82789 45/50 current_auc = 0.5112301056076156
User 82789 AUC after training: 0.5104863900044623
User 82789 does not improve AUC. Reverting changes.
Training on augumented user 15220 46/50 current_auc = 0.5112301056076156
User 15220 AUC after training: 0.510188903763201
User 15220 does not improve AUC. Reverting changes.
Training on augumented user 57832 47/50 current_auc = 0.5112301056076156
User 57832 AUC after training: 0.5112301056076156
User 57832 does not improve AUC. Reverting changes.
Training on augumented user 100184 48/50 current_auc = 0.5112301056076156
User 100184 AUC after training: 0.5101889037632009
User 100184 does not improve AUC. Reverting changes.
Training on augumented user 129476 49/50 current_auc = 0.5112301056076156
User 129476 AUC after training: 0.5094451881600476
User 129476 does not improve AUC. Reverting changes.
[2024-12-02 17:43:08.254148] start test user 124102 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:08.776715] start test user 124102 10/567 recall augumented users by random, augumented_users = [67415, 113046, 62528, 60631, 83551, 668, 76102, 45181, 85132, 125218, 9778, 114108, 17932, 128990, 134601, 114084, 32454, 81033, 18326, 58443, 105093, 96874, 65607, 41768, 10103, 90922, 117513, 103775, 132066, 26506, 78070, 93451, 61373, 58831, 128966, 10810, 137945, 72110, 129583, 94145, 76698, 40706, 128183, 95804, 137070, 34227, 24987, 103520, 132839, 121609]
[2024-12-02 17:43:08.792004] user = 124102 Cloud 10/567
[2024-12-02 17:43:08.811047] user = 124102 Local 10/567
[2024-12-02 17:43:08.903414] user = 124102 Local+ 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:12.160607] user = 124102 MPDA- 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7049808429118775
Training on augumented user 67415 0/50 current_auc = 0.7049808429118775
User 67415 AUC after training: 0.7054597701149427
User 67415 improves AUC. Keeping the model.
Training on augumented user 113046 1/50 current_auc = 0.7054597701149427
User 113046 AUC after training: 0.7073754789272032
User 113046 improves AUC. Keeping the model.
Training on augumented user 62528 2/50 current_auc = 0.7073754789272032
User 62528 AUC after training: 0.7054597701149427
User 62528 does not improve AUC. Reverting changes.
Training on augumented user 60631 3/50 current_auc = 0.7073754789272032
User 60631 AUC after training: 0.7083333333333334
User 60631 improves AUC. Keeping the model.
Training on augumented user 83551 4/50 current_auc = 0.7083333333333334
User 83551 AUC after training: 0.7088122605363986
User 83551 improves AUC. Keeping the model.
Training on augumented user 668 5/50 current_auc = 0.7088122605363986
User 668 AUC after training: 0.7092911877394638
User 668 improves AUC. Keeping the model.
Training on augumented user 76102 6/50 current_auc = 0.7092911877394638
User 76102 AUC after training: 0.7083333333333334
User 76102 does not improve AUC. Reverting changes.
Training on augumented user 45181 7/50 current_auc = 0.7092911877394638
User 45181 AUC after training: 0.7073754789272031
User 45181 does not improve AUC. Reverting changes.
Training on augumented user 85132 8/50 current_auc = 0.7092911877394638
User 85132 AUC after training: 0.7092911877394635
User 85132 does not improve AUC. Reverting changes.
Training on augumented user 125218 9/50 current_auc = 0.7092911877394638
User 125218 AUC after training: 0.7097701149425287
User 125218 improves AUC. Keeping the model.
Training on augumented user 9778 10/50 current_auc = 0.7097701149425287
User 9778 AUC after training: 0.706896551724138
User 9778 does not improve AUC. Reverting changes.
Training on augumented user 114108 11/50 current_auc = 0.7097701149425287
User 114108 AUC after training: 0.7102490421455939
User 114108 improves AUC. Keeping the model.
Training on augumented user 17932 12/50 current_auc = 0.7102490421455939
User 17932 AUC after training: 0.7092911877394638
User 17932 does not improve AUC. Reverting changes.
Training on augumented user 128990 13/50 current_auc = 0.7102490421455939
User 128990 AUC after training: 0.7088122605363986
User 128990 does not improve AUC. Reverting changes.
Training on augumented user 134601 14/50 current_auc = 0.7102490421455939
User 134601 AUC after training: 0.7092911877394638
User 134601 does not improve AUC. Reverting changes.
Training on augumented user 114084 15/50 current_auc = 0.7102490421455939
User 114084 AUC after training: 0.7102490421455939
User 114084 does not improve AUC. Reverting changes.
Training on augumented user 32454 16/50 current_auc = 0.7102490421455939
User 32454 AUC after training: 0.7088122605363985
User 32454 does not improve AUC. Reverting changes.
Training on augumented user 81033 17/50 current_auc = 0.7102490421455939
User 81033 AUC after training: 0.7102490421455939
User 81033 does not improve AUC. Reverting changes.
Training on augumented user 18326 18/50 current_auc = 0.7102490421455939
User 18326 AUC after training: 0.709770114942529
User 18326 does not improve AUC. Reverting changes.
Training on augumented user 58443 19/50 current_auc = 0.7102490421455939
User 58443 AUC after training: 0.7078544061302682
User 58443 does not improve AUC. Reverting changes.
Training on augumented user 105093 20/50 current_auc = 0.7102490421455939
User 105093 AUC after training: 0.7088122605363986
User 105093 does not improve AUC. Reverting changes.
Training on augumented user 96874 21/50 current_auc = 0.7102490421455939
User 96874 AUC after training: 0.7097701149425287
User 96874 does not improve AUC. Reverting changes.
Training on augumented user 65607 22/50 current_auc = 0.7102490421455939
User 65607 AUC after training: 0.7092911877394638
User 65607 does not improve AUC. Reverting changes.
Training on augumented user 41768 23/50 current_auc = 0.7102490421455939
User 41768 AUC after training: 0.7102490421455939
User 41768 does not improve AUC. Reverting changes.
Training on augumented user 10103 24/50 current_auc = 0.7102490421455939
User 10103 AUC after training: 0.7102490421455939
User 10103 does not improve AUC. Reverting changes.
Training on augumented user 90922 25/50 current_auc = 0.7102490421455939
User 90922 AUC after training: 0.7102490421455939
User 90922 does not improve AUC. Reverting changes.
Training on augumented user 117513 26/50 current_auc = 0.7102490421455939
User 117513 AUC after training: 0.7097701149425287
User 117513 does not improve AUC. Reverting changes.
Training on augumented user 103775 27/50 current_auc = 0.7102490421455939
User 103775 AUC after training: 0.7102490421455939
User 103775 does not improve AUC. Reverting changes.
Training on augumented user 132066 28/50 current_auc = 0.7102490421455939
User 132066 AUC after training: 0.7102490421455939
User 132066 does not improve AUC. Reverting changes.
Training on augumented user 26506 29/50 current_auc = 0.7102490421455939
User 26506 AUC after training: 0.7092911877394638
User 26506 does not improve AUC. Reverting changes.
Training on augumented user 78070 30/50 current_auc = 0.7102490421455939
User 78070 AUC after training: 0.7088122605363986
User 78070 does not improve AUC. Reverting changes.
Training on augumented user 93451 31/50 current_auc = 0.7102490421455939
User 93451 AUC after training: 0.7092911877394638
User 93451 does not improve AUC. Reverting changes.
Training on augumented user 61373 32/50 current_auc = 0.7102490421455939
User 61373 AUC after training: 0.7078544061302683
User 61373 does not improve AUC. Reverting changes.
Training on augumented user 58831 33/50 current_auc = 0.7102490421455939
User 58831 AUC after training: 0.7092911877394635
User 58831 does not improve AUC. Reverting changes.
Training on augumented user 128966 34/50 current_auc = 0.7102490421455939
User 128966 AUC after training: 0.7088122605363986
User 128966 does not improve AUC. Reverting changes.
Training on augumented user 10810 35/50 current_auc = 0.7102490421455939
User 10810 AUC after training: 0.7083333333333334
User 10810 does not improve AUC. Reverting changes.
Training on augumented user 137945 36/50 current_auc = 0.7102490421455939
User 137945 AUC after training: 0.7102490421455939
User 137945 does not improve AUC. Reverting changes.
Training on augumented user 72110 37/50 current_auc = 0.7102490421455939
User 72110 AUC after training: 0.7102490421455939
User 72110 does not improve AUC. Reverting changes.
Training on augumented user 129583 38/50 current_auc = 0.7102490421455939
User 129583 AUC after training: 0.7064176245210728
User 129583 does not improve AUC. Reverting changes.
Training on augumented user 94145 39/50 current_auc = 0.7102490421455939
User 94145 AUC after training: 0.7078544061302682
User 94145 does not improve AUC. Reverting changes.
Training on augumented user 76698 40/50 current_auc = 0.7102490421455939
User 76698 AUC after training: 0.7097701149425287
User 76698 does not improve AUC. Reverting changes.
Training on augumented user 40706 41/50 current_auc = 0.7102490421455939
User 40706 AUC after training: 0.7107279693486591
User 40706 improves AUC. Keeping the model.
Training on augumented user 128183 42/50 current_auc = 0.7107279693486591
User 128183 AUC after training: 0.7112068965517243
User 128183 improves AUC. Keeping the model.
Training on augumented user 95804 43/50 current_auc = 0.7112068965517243
User 95804 AUC after training: 0.7102490421455939
User 95804 does not improve AUC. Reverting changes.
Training on augumented user 137070 44/50 current_auc = 0.7112068965517243
User 137070 AUC after training: 0.7116858237547893
User 137070 improves AUC. Keeping the model.
Training on augumented user 34227 45/50 current_auc = 0.7116858237547893
User 34227 AUC after training: 0.7107279693486591
User 34227 does not improve AUC. Reverting changes.
Training on augumented user 24987 46/50 current_auc = 0.7116858237547893
User 24987 AUC after training: 0.7116858237547893
User 24987 does not improve AUC. Reverting changes.
Training on augumented user 103520 47/50 current_auc = 0.7116858237547893
User 103520 AUC after training: 0.7116858237547893
User 103520 does not improve AUC. Reverting changes.
Training on augumented user 132839 48/50 current_auc = 0.7116858237547893
User 132839 AUC after training: 0.7100095785440614
User 132839 does not improve AUC. Reverting changes.
Training on augumented user 121609 49/50 current_auc = 0.7116858237547893
User 121609 AUC after training: 0.7107279693486591
User 121609 does not improve AUC. Reverting changes.
[2024-12-02 17:43:41.381797] start test user 124123 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:41.821798] start test user 124123 11/567 recall augumented users by random, augumented_users = [49061, 106955, 131416, 88341, 117627, 84544, 81379, 130637, 97411, 30833, 14974, 55745, 20469, 107786, 34496, 72646, 118089, 44225, 36330, 122191, 15993, 103231, 5991, 99284, 64824, 120074, 119120, 65571, 53424, 50567, 95697, 130603, 83903, 81619, 30489, 36676, 93577, 2557, 131520, 21975, 10888, 65218, 43799, 47667, 73948, 93558, 2275, 26954, 38368, 64269]
[2024-12-02 17:43:41.837043] user = 124123 Cloud 11/567
[2024-12-02 17:43:41.846390] user = 124123 Local 11/567
[2024-12-02 17:43:41.916308] user = 124123 Local+ 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:44.349288] user = 124123 MPDA- 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5578947368421052
Training on augumented user 49061 0/50 current_auc = 0.5578947368421052
User 49061 AUC after training: 0.5578947368421052
User 49061 does not improve AUC. Reverting changes.
Training on augumented user 106955 1/50 current_auc = 0.5578947368421052
User 106955 AUC after training: 0.5578947368421052
User 106955 does not improve AUC. Reverting changes.
Training on augumented user 131416 2/50 current_auc = 0.5578947368421052
User 131416 AUC after training: 0.5578947368421052
User 131416 does not improve AUC. Reverting changes.
Training on augumented user 88341 3/50 current_auc = 0.5578947368421052
User 88341 AUC after training: 0.5684210526315789
User 88341 improves AUC. Keeping the model.
Training on augumented user 117627 4/50 current_auc = 0.5684210526315789
User 117627 AUC after training: 0.5684210526315789
User 117627 does not improve AUC. Reverting changes.
Training on augumented user 84544 5/50 current_auc = 0.5684210526315789
User 84544 AUC after training: 0.5684210526315789
User 84544 does not improve AUC. Reverting changes.
Training on augumented user 81379 6/50 current_auc = 0.5684210526315789
User 81379 AUC after training: 0.5684210526315789
User 81379 does not improve AUC. Reverting changes.
Training on augumented user 130637 7/50 current_auc = 0.5684210526315789
User 130637 AUC after training: 0.5684210526315789
User 130637 does not improve AUC. Reverting changes.
Training on augumented user 97411 8/50 current_auc = 0.5684210526315789
User 97411 AUC after training: 0.5684210526315789
User 97411 does not improve AUC. Reverting changes.
Training on augumented user 30833 9/50 current_auc = 0.5684210526315789
User 30833 AUC after training: 0.5578947368421052
User 30833 does not improve AUC. Reverting changes.
Training on augumented user 14974 10/50 current_auc = 0.5684210526315789
User 14974 AUC after training: 0.5684210526315789
User 14974 does not improve AUC. Reverting changes.
Training on augumented user 55745 11/50 current_auc = 0.5684210526315789
User 55745 AUC after training: 0.5578947368421052
User 55745 does not improve AUC. Reverting changes.
Training on augumented user 20469 12/50 current_auc = 0.5684210526315789
User 20469 AUC after training: 0.5684210526315789
User 20469 does not improve AUC. Reverting changes.
Training on augumented user 107786 13/50 current_auc = 0.5684210526315789
User 107786 AUC after training: 0.5684210526315789
User 107786 does not improve AUC. Reverting changes.
Training on augumented user 34496 14/50 current_auc = 0.5684210526315789
User 34496 AUC after training: 0.5684210526315789
User 34496 does not improve AUC. Reverting changes.
Training on augumented user 72646 15/50 current_auc = 0.5684210526315789
User 72646 AUC after training: 0.5684210526315789
User 72646 does not improve AUC. Reverting changes.
Training on augumented user 118089 16/50 current_auc = 0.5684210526315789
User 118089 AUC after training: 0.5684210526315789
User 118089 does not improve AUC. Reverting changes.
Training on augumented user 44225 17/50 current_auc = 0.5684210526315789
User 44225 AUC after training: 0.5578947368421052
User 44225 does not improve AUC. Reverting changes.
Training on augumented user 36330 18/50 current_auc = 0.5684210526315789
User 36330 AUC after training: 0.5578947368421052
User 36330 does not improve AUC. Reverting changes.
Training on augumented user 122191 19/50 current_auc = 0.5684210526315789
User 122191 AUC after training: 0.5684210526315789
User 122191 does not improve AUC. Reverting changes.
Training on augumented user 15993 20/50 current_auc = 0.5684210526315789
User 15993 AUC after training: 0.5684210526315789
User 15993 does not improve AUC. Reverting changes.
Training on augumented user 103231 21/50 current_auc = 0.5684210526315789
User 103231 AUC after training: 0.5684210526315789
User 103231 does not improve AUC. Reverting changes.
Training on augumented user 5991 22/50 current_auc = 0.5684210526315789
User 5991 AUC after training: 0.5684210526315789
User 5991 does not improve AUC. Reverting changes.
Training on augumented user 99284 23/50 current_auc = 0.5684210526315789
User 99284 AUC after training: 0.5684210526315789
User 99284 does not improve AUC. Reverting changes.
Training on augumented user 64824 24/50 current_auc = 0.5684210526315789
User 64824 AUC after training: 0.5578947368421052
User 64824 does not improve AUC. Reverting changes.
Training on augumented user 120074 25/50 current_auc = 0.5684210526315789
User 120074 AUC after training: 0.5578947368421052
User 120074 does not improve AUC. Reverting changes.
Training on augumented user 119120 26/50 current_auc = 0.5684210526315789
User 119120 AUC after training: 0.5684210526315789
User 119120 does not improve AUC. Reverting changes.
Training on augumented user 65571 27/50 current_auc = 0.5684210526315789
User 65571 AUC after training: 0.5684210526315789
User 65571 does not improve AUC. Reverting changes.
Training on augumented user 53424 28/50 current_auc = 0.5684210526315789
User 53424 AUC after training: 0.5684210526315789
User 53424 does not improve AUC. Reverting changes.
Training on augumented user 50567 29/50 current_auc = 0.5684210526315789
User 50567 AUC after training: 0.5578947368421052
User 50567 does not improve AUC. Reverting changes.
Training on augumented user 95697 30/50 current_auc = 0.5684210526315789
User 95697 AUC after training: 0.5684210526315789
User 95697 does not improve AUC. Reverting changes.
Training on augumented user 130603 31/50 current_auc = 0.5684210526315789
User 130603 AUC after training: 0.5684210526315789
User 130603 does not improve AUC. Reverting changes.
Training on augumented user 83903 32/50 current_auc = 0.5684210526315789
User 83903 AUC after training: 0.5684210526315789
User 83903 does not improve AUC. Reverting changes.
Training on augumented user 81619 33/50 current_auc = 0.5684210526315789
User 81619 AUC after training: 0.5578947368421052
User 81619 does not improve AUC. Reverting changes.
Training on augumented user 30489 34/50 current_auc = 0.5684210526315789
User 30489 AUC after training: 0.5578947368421052
User 30489 does not improve AUC. Reverting changes.
Training on augumented user 36676 35/50 current_auc = 0.5684210526315789
User 36676 AUC after training: 0.5578947368421052
User 36676 does not improve AUC. Reverting changes.
Training on augumented user 93577 36/50 current_auc = 0.5684210526315789
User 93577 AUC after training: 0.5684210526315789
User 93577 does not improve AUC. Reverting changes.
Training on augumented user 2557 37/50 current_auc = 0.5684210526315789
User 2557 AUC after training: 0.5684210526315789
User 2557 does not improve AUC. Reverting changes.
Training on augumented user 131520 38/50 current_auc = 0.5684210526315789
User 131520 AUC after training: 0.5684210526315789
User 131520 does not improve AUC. Reverting changes.
Training on augumented user 21975 39/50 current_auc = 0.5684210526315789
User 21975 AUC after training: 0.5684210526315789
User 21975 does not improve AUC. Reverting changes.
Training on augumented user 10888 40/50 current_auc = 0.5684210526315789
User 10888 AUC after training: 0.5684210526315789
User 10888 does not improve AUC. Reverting changes.
Training on augumented user 65218 41/50 current_auc = 0.5684210526315789
User 65218 AUC after training: 0.5684210526315789
User 65218 does not improve AUC. Reverting changes.
Training on augumented user 43799 42/50 current_auc = 0.5684210526315789
User 43799 AUC after training: 0.5684210526315789
User 43799 does not improve AUC. Reverting changes.
Training on augumented user 47667 43/50 current_auc = 0.5684210526315789
User 47667 AUC after training: 0.5578947368421052
User 47667 does not improve AUC. Reverting changes.
Training on augumented user 73948 44/50 current_auc = 0.5684210526315789
User 73948 AUC after training: 0.5684210526315789
User 73948 does not improve AUC. Reverting changes.
Training on augumented user 93558 45/50 current_auc = 0.5684210526315789
User 93558 AUC after training: 0.5578947368421052
User 93558 does not improve AUC. Reverting changes.
Training on augumented user 2275 46/50 current_auc = 0.5684210526315789
User 2275 AUC after training: 0.5578947368421052
User 2275 does not improve AUC. Reverting changes.
Training on augumented user 26954 47/50 current_auc = 0.5684210526315789
User 26954 AUC after training: 0.5684210526315789
User 26954 does not improve AUC. Reverting changes.
Training on augumented user 38368 48/50 current_auc = 0.5684210526315789
User 38368 AUC after training: 0.5684210526315789
User 38368 does not improve AUC. Reverting changes.
Training on augumented user 64269 49/50 current_auc = 0.5684210526315789
User 64269 AUC after training: 0.5578947368421052
User 64269 does not improve AUC. Reverting changes.
[2024-12-02 17:44:11.854619] start test user 124126 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:12.295535] start test user 124126 12/567 recall augumented users by random, augumented_users = [24369, 90390, 1998, 117648, 35020, 129382, 57815, 29181, 105804, 75499, 27050, 134960, 135448, 2266, 44009, 106176, 126826, 44619, 33825, 95809, 135663, 26236, 38334, 99374, 123150, 119100, 111364, 2550, 86197, 72728, 62296, 91961, 12077, 43660, 37356, 28301, 80344, 96696, 58391, 72519, 73247, 131840, 5427, 39415, 133427, 67988, 4025, 81385, 65723, 84707]
[2024-12-02 17:44:12.312111] user = 124126 Cloud 12/567
[2024-12-02 17:44:12.346496] user = 124126 Local 12/567
[2024-12-02 17:44:12.526579] user = 124126 Local+ 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:14.642029] user = 124126 MPDA- 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.680952380952381
Training on augumented user 24369 0/50 current_auc = 0.680952380952381
User 24369 AUC after training: 0.680952380952381
User 24369 does not improve AUC. Reverting changes.
Training on augumented user 90390 1/50 current_auc = 0.680952380952381
User 90390 AUC after training: 0.6813988095238095
User 90390 improves AUC. Keeping the model.
Training on augumented user 1998 2/50 current_auc = 0.6813988095238095
User 1998 AUC after training: 0.680952380952381
User 1998 does not improve AUC. Reverting changes.
Training on augumented user 117648 3/50 current_auc = 0.6813988095238095
User 117648 AUC after training: 0.6815476190476191
User 117648 improves AUC. Keeping the model.
Training on augumented user 35020 4/50 current_auc = 0.6815476190476191
User 35020 AUC after training: 0.6811011904761904
User 35020 does not improve AUC. Reverting changes.
Training on augumented user 129382 5/50 current_auc = 0.6815476190476191
User 129382 AUC after training: 0.6813988095238095
User 129382 does not improve AUC. Reverting changes.
Training on augumented user 57815 6/50 current_auc = 0.6815476190476191
User 57815 AUC after training: 0.6805059523809525
User 57815 does not improve AUC. Reverting changes.
Training on augumented user 29181 7/50 current_auc = 0.6815476190476191
User 29181 AUC after training: 0.6812500000000001
User 29181 does not improve AUC. Reverting changes.
Training on augumented user 105804 8/50 current_auc = 0.6815476190476191
User 105804 AUC after training: 0.6806547619047618
User 105804 does not improve AUC. Reverting changes.
Training on augumented user 75499 9/50 current_auc = 0.6815476190476191
User 75499 AUC after training: 0.6811011904761906
User 75499 does not improve AUC. Reverting changes.
Training on augumented user 27050 10/50 current_auc = 0.6815476190476191
User 27050 AUC after training: 0.6825892857142857
User 27050 improves AUC. Keeping the model.
Training on augumented user 134960 11/50 current_auc = 0.6825892857142857
User 134960 AUC after training: 0.6824404761904762
User 134960 does not improve AUC. Reverting changes.
Training on augumented user 135448 12/50 current_auc = 0.6825892857142857
User 135448 AUC after training: 0.6824404761904761
User 135448 does not improve AUC. Reverting changes.
Training on augumented user 2266 13/50 current_auc = 0.6825892857142857
User 2266 AUC after training: 0.6821428571428572
User 2266 does not improve AUC. Reverting changes.
Training on augumented user 44009 14/50 current_auc = 0.6825892857142857
User 44009 AUC after training: 0.6819940476190476
User 44009 does not improve AUC. Reverting changes.
Training on augumented user 106176 15/50 current_auc = 0.6825892857142857
User 106176 AUC after training: 0.6818452380952381
User 106176 does not improve AUC. Reverting changes.
Training on augumented user 126826 16/50 current_auc = 0.6825892857142857
User 126826 AUC after training: 0.6824404761904761
User 126826 does not improve AUC. Reverting changes.
Training on augumented user 44619 17/50 current_auc = 0.6825892857142857
User 44619 AUC after training: 0.6825892857142857
User 44619 does not improve AUC. Reverting changes.
Training on augumented user 33825 18/50 current_auc = 0.6825892857142857
User 33825 AUC after training: 0.6816964285714284
User 33825 does not improve AUC. Reverting changes.
Training on augumented user 95809 19/50 current_auc = 0.6825892857142857
User 95809 AUC after training: 0.6824404761904761
User 95809 does not improve AUC. Reverting changes.
Training on augumented user 135663 20/50 current_auc = 0.6825892857142857
User 135663 AUC after training: 0.6824404761904763
User 135663 does not improve AUC. Reverting changes.
Training on augumented user 26236 21/50 current_auc = 0.6825892857142857
User 26236 AUC after training: 0.6824404761904761
User 26236 does not improve AUC. Reverting changes.
Training on augumented user 38334 22/50 current_auc = 0.6825892857142857
User 38334 AUC after training: 0.6822916666666667
User 38334 does not improve AUC. Reverting changes.
Training on augumented user 99374 23/50 current_auc = 0.6825892857142857
User 99374 AUC after training: 0.6815476190476191
User 99374 does not improve AUC. Reverting changes.
Training on augumented user 123150 24/50 current_auc = 0.6825892857142857
User 123150 AUC after training: 0.6822916666666667
User 123150 does not improve AUC. Reverting changes.
Training on augumented user 119100 25/50 current_auc = 0.6825892857142857
User 119100 AUC after training: 0.6824404761904761
User 119100 does not improve AUC. Reverting changes.
Training on augumented user 111364 26/50 current_auc = 0.6825892857142857
User 111364 AUC after training: 0.6821428571428572
User 111364 does not improve AUC. Reverting changes.
Training on augumented user 2550 27/50 current_auc = 0.6825892857142857
User 2550 AUC after training: 0.6819940476190477
User 2550 does not improve AUC. Reverting changes.
Training on augumented user 86197 28/50 current_auc = 0.6825892857142857
User 86197 AUC after training: 0.6821428571428572
User 86197 does not improve AUC. Reverting changes.
Training on augumented user 72728 29/50 current_auc = 0.6825892857142857
User 72728 AUC after training: 0.6819940476190476
User 72728 does not improve AUC. Reverting changes.
Training on augumented user 62296 30/50 current_auc = 0.6825892857142857
User 62296 AUC after training: 0.6825892857142857
User 62296 does not improve AUC. Reverting changes.
Training on augumented user 91961 31/50 current_auc = 0.6825892857142857
User 91961 AUC after training: 0.681845238095238
User 91961 does not improve AUC. Reverting changes.
Training on augumented user 12077 32/50 current_auc = 0.6825892857142857
User 12077 AUC after training: 0.6822916666666667
User 12077 does not improve AUC. Reverting changes.
Training on augumented user 43660 33/50 current_auc = 0.6825892857142857
User 43660 AUC after training: 0.6827380952380953
User 43660 improves AUC. Keeping the model.
Training on augumented user 37356 34/50 current_auc = 0.6827380952380953
User 37356 AUC after training: 0.6821428571428572
User 37356 does not improve AUC. Reverting changes.
Training on augumented user 28301 35/50 current_auc = 0.6827380952380953
User 28301 AUC after training: 0.6822916666666667
User 28301 does not improve AUC. Reverting changes.
Training on augumented user 80344 36/50 current_auc = 0.6827380952380953
User 80344 AUC after training: 0.6825892857142858
User 80344 does not improve AUC. Reverting changes.
Training on augumented user 96696 37/50 current_auc = 0.6827380952380953
User 96696 AUC after training: 0.6818452380952382
User 96696 does not improve AUC. Reverting changes.
Training on augumented user 58391 38/50 current_auc = 0.6827380952380953
User 58391 AUC after training: 0.6821428571428572
User 58391 does not improve AUC. Reverting changes.
Training on augumented user 72519 39/50 current_auc = 0.6827380952380953
User 72519 AUC after training: 0.6822916666666667
User 72519 does not improve AUC. Reverting changes.
Training on augumented user 73247 40/50 current_auc = 0.6827380952380953
User 73247 AUC after training: 0.6825892857142858
User 73247 does not improve AUC. Reverting changes.
Training on augumented user 131840 41/50 current_auc = 0.6827380952380953
User 131840 AUC after training: 0.6828869047619048
User 131840 improves AUC. Keeping the model.
Training on augumented user 5427 42/50 current_auc = 0.6828869047619048
User 5427 AUC after training: 0.6822916666666667
User 5427 does not improve AUC. Reverting changes.
Training on augumented user 39415 43/50 current_auc = 0.6828869047619048
User 39415 AUC after training: 0.6821428571428572
User 39415 does not improve AUC. Reverting changes.
Training on augumented user 133427 44/50 current_auc = 0.6828869047619048
User 133427 AUC after training: 0.6822916666666667
User 133427 does not improve AUC. Reverting changes.
Training on augumented user 67988 45/50 current_auc = 0.6828869047619048
User 67988 AUC after training: 0.6824404761904761
User 67988 does not improve AUC. Reverting changes.
Training on augumented user 4025 46/50 current_auc = 0.6828869047619048
User 4025 AUC after training: 0.6824404761904761
User 4025 does not improve AUC. Reverting changes.
Training on augumented user 81385 47/50 current_auc = 0.6828869047619048
User 81385 AUC after training: 0.6824404761904762
User 81385 does not improve AUC. Reverting changes.
Training on augumented user 65723 48/50 current_auc = 0.6828869047619048
User 65723 AUC after training: 0.6821428571428572
User 65723 does not improve AUC. Reverting changes.
Training on augumented user 84707 49/50 current_auc = 0.6828869047619048
User 84707 AUC after training: 0.6813988095238095
User 84707 does not improve AUC. Reverting changes.
[2024-12-02 17:44:42.471542] start test user 124130 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:42.966028] start test user 124130 13/567 recall augumented users by random, augumented_users = [68267, 96805, 22046, 52239, 28413, 59283, 119067, 131288, 124430, 131059, 22824, 95146, 117189, 136825, 34069, 59806, 114503, 136583, 120049, 105045, 70292, 83704, 38584, 121761, 34407, 74483, 131423, 107935, 34043, 20380, 45428, 57010, 1801, 41708, 61674, 2957, 82376, 121506, 97510, 74622, 126804, 21081, 69741, 35083, 8505, 16470, 33573, 106540, 66464, 104037]
[2024-12-02 17:44:42.981049] user = 124130 Cloud 13/567
[2024-12-02 17:44:43.003800] user = 124130 Local 13/567
[2024-12-02 17:44:43.026550] user = 124130 Local+ 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:45.302862] user = 124130 MPDA- 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7067669172932332
Training on augumented user 68267 0/50 current_auc = 0.7067669172932332
User 68267 AUC after training: 0.7067669172932332
User 68267 does not improve AUC. Reverting changes.
Training on augumented user 96805 1/50 current_auc = 0.7067669172932332
User 96805 AUC after training: 0.7067669172932332
User 96805 does not improve AUC. Reverting changes.
Training on augumented user 22046 2/50 current_auc = 0.7067669172932332
User 22046 AUC after training: 0.7067669172932332
User 22046 does not improve AUC. Reverting changes.
Training on augumented user 52239 3/50 current_auc = 0.7067669172932332
User 52239 AUC after training: 0.7067669172932332
User 52239 does not improve AUC. Reverting changes.
Training on augumented user 28413 4/50 current_auc = 0.7067669172932332
User 28413 AUC after training: 0.7067669172932332
User 28413 does not improve AUC. Reverting changes.
Training on augumented user 59283 5/50 current_auc = 0.7067669172932332
User 59283 AUC after training: 0.7067669172932332
User 59283 does not improve AUC. Reverting changes.
Training on augumented user 119067 6/50 current_auc = 0.7067669172932332
User 119067 AUC after training: 0.7067669172932332
User 119067 does not improve AUC. Reverting changes.
Training on augumented user 131288 7/50 current_auc = 0.7067669172932332
User 131288 AUC after training: 0.7067669172932332
User 131288 does not improve AUC. Reverting changes.
Training on augumented user 124430 8/50 current_auc = 0.7067669172932332
User 124430 AUC after training: 0.7067669172932332
User 124430 does not improve AUC. Reverting changes.
Training on augumented user 131059 9/50 current_auc = 0.7067669172932332
User 131059 AUC after training: 0.7067669172932332
User 131059 does not improve AUC. Reverting changes.
Training on augumented user 22824 10/50 current_auc = 0.7067669172932332
User 22824 AUC after training: 0.7067669172932332
User 22824 does not improve AUC. Reverting changes.
Training on augumented user 95146 11/50 current_auc = 0.7067669172932332
User 95146 AUC after training: 0.7067669172932332
User 95146 does not improve AUC. Reverting changes.
Training on augumented user 117189 12/50 current_auc = 0.7067669172932332
User 117189 AUC after training: 0.7067669172932332
User 117189 does not improve AUC. Reverting changes.
Training on augumented user 136825 13/50 current_auc = 0.7067669172932332
User 136825 AUC after training: 0.7067669172932332
User 136825 does not improve AUC. Reverting changes.
Training on augumented user 34069 14/50 current_auc = 0.7067669172932332
User 34069 AUC after training: 0.7067669172932332
User 34069 does not improve AUC. Reverting changes.
Training on augumented user 59806 15/50 current_auc = 0.7067669172932332
User 59806 AUC after training: 0.7067669172932332
User 59806 does not improve AUC. Reverting changes.
Training on augumented user 114503 16/50 current_auc = 0.7067669172932332
User 114503 AUC after training: 0.7067669172932332
User 114503 does not improve AUC. Reverting changes.
Training on augumented user 136583 17/50 current_auc = 0.7067669172932332
User 136583 AUC after training: 0.7067669172932332
User 136583 does not improve AUC. Reverting changes.
Training on augumented user 120049 18/50 current_auc = 0.7067669172932332
User 120049 AUC after training: 0.7067669172932332
User 120049 does not improve AUC. Reverting changes.
Training on augumented user 105045 19/50 current_auc = 0.7067669172932332
User 105045 AUC after training: 0.7067669172932332
User 105045 does not improve AUC. Reverting changes.
Training on augumented user 70292 20/50 current_auc = 0.7067669172932332
User 70292 AUC after training: 0.7067669172932332
User 70292 does not improve AUC. Reverting changes.
Training on augumented user 83704 21/50 current_auc = 0.7067669172932332
User 83704 AUC after training: 0.7067669172932332
User 83704 does not improve AUC. Reverting changes.
Training on augumented user 38584 22/50 current_auc = 0.7067669172932332
User 38584 AUC after training: 0.7067669172932332
User 38584 does not improve AUC. Reverting changes.
Training on augumented user 121761 23/50 current_auc = 0.7067669172932332
User 121761 AUC after training: 0.7067669172932332
User 121761 does not improve AUC. Reverting changes.
Training on augumented user 34407 24/50 current_auc = 0.7067669172932332
User 34407 AUC after training: 0.7067669172932332
User 34407 does not improve AUC. Reverting changes.
Training on augumented user 74483 25/50 current_auc = 0.7067669172932332
User 74483 AUC after training: 0.7067669172932332
User 74483 does not improve AUC. Reverting changes.
Training on augumented user 131423 26/50 current_auc = 0.7067669172932332
User 131423 AUC after training: 0.7067669172932332
User 131423 does not improve AUC. Reverting changes.
Training on augumented user 107935 27/50 current_auc = 0.7067669172932332
User 107935 AUC after training: 0.7067669172932332
User 107935 does not improve AUC. Reverting changes.
Training on augumented user 34043 28/50 current_auc = 0.7067669172932332
User 34043 AUC after training: 0.7067669172932332
User 34043 does not improve AUC. Reverting changes.
Training on augumented user 20380 29/50 current_auc = 0.7067669172932332
User 20380 AUC after training: 0.7067669172932332
User 20380 does not improve AUC. Reverting changes.
Training on augumented user 45428 30/50 current_auc = 0.7067669172932332
User 45428 AUC after training: 0.7067669172932332
User 45428 does not improve AUC. Reverting changes.
Training on augumented user 57010 31/50 current_auc = 0.7067669172932332
User 57010 AUC after training: 0.7067669172932332
User 57010 does not improve AUC. Reverting changes.
Training on augumented user 1801 32/50 current_auc = 0.7067669172932332
User 1801 AUC after training: 0.7067669172932332
User 1801 does not improve AUC. Reverting changes.
Training on augumented user 41708 33/50 current_auc = 0.7067669172932332
User 41708 AUC after training: 0.7067669172932332
User 41708 does not improve AUC. Reverting changes.
Training on augumented user 61674 34/50 current_auc = 0.7067669172932332
User 61674 AUC after training: 0.7067669172932332
User 61674 does not improve AUC. Reverting changes.
Training on augumented user 2957 35/50 current_auc = 0.7067669172932332
User 2957 AUC after training: 0.7067669172932332
User 2957 does not improve AUC. Reverting changes.
Training on augumented user 82376 36/50 current_auc = 0.7067669172932332
User 82376 AUC after training: 0.7067669172932332
User 82376 does not improve AUC. Reverting changes.
Training on augumented user 121506 37/50 current_auc = 0.7067669172932332
User 121506 AUC after training: 0.7067669172932332
User 121506 does not improve AUC. Reverting changes.
Training on augumented user 97510 38/50 current_auc = 0.7067669172932332
User 97510 AUC after training: 0.7067669172932332
User 97510 does not improve AUC. Reverting changes.
Training on augumented user 74622 39/50 current_auc = 0.7067669172932332
User 74622 AUC after training: 0.7067669172932332
User 74622 does not improve AUC. Reverting changes.
Training on augumented user 126804 40/50 current_auc = 0.7067669172932332
User 126804 AUC after training: 0.7067669172932332
User 126804 does not improve AUC. Reverting changes.
Training on augumented user 21081 41/50 current_auc = 0.7067669172932332
User 21081 AUC after training: 0.7067669172932332
User 21081 does not improve AUC. Reverting changes.
Training on augumented user 69741 42/50 current_auc = 0.7067669172932332
User 69741 AUC after training: 0.7067669172932332
User 69741 does not improve AUC. Reverting changes.
Training on augumented user 35083 43/50 current_auc = 0.7067669172932332
User 35083 AUC after training: 0.7067669172932332
User 35083 does not improve AUC. Reverting changes.
Training on augumented user 8505 44/50 current_auc = 0.7067669172932332
User 8505 AUC after training: 0.7067669172932332
User 8505 does not improve AUC. Reverting changes.
Training on augumented user 16470 45/50 current_auc = 0.7067669172932332
User 16470 AUC after training: 0.7067669172932332
User 16470 does not improve AUC. Reverting changes.
Training on augumented user 33573 46/50 current_auc = 0.7067669172932332
User 33573 AUC after training: 0.7067669172932332
User 33573 does not improve AUC. Reverting changes.
Training on augumented user 106540 47/50 current_auc = 0.7067669172932332
User 106540 AUC after training: 0.7067669172932332
User 106540 does not improve AUC. Reverting changes.
Training on augumented user 66464 48/50 current_auc = 0.7067669172932332
User 66464 AUC after training: 0.7067669172932332
User 66464 does not improve AUC. Reverting changes.
Training on augumented user 104037 49/50 current_auc = 0.7067669172932332
User 104037 AUC after training: 0.7067669172932332
User 104037 does not improve AUC. Reverting changes.
[2024-12-02 17:45:13.311389] start test user 124146 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:14.117167] start test user 124146 14/567 recall augumented users by random, augumented_users = [91348, 35867, 90130, 18156, 18743, 3553, 57925, 3559, 34443, 117048, 78496, 56341, 106552, 35952, 42164, 53906, 83823, 17318, 31297, 18358, 123532, 17543, 98771, 9764, 68038, 93432, 9832, 84139, 38749, 15031, 50563, 28870, 42736, 128011, 65768, 128767, 22784, 118326, 68609, 101018, 31765, 58290, 49659, 67717, 122952, 10984, 3295, 21638, 32388, 36814]
[2024-12-02 17:45:14.134600] user = 124146 Cloud 14/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:14.142795] user = 124146 Local 14/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:14.436537] user = 124146 Local+ 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:17.250495] user = 124146 MPDA- 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 91348 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91348 AUC after training: 0.5
User 91348 does not improve AUC. Reverting changes.
Training on augumented user 35867 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35867 AUC after training: 0.5
User 35867 does not improve AUC. Reverting changes.
Training on augumented user 90130 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90130 AUC after training: 0.5
User 90130 does not improve AUC. Reverting changes.
Training on augumented user 18156 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18156 AUC after training: 0.5
User 18156 does not improve AUC. Reverting changes.
Training on augumented user 18743 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18743 AUC after training: 0.5
User 18743 does not improve AUC. Reverting changes.
Training on augumented user 3553 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3553 AUC after training: 0.5
User 3553 does not improve AUC. Reverting changes.
Training on augumented user 57925 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57925 AUC after training: 0.5
User 57925 does not improve AUC. Reverting changes.
Training on augumented user 3559 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3559 AUC after training: 0.5
User 3559 does not improve AUC. Reverting changes.
Training on augumented user 34443 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34443 AUC after training: 0.5
User 34443 does not improve AUC. Reverting changes.
Training on augumented user 117048 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117048 AUC after training: 0.5
User 117048 does not improve AUC. Reverting changes.
Training on augumented user 78496 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78496 AUC after training: 0.5
User 78496 does not improve AUC. Reverting changes.
Training on augumented user 56341 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56341 AUC after training: 0.5
User 56341 does not improve AUC. Reverting changes.
Training on augumented user 106552 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106552 AUC after training: 0.5
User 106552 does not improve AUC. Reverting changes.
Training on augumented user 35952 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35952 AUC after training: 0.5
User 35952 does not improve AUC. Reverting changes.
Training on augumented user 42164 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42164 AUC after training: 0.5
User 42164 does not improve AUC. Reverting changes.
Training on augumented user 53906 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53906 AUC after training: 0.5
User 53906 does not improve AUC. Reverting changes.
Training on augumented user 83823 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83823 AUC after training: 0.5
User 83823 does not improve AUC. Reverting changes.
Training on augumented user 17318 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17318 AUC after training: 0.5
User 17318 does not improve AUC. Reverting changes.
Training on augumented user 31297 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31297 AUC after training: 0.5
User 31297 does not improve AUC. Reverting changes.
Training on augumented user 18358 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18358 AUC after training: 0.5
User 18358 does not improve AUC. Reverting changes.
Training on augumented user 123532 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123532 AUC after training: 0.5
User 123532 does not improve AUC. Reverting changes.
Training on augumented user 17543 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17543 AUC after training: 0.5
User 17543 does not improve AUC. Reverting changes.
Training on augumented user 98771 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98771 AUC after training: 0.5
User 98771 does not improve AUC. Reverting changes.
Training on augumented user 9764 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9764 AUC after training: 0.5
User 9764 does not improve AUC. Reverting changes.
Training on augumented user 68038 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68038 AUC after training: 0.5
User 68038 does not improve AUC. Reverting changes.
Training on augumented user 93432 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93432 AUC after training: 0.5
User 93432 does not improve AUC. Reverting changes.
Training on augumented user 9832 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9832 AUC after training: 0.5
User 9832 does not improve AUC. Reverting changes.
Training on augumented user 84139 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84139 AUC after training: 0.5
User 84139 does not improve AUC. Reverting changes.
Training on augumented user 38749 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38749 AUC after training: 0.5
User 38749 does not improve AUC. Reverting changes.
Training on augumented user 15031 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15031 AUC after training: 0.5
User 15031 does not improve AUC. Reverting changes.
Training on augumented user 50563 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50563 AUC after training: 0.5
User 50563 does not improve AUC. Reverting changes.
Training on augumented user 28870 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28870 AUC after training: 0.5
User 28870 does not improve AUC. Reverting changes.
Training on augumented user 42736 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42736 AUC after training: 0.5
User 42736 does not improve AUC. Reverting changes.
Training on augumented user 128011 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128011 AUC after training: 0.5
User 128011 does not improve AUC. Reverting changes.
Training on augumented user 65768 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65768 AUC after training: 0.5
User 65768 does not improve AUC. Reverting changes.
Training on augumented user 128767 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128767 AUC after training: 0.5
User 128767 does not improve AUC. Reverting changes.
Training on augumented user 22784 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22784 AUC after training: 0.5
User 22784 does not improve AUC. Reverting changes.
Training on augumented user 118326 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118326 AUC after training: 0.5
User 118326 does not improve AUC. Reverting changes.
Training on augumented user 68609 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68609 AUC after training: 0.5
User 68609 does not improve AUC. Reverting changes.
Training on augumented user 101018 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101018 AUC after training: 0.5
User 101018 does not improve AUC. Reverting changes.
Training on augumented user 31765 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31765 AUC after training: 0.5
User 31765 does not improve AUC. Reverting changes.
Training on augumented user 58290 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58290 AUC after training: 0.5
User 58290 does not improve AUC. Reverting changes.
Training on augumented user 49659 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49659 AUC after training: 0.5
User 49659 does not improve AUC. Reverting changes.
Training on augumented user 67717 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67717 AUC after training: 0.5
User 67717 does not improve AUC. Reverting changes.
Training on augumented user 122952 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122952 AUC after training: 0.5
User 122952 does not improve AUC. Reverting changes.
Training on augumented user 10984 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10984 AUC after training: 0.5
User 10984 does not improve AUC. Reverting changes.
Training on augumented user 3295 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3295 AUC after training: 0.5
User 3295 does not improve AUC. Reverting changes.
Training on augumented user 21638 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21638 AUC after training: 0.5
User 21638 does not improve AUC. Reverting changes.
Training on augumented user 32388 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32388 AUC after training: 0.5
User 32388 does not improve AUC. Reverting changes.
Training on augumented user 36814 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36814 AUC after training: 0.5
User 36814 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:44.008224] start test user 124177 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:44.663224] start test user 124177 15/567 recall augumented users by random, augumented_users = [92846, 34735, 103916, 112015, 134734, 56864, 90017, 105193, 121321, 15259, 111766, 93763, 64183, 16007, 135434, 104934, 116336, 47045, 79260, 61735, 88760, 110325, 111660, 77783, 2395, 10558, 111201, 105808, 12692, 23380, 111651, 54537, 134068, 14997, 32334, 50948, 85627, 66988, 53422, 1950, 114133, 20386, 109282, 117612, 53986, 134354, 51161, 86421, 64165, 36463]
[2024-12-02 17:45:44.678039] user = 124177 Cloud 15/567
[2024-12-02 17:45:44.694801] user = 124177 Local 15/567
[2024-12-02 17:45:44.731010] user = 124177 Local+ 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:46.679591] user = 124177 MPDA- 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 92846 0/50 current_auc = 1.0
User 92846 AUC after training: 1.0
User 92846 does not improve AUC. Reverting changes.
Training on augumented user 34735 1/50 current_auc = 1.0
User 34735 AUC after training: 1.0
User 34735 does not improve AUC. Reverting changes.
Training on augumented user 103916 2/50 current_auc = 1.0
User 103916 AUC after training: 1.0
User 103916 does not improve AUC. Reverting changes.
Training on augumented user 112015 3/50 current_auc = 1.0
User 112015 AUC after training: 1.0
User 112015 does not improve AUC. Reverting changes.
Training on augumented user 134734 4/50 current_auc = 1.0
User 134734 AUC after training: 1.0
User 134734 does not improve AUC. Reverting changes.
Training on augumented user 56864 5/50 current_auc = 1.0
User 56864 AUC after training: 1.0
User 56864 does not improve AUC. Reverting changes.
Training on augumented user 90017 6/50 current_auc = 1.0
User 90017 AUC after training: 1.0
User 90017 does not improve AUC. Reverting changes.
Training on augumented user 105193 7/50 current_auc = 1.0
User 105193 AUC after training: 1.0
User 105193 does not improve AUC. Reverting changes.
Training on augumented user 121321 8/50 current_auc = 1.0
User 121321 AUC after training: 1.0
User 121321 does not improve AUC. Reverting changes.
Training on augumented user 15259 9/50 current_auc = 1.0
User 15259 AUC after training: 1.0
User 15259 does not improve AUC. Reverting changes.
Training on augumented user 111766 10/50 current_auc = 1.0
User 111766 AUC after training: 1.0
User 111766 does not improve AUC. Reverting changes.
Training on augumented user 93763 11/50 current_auc = 1.0
User 93763 AUC after training: 1.0
User 93763 does not improve AUC. Reverting changes.
Training on augumented user 64183 12/50 current_auc = 1.0
User 64183 AUC after training: 1.0
User 64183 does not improve AUC. Reverting changes.
Training on augumented user 16007 13/50 current_auc = 1.0
User 16007 AUC after training: 1.0
User 16007 does not improve AUC. Reverting changes.
Training on augumented user 135434 14/50 current_auc = 1.0
User 135434 AUC after training: 1.0
User 135434 does not improve AUC. Reverting changes.
Training on augumented user 104934 15/50 current_auc = 1.0
User 104934 AUC after training: 1.0
User 104934 does not improve AUC. Reverting changes.
Training on augumented user 116336 16/50 current_auc = 1.0
User 116336 AUC after training: 1.0
User 116336 does not improve AUC. Reverting changes.
Training on augumented user 47045 17/50 current_auc = 1.0
User 47045 AUC after training: 1.0
User 47045 does not improve AUC. Reverting changes.
Training on augumented user 79260 18/50 current_auc = 1.0
User 79260 AUC after training: 1.0
User 79260 does not improve AUC. Reverting changes.
Training on augumented user 61735 19/50 current_auc = 1.0
User 61735 AUC after training: 1.0
User 61735 does not improve AUC. Reverting changes.
Training on augumented user 88760 20/50 current_auc = 1.0
User 88760 AUC after training: 1.0
User 88760 does not improve AUC. Reverting changes.
Training on augumented user 110325 21/50 current_auc = 1.0
User 110325 AUC after training: 1.0
User 110325 does not improve AUC. Reverting changes.
Training on augumented user 111660 22/50 current_auc = 1.0
User 111660 AUC after training: 1.0
User 111660 does not improve AUC. Reverting changes.
Training on augumented user 77783 23/50 current_auc = 1.0
User 77783 AUC after training: 1.0
User 77783 does not improve AUC. Reverting changes.
Training on augumented user 2395 24/50 current_auc = 1.0
User 2395 AUC after training: 1.0
User 2395 does not improve AUC. Reverting changes.
Training on augumented user 10558 25/50 current_auc = 1.0
User 10558 AUC after training: 1.0
User 10558 does not improve AUC. Reverting changes.
Training on augumented user 111201 26/50 current_auc = 1.0
User 111201 AUC after training: 1.0
User 111201 does not improve AUC. Reverting changes.
Training on augumented user 105808 27/50 current_auc = 1.0
User 105808 AUC after training: 1.0
User 105808 does not improve AUC. Reverting changes.
Training on augumented user 12692 28/50 current_auc = 1.0
User 12692 AUC after training: 1.0
User 12692 does not improve AUC. Reverting changes.
Training on augumented user 23380 29/50 current_auc = 1.0
User 23380 AUC after training: 1.0
User 23380 does not improve AUC. Reverting changes.
Training on augumented user 111651 30/50 current_auc = 1.0
User 111651 AUC after training: 1.0
User 111651 does not improve AUC. Reverting changes.
Training on augumented user 54537 31/50 current_auc = 1.0
User 54537 AUC after training: 1.0
User 54537 does not improve AUC. Reverting changes.
Training on augumented user 134068 32/50 current_auc = 1.0
User 134068 AUC after training: 1.0
User 134068 does not improve AUC. Reverting changes.
Training on augumented user 14997 33/50 current_auc = 1.0
User 14997 AUC after training: 1.0
User 14997 does not improve AUC. Reverting changes.
Training on augumented user 32334 34/50 current_auc = 1.0
User 32334 AUC after training: 1.0
User 32334 does not improve AUC. Reverting changes.
Training on augumented user 50948 35/50 current_auc = 1.0
User 50948 AUC after training: 1.0
User 50948 does not improve AUC. Reverting changes.
Training on augumented user 85627 36/50 current_auc = 1.0
User 85627 AUC after training: 1.0
User 85627 does not improve AUC. Reverting changes.
Training on augumented user 66988 37/50 current_auc = 1.0
User 66988 AUC after training: 1.0
User 66988 does not improve AUC. Reverting changes.
Training on augumented user 53422 38/50 current_auc = 1.0
User 53422 AUC after training: 1.0
User 53422 does not improve AUC. Reverting changes.
Training on augumented user 1950 39/50 current_auc = 1.0
User 1950 AUC after training: 1.0
User 1950 does not improve AUC. Reverting changes.
Training on augumented user 114133 40/50 current_auc = 1.0
User 114133 AUC after training: 1.0
User 114133 does not improve AUC. Reverting changes.
Training on augumented user 20386 41/50 current_auc = 1.0
User 20386 AUC after training: 1.0
User 20386 does not improve AUC. Reverting changes.
Training on augumented user 109282 42/50 current_auc = 1.0
User 109282 AUC after training: 1.0
User 109282 does not improve AUC. Reverting changes.
Training on augumented user 117612 43/50 current_auc = 1.0
User 117612 AUC after training: 1.0
User 117612 does not improve AUC. Reverting changes.
Training on augumented user 53986 44/50 current_auc = 1.0
User 53986 AUC after training: 1.0
User 53986 does not improve AUC. Reverting changes.
Training on augumented user 134354 45/50 current_auc = 1.0
User 134354 AUC after training: 1.0
User 134354 does not improve AUC. Reverting changes.
Training on augumented user 51161 46/50 current_auc = 1.0
User 51161 AUC after training: 1.0
User 51161 does not improve AUC. Reverting changes.
Training on augumented user 86421 47/50 current_auc = 1.0
User 86421 AUC after training: 1.0
User 86421 does not improve AUC. Reverting changes.
Training on augumented user 64165 48/50 current_auc = 1.0
User 64165 AUC after training: 1.0
User 64165 does not improve AUC. Reverting changes.
Training on augumented user 36463 49/50 current_auc = 1.0
User 36463 AUC after training: 1.0
User 36463 does not improve AUC. Reverting changes.
[2024-12-02 17:46:14.157003] start test user 124186 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:14.572772] start test user 124186 16/567 recall augumented users by random, augumented_users = [95182, 18793, 6090, 29928, 4138, 64362, 78606, 118883, 108057, 121558, 67415, 115717, 74527, 15157, 76020, 53186, 27312, 21941, 43558, 36970, 88627, 107099, 71499, 5127, 31596, 2061, 86651, 113276, 49931, 53826, 89026, 62359, 108188, 118837, 87280, 31109, 128626, 102044, 132085, 116193, 6549, 58526, 9514, 35848, 25760, 57268, 15116, 104749, 25995, 134159]
[2024-12-02 17:46:14.587026] user = 124186 Cloud 16/567
[2024-12-02 17:46:14.600795] user = 124186 Local 16/567
[2024-12-02 17:46:14.622783] user = 124186 Local+ 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:16.992836] user = 124186 MPDA- 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.600952380952381
Training on augumented user 95182 0/50 current_auc = 0.600952380952381
User 95182 AUC after training: 0.6028571428571429
User 95182 improves AUC. Keeping the model.
Training on augumented user 18793 1/50 current_auc = 0.6028571428571429
User 18793 AUC after training: 0.6028571428571429
User 18793 does not improve AUC. Reverting changes.
Training on augumented user 6090 2/50 current_auc = 0.6028571428571429
User 6090 AUC after training: 0.6038095238095238
User 6090 improves AUC. Keeping the model.
Training on augumented user 29928 3/50 current_auc = 0.6038095238095238
User 29928 AUC after training: 0.6028571428571429
User 29928 does not improve AUC. Reverting changes.
Training on augumented user 4138 4/50 current_auc = 0.6038095238095238
User 4138 AUC after training: 0.6057142857142858
User 4138 improves AUC. Keeping the model.
Training on augumented user 64362 5/50 current_auc = 0.6057142857142858
User 64362 AUC after training: 0.6076190476190477
User 64362 improves AUC. Keeping the model.
Training on augumented user 78606 6/50 current_auc = 0.6076190476190477
User 78606 AUC after training: 0.6028571428571429
User 78606 does not improve AUC. Reverting changes.
Training on augumented user 118883 7/50 current_auc = 0.6076190476190477
User 118883 AUC after training: 0.6066666666666667
User 118883 does not improve AUC. Reverting changes.
Training on augumented user 108057 8/50 current_auc = 0.6076190476190477
User 108057 AUC after training: 0.6066666666666667
User 108057 does not improve AUC. Reverting changes.
Training on augumented user 121558 9/50 current_auc = 0.6076190476190477
User 121558 AUC after training: 0.6076190476190476
User 121558 does not improve AUC. Reverting changes.
Training on augumented user 67415 10/50 current_auc = 0.6076190476190477
User 67415 AUC after training: 0.6066666666666667
User 67415 does not improve AUC. Reverting changes.
Training on augumented user 115717 11/50 current_auc = 0.6076190476190477
User 115717 AUC after training: 0.6066666666666667
User 115717 does not improve AUC. Reverting changes.
Training on augumented user 74527 12/50 current_auc = 0.6076190476190477
User 74527 AUC after training: 0.6047619047619048
User 74527 does not improve AUC. Reverting changes.
Training on augumented user 15157 13/50 current_auc = 0.6076190476190477
User 15157 AUC after training: 0.6066666666666667
User 15157 does not improve AUC. Reverting changes.
Training on augumented user 76020 14/50 current_auc = 0.6076190476190477
User 76020 AUC after training: 0.6047619047619047
User 76020 does not improve AUC. Reverting changes.
Training on augumented user 53186 15/50 current_auc = 0.6076190476190477
User 53186 AUC after training: 0.6047619047619048
User 53186 does not improve AUC. Reverting changes.
Training on augumented user 27312 16/50 current_auc = 0.6076190476190477
User 27312 AUC after training: 0.6028571428571429
User 27312 does not improve AUC. Reverting changes.
Training on augumented user 21941 17/50 current_auc = 0.6076190476190477
User 21941 AUC after training: 0.6047619047619048
User 21941 does not improve AUC. Reverting changes.
Training on augumented user 43558 18/50 current_auc = 0.6076190476190477
User 43558 AUC after training: 0.6066666666666667
User 43558 does not improve AUC. Reverting changes.
Training on augumented user 36970 19/50 current_auc = 0.6076190476190477
User 36970 AUC after training: 0.6057142857142858
User 36970 does not improve AUC. Reverting changes.
Training on augumented user 88627 20/50 current_auc = 0.6076190476190477
User 88627 AUC after training: 0.6066666666666667
User 88627 does not improve AUC. Reverting changes.
Training on augumented user 107099 21/50 current_auc = 0.6076190476190477
User 107099 AUC after training: 0.6038095238095239
User 107099 does not improve AUC. Reverting changes.
Training on augumented user 71499 22/50 current_auc = 0.6076190476190477
User 71499 AUC after training: 0.6066666666666667
User 71499 does not improve AUC. Reverting changes.
Training on augumented user 5127 23/50 current_auc = 0.6076190476190477
User 5127 AUC after training: 0.6057142857142858
User 5127 does not improve AUC. Reverting changes.
Training on augumented user 31596 24/50 current_auc = 0.6076190476190477
User 31596 AUC after training: 0.6066666666666667
User 31596 does not improve AUC. Reverting changes.
Training on augumented user 2061 25/50 current_auc = 0.6076190476190477
User 2061 AUC after training: 0.6066666666666667
User 2061 does not improve AUC. Reverting changes.
Training on augumented user 86651 26/50 current_auc = 0.6076190476190477
User 86651 AUC after training: 0.6028571428571429
User 86651 does not improve AUC. Reverting changes.
Training on augumented user 113276 27/50 current_auc = 0.6076190476190477
User 113276 AUC after training: 0.6057142857142858
User 113276 does not improve AUC. Reverting changes.
Training on augumented user 49931 28/50 current_auc = 0.6076190476190477
User 49931 AUC after training: 0.6076190476190477
User 49931 does not improve AUC. Reverting changes.
Training on augumented user 53826 29/50 current_auc = 0.6076190476190477
User 53826 AUC after training: 0.6028571428571429
User 53826 does not improve AUC. Reverting changes.
Training on augumented user 89026 30/50 current_auc = 0.6076190476190477
User 89026 AUC after training: 0.6028571428571429
User 89026 does not improve AUC. Reverting changes.
Training on augumented user 62359 31/50 current_auc = 0.6076190476190477
User 62359 AUC after training: 0.6057142857142858
User 62359 does not improve AUC. Reverting changes.
Training on augumented user 108188 32/50 current_auc = 0.6076190476190477
User 108188 AUC after training: 0.6085714285714287
User 108188 improves AUC. Keeping the model.
Training on augumented user 118837 33/50 current_auc = 0.6085714285714287
User 118837 AUC after training: 0.6066666666666667
User 118837 does not improve AUC. Reverting changes.
Training on augumented user 87280 34/50 current_auc = 0.6085714285714287
User 87280 AUC after training: 0.6066666666666667
User 87280 does not improve AUC. Reverting changes.
Training on augumented user 31109 35/50 current_auc = 0.6085714285714287
User 31109 AUC after training: 0.6047619047619047
User 31109 does not improve AUC. Reverting changes.
Training on augumented user 128626 36/50 current_auc = 0.6085714285714287
User 128626 AUC after training: 0.6085714285714287
User 128626 does not improve AUC. Reverting changes.
Training on augumented user 102044 37/50 current_auc = 0.6085714285714287
User 102044 AUC after training: 0.6076190476190476
User 102044 does not improve AUC. Reverting changes.
Training on augumented user 132085 38/50 current_auc = 0.6085714285714287
User 132085 AUC after training: 0.6085714285714287
User 132085 does not improve AUC. Reverting changes.
Training on augumented user 116193 39/50 current_auc = 0.6085714285714287
User 116193 AUC after training: 0.6076190476190476
User 116193 does not improve AUC. Reverting changes.
Training on augumented user 6549 40/50 current_auc = 0.6085714285714287
User 6549 AUC after training: 0.6019047619047619
User 6549 does not improve AUC. Reverting changes.
Training on augumented user 58526 41/50 current_auc = 0.6085714285714287
User 58526 AUC after training: 0.6066666666666667
User 58526 does not improve AUC. Reverting changes.
Training on augumented user 9514 42/50 current_auc = 0.6085714285714287
User 9514 AUC after training: 0.6038095238095238
User 9514 does not improve AUC. Reverting changes.
Training on augumented user 35848 43/50 current_auc = 0.6085714285714287
User 35848 AUC after training: 0.6066666666666668
User 35848 does not improve AUC. Reverting changes.
Training on augumented user 25760 44/50 current_auc = 0.6085714285714287
User 25760 AUC after training: 0.6057142857142856
User 25760 does not improve AUC. Reverting changes.
Training on augumented user 57268 45/50 current_auc = 0.6085714285714287
User 57268 AUC after training: 0.6047619047619047
User 57268 does not improve AUC. Reverting changes.
Training on augumented user 15116 46/50 current_auc = 0.6085714285714287
User 15116 AUC after training: 0.6066666666666668
User 15116 does not improve AUC. Reverting changes.
Training on augumented user 104749 47/50 current_auc = 0.6085714285714287
User 104749 AUC after training: 0.6085714285714287
User 104749 does not improve AUC. Reverting changes.
Training on augumented user 25995 48/50 current_auc = 0.6085714285714287
User 25995 AUC after training: 0.6066666666666667
User 25995 does not improve AUC. Reverting changes.
Training on augumented user 134159 49/50 current_auc = 0.6085714285714287
User 134159 AUC after training: 0.6047619047619048
User 134159 does not improve AUC. Reverting changes.
[2024-12-02 17:46:49.014960] start test user 124208 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:49.514396] start test user 124208 17/567 recall augumented users by random, augumented_users = [36447, 120490, 59544, 55137, 43545, 112431, 6668, 92534, 25467, 3470, 59702, 92140, 96869, 61974, 110092, 89582, 94951, 110318, 82501, 34606, 106687, 7144, 19291, 79788, 40880, 108296, 96457, 132843, 41740, 35038, 9621, 5882, 66961, 43405, 135964, 26467, 6513, 41336, 67041, 105351, 56706, 85793, 121163, 122494, 94766, 40388, 22042, 129137, 135070, 66622]
[2024-12-02 17:46:49.529399] user = 124208 Cloud 17/567
[2024-12-02 17:46:49.548739] user = 124208 Local 17/567
[2024-12-02 17:46:49.600029] user = 124208 Local+ 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:52.928705] user = 124208 MPDA- 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5778805904384225
Training on augumented user 36447 0/50 current_auc = 0.5778805904384225
User 36447 AUC after training: 0.5789821546596167
User 36447 improves AUC. Keeping the model.
Training on augumented user 120490 1/50 current_auc = 0.5789821546596167
User 120490 AUC after training: 0.5776602775941837
User 120490 does not improve AUC. Reverting changes.
Training on augumented user 59544 2/50 current_auc = 0.5789821546596167
User 59544 AUC after training: 0.5789821546596167
User 59544 does not improve AUC. Reverting changes.
Training on augumented user 55137 3/50 current_auc = 0.5789821546596167
User 55137 AUC after training: 0.577439964749945
User 55137 does not improve AUC. Reverting changes.
Training on augumented user 43545 4/50 current_auc = 0.5789821546596167
User 43545 AUC after training: 0.5743555849306015
User 43545 does not improve AUC. Reverting changes.
Training on augumented user 112431 5/50 current_auc = 0.5789821546596167
User 112431 AUC after training: 0.5792024675038555
User 112431 improves AUC. Keeping the model.
Training on augumented user 6668 6/50 current_auc = 0.5792024675038555
User 6668 AUC after training: 0.578541528971139
User 6668 does not improve AUC. Reverting changes.
Training on augumented user 92534 7/50 current_auc = 0.5792024675038555
User 92534 AUC after training: 0.5783212161269002
User 92534 does not improve AUC. Reverting changes.
Training on augumented user 25467 8/50 current_auc = 0.5792024675038555
User 25467 AUC after training: 0.577439964749945
User 25467 does not improve AUC. Reverting changes.
Training on augumented user 3470 9/50 current_auc = 0.5792024675038555
User 3470 AUC after training: 0.578541528971139
User 3470 does not improve AUC. Reverting changes.
Training on augumented user 59702 10/50 current_auc = 0.5792024675038555
User 59702 AUC after training: 0.5787618418153778
User 59702 does not improve AUC. Reverting changes.
Training on augumented user 92140 11/50 current_auc = 0.5792024675038555
User 92140 AUC after training: 0.5789821546596167
User 92140 does not improve AUC. Reverting changes.
Training on augumented user 96869 12/50 current_auc = 0.5792024675038555
User 96869 AUC after training: 0.5776602775941837
User 96869 does not improve AUC. Reverting changes.
Training on augumented user 61974 13/50 current_auc = 0.5792024675038555
User 61974 AUC after training: 0.5785415289711391
User 61974 does not improve AUC. Reverting changes.
Training on augumented user 110092 14/50 current_auc = 0.5792024675038555
User 110092 AUC after training: 0.5783212161269002
User 110092 does not improve AUC. Reverting changes.
Training on augumented user 89582 15/50 current_auc = 0.5792024675038555
User 89582 AUC after training: 0.5789821546596167
User 89582 does not improve AUC. Reverting changes.
Training on augumented user 94951 16/50 current_auc = 0.5792024675038555
User 94951 AUC after training: 0.5792024675038555
User 94951 does not improve AUC. Reverting changes.
Training on augumented user 110318 17/50 current_auc = 0.5792024675038555
User 110318 AUC after training: 0.5785415289711391
User 110318 does not improve AUC. Reverting changes.
Training on augumented user 82501 18/50 current_auc = 0.5792024675038555
User 82501 AUC after training: 0.5783212161269001
User 82501 does not improve AUC. Reverting changes.
Training on augumented user 34606 19/50 current_auc = 0.5792024675038555
User 34606 AUC after training: 0.5785415289711391
User 34606 does not improve AUC. Reverting changes.
Training on augumented user 106687 20/50 current_auc = 0.5792024675038555
User 106687 AUC after training: 0.5789821546596167
User 106687 does not improve AUC. Reverting changes.
Training on augumented user 7144 21/50 current_auc = 0.5792024675038555
User 7144 AUC after training: 0.5789821546596167
User 7144 does not improve AUC. Reverting changes.
Training on augumented user 19291 22/50 current_auc = 0.5792024675038555
User 19291 AUC after training: 0.5778805904384225
User 19291 does not improve AUC. Reverting changes.
Training on augumented user 79788 23/50 current_auc = 0.5792024675038555
User 79788 AUC after training: 0.5789821546596167
User 79788 does not improve AUC. Reverting changes.
Training on augumented user 40880 24/50 current_auc = 0.5792024675038555
User 40880 AUC after training: 0.578541528971139
User 40880 does not improve AUC. Reverting changes.
Training on augumented user 108296 25/50 current_auc = 0.5792024675038555
User 108296 AUC after training: 0.5785415289711391
User 108296 does not improve AUC. Reverting changes.
Training on augumented user 96457 26/50 current_auc = 0.5792024675038555
User 96457 AUC after training: 0.5781009032826614
User 96457 does not improve AUC. Reverting changes.
Training on augumented user 132843 27/50 current_auc = 0.5792024675038555
User 132843 AUC after training: 0.5786516853932584
User 132843 does not improve AUC. Reverting changes.
Training on augumented user 41740 28/50 current_auc = 0.5792024675038555
User 41740 AUC after training: 0.578541528971139
User 41740 does not improve AUC. Reverting changes.
Training on augumented user 35038 29/50 current_auc = 0.5792024675038555
User 35038 AUC after training: 0.5781009032826614
User 35038 does not improve AUC. Reverting changes.
Training on augumented user 9621 30/50 current_auc = 0.5792024675038555
User 9621 AUC after training: 0.5773298083278255
User 9621 does not improve AUC. Reverting changes.
Training on augumented user 5882 31/50 current_auc = 0.5792024675038555
User 5882 AUC after training: 0.5800837188808108
User 5882 improves AUC. Keeping the model.
Training on augumented user 66961 32/50 current_auc = 0.5800837188808108
User 66961 AUC after training: 0.5785415289711391
User 66961 does not improve AUC. Reverting changes.
Training on augumented user 43405 33/50 current_auc = 0.5800837188808108
User 43405 AUC after training: 0.5789821546596167
User 43405 does not improve AUC. Reverting changes.
Training on augumented user 135964 34/50 current_auc = 0.5800837188808108
User 135964 AUC after training: 0.5804141881471689
User 135964 improves AUC. Keeping the model.
Training on augumented user 26467 35/50 current_auc = 0.5804141881471689
User 26467 AUC after training: 0.578541528971139
User 26467 does not improve AUC. Reverting changes.
Training on augumented user 6513 36/50 current_auc = 0.5804141881471689
User 6513 AUC after training: 0.5783212161269002
User 6513 does not improve AUC. Reverting changes.
Training on augumented user 41336 37/50 current_auc = 0.5804141881471689
User 41336 AUC after training: 0.580414188147169
User 41336 improves AUC. Keeping the model.
Training on augumented user 67041 38/50 current_auc = 0.580414188147169
User 67041 AUC after training: 0.5795329367702137
User 67041 does not improve AUC. Reverting changes.
Training on augumented user 105351 39/50 current_auc = 0.580414188147169
User 105351 AUC after training: 0.5798634060365719
User 105351 does not improve AUC. Reverting changes.
Training on augumented user 56706 40/50 current_auc = 0.580414188147169
User 56706 AUC after training: 0.5798634060365719
User 56706 does not improve AUC. Reverting changes.
Training on augumented user 85793 41/50 current_auc = 0.580414188147169
User 85793 AUC after training: 0.5796430931923332
User 85793 does not improve AUC. Reverting changes.
Training on augumented user 121163 42/50 current_auc = 0.580414188147169
User 121163 AUC after training: 0.5787618418153778
User 121163 does not improve AUC. Reverting changes.
Training on augumented user 122494 43/50 current_auc = 0.580414188147169
User 122494 AUC after training: 0.5787618418153778
User 122494 does not improve AUC. Reverting changes.
Training on augumented user 94766 44/50 current_auc = 0.580414188147169
User 94766 AUC after training: 0.5812954395241243
User 94766 improves AUC. Keeping the model.
Training on augumented user 40388 45/50 current_auc = 0.5812954395241243
User 40388 AUC after training: 0.579863406036572
User 40388 does not improve AUC. Reverting changes.
Training on augumented user 22042 46/50 current_auc = 0.5812954395241243
User 22042 AUC after training: 0.5796430931923331
User 22042 does not improve AUC. Reverting changes.
Training on augumented user 129137 47/50 current_auc = 0.5812954395241243
User 129137 AUC after training: 0.5799735624586914
User 129137 does not improve AUC. Reverting changes.
Training on augumented user 135070 48/50 current_auc = 0.5812954395241243
User 135070 AUC after training: 0.5788719982374972
User 135070 does not improve AUC. Reverting changes.
Training on augumented user 66622 49/50 current_auc = 0.5812954395241243
User 66622 AUC after training: 0.5798634060365719
User 66622 does not improve AUC. Reverting changes.
[2024-12-02 17:47:19.672341] start test user 124210 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:20.092291] start test user 124210 18/567 recall augumented users by random, augumented_users = [54997, 93290, 127062, 91559, 71651, 60112, 74235, 60663, 133060, 34733, 66605, 102280, 51446, 52593, 109051, 79699, 51416, 137628, 136402, 3757, 4698, 52926, 136960, 116589, 104510, 24741, 26134, 100706, 11970, 26201, 112054, 563, 38250, 110090, 122431, 40995, 74151, 63158, 30744, 97095, 16044, 129136, 2328, 68871, 43795, 106340, 83337, 85458, 45685, 110938]
[2024-12-02 17:47:20.107061] user = 124210 Cloud 18/567
[2024-12-02 17:47:20.117428] user = 124210 Local 18/567
[2024-12-02 17:47:20.171387] user = 124210 Local+ 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:22.214802] user = 124210 MPDA- 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6704545454545454
Training on augumented user 54997 0/50 current_auc = 0.6704545454545454
User 54997 AUC after training: 0.6704545454545454
User 54997 does not improve AUC. Reverting changes.
Training on augumented user 93290 1/50 current_auc = 0.6704545454545454
User 93290 AUC after training: 0.6732954545454546
User 93290 improves AUC. Keeping the model.
Training on augumented user 127062 2/50 current_auc = 0.6732954545454546
User 127062 AUC after training: 0.6732954545454546
User 127062 does not improve AUC. Reverting changes.
Training on augumented user 91559 3/50 current_auc = 0.6732954545454546
User 91559 AUC after training: 0.6704545454545455
User 91559 does not improve AUC. Reverting changes.
Training on augumented user 71651 4/50 current_auc = 0.6732954545454546
User 71651 AUC after training: 0.6732954545454546
User 71651 does not improve AUC. Reverting changes.
Training on augumented user 60112 5/50 current_auc = 0.6732954545454546
User 60112 AUC after training: 0.6732954545454546
User 60112 does not improve AUC. Reverting changes.
Training on augumented user 74235 6/50 current_auc = 0.6732954545454546
User 74235 AUC after training: 0.671875
User 74235 does not improve AUC. Reverting changes.
Training on augumented user 60663 7/50 current_auc = 0.6732954545454546
User 60663 AUC after training: 0.6732954545454546
User 60663 does not improve AUC. Reverting changes.
Training on augumented user 133060 8/50 current_auc = 0.6732954545454546
User 133060 AUC after training: 0.6732954545454546
User 133060 does not improve AUC. Reverting changes.
Training on augumented user 34733 9/50 current_auc = 0.6732954545454546
User 34733 AUC after training: 0.671875
User 34733 does not improve AUC. Reverting changes.
Training on augumented user 66605 10/50 current_auc = 0.6732954545454546
User 66605 AUC after training: 0.671875
User 66605 does not improve AUC. Reverting changes.
Training on augumented user 102280 11/50 current_auc = 0.6732954545454546
User 102280 AUC after training: 0.6718750000000001
User 102280 does not improve AUC. Reverting changes.
Training on augumented user 51446 12/50 current_auc = 0.6732954545454546
User 51446 AUC after training: 0.671875
User 51446 does not improve AUC. Reverting changes.
Training on augumented user 52593 13/50 current_auc = 0.6732954545454546
User 52593 AUC after training: 0.671875
User 52593 does not improve AUC. Reverting changes.
Training on augumented user 109051 14/50 current_auc = 0.6732954545454546
User 109051 AUC after training: 0.6732954545454546
User 109051 does not improve AUC. Reverting changes.
Training on augumented user 79699 15/50 current_auc = 0.6732954545454546
User 79699 AUC after training: 0.6704545454545455
User 79699 does not improve AUC. Reverting changes.
Training on augumented user 51416 16/50 current_auc = 0.6732954545454546
User 51416 AUC after training: 0.6732954545454546
User 51416 does not improve AUC. Reverting changes.
Training on augumented user 137628 17/50 current_auc = 0.6732954545454546
User 137628 AUC after training: 0.6732954545454546
User 137628 does not improve AUC. Reverting changes.
Training on augumented user 136402 18/50 current_auc = 0.6732954545454546
User 136402 AUC after training: 0.6732954545454546
User 136402 does not improve AUC. Reverting changes.
Training on augumented user 3757 19/50 current_auc = 0.6732954545454546
User 3757 AUC after training: 0.6747159090909091
User 3757 improves AUC. Keeping the model.
Training on augumented user 4698 20/50 current_auc = 0.6747159090909091
User 4698 AUC after training: 0.6761363636363636
User 4698 improves AUC. Keeping the model.
Training on augumented user 52926 21/50 current_auc = 0.6761363636363636
User 52926 AUC after training: 0.6761363636363636
User 52926 does not improve AUC. Reverting changes.
Training on augumented user 136960 22/50 current_auc = 0.6761363636363636
User 136960 AUC after training: 0.6732954545454546
User 136960 does not improve AUC. Reverting changes.
Training on augumented user 116589 23/50 current_auc = 0.6761363636363636
User 116589 AUC after training: 0.6747159090909091
User 116589 does not improve AUC. Reverting changes.
Training on augumented user 104510 24/50 current_auc = 0.6761363636363636
User 104510 AUC after training: 0.6732954545454546
User 104510 does not improve AUC. Reverting changes.
Training on augumented user 24741 25/50 current_auc = 0.6761363636363636
User 24741 AUC after training: 0.6747159090909091
User 24741 does not improve AUC. Reverting changes.
Training on augumented user 26134 26/50 current_auc = 0.6761363636363636
User 26134 AUC after training: 0.6747159090909091
User 26134 does not improve AUC. Reverting changes.
Training on augumented user 100706 27/50 current_auc = 0.6761363636363636
User 100706 AUC after training: 0.6761363636363636
User 100706 does not improve AUC. Reverting changes.
Training on augumented user 11970 28/50 current_auc = 0.6761363636363636
User 11970 AUC after training: 0.6761363636363636
User 11970 does not improve AUC. Reverting changes.
Training on augumented user 26201 29/50 current_auc = 0.6761363636363636
User 26201 AUC after training: 0.6761363636363636
User 26201 does not improve AUC. Reverting changes.
Training on augumented user 112054 30/50 current_auc = 0.6761363636363636
User 112054 AUC after training: 0.6761363636363636
User 112054 does not improve AUC. Reverting changes.
Training on augumented user 563 31/50 current_auc = 0.6761363636363636
User 563 AUC after training: 0.6747159090909092
User 563 does not improve AUC. Reverting changes.
Training on augumented user 38250 32/50 current_auc = 0.6761363636363636
User 38250 AUC after training: 0.6747159090909091
User 38250 does not improve AUC. Reverting changes.
Training on augumented user 110090 33/50 current_auc = 0.6761363636363636
User 110090 AUC after training: 0.6761363636363636
User 110090 does not improve AUC. Reverting changes.
Training on augumented user 122431 34/50 current_auc = 0.6761363636363636
User 122431 AUC after training: 0.6775568181818181
User 122431 improves AUC. Keeping the model.
Training on augumented user 40995 35/50 current_auc = 0.6775568181818181
User 40995 AUC after training: 0.6761363636363636
User 40995 does not improve AUC. Reverting changes.
Training on augumented user 74151 36/50 current_auc = 0.6775568181818181
User 74151 AUC after training: 0.6761363636363636
User 74151 does not improve AUC. Reverting changes.
Training on augumented user 63158 37/50 current_auc = 0.6775568181818181
User 63158 AUC after training: 0.6747159090909091
User 63158 does not improve AUC. Reverting changes.
Training on augumented user 30744 38/50 current_auc = 0.6775568181818181
User 30744 AUC after training: 0.6761363636363636
User 30744 does not improve AUC. Reverting changes.
Training on augumented user 97095 39/50 current_auc = 0.6775568181818181
User 97095 AUC after training: 0.6761363636363636
User 97095 does not improve AUC. Reverting changes.
Training on augumented user 16044 40/50 current_auc = 0.6775568181818181
User 16044 AUC after training: 0.6761363636363636
User 16044 does not improve AUC. Reverting changes.
Training on augumented user 129136 41/50 current_auc = 0.6775568181818181
User 129136 AUC after training: 0.6775568181818182
User 129136 improves AUC. Keeping the model.
Training on augumented user 2328 42/50 current_auc = 0.6775568181818182
User 2328 AUC after training: 0.6775568181818182
User 2328 does not improve AUC. Reverting changes.
Training on augumented user 68871 43/50 current_auc = 0.6775568181818182
User 68871 AUC after training: 0.6775568181818182
User 68871 does not improve AUC. Reverting changes.
Training on augumented user 43795 44/50 current_auc = 0.6775568181818182
User 43795 AUC after training: 0.6761363636363636
User 43795 does not improve AUC. Reverting changes.
Training on augumented user 106340 45/50 current_auc = 0.6775568181818182
User 106340 AUC after training: 0.6761363636363636
User 106340 does not improve AUC. Reverting changes.
Training on augumented user 83337 46/50 current_auc = 0.6775568181818182
User 83337 AUC after training: 0.6747159090909091
User 83337 does not improve AUC. Reverting changes.
Training on augumented user 85458 47/50 current_auc = 0.6775568181818182
User 85458 AUC after training: 0.6761363636363636
User 85458 does not improve AUC. Reverting changes.
Training on augumented user 45685 48/50 current_auc = 0.6775568181818182
User 45685 AUC after training: 0.6789772727272727
User 45685 improves AUC. Keeping the model.
Training on augumented user 110938 49/50 current_auc = 0.6789772727272727
User 110938 AUC after training: 0.6789772727272727
User 110938 does not improve AUC. Reverting changes.
[2024-12-02 17:47:48.892737] start test user 124229 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:49.407991] start test user 124229 19/567 recall augumented users by random, augumented_users = [52342, 107365, 43401, 29919, 10866, 21973, 108208, 58597, 43897, 49045, 231, 87922, 3259, 85479, 109433, 11454, 2068, 124268, 130280, 45381, 100447, 112171, 82158, 36024, 79996, 61159, 47798, 69643, 17761, 129336, 59169, 90862, 14884, 89361, 18984, 136481, 109112, 132262, 105113, 84859, 73550, 135710, 60935, 138005, 117477, 53570, 115418, 115558, 84484, 27753]
[2024-12-02 17:47:49.436464] user = 124229 Cloud 19/567
[2024-12-02 17:47:49.454077] user = 124229 Local 19/567
[2024-12-02 17:47:49.524658] user = 124229 Local+ 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:51.514268] user = 124229 MPDA- 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7546296296296297
Training on augumented user 52342 0/50 current_auc = 0.7546296296296297
User 52342 AUC after training: 0.7546296296296297
User 52342 does not improve AUC. Reverting changes.
Training on augumented user 107365 1/50 current_auc = 0.7546296296296297
User 107365 AUC after training: 0.7546296296296297
User 107365 does not improve AUC. Reverting changes.
Training on augumented user 43401 2/50 current_auc = 0.7546296296296297
User 43401 AUC after training: 0.7546296296296297
User 43401 does not improve AUC. Reverting changes.
Training on augumented user 29919 3/50 current_auc = 0.7546296296296297
User 29919 AUC after training: 0.7546296296296297
User 29919 does not improve AUC. Reverting changes.
Training on augumented user 10866 4/50 current_auc = 0.7546296296296297
User 10866 AUC after training: 0.7546296296296297
User 10866 does not improve AUC. Reverting changes.
Training on augumented user 21973 5/50 current_auc = 0.7546296296296297
User 21973 AUC after training: 0.7546296296296297
User 21973 does not improve AUC. Reverting changes.
Training on augumented user 108208 6/50 current_auc = 0.7546296296296297
User 108208 AUC after training: 0.7546296296296297
User 108208 does not improve AUC. Reverting changes.
Training on augumented user 58597 7/50 current_auc = 0.7546296296296297
User 58597 AUC after training: 0.7546296296296297
User 58597 does not improve AUC. Reverting changes.
Training on augumented user 43897 8/50 current_auc = 0.7546296296296297
User 43897 AUC after training: 0.7546296296296297
User 43897 does not improve AUC. Reverting changes.
Training on augumented user 49045 9/50 current_auc = 0.7546296296296297
User 49045 AUC after training: 0.7546296296296297
User 49045 does not improve AUC. Reverting changes.
Training on augumented user 231 10/50 current_auc = 0.7546296296296297
User 231 AUC after training: 0.7546296296296297
User 231 does not improve AUC. Reverting changes.
Training on augumented user 87922 11/50 current_auc = 0.7546296296296297
User 87922 AUC after training: 0.7546296296296297
User 87922 does not improve AUC. Reverting changes.
Training on augumented user 3259 12/50 current_auc = 0.7546296296296297
User 3259 AUC after training: 0.7546296296296297
User 3259 does not improve AUC. Reverting changes.
Training on augumented user 85479 13/50 current_auc = 0.7546296296296297
User 85479 AUC after training: 0.7577160493827161
User 85479 improves AUC. Keeping the model.
Training on augumented user 109433 14/50 current_auc = 0.7577160493827161
User 109433 AUC after training: 0.7546296296296297
User 109433 does not improve AUC. Reverting changes.
Training on augumented user 11454 15/50 current_auc = 0.7577160493827161
User 11454 AUC after training: 0.7577160493827161
User 11454 does not improve AUC. Reverting changes.
Training on augumented user 2068 16/50 current_auc = 0.7577160493827161
User 2068 AUC after training: 0.7561728395061729
User 2068 does not improve AUC. Reverting changes.
Training on augumented user 124268 17/50 current_auc = 0.7577160493827161
User 124268 AUC after training: 0.7561728395061729
User 124268 does not improve AUC. Reverting changes.
Training on augumented user 130280 18/50 current_auc = 0.7577160493827161
User 130280 AUC after training: 0.7546296296296297
User 130280 does not improve AUC. Reverting changes.
Training on augumented user 45381 19/50 current_auc = 0.7577160493827161
User 45381 AUC after training: 0.7561728395061729
User 45381 does not improve AUC. Reverting changes.
Training on augumented user 100447 20/50 current_auc = 0.7577160493827161
User 100447 AUC after training: 0.7561728395061729
User 100447 does not improve AUC. Reverting changes.
Training on augumented user 112171 21/50 current_auc = 0.7577160493827161
User 112171 AUC after training: 0.7561728395061729
User 112171 does not improve AUC. Reverting changes.
Training on augumented user 82158 22/50 current_auc = 0.7577160493827161
User 82158 AUC after training: 0.7561728395061729
User 82158 does not improve AUC. Reverting changes.
Training on augumented user 36024 23/50 current_auc = 0.7577160493827161
User 36024 AUC after training: 0.7561728395061729
User 36024 does not improve AUC. Reverting changes.
Training on augumented user 79996 24/50 current_auc = 0.7577160493827161
User 79996 AUC after training: 0.7561728395061729
User 79996 does not improve AUC. Reverting changes.
Training on augumented user 61159 25/50 current_auc = 0.7577160493827161
User 61159 AUC after training: 0.756172839506173
User 61159 does not improve AUC. Reverting changes.
Training on augumented user 47798 26/50 current_auc = 0.7577160493827161
User 47798 AUC after training: 0.7546296296296297
User 47798 does not improve AUC. Reverting changes.
Training on augumented user 69643 27/50 current_auc = 0.7577160493827161
User 69643 AUC after training: 0.7561728395061729
User 69643 does not improve AUC. Reverting changes.
Training on augumented user 17761 28/50 current_auc = 0.7577160493827161
User 17761 AUC after training: 0.7561728395061729
User 17761 does not improve AUC. Reverting changes.
Training on augumented user 129336 29/50 current_auc = 0.7577160493827161
User 129336 AUC after training: 0.7561728395061729
User 129336 does not improve AUC. Reverting changes.
Training on augumented user 59169 30/50 current_auc = 0.7577160493827161
User 59169 AUC after training: 0.7577160493827161
User 59169 does not improve AUC. Reverting changes.
Training on augumented user 90862 31/50 current_auc = 0.7577160493827161
User 90862 AUC after training: 0.7546296296296297
User 90862 does not improve AUC. Reverting changes.
Training on augumented user 14884 32/50 current_auc = 0.7577160493827161
User 14884 AUC after training: 0.7561728395061729
User 14884 does not improve AUC. Reverting changes.
Training on augumented user 89361 33/50 current_auc = 0.7577160493827161
User 89361 AUC after training: 0.7577160493827161
User 89361 does not improve AUC. Reverting changes.
Training on augumented user 18984 34/50 current_auc = 0.7577160493827161
User 18984 AUC after training: 0.7561728395061729
User 18984 does not improve AUC. Reverting changes.
Training on augumented user 136481 35/50 current_auc = 0.7577160493827161
User 136481 AUC after training: 0.7546296296296297
User 136481 does not improve AUC. Reverting changes.
Training on augumented user 109112 36/50 current_auc = 0.7577160493827161
User 109112 AUC after training: 0.756172839506173
User 109112 does not improve AUC. Reverting changes.
Training on augumented user 132262 37/50 current_auc = 0.7577160493827161
User 132262 AUC after training: 0.7561728395061729
User 132262 does not improve AUC. Reverting changes.
Training on augumented user 105113 38/50 current_auc = 0.7577160493827161
User 105113 AUC after training: 0.7561728395061729
User 105113 does not improve AUC. Reverting changes.
Training on augumented user 84859 39/50 current_auc = 0.7577160493827161
User 84859 AUC after training: 0.7546296296296297
User 84859 does not improve AUC. Reverting changes.
Training on augumented user 73550 40/50 current_auc = 0.7577160493827161
User 73550 AUC after training: 0.7561728395061729
User 73550 does not improve AUC. Reverting changes.
Training on augumented user 135710 41/50 current_auc = 0.7577160493827161
User 135710 AUC after training: 0.7561728395061729
User 135710 does not improve AUC. Reverting changes.
Training on augumented user 60935 42/50 current_auc = 0.7577160493827161
User 60935 AUC after training: 0.7561728395061729
User 60935 does not improve AUC. Reverting changes.
Training on augumented user 138005 43/50 current_auc = 0.7577160493827161
User 138005 AUC after training: 0.7561728395061729
User 138005 does not improve AUC. Reverting changes.
Training on augumented user 117477 44/50 current_auc = 0.7577160493827161
User 117477 AUC after training: 0.7561728395061729
User 117477 does not improve AUC. Reverting changes.
Training on augumented user 53570 45/50 current_auc = 0.7577160493827161
User 53570 AUC after training: 0.7561728395061729
User 53570 does not improve AUC. Reverting changes.
Training on augumented user 115418 46/50 current_auc = 0.7577160493827161
User 115418 AUC after training: 0.756172839506173
User 115418 does not improve AUC. Reverting changes.
Training on augumented user 115558 47/50 current_auc = 0.7577160493827161
User 115558 AUC after training: 0.7561728395061729
User 115558 does not improve AUC. Reverting changes.
Training on augumented user 84484 48/50 current_auc = 0.7577160493827161
User 84484 AUC after training: 0.7577160493827161
User 84484 does not improve AUC. Reverting changes.
Training on augumented user 27753 49/50 current_auc = 0.7577160493827161
User 27753 AUC after training: 0.7561728395061729
User 27753 does not improve AUC. Reverting changes.
[2024-12-02 17:48:20.156941] start test user 124239 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:20.603710] start test user 124239 20/567 recall augumented users by random, augumented_users = [68943, 13957, 34893, 64999, 870, 85669, 117220, 42775, 105641, 118388, 130446, 90086, 97748, 43492, 4723, 14253, 58812, 73232, 87253, 89970, 54541, 19942, 6898, 96231, 104712, 84741, 110507, 432, 11483, 24885, 89989, 78322, 129528, 113658, 108819, 117925, 128669, 121885, 39970, 61682, 125629, 127574, 68430, 66484, 22902, 90387, 79154, 67910, 117717, 27149]
[2024-12-02 17:48:20.618890] user = 124239 Cloud 20/567
[2024-12-02 17:48:20.641133] user = 124239 Local 20/567
[2024-12-02 17:48:20.738950] user = 124239 Local+ 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:22.767850] user = 124239 MPDA- 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5766129032258065
Training on augumented user 68943 0/50 current_auc = 0.5766129032258065
User 68943 AUC after training: 0.5793010752688172
User 68943 improves AUC. Keeping the model.
Training on augumented user 13957 1/50 current_auc = 0.5793010752688172
User 13957 AUC after training: 0.5766129032258065
User 13957 does not improve AUC. Reverting changes.
Training on augumented user 34893 2/50 current_auc = 0.5793010752688172
User 34893 AUC after training: 0.5766129032258065
User 34893 does not improve AUC. Reverting changes.
Training on augumented user 64999 3/50 current_auc = 0.5793010752688172
User 64999 AUC after training: 0.5793010752688172
User 64999 does not improve AUC. Reverting changes.
Training on augumented user 870 4/50 current_auc = 0.5793010752688172
User 870 AUC after training: 0.5793010752688172
User 870 does not improve AUC. Reverting changes.
Training on augumented user 85669 5/50 current_auc = 0.5793010752688172
User 85669 AUC after training: 0.5793010752688172
User 85669 does not improve AUC. Reverting changes.
Training on augumented user 117220 6/50 current_auc = 0.5793010752688172
User 117220 AUC after training: 0.5793010752688172
User 117220 does not improve AUC. Reverting changes.
Training on augumented user 42775 7/50 current_auc = 0.5793010752688172
User 42775 AUC after training: 0.581989247311828
User 42775 improves AUC. Keeping the model.
Training on augumented user 105641 8/50 current_auc = 0.581989247311828
User 105641 AUC after training: 0.5833333333333333
User 105641 improves AUC. Keeping the model.
Training on augumented user 118388 9/50 current_auc = 0.5833333333333333
User 118388 AUC after training: 0.5913978494623656
User 118388 improves AUC. Keeping the model.
Training on augumented user 130446 10/50 current_auc = 0.5913978494623656
User 130446 AUC after training: 0.5846774193548387
User 130446 does not improve AUC. Reverting changes.
Training on augumented user 90086 11/50 current_auc = 0.5913978494623656
User 90086 AUC after training: 0.5940860215053764
User 90086 improves AUC. Keeping the model.
Training on augumented user 97748 12/50 current_auc = 0.5940860215053764
User 97748 AUC after training: 0.5846774193548387
User 97748 does not improve AUC. Reverting changes.
Training on augumented user 43492 13/50 current_auc = 0.5940860215053764
User 43492 AUC after training: 0.5846774193548387
User 43492 does not improve AUC. Reverting changes.
Training on augumented user 4723 14/50 current_auc = 0.5940860215053764
User 4723 AUC after training: 0.5940860215053764
User 4723 does not improve AUC. Reverting changes.
Training on augumented user 14253 15/50 current_auc = 0.5940860215053764
User 14253 AUC after training: 0.5833333333333334
User 14253 does not improve AUC. Reverting changes.
Training on augumented user 58812 16/50 current_auc = 0.5940860215053764
User 58812 AUC after training: 0.5833333333333333
User 58812 does not improve AUC. Reverting changes.
Training on augumented user 73232 17/50 current_auc = 0.5940860215053764
User 73232 AUC after training: 0.5833333333333333
User 73232 does not improve AUC. Reverting changes.
Training on augumented user 87253 18/50 current_auc = 0.5940860215053764
User 87253 AUC after training: 0.5913978494623656
User 87253 does not improve AUC. Reverting changes.
Training on augumented user 89970 19/50 current_auc = 0.5940860215053764
User 89970 AUC after training: 0.5940860215053764
User 89970 does not improve AUC. Reverting changes.
Training on augumented user 54541 20/50 current_auc = 0.5940860215053764
User 54541 AUC after training: 0.5887096774193549
User 54541 does not improve AUC. Reverting changes.
Training on augumented user 19942 21/50 current_auc = 0.5940860215053764
User 19942 AUC after training: 0.586021505376344
User 19942 does not improve AUC. Reverting changes.
Training on augumented user 6898 22/50 current_auc = 0.5940860215053764
User 6898 AUC after training: 0.5940860215053764
User 6898 does not improve AUC. Reverting changes.
Training on augumented user 96231 23/50 current_auc = 0.5940860215053764
User 96231 AUC after training: 0.5940860215053764
User 96231 does not improve AUC. Reverting changes.
Training on augumented user 104712 24/50 current_auc = 0.5940860215053764
User 104712 AUC after training: 0.586021505376344
User 104712 does not improve AUC. Reverting changes.
Training on augumented user 84741 25/50 current_auc = 0.5940860215053764
User 84741 AUC after training: 0.5940860215053764
User 84741 does not improve AUC. Reverting changes.
Training on augumented user 110507 26/50 current_auc = 0.5940860215053764
User 110507 AUC after training: 0.5913978494623655
User 110507 does not improve AUC. Reverting changes.
Training on augumented user 432 27/50 current_auc = 0.5940860215053764
User 432 AUC after training: 0.5940860215053764
User 432 does not improve AUC. Reverting changes.
Training on augumented user 11483 28/50 current_auc = 0.5940860215053764
User 11483 AUC after training: 0.5940860215053764
User 11483 does not improve AUC. Reverting changes.
Training on augumented user 24885 29/50 current_auc = 0.5940860215053764
User 24885 AUC after training: 0.5887096774193549
User 24885 does not improve AUC. Reverting changes.
Training on augumented user 89989 30/50 current_auc = 0.5940860215053764
User 89989 AUC after training: 0.592741935483871
User 89989 does not improve AUC. Reverting changes.
Training on augumented user 78322 31/50 current_auc = 0.5940860215053764
User 78322 AUC after training: 0.5940860215053764
User 78322 does not improve AUC. Reverting changes.
Training on augumented user 129528 32/50 current_auc = 0.5940860215053764
User 129528 AUC after training: 0.5913978494623656
User 129528 does not improve AUC. Reverting changes.
Training on augumented user 113658 33/50 current_auc = 0.5940860215053764
User 113658 AUC after training: 0.5913978494623656
User 113658 does not improve AUC. Reverting changes.
Training on augumented user 108819 34/50 current_auc = 0.5940860215053764
User 108819 AUC after training: 0.5833333333333333
User 108819 does not improve AUC. Reverting changes.
Training on augumented user 117925 35/50 current_auc = 0.5940860215053764
User 117925 AUC after training: 0.581989247311828
User 117925 does not improve AUC. Reverting changes.
Training on augumented user 128669 36/50 current_auc = 0.5940860215053764
User 128669 AUC after training: 0.5940860215053764
User 128669 does not improve AUC. Reverting changes.
Training on augumented user 121885 37/50 current_auc = 0.5940860215053764
User 121885 AUC after training: 0.5940860215053764
User 121885 does not improve AUC. Reverting changes.
Training on augumented user 39970 38/50 current_auc = 0.5940860215053764
User 39970 AUC after training: 0.5940860215053764
User 39970 does not improve AUC. Reverting changes.
Training on augumented user 61682 39/50 current_auc = 0.5940860215053764
User 61682 AUC after training: 0.5887096774193549
User 61682 does not improve AUC. Reverting changes.
Training on augumented user 125629 40/50 current_auc = 0.5940860215053764
User 125629 AUC after training: 0.5940860215053764
User 125629 does not improve AUC. Reverting changes.
Training on augumented user 127574 41/50 current_auc = 0.5940860215053764
User 127574 AUC after training: 0.5779569892473118
User 127574 does not improve AUC. Reverting changes.
Training on augumented user 68430 42/50 current_auc = 0.5940860215053764
User 68430 AUC after training: 0.5940860215053764
User 68430 does not improve AUC. Reverting changes.
Training on augumented user 66484 43/50 current_auc = 0.5940860215053764
User 66484 AUC after training: 0.5887096774193549
User 66484 does not improve AUC. Reverting changes.
Training on augumented user 22902 44/50 current_auc = 0.5940860215053764
User 22902 AUC after training: 0.5940860215053764
User 22902 does not improve AUC. Reverting changes.
Training on augumented user 90387 45/50 current_auc = 0.5940860215053764
User 90387 AUC after training: 0.5940860215053764
User 90387 does not improve AUC. Reverting changes.
Training on augumented user 79154 46/50 current_auc = 0.5940860215053764
User 79154 AUC after training: 0.5833333333333333
User 79154 does not improve AUC. Reverting changes.
Training on augumented user 67910 47/50 current_auc = 0.5940860215053764
User 67910 AUC after training: 0.5887096774193549
User 67910 does not improve AUC. Reverting changes.
Training on augumented user 117717 48/50 current_auc = 0.5940860215053764
User 117717 AUC after training: 0.5913978494623656
User 117717 does not improve AUC. Reverting changes.
Training on augumented user 27149 49/50 current_auc = 0.5940860215053764
User 27149 AUC after training: 0.5913978494623656
User 27149 does not improve AUC. Reverting changes.
[2024-12-02 17:48:53.497296] start test user 124257 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:54.202457] start test user 124257 21/567 recall augumented users by random, augumented_users = [2722, 92168, 61007, 105546, 126729, 134617, 18658, 29827, 134354, 35432, 15925, 103392, 59798, 59836, 98255, 46880, 135101, 107423, 70655, 70954, 115314, 54367, 188, 45221, 75927, 2451, 33742, 127966, 93062, 6140, 87220, 119428, 119942, 128475, 134689, 108189, 28014, 96562, 96778, 117109, 112981, 43156, 52966, 100311, 64992, 26026, 32406, 42716, 121862, 15160]
[2024-12-02 17:48:54.223955] user = 124257 Cloud 21/567
[2024-12-02 17:48:54.256943] user = 124257 Local 21/567
[2024-12-02 17:48:54.361483] user = 124257 Local+ 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:56.162415] user = 124257 MPDA- 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6218971631205674
Training on augumented user 2722 0/50 current_auc = 0.6218971631205674
User 2722 AUC after training: 0.6210106382978724
User 2722 does not improve AUC. Reverting changes.
Training on augumented user 92168 1/50 current_auc = 0.6218971631205674
User 92168 AUC after training: 0.6218971631205674
User 92168 does not improve AUC. Reverting changes.
Training on augumented user 61007 2/50 current_auc = 0.6218971631205674
User 61007 AUC after training: 0.6210106382978723
User 61007 does not improve AUC. Reverting changes.
Training on augumented user 105546 3/50 current_auc = 0.6218971631205674
User 105546 AUC after training: 0.6212322695035462
User 105546 does not improve AUC. Reverting changes.
Training on augumented user 126729 4/50 current_auc = 0.6218971631205674
User 126729 AUC after training: 0.6205673758865249
User 126729 does not improve AUC. Reverting changes.
Training on augumented user 134617 5/50 current_auc = 0.6218971631205674
User 134617 AUC after training: 0.6214539007092199
User 134617 does not improve AUC. Reverting changes.
Training on augumented user 18658 6/50 current_auc = 0.6218971631205674
User 18658 AUC after training: 0.6218971631205674
User 18658 does not improve AUC. Reverting changes.
Training on augumented user 29827 7/50 current_auc = 0.6218971631205674
User 29827 AUC after training: 0.6221187943262412
User 29827 improves AUC. Keeping the model.
Training on augumented user 134354 8/50 current_auc = 0.6221187943262412
User 134354 AUC after training: 0.622229609929078
User 134354 improves AUC. Keeping the model.
Training on augumented user 35432 9/50 current_auc = 0.622229609929078
User 35432 AUC after training: 0.6223404255319149
User 35432 improves AUC. Keeping the model.
Training on augumented user 15925 10/50 current_auc = 0.6223404255319149
User 15925 AUC after training: 0.6216755319148936
User 15925 does not improve AUC. Reverting changes.
Training on augumented user 103392 11/50 current_auc = 0.6223404255319149
User 103392 AUC after training: 0.6225620567375886
User 103392 improves AUC. Keeping the model.
Training on augumented user 59798 12/50 current_auc = 0.6225620567375886
User 59798 AUC after training: 0.6205673758865248
User 59798 does not improve AUC. Reverting changes.
Training on augumented user 59836 13/50 current_auc = 0.6225620567375886
User 59836 AUC after training: 0.6223404255319148
User 59836 does not improve AUC. Reverting changes.
Training on augumented user 98255 14/50 current_auc = 0.6225620567375886
User 98255 AUC after training: 0.6223404255319148
User 98255 does not improve AUC. Reverting changes.
Training on augumented user 46880 15/50 current_auc = 0.6225620567375886
User 46880 AUC after training: 0.6199024822695035
User 46880 does not improve AUC. Reverting changes.
Training on augumented user 135101 16/50 current_auc = 0.6225620567375886
User 135101 AUC after training: 0.6221187943262412
User 135101 does not improve AUC. Reverting changes.
Training on augumented user 107423 17/50 current_auc = 0.6225620567375886
User 107423 AUC after training: 0.6208998226950354
User 107423 does not improve AUC. Reverting changes.
Training on augumented user 70655 18/50 current_auc = 0.6225620567375886
User 70655 AUC after training: 0.6227836879432624
User 70655 improves AUC. Keeping the model.
Training on augumented user 70954 19/50 current_auc = 0.6227836879432624
User 70954 AUC after training: 0.6216755319148936
User 70954 does not improve AUC. Reverting changes.
Training on augumented user 115314 20/50 current_auc = 0.6227836879432624
User 115314 AUC after training: 0.6218971631205673
User 115314 does not improve AUC. Reverting changes.
Training on augumented user 54367 21/50 current_auc = 0.6227836879432624
User 54367 AUC after training: 0.62322695035461
User 54367 improves AUC. Keeping the model.
Training on augumented user 188 22/50 current_auc = 0.62322695035461
User 188 AUC after training: 0.6221187943262412
User 188 does not improve AUC. Reverting changes.
Training on augumented user 45221 23/50 current_auc = 0.62322695035461
User 45221 AUC after training: 0.6208998226950355
User 45221 does not improve AUC. Reverting changes.
Training on augumented user 75927 24/50 current_auc = 0.62322695035461
User 75927 AUC after training: 0.6231161347517731
User 75927 does not improve AUC. Reverting changes.
Training on augumented user 2451 25/50 current_auc = 0.62322695035461
User 2451 AUC after training: 0.6227836879432624
User 2451 does not improve AUC. Reverting changes.
Training on augumented user 33742 26/50 current_auc = 0.62322695035461
User 33742 AUC after training: 0.6218971631205673
User 33742 does not improve AUC. Reverting changes.
Training on augumented user 127966 27/50 current_auc = 0.62322695035461
User 127966 AUC after training: 0.6221187943262411
User 127966 does not improve AUC. Reverting changes.
Training on augumented user 93062 28/50 current_auc = 0.62322695035461
User 93062 AUC after training: 0.6230053191489362
User 93062 does not improve AUC. Reverting changes.
Training on augumented user 6140 29/50 current_auc = 0.62322695035461
User 6140 AUC after training: 0.6230053191489362
User 6140 does not improve AUC. Reverting changes.
Training on augumented user 87220 30/50 current_auc = 0.62322695035461
User 87220 AUC after training: 0.62322695035461
User 87220 does not improve AUC. Reverting changes.
Training on augumented user 119428 31/50 current_auc = 0.62322695035461
User 119428 AUC after training: 0.6223404255319149
User 119428 does not improve AUC. Reverting changes.
Training on augumented user 119942 32/50 current_auc = 0.62322695035461
User 119942 AUC after training: 0.6223404255319149
User 119942 does not improve AUC. Reverting changes.
Training on augumented user 128475 33/50 current_auc = 0.62322695035461
User 128475 AUC after training: 0.6233377659574468
User 128475 improves AUC. Keeping the model.
Training on augumented user 134689 34/50 current_auc = 0.6233377659574468
User 134689 AUC after training: 0.6218971631205674
User 134689 does not improve AUC. Reverting changes.
Training on augumented user 108189 35/50 current_auc = 0.6233377659574468
User 108189 AUC after training: 0.6231161347517731
User 108189 does not improve AUC. Reverting changes.
Training on augumented user 28014 36/50 current_auc = 0.6233377659574468
User 28014 AUC after training: 0.6231161347517731
User 28014 does not improve AUC. Reverting changes.
Training on augumented user 96562 37/50 current_auc = 0.6233377659574468
User 96562 AUC after training: 0.6228945035460993
User 96562 does not improve AUC. Reverting changes.
Training on augumented user 96778 38/50 current_auc = 0.6233377659574468
User 96778 AUC after training: 0.6228945035460993
User 96778 does not improve AUC. Reverting changes.
Training on augumented user 117109 39/50 current_auc = 0.6233377659574468
User 117109 AUC after training: 0.6235593971631206
User 117109 improves AUC. Keeping the model.
Training on augumented user 112981 40/50 current_auc = 0.6235593971631206
User 112981 AUC after training: 0.6228945035460993
User 112981 does not improve AUC. Reverting changes.
Training on augumented user 43156 41/50 current_auc = 0.6235593971631206
User 43156 AUC after training: 0.622229609929078
User 43156 does not improve AUC. Reverting changes.
Training on augumented user 52966 42/50 current_auc = 0.6235593971631206
User 52966 AUC after training: 0.6226728723404256
User 52966 does not improve AUC. Reverting changes.
Training on augumented user 100311 43/50 current_auc = 0.6235593971631206
User 100311 AUC after training: 0.6233377659574468
User 100311 does not improve AUC. Reverting changes.
Training on augumented user 64992 44/50 current_auc = 0.6235593971631206
User 64992 AUC after training: 0.6225620567375887
User 64992 does not improve AUC. Reverting changes.
Training on augumented user 26026 45/50 current_auc = 0.6235593971631206
User 26026 AUC after training: 0.6228945035460993
User 26026 does not improve AUC. Reverting changes.
Training on augumented user 32406 46/50 current_auc = 0.6235593971631206
User 32406 AUC after training: 0.6233377659574468
User 32406 does not improve AUC. Reverting changes.
Training on augumented user 42716 47/50 current_auc = 0.6235593971631206
User 42716 AUC after training: 0.6226728723404256
User 42716 does not improve AUC. Reverting changes.
Training on augumented user 121862 48/50 current_auc = 0.6235593971631206
User 121862 AUC after training: 0.6231161347517731
User 121862 does not improve AUC. Reverting changes.
Training on augumented user 15160 49/50 current_auc = 0.6235593971631206
User 15160 AUC after training: 0.6237810283687943
User 15160 improves AUC. Keeping the model.
[2024-12-02 17:49:25.197226] start test user 124258 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:25.839563] start test user 124258 22/567 recall augumented users by random, augumented_users = [71334, 86188, 43017, 65472, 115447, 120198, 78107, 23870, 137063, 51082, 11050, 83335, 125228, 22873, 105574, 31702, 109088, 22828, 23540, 113989, 51440, 104631, 66974, 45916, 102488, 70975, 113331, 72614, 114732, 78695, 111937, 49477, 111955, 83802, 130557, 131539, 98378, 130625, 58038, 1998, 4227, 59652, 20656, 15958, 66848, 72525, 130738, 118264, 130997, 90465]
[2024-12-02 17:49:25.857053] user = 124258 Cloud 22/567
[2024-12-02 17:49:25.869471] user = 124258 Local 22/567
[2024-12-02 17:49:25.951674] user = 124258 Local+ 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:28.745504] user = 124258 MPDA- 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5146198830409356
Training on augumented user 71334 0/50 current_auc = 0.5146198830409356
User 71334 AUC after training: 0.516569200779727
User 71334 improves AUC. Keeping the model.
Training on augumented user 86188 1/50 current_auc = 0.516569200779727
User 86188 AUC after training: 0.5146198830409356
User 86188 does not improve AUC. Reverting changes.
Training on augumented user 43017 2/50 current_auc = 0.516569200779727
User 43017 AUC after training: 0.5185185185185185
User 43017 improves AUC. Keeping the model.
Training on augumented user 65472 3/50 current_auc = 0.5185185185185185
User 65472 AUC after training: 0.5146198830409356
User 65472 does not improve AUC. Reverting changes.
Training on augumented user 115447 4/50 current_auc = 0.5185185185185185
User 115447 AUC after training: 0.5146198830409356
User 115447 does not improve AUC. Reverting changes.
Training on augumented user 120198 5/50 current_auc = 0.5185185185185185
User 120198 AUC after training: 0.516569200779727
User 120198 does not improve AUC. Reverting changes.
Training on augumented user 78107 6/50 current_auc = 0.5185185185185185
User 78107 AUC after training: 0.5146198830409356
User 78107 does not improve AUC. Reverting changes.
Training on augumented user 23870 7/50 current_auc = 0.5185185185185185
User 23870 AUC after training: 0.5185185185185185
User 23870 does not improve AUC. Reverting changes.
Training on augumented user 137063 8/50 current_auc = 0.5185185185185185
User 137063 AUC after training: 0.5185185185185185
User 137063 does not improve AUC. Reverting changes.
Training on augumented user 51082 9/50 current_auc = 0.5185185185185185
User 51082 AUC after training: 0.5146198830409356
User 51082 does not improve AUC. Reverting changes.
Training on augumented user 11050 10/50 current_auc = 0.5185185185185185
User 11050 AUC after training: 0.5126705653021442
User 11050 does not improve AUC. Reverting changes.
Training on augumented user 83335 11/50 current_auc = 0.5185185185185185
User 83335 AUC after training: 0.5185185185185185
User 83335 does not improve AUC. Reverting changes.
Training on augumented user 125228 12/50 current_auc = 0.5185185185185185
User 125228 AUC after training: 0.516569200779727
User 125228 does not improve AUC. Reverting changes.
Training on augumented user 22873 13/50 current_auc = 0.5185185185185185
User 22873 AUC after training: 0.5185185185185185
User 22873 does not improve AUC. Reverting changes.
Training on augumented user 105574 14/50 current_auc = 0.5185185185185185
User 105574 AUC after training: 0.516569200779727
User 105574 does not improve AUC. Reverting changes.
Training on augumented user 31702 15/50 current_auc = 0.5185185185185185
User 31702 AUC after training: 0.516569200779727
User 31702 does not improve AUC. Reverting changes.
Training on augumented user 109088 16/50 current_auc = 0.5185185185185185
User 109088 AUC after training: 0.5146198830409356
User 109088 does not improve AUC. Reverting changes.
Training on augumented user 22828 17/50 current_auc = 0.5185185185185185
User 22828 AUC after training: 0.516569200779727
User 22828 does not improve AUC. Reverting changes.
Training on augumented user 23540 18/50 current_auc = 0.5185185185185185
User 23540 AUC after training: 0.516569200779727
User 23540 does not improve AUC. Reverting changes.
Training on augumented user 113989 19/50 current_auc = 0.5185185185185185
User 113989 AUC after training: 0.5126705653021442
User 113989 does not improve AUC. Reverting changes.
Training on augumented user 51440 20/50 current_auc = 0.5185185185185185
User 51440 AUC after training: 0.5146198830409356
User 51440 does not improve AUC. Reverting changes.
Training on augumented user 104631 21/50 current_auc = 0.5185185185185185
User 104631 AUC after training: 0.516569200779727
User 104631 does not improve AUC. Reverting changes.
Training on augumented user 66974 22/50 current_auc = 0.5185185185185185
User 66974 AUC after training: 0.516569200779727
User 66974 does not improve AUC. Reverting changes.
Training on augumented user 45916 23/50 current_auc = 0.5185185185185185
User 45916 AUC after training: 0.5146198830409356
User 45916 does not improve AUC. Reverting changes.
Training on augumented user 102488 24/50 current_auc = 0.5185185185185185
User 102488 AUC after training: 0.5146198830409356
User 102488 does not improve AUC. Reverting changes.
Training on augumented user 70975 25/50 current_auc = 0.5185185185185185
User 70975 AUC after training: 0.5185185185185185
User 70975 does not improve AUC. Reverting changes.
Training on augumented user 113331 26/50 current_auc = 0.5185185185185185
User 113331 AUC after training: 0.516569200779727
User 113331 does not improve AUC. Reverting changes.
Training on augumented user 72614 27/50 current_auc = 0.5185185185185185
User 72614 AUC after training: 0.516569200779727
User 72614 does not improve AUC. Reverting changes.
Training on augumented user 114732 28/50 current_auc = 0.5185185185185185
User 114732 AUC after training: 0.516569200779727
User 114732 does not improve AUC. Reverting changes.
Training on augumented user 78695 29/50 current_auc = 0.5185185185185185
User 78695 AUC after training: 0.5185185185185185
User 78695 does not improve AUC. Reverting changes.
Training on augumented user 111937 30/50 current_auc = 0.5185185185185185
User 111937 AUC after training: 0.5146198830409356
User 111937 does not improve AUC. Reverting changes.
Training on augumented user 49477 31/50 current_auc = 0.5185185185185185
User 49477 AUC after training: 0.5185185185185185
User 49477 does not improve AUC. Reverting changes.
Training on augumented user 111955 32/50 current_auc = 0.5185185185185185
User 111955 AUC after training: 0.5107212475633528
User 111955 does not improve AUC. Reverting changes.
Training on augumented user 83802 33/50 current_auc = 0.5185185185185185
User 83802 AUC after training: 0.516569200779727
User 83802 does not improve AUC. Reverting changes.
Training on augumented user 130557 34/50 current_auc = 0.5185185185185185
User 130557 AUC after training: 0.516569200779727
User 130557 does not improve AUC. Reverting changes.
Training on augumented user 131539 35/50 current_auc = 0.5185185185185185
User 131539 AUC after training: 0.5185185185185185
User 131539 does not improve AUC. Reverting changes.
Training on augumented user 98378 36/50 current_auc = 0.5185185185185185
User 98378 AUC after training: 0.516569200779727
User 98378 does not improve AUC. Reverting changes.
Training on augumented user 130625 37/50 current_auc = 0.5185185185185185
User 130625 AUC after training: 0.516569200779727
User 130625 does not improve AUC. Reverting changes.
Training on augumented user 58038 38/50 current_auc = 0.5185185185185185
User 58038 AUC after training: 0.516569200779727
User 58038 does not improve AUC. Reverting changes.
Training on augumented user 1998 39/50 current_auc = 0.5185185185185185
User 1998 AUC after training: 0.516569200779727
User 1998 does not improve AUC. Reverting changes.
Training on augumented user 4227 40/50 current_auc = 0.5185185185185185
User 4227 AUC after training: 0.516569200779727
User 4227 does not improve AUC. Reverting changes.
Training on augumented user 59652 41/50 current_auc = 0.5185185185185185
User 59652 AUC after training: 0.516569200779727
User 59652 does not improve AUC. Reverting changes.
Training on augumented user 20656 42/50 current_auc = 0.5185185185185185
User 20656 AUC after training: 0.5146198830409356
User 20656 does not improve AUC. Reverting changes.
Training on augumented user 15958 43/50 current_auc = 0.5185185185185185
User 15958 AUC after training: 0.516569200779727
User 15958 does not improve AUC. Reverting changes.
Training on augumented user 66848 44/50 current_auc = 0.5185185185185185
User 66848 AUC after training: 0.5146198830409356
User 66848 does not improve AUC. Reverting changes.
Training on augumented user 72525 45/50 current_auc = 0.5185185185185185
User 72525 AUC after training: 0.516569200779727
User 72525 does not improve AUC. Reverting changes.
Training on augumented user 130738 46/50 current_auc = 0.5185185185185185
User 130738 AUC after training: 0.5146198830409356
User 130738 does not improve AUC. Reverting changes.
Training on augumented user 118264 47/50 current_auc = 0.5185185185185185
User 118264 AUC after training: 0.516569200779727
User 118264 does not improve AUC. Reverting changes.
Training on augumented user 130997 48/50 current_auc = 0.5185185185185185
User 130997 AUC after training: 0.516569200779727
User 130997 does not improve AUC. Reverting changes.
Training on augumented user 90465 49/50 current_auc = 0.5185185185185185
User 90465 AUC after training: 0.5146198830409356
User 90465 does not improve AUC. Reverting changes.
[2024-12-02 17:50:00.968900] start test user 124313 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:01.532340] start test user 124313 23/567 recall augumented users by random, augumented_users = [134720, 71331, 34043, 13786, 96223, 54857, 30192, 46254, 17302, 39612, 98390, 123791, 95898, 63968, 57459, 15507, 78738, 137477, 53708, 85909, 67412, 102448, 84443, 120938, 115557, 44116, 90244, 45114, 28148, 4344, 105356, 95069, 39776, 34904, 60379, 96389, 113216, 115370, 103503, 110461, 79895, 53838, 123743, 133921, 25552, 124004, 112395, 28771, 88119, 84862]
[2024-12-02 17:50:01.548566] user = 124313 Cloud 23/567
[2024-12-02 17:50:01.560788] user = 124313 Local 23/567
[2024-12-02 17:50:01.598051] user = 124313 Local+ 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:04.382595] user = 124313 MPDA- 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5656565656565657
Training on augumented user 134720 0/50 current_auc = 0.5656565656565657
User 134720 AUC after training: 0.5707070707070707
User 134720 improves AUC. Keeping the model.
Training on augumented user 71331 1/50 current_auc = 0.5707070707070707
User 71331 AUC after training: 0.5707070707070707
User 71331 does not improve AUC. Reverting changes.
Training on augumented user 34043 2/50 current_auc = 0.5707070707070707
User 34043 AUC after training: 0.5707070707070707
User 34043 does not improve AUC. Reverting changes.
Training on augumented user 13786 3/50 current_auc = 0.5707070707070707
User 13786 AUC after training: 0.5707070707070707
User 13786 does not improve AUC. Reverting changes.
Training on augumented user 96223 4/50 current_auc = 0.5707070707070707
User 96223 AUC after training: 0.5707070707070707
User 96223 does not improve AUC. Reverting changes.
Training on augumented user 54857 5/50 current_auc = 0.5707070707070707
User 54857 AUC after training: 0.5707070707070707
User 54857 does not improve AUC. Reverting changes.
Training on augumented user 30192 6/50 current_auc = 0.5707070707070707
User 30192 AUC after training: 0.5757575757575758
User 30192 improves AUC. Keeping the model.
Training on augumented user 46254 7/50 current_auc = 0.5757575757575758
User 46254 AUC after training: 0.5707070707070707
User 46254 does not improve AUC. Reverting changes.
Training on augumented user 17302 8/50 current_auc = 0.5757575757575758
User 17302 AUC after training: 0.5707070707070707
User 17302 does not improve AUC. Reverting changes.
Training on augumented user 39612 9/50 current_auc = 0.5757575757575758
User 39612 AUC after training: 0.5757575757575758
User 39612 does not improve AUC. Reverting changes.
Training on augumented user 98390 10/50 current_auc = 0.5757575757575758
User 98390 AUC after training: 0.5707070707070707
User 98390 does not improve AUC. Reverting changes.
Training on augumented user 123791 11/50 current_auc = 0.5757575757575758
User 123791 AUC after training: 0.5757575757575758
User 123791 does not improve AUC. Reverting changes.
Training on augumented user 95898 12/50 current_auc = 0.5757575757575758
User 95898 AUC after training: 0.5757575757575758
User 95898 does not improve AUC. Reverting changes.
Training on augumented user 63968 13/50 current_auc = 0.5757575757575758
User 63968 AUC after training: 0.5757575757575758
User 63968 does not improve AUC. Reverting changes.
Training on augumented user 57459 14/50 current_auc = 0.5757575757575758
User 57459 AUC after training: 0.5757575757575758
User 57459 does not improve AUC. Reverting changes.
Training on augumented user 15507 15/50 current_auc = 0.5757575757575758
User 15507 AUC after training: 0.5707070707070707
User 15507 does not improve AUC. Reverting changes.
Training on augumented user 78738 16/50 current_auc = 0.5757575757575758
User 78738 AUC after training: 0.5707070707070707
User 78738 does not improve AUC. Reverting changes.
Training on augumented user 137477 17/50 current_auc = 0.5757575757575758
User 137477 AUC after training: 0.5757575757575758
User 137477 does not improve AUC. Reverting changes.
Training on augumented user 53708 18/50 current_auc = 0.5757575757575758
User 53708 AUC after training: 0.5808080808080808
User 53708 improves AUC. Keeping the model.
Training on augumented user 85909 19/50 current_auc = 0.5808080808080808
User 85909 AUC after training: 0.5656565656565657
User 85909 does not improve AUC. Reverting changes.
Training on augumented user 67412 20/50 current_auc = 0.5808080808080808
User 67412 AUC after training: 0.5757575757575757
User 67412 does not improve AUC. Reverting changes.
Training on augumented user 102448 21/50 current_auc = 0.5808080808080808
User 102448 AUC after training: 0.5808080808080809
User 102448 improves AUC. Keeping the model.
Training on augumented user 84443 22/50 current_auc = 0.5808080808080809
User 84443 AUC after training: 0.5757575757575757
User 84443 does not improve AUC. Reverting changes.
Training on augumented user 120938 23/50 current_auc = 0.5808080808080809
User 120938 AUC after training: 0.5808080808080809
User 120938 does not improve AUC. Reverting changes.
Training on augumented user 115557 24/50 current_auc = 0.5808080808080809
User 115557 AUC after training: 0.5808080808080809
User 115557 does not improve AUC. Reverting changes.
Training on augumented user 44116 25/50 current_auc = 0.5808080808080809
User 44116 AUC after training: 0.5808080808080809
User 44116 does not improve AUC. Reverting changes.
Training on augumented user 90244 26/50 current_auc = 0.5808080808080809
User 90244 AUC after training: 0.5808080808080809
User 90244 does not improve AUC. Reverting changes.
Training on augumented user 45114 27/50 current_auc = 0.5808080808080809
User 45114 AUC after training: 0.5707070707070707
User 45114 does not improve AUC. Reverting changes.
Training on augumented user 28148 28/50 current_auc = 0.5808080808080809
User 28148 AUC after training: 0.5757575757575757
User 28148 does not improve AUC. Reverting changes.
Training on augumented user 4344 29/50 current_auc = 0.5808080808080809
User 4344 AUC after training: 0.5808080808080809
User 4344 does not improve AUC. Reverting changes.
Training on augumented user 105356 30/50 current_auc = 0.5808080808080809
User 105356 AUC after training: 0.5757575757575757
User 105356 does not improve AUC. Reverting changes.
Training on augumented user 95069 31/50 current_auc = 0.5808080808080809
User 95069 AUC after training: 0.5757575757575757
User 95069 does not improve AUC. Reverting changes.
Training on augumented user 39776 32/50 current_auc = 0.5808080808080809
User 39776 AUC after training: 0.5808080808080809
User 39776 does not improve AUC. Reverting changes.
Training on augumented user 34904 33/50 current_auc = 0.5808080808080809
User 34904 AUC after training: 0.5808080808080809
User 34904 does not improve AUC. Reverting changes.
Training on augumented user 60379 34/50 current_auc = 0.5808080808080809
User 60379 AUC after training: 0.5707070707070707
User 60379 does not improve AUC. Reverting changes.
Training on augumented user 96389 35/50 current_auc = 0.5808080808080809
User 96389 AUC after training: 0.5808080808080809
User 96389 does not improve AUC. Reverting changes.
Training on augumented user 113216 36/50 current_auc = 0.5808080808080809
User 113216 AUC after training: 0.5757575757575757
User 113216 does not improve AUC. Reverting changes.
Training on augumented user 115370 37/50 current_auc = 0.5808080808080809
User 115370 AUC after training: 0.5808080808080809
User 115370 does not improve AUC. Reverting changes.
Training on augumented user 103503 38/50 current_auc = 0.5808080808080809
User 103503 AUC after training: 0.5808080808080809
User 103503 does not improve AUC. Reverting changes.
Training on augumented user 110461 39/50 current_auc = 0.5808080808080809
User 110461 AUC after training: 0.5808080808080809
User 110461 does not improve AUC. Reverting changes.
Training on augumented user 79895 40/50 current_auc = 0.5808080808080809
User 79895 AUC after training: 0.5808080808080809
User 79895 does not improve AUC. Reverting changes.
Training on augumented user 53838 41/50 current_auc = 0.5808080808080809
User 53838 AUC after training: 0.5808080808080809
User 53838 does not improve AUC. Reverting changes.
Training on augumented user 123743 42/50 current_auc = 0.5808080808080809
User 123743 AUC after training: 0.5808080808080809
User 123743 does not improve AUC. Reverting changes.
Training on augumented user 133921 43/50 current_auc = 0.5808080808080809
User 133921 AUC after training: 0.5808080808080809
User 133921 does not improve AUC. Reverting changes.
Training on augumented user 25552 44/50 current_auc = 0.5808080808080809
User 25552 AUC after training: 0.5808080808080809
User 25552 does not improve AUC. Reverting changes.
Training on augumented user 124004 45/50 current_auc = 0.5808080808080809
User 124004 AUC after training: 0.5707070707070707
User 124004 does not improve AUC. Reverting changes.
Training on augumented user 112395 46/50 current_auc = 0.5808080808080809
User 112395 AUC after training: 0.5757575757575758
User 112395 does not improve AUC. Reverting changes.
Training on augumented user 28771 47/50 current_auc = 0.5808080808080809
User 28771 AUC after training: 0.5808080808080809
User 28771 does not improve AUC. Reverting changes.
Training on augumented user 88119 48/50 current_auc = 0.5808080808080809
User 88119 AUC after training: 0.5808080808080809
User 88119 does not improve AUC. Reverting changes.
Training on augumented user 84862 49/50 current_auc = 0.5808080808080809
User 84862 AUC after training: 0.5757575757575757
User 84862 does not improve AUC. Reverting changes.
[2024-12-02 17:50:33.536334] start test user 124318 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:33.990252] start test user 124318 24/567 recall augumented users by random, augumented_users = [42428, 88345, 97650, 81829, 78070, 60219, 58261, 112871, 69065, 50587, 33568, 95374, 91580, 684, 52726, 89547, 103167, 134015, 67954, 109505, 29120, 133425, 136576, 32015, 128081, 84360, 117709, 6002, 38523, 94971, 33651, 53027, 66776, 73187, 111646, 26739, 33924, 51864, 133161, 122507, 98281, 46470, 62929, 42863, 109304, 2896, 119998, 125896, 92971, 60711]
[2024-12-02 17:50:34.005500] user = 124318 Cloud 24/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:50:34.011884] user = 124318 Local 24/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:50:34.073300] user = 124318 Local+ 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:50:36.909771] user = 124318 MPDA- 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 42428 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42428 AUC after training: 0.5
User 42428 does not improve AUC. Reverting changes.
Training on augumented user 88345 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88345 AUC after training: 0.5
User 88345 does not improve AUC. Reverting changes.
Training on augumented user 97650 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97650 AUC after training: 0.5
User 97650 does not improve AUC. Reverting changes.
Training on augumented user 81829 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81829 AUC after training: 0.5
User 81829 does not improve AUC. Reverting changes.
Training on augumented user 78070 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78070 AUC after training: 0.5
User 78070 does not improve AUC. Reverting changes.
Training on augumented user 60219 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60219 AUC after training: 0.5
User 60219 does not improve AUC. Reverting changes.
Training on augumented user 58261 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58261 AUC after training: 0.5
User 58261 does not improve AUC. Reverting changes.
Training on augumented user 112871 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112871 AUC after training: 0.5
User 112871 does not improve AUC. Reverting changes.
Training on augumented user 69065 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69065 AUC after training: 0.5
User 69065 does not improve AUC. Reverting changes.
Training on augumented user 50587 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50587 AUC after training: 0.5
User 50587 does not improve AUC. Reverting changes.
Training on augumented user 33568 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33568 AUC after training: 0.5
User 33568 does not improve AUC. Reverting changes.
Training on augumented user 95374 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95374 AUC after training: 0.5
User 95374 does not improve AUC. Reverting changes.
Training on augumented user 91580 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91580 AUC after training: 0.5
User 91580 does not improve AUC. Reverting changes.
Training on augumented user 684 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 684 AUC after training: 0.5
User 684 does not improve AUC. Reverting changes.
Training on augumented user 52726 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52726 AUC after training: 0.5
User 52726 does not improve AUC. Reverting changes.
Training on augumented user 89547 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89547 AUC after training: 0.5
User 89547 does not improve AUC. Reverting changes.
Training on augumented user 103167 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103167 AUC after training: 0.5
User 103167 does not improve AUC. Reverting changes.
Training on augumented user 134015 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134015 AUC after training: 0.5
User 134015 does not improve AUC. Reverting changes.
Training on augumented user 67954 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67954 AUC after training: 0.5
User 67954 does not improve AUC. Reverting changes.
Training on augumented user 109505 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109505 AUC after training: 0.5
User 109505 does not improve AUC. Reverting changes.
Training on augumented user 29120 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29120 AUC after training: 0.5
User 29120 does not improve AUC. Reverting changes.
Training on augumented user 133425 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133425 AUC after training: 0.5
User 133425 does not improve AUC. Reverting changes.
Training on augumented user 136576 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136576 AUC after training: 0.5
User 136576 does not improve AUC. Reverting changes.
Training on augumented user 32015 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32015 AUC after training: 0.5
User 32015 does not improve AUC. Reverting changes.
Training on augumented user 128081 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128081 AUC after training: 0.5
User 128081 does not improve AUC. Reverting changes.
Training on augumented user 84360 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84360 AUC after training: 0.5
User 84360 does not improve AUC. Reverting changes.
Training on augumented user 117709 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117709 AUC after training: 0.5
User 117709 does not improve AUC. Reverting changes.
Training on augumented user 6002 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6002 AUC after training: 0.5
User 6002 does not improve AUC. Reverting changes.
Training on augumented user 38523 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38523 AUC after training: 0.5
User 38523 does not improve AUC. Reverting changes.
Training on augumented user 94971 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94971 AUC after training: 0.5
User 94971 does not improve AUC. Reverting changes.
Training on augumented user 33651 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33651 AUC after training: 0.5
User 33651 does not improve AUC. Reverting changes.
Training on augumented user 53027 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53027 AUC after training: 0.5
User 53027 does not improve AUC. Reverting changes.
Training on augumented user 66776 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66776 AUC after training: 0.5
User 66776 does not improve AUC. Reverting changes.
Training on augumented user 73187 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73187 AUC after training: 0.5
User 73187 does not improve AUC. Reverting changes.
Training on augumented user 111646 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111646 AUC after training: 0.5
User 111646 does not improve AUC. Reverting changes.
Training on augumented user 26739 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26739 AUC after training: 0.5
User 26739 does not improve AUC. Reverting changes.
Training on augumented user 33924 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33924 AUC after training: 0.5
User 33924 does not improve AUC. Reverting changes.
Training on augumented user 51864 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51864 AUC after training: 0.5
User 51864 does not improve AUC. Reverting changes.
Training on augumented user 133161 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133161 AUC after training: 0.5
User 133161 does not improve AUC. Reverting changes.
Training on augumented user 122507 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122507 AUC after training: 0.5
User 122507 does not improve AUC. Reverting changes.
Training on augumented user 98281 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98281 AUC after training: 0.5
User 98281 does not improve AUC. Reverting changes.
Training on augumented user 46470 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46470 AUC after training: 0.5
User 46470 does not improve AUC. Reverting changes.
Training on augumented user 62929 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62929 AUC after training: 0.5
User 62929 does not improve AUC. Reverting changes.
Training on augumented user 42863 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42863 AUC after training: 0.5
User 42863 does not improve AUC. Reverting changes.
Training on augumented user 109304 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109304 AUC after training: 0.5
User 109304 does not improve AUC. Reverting changes.
Training on augumented user 2896 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2896 AUC after training: 0.5
User 2896 does not improve AUC. Reverting changes.
Training on augumented user 119998 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119998 AUC after training: 0.5
User 119998 does not improve AUC. Reverting changes.
Training on augumented user 125896 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125896 AUC after training: 0.5
User 125896 does not improve AUC. Reverting changes.
Training on augumented user 92971 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92971 AUC after training: 0.5
User 92971 does not improve AUC. Reverting changes.
Training on augumented user 60711 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60711 AUC after training: 0.5
User 60711 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:11.635402] start test user 124339 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:12.553188] start test user 124339 25/567 recall augumented users by random, augumented_users = [62205, 46640, 50857, 122964, 123303, 93869, 84878, 107324, 121860, 92551, 22432, 113627, 1198, 47293, 8007, 133852, 91565, 101235, 77665, 36423, 106833, 120645, 22585, 1809, 83916, 134110, 22117, 110830, 114286, 119977, 20563, 112121, 35209, 115107, 40953, 3372, 63139, 71909, 3406, 21798, 49738, 62797, 33177, 38584, 12632, 138092, 41014, 87271, 35498, 113612]
[2024-12-02 17:51:12.572743] user = 124339 Cloud 25/567
[2024-12-02 17:51:12.638951] user = 124339 Local 25/567
[2024-12-02 17:51:12.962914] user = 124339 Local+ 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:16.052406] user = 124339 MPDA- 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5513526839307152
Training on augumented user 62205 0/50 current_auc = 0.5513526839307152
User 62205 AUC after training: 0.5513526839307151
User 62205 does not improve AUC. Reverting changes.
Training on augumented user 46640 1/50 current_auc = 0.5513526839307152
User 46640 AUC after training: 0.5514813068084377
User 46640 improves AUC. Keeping the model.
Training on augumented user 50857 2/50 current_auc = 0.5514813068084377
User 50857 AUC after training: 0.5514169953695763
User 50857 does not improve AUC. Reverting changes.
Training on augumented user 122964 3/50 current_auc = 0.5514813068084377
User 122964 AUC after training: 0.5512026239067056
User 122964 does not improve AUC. Reverting changes.
Training on augumented user 123303 4/50 current_auc = 0.5514813068084377
User 123303 AUC after training: 0.5513741210770022
User 123303 does not improve AUC. Reverting changes.
Training on augumented user 93869 5/50 current_auc = 0.5514813068084377
User 93869 AUC after training: 0.5514598696621507
User 93869 does not improve AUC. Reverting changes.
Training on augumented user 84878 6/50 current_auc = 0.5514813068084377
User 84878 AUC after training: 0.5517171154175956
User 84878 improves AUC. Keeping the model.
Training on augumented user 107324 7/50 current_auc = 0.5517171154175956
User 107324 AUC after training: 0.5518886125878923
User 107324 improves AUC. Keeping the model.
Training on augumented user 121860 8/50 current_auc = 0.5518886125878923
User 121860 AUC after training: 0.5523066369404905
User 121860 improves AUC. Keeping the model.
Training on augumented user 92551 9/50 current_auc = 0.5523066369404905
User 92551 AUC after training: 0.5518350197221746
User 92551 does not improve AUC. Reverting changes.
Training on augumented user 22432 10/50 current_auc = 0.5523066369404905
User 22432 AUC after training: 0.552413822671926
User 22432 improves AUC. Keeping the model.
Training on augumented user 113627 11/50 current_auc = 0.552413822671926
User 113627 AUC after training: 0.5521137026239067
User 113627 does not improve AUC. Reverting changes.
Training on augumented user 1198 12/50 current_auc = 0.552413822671926
User 1198 AUC after training: 0.5521780140627679
User 1198 does not improve AUC. Reverting changes.
Training on augumented user 47293 13/50 current_auc = 0.552413822671926
User 47293 AUC after training: 0.5512347796261362
User 47293 does not improve AUC. Reverting changes.
Training on augumented user 8007 14/50 current_auc = 0.552413822671926
User 8007 AUC after training: 0.5523816669524952
User 8007 does not improve AUC. Reverting changes.
Training on augumented user 133852 15/50 current_auc = 0.552413822671926
User 133852 AUC after training: 0.551920768307323
User 133852 does not improve AUC. Reverting changes.
Training on augumented user 91565 16/50 current_auc = 0.552413822671926
User 91565 AUC after training: 0.5523280740867775
User 91565 does not improve AUC. Reverting changes.
Training on augumented user 101235 17/50 current_auc = 0.552413822671926
User 101235 AUC after training: 0.5523280740867775
User 101235 does not improve AUC. Reverting changes.
Training on augumented user 77665 18/50 current_auc = 0.552413822671926
User 77665 AUC after training: 0.5525424455496484
User 77665 improves AUC. Keeping the model.
Training on augumented user 36423 19/50 current_auc = 0.5525424455496484
User 36423 AUC after training: 0.5520922654776196
User 36423 does not improve AUC. Reverting changes.
Training on augumented user 106833 20/50 current_auc = 0.5525424455496484
User 106833 AUC after training: 0.5530462184873949
User 106833 improves AUC. Keeping the model.
Training on augumented user 120645 21/50 current_auc = 0.5530462184873949
User 120645 AUC after training: 0.5528532841708111
User 120645 does not improve AUC. Reverting changes.
Training on augumented user 22585 22/50 current_auc = 0.5530462184873949
User 22585 AUC after training: 0.5531534042188304
User 22585 improves AUC. Keeping the model.
Training on augumented user 1809 23/50 current_auc = 0.5531534042188304
User 1809 AUC after training: 0.5531748413651174
User 1809 improves AUC. Keeping the model.
Training on augumented user 83916 24/50 current_auc = 0.5531748413651174
User 83916 AUC after training: 0.5531319670725433
User 83916 does not improve AUC. Reverting changes.
Training on augumented user 134110 25/50 current_auc = 0.5531748413651174
User 134110 AUC after training: 0.5537107700222946
User 134110 improves AUC. Keeping the model.
Training on augumented user 22117 26/50 current_auc = 0.5537107700222946
User 22117 AUC after training: 0.5535607099982851
User 22117 does not improve AUC. Reverting changes.
Training on augumented user 110830 27/50 current_auc = 0.5537107700222946
User 110830 AUC after training: 0.5535178357057108
User 110830 does not improve AUC. Reverting changes.
Training on augumented user 114286 28/50 current_auc = 0.5537107700222946
User 114286 AUC after training: 0.5536678957297204
User 114286 does not improve AUC. Reverting changes.
Training on augumented user 119977 29/50 current_auc = 0.5537107700222946
User 119977 AUC after training: 0.5525317269765049
User 119977 does not improve AUC. Reverting changes.
Training on augumented user 20563 30/50 current_auc = 0.5537107700222946
User 20563 AUC after training: 0.5535392728519979
User 20563 does not improve AUC. Reverting changes.
Training on augumented user 112121 31/50 current_auc = 0.5537107700222946
User 112121 AUC after training: 0.5535178357057109
User 112121 does not improve AUC. Reverting changes.
Training on augumented user 35209 32/50 current_auc = 0.5537107700222946
User 35209 AUC after training: 0.5535821471445721
User 35209 does not improve AUC. Reverting changes.
Training on augumented user 115107 33/50 current_auc = 0.5537107700222946
User 115107 AUC after training: 0.5536143028640028
User 115107 does not improve AUC. Reverting changes.
Training on augumented user 40953 34/50 current_auc = 0.5537107700222946
User 40953 AUC after training: 0.5528961584633854
User 40953 does not improve AUC. Reverting changes.
Training on augumented user 3372 35/50 current_auc = 0.5537107700222946
User 3372 AUC after training: 0.5539251414851655
User 3372 improves AUC. Keeping the model.
Training on augumented user 63139 36/50 current_auc = 0.5539251414851655
User 63139 AUC after training: 0.5524888526839308
User 63139 does not improve AUC. Reverting changes.
Training on augumented user 71909 37/50 current_auc = 0.5539251414851655
User 71909 AUC after training: 0.5536678957297205
User 71909 does not improve AUC. Reverting changes.
Training on augumented user 3406 38/50 current_auc = 0.5539251414851655
User 3406 AUC after training: 0.5528747213170982
User 3406 does not improve AUC. Reverting changes.
Training on augumented user 21798 39/50 current_auc = 0.5539251414851655
User 21798 AUC after training: 0.5540108900703139
User 21798 improves AUC. Keeping the model.
Training on augumented user 49738 40/50 current_auc = 0.5540108900703139
User 49738 AUC after training: 0.5527032241468016
User 49738 does not improve AUC. Reverting changes.
Training on augumented user 62797 41/50 current_auc = 0.5540108900703139
User 62797 AUC after training: 0.5537429257417252
User 62797 does not improve AUC. Reverting changes.
Training on augumented user 33177 42/50 current_auc = 0.5540108900703139
User 33177 AUC after training: 0.5538608300463042
User 33177 does not improve AUC. Reverting changes.
Training on augumented user 38584 43/50 current_auc = 0.5540108900703139
User 38584 AUC after training: 0.5543110101183331
User 38584 improves AUC. Keeping the model.
Training on augumented user 12632 44/50 current_auc = 0.5543110101183331
User 12632 AUC after training: 0.5540966386554622
User 12632 does not improve AUC. Reverting changes.
Training on augumented user 138092 45/50 current_auc = 0.5543110101183331
User 138092 AUC after training: 0.5543110101183331
User 138092 does not improve AUC. Reverting changes.
Training on augumented user 41014 46/50 current_auc = 0.5543110101183331
User 41014 AUC after training: 0.5536678957297204
User 41014 does not improve AUC. Reverting changes.
Training on augumented user 87271 47/50 current_auc = 0.5543110101183331
User 87271 AUC after training: 0.5540752015091751
User 87271 does not improve AUC. Reverting changes.
Training on augumented user 35498 48/50 current_auc = 0.5543110101183331
User 35498 AUC after training: 0.5545468187274911
User 35498 improves AUC. Keeping the model.
Training on augumented user 113612 49/50 current_auc = 0.5545468187274911
User 113612 AUC after training: 0.5538822671925914
User 113612 does not improve AUC. Reverting changes.
[2024-12-02 17:51:46.540523] start test user 124352 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:47.134957] start test user 124352 26/567 recall augumented users by random, augumented_users = [71516, 13526, 128505, 81136, 11364, 17388, 22420, 52180, 9451, 92488, 77278, 69920, 61732, 35192, 81874, 66808, 165, 16273, 11759, 43992, 73452, 38734, 83807, 41193, 16654, 104157, 40945, 77914, 44800, 117601, 43006, 3332, 2513, 107641, 118314, 81470, 128904, 22896, 5156, 86394, 107436, 125231, 54273, 85666, 130945, 106316, 107828, 107392, 77547, 135877]
[2024-12-02 17:51:47.150100] user = 124352 Cloud 26/567
[2024-12-02 17:51:47.159881] user = 124352 Local 26/567
[2024-12-02 17:51:47.234987] user = 124352 Local+ 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:49.136902] user = 124352 MPDA- 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7520833333333333
Training on augumented user 71516 0/50 current_auc = 0.7520833333333333
User 71516 AUC after training: 0.7666666666666666
User 71516 improves AUC. Keeping the model.
Training on augumented user 13526 1/50 current_auc = 0.7666666666666666
User 13526 AUC after training: 0.7666666666666666
User 13526 does not improve AUC. Reverting changes.
Training on augumented user 128505 2/50 current_auc = 0.7666666666666666
User 128505 AUC after training: 0.7666666666666666
User 128505 does not improve AUC. Reverting changes.
Training on augumented user 81136 3/50 current_auc = 0.7666666666666666
User 81136 AUC after training: 0.75625
User 81136 does not improve AUC. Reverting changes.
Training on augumented user 11364 4/50 current_auc = 0.7666666666666666
User 11364 AUC after training: 0.7625
User 11364 does not improve AUC. Reverting changes.
Training on augumented user 17388 5/50 current_auc = 0.7666666666666666
User 17388 AUC after training: 0.7666666666666666
User 17388 does not improve AUC. Reverting changes.
Training on augumented user 22420 6/50 current_auc = 0.7666666666666666
User 22420 AUC after training: 0.7666666666666666
User 22420 does not improve AUC. Reverting changes.
Training on augumented user 52180 7/50 current_auc = 0.7666666666666666
User 52180 AUC after training: 0.7625
User 52180 does not improve AUC. Reverting changes.
Training on augumented user 9451 8/50 current_auc = 0.7666666666666666
User 9451 AUC after training: 0.75625
User 9451 does not improve AUC. Reverting changes.
Training on augumented user 92488 9/50 current_auc = 0.7666666666666666
User 92488 AUC after training: 0.7666666666666666
User 92488 does not improve AUC. Reverting changes.
Training on augumented user 77278 10/50 current_auc = 0.7666666666666666
User 77278 AUC after training: 0.7625
User 77278 does not improve AUC. Reverting changes.
Training on augumented user 69920 11/50 current_auc = 0.7666666666666666
User 69920 AUC after training: 0.7666666666666666
User 69920 does not improve AUC. Reverting changes.
Training on augumented user 61732 12/50 current_auc = 0.7666666666666666
User 61732 AUC after training: 0.75625
User 61732 does not improve AUC. Reverting changes.
Training on augumented user 35192 13/50 current_auc = 0.7666666666666666
User 35192 AUC after training: 0.7666666666666666
User 35192 does not improve AUC. Reverting changes.
Training on augumented user 81874 14/50 current_auc = 0.7666666666666666
User 81874 AUC after training: 0.7666666666666666
User 81874 does not improve AUC. Reverting changes.
Training on augumented user 66808 15/50 current_auc = 0.7666666666666666
User 66808 AUC after training: 0.7666666666666666
User 66808 does not improve AUC. Reverting changes.
Training on augumented user 165 16/50 current_auc = 0.7666666666666666
User 165 AUC after training: 0.7520833333333333
User 165 does not improve AUC. Reverting changes.
Training on augumented user 16273 17/50 current_auc = 0.7666666666666666
User 16273 AUC after training: 0.75625
User 16273 does not improve AUC. Reverting changes.
Training on augumented user 11759 18/50 current_auc = 0.7666666666666666
User 11759 AUC after training: 0.7625
User 11759 does not improve AUC. Reverting changes.
Training on augumented user 43992 19/50 current_auc = 0.7666666666666666
User 43992 AUC after training: 0.7666666666666666
User 43992 does not improve AUC. Reverting changes.
Training on augumented user 73452 20/50 current_auc = 0.7666666666666666
User 73452 AUC after training: 0.7666666666666666
User 73452 does not improve AUC. Reverting changes.
Training on augumented user 38734 21/50 current_auc = 0.7666666666666666
User 38734 AUC after training: 0.7666666666666666
User 38734 does not improve AUC. Reverting changes.
Training on augumented user 83807 22/50 current_auc = 0.7666666666666666
User 83807 AUC after training: 0.75625
User 83807 does not improve AUC. Reverting changes.
Training on augumented user 41193 23/50 current_auc = 0.7666666666666666
User 41193 AUC after training: 0.7520833333333333
User 41193 does not improve AUC. Reverting changes.
Training on augumented user 16654 24/50 current_auc = 0.7666666666666666
User 16654 AUC after training: 0.7666666666666666
User 16654 does not improve AUC. Reverting changes.
Training on augumented user 104157 25/50 current_auc = 0.7666666666666666
User 104157 AUC after training: 0.7520833333333333
User 104157 does not improve AUC. Reverting changes.
Training on augumented user 40945 26/50 current_auc = 0.7666666666666666
User 40945 AUC after training: 0.7625
User 40945 does not improve AUC. Reverting changes.
Training on augumented user 77914 27/50 current_auc = 0.7666666666666666
User 77914 AUC after training: 0.7666666666666666
User 77914 does not improve AUC. Reverting changes.
Training on augumented user 44800 28/50 current_auc = 0.7666666666666666
User 44800 AUC after training: 0.7625
User 44800 does not improve AUC. Reverting changes.
Training on augumented user 117601 29/50 current_auc = 0.7666666666666666
User 117601 AUC after training: 0.7520833333333333
User 117601 does not improve AUC. Reverting changes.
Training on augumented user 43006 30/50 current_auc = 0.7666666666666666
User 43006 AUC after training: 0.7625
User 43006 does not improve AUC. Reverting changes.
Training on augumented user 3332 31/50 current_auc = 0.7666666666666666
User 3332 AUC after training: 0.7666666666666666
User 3332 does not improve AUC. Reverting changes.
Training on augumented user 2513 32/50 current_auc = 0.7666666666666666
User 2513 AUC after training: 0.7666666666666666
User 2513 does not improve AUC. Reverting changes.
Training on augumented user 107641 33/50 current_auc = 0.7666666666666666
User 107641 AUC after training: 0.7520833333333333
User 107641 does not improve AUC. Reverting changes.
Training on augumented user 118314 34/50 current_auc = 0.7666666666666666
User 118314 AUC after training: 0.7520833333333333
User 118314 does not improve AUC. Reverting changes.
Training on augumented user 81470 35/50 current_auc = 0.7666666666666666
User 81470 AUC after training: 0.7666666666666666
User 81470 does not improve AUC. Reverting changes.
Training on augumented user 128904 36/50 current_auc = 0.7666666666666666
User 128904 AUC after training: 0.7520833333333333
User 128904 does not improve AUC. Reverting changes.
Training on augumented user 22896 37/50 current_auc = 0.7666666666666666
User 22896 AUC after training: 0.75625
User 22896 does not improve AUC. Reverting changes.
Training on augumented user 5156 38/50 current_auc = 0.7666666666666666
User 5156 AUC after training: 0.7625
User 5156 does not improve AUC. Reverting changes.
Training on augumented user 86394 39/50 current_auc = 0.7666666666666666
User 86394 AUC after training: 0.75625
User 86394 does not improve AUC. Reverting changes.
Training on augumented user 107436 40/50 current_auc = 0.7666666666666666
User 107436 AUC after training: 0.7520833333333333
User 107436 does not improve AUC. Reverting changes.
Training on augumented user 125231 41/50 current_auc = 0.7666666666666666
User 125231 AUC after training: 0.75625
User 125231 does not improve AUC. Reverting changes.
Training on augumented user 54273 42/50 current_auc = 0.7666666666666666
User 54273 AUC after training: 0.7625
User 54273 does not improve AUC. Reverting changes.
Training on augumented user 85666 43/50 current_auc = 0.7666666666666666
User 85666 AUC after training: 0.7666666666666666
User 85666 does not improve AUC. Reverting changes.
Training on augumented user 130945 44/50 current_auc = 0.7666666666666666
User 130945 AUC after training: 0.7520833333333333
User 130945 does not improve AUC. Reverting changes.
Training on augumented user 106316 45/50 current_auc = 0.7666666666666666
User 106316 AUC after training: 0.7520833333333333
User 106316 does not improve AUC. Reverting changes.
Training on augumented user 107828 46/50 current_auc = 0.7666666666666666
User 107828 AUC after training: 0.7666666666666666
User 107828 does not improve AUC. Reverting changes.
Training on augumented user 107392 47/50 current_auc = 0.7666666666666666
User 107392 AUC after training: 0.75625
User 107392 does not improve AUC. Reverting changes.
Training on augumented user 77547 48/50 current_auc = 0.7666666666666666
User 77547 AUC after training: 0.75625
User 77547 does not improve AUC. Reverting changes.
Training on augumented user 135877 49/50 current_auc = 0.7666666666666666
User 135877 AUC after training: 0.7666666666666666
User 135877 does not improve AUC. Reverting changes.
[2024-12-02 17:52:19.670251] start test user 124381 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:20.441397] start test user 124381 27/567 recall augumented users by random, augumented_users = [22353, 41474, 88771, 134110, 38038, 65488, 134516, 26167, 13775, 19467, 101893, 83406, 70889, 105128, 92318, 79841, 119442, 96698, 13619, 5119, 18343, 66313, 45577, 86865, 52148, 85550, 57960, 37601, 50091, 35030, 70783, 126844, 117190, 74528, 47574, 63301, 36002, 125064, 22233, 85044, 69215, 24209, 110954, 85011, 124404, 117495, 77471, 31981, 115612, 126407]
[2024-12-02 17:52:20.484163] user = 124381 Cloud 27/567
[2024-12-02 17:52:20.514995] user = 124381 Local 27/567
[2024-12-02 17:52:20.571010] user = 124381 Local+ 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:22.652292] user = 124381 MPDA- 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8235294117647058
Training on augumented user 22353 0/50 current_auc = 0.8235294117647058
User 22353 AUC after training: 0.8235294117647058
User 22353 does not improve AUC. Reverting changes.
Training on augumented user 41474 1/50 current_auc = 0.8235294117647058
User 41474 AUC after training: 0.8235294117647058
User 41474 does not improve AUC. Reverting changes.
Training on augumented user 88771 2/50 current_auc = 0.8235294117647058
User 88771 AUC after training: 0.8235294117647058
User 88771 does not improve AUC. Reverting changes.
Training on augumented user 134110 3/50 current_auc = 0.8235294117647058
User 134110 AUC after training: 0.8235294117647058
User 134110 does not improve AUC. Reverting changes.
Training on augumented user 38038 4/50 current_auc = 0.8235294117647058
User 38038 AUC after training: 0.8235294117647058
User 38038 does not improve AUC. Reverting changes.
Training on augumented user 65488 5/50 current_auc = 0.8235294117647058
User 65488 AUC after training: 0.8235294117647058
User 65488 does not improve AUC. Reverting changes.
Training on augumented user 134516 6/50 current_auc = 0.8235294117647058
User 134516 AUC after training: 0.8235294117647058
User 134516 does not improve AUC. Reverting changes.
Training on augumented user 26167 7/50 current_auc = 0.8235294117647058
User 26167 AUC after training: 0.8235294117647058
User 26167 does not improve AUC. Reverting changes.
Training on augumented user 13775 8/50 current_auc = 0.8235294117647058
User 13775 AUC after training: 0.8235294117647058
User 13775 does not improve AUC. Reverting changes.
Training on augumented user 19467 9/50 current_auc = 0.8235294117647058
User 19467 AUC after training: 0.8235294117647058
User 19467 does not improve AUC. Reverting changes.
Training on augumented user 101893 10/50 current_auc = 0.8235294117647058
User 101893 AUC after training: 0.8235294117647058
User 101893 does not improve AUC. Reverting changes.
Training on augumented user 83406 11/50 current_auc = 0.8235294117647058
User 83406 AUC after training: 0.8235294117647058
User 83406 does not improve AUC. Reverting changes.
Training on augumented user 70889 12/50 current_auc = 0.8235294117647058
User 70889 AUC after training: 0.8235294117647058
User 70889 does not improve AUC. Reverting changes.
Training on augumented user 105128 13/50 current_auc = 0.8235294117647058
User 105128 AUC after training: 0.8235294117647058
User 105128 does not improve AUC. Reverting changes.
Training on augumented user 92318 14/50 current_auc = 0.8235294117647058
User 92318 AUC after training: 0.8235294117647058
User 92318 does not improve AUC. Reverting changes.
Training on augumented user 79841 15/50 current_auc = 0.8235294117647058
User 79841 AUC after training: 0.8235294117647058
User 79841 does not improve AUC. Reverting changes.
Training on augumented user 119442 16/50 current_auc = 0.8235294117647058
User 119442 AUC after training: 0.8235294117647058
User 119442 does not improve AUC. Reverting changes.
Training on augumented user 96698 17/50 current_auc = 0.8235294117647058
User 96698 AUC after training: 0.8235294117647058
User 96698 does not improve AUC. Reverting changes.
Training on augumented user 13619 18/50 current_auc = 0.8235294117647058
User 13619 AUC after training: 0.8235294117647058
User 13619 does not improve AUC. Reverting changes.
Training on augumented user 5119 19/50 current_auc = 0.8235294117647058
User 5119 AUC after training: 0.8235294117647058
User 5119 does not improve AUC. Reverting changes.
Training on augumented user 18343 20/50 current_auc = 0.8235294117647058
User 18343 AUC after training: 0.8235294117647058
User 18343 does not improve AUC. Reverting changes.
Training on augumented user 66313 21/50 current_auc = 0.8235294117647058
User 66313 AUC after training: 0.8235294117647058
User 66313 does not improve AUC. Reverting changes.
Training on augumented user 45577 22/50 current_auc = 0.8235294117647058
User 45577 AUC after training: 0.8235294117647058
User 45577 does not improve AUC. Reverting changes.
Training on augumented user 86865 23/50 current_auc = 0.8235294117647058
User 86865 AUC after training: 0.8235294117647058
User 86865 does not improve AUC. Reverting changes.
Training on augumented user 52148 24/50 current_auc = 0.8235294117647058
User 52148 AUC after training: 0.8235294117647058
User 52148 does not improve AUC. Reverting changes.
Training on augumented user 85550 25/50 current_auc = 0.8235294117647058
User 85550 AUC after training: 0.8235294117647058
User 85550 does not improve AUC. Reverting changes.
Training on augumented user 57960 26/50 current_auc = 0.8235294117647058
User 57960 AUC after training: 0.8235294117647058
User 57960 does not improve AUC. Reverting changes.
Training on augumented user 37601 27/50 current_auc = 0.8235294117647058
User 37601 AUC after training: 0.8235294117647058
User 37601 does not improve AUC. Reverting changes.
Training on augumented user 50091 28/50 current_auc = 0.8235294117647058
User 50091 AUC after training: 0.8235294117647058
User 50091 does not improve AUC. Reverting changes.
Training on augumented user 35030 29/50 current_auc = 0.8235294117647058
User 35030 AUC after training: 0.8235294117647058
User 35030 does not improve AUC. Reverting changes.
Training on augumented user 70783 30/50 current_auc = 0.8235294117647058
User 70783 AUC after training: 0.8235294117647058
User 70783 does not improve AUC. Reverting changes.
Training on augumented user 126844 31/50 current_auc = 0.8235294117647058
User 126844 AUC after training: 0.8235294117647058
User 126844 does not improve AUC. Reverting changes.
Training on augumented user 117190 32/50 current_auc = 0.8235294117647058
User 117190 AUC after training: 0.8235294117647058
User 117190 does not improve AUC. Reverting changes.
Training on augumented user 74528 33/50 current_auc = 0.8235294117647058
User 74528 AUC after training: 0.8235294117647058
User 74528 does not improve AUC. Reverting changes.
Training on augumented user 47574 34/50 current_auc = 0.8235294117647058
User 47574 AUC after training: 0.8235294117647058
User 47574 does not improve AUC. Reverting changes.
Training on augumented user 63301 35/50 current_auc = 0.8235294117647058
User 63301 AUC after training: 0.8235294117647058
User 63301 does not improve AUC. Reverting changes.
Training on augumented user 36002 36/50 current_auc = 0.8235294117647058
User 36002 AUC after training: 0.803921568627451
User 36002 does not improve AUC. Reverting changes.
Training on augumented user 125064 37/50 current_auc = 0.8235294117647058
User 125064 AUC after training: 0.8235294117647058
User 125064 does not improve AUC. Reverting changes.
Training on augumented user 22233 38/50 current_auc = 0.8235294117647058
User 22233 AUC after training: 0.8235294117647058
User 22233 does not improve AUC. Reverting changes.
Training on augumented user 85044 39/50 current_auc = 0.8235294117647058
User 85044 AUC after training: 0.8235294117647058
User 85044 does not improve AUC. Reverting changes.
Training on augumented user 69215 40/50 current_auc = 0.8235294117647058
User 69215 AUC after training: 0.8235294117647058
User 69215 does not improve AUC. Reverting changes.
Training on augumented user 24209 41/50 current_auc = 0.8235294117647058
User 24209 AUC after training: 0.8235294117647058
User 24209 does not improve AUC. Reverting changes.
Training on augumented user 110954 42/50 current_auc = 0.8235294117647058
User 110954 AUC after training: 0.8235294117647058
User 110954 does not improve AUC. Reverting changes.
Training on augumented user 85011 43/50 current_auc = 0.8235294117647058
User 85011 AUC after training: 0.8235294117647058
User 85011 does not improve AUC. Reverting changes.
Training on augumented user 124404 44/50 current_auc = 0.8235294117647058
User 124404 AUC after training: 0.8235294117647058
User 124404 does not improve AUC. Reverting changes.
Training on augumented user 117495 45/50 current_auc = 0.8235294117647058
User 117495 AUC after training: 0.8235294117647058
User 117495 does not improve AUC. Reverting changes.
Training on augumented user 77471 46/50 current_auc = 0.8235294117647058
User 77471 AUC after training: 0.8235294117647058
User 77471 does not improve AUC. Reverting changes.
Training on augumented user 31981 47/50 current_auc = 0.8235294117647058
User 31981 AUC after training: 0.8235294117647058
User 31981 does not improve AUC. Reverting changes.
Training on augumented user 115612 48/50 current_auc = 0.8235294117647058
User 115612 AUC after training: 0.8235294117647058
User 115612 does not improve AUC. Reverting changes.
Training on augumented user 126407 49/50 current_auc = 0.8235294117647058
User 126407 AUC after training: 0.8235294117647058
User 126407 does not improve AUC. Reverting changes.
[2024-12-02 17:52:49.514804] start test user 124401 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:49.937527] start test user 124401 28/567 recall augumented users by random, augumented_users = [61507, 34431, 36348, 47325, 76686, 94470, 78416, 100088, 91219, 89058, 29538, 84715, 132233, 65192, 129704, 101617, 136776, 72084, 77400, 25716, 47087, 116208, 13119, 19931, 23702, 70636, 27241, 32677, 43281, 106584, 37729, 45619, 36326, 1828, 88509, 37782, 122601, 4628, 3309, 63152, 111131, 15092, 90720, 49641, 129368, 110238, 36506, 33830, 89444, 5996]
[2024-12-02 17:52:49.951772] user = 124401 Cloud 28/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:52:49.957504] user = 124401 Local 28/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:52:49.978924] user = 124401 Local+ 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:52:52.484918] user = 124401 MPDA- 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 61507 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61507 AUC after training: 0.5
User 61507 does not improve AUC. Reverting changes.
Training on augumented user 34431 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34431 AUC after training: 0.5
User 34431 does not improve AUC. Reverting changes.
Training on augumented user 36348 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36348 AUC after training: 0.5
User 36348 does not improve AUC. Reverting changes.
Training on augumented user 47325 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47325 AUC after training: 0.5
User 47325 does not improve AUC. Reverting changes.
Training on augumented user 76686 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76686 AUC after training: 0.5
User 76686 does not improve AUC. Reverting changes.
Training on augumented user 94470 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94470 AUC after training: 0.5
User 94470 does not improve AUC. Reverting changes.
Training on augumented user 78416 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78416 AUC after training: 0.5
User 78416 does not improve AUC. Reverting changes.
Training on augumented user 100088 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100088 AUC after training: 0.5
User 100088 does not improve AUC. Reverting changes.
Training on augumented user 91219 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91219 AUC after training: 0.5
User 91219 does not improve AUC. Reverting changes.
Training on augumented user 89058 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89058 AUC after training: 0.5
User 89058 does not improve AUC. Reverting changes.
Training on augumented user 29538 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29538 AUC after training: 0.5
User 29538 does not improve AUC. Reverting changes.
Training on augumented user 84715 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84715 AUC after training: 0.5
User 84715 does not improve AUC. Reverting changes.
Training on augumented user 132233 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132233 AUC after training: 0.5
User 132233 does not improve AUC. Reverting changes.
Training on augumented user 65192 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65192 AUC after training: 0.5
User 65192 does not improve AUC. Reverting changes.
Training on augumented user 129704 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129704 AUC after training: 0.5
User 129704 does not improve AUC. Reverting changes.
Training on augumented user 101617 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101617 AUC after training: 0.5
User 101617 does not improve AUC. Reverting changes.
Training on augumented user 136776 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136776 AUC after training: 0.5
User 136776 does not improve AUC. Reverting changes.
Training on augumented user 72084 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72084 AUC after training: 0.5
User 72084 does not improve AUC. Reverting changes.
Training on augumented user 77400 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77400 AUC after training: 0.5
User 77400 does not improve AUC. Reverting changes.
Training on augumented user 25716 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25716 AUC after training: 0.5
User 25716 does not improve AUC. Reverting changes.
Training on augumented user 47087 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47087 AUC after training: 0.5
User 47087 does not improve AUC. Reverting changes.
Training on augumented user 116208 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116208 AUC after training: 0.5
User 116208 does not improve AUC. Reverting changes.
Training on augumented user 13119 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13119 AUC after training: 0.5
User 13119 does not improve AUC. Reverting changes.
Training on augumented user 19931 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19931 AUC after training: 0.5
User 19931 does not improve AUC. Reverting changes.
Training on augumented user 23702 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23702 AUC after training: 0.5
User 23702 does not improve AUC. Reverting changes.
Training on augumented user 70636 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70636 AUC after training: 0.5
User 70636 does not improve AUC. Reverting changes.
Training on augumented user 27241 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27241 AUC after training: 0.5
User 27241 does not improve AUC. Reverting changes.
Training on augumented user 32677 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32677 AUC after training: 0.5
User 32677 does not improve AUC. Reverting changes.
Training on augumented user 43281 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43281 AUC after training: 0.5
User 43281 does not improve AUC. Reverting changes.
Training on augumented user 106584 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106584 AUC after training: 0.5
User 106584 does not improve AUC. Reverting changes.
Training on augumented user 37729 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37729 AUC after training: 0.5
User 37729 does not improve AUC. Reverting changes.
Training on augumented user 45619 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45619 AUC after training: 0.5
User 45619 does not improve AUC. Reverting changes.
Training on augumented user 36326 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36326 AUC after training: 0.5
User 36326 does not improve AUC. Reverting changes.
Training on augumented user 1828 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1828 AUC after training: 0.5
User 1828 does not improve AUC. Reverting changes.
Training on augumented user 88509 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88509 AUC after training: 0.5
User 88509 does not improve AUC. Reverting changes.
Training on augumented user 37782 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37782 AUC after training: 0.5
User 37782 does not improve AUC. Reverting changes.
Training on augumented user 122601 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122601 AUC after training: 0.5
User 122601 does not improve AUC. Reverting changes.
Training on augumented user 4628 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4628 AUC after training: 0.5
User 4628 does not improve AUC. Reverting changes.
Training on augumented user 3309 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3309 AUC after training: 0.5
User 3309 does not improve AUC. Reverting changes.
Training on augumented user 63152 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63152 AUC after training: 0.5
User 63152 does not improve AUC. Reverting changes.
Training on augumented user 111131 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111131 AUC after training: 0.5
User 111131 does not improve AUC. Reverting changes.
Training on augumented user 15092 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15092 AUC after training: 0.5
User 15092 does not improve AUC. Reverting changes.
Training on augumented user 90720 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90720 AUC after training: 0.5
User 90720 does not improve AUC. Reverting changes.
Training on augumented user 49641 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49641 AUC after training: 0.5
User 49641 does not improve AUC. Reverting changes.
Training on augumented user 129368 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129368 AUC after training: 0.5
User 129368 does not improve AUC. Reverting changes.
Training on augumented user 110238 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110238 AUC after training: 0.5
User 110238 does not improve AUC. Reverting changes.
Training on augumented user 36506 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36506 AUC after training: 0.5
User 36506 does not improve AUC. Reverting changes.
Training on augumented user 33830 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33830 AUC after training: 0.5
User 33830 does not improve AUC. Reverting changes.
Training on augumented user 89444 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89444 AUC after training: 0.5
User 89444 does not improve AUC. Reverting changes.
Training on augumented user 5996 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5996 AUC after training: 0.5
User 5996 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:53:21.749522] start test user 124404 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:22.178002] start test user 124404 29/567 recall augumented users by random, augumented_users = [101306, 75811, 41755, 31863, 116774, 93269, 82839, 76791, 2858, 30469, 85201, 30093, 70725, 126083, 49656, 98512, 13768, 97449, 76902, 4058, 93345, 50475, 92165, 103855, 11147, 98976, 90067, 135072, 60753, 135213, 100347, 104569, 54694, 86934, 81020, 104612, 28380, 32600, 44891, 79995, 96965, 93272, 9856, 131595, 133953, 101052, 62510, 132528, 45301, 14082]
[2024-12-02 17:53:22.192882] user = 124404 Cloud 29/567
[2024-12-02 17:53:22.204140] user = 124404 Local 29/567
[2024-12-02 17:53:22.258164] user = 124404 Local+ 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:23.801701] user = 124404 MPDA- 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3472222222222222
Training on augumented user 101306 0/50 current_auc = 0.3472222222222222
User 101306 AUC after training: 0.3472222222222222
User 101306 does not improve AUC. Reverting changes.
Training on augumented user 75811 1/50 current_auc = 0.3472222222222222
User 75811 AUC after training: 0.3472222222222222
User 75811 does not improve AUC. Reverting changes.
Training on augumented user 41755 2/50 current_auc = 0.3472222222222222
User 41755 AUC after training: 0.3472222222222222
User 41755 does not improve AUC. Reverting changes.
Training on augumented user 31863 3/50 current_auc = 0.3472222222222222
User 31863 AUC after training: 0.3194444444444444
User 31863 does not improve AUC. Reverting changes.
Training on augumented user 116774 4/50 current_auc = 0.3472222222222222
User 116774 AUC after training: 0.3472222222222222
User 116774 does not improve AUC. Reverting changes.
Training on augumented user 93269 5/50 current_auc = 0.3472222222222222
User 93269 AUC after training: 0.3472222222222222
User 93269 does not improve AUC. Reverting changes.
Training on augumented user 82839 6/50 current_auc = 0.3472222222222222
User 82839 AUC after training: 0.36111111111111116
User 82839 improves AUC. Keeping the model.
Training on augumented user 76791 7/50 current_auc = 0.36111111111111116
User 76791 AUC after training: 0.36111111111111116
User 76791 does not improve AUC. Reverting changes.
Training on augumented user 2858 8/50 current_auc = 0.36111111111111116
User 2858 AUC after training: 0.36111111111111116
User 2858 does not improve AUC. Reverting changes.
Training on augumented user 30469 9/50 current_auc = 0.36111111111111116
User 30469 AUC after training: 0.3472222222222222
User 30469 does not improve AUC. Reverting changes.
Training on augumented user 85201 10/50 current_auc = 0.36111111111111116
User 85201 AUC after training: 0.3472222222222222
User 85201 does not improve AUC. Reverting changes.
Training on augumented user 30093 11/50 current_auc = 0.36111111111111116
User 30093 AUC after training: 0.36111111111111116
User 30093 does not improve AUC. Reverting changes.
Training on augumented user 70725 12/50 current_auc = 0.36111111111111116
User 70725 AUC after training: 0.375
User 70725 improves AUC. Keeping the model.
Training on augumented user 126083 13/50 current_auc = 0.375
User 126083 AUC after training: 0.375
User 126083 does not improve AUC. Reverting changes.
Training on augumented user 49656 14/50 current_auc = 0.375
User 49656 AUC after training: 0.375
User 49656 does not improve AUC. Reverting changes.
Training on augumented user 98512 15/50 current_auc = 0.375
User 98512 AUC after training: 0.375
User 98512 does not improve AUC. Reverting changes.
Training on augumented user 13768 16/50 current_auc = 0.375
User 13768 AUC after training: 0.375
User 13768 does not improve AUC. Reverting changes.
Training on augumented user 97449 17/50 current_auc = 0.375
User 97449 AUC after training: 0.375
User 97449 does not improve AUC. Reverting changes.
Training on augumented user 76902 18/50 current_auc = 0.375
User 76902 AUC after training: 0.375
User 76902 does not improve AUC. Reverting changes.
Training on augumented user 4058 19/50 current_auc = 0.375
User 4058 AUC after training: 0.375
User 4058 does not improve AUC. Reverting changes.
Training on augumented user 93345 20/50 current_auc = 0.375
User 93345 AUC after training: 0.375
User 93345 does not improve AUC. Reverting changes.
Training on augumented user 50475 21/50 current_auc = 0.375
User 50475 AUC after training: 0.3472222222222222
User 50475 does not improve AUC. Reverting changes.
Training on augumented user 92165 22/50 current_auc = 0.375
User 92165 AUC after training: 0.3472222222222222
User 92165 does not improve AUC. Reverting changes.
Training on augumented user 103855 23/50 current_auc = 0.375
User 103855 AUC after training: 0.375
User 103855 does not improve AUC. Reverting changes.
Training on augumented user 11147 24/50 current_auc = 0.375
User 11147 AUC after training: 0.375
User 11147 does not improve AUC. Reverting changes.
Training on augumented user 98976 25/50 current_auc = 0.375
User 98976 AUC after training: 0.375
User 98976 does not improve AUC. Reverting changes.
Training on augumented user 90067 26/50 current_auc = 0.375
User 90067 AUC after training: 0.375
User 90067 does not improve AUC. Reverting changes.
Training on augumented user 135072 27/50 current_auc = 0.375
User 135072 AUC after training: 0.36111111111111116
User 135072 does not improve AUC. Reverting changes.
Training on augumented user 60753 28/50 current_auc = 0.375
User 60753 AUC after training: 0.375
User 60753 does not improve AUC. Reverting changes.
Training on augumented user 135213 29/50 current_auc = 0.375
User 135213 AUC after training: 0.375
User 135213 does not improve AUC. Reverting changes.
Training on augumented user 100347 30/50 current_auc = 0.375
User 100347 AUC after training: 0.375
User 100347 does not improve AUC. Reverting changes.
Training on augumented user 104569 31/50 current_auc = 0.375
User 104569 AUC after training: 0.375
User 104569 does not improve AUC. Reverting changes.
Training on augumented user 54694 32/50 current_auc = 0.375
User 54694 AUC after training: 0.375
User 54694 does not improve AUC. Reverting changes.
Training on augumented user 86934 33/50 current_auc = 0.375
User 86934 AUC after training: 0.375
User 86934 does not improve AUC. Reverting changes.
Training on augumented user 81020 34/50 current_auc = 0.375
User 81020 AUC after training: 0.375
User 81020 does not improve AUC. Reverting changes.
Training on augumented user 104612 35/50 current_auc = 0.375
User 104612 AUC after training: 0.375
User 104612 does not improve AUC. Reverting changes.
Training on augumented user 28380 36/50 current_auc = 0.375
User 28380 AUC after training: 0.36111111111111116
User 28380 does not improve AUC. Reverting changes.
Training on augumented user 32600 37/50 current_auc = 0.375
User 32600 AUC after training: 0.3472222222222222
User 32600 does not improve AUC. Reverting changes.
Training on augumented user 44891 38/50 current_auc = 0.375
User 44891 AUC after training: 0.36111111111111105
User 44891 does not improve AUC. Reverting changes.
Training on augumented user 79995 39/50 current_auc = 0.375
User 79995 AUC after training: 0.375
User 79995 does not improve AUC. Reverting changes.
Training on augumented user 96965 40/50 current_auc = 0.375
User 96965 AUC after training: 0.3472222222222222
User 96965 does not improve AUC. Reverting changes.
Training on augumented user 93272 41/50 current_auc = 0.375
User 93272 AUC after training: 0.36111111111111105
User 93272 does not improve AUC. Reverting changes.
Training on augumented user 9856 42/50 current_auc = 0.375
User 9856 AUC after training: 0.375
User 9856 does not improve AUC. Reverting changes.
Training on augumented user 131595 43/50 current_auc = 0.375
User 131595 AUC after training: 0.375
User 131595 does not improve AUC. Reverting changes.
Training on augumented user 133953 44/50 current_auc = 0.375
User 133953 AUC after training: 0.375
User 133953 does not improve AUC. Reverting changes.
Training on augumented user 101052 45/50 current_auc = 0.375
User 101052 AUC after training: 0.375
User 101052 does not improve AUC. Reverting changes.
Training on augumented user 62510 46/50 current_auc = 0.375
User 62510 AUC after training: 0.375
User 62510 does not improve AUC. Reverting changes.
Training on augumented user 132528 47/50 current_auc = 0.375
User 132528 AUC after training: 0.375
User 132528 does not improve AUC. Reverting changes.
Training on augumented user 45301 48/50 current_auc = 0.375
User 45301 AUC after training: 0.36111111111111116
User 45301 does not improve AUC. Reverting changes.
Training on augumented user 14082 49/50 current_auc = 0.375
User 14082 AUC after training: 0.375
User 14082 does not improve AUC. Reverting changes.
[2024-12-02 17:53:50.979496] start test user 124440 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:51.555128] start test user 124440 30/567 recall augumented users by random, augumented_users = [108954, 55412, 31251, 53833, 85332, 126511, 13280, 120853, 57057, 79153, 47248, 60963, 107954, 132190, 133675, 271, 44823, 29336, 123937, 82099, 103367, 103591, 35498, 52193, 60067, 138429, 48593, 78988, 84768, 43967, 21302, 17485, 51444, 7257, 53699, 13937, 1358, 35341, 16467, 91581, 47148, 6396, 127305, 48648, 93518, 103788, 62572, 109466, 48646, 39210]
[2024-12-02 17:53:51.573353] user = 124440 Cloud 30/567
[2024-12-02 17:53:51.586019] user = 124440 Local 30/567
[2024-12-02 17:53:51.640026] user = 124440 Local+ 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:54.315830] user = 124440 MPDA- 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9866666666666667
Training on augumented user 108954 0/50 current_auc = 0.9866666666666667
User 108954 AUC after training: 0.9866666666666667
User 108954 does not improve AUC. Reverting changes.
Training on augumented user 55412 1/50 current_auc = 0.9866666666666667
User 55412 AUC after training: 0.9866666666666667
User 55412 does not improve AUC. Reverting changes.
Training on augumented user 31251 2/50 current_auc = 0.9866666666666667
User 31251 AUC after training: 0.9866666666666667
User 31251 does not improve AUC. Reverting changes.
Training on augumented user 53833 3/50 current_auc = 0.9866666666666667
User 53833 AUC after training: 0.9866666666666667
User 53833 does not improve AUC. Reverting changes.
Training on augumented user 85332 4/50 current_auc = 0.9866666666666667
User 85332 AUC after training: 0.9866666666666667
User 85332 does not improve AUC. Reverting changes.
Training on augumented user 126511 5/50 current_auc = 0.9866666666666667
User 126511 AUC after training: 0.9866666666666667
User 126511 does not improve AUC. Reverting changes.
Training on augumented user 13280 6/50 current_auc = 0.9866666666666667
User 13280 AUC after training: 0.9866666666666667
User 13280 does not improve AUC. Reverting changes.
Training on augumented user 120853 7/50 current_auc = 0.9866666666666667
User 120853 AUC after training: 0.9866666666666667
User 120853 does not improve AUC. Reverting changes.
Training on augumented user 57057 8/50 current_auc = 0.9866666666666667
User 57057 AUC after training: 0.9866666666666667
User 57057 does not improve AUC. Reverting changes.
Training on augumented user 79153 9/50 current_auc = 0.9866666666666667
User 79153 AUC after training: 0.9866666666666667
User 79153 does not improve AUC. Reverting changes.
Training on augumented user 47248 10/50 current_auc = 0.9866666666666667
User 47248 AUC after training: 0.9866666666666667
User 47248 does not improve AUC. Reverting changes.
Training on augumented user 60963 11/50 current_auc = 0.9866666666666667
User 60963 AUC after training: 0.9866666666666667
User 60963 does not improve AUC. Reverting changes.
Training on augumented user 107954 12/50 current_auc = 0.9866666666666667
User 107954 AUC after training: 0.9866666666666667
User 107954 does not improve AUC. Reverting changes.
Training on augumented user 132190 13/50 current_auc = 0.9866666666666667
User 132190 AUC after training: 0.9866666666666667
User 132190 does not improve AUC. Reverting changes.
Training on augumented user 133675 14/50 current_auc = 0.9866666666666667
User 133675 AUC after training: 0.9866666666666667
User 133675 does not improve AUC. Reverting changes.
Training on augumented user 271 15/50 current_auc = 0.9866666666666667
User 271 AUC after training: 0.9866666666666667
User 271 does not improve AUC. Reverting changes.
Training on augumented user 44823 16/50 current_auc = 0.9866666666666667
User 44823 AUC after training: 0.9866666666666667
User 44823 does not improve AUC. Reverting changes.
Training on augumented user 29336 17/50 current_auc = 0.9866666666666667
User 29336 AUC after training: 0.9866666666666667
User 29336 does not improve AUC. Reverting changes.
Training on augumented user 123937 18/50 current_auc = 0.9866666666666667
User 123937 AUC after training: 0.9866666666666667
User 123937 does not improve AUC. Reverting changes.
Training on augumented user 82099 19/50 current_auc = 0.9866666666666667
User 82099 AUC after training: 0.9866666666666667
User 82099 does not improve AUC. Reverting changes.
Training on augumented user 103367 20/50 current_auc = 0.9866666666666667
User 103367 AUC after training: 0.9866666666666667
User 103367 does not improve AUC. Reverting changes.
Training on augumented user 103591 21/50 current_auc = 0.9866666666666667
User 103591 AUC after training: 0.9866666666666667
User 103591 does not improve AUC. Reverting changes.
Training on augumented user 35498 22/50 current_auc = 0.9866666666666667
User 35498 AUC after training: 0.9866666666666667
User 35498 does not improve AUC. Reverting changes.
Training on augumented user 52193 23/50 current_auc = 0.9866666666666667
User 52193 AUC after training: 0.9866666666666667
User 52193 does not improve AUC. Reverting changes.
Training on augumented user 60067 24/50 current_auc = 0.9866666666666667
User 60067 AUC after training: 0.9866666666666667
User 60067 does not improve AUC. Reverting changes.
Training on augumented user 138429 25/50 current_auc = 0.9866666666666667
User 138429 AUC after training: 0.9866666666666667
User 138429 does not improve AUC. Reverting changes.
Training on augumented user 48593 26/50 current_auc = 0.9866666666666667
User 48593 AUC after training: 0.9866666666666667
User 48593 does not improve AUC. Reverting changes.
Training on augumented user 78988 27/50 current_auc = 0.9866666666666667
User 78988 AUC after training: 0.9866666666666667
User 78988 does not improve AUC. Reverting changes.
Training on augumented user 84768 28/50 current_auc = 0.9866666666666667
User 84768 AUC after training: 0.9866666666666667
User 84768 does not improve AUC. Reverting changes.
Training on augumented user 43967 29/50 current_auc = 0.9866666666666667
User 43967 AUC after training: 0.9866666666666667
User 43967 does not improve AUC. Reverting changes.
Training on augumented user 21302 30/50 current_auc = 0.9866666666666667
User 21302 AUC after training: 0.9866666666666667
User 21302 does not improve AUC. Reverting changes.
Training on augumented user 17485 31/50 current_auc = 0.9866666666666667
User 17485 AUC after training: 0.9866666666666667
User 17485 does not improve AUC. Reverting changes.
Training on augumented user 51444 32/50 current_auc = 0.9866666666666667
User 51444 AUC after training: 0.9866666666666667
User 51444 does not improve AUC. Reverting changes.
Training on augumented user 7257 33/50 current_auc = 0.9866666666666667
User 7257 AUC after training: 0.9866666666666667
User 7257 does not improve AUC. Reverting changes.
Training on augumented user 53699 34/50 current_auc = 0.9866666666666667
User 53699 AUC after training: 0.9866666666666667
User 53699 does not improve AUC. Reverting changes.
Training on augumented user 13937 35/50 current_auc = 0.9866666666666667
User 13937 AUC after training: 0.9866666666666667
User 13937 does not improve AUC. Reverting changes.
Training on augumented user 1358 36/50 current_auc = 0.9866666666666667
User 1358 AUC after training: 0.9866666666666667
User 1358 does not improve AUC. Reverting changes.
Training on augumented user 35341 37/50 current_auc = 0.9866666666666667
User 35341 AUC after training: 0.9866666666666667
User 35341 does not improve AUC. Reverting changes.
Training on augumented user 16467 38/50 current_auc = 0.9866666666666667
User 16467 AUC after training: 0.9866666666666667
User 16467 does not improve AUC. Reverting changes.
Training on augumented user 91581 39/50 current_auc = 0.9866666666666667
User 91581 AUC after training: 0.9866666666666667
User 91581 does not improve AUC. Reverting changes.
Training on augumented user 47148 40/50 current_auc = 0.9866666666666667
User 47148 AUC after training: 0.9866666666666667
User 47148 does not improve AUC. Reverting changes.
Training on augumented user 6396 41/50 current_auc = 0.9866666666666667
User 6396 AUC after training: 0.9866666666666667
User 6396 does not improve AUC. Reverting changes.
Training on augumented user 127305 42/50 current_auc = 0.9866666666666667
User 127305 AUC after training: 0.9866666666666667
User 127305 does not improve AUC. Reverting changes.
Training on augumented user 48648 43/50 current_auc = 0.9866666666666667
User 48648 AUC after training: 0.9866666666666667
User 48648 does not improve AUC. Reverting changes.
Training on augumented user 93518 44/50 current_auc = 0.9866666666666667
User 93518 AUC after training: 0.9866666666666667
User 93518 does not improve AUC. Reverting changes.
Training on augumented user 103788 45/50 current_auc = 0.9866666666666667
User 103788 AUC after training: 0.9866666666666667
User 103788 does not improve AUC. Reverting changes.
Training on augumented user 62572 46/50 current_auc = 0.9866666666666667
User 62572 AUC after training: 0.9866666666666667
User 62572 does not improve AUC. Reverting changes.
Training on augumented user 109466 47/50 current_auc = 0.9866666666666667
User 109466 AUC after training: 0.9866666666666667
User 109466 does not improve AUC. Reverting changes.
Training on augumented user 48646 48/50 current_auc = 0.9866666666666667
User 48646 AUC after training: 0.9866666666666667
User 48646 does not improve AUC. Reverting changes.
Training on augumented user 39210 49/50 current_auc = 0.9866666666666667
User 39210 AUC after training: 0.9866666666666667
User 39210 does not improve AUC. Reverting changes.
[2024-12-02 17:54:22.956478] start test user 124493 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:23.402706] start test user 124493 31/567 recall augumented users by random, augumented_users = [36396, 109591, 76806, 127638, 85203, 129429, 40084, 18115, 33011, 133376, 14013, 28570, 100347, 135393, 46114, 93678, 73677, 54768, 109862, 71663, 131332, 46460, 62734, 120752, 9181, 121519, 11861, 97656, 128790, 79712, 74321, 98918, 109036, 50414, 114604, 74190, 108579, 121173, 44325, 104808, 121252, 9503, 94749, 86142, 70658, 12864, 32583, 58910, 118052, 110997]
[2024-12-02 17:54:23.417628] user = 124493 Cloud 31/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:54:23.428502] user = 124493 Local 31/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:54:23.476126] user = 124493 Local+ 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:54:25.138116] user = 124493 MPDA- 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 36396 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36396 AUC after training: 0.5
User 36396 does not improve AUC. Reverting changes.
Training on augumented user 109591 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109591 AUC after training: 0.5
User 109591 does not improve AUC. Reverting changes.
Training on augumented user 76806 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76806 AUC after training: 0.5
User 76806 does not improve AUC. Reverting changes.
Training on augumented user 127638 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127638 AUC after training: 0.5
User 127638 does not improve AUC. Reverting changes.
Training on augumented user 85203 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85203 AUC after training: 0.5
User 85203 does not improve AUC. Reverting changes.
Training on augumented user 129429 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129429 AUC after training: 0.5
User 129429 does not improve AUC. Reverting changes.
Training on augumented user 40084 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40084 AUC after training: 0.5
User 40084 does not improve AUC. Reverting changes.
Training on augumented user 18115 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18115 AUC after training: 0.5
User 18115 does not improve AUC. Reverting changes.
Training on augumented user 33011 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33011 AUC after training: 0.5
User 33011 does not improve AUC. Reverting changes.
Training on augumented user 133376 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133376 AUC after training: 0.5
User 133376 does not improve AUC. Reverting changes.
Training on augumented user 14013 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14013 AUC after training: 0.5
User 14013 does not improve AUC. Reverting changes.
Training on augumented user 28570 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28570 AUC after training: 0.5
User 28570 does not improve AUC. Reverting changes.
Training on augumented user 100347 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100347 AUC after training: 0.5
User 100347 does not improve AUC. Reverting changes.
Training on augumented user 135393 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135393 AUC after training: 0.5
User 135393 does not improve AUC. Reverting changes.
Training on augumented user 46114 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46114 AUC after training: 0.5
User 46114 does not improve AUC. Reverting changes.
Training on augumented user 93678 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93678 AUC after training: 0.5
User 93678 does not improve AUC. Reverting changes.
Training on augumented user 73677 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73677 AUC after training: 0.5
User 73677 does not improve AUC. Reverting changes.
Training on augumented user 54768 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54768 AUC after training: 0.5
User 54768 does not improve AUC. Reverting changes.
Training on augumented user 109862 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109862 AUC after training: 0.5
User 109862 does not improve AUC. Reverting changes.
Training on augumented user 71663 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71663 AUC after training: 0.5
User 71663 does not improve AUC. Reverting changes.
Training on augumented user 131332 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131332 AUC after training: 0.5
User 131332 does not improve AUC. Reverting changes.
Training on augumented user 46460 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46460 AUC after training: 0.5
User 46460 does not improve AUC. Reverting changes.
Training on augumented user 62734 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62734 AUC after training: 0.5
User 62734 does not improve AUC. Reverting changes.
Training on augumented user 120752 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120752 AUC after training: 0.5
User 120752 does not improve AUC. Reverting changes.
Training on augumented user 9181 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9181 AUC after training: 0.5
User 9181 does not improve AUC. Reverting changes.
Training on augumented user 121519 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121519 AUC after training: 0.5
User 121519 does not improve AUC. Reverting changes.
Training on augumented user 11861 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11861 AUC after training: 0.5
User 11861 does not improve AUC. Reverting changes.
Training on augumented user 97656 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97656 AUC after training: 0.5
User 97656 does not improve AUC. Reverting changes.
Training on augumented user 128790 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128790 AUC after training: 0.5
User 128790 does not improve AUC. Reverting changes.
Training on augumented user 79712 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79712 AUC after training: 0.5
User 79712 does not improve AUC. Reverting changes.
Training on augumented user 74321 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74321 AUC after training: 0.5
User 74321 does not improve AUC. Reverting changes.
Training on augumented user 98918 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98918 AUC after training: 0.5
User 98918 does not improve AUC. Reverting changes.
Training on augumented user 109036 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109036 AUC after training: 0.5
User 109036 does not improve AUC. Reverting changes.
Training on augumented user 50414 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50414 AUC after training: 0.5
User 50414 does not improve AUC. Reverting changes.
Training on augumented user 114604 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114604 AUC after training: 0.5
User 114604 does not improve AUC. Reverting changes.
Training on augumented user 74190 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74190 AUC after training: 0.5
User 74190 does not improve AUC. Reverting changes.
Training on augumented user 108579 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108579 AUC after training: 0.5
User 108579 does not improve AUC. Reverting changes.
Training on augumented user 121173 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121173 AUC after training: 0.5
User 121173 does not improve AUC. Reverting changes.
Training on augumented user 44325 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44325 AUC after training: 0.5
User 44325 does not improve AUC. Reverting changes.
Training on augumented user 104808 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104808 AUC after training: 0.5
User 104808 does not improve AUC. Reverting changes.
Training on augumented user 121252 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121252 AUC after training: 0.5
User 121252 does not improve AUC. Reverting changes.
Training on augumented user 9503 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9503 AUC after training: 0.5
User 9503 does not improve AUC. Reverting changes.
Training on augumented user 94749 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94749 AUC after training: 0.5
User 94749 does not improve AUC. Reverting changes.
Training on augumented user 86142 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86142 AUC after training: 0.5
User 86142 does not improve AUC. Reverting changes.
Training on augumented user 70658 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70658 AUC after training: 0.5
User 70658 does not improve AUC. Reverting changes.
Training on augumented user 12864 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12864 AUC after training: 0.5
User 12864 does not improve AUC. Reverting changes.
Training on augumented user 32583 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32583 AUC after training: 0.5
User 32583 does not improve AUC. Reverting changes.
Training on augumented user 58910 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58910 AUC after training: 0.5
User 58910 does not improve AUC. Reverting changes.
Training on augumented user 118052 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118052 AUC after training: 0.5
User 118052 does not improve AUC. Reverting changes.
Training on augumented user 110997 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110997 AUC after training: 0.5
User 110997 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:54:57.644097] start test user 124498 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:58.679646] start test user 124498 32/567 recall augumented users by random, augumented_users = [17134, 85278, 115220, 122995, 105567, 117670, 108271, 15428, 106610, 73824, 109189, 61376, 22772, 113237, 107682, 65257, 113846, 4445, 137143, 23456, 31023, 115924, 79330, 61128, 66478, 93261, 42676, 104037, 8984, 103652, 44192, 66840, 133677, 119150, 112501, 4809, 22630, 31862, 87301, 59454, 133876, 72573, 106238, 44401, 23705, 4694, 135088, 70903, 46105, 121276]
[2024-12-02 17:54:58.697373] user = 124498 Cloud 32/567
[2024-12-02 17:54:58.721450] user = 124498 Local 32/567
[2024-12-02 17:54:58.797366] user = 124498 Local+ 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:02.428670] user = 124498 MPDA- 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5173611111111112
Training on augumented user 17134 0/50 current_auc = 0.5173611111111112
User 17134 AUC after training: 0.5182291666666666
User 17134 improves AUC. Keeping the model.
Training on augumented user 85278 1/50 current_auc = 0.5182291666666666
User 85278 AUC after training: 0.5182291666666665
User 85278 does not improve AUC. Reverting changes.
Training on augumented user 115220 2/50 current_auc = 0.5182291666666666
User 115220 AUC after training: 0.5190972222222222
User 115220 improves AUC. Keeping the model.
Training on augumented user 122995 3/50 current_auc = 0.5190972222222222
User 122995 AUC after training: 0.5173611111111112
User 122995 does not improve AUC. Reverting changes.
Training on augumented user 105567 4/50 current_auc = 0.5190972222222222
User 105567 AUC after training: 0.5208333333333333
User 105567 improves AUC. Keeping the model.
Training on augumented user 117670 5/50 current_auc = 0.5208333333333333
User 117670 AUC after training: 0.5208333333333333
User 117670 does not improve AUC. Reverting changes.
Training on augumented user 108271 6/50 current_auc = 0.5208333333333333
User 108271 AUC after training: 0.5182291666666667
User 108271 does not improve AUC. Reverting changes.
Training on augumented user 15428 7/50 current_auc = 0.5208333333333333
User 15428 AUC after training: 0.5190972222222222
User 15428 does not improve AUC. Reverting changes.
Training on augumented user 106610 8/50 current_auc = 0.5208333333333333
User 106610 AUC after training: 0.5190972222222222
User 106610 does not improve AUC. Reverting changes.
Training on augumented user 73824 9/50 current_auc = 0.5208333333333333
User 73824 AUC after training: 0.5190972222222223
User 73824 does not improve AUC. Reverting changes.
Training on augumented user 109189 10/50 current_auc = 0.5208333333333333
User 109189 AUC after training: 0.5190972222222222
User 109189 does not improve AUC. Reverting changes.
Training on augumented user 61376 11/50 current_auc = 0.5208333333333333
User 61376 AUC after training: 0.5199652777777778
User 61376 does not improve AUC. Reverting changes.
Training on augumented user 22772 12/50 current_auc = 0.5208333333333333
User 22772 AUC after training: 0.5208333333333333
User 22772 does not improve AUC. Reverting changes.
Training on augumented user 113237 13/50 current_auc = 0.5208333333333333
User 113237 AUC after training: 0.5190972222222223
User 113237 does not improve AUC. Reverting changes.
Training on augumented user 107682 14/50 current_auc = 0.5208333333333333
User 107682 AUC after training: 0.5208333333333333
User 107682 does not improve AUC. Reverting changes.
Training on augumented user 65257 15/50 current_auc = 0.5208333333333333
User 65257 AUC after training: 0.5190972222222221
User 65257 does not improve AUC. Reverting changes.
Training on augumented user 113846 16/50 current_auc = 0.5208333333333333
User 113846 AUC after training: 0.5225694444444444
User 113846 improves AUC. Keeping the model.
Training on augumented user 4445 17/50 current_auc = 0.5225694444444444
User 4445 AUC after training: 0.5234375
User 4445 improves AUC. Keeping the model.
Training on augumented user 137143 18/50 current_auc = 0.5234375
User 137143 AUC after training: 0.5217013888888888
User 137143 does not improve AUC. Reverting changes.
Training on augumented user 23456 19/50 current_auc = 0.5234375
User 23456 AUC after training: 0.5217013888888888
User 23456 does not improve AUC. Reverting changes.
Training on augumented user 31023 20/50 current_auc = 0.5234375
User 31023 AUC after training: 0.5234375
User 31023 does not improve AUC. Reverting changes.
Training on augumented user 115924 21/50 current_auc = 0.5234375
User 115924 AUC after training: 0.5225694444444444
User 115924 does not improve AUC. Reverting changes.
Training on augumented user 79330 22/50 current_auc = 0.5234375
User 79330 AUC after training: 0.5234375
User 79330 does not improve AUC. Reverting changes.
Training on augumented user 61128 23/50 current_auc = 0.5234375
User 61128 AUC after training: 0.5225694444444444
User 61128 does not improve AUC. Reverting changes.
Training on augumented user 66478 24/50 current_auc = 0.5234375
User 66478 AUC after training: 0.5234375
User 66478 does not improve AUC. Reverting changes.
Training on augumented user 93261 25/50 current_auc = 0.5234375
User 93261 AUC after training: 0.5234375
User 93261 does not improve AUC. Reverting changes.
Training on augumented user 42676 26/50 current_auc = 0.5234375
User 42676 AUC after training: 0.5234375
User 42676 does not improve AUC. Reverting changes.
Training on augumented user 104037 27/50 current_auc = 0.5234375
User 104037 AUC after training: 0.5217013888888888
User 104037 does not improve AUC. Reverting changes.
Training on augumented user 8984 28/50 current_auc = 0.5234375
User 8984 AUC after training: 0.5225694444444444
User 8984 does not improve AUC. Reverting changes.
Training on augumented user 103652 29/50 current_auc = 0.5234375
User 103652 AUC after training: 0.5199652777777777
User 103652 does not improve AUC. Reverting changes.
Training on augumented user 44192 30/50 current_auc = 0.5234375
User 44192 AUC after training: 0.5225694444444444
User 44192 does not improve AUC. Reverting changes.
Training on augumented user 66840 31/50 current_auc = 0.5234375
User 66840 AUC after training: 0.5234375
User 66840 does not improve AUC. Reverting changes.
Training on augumented user 133677 32/50 current_auc = 0.5234375
User 133677 AUC after training: 0.5234375
User 133677 does not improve AUC. Reverting changes.
Training on augumented user 119150 33/50 current_auc = 0.5234375
User 119150 AUC after training: 0.5225694444444444
User 119150 does not improve AUC. Reverting changes.
Training on augumented user 112501 34/50 current_auc = 0.5234375
User 112501 AUC after training: 0.5234375
User 112501 does not improve AUC. Reverting changes.
Training on augumented user 4809 35/50 current_auc = 0.5234375
User 4809 AUC after training: 0.5234375
User 4809 does not improve AUC. Reverting changes.
Training on augumented user 22630 36/50 current_auc = 0.5234375
User 22630 AUC after training: 0.5225694444444444
User 22630 does not improve AUC. Reverting changes.
Training on augumented user 31862 37/50 current_auc = 0.5234375
User 31862 AUC after training: 0.5234375
User 31862 does not improve AUC. Reverting changes.
Training on augumented user 87301 38/50 current_auc = 0.5234375
User 87301 AUC after training: 0.5208333333333334
User 87301 does not improve AUC. Reverting changes.
Training on augumented user 59454 39/50 current_auc = 0.5234375
User 59454 AUC after training: 0.5225694444444444
User 59454 does not improve AUC. Reverting changes.
Training on augumented user 133876 40/50 current_auc = 0.5234375
User 133876 AUC after training: 0.5217013888888888
User 133876 does not improve AUC. Reverting changes.
Training on augumented user 72573 41/50 current_auc = 0.5234375
User 72573 AUC after training: 0.5225694444444444
User 72573 does not improve AUC. Reverting changes.
Training on augumented user 106238 42/50 current_auc = 0.5234375
User 106238 AUC after training: 0.5234375
User 106238 does not improve AUC. Reverting changes.
Training on augumented user 44401 43/50 current_auc = 0.5234375
User 44401 AUC after training: 0.5225694444444444
User 44401 does not improve AUC. Reverting changes.
Training on augumented user 23705 44/50 current_auc = 0.5234375
User 23705 AUC after training: 0.5243055555555556
User 23705 improves AUC. Keeping the model.
Training on augumented user 4694 45/50 current_auc = 0.5243055555555556
User 4694 AUC after training: 0.5234375
User 4694 does not improve AUC. Reverting changes.
Training on augumented user 135088 46/50 current_auc = 0.5243055555555556
User 135088 AUC after training: 0.5243055555555556
User 135088 does not improve AUC. Reverting changes.
Training on augumented user 70903 47/50 current_auc = 0.5243055555555556
User 70903 AUC after training: 0.5234375
User 70903 does not improve AUC. Reverting changes.
Training on augumented user 46105 48/50 current_auc = 0.5243055555555556
User 46105 AUC after training: 0.5234375
User 46105 does not improve AUC. Reverting changes.
Training on augumented user 121276 49/50 current_auc = 0.5243055555555556
User 121276 AUC after training: 0.5243055555555556
User 121276 does not improve AUC. Reverting changes.
[2024-12-02 17:55:32.633722] start test user 124591 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:33.088445] start test user 124591 33/567 recall augumented users by random, augumented_users = [107888, 8954, 21409, 79192, 79026, 17363, 24736, 127600, 130965, 85272, 112076, 50375, 34771, 7718, 118301, 45772, 52892, 74031, 30717, 19183, 44874, 39086, 62993, 135315, 91625, 23871, 21962, 77317, 41987, 93219, 90379, 14633, 134229, 59608, 107631, 56518, 136368, 67994, 130567, 73664, 60832, 33634, 118970, 113454, 119538, 1290, 10517, 24514, 113437, 128978]
[2024-12-02 17:55:33.102342] user = 124591 Cloud 33/567
[2024-12-02 17:55:33.117023] user = 124591 Local 33/567
[2024-12-02 17:55:33.171704] user = 124591 Local+ 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:35.336024] user = 124591 MPDA- 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7496479864826809
Training on augumented user 107888 0/50 current_auc = 0.7496479864826809
User 107888 AUC after training: 0.7504928189242467
User 107888 improves AUC. Keeping the model.
Training on augumented user 8954 1/50 current_auc = 0.7504928189242467
User 8954 AUC after training: 0.7499295972965362
User 8954 does not improve AUC. Reverting changes.
Training on augumented user 21409 2/50 current_auc = 0.7504928189242467
User 21409 AUC after training: 0.7504928189242467
User 21409 does not improve AUC. Reverting changes.
Training on augumented user 79192 3/50 current_auc = 0.7504928189242467
User 79192 AUC after training: 0.7496479864826809
User 79192 does not improve AUC. Reverting changes.
Training on augumented user 79026 4/50 current_auc = 0.7504928189242467
User 79026 AUC after training: 0.7504928189242467
User 79026 does not improve AUC. Reverting changes.
Training on augumented user 17363 5/50 current_auc = 0.7504928189242467
User 17363 AUC after training: 0.7507744297381019
User 17363 improves AUC. Keeping the model.
Training on augumented user 24736 6/50 current_auc = 0.7507744297381019
User 24736 AUC after training: 0.7507744297381019
User 24736 does not improve AUC. Reverting changes.
Training on augumented user 127600 7/50 current_auc = 0.7507744297381019
User 127600 AUC after training: 0.7502112081103914
User 127600 does not improve AUC. Reverting changes.
Training on augumented user 130965 8/50 current_auc = 0.7507744297381019
User 130965 AUC after training: 0.7504928189242467
User 130965 does not improve AUC. Reverting changes.
Training on augumented user 85272 9/50 current_auc = 0.7507744297381019
User 85272 AUC after training: 0.7504928189242467
User 85272 does not improve AUC. Reverting changes.
Training on augumented user 112076 10/50 current_auc = 0.7507744297381019
User 112076 AUC after training: 0.7502112081103914
User 112076 does not improve AUC. Reverting changes.
Training on augumented user 50375 11/50 current_auc = 0.7507744297381019
User 50375 AUC after training: 0.7504928189242467
User 50375 does not improve AUC. Reverting changes.
Training on augumented user 34771 12/50 current_auc = 0.7507744297381019
User 34771 AUC after training: 0.7502112081103914
User 34771 does not improve AUC. Reverting changes.
Training on augumented user 7718 13/50 current_auc = 0.7507744297381019
User 7718 AUC after training: 0.7502112081103914
User 7718 does not improve AUC. Reverting changes.
Training on augumented user 118301 14/50 current_auc = 0.7507744297381019
User 118301 AUC after training: 0.7496479864826809
User 118301 does not improve AUC. Reverting changes.
Training on augumented user 45772 15/50 current_auc = 0.7507744297381019
User 45772 AUC after training: 0.7504928189242467
User 45772 does not improve AUC. Reverting changes.
Training on augumented user 52892 16/50 current_auc = 0.7507744297381019
User 52892 AUC after training: 0.7507744297381019
User 52892 does not improve AUC. Reverting changes.
Training on augumented user 74031 17/50 current_auc = 0.7507744297381019
User 74031 AUC after training: 0.7502112081103914
User 74031 does not improve AUC. Reverting changes.
Training on augumented user 30717 18/50 current_auc = 0.7507744297381019
User 30717 AUC after training: 0.7502112081103914
User 30717 does not improve AUC. Reverting changes.
Training on augumented user 19183 19/50 current_auc = 0.7507744297381019
User 19183 AUC after training: 0.7507744297381019
User 19183 does not improve AUC. Reverting changes.
Training on augumented user 44874 20/50 current_auc = 0.7507744297381019
User 44874 AUC after training: 0.7502112081103914
User 44874 does not improve AUC. Reverting changes.
Training on augumented user 39086 21/50 current_auc = 0.7507744297381019
User 39086 AUC after training: 0.7502112081103914
User 39086 does not improve AUC. Reverting changes.
Training on augumented user 62993 22/50 current_auc = 0.7507744297381019
User 62993 AUC after training: 0.7507744297381019
User 62993 does not improve AUC. Reverting changes.
Training on augumented user 135315 23/50 current_auc = 0.7507744297381019
User 135315 AUC after training: 0.7499295972965362
User 135315 does not improve AUC. Reverting changes.
Training on augumented user 91625 24/50 current_auc = 0.7507744297381019
User 91625 AUC after training: 0.7499295972965362
User 91625 does not improve AUC. Reverting changes.
Training on augumented user 23871 25/50 current_auc = 0.7507744297381019
User 23871 AUC after training: 0.7502112081103914
User 23871 does not improve AUC. Reverting changes.
Training on augumented user 21962 26/50 current_auc = 0.7507744297381019
User 21962 AUC after training: 0.7504928189242467
User 21962 does not improve AUC. Reverting changes.
Training on augumented user 77317 27/50 current_auc = 0.7507744297381019
User 77317 AUC after training: 0.7504928189242467
User 77317 does not improve AUC. Reverting changes.
Training on augumented user 41987 28/50 current_auc = 0.7507744297381019
User 41987 AUC after training: 0.7504928189242467
User 41987 does not improve AUC. Reverting changes.
Training on augumented user 93219 29/50 current_auc = 0.7507744297381019
User 93219 AUC after training: 0.7519008729935229
User 93219 improves AUC. Keeping the model.
Training on augumented user 90379 30/50 current_auc = 0.7519008729935229
User 90379 AUC after training: 0.751900872993523
User 90379 improves AUC. Keeping the model.
Training on augumented user 14633 31/50 current_auc = 0.751900872993523
User 14633 AUC after training: 0.7510560405519572
User 14633 does not improve AUC. Reverting changes.
Training on augumented user 134229 32/50 current_auc = 0.751900872993523
User 134229 AUC after training: 0.7504928189242467
User 134229 does not improve AUC. Reverting changes.
Training on augumented user 59608 33/50 current_auc = 0.751900872993523
User 59608 AUC after training: 0.7510560405519572
User 59608 does not improve AUC. Reverting changes.
Training on augumented user 107631 34/50 current_auc = 0.751900872993523
User 107631 AUC after training: 0.7521824838073783
User 107631 improves AUC. Keeping the model.
Training on augumented user 56518 35/50 current_auc = 0.7521824838073783
User 56518 AUC after training: 0.7519008729935229
User 56518 does not improve AUC. Reverting changes.
Training on augumented user 136368 36/50 current_auc = 0.7521824838073783
User 136368 AUC after training: 0.7524640946212335
User 136368 improves AUC. Keeping the model.
Training on augumented user 67994 37/50 current_auc = 0.7524640946212335
User 67994 AUC after training: 0.7519008729935229
User 67994 does not improve AUC. Reverting changes.
Training on augumented user 130567 38/50 current_auc = 0.7524640946212335
User 130567 AUC after training: 0.7521824838073782
User 130567 does not improve AUC. Reverting changes.
Training on augumented user 73664 39/50 current_auc = 0.7524640946212335
User 73664 AUC after training: 0.7524640946212335
User 73664 does not improve AUC. Reverting changes.
Training on augumented user 60832 40/50 current_auc = 0.7524640946212335
User 60832 AUC after training: 0.7521824838073783
User 60832 does not improve AUC. Reverting changes.
Training on augumented user 33634 41/50 current_auc = 0.7524640946212335
User 33634 AUC after training: 0.7510560405519572
User 33634 does not improve AUC. Reverting changes.
Training on augumented user 118970 42/50 current_auc = 0.7524640946212335
User 118970 AUC after training: 0.7521824838073783
User 118970 does not improve AUC. Reverting changes.
Training on augumented user 113454 43/50 current_auc = 0.7524640946212335
User 113454 AUC after training: 0.7521824838073782
User 113454 does not improve AUC. Reverting changes.
Training on augumented user 119538 44/50 current_auc = 0.7524640946212335
User 119538 AUC after training: 0.7524640946212335
User 119538 does not improve AUC. Reverting changes.
Training on augumented user 1290 45/50 current_auc = 0.7524640946212335
User 1290 AUC after training: 0.7504928189242467
User 1290 does not improve AUC. Reverting changes.
Training on augumented user 10517 46/50 current_auc = 0.7524640946212335
User 10517 AUC after training: 0.751900872993523
User 10517 does not improve AUC. Reverting changes.
Training on augumented user 24514 47/50 current_auc = 0.7524640946212335
User 24514 AUC after training: 0.7516192621796677
User 24514 does not improve AUC. Reverting changes.
Training on augumented user 113437 48/50 current_auc = 0.7524640946212335
User 113437 AUC after training: 0.7519008729935229
User 113437 does not improve AUC. Reverting changes.
Training on augumented user 128978 49/50 current_auc = 0.7524640946212335
User 128978 AUC after training: 0.7510560405519572
User 128978 does not improve AUC. Reverting changes.
[2024-12-02 17:56:03.503383] start test user 124741 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:03.917383] start test user 124741 34/567 recall augumented users by random, augumented_users = [128578, 29078, 126988, 50540, 65554, 31182, 86086, 36874, 123638, 111391, 101356, 47650, 133898, 41887, 99180, 25434, 125470, 135519, 22504, 126066, 27083, 125670, 93508, 120571, 25044, 8004, 52198, 98855, 47292, 22024, 67136, 116633, 44929, 116385, 14397, 76776, 137650, 92280, 117952, 68842, 64869, 15330, 90295, 87845, 124523, 971, 25039, 8847, 95963, 62560]
[2024-12-02 17:56:03.932229] user = 124741 Cloud 34/567
[2024-12-02 17:56:03.945677] user = 124741 Local 34/567
[2024-12-02 17:56:03.977712] user = 124741 Local+ 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:07.028159] user = 124741 MPDA- 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 128578 0/50 current_auc = 0.5
User 128578 AUC after training: 0.5
User 128578 does not improve AUC. Reverting changes.
Training on augumented user 29078 1/50 current_auc = 0.5
User 29078 AUC after training: 0.5
User 29078 does not improve AUC. Reverting changes.
Training on augumented user 126988 2/50 current_auc = 0.5
User 126988 AUC after training: 0.5
User 126988 does not improve AUC. Reverting changes.
Training on augumented user 50540 3/50 current_auc = 0.5
User 50540 AUC after training: 0.5
User 50540 does not improve AUC. Reverting changes.
Training on augumented user 65554 4/50 current_auc = 0.5
User 65554 AUC after training: 0.5
User 65554 does not improve AUC. Reverting changes.
Training on augumented user 31182 5/50 current_auc = 0.5
User 31182 AUC after training: 0.5
User 31182 does not improve AUC. Reverting changes.
Training on augumented user 86086 6/50 current_auc = 0.5
User 86086 AUC after training: 0.5
User 86086 does not improve AUC. Reverting changes.
Training on augumented user 36874 7/50 current_auc = 0.5
User 36874 AUC after training: 0.5
User 36874 does not improve AUC. Reverting changes.
Training on augumented user 123638 8/50 current_auc = 0.5
User 123638 AUC after training: 0.5
User 123638 does not improve AUC. Reverting changes.
Training on augumented user 111391 9/50 current_auc = 0.5
User 111391 AUC after training: 0.5
User 111391 does not improve AUC. Reverting changes.
Training on augumented user 101356 10/50 current_auc = 0.5
User 101356 AUC after training: 0.5
User 101356 does not improve AUC. Reverting changes.
Training on augumented user 47650 11/50 current_auc = 0.5
User 47650 AUC after training: 0.5
User 47650 does not improve AUC. Reverting changes.
Training on augumented user 133898 12/50 current_auc = 0.5
User 133898 AUC after training: 0.5
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 41887 13/50 current_auc = 0.5
User 41887 AUC after training: 0.5
User 41887 does not improve AUC. Reverting changes.
Training on augumented user 99180 14/50 current_auc = 0.5
User 99180 AUC after training: 0.5
User 99180 does not improve AUC. Reverting changes.
Training on augumented user 25434 15/50 current_auc = 0.5
User 25434 AUC after training: 0.5
User 25434 does not improve AUC. Reverting changes.
Training on augumented user 125470 16/50 current_auc = 0.5
User 125470 AUC after training: 0.5
User 125470 does not improve AUC. Reverting changes.
Training on augumented user 135519 17/50 current_auc = 0.5
User 135519 AUC after training: 0.5
User 135519 does not improve AUC. Reverting changes.
Training on augumented user 22504 18/50 current_auc = 0.5
User 22504 AUC after training: 0.5
User 22504 does not improve AUC. Reverting changes.
Training on augumented user 126066 19/50 current_auc = 0.5
User 126066 AUC after training: 0.5
User 126066 does not improve AUC. Reverting changes.
Training on augumented user 27083 20/50 current_auc = 0.5
User 27083 AUC after training: 0.5
User 27083 does not improve AUC. Reverting changes.
Training on augumented user 125670 21/50 current_auc = 0.5
User 125670 AUC after training: 0.5
User 125670 does not improve AUC. Reverting changes.
Training on augumented user 93508 22/50 current_auc = 0.5
User 93508 AUC after training: 0.5
User 93508 does not improve AUC. Reverting changes.
Training on augumented user 120571 23/50 current_auc = 0.5
User 120571 AUC after training: 0.5
User 120571 does not improve AUC. Reverting changes.
Training on augumented user 25044 24/50 current_auc = 0.5
User 25044 AUC after training: 0.5
User 25044 does not improve AUC. Reverting changes.
Training on augumented user 8004 25/50 current_auc = 0.5
User 8004 AUC after training: 0.5
User 8004 does not improve AUC. Reverting changes.
Training on augumented user 52198 26/50 current_auc = 0.5
User 52198 AUC after training: 0.5
User 52198 does not improve AUC. Reverting changes.
Training on augumented user 98855 27/50 current_auc = 0.5
User 98855 AUC after training: 0.5
User 98855 does not improve AUC. Reverting changes.
Training on augumented user 47292 28/50 current_auc = 0.5
User 47292 AUC after training: 0.5
User 47292 does not improve AUC. Reverting changes.
Training on augumented user 22024 29/50 current_auc = 0.5
User 22024 AUC after training: 0.5
User 22024 does not improve AUC. Reverting changes.
Training on augumented user 67136 30/50 current_auc = 0.5
User 67136 AUC after training: 0.5
User 67136 does not improve AUC. Reverting changes.
Training on augumented user 116633 31/50 current_auc = 0.5
User 116633 AUC after training: 0.5
User 116633 does not improve AUC. Reverting changes.
Training on augumented user 44929 32/50 current_auc = 0.5
User 44929 AUC after training: 0.5
User 44929 does not improve AUC. Reverting changes.
Training on augumented user 116385 33/50 current_auc = 0.5
User 116385 AUC after training: 0.5
User 116385 does not improve AUC. Reverting changes.
Training on augumented user 14397 34/50 current_auc = 0.5
User 14397 AUC after training: 0.5
User 14397 does not improve AUC. Reverting changes.
Training on augumented user 76776 35/50 current_auc = 0.5
User 76776 AUC after training: 0.5
User 76776 does not improve AUC. Reverting changes.
Training on augumented user 137650 36/50 current_auc = 0.5
User 137650 AUC after training: 0.5
User 137650 does not improve AUC. Reverting changes.
Training on augumented user 92280 37/50 current_auc = 0.5
User 92280 AUC after training: 0.5
User 92280 does not improve AUC. Reverting changes.
Training on augumented user 117952 38/50 current_auc = 0.5
User 117952 AUC after training: 0.5
User 117952 does not improve AUC. Reverting changes.
Training on augumented user 68842 39/50 current_auc = 0.5
User 68842 AUC after training: 0.5
User 68842 does not improve AUC. Reverting changes.
Training on augumented user 64869 40/50 current_auc = 0.5
User 64869 AUC after training: 0.5
User 64869 does not improve AUC. Reverting changes.
Training on augumented user 15330 41/50 current_auc = 0.5
User 15330 AUC after training: 0.5
User 15330 does not improve AUC. Reverting changes.
Training on augumented user 90295 42/50 current_auc = 0.5
User 90295 AUC after training: 0.5
User 90295 does not improve AUC. Reverting changes.
Training on augumented user 87845 43/50 current_auc = 0.5
User 87845 AUC after training: 0.5
User 87845 does not improve AUC. Reverting changes.
Training on augumented user 124523 44/50 current_auc = 0.5
User 124523 AUC after training: 0.5
User 124523 does not improve AUC. Reverting changes.
Training on augumented user 971 45/50 current_auc = 0.5
User 971 AUC after training: 0.5
User 971 does not improve AUC. Reverting changes.
Training on augumented user 25039 46/50 current_auc = 0.5
User 25039 AUC after training: 0.5
User 25039 does not improve AUC. Reverting changes.
Training on augumented user 8847 47/50 current_auc = 0.5
User 8847 AUC after training: 0.5
User 8847 does not improve AUC. Reverting changes.
Training on augumented user 95963 48/50 current_auc = 0.5
User 95963 AUC after training: 0.5
User 95963 does not improve AUC. Reverting changes.
Training on augumented user 62560 49/50 current_auc = 0.5
User 62560 AUC after training: 0.5
User 62560 does not improve AUC. Reverting changes.
[2024-12-02 17:56:39.896843] start test user 124743 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:40.482342] start test user 124743 35/567 recall augumented users by random, augumented_users = [47265, 90054, 13435, 26787, 90911, 137570, 65338, 122902, 109716, 112300, 3923, 34605, 111413, 23418, 85216, 123579, 61408, 18103, 47440, 3432, 92711, 112800, 87659, 78180, 4433, 84826, 124796, 113620, 100872, 55707, 19167, 115970, 74808, 11937, 10201, 102279, 74801, 67666, 82344, 20460, 93783, 54022, 24258, 51397, 62365, 79182, 75015, 135792, 52093, 88793]
[2024-12-02 17:56:40.505532] user = 124743 Cloud 35/567
[2024-12-02 17:56:40.525228] user = 124743 Local 35/567
[2024-12-02 17:56:40.591295] user = 124743 Local+ 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:42.807006] user = 124743 MPDA- 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8583333333333334
Training on augumented user 47265 0/50 current_auc = 0.8583333333333334
User 47265 AUC after training: 0.85625
User 47265 does not improve AUC. Reverting changes.
Training on augumented user 90054 1/50 current_auc = 0.8583333333333334
User 90054 AUC after training: 0.8583333333333334
User 90054 does not improve AUC. Reverting changes.
Training on augumented user 13435 2/50 current_auc = 0.8583333333333334
User 13435 AUC after training: 0.8604166666666666
User 13435 improves AUC. Keeping the model.
Training on augumented user 26787 3/50 current_auc = 0.8604166666666666
User 26787 AUC after training: 0.8625
User 26787 improves AUC. Keeping the model.
Training on augumented user 90911 4/50 current_auc = 0.8625
User 90911 AUC after training: 0.8583333333333334
User 90911 does not improve AUC. Reverting changes.
Training on augumented user 137570 5/50 current_auc = 0.8625
User 137570 AUC after training: 0.8604166666666666
User 137570 does not improve AUC. Reverting changes.
Training on augumented user 65338 6/50 current_auc = 0.8625
User 65338 AUC after training: 0.8604166666666666
User 65338 does not improve AUC. Reverting changes.
Training on augumented user 122902 7/50 current_auc = 0.8625
User 122902 AUC after training: 0.8583333333333334
User 122902 does not improve AUC. Reverting changes.
Training on augumented user 109716 8/50 current_auc = 0.8625
User 109716 AUC after training: 0.8583333333333334
User 109716 does not improve AUC. Reverting changes.
Training on augumented user 112300 9/50 current_auc = 0.8625
User 112300 AUC after training: 0.8583333333333334
User 112300 does not improve AUC. Reverting changes.
Training on augumented user 3923 10/50 current_auc = 0.8625
User 3923 AUC after training: 0.8604166666666666
User 3923 does not improve AUC. Reverting changes.
Training on augumented user 34605 11/50 current_auc = 0.8625
User 34605 AUC after training: 0.8625
User 34605 does not improve AUC. Reverting changes.
Training on augumented user 111413 12/50 current_auc = 0.8625
User 111413 AUC after training: 0.8604166666666666
User 111413 does not improve AUC. Reverting changes.
Training on augumented user 23418 13/50 current_auc = 0.8625
User 23418 AUC after training: 0.8604166666666666
User 23418 does not improve AUC. Reverting changes.
Training on augumented user 85216 14/50 current_auc = 0.8625
User 85216 AUC after training: 0.85625
User 85216 does not improve AUC. Reverting changes.
Training on augumented user 123579 15/50 current_auc = 0.8625
User 123579 AUC after training: 0.8604166666666666
User 123579 does not improve AUC. Reverting changes.
Training on augumented user 61408 16/50 current_auc = 0.8625
User 61408 AUC after training: 0.8604166666666666
User 61408 does not improve AUC. Reverting changes.
Training on augumented user 18103 17/50 current_auc = 0.8625
User 18103 AUC after training: 0.8604166666666666
User 18103 does not improve AUC. Reverting changes.
Training on augumented user 47440 18/50 current_auc = 0.8625
User 47440 AUC after training: 0.8583333333333334
User 47440 does not improve AUC. Reverting changes.
Training on augumented user 3432 19/50 current_auc = 0.8625
User 3432 AUC after training: 0.8604166666666666
User 3432 does not improve AUC. Reverting changes.
Training on augumented user 92711 20/50 current_auc = 0.8625
User 92711 AUC after training: 0.8604166666666666
User 92711 does not improve AUC. Reverting changes.
Training on augumented user 112800 21/50 current_auc = 0.8625
User 112800 AUC after training: 0.8583333333333334
User 112800 does not improve AUC. Reverting changes.
Training on augumented user 87659 22/50 current_auc = 0.8625
User 87659 AUC after training: 0.8583333333333334
User 87659 does not improve AUC. Reverting changes.
Training on augumented user 78180 23/50 current_auc = 0.8625
User 78180 AUC after training: 0.8604166666666666
User 78180 does not improve AUC. Reverting changes.
Training on augumented user 4433 24/50 current_auc = 0.8625
User 4433 AUC after training: 0.8604166666666666
User 4433 does not improve AUC. Reverting changes.
Training on augumented user 84826 25/50 current_auc = 0.8625
User 84826 AUC after training: 0.8583333333333334
User 84826 does not improve AUC. Reverting changes.
Training on augumented user 124796 26/50 current_auc = 0.8625
User 124796 AUC after training: 0.8625
User 124796 does not improve AUC. Reverting changes.
Training on augumented user 113620 27/50 current_auc = 0.8625
User 113620 AUC after training: 0.8583333333333334
User 113620 does not improve AUC. Reverting changes.
Training on augumented user 100872 28/50 current_auc = 0.8625
User 100872 AUC after training: 0.85625
User 100872 does not improve AUC. Reverting changes.
Training on augumented user 55707 29/50 current_auc = 0.8625
User 55707 AUC after training: 0.85625
User 55707 does not improve AUC. Reverting changes.
Training on augumented user 19167 30/50 current_auc = 0.8625
User 19167 AUC after training: 0.85625
User 19167 does not improve AUC. Reverting changes.
Training on augumented user 115970 31/50 current_auc = 0.8625
User 115970 AUC after training: 0.8583333333333334
User 115970 does not improve AUC. Reverting changes.
Training on augumented user 74808 32/50 current_auc = 0.8625
User 74808 AUC after training: 0.8625
User 74808 does not improve AUC. Reverting changes.
Training on augumented user 11937 33/50 current_auc = 0.8625
User 11937 AUC after training: 0.8604166666666666
User 11937 does not improve AUC. Reverting changes.
Training on augumented user 10201 34/50 current_auc = 0.8625
User 10201 AUC after training: 0.8604166666666666
User 10201 does not improve AUC. Reverting changes.
Training on augumented user 102279 35/50 current_auc = 0.8625
User 102279 AUC after training: 0.8541666666666667
User 102279 does not improve AUC. Reverting changes.
Training on augumented user 74801 36/50 current_auc = 0.8625
User 74801 AUC after training: 0.85625
User 74801 does not improve AUC. Reverting changes.
Training on augumented user 67666 37/50 current_auc = 0.8625
User 67666 AUC after training: 0.8604166666666666
User 67666 does not improve AUC. Reverting changes.
Training on augumented user 82344 38/50 current_auc = 0.8625
User 82344 AUC after training: 0.8604166666666666
User 82344 does not improve AUC. Reverting changes.
Training on augumented user 20460 39/50 current_auc = 0.8625
User 20460 AUC after training: 0.85625
User 20460 does not improve AUC. Reverting changes.
Training on augumented user 93783 40/50 current_auc = 0.8625
User 93783 AUC after training: 0.8604166666666666
User 93783 does not improve AUC. Reverting changes.
Training on augumented user 54022 41/50 current_auc = 0.8625
User 54022 AUC after training: 0.8604166666666666
User 54022 does not improve AUC. Reverting changes.
Training on augumented user 24258 42/50 current_auc = 0.8625
User 24258 AUC after training: 0.85625
User 24258 does not improve AUC. Reverting changes.
Training on augumented user 51397 43/50 current_auc = 0.8625
User 51397 AUC after training: 0.8604166666666666
User 51397 does not improve AUC. Reverting changes.
Training on augumented user 62365 44/50 current_auc = 0.8625
User 62365 AUC after training: 0.8583333333333334
User 62365 does not improve AUC. Reverting changes.
Training on augumented user 79182 45/50 current_auc = 0.8625
User 79182 AUC after training: 0.8604166666666666
User 79182 does not improve AUC. Reverting changes.
Training on augumented user 75015 46/50 current_auc = 0.8625
User 75015 AUC after training: 0.8604166666666666
User 75015 does not improve AUC. Reverting changes.
Training on augumented user 135792 47/50 current_auc = 0.8625
User 135792 AUC after training: 0.85625
User 135792 does not improve AUC. Reverting changes.
Training on augumented user 52093 48/50 current_auc = 0.8625
User 52093 AUC after training: 0.8604166666666666
User 52093 does not improve AUC. Reverting changes.
Training on augumented user 88793 49/50 current_auc = 0.8625
User 88793 AUC after training: 0.8604166666666666
User 88793 does not improve AUC. Reverting changes.
[2024-12-02 17:57:09.200833] start test user 124763 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:09.931875] start test user 124763 36/567 recall augumented users by random, augumented_users = [15921, 70856, 113468, 111758, 60478, 53232, 37775, 124022, 22707, 57968, 22353, 124112, 49816, 59813, 54173, 98623, 12000, 61337, 68556, 71628, 48804, 65078, 134011, 2947, 76472, 74672, 58256, 125438, 19818, 36219, 47342, 120314, 91079, 135694, 33781, 43348, 15746, 46839, 29322, 106742, 129981, 38233, 126070, 46372, 20454, 43766, 87384, 87577, 88321, 63568]
[2024-12-02 17:57:09.947255] user = 124763 Cloud 36/567
[2024-12-02 17:57:09.962287] user = 124763 Local 36/567
[2024-12-02 17:57:10.099639] user = 124763 Local+ 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:13.006861] user = 124763 MPDA- 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7410416666666667
Training on augumented user 15921 0/50 current_auc = 0.7410416666666667
User 15921 AUC after training: 0.7410416666666667
User 15921 does not improve AUC. Reverting changes.
Training on augumented user 70856 1/50 current_auc = 0.7410416666666667
User 70856 AUC after training: 0.7414583333333333
User 70856 improves AUC. Keeping the model.
Training on augumented user 113468 2/50 current_auc = 0.7414583333333333
User 113468 AUC after training: 0.74
User 113468 does not improve AUC. Reverting changes.
Training on augumented user 111758 3/50 current_auc = 0.7414583333333333
User 111758 AUC after training: 0.7425
User 111758 improves AUC. Keeping the model.
Training on augumented user 60478 4/50 current_auc = 0.7425
User 60478 AUC after training: 0.7416666666666667
User 60478 does not improve AUC. Reverting changes.
Training on augumented user 53232 5/50 current_auc = 0.7425
User 53232 AUC after training: 0.7404166666666666
User 53232 does not improve AUC. Reverting changes.
Training on augumented user 37775 6/50 current_auc = 0.7425
User 37775 AUC after training: 0.7402083333333334
User 37775 does not improve AUC. Reverting changes.
Training on augumented user 124022 7/50 current_auc = 0.7425
User 124022 AUC after training: 0.7408333333333333
User 124022 does not improve AUC. Reverting changes.
Training on augumented user 22707 8/50 current_auc = 0.7425
User 22707 AUC after training: 0.7422916666666667
User 22707 does not improve AUC. Reverting changes.
Training on augumented user 57968 9/50 current_auc = 0.7425
User 57968 AUC after training: 0.7402083333333335
User 57968 does not improve AUC. Reverting changes.
Training on augumented user 22353 10/50 current_auc = 0.7425
User 22353 AUC after training: 0.739375
User 22353 does not improve AUC. Reverting changes.
Training on augumented user 124112 11/50 current_auc = 0.7425
User 124112 AUC after training: 0.7454166666666666
User 124112 improves AUC. Keeping the model.
Training on augumented user 49816 12/50 current_auc = 0.7454166666666666
User 49816 AUC after training: 0.7433333333333333
User 49816 does not improve AUC. Reverting changes.
Training on augumented user 59813 13/50 current_auc = 0.7454166666666666
User 59813 AUC after training: 0.7408333333333333
User 59813 does not improve AUC. Reverting changes.
Training on augumented user 54173 14/50 current_auc = 0.7454166666666666
User 54173 AUC after training: 0.74375
User 54173 does not improve AUC. Reverting changes.
Training on augumented user 98623 15/50 current_auc = 0.7454166666666666
User 98623 AUC after training: 0.743125
User 98623 does not improve AUC. Reverting changes.
Training on augumented user 12000 16/50 current_auc = 0.7454166666666666
User 12000 AUC after training: 0.7441666666666666
User 12000 does not improve AUC. Reverting changes.
Training on augumented user 61337 17/50 current_auc = 0.7454166666666666
User 61337 AUC after training: 0.7435416666666665
User 61337 does not improve AUC. Reverting changes.
Training on augumented user 68556 18/50 current_auc = 0.7454166666666666
User 68556 AUC after training: 0.7431249999999999
User 68556 does not improve AUC. Reverting changes.
Training on augumented user 71628 19/50 current_auc = 0.7454166666666666
User 71628 AUC after training: 0.7431249999999999
User 71628 does not improve AUC. Reverting changes.
Training on augumented user 48804 20/50 current_auc = 0.7454166666666666
User 48804 AUC after training: 0.7431249999999999
User 48804 does not improve AUC. Reverting changes.
Training on augumented user 65078 21/50 current_auc = 0.7454166666666666
User 65078 AUC after training: 0.7445833333333334
User 65078 does not improve AUC. Reverting changes.
Training on augumented user 134011 22/50 current_auc = 0.7454166666666666
User 134011 AUC after training: 0.7435416666666667
User 134011 does not improve AUC. Reverting changes.
Training on augumented user 2947 23/50 current_auc = 0.7454166666666666
User 2947 AUC after training: 0.7410416666666666
User 2947 does not improve AUC. Reverting changes.
Training on augumented user 76472 24/50 current_auc = 0.7454166666666666
User 76472 AUC after training: 0.7431249999999999
User 76472 does not improve AUC. Reverting changes.
Training on augumented user 74672 25/50 current_auc = 0.7454166666666666
User 74672 AUC after training: 0.7427083333333333
User 74672 does not improve AUC. Reverting changes.
Training on augumented user 58256 26/50 current_auc = 0.7454166666666666
User 58256 AUC after training: 0.7420833333333333
User 58256 does not improve AUC. Reverting changes.
Training on augumented user 125438 27/50 current_auc = 0.7454166666666666
User 125438 AUC after training: 0.7431249999999999
User 125438 does not improve AUC. Reverting changes.
Training on augumented user 19818 28/50 current_auc = 0.7454166666666666
User 19818 AUC after training: 0.7379166666666667
User 19818 does not improve AUC. Reverting changes.
Training on augumented user 36219 29/50 current_auc = 0.7454166666666666
User 36219 AUC after training: 0.7424999999999999
User 36219 does not improve AUC. Reverting changes.
Training on augumented user 47342 30/50 current_auc = 0.7454166666666666
User 47342 AUC after training: 0.7435416666666667
User 47342 does not improve AUC. Reverting changes.
Training on augumented user 120314 31/50 current_auc = 0.7454166666666666
User 120314 AUC after training: 0.7435416666666665
User 120314 does not improve AUC. Reverting changes.
Training on augumented user 91079 32/50 current_auc = 0.7454166666666666
User 91079 AUC after training: 0.7439583333333334
User 91079 does not improve AUC. Reverting changes.
Training on augumented user 135694 33/50 current_auc = 0.7454166666666666
User 135694 AUC after training: 0.7385416666666668
User 135694 does not improve AUC. Reverting changes.
Training on augumented user 33781 34/50 current_auc = 0.7454166666666666
User 33781 AUC after training: 0.7420833333333333
User 33781 does not improve AUC. Reverting changes.
Training on augumented user 43348 35/50 current_auc = 0.7454166666666666
User 43348 AUC after training: 0.7445833333333334
User 43348 does not improve AUC. Reverting changes.
Training on augumented user 15746 36/50 current_auc = 0.7454166666666666
User 15746 AUC after training: 0.744375
User 15746 does not improve AUC. Reverting changes.
Training on augumented user 46839 37/50 current_auc = 0.7454166666666666
User 46839 AUC after training: 0.7431249999999999
User 46839 does not improve AUC. Reverting changes.
Training on augumented user 29322 38/50 current_auc = 0.7454166666666666
User 29322 AUC after training: 0.7387500000000001
User 29322 does not improve AUC. Reverting changes.
Training on augumented user 106742 39/50 current_auc = 0.7454166666666666
User 106742 AUC after training: 0.7420833333333333
User 106742 does not improve AUC. Reverting changes.
Training on augumented user 129981 40/50 current_auc = 0.7454166666666666
User 129981 AUC after training: 0.7416666666666666
User 129981 does not improve AUC. Reverting changes.
Training on augumented user 38233 41/50 current_auc = 0.7454166666666666
User 38233 AUC after training: 0.7464583333333333
User 38233 improves AUC. Keeping the model.
Training on augumented user 126070 42/50 current_auc = 0.7464583333333333
User 126070 AUC after training: 0.7456250000000001
User 126070 does not improve AUC. Reverting changes.
Training on augumented user 46372 43/50 current_auc = 0.7464583333333333
User 46372 AUC after training: 0.746875
User 46372 improves AUC. Keeping the model.
Training on augumented user 20454 44/50 current_auc = 0.746875
User 20454 AUC after training: 0.7412500000000001
User 20454 does not improve AUC. Reverting changes.
Training on augumented user 43766 45/50 current_auc = 0.746875
User 43766 AUC after training: 0.7449999999999999
User 43766 does not improve AUC. Reverting changes.
Training on augumented user 87384 46/50 current_auc = 0.746875
User 87384 AUC after training: 0.7424999999999999
User 87384 does not improve AUC. Reverting changes.
Training on augumented user 87577 47/50 current_auc = 0.746875
User 87577 AUC after training: 0.74125
User 87577 does not improve AUC. Reverting changes.
Training on augumented user 88321 48/50 current_auc = 0.746875
User 88321 AUC after training: 0.7452083333333334
User 88321 does not improve AUC. Reverting changes.
Training on augumented user 63568 49/50 current_auc = 0.746875
User 63568 AUC after training: 0.7431249999999999
User 63568 does not improve AUC. Reverting changes.
[2024-12-02 17:57:42.700138] start test user 124795 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:43.278108] start test user 124795 37/567 recall augumented users by random, augumented_users = [31028, 93219, 75041, 95514, 60946, 136722, 26826, 64027, 82549, 63642, 65944, 90718, 56401, 53895, 26674, 46711, 36297, 75474, 36818, 89921, 32245, 97162, 61817, 117918, 4610, 42895, 94692, 14993, 117801, 66546, 77214, 99560, 47495, 23848, 55283, 106164, 71408, 41739, 119044, 66953, 120797, 46703, 109473, 31823, 89176, 37486, 121650, 30279, 142, 20803]
[2024-12-02 17:57:43.308789] user = 124795 Cloud 37/567
[2024-12-02 17:57:43.329715] user = 124795 Local 37/567
[2024-12-02 17:57:43.497537] user = 124795 Local+ 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:45.932504] user = 124795 MPDA- 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7231481481481481
Training on augumented user 31028 0/50 current_auc = 0.7231481481481481
User 31028 AUC after training: 0.7231481481481481
User 31028 does not improve AUC. Reverting changes.
Training on augumented user 93219 1/50 current_auc = 0.7231481481481481
User 93219 AUC after training: 0.7203703703703703
User 93219 does not improve AUC. Reverting changes.
Training on augumented user 75041 2/50 current_auc = 0.7231481481481481
User 75041 AUC after training: 0.7222222222222222
User 75041 does not improve AUC. Reverting changes.
Training on augumented user 95514 3/50 current_auc = 0.7231481481481481
User 95514 AUC after training: 0.7236111111111111
User 95514 improves AUC. Keeping the model.
Training on augumented user 60946 4/50 current_auc = 0.7236111111111111
User 60946 AUC after training: 0.724537037037037
User 60946 improves AUC. Keeping the model.
Training on augumented user 136722 5/50 current_auc = 0.724537037037037
User 136722 AUC after training: 0.7222222222222222
User 136722 does not improve AUC. Reverting changes.
Training on augumented user 26826 6/50 current_auc = 0.724537037037037
User 26826 AUC after training: 0.724537037037037
User 26826 does not improve AUC. Reverting changes.
Training on augumented user 64027 7/50 current_auc = 0.724537037037037
User 64027 AUC after training: 0.7236111111111112
User 64027 does not improve AUC. Reverting changes.
Training on augumented user 82549 8/50 current_auc = 0.724537037037037
User 82549 AUC after training: 0.7222222222222222
User 82549 does not improve AUC. Reverting changes.
Training on augumented user 63642 9/50 current_auc = 0.724537037037037
User 63642 AUC after training: 0.7231481481481481
User 63642 does not improve AUC. Reverting changes.
Training on augumented user 65944 10/50 current_auc = 0.724537037037037
User 65944 AUC after training: 0.7240740740740741
User 65944 does not improve AUC. Reverting changes.
Training on augumented user 90718 11/50 current_auc = 0.724537037037037
User 90718 AUC after training: 0.7236111111111111
User 90718 does not improve AUC. Reverting changes.
Training on augumented user 56401 12/50 current_auc = 0.724537037037037
User 56401 AUC after training: 0.7236111111111112
User 56401 does not improve AUC. Reverting changes.
Training on augumented user 53895 13/50 current_auc = 0.724537037037037
User 53895 AUC after training: 0.7236111111111112
User 53895 does not improve AUC. Reverting changes.
Training on augumented user 26674 14/50 current_auc = 0.724537037037037
User 26674 AUC after training: 0.7208333333333333
User 26674 does not improve AUC. Reverting changes.
Training on augumented user 46711 15/50 current_auc = 0.724537037037037
User 46711 AUC after training: 0.7236111111111112
User 46711 does not improve AUC. Reverting changes.
Training on augumented user 36297 16/50 current_auc = 0.724537037037037
User 36297 AUC after training: 0.724537037037037
User 36297 does not improve AUC. Reverting changes.
Training on augumented user 75474 17/50 current_auc = 0.724537037037037
User 75474 AUC after training: 0.724537037037037
User 75474 does not improve AUC. Reverting changes.
Training on augumented user 36818 18/50 current_auc = 0.724537037037037
User 36818 AUC after training: 0.724537037037037
User 36818 does not improve AUC. Reverting changes.
Training on augumented user 89921 19/50 current_auc = 0.724537037037037
User 89921 AUC after training: 0.724537037037037
User 89921 does not improve AUC. Reverting changes.
Training on augumented user 32245 20/50 current_auc = 0.724537037037037
User 32245 AUC after training: 0.7222222222222222
User 32245 does not improve AUC. Reverting changes.
Training on augumented user 97162 21/50 current_auc = 0.724537037037037
User 97162 AUC after training: 0.7226851851851852
User 97162 does not improve AUC. Reverting changes.
Training on augumented user 61817 22/50 current_auc = 0.724537037037037
User 61817 AUC after training: 0.7222222222222222
User 61817 does not improve AUC. Reverting changes.
Training on augumented user 117918 23/50 current_auc = 0.724537037037037
User 117918 AUC after training: 0.7222222222222222
User 117918 does not improve AUC. Reverting changes.
Training on augumented user 4610 24/50 current_auc = 0.724537037037037
User 4610 AUC after training: 0.724537037037037
User 4610 does not improve AUC. Reverting changes.
Training on augumented user 42895 25/50 current_auc = 0.724537037037037
User 42895 AUC after training: 0.7226851851851852
User 42895 does not improve AUC. Reverting changes.
Training on augumented user 94692 26/50 current_auc = 0.724537037037037
User 94692 AUC after training: 0.7236111111111112
User 94692 does not improve AUC. Reverting changes.
Training on augumented user 14993 27/50 current_auc = 0.724537037037037
User 14993 AUC after training: 0.7236111111111112
User 14993 does not improve AUC. Reverting changes.
Training on augumented user 117801 28/50 current_auc = 0.724537037037037
User 117801 AUC after training: 0.724537037037037
User 117801 does not improve AUC. Reverting changes.
Training on augumented user 66546 29/50 current_auc = 0.724537037037037
User 66546 AUC after training: 0.7236111111111112
User 66546 does not improve AUC. Reverting changes.
Training on augumented user 77214 30/50 current_auc = 0.724537037037037
User 77214 AUC after training: 0.7226851851851852
User 77214 does not improve AUC. Reverting changes.
Training on augumented user 99560 31/50 current_auc = 0.724537037037037
User 99560 AUC after training: 0.724537037037037
User 99560 does not improve AUC. Reverting changes.
Training on augumented user 47495 32/50 current_auc = 0.724537037037037
User 47495 AUC after training: 0.7217592592592593
User 47495 does not improve AUC. Reverting changes.
Training on augumented user 23848 33/50 current_auc = 0.724537037037037
User 23848 AUC after training: 0.7222222222222222
User 23848 does not improve AUC. Reverting changes.
Training on augumented user 55283 34/50 current_auc = 0.724537037037037
User 55283 AUC after training: 0.7236111111111112
User 55283 does not improve AUC. Reverting changes.
Training on augumented user 106164 35/50 current_auc = 0.724537037037037
User 106164 AUC after training: 0.7231481481481481
User 106164 does not improve AUC. Reverting changes.
Training on augumented user 71408 36/50 current_auc = 0.724537037037037
User 71408 AUC after training: 0.725462962962963
User 71408 improves AUC. Keeping the model.
Training on augumented user 41739 37/50 current_auc = 0.725462962962963
User 41739 AUC after training: 0.7236111111111111
User 41739 does not improve AUC. Reverting changes.
Training on augumented user 119044 38/50 current_auc = 0.725462962962963
User 119044 AUC after training: 0.7212962962962963
User 119044 does not improve AUC. Reverting changes.
Training on augumented user 66953 39/50 current_auc = 0.725462962962963
User 66953 AUC after training: 0.7203703703703704
User 66953 does not improve AUC. Reverting changes.
Training on augumented user 120797 40/50 current_auc = 0.725462962962963
User 120797 AUC after training: 0.7236111111111111
User 120797 does not improve AUC. Reverting changes.
Training on augumented user 46703 41/50 current_auc = 0.725462962962963
User 46703 AUC after training: 0.7217592592592593
User 46703 does not improve AUC. Reverting changes.
Training on augumented user 109473 42/50 current_auc = 0.725462962962963
User 109473 AUC after training: 0.7236111111111111
User 109473 does not improve AUC. Reverting changes.
Training on augumented user 31823 43/50 current_auc = 0.725462962962963
User 31823 AUC after training: 0.725
User 31823 does not improve AUC. Reverting changes.
Training on augumented user 89176 44/50 current_auc = 0.725462962962963
User 89176 AUC after training: 0.725462962962963
User 89176 does not improve AUC. Reverting changes.
Training on augumented user 37486 45/50 current_auc = 0.725462962962963
User 37486 AUC after training: 0.7231481481481481
User 37486 does not improve AUC. Reverting changes.
Training on augumented user 121650 46/50 current_auc = 0.725462962962963
User 121650 AUC after training: 0.725
User 121650 does not improve AUC. Reverting changes.
Training on augumented user 30279 47/50 current_auc = 0.725462962962963
User 30279 AUC after training: 0.7212962962962963
User 30279 does not improve AUC. Reverting changes.
Training on augumented user 142 48/50 current_auc = 0.725462962962963
User 142 AUC after training: 0.7226851851851852
User 142 does not improve AUC. Reverting changes.
Training on augumented user 20803 49/50 current_auc = 0.725462962962963
User 20803 AUC after training: 0.725462962962963
User 20803 does not improve AUC. Reverting changes.
[2024-12-02 17:58:17.098389] start test user 124828 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:17.546659] start test user 124828 38/567 recall augumented users by random, augumented_users = [55023, 109782, 133775, 126594, 130754, 6324, 67353, 12332, 122091, 112592, 121378, 54628, 118537, 83841, 54902, 126064, 94399, 109063, 68940, 12403, 88284, 119949, 121039, 101145, 124329, 87931, 25693, 127819, 4318, 107631, 136574, 87055, 8230, 33772, 37830, 87440, 22587, 18364, 8429, 135004, 33488, 21501, 50418, 39273, 104580, 112741, 5861, 29117, 10934, 113582]
[2024-12-02 17:58:17.561254] user = 124828 Cloud 38/567
[2024-12-02 17:58:17.571552] user = 124828 Local 38/567
[2024-12-02 17:58:17.639768] user = 124828 Local+ 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:20.189022] user = 124828 MPDA- 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.62995337995338
Training on augumented user 55023 0/50 current_auc = 0.62995337995338
User 55023 AUC after training: 0.6276223776223777
User 55023 does not improve AUC. Reverting changes.
Training on augumented user 109782 1/50 current_auc = 0.62995337995338
User 109782 AUC after training: 0.6264568764568764
User 109782 does not improve AUC. Reverting changes.
Training on augumented user 133775 2/50 current_auc = 0.62995337995338
User 133775 AUC after training: 0.6276223776223777
User 133775 does not improve AUC. Reverting changes.
Training on augumented user 126594 3/50 current_auc = 0.62995337995338
User 126594 AUC after training: 0.6317016317016317
User 126594 improves AUC. Keeping the model.
Training on augumented user 130754 4/50 current_auc = 0.6317016317016317
User 130754 AUC after training: 0.6317016317016317
User 130754 does not improve AUC. Reverting changes.
Training on augumented user 6324 5/50 current_auc = 0.6317016317016317
User 6324 AUC after training: 0.6328671328671329
User 6324 improves AUC. Keeping the model.
Training on augumented user 67353 6/50 current_auc = 0.6328671328671329
User 67353 AUC after training: 0.634032634032634
User 67353 improves AUC. Keeping the model.
Training on augumented user 12332 7/50 current_auc = 0.634032634032634
User 12332 AUC after training: 0.6328671328671329
User 12332 does not improve AUC. Reverting changes.
Training on augumented user 122091 8/50 current_auc = 0.634032634032634
User 122091 AUC after training: 0.634032634032634
User 122091 does not improve AUC. Reverting changes.
Training on augumented user 112592 9/50 current_auc = 0.634032634032634
User 112592 AUC after training: 0.634032634032634
User 112592 does not improve AUC. Reverting changes.
Training on augumented user 121378 10/50 current_auc = 0.634032634032634
User 121378 AUC after training: 0.634032634032634
User 121378 does not improve AUC. Reverting changes.
Training on augumented user 54628 11/50 current_auc = 0.634032634032634
User 54628 AUC after training: 0.6328671328671329
User 54628 does not improve AUC. Reverting changes.
Training on augumented user 118537 12/50 current_auc = 0.634032634032634
User 118537 AUC after training: 0.634032634032634
User 118537 does not improve AUC. Reverting changes.
Training on augumented user 83841 13/50 current_auc = 0.634032634032634
User 83841 AUC after training: 0.6340326340326341
User 83841 improves AUC. Keeping the model.
Training on augumented user 54902 14/50 current_auc = 0.6340326340326341
User 54902 AUC after training: 0.6340326340326341
User 54902 does not improve AUC. Reverting changes.
Training on augumented user 126064 15/50 current_auc = 0.6340326340326341
User 126064 AUC after training: 0.6328671328671329
User 126064 does not improve AUC. Reverting changes.
Training on augumented user 94399 16/50 current_auc = 0.6340326340326341
User 94399 AUC after training: 0.6340326340326341
User 94399 does not improve AUC. Reverting changes.
Training on augumented user 109063 17/50 current_auc = 0.6340326340326341
User 109063 AUC after training: 0.6328671328671329
User 109063 does not improve AUC. Reverting changes.
Training on augumented user 68940 18/50 current_auc = 0.6340326340326341
User 68940 AUC after training: 0.6340326340326341
User 68940 does not improve AUC. Reverting changes.
Training on augumented user 12403 19/50 current_auc = 0.6340326340326341
User 12403 AUC after training: 0.6340326340326341
User 12403 does not improve AUC. Reverting changes.
Training on augumented user 88284 20/50 current_auc = 0.6340326340326341
User 88284 AUC after training: 0.6340326340326341
User 88284 does not improve AUC. Reverting changes.
Training on augumented user 119949 21/50 current_auc = 0.6340326340326341
User 119949 AUC after training: 0.6340326340326341
User 119949 does not improve AUC. Reverting changes.
Training on augumented user 121039 22/50 current_auc = 0.6340326340326341
User 121039 AUC after training: 0.6328671328671329
User 121039 does not improve AUC. Reverting changes.
Training on augumented user 101145 23/50 current_auc = 0.6340326340326341
User 101145 AUC after training: 0.6328671328671329
User 101145 does not improve AUC. Reverting changes.
Training on augumented user 124329 24/50 current_auc = 0.6340326340326341
User 124329 AUC after training: 0.627039627039627
User 124329 does not improve AUC. Reverting changes.
Training on augumented user 87931 25/50 current_auc = 0.6340326340326341
User 87931 AUC after training: 0.6328671328671329
User 87931 does not improve AUC. Reverting changes.
Training on augumented user 25693 26/50 current_auc = 0.6340326340326341
User 25693 AUC after training: 0.6305361305361306
User 25693 does not improve AUC. Reverting changes.
Training on augumented user 127819 27/50 current_auc = 0.6340326340326341
User 127819 AUC after training: 0.6328671328671329
User 127819 does not improve AUC. Reverting changes.
Training on augumented user 4318 28/50 current_auc = 0.6340326340326341
User 4318 AUC after training: 0.6328671328671329
User 4318 does not improve AUC. Reverting changes.
Training on augumented user 107631 29/50 current_auc = 0.6340326340326341
User 107631 AUC after training: 0.6340326340326341
User 107631 does not improve AUC. Reverting changes.
Training on augumented user 136574 30/50 current_auc = 0.6340326340326341
User 136574 AUC after training: 0.6328671328671329
User 136574 does not improve AUC. Reverting changes.
Training on augumented user 87055 31/50 current_auc = 0.6340326340326341
User 87055 AUC after training: 0.6340326340326341
User 87055 does not improve AUC. Reverting changes.
Training on augumented user 8230 32/50 current_auc = 0.6340326340326341
User 8230 AUC after training: 0.6340326340326341
User 8230 does not improve AUC. Reverting changes.
Training on augumented user 33772 33/50 current_auc = 0.6340326340326341
User 33772 AUC after training: 0.6340326340326341
User 33772 does not improve AUC. Reverting changes.
Training on augumented user 37830 34/50 current_auc = 0.6340326340326341
User 37830 AUC after training: 0.6340326340326341
User 37830 does not improve AUC. Reverting changes.
Training on augumented user 87440 35/50 current_auc = 0.6340326340326341
User 87440 AUC after training: 0.6340326340326341
User 87440 does not improve AUC. Reverting changes.
Training on augumented user 22587 36/50 current_auc = 0.6340326340326341
User 22587 AUC after training: 0.6340326340326341
User 22587 does not improve AUC. Reverting changes.
Training on augumented user 18364 37/50 current_auc = 0.6340326340326341
User 18364 AUC after training: 0.6340326340326341
User 18364 does not improve AUC. Reverting changes.
Training on augumented user 8429 38/50 current_auc = 0.6340326340326341
User 8429 AUC after training: 0.6340326340326341
User 8429 does not improve AUC. Reverting changes.
Training on augumented user 135004 39/50 current_auc = 0.6340326340326341
User 135004 AUC after training: 0.6340326340326341
User 135004 does not improve AUC. Reverting changes.
Training on augumented user 33488 40/50 current_auc = 0.6340326340326341
User 33488 AUC after training: 0.6328671328671329
User 33488 does not improve AUC. Reverting changes.
Training on augumented user 21501 41/50 current_auc = 0.6340326340326341
User 21501 AUC after training: 0.6328671328671329
User 21501 does not improve AUC. Reverting changes.
Training on augumented user 50418 42/50 current_auc = 0.6340326340326341
User 50418 AUC after training: 0.6340326340326341
User 50418 does not improve AUC. Reverting changes.
Training on augumented user 39273 43/50 current_auc = 0.6340326340326341
User 39273 AUC after training: 0.6340326340326341
User 39273 does not improve AUC. Reverting changes.
Training on augumented user 104580 44/50 current_auc = 0.6340326340326341
User 104580 AUC after training: 0.6340326340326341
User 104580 does not improve AUC. Reverting changes.
Training on augumented user 112741 45/50 current_auc = 0.6340326340326341
User 112741 AUC after training: 0.6328671328671329
User 112741 does not improve AUC. Reverting changes.
Training on augumented user 5861 46/50 current_auc = 0.6340326340326341
User 5861 AUC after training: 0.6317016317016317
User 5861 does not improve AUC. Reverting changes.
Training on augumented user 29117 47/50 current_auc = 0.6340326340326341
User 29117 AUC after training: 0.6340326340326341
User 29117 does not improve AUC. Reverting changes.
Training on augumented user 10934 48/50 current_auc = 0.6340326340326341
User 10934 AUC after training: 0.6305361305361306
User 10934 does not improve AUC. Reverting changes.
Training on augumented user 113582 49/50 current_auc = 0.6340326340326341
User 113582 AUC after training: 0.6340326340326341
User 113582 does not improve AUC. Reverting changes.
[2024-12-02 17:58:50.684346] start test user 124831 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:51.094868] start test user 124831 39/567 recall augumented users by random, augumented_users = [53925, 48608, 106117, 45037, 122479, 4907, 88973, 53960, 62672, 130148, 27026, 23341, 76129, 40421, 125787, 71309, 130523, 119457, 75619, 2915, 27532, 114418, 42877, 4839, 32830, 16176, 92685, 22313, 20272, 19578, 44316, 54289, 103209, 80326, 135931, 31055, 63018, 48963, 36458, 70286, 58119, 250, 30261, 109978, 102951, 45099, 134360, 120699, 5127, 52475]
[2024-12-02 17:58:51.111321] user = 124831 Cloud 39/567
[2024-12-02 17:58:51.135220] user = 124831 Local 39/567
[2024-12-02 17:58:51.344518] user = 124831 Local+ 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:53.455193] user = 124831 MPDA- 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8027075199456799
Training on augumented user 53925 0/50 current_auc = 0.8027075199456799
User 53925 AUC after training: 0.8027499575623833
User 53925 improves AUC. Keeping the model.
Training on augumented user 48608 1/50 current_auc = 0.8027499575623833
User 48608 AUC after training: 0.8027923951790867
User 48608 improves AUC. Keeping the model.
Training on augumented user 106117 2/50 current_auc = 0.8027923951790867
User 106117 AUC after training: 0.8016465795280937
User 106117 does not improve AUC. Reverting changes.
Training on augumented user 45037 3/50 current_auc = 0.8027923951790867
User 45037 AUC after training: 0.802537769478866
User 45037 does not improve AUC. Reverting changes.
Training on augumented user 122479 4/50 current_auc = 0.8027923951790867
User 122479 AUC after training: 0.802537769478866
User 122479 does not improve AUC. Reverting changes.
Training on augumented user 4907 5/50 current_auc = 0.8027923951790867
User 4907 AUC after training: 0.8027075199456798
User 4907 does not improve AUC. Reverting changes.
Training on augumented user 88973 6/50 current_auc = 0.8027923951790867
User 88973 AUC after training: 0.802537769478866
User 88973 does not improve AUC. Reverting changes.
Training on augumented user 53960 7/50 current_auc = 0.8027923951790867
User 53960 AUC after training: 0.8027075199456798
User 53960 does not improve AUC. Reverting changes.
Training on augumented user 62672 8/50 current_auc = 0.8027923951790867
User 62672 AUC after training: 0.8025802070955695
User 62672 does not improve AUC. Reverting changes.
Training on augumented user 130148 9/50 current_auc = 0.8027923951790867
User 130148 AUC after training: 0.8026650823289764
User 130148 does not improve AUC. Reverting changes.
Training on augumented user 27026 10/50 current_auc = 0.8027923951790867
User 27026 AUC after training: 0.802155830928535
User 27026 does not improve AUC. Reverting changes.
Training on augumented user 23341 11/50 current_auc = 0.8027923951790867
User 23341 AUC after training: 0.8026650823289764
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 76129 12/50 current_auc = 0.8027923951790867
User 76129 AUC after training: 0.8017314547615005
User 76129 does not improve AUC. Reverting changes.
Training on augumented user 40421 13/50 current_auc = 0.8027923951790867
User 40421 AUC after training: 0.8022407061619419
User 40421 does not improve AUC. Reverting changes.
Training on augumented user 125787 14/50 current_auc = 0.8027923951790867
User 125787 AUC after training: 0.8023680190120523
User 125787 does not improve AUC. Reverting changes.
Training on augumented user 71309 15/50 current_auc = 0.8027923951790867
User 71309 AUC after training: 0.8027499575623832
User 71309 does not improve AUC. Reverting changes.
Training on augumented user 130523 16/50 current_auc = 0.8027923951790867
User 130523 AUC after training: 0.8029197080291971
User 130523 improves AUC. Keeping the model.
Training on augumented user 119457 17/50 current_auc = 0.8029197080291971
User 119457 AUC after training: 0.8035987098964522
User 119457 improves AUC. Keeping the model.
Training on augumented user 75619 18/50 current_auc = 0.8035987098964522
User 75619 AUC after training: 0.8033865218129349
User 75619 does not improve AUC. Reverting changes.
Training on augumented user 2915 19/50 current_auc = 0.8035987098964522
User 2915 AUC after training: 0.8030894584960109
User 2915 does not improve AUC. Reverting changes.
Training on augumented user 27532 20/50 current_auc = 0.8035987098964522
User 27532 AUC after training: 0.8030470208793073
User 27532 does not improve AUC. Reverting changes.
Training on augumented user 114418 21/50 current_auc = 0.8035987098964522
User 114418 AUC after training: 0.802919708029197
User 114418 does not improve AUC. Reverting changes.
Training on augumented user 42877 22/50 current_auc = 0.8035987098964522
User 42877 AUC after training: 0.8033440841962315
User 42877 does not improve AUC. Reverting changes.
Training on augumented user 4839 23/50 current_auc = 0.8035987098964522
User 4839 AUC after training: 0.802537769478866
User 4839 does not improve AUC. Reverting changes.
Training on augumented user 32830 24/50 current_auc = 0.8035987098964522
User 32830 AUC after training: 0.8033016465795281
User 32830 does not improve AUC. Reverting changes.
Training on augumented user 16176 25/50 current_auc = 0.8035987098964522
User 16176 AUC after training: 0.8033865218129349
User 16176 does not improve AUC. Reverting changes.
Training on augumented user 92685 26/50 current_auc = 0.8035987098964522
User 92685 AUC after training: 0.8032167713461211
User 92685 does not improve AUC. Reverting changes.
Training on augumented user 22313 27/50 current_auc = 0.8035987098964522
User 22313 AUC after training: 0.803768460363266
User 22313 improves AUC. Keeping the model.
Training on augumented user 20272 28/50 current_auc = 0.803768460363266
User 20272 AUC after training: 0.8052113393311832
User 20272 improves AUC. Keeping the model.
Training on augumented user 19578 29/50 current_auc = 0.8052113393311832
User 19578 AUC after training: 0.8052113393311833
User 19578 improves AUC. Keeping the model.
Training on augumented user 44316 30/50 current_auc = 0.8052113393311833
User 44316 AUC after training: 0.8050415888643694
User 44316 does not improve AUC. Reverting changes.
Training on augumented user 54289 31/50 current_auc = 0.8052113393311833
User 54289 AUC after training: 0.8050415888643694
User 54289 does not improve AUC. Reverting changes.
Training on augumented user 103209 32/50 current_auc = 0.8052113393311833
User 103209 AUC after training: 0.8044474622305211
User 103209 does not improve AUC. Reverting changes.
Training on augumented user 80326 33/50 current_auc = 0.8052113393311833
User 80326 AUC after training: 0.8054659650314039
User 80326 improves AUC. Keeping the model.
Training on augumented user 135931 34/50 current_auc = 0.8054659650314039
User 135931 AUC after training: 0.8045747750806314
User 135931 does not improve AUC. Reverting changes.
Training on augumented user 31055 35/50 current_auc = 0.8054659650314039
User 31055 AUC after training: 0.8058903411984384
User 31055 improves AUC. Keeping the model.
Training on augumented user 63018 36/50 current_auc = 0.8058903411984384
User 63018 AUC after training: 0.8060176540485486
User 63018 improves AUC. Keeping the model.
Training on augumented user 48963 37/50 current_auc = 0.8060176540485486
User 48963 AUC after training: 0.8059752164318452
User 48963 does not improve AUC. Reverting changes.
Training on augumented user 36458 38/50 current_auc = 0.8060176540485486
User 36458 AUC after training: 0.8061025292819555
User 36458 improves AUC. Keeping the model.
Training on augumented user 70286 39/50 current_auc = 0.8061025292819555
User 70286 AUC after training: 0.8058903411984383
User 70286 does not improve AUC. Reverting changes.
Training on augumented user 58119 40/50 current_auc = 0.8061025292819555
User 58119 AUC after training: 0.8062722797487694
User 58119 improves AUC. Keeping the model.
Training on augumented user 250 41/50 current_auc = 0.8062722797487694
User 250 AUC after training: 0.8061874045153624
User 250 does not improve AUC. Reverting changes.
Training on augumented user 30261 42/50 current_auc = 0.8062722797487694
User 30261 AUC after training: 0.8065693430656934
User 30261 improves AUC. Keeping the model.
Training on augumented user 109978 43/50 current_auc = 0.8065693430656934
User 109978 AUC after training: 0.806060091665252
User 109978 does not improve AUC. Reverting changes.
Training on augumented user 102951 44/50 current_auc = 0.8065693430656934
User 102951 AUC after training: 0.806144966898659
User 102951 does not improve AUC. Reverting changes.
Training on augumented user 45099 45/50 current_auc = 0.8065693430656934
User 45099 AUC after training: 0.8064844678322866
User 45099 does not improve AUC. Reverting changes.
Training on augumented user 134360 46/50 current_auc = 0.8065693430656934
User 134360 AUC after training: 0.8067390935325072
User 134360 improves AUC. Keeping the model.
Training on augumented user 120699 47/50 current_auc = 0.8067390935325072
User 120699 AUC after training: 0.8052962145645901
User 120699 does not improve AUC. Reverting changes.
Training on augumented user 5127 48/50 current_auc = 0.8067390935325072
User 5127 AUC after training: 0.8067390935325072
User 5127 does not improve AUC. Reverting changes.
Training on augumented user 52475 49/50 current_auc = 0.8067390935325072
User 52475 AUC after training: 0.8067815311492107
User 52475 improves AUC. Keeping the model.
[2024-12-02 17:59:21.698068] start test user 124833 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:22.260272] start test user 124833 40/567 recall augumented users by random, augumented_users = [85884, 50494, 116759, 5089, 75828, 95772, 101611, 35116, 14057, 84742, 87454, 100583, 3201, 107734, 37454, 2892, 27183, 3536, 39427, 99731, 107751, 104761, 70205, 65236, 10810, 7889, 41335, 120027, 34143, 90392, 93093, 54370, 66919, 96180, 115860, 38593, 92101, 1063, 54835, 34404, 85751, 70494, 64104, 105421, 96258, 71396, 42022, 82461, 28132, 108838]
[2024-12-02 17:59:22.280371] user = 124833 Cloud 40/567
[2024-12-02 17:59:22.301890] user = 124833 Local 40/567
[2024-12-02 17:59:22.356487] user = 124833 Local+ 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:25.441842] user = 124833 MPDA- 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7278063096111519
Training on augumented user 85884 0/50 current_auc = 0.7278063096111519
User 85884 AUC after training: 0.7276228906823184
User 85884 does not improve AUC. Reverting changes.
Training on augumented user 50494 1/50 current_auc = 0.7278063096111519
User 50494 AUC after training: 0.7279897285399853
User 50494 improves AUC. Keeping the model.
Training on augumented user 116759 2/50 current_auc = 0.7279897285399853
User 116759 AUC after training: 0.7278063096111519
User 116759 does not improve AUC. Reverting changes.
Training on augumented user 5089 3/50 current_auc = 0.7279897285399853
User 5089 AUC after training: 0.7283565663976523
User 5089 improves AUC. Keeping the model.
Training on augumented user 75828 4/50 current_auc = 0.7283565663976523
User 75828 AUC after training: 0.7278063096111519
User 75828 does not improve AUC. Reverting changes.
Training on augumented user 95772 5/50 current_auc = 0.7283565663976523
User 95772 AUC after training: 0.7290902421129861
User 95772 improves AUC. Keeping the model.
Training on augumented user 101611 6/50 current_auc = 0.7290902421129861
User 101611 AUC after training: 0.7301907556859868
User 101611 improves AUC. Keeping the model.
Training on augumented user 35116 7/50 current_auc = 0.7301907556859868
User 35116 AUC after training: 0.7301907556859868
User 35116 does not improve AUC. Reverting changes.
Training on augumented user 14057 8/50 current_auc = 0.7301907556859868
User 14057 AUC after training: 0.7301907556859868
User 14057 does not improve AUC. Reverting changes.
Training on augumented user 84742 9/50 current_auc = 0.7301907556859868
User 84742 AUC after training: 0.7311078503301541
User 84742 improves AUC. Keeping the model.
Training on augumented user 87454 10/50 current_auc = 0.7311078503301541
User 87454 AUC after training: 0.7316581071166546
User 87454 improves AUC. Keeping the model.
Training on augumented user 100583 11/50 current_auc = 0.7316581071166546
User 100583 AUC after training: 0.7320249449743214
User 100583 improves AUC. Keeping the model.
Training on augumented user 3201 12/50 current_auc = 0.7320249449743214
User 3201 AUC after training: 0.7333088774761555
User 3201 improves AUC. Keeping the model.
Training on augumented user 107734 13/50 current_auc = 0.7333088774761555
User 107734 AUC after training: 0.7333088774761556
User 107734 improves AUC. Keeping the model.
Training on augumented user 37454 14/50 current_auc = 0.7333088774761556
User 37454 AUC after training: 0.7333088774761556
User 37454 does not improve AUC. Reverting changes.
Training on augumented user 2892 15/50 current_auc = 0.7333088774761556
User 2892 AUC after training: 0.7325752017608217
User 2892 does not improve AUC. Reverting changes.
Training on augumented user 27183 16/50 current_auc = 0.7333088774761556
User 27183 AUC after training: 0.7327586206896552
User 27183 does not improve AUC. Reverting changes.
Training on augumented user 3536 17/50 current_auc = 0.7333088774761556
User 3536 AUC after training: 0.7329420396184886
User 3536 does not improve AUC. Reverting changes.
Training on augumented user 39427 18/50 current_auc = 0.7333088774761556
User 39427 AUC after training: 0.7333088774761557
User 39427 improves AUC. Keeping the model.
Training on augumented user 99731 19/50 current_auc = 0.7333088774761557
User 99731 AUC after training: 0.733492296404989
User 99731 improves AUC. Keeping the model.
Training on augumented user 107751 20/50 current_auc = 0.733492296404989
User 107751 AUC after training: 0.7336757153338226
User 107751 improves AUC. Keeping the model.
Training on augumented user 104761 21/50 current_auc = 0.7336757153338226
User 104761 AUC after training: 0.7333088774761556
User 104761 does not improve AUC. Reverting changes.
Training on augumented user 70205 22/50 current_auc = 0.7336757153338226
User 70205 AUC after training: 0.733492296404989
User 70205 does not improve AUC. Reverting changes.
Training on augumented user 65236 23/50 current_auc = 0.7336757153338226
User 65236 AUC after training: 0.7329420396184887
User 65236 does not improve AUC. Reverting changes.
Training on augumented user 10810 24/50 current_auc = 0.7336757153338226
User 10810 AUC after training: 0.7325752017608217
User 10810 does not improve AUC. Reverting changes.
Training on augumented user 7889 25/50 current_auc = 0.7336757153338226
User 7889 AUC after training: 0.7333088774761556
User 7889 does not improve AUC. Reverting changes.
Training on augumented user 41335 26/50 current_auc = 0.7336757153338226
User 41335 AUC after training: 0.733859134262656
User 41335 improves AUC. Keeping the model.
Training on augumented user 120027 27/50 current_auc = 0.733859134262656
User 120027 AUC after training: 0.7344093910491564
User 120027 improves AUC. Keeping the model.
Training on augumented user 34143 28/50 current_auc = 0.7344093910491564
User 34143 AUC after training: 0.7347762289068231
User 34143 improves AUC. Keeping the model.
Training on augumented user 90392 29/50 current_auc = 0.7347762289068231
User 90392 AUC after training: 0.7331254585473223
User 90392 does not improve AUC. Reverting changes.
Training on augumented user 93093 30/50 current_auc = 0.7347762289068231
User 93093 AUC after training: 0.735509904622157
User 93093 improves AUC. Keeping the model.
Training on augumented user 54370 31/50 current_auc = 0.735509904622157
User 54370 AUC after training: 0.7353264856933236
User 54370 does not improve AUC. Reverting changes.
Training on augumented user 66919 32/50 current_auc = 0.735509904622157
User 66919 AUC after training: 0.7362435803374908
User 66919 improves AUC. Keeping the model.
Training on augumented user 96180 33/50 current_auc = 0.7362435803374908
User 96180 AUC after training: 0.7349596478356566
User 96180 does not improve AUC. Reverting changes.
Training on augumented user 115860 34/50 current_auc = 0.7362435803374908
User 115860 AUC after training: 0.7347762289068231
User 115860 does not improve AUC. Reverting changes.
Training on augumented user 38593 35/50 current_auc = 0.7362435803374908
User 38593 AUC after training: 0.7358767424798238
User 38593 does not improve AUC. Reverting changes.
Training on augumented user 92101 36/50 current_auc = 0.7362435803374908
User 92101 AUC after training: 0.7364269992663243
User 92101 improves AUC. Keeping the model.
Training on augumented user 1063 37/50 current_auc = 0.7364269992663243
User 1063 AUC after training: 0.735876742479824
User 1063 does not improve AUC. Reverting changes.
Training on augumented user 54835 38/50 current_auc = 0.7364269992663243
User 54835 AUC after training: 0.7355099046221572
User 54835 does not improve AUC. Reverting changes.
Training on augumented user 34404 39/50 current_auc = 0.7364269992663243
User 34404 AUC after training: 0.7353264856933236
User 34404 does not improve AUC. Reverting changes.
Training on augumented user 85751 40/50 current_auc = 0.7364269992663243
User 85751 AUC after training: 0.7358767424798239
User 85751 does not improve AUC. Reverting changes.
Training on augumented user 70494 41/50 current_auc = 0.7364269992663243
User 70494 AUC after training: 0.7358767424798242
User 70494 does not improve AUC. Reverting changes.
Training on augumented user 64104 42/50 current_auc = 0.7364269992663243
User 64104 AUC after training: 0.7356933235509904
User 64104 does not improve AUC. Reverting changes.
Training on augumented user 105421 43/50 current_auc = 0.7364269992663243
User 105421 AUC after training: 0.7364269992663244
User 105421 improves AUC. Keeping the model.
Training on augumented user 96258 44/50 current_auc = 0.7364269992663244
User 96258 AUC after training: 0.737527512839325
User 96258 improves AUC. Keeping the model.
Training on augumented user 71396 45/50 current_auc = 0.737527512839325
User 71396 AUC after training: 0.7371606749816582
User 71396 does not improve AUC. Reverting changes.
Training on augumented user 42022 46/50 current_auc = 0.737527512839325
User 42022 AUC after training: 0.7366104181951577
User 42022 does not improve AUC. Reverting changes.
Training on augumented user 82461 47/50 current_auc = 0.737527512839325
User 82461 AUC after training: 0.7373440939104916
User 82461 does not improve AUC. Reverting changes.
Training on augumented user 28132 48/50 current_auc = 0.737527512839325
User 28132 AUC after training: 0.7371606749816582
User 28132 does not improve AUC. Reverting changes.
Training on augumented user 108838 49/50 current_auc = 0.737527512839325
User 108838 AUC after training: 0.7377109317681585
User 108838 improves AUC. Keeping the model.
[2024-12-02 17:59:51.117376] start test user 124915 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:51.540025] start test user 124915 41/567 recall augumented users by random, augumented_users = [112572, 110618, 8355, 27028, 117134, 26715, 92243, 59838, 102939, 62678, 93839, 67103, 63311, 134561, 132298, 24340, 91928, 32580, 113222, 68143, 83121, 24117, 104807, 119916, 81725, 3591, 134385, 61856, 76421, 41827, 32776, 29597, 61070, 98200, 1866, 35405, 96713, 28613, 13576, 99482, 132790, 4634, 91831, 102838, 77084, 70765, 4747, 30078, 83997, 96996]
[2024-12-02 17:59:51.554692] user = 124915 Cloud 41/567
[2024-12-02 17:59:51.564233] user = 124915 Local 41/567
[2024-12-02 17:59:51.590763] user = 124915 Local+ 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:54.215611] user = 124915 MPDA- 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 112572 0/50 current_auc = 1.0
User 112572 AUC after training: 1.0
User 112572 does not improve AUC. Reverting changes.
Training on augumented user 110618 1/50 current_auc = 1.0
User 110618 AUC after training: 1.0
User 110618 does not improve AUC. Reverting changes.
Training on augumented user 8355 2/50 current_auc = 1.0
User 8355 AUC after training: 1.0
User 8355 does not improve AUC. Reverting changes.
Training on augumented user 27028 3/50 current_auc = 1.0
User 27028 AUC after training: 1.0
User 27028 does not improve AUC. Reverting changes.
Training on augumented user 117134 4/50 current_auc = 1.0
User 117134 AUC after training: 1.0
User 117134 does not improve AUC. Reverting changes.
Training on augumented user 26715 5/50 current_auc = 1.0
User 26715 AUC after training: 1.0
User 26715 does not improve AUC. Reverting changes.
Training on augumented user 92243 6/50 current_auc = 1.0
User 92243 AUC after training: 1.0
User 92243 does not improve AUC. Reverting changes.
Training on augumented user 59838 7/50 current_auc = 1.0
User 59838 AUC after training: 1.0
User 59838 does not improve AUC. Reverting changes.
Training on augumented user 102939 8/50 current_auc = 1.0
User 102939 AUC after training: 1.0
User 102939 does not improve AUC. Reverting changes.
Training on augumented user 62678 9/50 current_auc = 1.0
User 62678 AUC after training: 1.0
User 62678 does not improve AUC. Reverting changes.
Training on augumented user 93839 10/50 current_auc = 1.0
User 93839 AUC after training: 1.0
User 93839 does not improve AUC. Reverting changes.
Training on augumented user 67103 11/50 current_auc = 1.0
User 67103 AUC after training: 1.0
User 67103 does not improve AUC. Reverting changes.
Training on augumented user 63311 12/50 current_auc = 1.0
User 63311 AUC after training: 1.0
User 63311 does not improve AUC. Reverting changes.
Training on augumented user 134561 13/50 current_auc = 1.0
User 134561 AUC after training: 1.0
User 134561 does not improve AUC. Reverting changes.
Training on augumented user 132298 14/50 current_auc = 1.0
User 132298 AUC after training: 1.0
User 132298 does not improve AUC. Reverting changes.
Training on augumented user 24340 15/50 current_auc = 1.0
User 24340 AUC after training: 1.0
User 24340 does not improve AUC. Reverting changes.
Training on augumented user 91928 16/50 current_auc = 1.0
User 91928 AUC after training: 1.0
User 91928 does not improve AUC. Reverting changes.
Training on augumented user 32580 17/50 current_auc = 1.0
User 32580 AUC after training: 1.0
User 32580 does not improve AUC. Reverting changes.
Training on augumented user 113222 18/50 current_auc = 1.0
User 113222 AUC after training: 1.0
User 113222 does not improve AUC. Reverting changes.
Training on augumented user 68143 19/50 current_auc = 1.0
User 68143 AUC after training: 1.0
User 68143 does not improve AUC. Reverting changes.
Training on augumented user 83121 20/50 current_auc = 1.0
User 83121 AUC after training: 1.0
User 83121 does not improve AUC. Reverting changes.
Training on augumented user 24117 21/50 current_auc = 1.0
User 24117 AUC after training: 1.0
User 24117 does not improve AUC. Reverting changes.
Training on augumented user 104807 22/50 current_auc = 1.0
User 104807 AUC after training: 1.0
User 104807 does not improve AUC. Reverting changes.
Training on augumented user 119916 23/50 current_auc = 1.0
User 119916 AUC after training: 1.0
User 119916 does not improve AUC. Reverting changes.
Training on augumented user 81725 24/50 current_auc = 1.0
User 81725 AUC after training: 1.0
User 81725 does not improve AUC. Reverting changes.
Training on augumented user 3591 25/50 current_auc = 1.0
User 3591 AUC after training: 1.0
User 3591 does not improve AUC. Reverting changes.
Training on augumented user 134385 26/50 current_auc = 1.0
User 134385 AUC after training: 1.0
User 134385 does not improve AUC. Reverting changes.
Training on augumented user 61856 27/50 current_auc = 1.0
User 61856 AUC after training: 1.0
User 61856 does not improve AUC. Reverting changes.
Training on augumented user 76421 28/50 current_auc = 1.0
User 76421 AUC after training: 1.0
User 76421 does not improve AUC. Reverting changes.
Training on augumented user 41827 29/50 current_auc = 1.0
User 41827 AUC after training: 1.0
User 41827 does not improve AUC. Reverting changes.
Training on augumented user 32776 30/50 current_auc = 1.0
User 32776 AUC after training: 1.0
User 32776 does not improve AUC. Reverting changes.
Training on augumented user 29597 31/50 current_auc = 1.0
User 29597 AUC after training: 1.0
User 29597 does not improve AUC. Reverting changes.
Training on augumented user 61070 32/50 current_auc = 1.0
User 61070 AUC after training: 1.0
User 61070 does not improve AUC. Reverting changes.
Training on augumented user 98200 33/50 current_auc = 1.0
User 98200 AUC after training: 1.0
User 98200 does not improve AUC. Reverting changes.
Training on augumented user 1866 34/50 current_auc = 1.0
User 1866 AUC after training: 1.0
User 1866 does not improve AUC. Reverting changes.
Training on augumented user 35405 35/50 current_auc = 1.0
User 35405 AUC after training: 1.0
User 35405 does not improve AUC. Reverting changes.
Training on augumented user 96713 36/50 current_auc = 1.0
User 96713 AUC after training: 1.0
User 96713 does not improve AUC. Reverting changes.
Training on augumented user 28613 37/50 current_auc = 1.0
User 28613 AUC after training: 1.0
User 28613 does not improve AUC. Reverting changes.
Training on augumented user 13576 38/50 current_auc = 1.0
User 13576 AUC after training: 1.0
User 13576 does not improve AUC. Reverting changes.
Training on augumented user 99482 39/50 current_auc = 1.0
User 99482 AUC after training: 1.0
User 99482 does not improve AUC. Reverting changes.
Training on augumented user 132790 40/50 current_auc = 1.0
User 132790 AUC after training: 1.0
User 132790 does not improve AUC. Reverting changes.
Training on augumented user 4634 41/50 current_auc = 1.0
User 4634 AUC after training: 1.0
User 4634 does not improve AUC. Reverting changes.
Training on augumented user 91831 42/50 current_auc = 1.0
User 91831 AUC after training: 1.0
User 91831 does not improve AUC. Reverting changes.
Training on augumented user 102838 43/50 current_auc = 1.0
User 102838 AUC after training: 1.0
User 102838 does not improve AUC. Reverting changes.
Training on augumented user 77084 44/50 current_auc = 1.0
User 77084 AUC after training: 1.0
User 77084 does not improve AUC. Reverting changes.
Training on augumented user 70765 45/50 current_auc = 1.0
User 70765 AUC after training: 1.0
User 70765 does not improve AUC. Reverting changes.
Training on augumented user 4747 46/50 current_auc = 1.0
User 4747 AUC after training: 1.0
User 4747 does not improve AUC. Reverting changes.
Training on augumented user 30078 47/50 current_auc = 1.0
User 30078 AUC after training: 1.0
User 30078 does not improve AUC. Reverting changes.
Training on augumented user 83997 48/50 current_auc = 1.0
User 83997 AUC after training: 1.0
User 83997 does not improve AUC. Reverting changes.
Training on augumented user 96996 49/50 current_auc = 1.0
User 96996 AUC after training: 1.0
User 96996 does not improve AUC. Reverting changes.
[2024-12-02 18:00:24.767655] start test user 124922 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:25.179153] start test user 124922 42/567 recall augumented users by random, augumented_users = [104854, 92190, 45386, 104219, 18400, 138399, 51438, 108796, 121487, 58548, 114099, 86389, 56107, 45337, 85561, 63473, 57155, 93170, 136314, 83624, 126274, 78227, 20582, 73199, 85517, 4099, 109696, 21391, 136938, 88313, 106689, 9218, 122069, 68667, 113253, 77927, 118588, 117697, 135680, 84063, 92848, 68485, 25017, 119221, 42534, 55534, 36877, 5748, 53411, 116302]
[2024-12-02 18:00:25.194677] user = 124922 Cloud 42/567
[2024-12-02 18:00:25.213985] user = 124922 Local 42/567
[2024-12-02 18:00:25.319356] user = 124922 Local+ 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:28.169869] user = 124922 MPDA- 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6402597402597403
Training on augumented user 104854 0/50 current_auc = 0.6402597402597403
User 104854 AUC after training: 0.6402597402597403
User 104854 does not improve AUC. Reverting changes.
Training on augumented user 92190 1/50 current_auc = 0.6402597402597403
User 92190 AUC after training: 0.6415584415584416
User 92190 improves AUC. Keeping the model.
Training on augumented user 45386 2/50 current_auc = 0.6415584415584416
User 45386 AUC after training: 0.6412987012987013
User 45386 does not improve AUC. Reverting changes.
Training on augumented user 104219 3/50 current_auc = 0.6415584415584416
User 104219 AUC after training: 0.6412987012987013
User 104219 does not improve AUC. Reverting changes.
Training on augumented user 18400 4/50 current_auc = 0.6415584415584416
User 18400 AUC after training: 0.6410389610389611
User 18400 does not improve AUC. Reverting changes.
Training on augumented user 138399 5/50 current_auc = 0.6415584415584416
User 138399 AUC after training: 0.6407792207792208
User 138399 does not improve AUC. Reverting changes.
Training on augumented user 51438 6/50 current_auc = 0.6415584415584416
User 51438 AUC after training: 0.6407792207792208
User 51438 does not improve AUC. Reverting changes.
Training on augumented user 108796 7/50 current_auc = 0.6415584415584416
User 108796 AUC after training: 0.6407792207792208
User 108796 does not improve AUC. Reverting changes.
Training on augumented user 121487 8/50 current_auc = 0.6415584415584416
User 121487 AUC after training: 0.6415584415584417
User 121487 improves AUC. Keeping the model.
Training on augumented user 58548 9/50 current_auc = 0.6415584415584417
User 58548 AUC after training: 0.6415584415584416
User 58548 does not improve AUC. Reverting changes.
Training on augumented user 114099 10/50 current_auc = 0.6415584415584417
User 114099 AUC after training: 0.6412987012987013
User 114099 does not improve AUC. Reverting changes.
Training on augumented user 86389 11/50 current_auc = 0.6415584415584417
User 86389 AUC after training: 0.6412987012987013
User 86389 does not improve AUC. Reverting changes.
Training on augumented user 56107 12/50 current_auc = 0.6415584415584417
User 56107 AUC after training: 0.6407792207792208
User 56107 does not improve AUC. Reverting changes.
Training on augumented user 45337 13/50 current_auc = 0.6415584415584417
User 45337 AUC after training: 0.6410389610389611
User 45337 does not improve AUC. Reverting changes.
Training on augumented user 85561 14/50 current_auc = 0.6415584415584417
User 85561 AUC after training: 0.6415584415584416
User 85561 does not improve AUC. Reverting changes.
Training on augumented user 63473 15/50 current_auc = 0.6415584415584417
User 63473 AUC after training: 0.6405194805194805
User 63473 does not improve AUC. Reverting changes.
Training on augumented user 57155 16/50 current_auc = 0.6415584415584417
User 57155 AUC after training: 0.6412987012987013
User 57155 does not improve AUC. Reverting changes.
Training on augumented user 93170 17/50 current_auc = 0.6415584415584417
User 93170 AUC after training: 0.6418181818181818
User 93170 improves AUC. Keeping the model.
Training on augumented user 136314 18/50 current_auc = 0.6418181818181818
User 136314 AUC after training: 0.6410389610389611
User 136314 does not improve AUC. Reverting changes.
Training on augumented user 83624 19/50 current_auc = 0.6418181818181818
User 83624 AUC after training: 0.6405194805194805
User 83624 does not improve AUC. Reverting changes.
Training on augumented user 126274 20/50 current_auc = 0.6418181818181818
User 126274 AUC after training: 0.6412987012987013
User 126274 does not improve AUC. Reverting changes.
Training on augumented user 78227 21/50 current_auc = 0.6418181818181818
User 78227 AUC after training: 0.6407792207792208
User 78227 does not improve AUC. Reverting changes.
Training on augumented user 20582 22/50 current_auc = 0.6418181818181818
User 20582 AUC after training: 0.6415584415584416
User 20582 does not improve AUC. Reverting changes.
Training on augumented user 73199 23/50 current_auc = 0.6418181818181818
User 73199 AUC after training: 0.6415584415584416
User 73199 does not improve AUC. Reverting changes.
Training on augumented user 85517 24/50 current_auc = 0.6418181818181818
User 85517 AUC after training: 0.6407792207792208
User 85517 does not improve AUC. Reverting changes.
Training on augumented user 4099 25/50 current_auc = 0.6418181818181818
User 4099 AUC after training: 0.6415584415584417
User 4099 does not improve AUC. Reverting changes.
Training on augumented user 109696 26/50 current_auc = 0.6418181818181818
User 109696 AUC after training: 0.6410389610389611
User 109696 does not improve AUC. Reverting changes.
Training on augumented user 21391 27/50 current_auc = 0.6418181818181818
User 21391 AUC after training: 0.6384415584415585
User 21391 does not improve AUC. Reverting changes.
Training on augumented user 136938 28/50 current_auc = 0.6418181818181818
User 136938 AUC after training: 0.6415584415584416
User 136938 does not improve AUC. Reverting changes.
Training on augumented user 88313 29/50 current_auc = 0.6418181818181818
User 88313 AUC after training: 0.6412987012987013
User 88313 does not improve AUC. Reverting changes.
Training on augumented user 106689 30/50 current_auc = 0.6418181818181818
User 106689 AUC after training: 0.6410389610389611
User 106689 does not improve AUC. Reverting changes.
Training on augumented user 9218 31/50 current_auc = 0.6418181818181818
User 9218 AUC after training: 0.6410389610389611
User 9218 does not improve AUC. Reverting changes.
Training on augumented user 122069 32/50 current_auc = 0.6418181818181818
User 122069 AUC after training: 0.6418181818181818
User 122069 does not improve AUC. Reverting changes.
Training on augumented user 68667 33/50 current_auc = 0.6418181818181818
User 68667 AUC after training: 0.6412987012987013
User 68667 does not improve AUC. Reverting changes.
Training on augumented user 113253 34/50 current_auc = 0.6418181818181818
User 113253 AUC after training: 0.6407792207792208
User 113253 does not improve AUC. Reverting changes.
Training on augumented user 77927 35/50 current_auc = 0.6418181818181818
User 77927 AUC after training: 0.6410389610389611
User 77927 does not improve AUC. Reverting changes.
Training on augumented user 118588 36/50 current_auc = 0.6418181818181818
User 118588 AUC after training: 0.6397402597402597
User 118588 does not improve AUC. Reverting changes.
Training on augumented user 117697 37/50 current_auc = 0.6418181818181818
User 117697 AUC after training: 0.6410389610389611
User 117697 does not improve AUC. Reverting changes.
Training on augumented user 135680 38/50 current_auc = 0.6418181818181818
User 135680 AUC after training: 0.6415584415584416
User 135680 does not improve AUC. Reverting changes.
Training on augumented user 84063 39/50 current_auc = 0.6418181818181818
User 84063 AUC after training: 0.6392207792207792
User 84063 does not improve AUC. Reverting changes.
Training on augumented user 92848 40/50 current_auc = 0.6418181818181818
User 92848 AUC after training: 0.6402597402597402
User 92848 does not improve AUC. Reverting changes.
Training on augumented user 68485 41/50 current_auc = 0.6418181818181818
User 68485 AUC after training: 0.6397402597402597
User 68485 does not improve AUC. Reverting changes.
Training on augumented user 25017 42/50 current_auc = 0.6418181818181818
User 25017 AUC after training: 0.6415584415584416
User 25017 does not improve AUC. Reverting changes.
Training on augumented user 119221 43/50 current_auc = 0.6418181818181818
User 119221 AUC after training: 0.6407792207792208
User 119221 does not improve AUC. Reverting changes.
Training on augumented user 42534 44/50 current_auc = 0.6418181818181818
User 42534 AUC after training: 0.6412987012987014
User 42534 does not improve AUC. Reverting changes.
Training on augumented user 55534 45/50 current_auc = 0.6418181818181818
User 55534 AUC after training: 0.6412987012987013
User 55534 does not improve AUC. Reverting changes.
Training on augumented user 36877 46/50 current_auc = 0.6418181818181818
User 36877 AUC after training: 0.6397402597402597
User 36877 does not improve AUC. Reverting changes.
Training on augumented user 5748 47/50 current_auc = 0.6418181818181818
User 5748 AUC after training: 0.6399999999999999
User 5748 does not improve AUC. Reverting changes.
Training on augumented user 53411 48/50 current_auc = 0.6418181818181818
User 53411 AUC after training: 0.6415584415584416
User 53411 does not improve AUC. Reverting changes.
Training on augumented user 116302 49/50 current_auc = 0.6418181818181818
User 116302 AUC after training: 0.6406493506493507
User 116302 does not improve AUC. Reverting changes.
[2024-12-02 18:00:55.961851] start test user 124933 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:56.751373] start test user 124933 43/567 recall augumented users by random, augumented_users = [80079, 57753, 73367, 10904, 101635, 33587, 74681, 95527, 90992, 113452, 125472, 7112, 53084, 24184, 7739, 25240, 26343, 1698, 21040, 107828, 103629, 21845, 42912, 19519, 89590, 39335, 58662, 46585, 46378, 3507, 71813, 21279, 92326, 64178, 62178, 37740, 27865, 108083, 92703, 88510, 24270, 110717, 72232, 32723, 95012, 43420, 62868, 8780, 33006, 55966]
[2024-12-02 18:00:56.773075] user = 124933 Cloud 43/567
[2024-12-02 18:00:56.820836] user = 124933 Local 43/567
[2024-12-02 18:00:57.098978] user = 124933 Local+ 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:59.726398] user = 124933 MPDA- 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5463941470212519
Training on augumented user 80079 0/50 current_auc = 0.5463941470212519
User 80079 AUC after training: 0.5465102775519685
User 80079 improves AUC. Keeping the model.
Training on augumented user 57753 1/50 current_auc = 0.5465102775519685
User 57753 AUC after training: 0.5462780164905353
User 57753 does not improve AUC. Reverting changes.
Training on augumented user 73367 2/50 current_auc = 0.5465102775519685
User 73367 AUC after training: 0.546858669144118
User 73367 improves AUC. Keeping the model.
Training on augumented user 10904 3/50 current_auc = 0.546858669144118
User 10904 AUC after training: 0.5477877133898501
User 10904 improves AUC. Keeping the model.
Training on augumented user 101635 4/50 current_auc = 0.5477877133898501
User 101635 AUC after training: 0.5483683660434329
User 101635 improves AUC. Keeping the model.
Training on augumented user 33587 5/50 current_auc = 0.5483683660434329
User 33587 AUC after training: 0.5472070607362676
User 33587 does not improve AUC. Reverting changes.
Training on augumented user 74681 6/50 current_auc = 0.5483683660434329
User 74681 AUC after training: 0.5481361049819997
User 74681 does not improve AUC. Reverting changes.
Training on augumented user 95527 7/50 current_auc = 0.5483683660434329
User 95527 AUC after training: 0.5491812797584484
User 95527 improves AUC. Keeping the model.
Training on augumented user 90992 8/50 current_auc = 0.5491812797584484
User 90992 AUC after training: 0.5469747996748345
User 90992 does not improve AUC. Reverting changes.
Training on augumented user 113452 9/50 current_auc = 0.5491812797584484
User 113452 AUC after training: 0.5483683660434329
User 113452 does not improve AUC. Reverting changes.
Training on augumented user 125472 10/50 current_auc = 0.5491812797584484
User 125472 AUC after training: 0.5488328881662989
User 125472 does not improve AUC. Reverting changes.
Training on augumented user 7112 11/50 current_auc = 0.5491812797584484
User 7112 AUC after training: 0.5491812797584485
User 7112 improves AUC. Keeping the model.
Training on augumented user 53084 12/50 current_auc = 0.5491812797584485
User 53084 AUC after training: 0.5482522355127163
User 53084 does not improve AUC. Reverting changes.
Training on augumented user 24184 13/50 current_auc = 0.5491812797584485
User 24184 AUC after training: 0.549065149227732
User 24184 does not improve AUC. Reverting changes.
Training on augumented user 7739 14/50 current_auc = 0.5491812797584485
User 7739 AUC after training: 0.5497619324120311
User 7739 improves AUC. Keeping the model.
Training on augumented user 25240 15/50 current_auc = 0.5497619324120311
User 25240 AUC after training: 0.5499941934734642
User 25240 improves AUC. Keeping the model.
Training on augumented user 26343 16/50 current_auc = 0.5499941934734642
User 26343 AUC after training: 0.5501103240041807
User 26343 improves AUC. Keeping the model.
Training on augumented user 1698 17/50 current_auc = 0.5501103240041807
User 1698 AUC after training: 0.5491812797584485
User 1698 does not improve AUC. Reverting changes.
Training on augumented user 21040 18/50 current_auc = 0.5501103240041807
User 21040 AUC after training: 0.5489490186970154
User 21040 does not improve AUC. Reverting changes.
Training on augumented user 107828 19/50 current_auc = 0.5501103240041807
User 107828 AUC after training: 0.5504587155963303
User 107828 improves AUC. Keeping the model.
Training on augumented user 103629 20/50 current_auc = 0.5504587155963303
User 103629 AUC after training: 0.5501103240041807
User 103629 does not improve AUC. Reverting changes.
Training on augumented user 21845 21/50 current_auc = 0.5504587155963303
User 21845 AUC after training: 0.5481361049819997
User 21845 does not improve AUC. Reverting changes.
Training on augumented user 42912 22/50 current_auc = 0.5504587155963303
User 42912 AUC after training: 0.5502264545348972
User 42912 does not improve AUC. Reverting changes.
Training on augumented user 19519 23/50 current_auc = 0.5504587155963303
User 19519 AUC after training: 0.5504587155963303
User 19519 does not improve AUC. Reverting changes.
Training on augumented user 89590 24/50 current_auc = 0.5504587155963303
User 89590 AUC after training: 0.5498780629427477
User 89590 does not improve AUC. Reverting changes.
Training on augumented user 39335 25/50 current_auc = 0.5504587155963303
User 39335 AUC after training: 0.5499941934734641
User 39335 does not improve AUC. Reverting changes.
Training on augumented user 58662 26/50 current_auc = 0.5504587155963303
User 58662 AUC after training: 0.5502264545348973
User 58662 does not improve AUC. Reverting changes.
Training on augumented user 46585 27/50 current_auc = 0.5504587155963303
User 46585 AUC after training: 0.5501103240041807
User 46585 does not improve AUC. Reverting changes.
Training on augumented user 46378 28/50 current_auc = 0.5504587155963303
User 46378 AUC after training: 0.5505748461270468
User 46378 improves AUC. Keeping the model.
Training on augumented user 3507 29/50 current_auc = 0.5505748461270468
User 3507 AUC after training: 0.5506909766577633
User 3507 improves AUC. Keeping the model.
Training on augumented user 71813 30/50 current_auc = 0.5506909766577633
User 71813 AUC after training: 0.5497619324120311
User 71813 does not improve AUC. Reverting changes.
Training on augumented user 21279 31/50 current_auc = 0.5506909766577633
User 21279 AUC after training: 0.5504587155963303
User 21279 does not improve AUC. Reverting changes.
Training on augumented user 92326 32/50 current_auc = 0.5506909766577633
User 92326 AUC after training: 0.5505748461270468
User 92326 does not improve AUC. Reverting changes.
Training on augumented user 64178 33/50 current_auc = 0.5506909766577633
User 64178 AUC after training: 0.5508071071884798
User 64178 improves AUC. Keeping the model.
Training on augumented user 62178 34/50 current_auc = 0.5508071071884798
User 62178 AUC after training: 0.5505748461270468
User 62178 does not improve AUC. Reverting changes.
Training on augumented user 37740 35/50 current_auc = 0.5508071071884798
User 37740 AUC after training: 0.5480199744512833
User 37740 does not improve AUC. Reverting changes.
Training on augumented user 27865 36/50 current_auc = 0.5508071071884798
User 27865 AUC after training: 0.5509232377191964
User 27865 improves AUC. Keeping the model.
Training on augumented user 108083 37/50 current_auc = 0.5509232377191964
User 108083 AUC after training: 0.5508071071884798
User 108083 does not improve AUC. Reverting changes.
Training on augumented user 92703 38/50 current_auc = 0.5509232377191964
User 92703 AUC after training: 0.549297410289165
User 92703 does not improve AUC. Reverting changes.
Training on augumented user 88510 39/50 current_auc = 0.5509232377191964
User 88510 AUC after training: 0.5506909766577633
User 88510 does not improve AUC. Reverting changes.
Training on augumented user 24270 40/50 current_auc = 0.5509232377191964
User 24270 AUC after training: 0.5503425850656137
User 24270 does not improve AUC. Reverting changes.
Training on augumented user 110717 41/50 current_auc = 0.5509232377191964
User 110717 AUC after training: 0.5509232377191964
User 110717 does not improve AUC. Reverting changes.
Training on augumented user 72232 42/50 current_auc = 0.5509232377191964
User 72232 AUC after training: 0.5503425850656137
User 72232 does not improve AUC. Reverting changes.
Training on augumented user 32723 43/50 current_auc = 0.5509232377191964
User 32723 AUC after training: 0.5502264545348972
User 32723 does not improve AUC. Reverting changes.
Training on augumented user 95012 44/50 current_auc = 0.5509232377191964
User 95012 AUC after training: 0.5506909766577633
User 95012 does not improve AUC. Reverting changes.
Training on augumented user 43420 45/50 current_auc = 0.5509232377191964
User 43420 AUC after training: 0.5504587155963302
User 43420 does not improve AUC. Reverting changes.
Training on augumented user 62868 46/50 current_auc = 0.5509232377191964
User 62868 AUC after training: 0.5505748461270468
User 62868 does not improve AUC. Reverting changes.
Training on augumented user 8780 47/50 current_auc = 0.5509232377191964
User 8780 AUC after training: 0.5506909766577632
User 8780 does not improve AUC. Reverting changes.
Training on augumented user 33006 48/50 current_auc = 0.5509232377191964
User 33006 AUC after training: 0.5503425850656137
User 33006 does not improve AUC. Reverting changes.
Training on augumented user 55966 49/50 current_auc = 0.5509232377191964
User 55966 AUC after training: 0.5506909766577633
User 55966 does not improve AUC. Reverting changes.
[2024-12-02 18:01:32.439452] start test user 124952 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:32.971050] start test user 124952 44/567 recall augumented users by random, augumented_users = [38296, 77200, 26174, 101263, 89932, 90901, 120774, 79674, 131274, 102252, 87731, 119676, 55002, 46115, 16044, 84469, 47721, 60560, 6115, 97713, 130157, 58037, 63538, 20778, 18189, 89099, 80323, 58943, 39077, 113984, 47650, 3476, 88841, 92673, 70027, 11193, 83496, 79362, 105007, 64925, 28651, 38978, 93115, 72978, 125895, 19315, 77385, 38404, 76487, 66035]
[2024-12-02 18:01:32.999132] user = 124952 Cloud 44/567
[2024-12-02 18:01:33.008428] user = 124952 Local 44/567
[2024-12-02 18:01:33.097650] user = 124952 Local+ 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:35.902256] user = 124952 MPDA- 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.65
Training on augumented user 38296 0/50 current_auc = 0.65
User 38296 AUC after training: 0.65
User 38296 does not improve AUC. Reverting changes.
Training on augumented user 77200 1/50 current_auc = 0.65
User 77200 AUC after training: 0.65
User 77200 does not improve AUC. Reverting changes.
Training on augumented user 26174 2/50 current_auc = 0.65
User 26174 AUC after training: 0.65
User 26174 does not improve AUC. Reverting changes.
Training on augumented user 101263 3/50 current_auc = 0.65
User 101263 AUC after training: 0.65
User 101263 does not improve AUC. Reverting changes.
Training on augumented user 89932 4/50 current_auc = 0.65
User 89932 AUC after training: 0.65
User 89932 does not improve AUC. Reverting changes.
Training on augumented user 90901 5/50 current_auc = 0.65
User 90901 AUC after training: 0.65
User 90901 does not improve AUC. Reverting changes.
Training on augumented user 120774 6/50 current_auc = 0.65
User 120774 AUC after training: 0.65
User 120774 does not improve AUC. Reverting changes.
Training on augumented user 79674 7/50 current_auc = 0.65
User 79674 AUC after training: 0.65
User 79674 does not improve AUC. Reverting changes.
Training on augumented user 131274 8/50 current_auc = 0.65
User 131274 AUC after training: 0.65
User 131274 does not improve AUC. Reverting changes.
Training on augumented user 102252 9/50 current_auc = 0.65
User 102252 AUC after training: 0.6666666666666666
User 102252 improves AUC. Keeping the model.
Training on augumented user 87731 10/50 current_auc = 0.6666666666666666
User 87731 AUC after training: 0.6666666666666666
User 87731 does not improve AUC. Reverting changes.
Training on augumented user 119676 11/50 current_auc = 0.6666666666666666
User 119676 AUC after training: 0.6666666666666666
User 119676 does not improve AUC. Reverting changes.
Training on augumented user 55002 12/50 current_auc = 0.6666666666666666
User 55002 AUC after training: 0.6666666666666666
User 55002 does not improve AUC. Reverting changes.
Training on augumented user 46115 13/50 current_auc = 0.6666666666666666
User 46115 AUC after training: 0.6499999999999999
User 46115 does not improve AUC. Reverting changes.
Training on augumented user 16044 14/50 current_auc = 0.6666666666666666
User 16044 AUC after training: 0.6666666666666666
User 16044 does not improve AUC. Reverting changes.
Training on augumented user 84469 15/50 current_auc = 0.6666666666666666
User 84469 AUC after training: 0.6666666666666666
User 84469 does not improve AUC. Reverting changes.
Training on augumented user 47721 16/50 current_auc = 0.6666666666666666
User 47721 AUC after training: 0.6666666666666666
User 47721 does not improve AUC. Reverting changes.
Training on augumented user 60560 17/50 current_auc = 0.6666666666666666
User 60560 AUC after training: 0.6666666666666666
User 60560 does not improve AUC. Reverting changes.
Training on augumented user 6115 18/50 current_auc = 0.6666666666666666
User 6115 AUC after training: 0.6499999999999999
User 6115 does not improve AUC. Reverting changes.
Training on augumented user 97713 19/50 current_auc = 0.6666666666666666
User 97713 AUC after training: 0.6666666666666666
User 97713 does not improve AUC. Reverting changes.
Training on augumented user 130157 20/50 current_auc = 0.6666666666666666
User 130157 AUC after training: 0.6499999999999999
User 130157 does not improve AUC. Reverting changes.
Training on augumented user 58037 21/50 current_auc = 0.6666666666666666
User 58037 AUC after training: 0.6666666666666666
User 58037 does not improve AUC. Reverting changes.
Training on augumented user 63538 22/50 current_auc = 0.6666666666666666
User 63538 AUC after training: 0.65
User 63538 does not improve AUC. Reverting changes.
Training on augumented user 20778 23/50 current_auc = 0.6666666666666666
User 20778 AUC after training: 0.6666666666666666
User 20778 does not improve AUC. Reverting changes.
Training on augumented user 18189 24/50 current_auc = 0.6666666666666666
User 18189 AUC after training: 0.6499999999999999
User 18189 does not improve AUC. Reverting changes.
Training on augumented user 89099 25/50 current_auc = 0.6666666666666666
User 89099 AUC after training: 0.6666666666666666
User 89099 does not improve AUC. Reverting changes.
Training on augumented user 80323 26/50 current_auc = 0.6666666666666666
User 80323 AUC after training: 0.6666666666666666
User 80323 does not improve AUC. Reverting changes.
Training on augumented user 58943 27/50 current_auc = 0.6666666666666666
User 58943 AUC after training: 0.6666666666666666
User 58943 does not improve AUC. Reverting changes.
Training on augumented user 39077 28/50 current_auc = 0.6666666666666666
User 39077 AUC after training: 0.6666666666666666
User 39077 does not improve AUC. Reverting changes.
Training on augumented user 113984 29/50 current_auc = 0.6666666666666666
User 113984 AUC after training: 0.6666666666666666
User 113984 does not improve AUC. Reverting changes.
Training on augumented user 47650 30/50 current_auc = 0.6666666666666666
User 47650 AUC after training: 0.6666666666666666
User 47650 does not improve AUC. Reverting changes.
Training on augumented user 3476 31/50 current_auc = 0.6666666666666666
User 3476 AUC after training: 0.6666666666666666
User 3476 does not improve AUC. Reverting changes.
Training on augumented user 88841 32/50 current_auc = 0.6666666666666666
User 88841 AUC after training: 0.6666666666666666
User 88841 does not improve AUC. Reverting changes.
Training on augumented user 92673 33/50 current_auc = 0.6666666666666666
User 92673 AUC after training: 0.6499999999999999
User 92673 does not improve AUC. Reverting changes.
Training on augumented user 70027 34/50 current_auc = 0.6666666666666666
User 70027 AUC after training: 0.6666666666666666
User 70027 does not improve AUC. Reverting changes.
Training on augumented user 11193 35/50 current_auc = 0.6666666666666666
User 11193 AUC after training: 0.6666666666666666
User 11193 does not improve AUC. Reverting changes.
Training on augumented user 83496 36/50 current_auc = 0.6666666666666666
User 83496 AUC after training: 0.6666666666666666
User 83496 does not improve AUC. Reverting changes.
Training on augumented user 79362 37/50 current_auc = 0.6666666666666666
User 79362 AUC after training: 0.6666666666666666
User 79362 does not improve AUC. Reverting changes.
Training on augumented user 105007 38/50 current_auc = 0.6666666666666666
User 105007 AUC after training: 0.6666666666666666
User 105007 does not improve AUC. Reverting changes.
Training on augumented user 64925 39/50 current_auc = 0.6666666666666666
User 64925 AUC after training: 0.6666666666666666
User 64925 does not improve AUC. Reverting changes.
Training on augumented user 28651 40/50 current_auc = 0.6666666666666666
User 28651 AUC after training: 0.6666666666666666
User 28651 does not improve AUC. Reverting changes.
Training on augumented user 38978 41/50 current_auc = 0.6666666666666666
User 38978 AUC after training: 0.6666666666666666
User 38978 does not improve AUC. Reverting changes.
Training on augumented user 93115 42/50 current_auc = 0.6666666666666666
User 93115 AUC after training: 0.6499999999999999
User 93115 does not improve AUC. Reverting changes.
Training on augumented user 72978 43/50 current_auc = 0.6666666666666666
User 72978 AUC after training: 0.6666666666666666
User 72978 does not improve AUC. Reverting changes.
Training on augumented user 125895 44/50 current_auc = 0.6666666666666666
User 125895 AUC after training: 0.6666666666666666
User 125895 does not improve AUC. Reverting changes.
Training on augumented user 19315 45/50 current_auc = 0.6666666666666666
User 19315 AUC after training: 0.6666666666666666
User 19315 does not improve AUC. Reverting changes.
Training on augumented user 77385 46/50 current_auc = 0.6666666666666666
User 77385 AUC after training: 0.6666666666666666
User 77385 does not improve AUC. Reverting changes.
Training on augumented user 38404 47/50 current_auc = 0.6666666666666666
User 38404 AUC after training: 0.6499999999999999
User 38404 does not improve AUC. Reverting changes.
Training on augumented user 76487 48/50 current_auc = 0.6666666666666666
User 76487 AUC after training: 0.6666666666666666
User 76487 does not improve AUC. Reverting changes.
Training on augumented user 66035 49/50 current_auc = 0.6666666666666666
User 66035 AUC after training: 0.6666666666666666
User 66035 does not improve AUC. Reverting changes.
[2024-12-02 18:02:05.929973] start test user 124963 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:06.522796] start test user 124963 45/567 recall augumented users by random, augumented_users = [112103, 68659, 122018, 48556, 32103, 129306, 113891, 70912, 88800, 132273, 12853, 124732, 13752, 45917, 17702, 71854, 79788, 17901, 107504, 103914, 27103, 109251, 116963, 36863, 100413, 91602, 42502, 36218, 50734, 67196, 38878, 10881, 135076, 119434, 4814, 79337, 8210, 31739, 103477, 59491, 34233, 9926, 26648, 97719, 39382, 134895, 100101, 92274, 88721, 122892]
[2024-12-02 18:02:06.548090] user = 124963 Cloud 45/567
[2024-12-02 18:02:06.559003] user = 124963 Local 45/567
[2024-12-02 18:02:06.678521] user = 124963 Local+ 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:09.751494] user = 124963 MPDA- 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5681818181818181
Training on augumented user 112103 0/50 current_auc = 0.5681818181818181
User 112103 AUC after training: 0.5681818181818181
User 112103 does not improve AUC. Reverting changes.
Training on augumented user 68659 1/50 current_auc = 0.5681818181818181
User 68659 AUC after training: 0.5681818181818181
User 68659 does not improve AUC. Reverting changes.
Training on augumented user 122018 2/50 current_auc = 0.5681818181818181
User 122018 AUC after training: 0.5757575757575757
User 122018 improves AUC. Keeping the model.
Training on augumented user 48556 3/50 current_auc = 0.5757575757575757
User 48556 AUC after training: 0.5757575757575757
User 48556 does not improve AUC. Reverting changes.
Training on augumented user 32103 4/50 current_auc = 0.5757575757575757
User 32103 AUC after training: 0.5757575757575757
User 32103 does not improve AUC. Reverting changes.
Training on augumented user 129306 5/50 current_auc = 0.5757575757575757
User 129306 AUC after training: 0.5681818181818181
User 129306 does not improve AUC. Reverting changes.
Training on augumented user 113891 6/50 current_auc = 0.5757575757575757
User 113891 AUC after training: 0.5757575757575757
User 113891 does not improve AUC. Reverting changes.
Training on augumented user 70912 7/50 current_auc = 0.5757575757575757
User 70912 AUC after training: 0.5757575757575757
User 70912 does not improve AUC. Reverting changes.
Training on augumented user 88800 8/50 current_auc = 0.5757575757575757
User 88800 AUC after training: 0.5757575757575757
User 88800 does not improve AUC. Reverting changes.
Training on augumented user 132273 9/50 current_auc = 0.5757575757575757
User 132273 AUC after training: 0.5757575757575757
User 132273 does not improve AUC. Reverting changes.
Training on augumented user 12853 10/50 current_auc = 0.5757575757575757
User 12853 AUC after training: 0.5681818181818181
User 12853 does not improve AUC. Reverting changes.
Training on augumented user 124732 11/50 current_auc = 0.5757575757575757
User 124732 AUC after training: 0.5757575757575757
User 124732 does not improve AUC. Reverting changes.
Training on augumented user 13752 12/50 current_auc = 0.5757575757575757
User 13752 AUC after training: 0.5757575757575757
User 13752 does not improve AUC. Reverting changes.
Training on augumented user 45917 13/50 current_auc = 0.5757575757575757
User 45917 AUC after training: 0.5681818181818181
User 45917 does not improve AUC. Reverting changes.
Training on augumented user 17702 14/50 current_auc = 0.5757575757575757
User 17702 AUC after training: 0.5681818181818181
User 17702 does not improve AUC. Reverting changes.
Training on augumented user 71854 15/50 current_auc = 0.5757575757575757
User 71854 AUC after training: 0.5681818181818181
User 71854 does not improve AUC. Reverting changes.
Training on augumented user 79788 16/50 current_auc = 0.5757575757575757
User 79788 AUC after training: 0.5757575757575757
User 79788 does not improve AUC. Reverting changes.
Training on augumented user 17901 17/50 current_auc = 0.5757575757575757
User 17901 AUC after training: 0.5757575757575757
User 17901 does not improve AUC. Reverting changes.
Training on augumented user 107504 18/50 current_auc = 0.5757575757575757
User 107504 AUC after training: 0.5757575757575757
User 107504 does not improve AUC. Reverting changes.
Training on augumented user 103914 19/50 current_auc = 0.5757575757575757
User 103914 AUC after training: 0.5757575757575757
User 103914 does not improve AUC. Reverting changes.
Training on augumented user 27103 20/50 current_auc = 0.5757575757575757
User 27103 AUC after training: 0.5757575757575757
User 27103 does not improve AUC. Reverting changes.
Training on augumented user 109251 21/50 current_auc = 0.5757575757575757
User 109251 AUC after training: 0.5757575757575757
User 109251 does not improve AUC. Reverting changes.
Training on augumented user 116963 22/50 current_auc = 0.5757575757575757
User 116963 AUC after training: 0.5681818181818181
User 116963 does not improve AUC. Reverting changes.
Training on augumented user 36863 23/50 current_auc = 0.5757575757575757
User 36863 AUC after training: 0.5681818181818181
User 36863 does not improve AUC. Reverting changes.
Training on augumented user 100413 24/50 current_auc = 0.5757575757575757
User 100413 AUC after training: 0.5757575757575757
User 100413 does not improve AUC. Reverting changes.
Training on augumented user 91602 25/50 current_auc = 0.5757575757575757
User 91602 AUC after training: 0.5757575757575757
User 91602 does not improve AUC. Reverting changes.
Training on augumented user 42502 26/50 current_auc = 0.5757575757575757
User 42502 AUC after training: 0.5681818181818181
User 42502 does not improve AUC. Reverting changes.
Training on augumented user 36218 27/50 current_auc = 0.5757575757575757
User 36218 AUC after training: 0.5757575757575757
User 36218 does not improve AUC. Reverting changes.
Training on augumented user 50734 28/50 current_auc = 0.5757575757575757
User 50734 AUC after training: 0.5681818181818181
User 50734 does not improve AUC. Reverting changes.
Training on augumented user 67196 29/50 current_auc = 0.5757575757575757
User 67196 AUC after training: 0.5681818181818181
User 67196 does not improve AUC. Reverting changes.
Training on augumented user 38878 30/50 current_auc = 0.5757575757575757
User 38878 AUC after training: 0.5681818181818181
User 38878 does not improve AUC. Reverting changes.
Training on augumented user 10881 31/50 current_auc = 0.5757575757575757
User 10881 AUC after training: 0.5757575757575757
User 10881 does not improve AUC. Reverting changes.
Training on augumented user 135076 32/50 current_auc = 0.5757575757575757
User 135076 AUC after training: 0.5757575757575757
User 135076 does not improve AUC. Reverting changes.
Training on augumented user 119434 33/50 current_auc = 0.5757575757575757
User 119434 AUC after training: 0.5681818181818181
User 119434 does not improve AUC. Reverting changes.
Training on augumented user 4814 34/50 current_auc = 0.5757575757575757
User 4814 AUC after training: 0.5681818181818181
User 4814 does not improve AUC. Reverting changes.
Training on augumented user 79337 35/50 current_auc = 0.5757575757575757
User 79337 AUC after training: 0.5757575757575757
User 79337 does not improve AUC. Reverting changes.
Training on augumented user 8210 36/50 current_auc = 0.5757575757575757
User 8210 AUC after training: 0.5681818181818181
User 8210 does not improve AUC. Reverting changes.
Training on augumented user 31739 37/50 current_auc = 0.5757575757575757
User 31739 AUC after training: 0.5757575757575757
User 31739 does not improve AUC. Reverting changes.
Training on augumented user 103477 38/50 current_auc = 0.5757575757575757
User 103477 AUC after training: 0.5757575757575757
User 103477 does not improve AUC. Reverting changes.
Training on augumented user 59491 39/50 current_auc = 0.5757575757575757
User 59491 AUC after training: 0.5757575757575757
User 59491 does not improve AUC. Reverting changes.
Training on augumented user 34233 40/50 current_auc = 0.5757575757575757
User 34233 AUC after training: 0.5681818181818181
User 34233 does not improve AUC. Reverting changes.
Training on augumented user 9926 41/50 current_auc = 0.5757575757575757
User 9926 AUC after training: 0.5757575757575757
User 9926 does not improve AUC. Reverting changes.
Training on augumented user 26648 42/50 current_auc = 0.5757575757575757
User 26648 AUC after training: 0.5757575757575757
User 26648 does not improve AUC. Reverting changes.
Training on augumented user 97719 43/50 current_auc = 0.5757575757575757
User 97719 AUC after training: 0.5681818181818181
User 97719 does not improve AUC. Reverting changes.
Training on augumented user 39382 44/50 current_auc = 0.5757575757575757
User 39382 AUC after training: 0.5757575757575757
User 39382 does not improve AUC. Reverting changes.
Training on augumented user 134895 45/50 current_auc = 0.5757575757575757
User 134895 AUC after training: 0.5757575757575757
User 134895 does not improve AUC. Reverting changes.
Training on augumented user 100101 46/50 current_auc = 0.5757575757575757
User 100101 AUC after training: 0.5757575757575757
User 100101 does not improve AUC. Reverting changes.
Training on augumented user 92274 47/50 current_auc = 0.5757575757575757
User 92274 AUC after training: 0.5681818181818181
User 92274 does not improve AUC. Reverting changes.
Training on augumented user 88721 48/50 current_auc = 0.5757575757575757
User 88721 AUC after training: 0.5757575757575757
User 88721 does not improve AUC. Reverting changes.
Training on augumented user 122892 49/50 current_auc = 0.5757575757575757
User 122892 AUC after training: 0.5757575757575757
User 122892 does not improve AUC. Reverting changes.
[2024-12-02 18:02:40.633949] start test user 125007 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:41.048090] start test user 125007 46/567 recall augumented users by random, augumented_users = [88307, 97004, 86181, 61340, 108959, 48576, 84862, 70511, 32761, 70469, 68877, 75625, 14154, 112154, 19559, 52433, 104137, 62043, 34481, 607, 21082, 124520, 92802, 17601, 60519, 121243, 27805, 10629, 112122, 114946, 65803, 83370, 112924, 6728, 19493, 11973, 60151, 37499, 13987, 122328, 125677, 84392, 62107, 99814, 98323, 90128, 58132, 35924, 104675, 134851]
[2024-12-02 18:02:41.062601] user = 125007 Cloud 46/567
[2024-12-02 18:02:41.107652] user = 125007 Local 46/567
[2024-12-02 18:02:41.187139] user = 125007 Local+ 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:43.462550] user = 125007 MPDA- 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6779937304075235
Training on augumented user 88307 0/50 current_auc = 0.6779937304075235
User 88307 AUC after training: 0.67776802507837
User 88307 does not improve AUC. Reverting changes.
Training on augumented user 97004 1/50 current_auc = 0.6779937304075235
User 97004 AUC after training: 0.6776677115987462
User 97004 does not improve AUC. Reverting changes.
Training on augumented user 86181 2/50 current_auc = 0.6779937304075235
User 86181 AUC after training: 0.6778683385579938
User 86181 does not improve AUC. Reverting changes.
Training on augumented user 61340 3/50 current_auc = 0.6779937304075235
User 61340 AUC after training: 0.6785203761755486
User 61340 improves AUC. Keeping the model.
Training on augumented user 108959 4/50 current_auc = 0.6785203761755486
User 108959 AUC after training: 0.6787210031347962
User 108959 improves AUC. Keeping the model.
Training on augumented user 48576 5/50 current_auc = 0.6787210031347962
User 48576 AUC after training: 0.6788213166144201
User 48576 improves AUC. Keeping the model.
Training on augumented user 84862 6/50 current_auc = 0.6788213166144201
User 84862 AUC after training: 0.6785830721003134
User 84862 does not improve AUC. Reverting changes.
Training on augumented user 70511 7/50 current_auc = 0.6788213166144201
User 70511 AUC after training: 0.6787586206896552
User 70511 does not improve AUC. Reverting changes.
Training on augumented user 32761 8/50 current_auc = 0.6788213166144201
User 32761 AUC after training: 0.6786457680250783
User 32761 does not improve AUC. Reverting changes.
Training on augumented user 70469 9/50 current_auc = 0.6788213166144201
User 70469 AUC after training: 0.678896551724138
User 70469 improves AUC. Keeping the model.
Training on augumented user 68877 10/50 current_auc = 0.678896551724138
User 68877 AUC after training: 0.6786708463949844
User 68877 does not improve AUC. Reverting changes.
Training on augumented user 75625 11/50 current_auc = 0.678896551724138
User 75625 AUC after training: 0.6789467084639498
User 75625 improves AUC. Keeping the model.
Training on augumented user 14154 12/50 current_auc = 0.6789467084639498
User 14154 AUC after training: 0.6786332288401253
User 14154 does not improve AUC. Reverting changes.
Training on augumented user 112154 13/50 current_auc = 0.6789467084639498
User 112154 AUC after training: 0.678771159874608
User 112154 does not improve AUC. Reverting changes.
Training on augumented user 19559 14/50 current_auc = 0.6789467084639498
User 19559 AUC after training: 0.6787460815047023
User 19559 does not improve AUC. Reverting changes.
Training on augumented user 52433 15/50 current_auc = 0.6789467084639498
User 52433 AUC after training: 0.6789968652037618
User 52433 improves AUC. Keeping the model.
Training on augumented user 104137 16/50 current_auc = 0.6789968652037618
User 104137 AUC after training: 0.6790094043887147
User 104137 improves AUC. Keeping the model.
Training on augumented user 62043 17/50 current_auc = 0.6790094043887147
User 62043 AUC after training: 0.678884012539185
User 62043 does not improve AUC. Reverting changes.
Training on augumented user 34481 18/50 current_auc = 0.6790094043887147
User 34481 AUC after training: 0.6787586206896552
User 34481 does not improve AUC. Reverting changes.
Training on augumented user 607 19/50 current_auc = 0.6790094043887147
User 607 AUC after training: 0.6786833855799372
User 607 does not improve AUC. Reverting changes.
Training on augumented user 21082 20/50 current_auc = 0.6790094043887147
User 21082 AUC after training: 0.6784075235109719
User 21082 does not improve AUC. Reverting changes.
Training on augumented user 124520 21/50 current_auc = 0.6790094043887147
User 124520 AUC after training: 0.6786583072100314
User 124520 does not improve AUC. Reverting changes.
Training on augumented user 92802 22/50 current_auc = 0.6790094043887147
User 92802 AUC after training: 0.6787335423197493
User 92802 does not improve AUC. Reverting changes.
Training on augumented user 17601 23/50 current_auc = 0.6790094043887147
User 17601 AUC after training: 0.6787335423197493
User 17601 does not improve AUC. Reverting changes.
Training on augumented user 60519 24/50 current_auc = 0.6790094043887147
User 60519 AUC after training: 0.6786332288401253
User 60519 does not improve AUC. Reverting changes.
Training on augumented user 121243 25/50 current_auc = 0.6790094043887147
User 121243 AUC after training: 0.6787210031347961
User 121243 does not improve AUC. Reverting changes.
Training on augumented user 27805 26/50 current_auc = 0.6790094043887147
User 27805 AUC after training: 0.6789467084639499
User 27805 does not improve AUC. Reverting changes.
Training on augumented user 10629 27/50 current_auc = 0.6790094043887147
User 10629 AUC after training: 0.6789467084639498
User 10629 does not improve AUC. Reverting changes.
Training on augumented user 112122 28/50 current_auc = 0.6790094043887147
User 112122 AUC after training: 0.6789592476489029
User 112122 does not improve AUC. Reverting changes.
Training on augumented user 114946 29/50 current_auc = 0.6790094043887147
User 114946 AUC after training: 0.6789968652037618
User 114946 does not improve AUC. Reverting changes.
Training on augumented user 65803 30/50 current_auc = 0.6790094043887147
User 65803 AUC after training: 0.678884012539185
User 65803 does not improve AUC. Reverting changes.
Training on augumented user 83370 31/50 current_auc = 0.6790094043887147
User 83370 AUC after training: 0.6790094043887147
User 83370 does not improve AUC. Reverting changes.
Training on augumented user 112924 32/50 current_auc = 0.6790094043887147
User 112924 AUC after training: 0.6789467084639499
User 112924 does not improve AUC. Reverting changes.
Training on augumented user 6728 33/50 current_auc = 0.6790094043887147
User 6728 AUC after training: 0.6781567398119123
User 6728 does not improve AUC. Reverting changes.
Training on augumented user 19493 34/50 current_auc = 0.6790094043887147
User 19493 AUC after training: 0.6786708463949842
User 19493 does not improve AUC. Reverting changes.
Training on augumented user 11973 35/50 current_auc = 0.6790094043887147
User 11973 AUC after training: 0.6789467084639498
User 11973 does not improve AUC. Reverting changes.
Training on augumented user 60151 36/50 current_auc = 0.6790094043887147
User 60151 AUC after training: 0.678858934169279
User 60151 does not improve AUC. Reverting changes.
Training on augumented user 37499 37/50 current_auc = 0.6790094043887147
User 37499 AUC after training: 0.6790219435736679
User 37499 improves AUC. Keeping the model.
Training on augumented user 13987 38/50 current_auc = 0.6790219435736679
User 13987 AUC after training: 0.6787711598746081
User 13987 does not improve AUC. Reverting changes.
Training on augumented user 122328 39/50 current_auc = 0.6790219435736679
User 122328 AUC after training: 0.6789717868338558
User 122328 does not improve AUC. Reverting changes.
Training on augumented user 125677 40/50 current_auc = 0.6790219435736679
User 125677 AUC after training: 0.6784827586206896
User 125677 does not improve AUC. Reverting changes.
Training on augumented user 84392 41/50 current_auc = 0.6790219435736679
User 84392 AUC after training: 0.6782570532915361
User 84392 does not improve AUC. Reverting changes.
Training on augumented user 62107 42/50 current_auc = 0.6790219435736679
User 62107 AUC after training: 0.6789216300940439
User 62107 does not improve AUC. Reverting changes.
Training on augumented user 99814 43/50 current_auc = 0.6790219435736679
User 99814 AUC after training: 0.6791097178683385
User 99814 improves AUC. Keeping the model.
Training on augumented user 98323 44/50 current_auc = 0.6791097178683385
User 98323 AUC after training: 0.6789216300940438
User 98323 does not improve AUC. Reverting changes.
Training on augumented user 90128 45/50 current_auc = 0.6791097178683385
User 90128 AUC after training: 0.6789843260188088
User 90128 does not improve AUC. Reverting changes.
Training on augumented user 58132 46/50 current_auc = 0.6791097178683385
User 58132 AUC after training: 0.6790219435736677
User 58132 does not improve AUC. Reverting changes.
Training on augumented user 35924 47/50 current_auc = 0.6791097178683385
User 35924 AUC after training: 0.678771159874608
User 35924 does not improve AUC. Reverting changes.
Training on augumented user 104675 48/50 current_auc = 0.6791097178683385
User 104675 AUC after training: 0.678833855799373
User 104675 does not improve AUC. Reverting changes.
Training on augumented user 134851 49/50 current_auc = 0.6791097178683385
User 134851 AUC after training: 0.6789467084639499
User 134851 does not improve AUC. Reverting changes.
[2024-12-02 18:03:13.040944] start test user 125010 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:13.635635] start test user 125010 47/567 recall augumented users by random, augumented_users = [44568, 122442, 26382, 132374, 100644, 122535, 52896, 89467, 55711, 950, 44340, 113581, 133860, 49011, 131735, 5904, 102539, 59088, 48780, 32550, 100538, 20617, 94830, 14621, 53355, 53586, 76520, 18339, 66424, 83863, 61662, 52996, 89228, 115361, 74338, 89040, 76269, 96652, 127097, 10014, 89900, 40256, 90688, 85096, 39988, 68535, 62797, 37438, 45471, 24087]
[2024-12-02 18:03:13.658351] user = 125010 Cloud 47/567
[2024-12-02 18:03:13.715797] user = 125010 Local 47/567
[2024-12-02 18:03:13.934839] user = 125010 Local+ 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:16.959137] user = 125010 MPDA- 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6676581483033096
Training on augumented user 44568 0/50 current_auc = 0.6676581483033096
User 44568 AUC after training: 0.6672392124005027
User 44568 does not improve AUC. Reverting changes.
Training on augumented user 122442 1/50 current_auc = 0.6676581483033096
User 122442 AUC after training: 0.6675743611227483
User 122442 does not improve AUC. Reverting changes.
Training on augumented user 26382 2/50 current_auc = 0.6676581483033096
User 26382 AUC after training: 0.6672392124005027
User 26382 does not improve AUC. Reverting changes.
Training on augumented user 132374 3/50 current_auc = 0.6676581483033096
User 132374 AUC after training: 0.6670297444490993
User 132374 does not improve AUC. Reverting changes.
Training on augumented user 100644 4/50 current_auc = 0.6676581483033096
User 100644 AUC after training: 0.667197318810222
User 100644 does not improve AUC. Reverting changes.
Training on augumented user 122535 5/50 current_auc = 0.6676581483033096
User 122535 AUC after training: 0.6674067867616255
User 122535 does not improve AUC. Reverting changes.
Training on augumented user 52896 6/50 current_auc = 0.6676581483033096
User 52896 AUC after training: 0.6671135316296607
User 52896 does not improve AUC. Reverting changes.
Training on augumented user 89467 7/50 current_auc = 0.6676581483033096
User 89467 AUC after training: 0.6673648931713447
User 89467 does not improve AUC. Reverting changes.
Training on augumented user 55711 8/50 current_auc = 0.6676581483033096
User 55711 AUC after training: 0.6669040636782573
User 55711 does not improve AUC. Reverting changes.
Training on augumented user 950 9/50 current_auc = 0.6676581483033096
User 950 AUC after training: 0.6669878508588185
User 950 does not improve AUC. Reverting changes.
Training on augumented user 44340 10/50 current_auc = 0.6676581483033096
User 44340 AUC after training: 0.6671135316296606
User 44340 does not improve AUC. Reverting changes.
Training on augumented user 113581 11/50 current_auc = 0.6676581483033096
User 113581 AUC after training: 0.6675324675324675
User 113581 does not improve AUC. Reverting changes.
Training on augumented user 133860 12/50 current_auc = 0.6676581483033096
User 133860 AUC after training: 0.667197318810222
User 133860 does not improve AUC. Reverting changes.
Training on augumented user 49011 13/50 current_auc = 0.6676581483033096
User 49011 AUC after training: 0.6672811059907835
User 49011 does not improve AUC. Reverting changes.
Training on augumented user 131735 14/50 current_auc = 0.6676581483033096
User 131735 AUC after training: 0.6676162547130289
User 131735 does not improve AUC. Reverting changes.
Training on augumented user 5904 15/50 current_auc = 0.6676581483033096
User 5904 AUC after training: 0.667804775869292
User 5904 improves AUC. Keeping the model.
Training on augumented user 102539 16/50 current_auc = 0.667804775869292
User 102539 AUC after training: 0.6679723502304148
User 102539 improves AUC. Keeping the model.
Training on augumented user 59088 17/50 current_auc = 0.6679723502304148
User 59088 AUC after training: 0.6679304566401341
User 59088 does not improve AUC. Reverting changes.
Training on augumented user 48780 18/50 current_auc = 0.6679723502304148
User 48780 AUC after training: 0.6680351906158358
User 48780 improves AUC. Keeping the model.
Training on augumented user 32550 19/50 current_auc = 0.6680351906158358
User 32550 AUC after training: 0.6676162547130289
User 32550 does not improve AUC. Reverting changes.
Training on augumented user 100538 20/50 current_auc = 0.6680351906158358
User 100538 AUC after training: 0.6679095098449936
User 100538 does not improve AUC. Reverting changes.
Training on augumented user 20617 21/50 current_auc = 0.6680351906158358
User 20617 AUC after training: 0.6677838290741517
User 20617 does not improve AUC. Reverting changes.
Training on augumented user 94830 22/50 current_auc = 0.6680351906158358
User 94830 AUC after training: 0.6677838290741517
User 94830 does not improve AUC. Reverting changes.
Training on augumented user 14621 23/50 current_auc = 0.6680351906158358
User 14621 AUC after training: 0.6678885630498534
User 14621 does not improve AUC. Reverting changes.
Training on augumented user 53355 24/50 current_auc = 0.6680351906158358
User 53355 AUC after training: 0.6674486803519062
User 53355 does not improve AUC. Reverting changes.
Training on augumented user 53586 25/50 current_auc = 0.6680351906158358
User 53586 AUC after training: 0.6677838290741517
User 53586 does not improve AUC. Reverting changes.
Training on augumented user 76520 26/50 current_auc = 0.6680351906158358
User 76520 AUC after training: 0.6680561374109761
User 76520 improves AUC. Keeping the model.
Training on augumented user 18339 27/50 current_auc = 0.6680561374109761
User 18339 AUC after training: 0.6684331797235024
User 18339 improves AUC. Keeping the model.
Training on augumented user 66424 28/50 current_auc = 0.6684331797235024
User 66424 AUC after training: 0.6683074989526602
User 66424 does not improve AUC. Reverting changes.
Training on augumented user 83863 29/50 current_auc = 0.6684331797235024
User 83863 AUC after training: 0.6682446585672392
User 83863 does not improve AUC. Reverting changes.
Training on augumented user 61662 30/50 current_auc = 0.6684331797235024
User 61662 AUC after training: 0.6683074989526603
User 61662 does not improve AUC. Reverting changes.
Training on augumented user 52996 31/50 current_auc = 0.6684331797235024
User 52996 AUC after training: 0.6674486803519062
User 52996 does not improve AUC. Reverting changes.
Training on augumented user 89228 32/50 current_auc = 0.6684331797235024
User 89228 AUC after training: 0.6679514034352743
User 89228 does not improve AUC. Reverting changes.
Training on augumented user 115361 33/50 current_auc = 0.6684331797235024
User 115361 AUC after training: 0.6682656053623796
User 115361 does not improve AUC. Reverting changes.
Training on augumented user 74338 34/50 current_auc = 0.6684331797235024
User 74338 AUC after training: 0.6685588604943444
User 74338 improves AUC. Keeping the model.
Training on augumented user 89040 35/50 current_auc = 0.6685588604943444
User 89040 AUC after training: 0.668475073313783
User 89040 does not improve AUC. Reverting changes.
Training on augumented user 76269 36/50 current_auc = 0.6685588604943444
User 76269 AUC after training: 0.6678885630498534
User 76269 does not improve AUC. Reverting changes.
Training on augumented user 96652 37/50 current_auc = 0.6685588604943444
User 96652 AUC after training: 0.6684960201089234
User 96652 does not improve AUC. Reverting changes.
Training on augumented user 127097 38/50 current_auc = 0.6685588604943444
User 127097 AUC after training: 0.668600754084625
User 127097 improves AUC. Keeping the model.
Training on augumented user 10014 39/50 current_auc = 0.668600754084625
User 10014 AUC after training: 0.6672182656053625
User 10014 does not improve AUC. Reverting changes.
Training on augumented user 89900 40/50 current_auc = 0.668600754084625
User 89900 AUC after training: 0.6684541265186427
User 89900 does not improve AUC. Reverting changes.
Training on augumented user 40256 41/50 current_auc = 0.668600754084625
User 40256 AUC after training: 0.6676162547130289
User 40256 does not improve AUC. Reverting changes.
Training on augumented user 90688 42/50 current_auc = 0.668600754084625
User 90688 AUC after training: 0.6679514034352745
User 90688 does not improve AUC. Reverting changes.
Training on augumented user 85096 43/50 current_auc = 0.668600754084625
User 85096 AUC after training: 0.6682446585672392
User 85096 does not improve AUC. Reverting changes.
Training on augumented user 39988 44/50 current_auc = 0.668600754084625
User 39988 AUC after training: 0.6679095098449938
User 39988 does not improve AUC. Reverting changes.
Training on augumented user 68535 45/50 current_auc = 0.668600754084625
User 68535 AUC after training: 0.6678885630498533
User 68535 does not improve AUC. Reverting changes.
Training on augumented user 62797 46/50 current_auc = 0.668600754084625
User 62797 AUC after training: 0.6677838290741516
User 62797 does not improve AUC. Reverting changes.
Training on augumented user 37438 47/50 current_auc = 0.668600754084625
User 37438 AUC after training: 0.6683284457478006
User 37438 does not improve AUC. Reverting changes.
Training on augumented user 45471 48/50 current_auc = 0.668600754084625
User 45471 AUC after training: 0.667804775869292
User 45471 does not improve AUC. Reverting changes.
Training on augumented user 24087 49/50 current_auc = 0.668600754084625
User 24087 AUC after training: 0.6674696271470465
User 24087 does not improve AUC. Reverting changes.
[2024-12-02 18:03:47.320296] start test user 125025 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:48.090739] start test user 125025 48/567 recall augumented users by random, augumented_users = [61300, 104830, 128704, 117450, 71218, 85662, 40421, 83777, 125086, 28677, 70320, 19036, 76022, 101311, 7198, 12852, 71177, 86883, 123480, 45169, 110524, 7755, 21154, 130207, 59742, 17458, 14215, 33194, 21333, 95351, 46393, 118067, 48122, 684, 111541, 81508, 116659, 60184, 89395, 8778, 94644, 106042, 56642, 125148, 85502, 33996, 36586, 86712, 94854, 75397]
[2024-12-02 18:03:48.106554] user = 125025 Cloud 48/567
[2024-12-02 18:03:48.156162] user = 125025 Local 48/567
[2024-12-02 18:03:48.521830] user = 125025 Local+ 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:50.729744] user = 125025 MPDA- 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5260537959944109
Training on augumented user 61300 0/50 current_auc = 0.5260537959944109
User 61300 AUC after training: 0.5259373544480671
User 61300 does not improve AUC. Reverting changes.
Training on augumented user 104830 1/50 current_auc = 0.5260537959944109
User 104830 AUC after training: 0.5261702375407546
User 104830 improves AUC. Keeping the model.
Training on augumented user 128704 2/50 current_auc = 0.5261702375407546
User 128704 AUC after training: 0.5259082440614811
User 128704 does not improve AUC. Reverting changes.
Training on augumented user 117450 3/50 current_auc = 0.5261702375407546
User 117450 AUC after training: 0.5260829063809968
User 117450 does not improve AUC. Reverting changes.
Training on augumented user 71218 4/50 current_auc = 0.5261702375407546
User 71218 AUC after training: 0.5261120167675826
User 71218 does not improve AUC. Reverting changes.
Training on augumented user 85662 5/50 current_auc = 0.5261702375407546
User 85662 AUC after training: 0.5260537959944108
User 85662 does not improve AUC. Reverting changes.
Training on augumented user 40421 6/50 current_auc = 0.5261702375407546
User 40421 AUC after training: 0.5256753609687939
User 40421 does not improve AUC. Reverting changes.
Training on augumented user 83777 7/50 current_auc = 0.5261702375407546
User 83777 AUC after training: 0.525966464834653
User 83777 does not improve AUC. Reverting changes.
Training on augumented user 125086 8/50 current_auc = 0.5261702375407546
User 125086 AUC after training: 0.5255006986492781
User 125086 does not improve AUC. Reverting changes.
Training on augumented user 28677 9/50 current_auc = 0.5261702375407546
User 28677 AUC after training: 0.5258500232883092
User 28677 does not improve AUC. Reverting changes.
Training on augumented user 70320 10/50 current_auc = 0.5261702375407546
User 70320 AUC after training: 0.5256753609687936
User 70320 does not improve AUC. Reverting changes.
Training on augumented user 19036 11/50 current_auc = 0.5261702375407546
User 19036 AUC after training: 0.5263448998602702
User 19036 improves AUC. Keeping the model.
Training on augumented user 76022 12/50 current_auc = 0.5263448998602702
User 76022 AUC after training: 0.5257044713553796
User 76022 does not improve AUC. Reverting changes.
Training on augumented user 101311 13/50 current_auc = 0.5263448998602702
User 101311 AUC after training: 0.5261411271541686
User 101311 does not improve AUC. Reverting changes.
Training on augumented user 7198 14/50 current_auc = 0.5263448998602702
User 7198 AUC after training: 0.5265486725663717
User 7198 improves AUC. Keeping the model.
Training on augumented user 12852 15/50 current_auc = 0.5265486725663717
User 12852 AUC after training: 0.5267815556590592
User 12852 improves AUC. Keeping the model.
Training on augumented user 71177 16/50 current_auc = 0.5267815556590592
User 71177 AUC after training: 0.5267233348858873
User 71177 does not improve AUC. Reverting changes.
Training on augumented user 86883 17/50 current_auc = 0.5267815556590592
User 86883 AUC after training: 0.5268979972054029
User 86883 improves AUC. Keeping the model.
Training on augumented user 123480 18/50 current_auc = 0.5268979972054029
User 123480 AUC after training: 0.5267815556590592
User 123480 does not improve AUC. Reverting changes.
Training on augumented user 45169 19/50 current_auc = 0.5268979972054029
User 45169 AUC after training: 0.5264031206334421
User 45169 does not improve AUC. Reverting changes.
Training on augumented user 110524 20/50 current_auc = 0.5268979972054029
User 110524 AUC after training: 0.5267815556590592
User 110524 does not improve AUC. Reverting changes.
Training on augumented user 7755 21/50 current_auc = 0.5268979972054029
User 7755 AUC after training: 0.5266651141127154
User 7755 does not improve AUC. Reverting changes.
Training on augumented user 21154 22/50 current_auc = 0.5268979972054029
User 21154 AUC after training: 0.526897997205403
User 21154 improves AUC. Keeping the model.
Training on augumented user 130207 23/50 current_auc = 0.526897997205403
User 130207 AUC after training: 0.5267815556590592
User 130207 does not improve AUC. Reverting changes.
Training on augumented user 59742 24/50 current_auc = 0.526897997205403
User 59742 AUC after training: 0.5267815556590592
User 59742 does not improve AUC. Reverting changes.
Training on augumented user 17458 25/50 current_auc = 0.526897997205403
User 17458 AUC after training: 0.5263740102468561
User 17458 does not improve AUC. Reverting changes.
Training on augumented user 14215 26/50 current_auc = 0.526897997205403
User 14215 AUC after training: 0.5262575687005124
User 14215 does not improve AUC. Reverting changes.
Training on augumented user 33194 27/50 current_auc = 0.526897997205403
User 33194 AUC after training: 0.5272473218444341
User 33194 improves AUC. Keeping the model.
Training on augumented user 21333 28/50 current_auc = 0.5272473218444341
User 21333 AUC after training: 0.5267815556590592
User 21333 does not improve AUC. Reverting changes.
Training on augumented user 95351 29/50 current_auc = 0.5272473218444341
User 95351 AUC after training: 0.5268979972054029
User 95351 does not improve AUC. Reverting changes.
Training on augumented user 46393 30/50 current_auc = 0.5272473218444341
User 46393 AUC after training: 0.5264904517931999
User 46393 does not improve AUC. Reverting changes.
Training on augumented user 118067 31/50 current_auc = 0.5272473218444341
User 118067 AUC after training: 0.527305542617606
User 118067 improves AUC. Keeping the model.
Training on augumented user 48122 32/50 current_auc = 0.527305542617606
User 48122 AUC after training: 0.5271308802980904
User 48122 does not improve AUC. Reverting changes.
Training on augumented user 684 33/50 current_auc = 0.527305542617606
User 684 AUC after training: 0.5272473218444342
User 684 does not improve AUC. Reverting changes.
Training on augumented user 111541 34/50 current_auc = 0.527305542617606
User 111541 AUC after training: 0.5271599906846762
User 111541 does not improve AUC. Reverting changes.
Training on augumented user 81508 35/50 current_auc = 0.527305542617606
User 81508 AUC after training: 0.5273055426176061
User 81508 improves AUC. Keeping the model.
Training on augumented user 116659 36/50 current_auc = 0.5273055426176061
User 116659 AUC after training: 0.527363763390778
User 116659 improves AUC. Keeping the model.
Training on augumented user 60184 37/50 current_auc = 0.527363763390778
User 60184 AUC after training: 0.5272473218444341
User 60184 does not improve AUC. Reverting changes.
Training on augumented user 89395 38/50 current_auc = 0.527363763390778
User 89395 AUC after training: 0.5274802049371217
User 89395 improves AUC. Keeping the model.
Training on augumented user 8778 39/50 current_auc = 0.5274802049371217
User 8778 AUC after training: 0.5276548672566372
User 8778 improves AUC. Keeping the model.
Training on augumented user 94644 40/50 current_auc = 0.5276548672566372
User 94644 AUC after training: 0.5279459711224965
User 94644 improves AUC. Keeping the model.
Training on augumented user 106042 41/50 current_auc = 0.5279459711224965
User 106042 AUC after training: 0.5277130880298091
User 106042 does not improve AUC. Reverting changes.
Training on augumented user 56642 42/50 current_auc = 0.5279459711224965
User 56642 AUC after training: 0.5280915230554262
User 56642 improves AUC. Keeping the model.
Training on augumented user 125148 43/50 current_auc = 0.5280915230554262
User 125148 AUC after training: 0.5274510945505356
User 125148 does not improve AUC. Reverting changes.
Training on augumented user 85502 44/50 current_auc = 0.5280915230554262
User 85502 AUC after training: 0.5276839776432232
User 85502 does not improve AUC. Reverting changes.
Training on augumented user 33996 45/50 current_auc = 0.5280915230554262
User 33996 AUC after training: 0.528149743828598
User 33996 improves AUC. Keeping the model.
Training on augumented user 36586 46/50 current_auc = 0.528149743828598
User 36586 AUC after training: 0.5282661853749417
User 36586 improves AUC. Keeping the model.
Training on augumented user 86712 47/50 current_auc = 0.5282661853749417
User 86712 AUC after training: 0.5283244061481136
User 86712 improves AUC. Keeping the model.
Training on augumented user 94854 48/50 current_auc = 0.5283244061481136
User 94854 AUC after training: 0.528673730787145
User 94854 improves AUC. Keeping the model.
Training on augumented user 75397 49/50 current_auc = 0.528673730787145
User 75397 AUC after training: 0.5280624126688402
User 75397 does not improve AUC. Reverting changes.
[2024-12-02 18:04:15.900305] start test user 125065 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:16.649411] start test user 125065 49/567 recall augumented users by random, augumented_users = [102649, 18424, 24572, 135482, 55945, 54280, 132514, 46614, 85066, 8723, 13989, 9724, 12470, 109130, 62504, 30388, 136854, 134288, 119123, 101222, 135295, 53246, 2965, 7266, 44953, 108094, 37129, 41900, 56287, 43971, 123109, 77123, 45730, 105167, 132203, 41872, 71474, 72388, 66480, 119364, 51061, 8749, 107297, 49165, 88871, 31628, 131678, 49536, 78561, 39684]
[2024-12-02 18:04:16.664551] user = 125065 Cloud 49/567
[2024-12-02 18:04:16.680428] user = 125065 Local 49/567
[2024-12-02 18:04:16.915807] user = 125065 Local+ 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:18.698958] user = 125065 MPDA- 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6770287141073659
Training on augumented user 102649 0/50 current_auc = 0.6770287141073659
User 102649 AUC after training: 0.6774032459425718
User 102649 improves AUC. Keeping the model.
Training on augumented user 18424 1/50 current_auc = 0.6774032459425718
User 18424 AUC after training: 0.6774032459425718
User 18424 does not improve AUC. Reverting changes.
Training on augumented user 24572 2/50 current_auc = 0.6774032459425718
User 24572 AUC after training: 0.6775280898876405
User 24572 improves AUC. Keeping the model.
Training on augumented user 135482 3/50 current_auc = 0.6775280898876405
User 135482 AUC after training: 0.6762796504369537
User 135482 does not improve AUC. Reverting changes.
Training on augumented user 55945 4/50 current_auc = 0.6775280898876405
User 55945 AUC after training: 0.6770287141073658
User 55945 does not improve AUC. Reverting changes.
Training on augumented user 54280 5/50 current_auc = 0.6775280898876405
User 54280 AUC after training: 0.6770287141073658
User 54280 does not improve AUC. Reverting changes.
Training on augumented user 132514 6/50 current_auc = 0.6775280898876405
User 132514 AUC after training: 0.6767790262172284
User 132514 does not improve AUC. Reverting changes.
Training on augumented user 46614 7/50 current_auc = 0.6775280898876405
User 46614 AUC after training: 0.6782771535580524
User 46614 improves AUC. Keeping the model.
Training on augumented user 85066 8/50 current_auc = 0.6782771535580524
User 85066 AUC after training: 0.678401997503121
User 85066 improves AUC. Keeping the model.
Training on augumented user 8723 9/50 current_auc = 0.678401997503121
User 8723 AUC after training: 0.6779026217228464
User 8723 does not improve AUC. Reverting changes.
Training on augumented user 13989 10/50 current_auc = 0.678401997503121
User 13989 AUC after training: 0.6784019975031211
User 13989 improves AUC. Keeping the model.
Training on augumented user 9724 11/50 current_auc = 0.6784019975031211
User 9724 AUC after training: 0.6786516853932584
User 9724 improves AUC. Keeping the model.
Training on augumented user 12470 12/50 current_auc = 0.6786516853932584
User 12470 AUC after training: 0.6772784019975032
User 12470 does not improve AUC. Reverting changes.
Training on augumented user 109130 13/50 current_auc = 0.6786516853932584
User 109130 AUC after training: 0.6794007490636704
User 109130 improves AUC. Keeping the model.
Training on augumented user 62504 14/50 current_auc = 0.6794007490636704
User 62504 AUC after training: 0.6784019975031211
User 62504 does not improve AUC. Reverting changes.
Training on augumented user 30388 15/50 current_auc = 0.6794007490636704
User 30388 AUC after training: 0.6779026217228465
User 30388 does not improve AUC. Reverting changes.
Training on augumented user 136854 16/50 current_auc = 0.6794007490636704
User 136854 AUC after training: 0.6774032459425717
User 136854 does not improve AUC. Reverting changes.
Training on augumented user 134288 17/50 current_auc = 0.6794007490636704
User 134288 AUC after training: 0.6789013732833957
User 134288 does not improve AUC. Reverting changes.
Training on augumented user 119123 18/50 current_auc = 0.6794007490636704
User 119123 AUC after training: 0.6761548064918851
User 119123 does not improve AUC. Reverting changes.
Training on augumented user 101222 19/50 current_auc = 0.6794007490636704
User 101222 AUC after training: 0.6791510611735331
User 101222 does not improve AUC. Reverting changes.
Training on augumented user 135295 20/50 current_auc = 0.6794007490636704
User 135295 AUC after training: 0.6789013732833957
User 135295 does not improve AUC. Reverting changes.
Training on augumented user 53246 21/50 current_auc = 0.6794007490636704
User 53246 AUC after training: 0.6775280898876405
User 53246 does not improve AUC. Reverting changes.
Training on augumented user 2965 22/50 current_auc = 0.6794007490636704
User 2965 AUC after training: 0.6776529338327092
User 2965 does not improve AUC. Reverting changes.
Training on augumented user 7266 23/50 current_auc = 0.6794007490636704
User 7266 AUC after training: 0.6786516853932584
User 7266 does not improve AUC. Reverting changes.
Training on augumented user 44953 24/50 current_auc = 0.6794007490636704
User 44953 AUC after training: 0.679900124843945
User 44953 improves AUC. Keeping the model.
Training on augumented user 108094 25/50 current_auc = 0.679900124843945
User 108094 AUC after training: 0.6794007490636704
User 108094 does not improve AUC. Reverting changes.
Training on augumented user 37129 26/50 current_auc = 0.679900124843945
User 37129 AUC after training: 0.6786516853932584
User 37129 does not improve AUC. Reverting changes.
Training on augumented user 41900 27/50 current_auc = 0.679900124843945
User 41900 AUC after training: 0.6779026217228464
User 41900 does not improve AUC. Reverting changes.
Training on augumented user 56287 28/50 current_auc = 0.679900124843945
User 56287 AUC after training: 0.6786516853932585
User 56287 does not improve AUC. Reverting changes.
Training on augumented user 43971 29/50 current_auc = 0.679900124843945
User 43971 AUC after training: 0.6803995006242197
User 43971 improves AUC. Keeping the model.
Training on augumented user 123109 30/50 current_auc = 0.6803995006242197
User 123109 AUC after training: 0.6801498127340825
User 123109 does not improve AUC. Reverting changes.
Training on augumented user 77123 31/50 current_auc = 0.6803995006242197
User 77123 AUC after training: 0.679900124843945
User 77123 does not improve AUC. Reverting changes.
Training on augumented user 45730 32/50 current_auc = 0.6803995006242197
User 45730 AUC after training: 0.6811485642946317
User 45730 improves AUC. Keeping the model.
Training on augumented user 105167 33/50 current_auc = 0.6811485642946317
User 105167 AUC after training: 0.6811485642946317
User 105167 does not improve AUC. Reverting changes.
Training on augumented user 132203 34/50 current_auc = 0.6811485642946317
User 132203 AUC after training: 0.6818976279650436
User 132203 improves AUC. Keeping the model.
Training on augumented user 41872 35/50 current_auc = 0.6818976279650436
User 41872 AUC after training: 0.6816479400749065
User 41872 does not improve AUC. Reverting changes.
Training on augumented user 71474 36/50 current_auc = 0.6818976279650436
User 71474 AUC after training: 0.6796504369538077
User 71474 does not improve AUC. Reverting changes.
Training on augumented user 72388 37/50 current_auc = 0.6818976279650436
User 72388 AUC after training: 0.6811485642946317
User 72388 does not improve AUC. Reverting changes.
Training on augumented user 66480 38/50 current_auc = 0.6818976279650436
User 66480 AUC after training: 0.6816479400749064
User 66480 does not improve AUC. Reverting changes.
Training on augumented user 119364 39/50 current_auc = 0.6818976279650436
User 119364 AUC after training: 0.6797752808988764
User 119364 does not improve AUC. Reverting changes.
Training on augumented user 51061 40/50 current_auc = 0.6818976279650436
User 51061 AUC after training: 0.6818976279650437
User 51061 improves AUC. Keeping the model.
Training on augumented user 8749 41/50 current_auc = 0.6818976279650437
User 8749 AUC after training: 0.6811485642946317
User 8749 does not improve AUC. Reverting changes.
Training on augumented user 107297 42/50 current_auc = 0.6818976279650437
User 107297 AUC after training: 0.6811485642946317
User 107297 does not improve AUC. Reverting changes.
Training on augumented user 49165 43/50 current_auc = 0.6818976279650437
User 49165 AUC after training: 0.6811485642946318
User 49165 does not improve AUC. Reverting changes.
Training on augumented user 88871 44/50 current_auc = 0.6818976279650437
User 88871 AUC after training: 0.6820224719101124
User 88871 improves AUC. Keeping the model.
Training on augumented user 31628 45/50 current_auc = 0.6820224719101124
User 31628 AUC after training: 0.6806491885143571
User 31628 does not improve AUC. Reverting changes.
Training on augumented user 131678 46/50 current_auc = 0.6820224719101124
User 131678 AUC after training: 0.6797752808988764
User 131678 does not improve AUC. Reverting changes.
Training on augumented user 49536 47/50 current_auc = 0.6820224719101124
User 49536 AUC after training: 0.6805243445692885
User 49536 does not improve AUC. Reverting changes.
Training on augumented user 78561 48/50 current_auc = 0.6820224719101124
User 78561 AUC after training: 0.6806491885143571
User 78561 does not improve AUC. Reverting changes.
Training on augumented user 39684 49/50 current_auc = 0.6820224719101124
User 39684 AUC after training: 0.6820224719101123
User 39684 does not improve AUC. Reverting changes.
[2024-12-02 18:04:44.047470] start test user 125084 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:44.757212] start test user 125084 50/567 recall augumented users by random, augumented_users = [72198, 75634, 54634, 76070, 26016, 109122, 137477, 44060, 107681, 40744, 39421, 71295, 113104, 55145, 64594, 20476, 74476, 103187, 75, 107670, 31811, 95102, 57786, 124991, 79942, 38295, 79250, 108776, 20294, 69059, 121103, 134936, 68897, 102826, 6959, 65395, 44550, 103533, 56129, 92016, 76551, 11939, 97574, 44507, 35871, 137202, 91268, 97255, 25216, 105342]
[2024-12-02 18:04:44.832513] user = 125084 Cloud 50/567
[2024-12-02 18:04:44.857555] user = 125084 Local 50/567
[2024-12-02 18:04:45.070711] user = 125084 Local+ 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:48.081441] user = 125084 MPDA- 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6200000000000001
Training on augumented user 72198 0/50 current_auc = 0.6200000000000001
User 72198 AUC after training: 0.6200000000000001
User 72198 does not improve AUC. Reverting changes.
Training on augumented user 75634 1/50 current_auc = 0.6200000000000001
User 75634 AUC after training: 0.6228571428571429
User 75634 improves AUC. Keeping the model.
Training on augumented user 54634 2/50 current_auc = 0.6228571428571429
User 54634 AUC after training: 0.6228571428571429
User 54634 does not improve AUC. Reverting changes.
Training on augumented user 76070 3/50 current_auc = 0.6228571428571429
User 76070 AUC after training: 0.6228571428571429
User 76070 does not improve AUC. Reverting changes.
Training on augumented user 26016 4/50 current_auc = 0.6228571428571429
User 26016 AUC after training: 0.6228571428571429
User 26016 does not improve AUC. Reverting changes.
Training on augumented user 109122 5/50 current_auc = 0.6228571428571429
User 109122 AUC after training: 0.6228571428571429
User 109122 does not improve AUC. Reverting changes.
Training on augumented user 137477 6/50 current_auc = 0.6228571428571429
User 137477 AUC after training: 0.6228571428571429
User 137477 does not improve AUC. Reverting changes.
Training on augumented user 44060 7/50 current_auc = 0.6228571428571429
User 44060 AUC after training: 0.6228571428571429
User 44060 does not improve AUC. Reverting changes.
Training on augumented user 107681 8/50 current_auc = 0.6228571428571429
User 107681 AUC after training: 0.6228571428571429
User 107681 does not improve AUC. Reverting changes.
Training on augumented user 40744 9/50 current_auc = 0.6228571428571429
User 40744 AUC after training: 0.62
User 40744 does not improve AUC. Reverting changes.
Training on augumented user 39421 10/50 current_auc = 0.6228571428571429
User 39421 AUC after training: 0.6228571428571429
User 39421 does not improve AUC. Reverting changes.
Training on augumented user 71295 11/50 current_auc = 0.6228571428571429
User 71295 AUC after training: 0.6228571428571429
User 71295 does not improve AUC. Reverting changes.
Training on augumented user 113104 12/50 current_auc = 0.6228571428571429
User 113104 AUC after training: 0.6228571428571429
User 113104 does not improve AUC. Reverting changes.
Training on augumented user 55145 13/50 current_auc = 0.6228571428571429
User 55145 AUC after training: 0.6228571428571429
User 55145 does not improve AUC. Reverting changes.
Training on augumented user 64594 14/50 current_auc = 0.6228571428571429
User 64594 AUC after training: 0.6228571428571429
User 64594 does not improve AUC. Reverting changes.
Training on augumented user 20476 15/50 current_auc = 0.6228571428571429
User 20476 AUC after training: 0.6257142857142858
User 20476 improves AUC. Keeping the model.
Training on augumented user 74476 16/50 current_auc = 0.6257142857142858
User 74476 AUC after training: 0.6171428571428572
User 74476 does not improve AUC. Reverting changes.
Training on augumented user 103187 17/50 current_auc = 0.6257142857142858
User 103187 AUC after training: 0.6257142857142858
User 103187 does not improve AUC. Reverting changes.
Training on augumented user 75 18/50 current_auc = 0.6257142857142858
User 75 AUC after training: 0.6257142857142858
User 75 does not improve AUC. Reverting changes.
Training on augumented user 107670 19/50 current_auc = 0.6257142857142858
User 107670 AUC after training: 0.6228571428571429
User 107670 does not improve AUC. Reverting changes.
Training on augumented user 31811 20/50 current_auc = 0.6257142857142858
User 31811 AUC after training: 0.62
User 31811 does not improve AUC. Reverting changes.
Training on augumented user 95102 21/50 current_auc = 0.6257142857142858
User 95102 AUC after training: 0.6257142857142858
User 95102 does not improve AUC. Reverting changes.
Training on augumented user 57786 22/50 current_auc = 0.6257142857142858
User 57786 AUC after training: 0.6200000000000001
User 57786 does not improve AUC. Reverting changes.
Training on augumented user 124991 23/50 current_auc = 0.6257142857142858
User 124991 AUC after training: 0.6142857142857143
User 124991 does not improve AUC. Reverting changes.
Training on augumented user 79942 24/50 current_auc = 0.6257142857142858
User 79942 AUC after training: 0.6257142857142858
User 79942 does not improve AUC. Reverting changes.
Training on augumented user 38295 25/50 current_auc = 0.6257142857142858
User 38295 AUC after training: 0.6200000000000001
User 38295 does not improve AUC. Reverting changes.
Training on augumented user 79250 26/50 current_auc = 0.6257142857142858
User 79250 AUC after training: 0.6171428571428572
User 79250 does not improve AUC. Reverting changes.
Training on augumented user 108776 27/50 current_auc = 0.6257142857142858
User 108776 AUC after training: 0.6228571428571429
User 108776 does not improve AUC. Reverting changes.
Training on augumented user 20294 28/50 current_auc = 0.6257142857142858
User 20294 AUC after training: 0.62
User 20294 does not improve AUC. Reverting changes.
Training on augumented user 69059 29/50 current_auc = 0.6257142857142858
User 69059 AUC after training: 0.6200000000000001
User 69059 does not improve AUC. Reverting changes.
Training on augumented user 121103 30/50 current_auc = 0.6257142857142858
User 121103 AUC after training: 0.6200000000000001
User 121103 does not improve AUC. Reverting changes.
Training on augumented user 134936 31/50 current_auc = 0.6257142857142858
User 134936 AUC after training: 0.6171428571428572
User 134936 does not improve AUC. Reverting changes.
Training on augumented user 68897 32/50 current_auc = 0.6257142857142858
User 68897 AUC after training: 0.6257142857142858
User 68897 does not improve AUC. Reverting changes.
Training on augumented user 102826 33/50 current_auc = 0.6257142857142858
User 102826 AUC after training: 0.6257142857142858
User 102826 does not improve AUC. Reverting changes.
Training on augumented user 6959 34/50 current_auc = 0.6257142857142858
User 6959 AUC after training: 0.6228571428571429
User 6959 does not improve AUC. Reverting changes.
Training on augumented user 65395 35/50 current_auc = 0.6257142857142858
User 65395 AUC after training: 0.62
User 65395 does not improve AUC. Reverting changes.
Training on augumented user 44550 36/50 current_auc = 0.6257142857142858
User 44550 AUC after training: 0.6228571428571429
User 44550 does not improve AUC. Reverting changes.
Training on augumented user 103533 37/50 current_auc = 0.6257142857142858
User 103533 AUC after training: 0.6257142857142858
User 103533 does not improve AUC. Reverting changes.
Training on augumented user 56129 38/50 current_auc = 0.6257142857142858
User 56129 AUC after training: 0.6171428571428572
User 56129 does not improve AUC. Reverting changes.
Training on augumented user 92016 39/50 current_auc = 0.6257142857142858
User 92016 AUC after training: 0.6171428571428572
User 92016 does not improve AUC. Reverting changes.
Training on augumented user 76551 40/50 current_auc = 0.6257142857142858
User 76551 AUC after training: 0.6228571428571429
User 76551 does not improve AUC. Reverting changes.
Training on augumented user 11939 41/50 current_auc = 0.6257142857142858
User 11939 AUC after training: 0.6257142857142858
User 11939 does not improve AUC. Reverting changes.
Training on augumented user 97574 42/50 current_auc = 0.6257142857142858
User 97574 AUC after training: 0.6228571428571429
User 97574 does not improve AUC. Reverting changes.
Training on augumented user 44507 43/50 current_auc = 0.6257142857142858
User 44507 AUC after training: 0.6228571428571429
User 44507 does not improve AUC. Reverting changes.
Training on augumented user 35871 44/50 current_auc = 0.6257142857142858
User 35871 AUC after training: 0.6257142857142858
User 35871 does not improve AUC. Reverting changes.
Training on augumented user 137202 45/50 current_auc = 0.6257142857142858
User 137202 AUC after training: 0.6142857142857143
User 137202 does not improve AUC. Reverting changes.
Training on augumented user 91268 46/50 current_auc = 0.6257142857142858
User 91268 AUC after training: 0.6257142857142858
User 91268 does not improve AUC. Reverting changes.
Training on augumented user 97255 47/50 current_auc = 0.6257142857142858
User 97255 AUC after training: 0.6257142857142858
User 97255 does not improve AUC. Reverting changes.
Training on augumented user 25216 48/50 current_auc = 0.6257142857142858
User 25216 AUC after training: 0.6257142857142858
User 25216 does not improve AUC. Reverting changes.
Training on augumented user 105342 49/50 current_auc = 0.6257142857142858
User 105342 AUC after training: 0.6257142857142858
User 105342 does not improve AUC. Reverting changes.
[2024-12-02 18:05:18.062153] start test user 125113 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:18.736162] start test user 125113 51/567 recall augumented users by random, augumented_users = [135352, 114626, 66053, 57389, 112366, 103000, 13739, 133260, 113913, 39477, 19279, 54319, 26165, 117059, 10121, 70355, 175, 124342, 69511, 36367, 19191, 101951, 124776, 41236, 120739, 2553, 65375, 51097, 23348, 11505, 2795, 27724, 138264, 96626, 115994, 104312, 44013, 127855, 27208, 126792, 83246, 107212, 38227, 13774, 93663, 117528, 130021, 120804, 14396, 110169]
[2024-12-02 18:05:18.751803] user = 125113 Cloud 51/567
[2024-12-02 18:05:18.779688] user = 125113 Local 51/567
[2024-12-02 18:05:18.843514] user = 125113 Local+ 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:20.975111] user = 125113 MPDA- 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5843392558433926
Training on augumented user 135352 0/50 current_auc = 0.5843392558433926
User 135352 AUC after training: 0.5844748858447489
User 135352 improves AUC. Keeping the model.
Training on augumented user 114626 1/50 current_auc = 0.5844748858447489
User 114626 AUC after training: 0.5846557258465572
User 114626 improves AUC. Keeping the model.
Training on augumented user 66053 2/50 current_auc = 0.5846557258465572
User 66053 AUC after training: 0.5847461458474615
User 66053 improves AUC. Keeping the model.
Training on augumented user 57389 3/50 current_auc = 0.5847461458474615
User 57389 AUC after training: 0.585424295854243
User 57389 improves AUC. Keeping the model.
Training on augumented user 112366 4/50 current_auc = 0.585424295854243
User 112366 AUC after training: 0.5856051358560513
User 112366 improves AUC. Keeping the model.
Training on augumented user 103000 5/50 current_auc = 0.5856051358560513
User 103000 AUC after training: 0.5848817758488177
User 103000 does not improve AUC. Reverting changes.
Training on augumented user 13739 6/50 current_auc = 0.5856051358560513
User 13739 AUC after training: 0.585379085853791
User 13739 does not improve AUC. Reverting changes.
Training on augumented user 133260 7/50 current_auc = 0.5856051358560513
User 133260 AUC after training: 0.5852886658528866
User 133260 does not improve AUC. Reverting changes.
Training on augumented user 113913 8/50 current_auc = 0.5856051358560513
User 113913 AUC after training: 0.585469505854695
User 113913 does not improve AUC. Reverting changes.
Training on augumented user 39477 9/50 current_auc = 0.5856051358560513
User 39477 AUC after training: 0.5855599258555994
User 39477 does not improve AUC. Reverting changes.
Training on augumented user 19279 10/50 current_auc = 0.5856051358560513
User 19279 AUC after training: 0.5823952258239523
User 19279 does not improve AUC. Reverting changes.
Training on augumented user 54319 11/50 current_auc = 0.5856051358560513
User 54319 AUC after training: 0.5856051358560515
User 54319 improves AUC. Keeping the model.
Training on augumented user 26165 12/50 current_auc = 0.5856051358560515
User 26165 AUC after training: 0.5854695058546951
User 26165 does not improve AUC. Reverting changes.
Training on augumented user 117059 13/50 current_auc = 0.5856051358560515
User 117059 AUC after training: 0.5854695058546951
User 117059 does not improve AUC. Reverting changes.
Training on augumented user 10121 14/50 current_auc = 0.5856051358560515
User 10121 AUC after training: 0.586780595867806
User 10121 improves AUC. Keeping the model.
Training on augumented user 70355 15/50 current_auc = 0.586780595867806
User 70355 AUC after training: 0.586825805868258
User 70355 improves AUC. Keeping the model.
Training on augumented user 175 16/50 current_auc = 0.586825805868258
User 175 AUC after training: 0.5861702608617027
User 175 does not improve AUC. Reverting changes.
Training on augumented user 124342 17/50 current_auc = 0.586825805868258
User 124342 AUC after training: 0.5870066458700665
User 124342 improves AUC. Keeping the model.
Training on augumented user 69511 18/50 current_auc = 0.5870066458700665
User 69511 AUC after training: 0.5865997558659976
User 69511 does not improve AUC. Reverting changes.
Training on augumented user 36367 19/50 current_auc = 0.5870066458700665
User 36367 AUC after training: 0.586825805868258
User 36367 does not improve AUC. Reverting changes.
Training on augumented user 19191 20/50 current_auc = 0.5870066458700665
User 19191 AUC after training: 0.5860120258601204
User 19191 does not improve AUC. Reverting changes.
Training on augumented user 101951 21/50 current_auc = 0.5870066458700665
User 101951 AUC after training: 0.5867353858673539
User 101951 does not improve AUC. Reverting changes.
Training on augumented user 124776 22/50 current_auc = 0.5870066458700665
User 124776 AUC after training: 0.5870518558705186
User 124776 improves AUC. Keeping the model.
Training on augumented user 41236 23/50 current_auc = 0.5870518558705186
User 41236 AUC after training: 0.5867353858673539
User 41236 does not improve AUC. Reverting changes.
Training on augumented user 120739 24/50 current_auc = 0.5870518558705186
User 120739 AUC after training: 0.5866449658664495
User 120739 does not improve AUC. Reverting changes.
Training on augumented user 2553 25/50 current_auc = 0.5870518558705186
User 2553 AUC after training: 0.5868710158687102
User 2553 does not improve AUC. Reverting changes.
Training on augumented user 65375 26/50 current_auc = 0.5870518558705186
User 65375 AUC after training: 0.5869162258691623
User 65375 does not improve AUC. Reverting changes.
Training on augumented user 51097 27/50 current_auc = 0.5870518558705186
User 51097 AUC after training: 0.5869162258691623
User 51097 does not improve AUC. Reverting changes.
Training on augumented user 23348 28/50 current_auc = 0.5870518558705186
User 23348 AUC after training: 0.5866449658664497
User 23348 does not improve AUC. Reverting changes.
Training on augumented user 11505 29/50 current_auc = 0.5870518558705186
User 11505 AUC after training: 0.5866901758669018
User 11505 does not improve AUC. Reverting changes.
Training on augumented user 2795 30/50 current_auc = 0.5870518558705186
User 2795 AUC after training: 0.5866223608662237
User 2795 does not improve AUC. Reverting changes.
Training on augumented user 27724 31/50 current_auc = 0.5870518558705186
User 27724 AUC after training: 0.5867353858673539
User 27724 does not improve AUC. Reverting changes.
Training on augumented user 138264 32/50 current_auc = 0.5870518558705186
User 138264 AUC after training: 0.5867353858673539
User 138264 does not improve AUC. Reverting changes.
Training on augumented user 96626 33/50 current_auc = 0.5870518558705186
User 96626 AUC after training: 0.5866675708666758
User 96626 does not improve AUC. Reverting changes.
Training on augumented user 115994 34/50 current_auc = 0.5870518558705186
User 115994 AUC after training: 0.5864641258646413
User 115994 does not improve AUC. Reverting changes.
Training on augumented user 104312 35/50 current_auc = 0.5870518558705186
User 104312 AUC after training: 0.5871422758714228
User 104312 improves AUC. Keeping the model.
Training on augumented user 44013 36/50 current_auc = 0.5871422758714228
User 44013 AUC after training: 0.5869388308693884
User 44013 does not improve AUC. Reverting changes.
Training on augumented user 127855 37/50 current_auc = 0.5871422758714228
User 127855 AUC after training: 0.5867579908675798
User 127855 does not improve AUC. Reverting changes.
Training on augumented user 27208 38/50 current_auc = 0.5871422758714228
User 27208 AUC after training: 0.5867805958678058
User 27208 does not improve AUC. Reverting changes.
Training on augumented user 126792 39/50 current_auc = 0.5871422758714228
User 126792 AUC after training: 0.587232695872327
User 126792 improves AUC. Keeping the model.
Training on augumented user 83246 40/50 current_auc = 0.587232695872327
User 83246 AUC after training: 0.5861476558614765
User 83246 does not improve AUC. Reverting changes.
Training on augumented user 107212 41/50 current_auc = 0.587232695872327
User 107212 AUC after training: 0.5868710158687102
User 107212 does not improve AUC. Reverting changes.
Training on augumented user 38227 42/50 current_auc = 0.587232695872327
User 38227 AUC after training: 0.586825805868258
User 38227 does not improve AUC. Reverting changes.
Training on augumented user 13774 43/50 current_auc = 0.587232695872327
User 13774 AUC after training: 0.5869614358696144
User 13774 does not improve AUC. Reverting changes.
Training on augumented user 93663 44/50 current_auc = 0.587232695872327
User 93663 AUC after training: 0.5866449658664497
User 93663 does not improve AUC. Reverting changes.
Training on augumented user 117528 45/50 current_auc = 0.587232695872327
User 117528 AUC after training: 0.5872779058727791
User 117528 improves AUC. Keeping the model.
Training on augumented user 130021 46/50 current_auc = 0.5872779058727791
User 130021 AUC after training: 0.5864189158641891
User 130021 does not improve AUC. Reverting changes.
Training on augumented user 120804 47/50 current_auc = 0.5872779058727791
User 120804 AUC after training: 0.5865997558659976
User 120804 does not improve AUC. Reverting changes.
Training on augumented user 14396 48/50 current_auc = 0.5872779058727791
User 14396 AUC after training: 0.5869840408698405
User 14396 does not improve AUC. Reverting changes.
Training on augumented user 110169 49/50 current_auc = 0.5872779058727791
User 110169 AUC after training: 0.5873231158732312
User 110169 improves AUC. Keeping the model.
[2024-12-02 18:05:48.781728] start test user 125137 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:49.496323] start test user 125137 52/567 recall augumented users by random, augumented_users = [62251, 114488, 86506, 1332, 59775, 100633, 102026, 73728, 54421, 99680, 31968, 90743, 108069, 129616, 20803, 88894, 9843, 116534, 120055, 133283, 40821, 103145, 18708, 75198, 117155, 61680, 58853, 127214, 133202, 28258, 6871, 123562, 111894, 135934, 130828, 69369, 35434, 7928, 2330, 74138, 16017, 110196, 135199, 65080, 101551, 52124, 28875, 102556, 78067, 60068]
[2024-12-02 18:05:49.511790] user = 125137 Cloud 52/567
[2024-12-02 18:05:49.522714] user = 125137 Local 52/567
[2024-12-02 18:05:49.647521] user = 125137 Local+ 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:51.639168] user = 125137 MPDA- 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.509090909090909
Training on augumented user 62251 0/50 current_auc = 0.509090909090909
User 62251 AUC after training: 0.509090909090909
User 62251 does not improve AUC. Reverting changes.
Training on augumented user 114488 1/50 current_auc = 0.509090909090909
User 114488 AUC after training: 0.509090909090909
User 114488 does not improve AUC. Reverting changes.
Training on augumented user 86506 2/50 current_auc = 0.509090909090909
User 86506 AUC after training: 0.509090909090909
User 86506 does not improve AUC. Reverting changes.
Training on augumented user 1332 3/50 current_auc = 0.509090909090909
User 1332 AUC after training: 0.509090909090909
User 1332 does not improve AUC. Reverting changes.
Training on augumented user 59775 4/50 current_auc = 0.509090909090909
User 59775 AUC after training: 0.509090909090909
User 59775 does not improve AUC. Reverting changes.
Training on augumented user 100633 5/50 current_auc = 0.509090909090909
User 100633 AUC after training: 0.509090909090909
User 100633 does not improve AUC. Reverting changes.
Training on augumented user 102026 6/50 current_auc = 0.509090909090909
User 102026 AUC after training: 0.509090909090909
User 102026 does not improve AUC. Reverting changes.
Training on augumented user 73728 7/50 current_auc = 0.509090909090909
User 73728 AUC after training: 0.509090909090909
User 73728 does not improve AUC. Reverting changes.
Training on augumented user 54421 8/50 current_auc = 0.509090909090909
User 54421 AUC after training: 0.509090909090909
User 54421 does not improve AUC. Reverting changes.
Training on augumented user 99680 9/50 current_auc = 0.509090909090909
User 99680 AUC after training: 0.509090909090909
User 99680 does not improve AUC. Reverting changes.
Training on augumented user 31968 10/50 current_auc = 0.509090909090909
User 31968 AUC after training: 0.509090909090909
User 31968 does not improve AUC. Reverting changes.
Training on augumented user 90743 11/50 current_auc = 0.509090909090909
User 90743 AUC after training: 0.509090909090909
User 90743 does not improve AUC. Reverting changes.
Training on augumented user 108069 12/50 current_auc = 0.509090909090909
User 108069 AUC after training: 0.509090909090909
User 108069 does not improve AUC. Reverting changes.
Training on augumented user 129616 13/50 current_auc = 0.509090909090909
User 129616 AUC after training: 0.509090909090909
User 129616 does not improve AUC. Reverting changes.
Training on augumented user 20803 14/50 current_auc = 0.509090909090909
User 20803 AUC after training: 0.509090909090909
User 20803 does not improve AUC. Reverting changes.
Training on augumented user 88894 15/50 current_auc = 0.509090909090909
User 88894 AUC after training: 0.509090909090909
User 88894 does not improve AUC. Reverting changes.
Training on augumented user 9843 16/50 current_auc = 0.509090909090909
User 9843 AUC after training: 0.509090909090909
User 9843 does not improve AUC. Reverting changes.
Training on augumented user 116534 17/50 current_auc = 0.509090909090909
User 116534 AUC after training: 0.509090909090909
User 116534 does not improve AUC. Reverting changes.
Training on augumented user 120055 18/50 current_auc = 0.509090909090909
User 120055 AUC after training: 0.509090909090909
User 120055 does not improve AUC. Reverting changes.
Training on augumented user 133283 19/50 current_auc = 0.509090909090909
User 133283 AUC after training: 0.509090909090909
User 133283 does not improve AUC. Reverting changes.
Training on augumented user 40821 20/50 current_auc = 0.509090909090909
User 40821 AUC after training: 0.5113636363636365
User 40821 improves AUC. Keeping the model.
Training on augumented user 103145 21/50 current_auc = 0.5113636363636365
User 103145 AUC after training: 0.5113636363636365
User 103145 does not improve AUC. Reverting changes.
Training on augumented user 18708 22/50 current_auc = 0.5113636363636365
User 18708 AUC after training: 0.5113636363636365
User 18708 does not improve AUC. Reverting changes.
Training on augumented user 75198 23/50 current_auc = 0.5113636363636365
User 75198 AUC after training: 0.5113636363636365
User 75198 does not improve AUC. Reverting changes.
Training on augumented user 117155 24/50 current_auc = 0.5113636363636365
User 117155 AUC after training: 0.5113636363636365
User 117155 does not improve AUC. Reverting changes.
Training on augumented user 61680 25/50 current_auc = 0.5113636363636365
User 61680 AUC after training: 0.5113636363636365
User 61680 does not improve AUC. Reverting changes.
Training on augumented user 58853 26/50 current_auc = 0.5113636363636365
User 58853 AUC after training: 0.5113636363636365
User 58853 does not improve AUC. Reverting changes.
Training on augumented user 127214 27/50 current_auc = 0.5113636363636365
User 127214 AUC after training: 0.5113636363636365
User 127214 does not improve AUC. Reverting changes.
Training on augumented user 133202 28/50 current_auc = 0.5113636363636365
User 133202 AUC after training: 0.5068181818181818
User 133202 does not improve AUC. Reverting changes.
Training on augumented user 28258 29/50 current_auc = 0.5113636363636365
User 28258 AUC after training: 0.5113636363636365
User 28258 does not improve AUC. Reverting changes.
Training on augumented user 6871 30/50 current_auc = 0.5113636363636365
User 6871 AUC after training: 0.5113636363636365
User 6871 does not improve AUC. Reverting changes.
Training on augumented user 123562 31/50 current_auc = 0.5113636363636365
User 123562 AUC after training: 0.5113636363636365
User 123562 does not improve AUC. Reverting changes.
Training on augumented user 111894 32/50 current_auc = 0.5113636363636365
User 111894 AUC after training: 0.509090909090909
User 111894 does not improve AUC. Reverting changes.
Training on augumented user 135934 33/50 current_auc = 0.5113636363636365
User 135934 AUC after training: 0.5113636363636365
User 135934 does not improve AUC. Reverting changes.
Training on augumented user 130828 34/50 current_auc = 0.5113636363636365
User 130828 AUC after training: 0.5113636363636365
User 130828 does not improve AUC. Reverting changes.
Training on augumented user 69369 35/50 current_auc = 0.5113636363636365
User 69369 AUC after training: 0.5113636363636365
User 69369 does not improve AUC. Reverting changes.
Training on augumented user 35434 36/50 current_auc = 0.5113636363636365
User 35434 AUC after training: 0.509090909090909
User 35434 does not improve AUC. Reverting changes.
Training on augumented user 7928 37/50 current_auc = 0.5113636363636365
User 7928 AUC after training: 0.5113636363636365
User 7928 does not improve AUC. Reverting changes.
Training on augumented user 2330 38/50 current_auc = 0.5113636363636365
User 2330 AUC after training: 0.509090909090909
User 2330 does not improve AUC. Reverting changes.
Training on augumented user 74138 39/50 current_auc = 0.5113636363636365
User 74138 AUC after training: 0.5113636363636365
User 74138 does not improve AUC. Reverting changes.
Training on augumented user 16017 40/50 current_auc = 0.5113636363636365
User 16017 AUC after training: 0.5113636363636365
User 16017 does not improve AUC. Reverting changes.
Training on augumented user 110196 41/50 current_auc = 0.5113636363636365
User 110196 AUC after training: 0.509090909090909
User 110196 does not improve AUC. Reverting changes.
Training on augumented user 135199 42/50 current_auc = 0.5113636363636365
User 135199 AUC after training: 0.5113636363636365
User 135199 does not improve AUC. Reverting changes.
Training on augumented user 65080 43/50 current_auc = 0.5113636363636365
User 65080 AUC after training: 0.5113636363636365
User 65080 does not improve AUC. Reverting changes.
Training on augumented user 101551 44/50 current_auc = 0.5113636363636365
User 101551 AUC after training: 0.5113636363636365
User 101551 does not improve AUC. Reverting changes.
Training on augumented user 52124 45/50 current_auc = 0.5113636363636365
User 52124 AUC after training: 0.5113636363636365
User 52124 does not improve AUC. Reverting changes.
Training on augumented user 28875 46/50 current_auc = 0.5113636363636365
User 28875 AUC after training: 0.5113636363636365
User 28875 does not improve AUC. Reverting changes.
Training on augumented user 102556 47/50 current_auc = 0.5113636363636365
User 102556 AUC after training: 0.5136363636363637
User 102556 improves AUC. Keeping the model.
Training on augumented user 78067 48/50 current_auc = 0.5136363636363637
User 78067 AUC after training: 0.5136363636363637
User 78067 does not improve AUC. Reverting changes.
Training on augumented user 60068 49/50 current_auc = 0.5136363636363637
User 60068 AUC after training: 0.5113636363636365
User 60068 does not improve AUC. Reverting changes.
[2024-12-02 18:06:21.637740] start test user 125147 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:22.229347] start test user 125147 53/567 recall augumented users by random, augumented_users = [120838, 55135, 94485, 88739, 125776, 107271, 55963, 50310, 30653, 13811, 110157, 44260, 8341, 38514, 24600, 48058, 11308, 51929, 89311, 130056, 101267, 14374, 137625, 85773, 41256, 72653, 131606, 91094, 70202, 65015, 77517, 51891, 68985, 16021, 20208, 132690, 61690, 35704, 67528, 117541, 38722, 126873, 63667, 46970, 101504, 41064, 105880, 54831, 37149, 128963]
[2024-12-02 18:06:22.244723] user = 125147 Cloud 53/567
[2024-12-02 18:06:22.259670] user = 125147 Local 53/567
[2024-12-02 18:06:22.300139] user = 125147 Local+ 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:24.561192] user = 125147 MPDA- 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5861702127659574
Training on augumented user 120838 0/50 current_auc = 0.5861702127659574
User 120838 AUC after training: 0.5813829787234043
User 120838 does not improve AUC. Reverting changes.
Training on augumented user 55135 1/50 current_auc = 0.5861702127659574
User 55135 AUC after training: 0.5856382978723405
User 55135 does not improve AUC. Reverting changes.
Training on augumented user 94485 2/50 current_auc = 0.5861702127659574
User 94485 AUC after training: 0.5845744680851064
User 94485 does not improve AUC. Reverting changes.
Training on augumented user 88739 3/50 current_auc = 0.5861702127659574
User 88739 AUC after training: 0.5835106382978724
User 88739 does not improve AUC. Reverting changes.
Training on augumented user 125776 4/50 current_auc = 0.5861702127659574
User 125776 AUC after training: 0.5845744680851064
User 125776 does not improve AUC. Reverting changes.
Training on augumented user 107271 5/50 current_auc = 0.5861702127659574
User 107271 AUC after training: 0.5819148936170213
User 107271 does not improve AUC. Reverting changes.
Training on augumented user 55963 6/50 current_auc = 0.5861702127659574
User 55963 AUC after training: 0.5824468085106382
User 55963 does not improve AUC. Reverting changes.
Training on augumented user 50310 7/50 current_auc = 0.5861702127659574
User 50310 AUC after training: 0.5861702127659575
User 50310 improves AUC. Keeping the model.
Training on augumented user 30653 8/50 current_auc = 0.5861702127659575
User 30653 AUC after training: 0.5861702127659575
User 30653 does not improve AUC. Reverting changes.
Training on augumented user 13811 9/50 current_auc = 0.5861702127659575
User 13811 AUC after training: 0.5856382978723405
User 13811 does not improve AUC. Reverting changes.
Training on augumented user 110157 10/50 current_auc = 0.5861702127659575
User 110157 AUC after training: 0.5835106382978723
User 110157 does not improve AUC. Reverting changes.
Training on augumented user 44260 11/50 current_auc = 0.5861702127659575
User 44260 AUC after training: 0.5845744680851064
User 44260 does not improve AUC. Reverting changes.
Training on augumented user 8341 12/50 current_auc = 0.5861702127659575
User 8341 AUC after training: 0.5851063829787234
User 8341 does not improve AUC. Reverting changes.
Training on augumented user 38514 13/50 current_auc = 0.5861702127659575
User 38514 AUC after training: 0.5856382978723405
User 38514 does not improve AUC. Reverting changes.
Training on augumented user 24600 14/50 current_auc = 0.5861702127659575
User 24600 AUC after training: 0.5856382978723405
User 24600 does not improve AUC. Reverting changes.
Training on augumented user 48058 15/50 current_auc = 0.5861702127659575
User 48058 AUC after training: 0.5856382978723405
User 48058 does not improve AUC. Reverting changes.
Training on augumented user 11308 16/50 current_auc = 0.5861702127659575
User 11308 AUC after training: 0.5851063829787234
User 11308 does not improve AUC. Reverting changes.
Training on augumented user 51929 17/50 current_auc = 0.5861702127659575
User 51929 AUC after training: 0.5840425531914895
User 51929 does not improve AUC. Reverting changes.
Training on augumented user 89311 18/50 current_auc = 0.5861702127659575
User 89311 AUC after training: 0.5851063829787233
User 89311 does not improve AUC. Reverting changes.
Training on augumented user 130056 19/50 current_auc = 0.5861702127659575
User 130056 AUC after training: 0.5861702127659575
User 130056 does not improve AUC. Reverting changes.
Training on augumented user 101267 20/50 current_auc = 0.5861702127659575
User 101267 AUC after training: 0.5803191489361703
User 101267 does not improve AUC. Reverting changes.
Training on augumented user 14374 21/50 current_auc = 0.5861702127659575
User 14374 AUC after training: 0.5813829787234043
User 14374 does not improve AUC. Reverting changes.
Training on augumented user 137625 22/50 current_auc = 0.5861702127659575
User 137625 AUC after training: 0.5829787234042554
User 137625 does not improve AUC. Reverting changes.
Training on augumented user 85773 23/50 current_auc = 0.5861702127659575
User 85773 AUC after training: 0.5840425531914893
User 85773 does not improve AUC. Reverting changes.
Training on augumented user 41256 24/50 current_auc = 0.5861702127659575
User 41256 AUC after training: 0.5835106382978723
User 41256 does not improve AUC. Reverting changes.
Training on augumented user 72653 25/50 current_auc = 0.5861702127659575
User 72653 AUC after training: 0.5856382978723405
User 72653 does not improve AUC. Reverting changes.
Training on augumented user 131606 26/50 current_auc = 0.5861702127659575
User 131606 AUC after training: 0.5851063829787234
User 131606 does not improve AUC. Reverting changes.
Training on augumented user 91094 27/50 current_auc = 0.5861702127659575
User 91094 AUC after training: 0.5851063829787234
User 91094 does not improve AUC. Reverting changes.
Training on augumented user 70202 28/50 current_auc = 0.5861702127659575
User 70202 AUC after training: 0.5856382978723405
User 70202 does not improve AUC. Reverting changes.
Training on augumented user 65015 29/50 current_auc = 0.5861702127659575
User 65015 AUC after training: 0.5845744680851064
User 65015 does not improve AUC. Reverting changes.
Training on augumented user 77517 30/50 current_auc = 0.5861702127659575
User 77517 AUC after training: 0.5856382978723405
User 77517 does not improve AUC. Reverting changes.
Training on augumented user 51891 31/50 current_auc = 0.5861702127659575
User 51891 AUC after training: 0.5861702127659574
User 51891 does not improve AUC. Reverting changes.
Training on augumented user 68985 32/50 current_auc = 0.5861702127659575
User 68985 AUC after training: 0.5835106382978723
User 68985 does not improve AUC. Reverting changes.
Training on augumented user 16021 33/50 current_auc = 0.5861702127659575
User 16021 AUC after training: 0.5835106382978723
User 16021 does not improve AUC. Reverting changes.
Training on augumented user 20208 34/50 current_auc = 0.5861702127659575
User 20208 AUC after training: 0.5856382978723405
User 20208 does not improve AUC. Reverting changes.
Training on augumented user 132690 35/50 current_auc = 0.5861702127659575
User 132690 AUC after training: 0.5856382978723405
User 132690 does not improve AUC. Reverting changes.
Training on augumented user 61690 36/50 current_auc = 0.5861702127659575
User 61690 AUC after training: 0.5856382978723405
User 61690 does not improve AUC. Reverting changes.
Training on augumented user 35704 37/50 current_auc = 0.5861702127659575
User 35704 AUC after training: 0.5851063829787234
User 35704 does not improve AUC. Reverting changes.
Training on augumented user 67528 38/50 current_auc = 0.5861702127659575
User 67528 AUC after training: 0.5851063829787234
User 67528 does not improve AUC. Reverting changes.
Training on augumented user 117541 39/50 current_auc = 0.5861702127659575
User 117541 AUC after training: 0.5819148936170213
User 117541 does not improve AUC. Reverting changes.
Training on augumented user 38722 40/50 current_auc = 0.5861702127659575
User 38722 AUC after training: 0.5851063829787234
User 38722 does not improve AUC. Reverting changes.
Training on augumented user 126873 41/50 current_auc = 0.5861702127659575
User 126873 AUC after training: 0.5861702127659575
User 126873 does not improve AUC. Reverting changes.
Training on augumented user 63667 42/50 current_auc = 0.5861702127659575
User 63667 AUC after training: 0.5840425531914895
User 63667 does not improve AUC. Reverting changes.
Training on augumented user 46970 43/50 current_auc = 0.5861702127659575
User 46970 AUC after training: 0.5835106382978723
User 46970 does not improve AUC. Reverting changes.
Training on augumented user 101504 44/50 current_auc = 0.5861702127659575
User 101504 AUC after training: 0.5845744680851064
User 101504 does not improve AUC. Reverting changes.
Training on augumented user 41064 45/50 current_auc = 0.5861702127659575
User 41064 AUC after training: 0.5845744680851064
User 41064 does not improve AUC. Reverting changes.
Training on augumented user 105880 46/50 current_auc = 0.5861702127659575
User 105880 AUC after training: 0.5845744680851064
User 105880 does not improve AUC. Reverting changes.
Training on augumented user 54831 47/50 current_auc = 0.5861702127659575
User 54831 AUC after training: 0.5856382978723405
User 54831 does not improve AUC. Reverting changes.
Training on augumented user 37149 48/50 current_auc = 0.5861702127659575
User 37149 AUC after training: 0.5851063829787233
User 37149 does not improve AUC. Reverting changes.
Training on augumented user 128963 49/50 current_auc = 0.5861702127659575
User 128963 AUC after training: 0.5856382978723405
User 128963 does not improve AUC. Reverting changes.
[2024-12-02 18:06:53.054173] start test user 125198 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:53.465261] start test user 125198 54/567 recall augumented users by random, augumented_users = [137150, 123638, 71944, 77399, 29491, 81248, 107947, 38844, 112097, 7147, 133957, 22930, 54295, 63315, 8981, 38154, 43965, 29687, 61284, 128137, 75825, 17156, 38875, 75862, 27001, 42535, 107056, 131694, 41250, 38460, 50705, 104884, 115324, 113845, 79799, 50168, 15406, 10733, 98498, 72869, 69903, 80510, 3941, 86091, 41599, 89760, 69379, 25552, 4744, 89016]
[2024-12-02 18:06:53.479258] user = 125198 Cloud 54/567
[2024-12-02 18:06:53.488477] user = 125198 Local 54/567
[2024-12-02 18:06:53.507172] user = 125198 Local+ 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:56.250324] user = 125198 MPDA- 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7602040816326531
Training on augumented user 137150 0/50 current_auc = 0.7602040816326531
User 137150 AUC after training: 0.7602040816326531
User 137150 does not improve AUC. Reverting changes.
Training on augumented user 123638 1/50 current_auc = 0.7602040816326531
User 123638 AUC after training: 0.7653061224489796
User 123638 improves AUC. Keeping the model.
Training on augumented user 71944 2/50 current_auc = 0.7653061224489796
User 71944 AUC after training: 0.7602040816326531
User 71944 does not improve AUC. Reverting changes.
Training on augumented user 77399 3/50 current_auc = 0.7653061224489796
User 77399 AUC after training: 0.7653061224489796
User 77399 does not improve AUC. Reverting changes.
Training on augumented user 29491 4/50 current_auc = 0.7653061224489796
User 29491 AUC after training: 0.7653061224489796
User 29491 does not improve AUC. Reverting changes.
Training on augumented user 81248 5/50 current_auc = 0.7653061224489796
User 81248 AUC after training: 0.7602040816326531
User 81248 does not improve AUC. Reverting changes.
Training on augumented user 107947 6/50 current_auc = 0.7653061224489796
User 107947 AUC after training: 0.7653061224489796
User 107947 does not improve AUC. Reverting changes.
Training on augumented user 38844 7/50 current_auc = 0.7653061224489796
User 38844 AUC after training: 0.7653061224489796
User 38844 does not improve AUC. Reverting changes.
Training on augumented user 112097 8/50 current_auc = 0.7653061224489796
User 112097 AUC after training: 0.7653061224489796
User 112097 does not improve AUC. Reverting changes.
Training on augumented user 7147 9/50 current_auc = 0.7653061224489796
User 7147 AUC after training: 0.7653061224489796
User 7147 does not improve AUC. Reverting changes.
Training on augumented user 133957 10/50 current_auc = 0.7653061224489796
User 133957 AUC after training: 0.7653061224489796
User 133957 does not improve AUC. Reverting changes.
Training on augumented user 22930 11/50 current_auc = 0.7653061224489796
User 22930 AUC after training: 0.7653061224489796
User 22930 does not improve AUC. Reverting changes.
Training on augumented user 54295 12/50 current_auc = 0.7653061224489796
User 54295 AUC after training: 0.7653061224489796
User 54295 does not improve AUC. Reverting changes.
Training on augumented user 63315 13/50 current_auc = 0.7653061224489796
User 63315 AUC after training: 0.7653061224489796
User 63315 does not improve AUC. Reverting changes.
Training on augumented user 8981 14/50 current_auc = 0.7653061224489796
User 8981 AUC after training: 0.7602040816326531
User 8981 does not improve AUC. Reverting changes.
Training on augumented user 38154 15/50 current_auc = 0.7653061224489796
User 38154 AUC after training: 0.7653061224489796
User 38154 does not improve AUC. Reverting changes.
Training on augumented user 43965 16/50 current_auc = 0.7653061224489796
User 43965 AUC after training: 0.7602040816326531
User 43965 does not improve AUC. Reverting changes.
Training on augumented user 29687 17/50 current_auc = 0.7653061224489796
User 29687 AUC after training: 0.7602040816326531
User 29687 does not improve AUC. Reverting changes.
Training on augumented user 61284 18/50 current_auc = 0.7653061224489796
User 61284 AUC after training: 0.7653061224489796
User 61284 does not improve AUC. Reverting changes.
Training on augumented user 128137 19/50 current_auc = 0.7653061224489796
User 128137 AUC after training: 0.7653061224489796
User 128137 does not improve AUC. Reverting changes.
Training on augumented user 75825 20/50 current_auc = 0.7653061224489796
User 75825 AUC after training: 0.7653061224489796
User 75825 does not improve AUC. Reverting changes.
Training on augumented user 17156 21/50 current_auc = 0.7653061224489796
User 17156 AUC after training: 0.7653061224489796
User 17156 does not improve AUC. Reverting changes.
Training on augumented user 38875 22/50 current_auc = 0.7653061224489796
User 38875 AUC after training: 0.7653061224489796
User 38875 does not improve AUC. Reverting changes.
Training on augumented user 75862 23/50 current_auc = 0.7653061224489796
User 75862 AUC after training: 0.7653061224489796
User 75862 does not improve AUC. Reverting changes.
Training on augumented user 27001 24/50 current_auc = 0.7653061224489796
User 27001 AUC after training: 0.7653061224489796
User 27001 does not improve AUC. Reverting changes.
Training on augumented user 42535 25/50 current_auc = 0.7653061224489796
User 42535 AUC after training: 0.7653061224489796
User 42535 does not improve AUC. Reverting changes.
Training on augumented user 107056 26/50 current_auc = 0.7653061224489796
User 107056 AUC after training: 0.7499999999999999
User 107056 does not improve AUC. Reverting changes.
Training on augumented user 131694 27/50 current_auc = 0.7653061224489796
User 131694 AUC after training: 0.7653061224489796
User 131694 does not improve AUC. Reverting changes.
Training on augumented user 41250 28/50 current_auc = 0.7653061224489796
User 41250 AUC after training: 0.7653061224489796
User 41250 does not improve AUC. Reverting changes.
Training on augumented user 38460 29/50 current_auc = 0.7653061224489796
User 38460 AUC after training: 0.7653061224489796
User 38460 does not improve AUC. Reverting changes.
Training on augumented user 50705 30/50 current_auc = 0.7653061224489796
User 50705 AUC after training: 0.7653061224489796
User 50705 does not improve AUC. Reverting changes.
Training on augumented user 104884 31/50 current_auc = 0.7653061224489796
User 104884 AUC after training: 0.7653061224489796
User 104884 does not improve AUC. Reverting changes.
Training on augumented user 115324 32/50 current_auc = 0.7653061224489796
User 115324 AUC after training: 0.7653061224489796
User 115324 does not improve AUC. Reverting changes.
Training on augumented user 113845 33/50 current_auc = 0.7653061224489796
User 113845 AUC after training: 0.7653061224489796
User 113845 does not improve AUC. Reverting changes.
Training on augumented user 79799 34/50 current_auc = 0.7653061224489796
User 79799 AUC after training: 0.7653061224489796
User 79799 does not improve AUC. Reverting changes.
Training on augumented user 50168 35/50 current_auc = 0.7653061224489796
User 50168 AUC after training: 0.7551020408163265
User 50168 does not improve AUC. Reverting changes.
Training on augumented user 15406 36/50 current_auc = 0.7653061224489796
User 15406 AUC after training: 0.7653061224489796
User 15406 does not improve AUC. Reverting changes.
Training on augumented user 10733 37/50 current_auc = 0.7653061224489796
User 10733 AUC after training: 0.7653061224489796
User 10733 does not improve AUC. Reverting changes.
Training on augumented user 98498 38/50 current_auc = 0.7653061224489796
User 98498 AUC after training: 0.7653061224489796
User 98498 does not improve AUC. Reverting changes.
Training on augumented user 72869 39/50 current_auc = 0.7653061224489796
User 72869 AUC after training: 0.7653061224489796
User 72869 does not improve AUC. Reverting changes.
Training on augumented user 69903 40/50 current_auc = 0.7653061224489796
User 69903 AUC after training: 0.7653061224489796
User 69903 does not improve AUC. Reverting changes.
Training on augumented user 80510 41/50 current_auc = 0.7653061224489796
User 80510 AUC after training: 0.7653061224489796
User 80510 does not improve AUC. Reverting changes.
Training on augumented user 3941 42/50 current_auc = 0.7653061224489796
User 3941 AUC after training: 0.7653061224489796
User 3941 does not improve AUC. Reverting changes.
Training on augumented user 86091 43/50 current_auc = 0.7653061224489796
User 86091 AUC after training: 0.7653061224489796
User 86091 does not improve AUC. Reverting changes.
Training on augumented user 41599 44/50 current_auc = 0.7653061224489796
User 41599 AUC after training: 0.7653061224489796
User 41599 does not improve AUC. Reverting changes.
Training on augumented user 89760 45/50 current_auc = 0.7653061224489796
User 89760 AUC after training: 0.7653061224489796
User 89760 does not improve AUC. Reverting changes.
Training on augumented user 69379 46/50 current_auc = 0.7653061224489796
User 69379 AUC after training: 0.7653061224489796
User 69379 does not improve AUC. Reverting changes.
Training on augumented user 25552 47/50 current_auc = 0.7653061224489796
User 25552 AUC after training: 0.7653061224489796
User 25552 does not improve AUC. Reverting changes.
Training on augumented user 4744 48/50 current_auc = 0.7653061224489796
User 4744 AUC after training: 0.7653061224489796
User 4744 does not improve AUC. Reverting changes.
Training on augumented user 89016 49/50 current_auc = 0.7653061224489796
User 89016 AUC after training: 0.7653061224489796
User 89016 does not improve AUC. Reverting changes.
[2024-12-02 18:07:25.949913] start test user 125226 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:26.485988] start test user 125226 55/567 recall augumented users by random, augumented_users = [5609, 37740, 135095, 80429, 129832, 132197, 126760, 79951, 115608, 100809, 69636, 68700, 4072, 126424, 36543, 7871, 32401, 19175, 118573, 66568, 137408, 135928, 45941, 9232, 8793, 94920, 91985, 5634, 108058, 100917, 50337, 51621, 492, 82057, 55283, 20091, 109904, 76144, 79284, 53047, 45742, 53576, 85424, 41171, 3593, 105965, 17372, 84847, 128132, 111990]
[2024-12-02 18:07:26.501043] user = 125226 Cloud 55/567
[2024-12-02 18:07:26.511273] user = 125226 Local 55/567
[2024-12-02 18:07:26.563863] user = 125226 Local+ 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:28.881886] user = 125226 MPDA- 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8174442190669371
Training on augumented user 5609 0/50 current_auc = 0.8174442190669371
User 5609 AUC after training: 0.8174442190669371
User 5609 does not improve AUC. Reverting changes.
Training on augumented user 37740 1/50 current_auc = 0.8174442190669371
User 37740 AUC after training: 0.8275862068965517
User 37740 improves AUC. Keeping the model.
Training on augumented user 135095 2/50 current_auc = 0.8275862068965517
User 135095 AUC after training: 0.8275862068965517
User 135095 does not improve AUC. Reverting changes.
Training on augumented user 80429 3/50 current_auc = 0.8275862068965517
User 80429 AUC after training: 0.8235294117647058
User 80429 does not improve AUC. Reverting changes.
Training on augumented user 129832 4/50 current_auc = 0.8275862068965517
User 129832 AUC after training: 0.8174442190669371
User 129832 does not improve AUC. Reverting changes.
Training on augumented user 132197 5/50 current_auc = 0.8275862068965517
User 132197 AUC after training: 0.8255578093306288
User 132197 does not improve AUC. Reverting changes.
Training on augumented user 126760 6/50 current_auc = 0.8275862068965517
User 126760 AUC after training: 0.8255578093306288
User 126760 does not improve AUC. Reverting changes.
Training on augumented user 79951 7/50 current_auc = 0.8275862068965517
User 79951 AUC after training: 0.8275862068965517
User 79951 does not improve AUC. Reverting changes.
Training on augumented user 115608 8/50 current_auc = 0.8275862068965517
User 115608 AUC after training: 0.8255578093306288
User 115608 does not improve AUC. Reverting changes.
Training on augumented user 100809 9/50 current_auc = 0.8275862068965517
User 100809 AUC after training: 0.8255578093306288
User 100809 does not improve AUC. Reverting changes.
Training on augumented user 69636 10/50 current_auc = 0.8275862068965517
User 69636 AUC after training: 0.8255578093306288
User 69636 does not improve AUC. Reverting changes.
Training on augumented user 68700 11/50 current_auc = 0.8275862068965517
User 68700 AUC after training: 0.8275862068965517
User 68700 does not improve AUC. Reverting changes.
Training on augumented user 4072 12/50 current_auc = 0.8275862068965517
User 4072 AUC after training: 0.8235294117647058
User 4072 does not improve AUC. Reverting changes.
Training on augumented user 126424 13/50 current_auc = 0.8275862068965517
User 126424 AUC after training: 0.8255578093306288
User 126424 does not improve AUC. Reverting changes.
Training on augumented user 36543 14/50 current_auc = 0.8275862068965517
User 36543 AUC after training: 0.8255578093306288
User 36543 does not improve AUC. Reverting changes.
Training on augumented user 7871 15/50 current_auc = 0.8275862068965517
User 7871 AUC after training: 0.8275862068965517
User 7871 does not improve AUC. Reverting changes.
Training on augumented user 32401 16/50 current_auc = 0.8275862068965517
User 32401 AUC after training: 0.8255578093306288
User 32401 does not improve AUC. Reverting changes.
Training on augumented user 19175 17/50 current_auc = 0.8275862068965517
User 19175 AUC after training: 0.8255578093306288
User 19175 does not improve AUC. Reverting changes.
Training on augumented user 118573 18/50 current_auc = 0.8275862068965517
User 118573 AUC after training: 0.8255578093306288
User 118573 does not improve AUC. Reverting changes.
Training on augumented user 66568 19/50 current_auc = 0.8275862068965517
User 66568 AUC after training: 0.8235294117647058
User 66568 does not improve AUC. Reverting changes.
Training on augumented user 137408 20/50 current_auc = 0.8275862068965517
User 137408 AUC after training: 0.8275862068965517
User 137408 does not improve AUC. Reverting changes.
Training on augumented user 135928 21/50 current_auc = 0.8275862068965517
User 135928 AUC after training: 0.8275862068965517
User 135928 does not improve AUC. Reverting changes.
Training on augumented user 45941 22/50 current_auc = 0.8275862068965517
User 45941 AUC after training: 0.8235294117647058
User 45941 does not improve AUC. Reverting changes.
Training on augumented user 9232 23/50 current_auc = 0.8275862068965517
User 9232 AUC after training: 0.8255578093306288
User 9232 does not improve AUC. Reverting changes.
Training on augumented user 8793 24/50 current_auc = 0.8275862068965517
User 8793 AUC after training: 0.8296146044624746
User 8793 improves AUC. Keeping the model.
Training on augumented user 94920 25/50 current_auc = 0.8296146044624746
User 94920 AUC after training: 0.8275862068965517
User 94920 does not improve AUC. Reverting changes.
Training on augumented user 91985 26/50 current_auc = 0.8296146044624746
User 91985 AUC after training: 0.8275862068965517
User 91985 does not improve AUC. Reverting changes.
Training on augumented user 5634 27/50 current_auc = 0.8296146044624746
User 5634 AUC after training: 0.8275862068965517
User 5634 does not improve AUC. Reverting changes.
Training on augumented user 108058 28/50 current_auc = 0.8296146044624746
User 108058 AUC after training: 0.8255578093306287
User 108058 does not improve AUC. Reverting changes.
Training on augumented user 100917 29/50 current_auc = 0.8296146044624746
User 100917 AUC after training: 0.8235294117647058
User 100917 does not improve AUC. Reverting changes.
Training on augumented user 50337 30/50 current_auc = 0.8296146044624746
User 50337 AUC after training: 0.8275862068965518
User 50337 does not improve AUC. Reverting changes.
Training on augumented user 51621 31/50 current_auc = 0.8296146044624746
User 51621 AUC after training: 0.8235294117647058
User 51621 does not improve AUC. Reverting changes.
Training on augumented user 492 32/50 current_auc = 0.8296146044624746
User 492 AUC after training: 0.8235294117647058
User 492 does not improve AUC. Reverting changes.
Training on augumented user 82057 33/50 current_auc = 0.8296146044624746
User 82057 AUC after training: 0.8255578093306288
User 82057 does not improve AUC. Reverting changes.
Training on augumented user 55283 34/50 current_auc = 0.8296146044624746
User 55283 AUC after training: 0.8275862068965517
User 55283 does not improve AUC. Reverting changes.
Training on augumented user 20091 35/50 current_auc = 0.8296146044624746
User 20091 AUC after training: 0.8296146044624746
User 20091 does not improve AUC. Reverting changes.
Training on augumented user 109904 36/50 current_auc = 0.8296146044624746
User 109904 AUC after training: 0.8235294117647058
User 109904 does not improve AUC. Reverting changes.
Training on augumented user 76144 37/50 current_auc = 0.8296146044624746
User 76144 AUC after training: 0.8316430020283976
User 76144 improves AUC. Keeping the model.
Training on augumented user 79284 38/50 current_auc = 0.8316430020283976
User 79284 AUC after training: 0.8316430020283976
User 79284 does not improve AUC. Reverting changes.
Training on augumented user 53047 39/50 current_auc = 0.8316430020283976
User 53047 AUC after training: 0.8316430020283976
User 53047 does not improve AUC. Reverting changes.
Training on augumented user 45742 40/50 current_auc = 0.8316430020283976
User 45742 AUC after training: 0.8316430020283976
User 45742 does not improve AUC. Reverting changes.
Training on augumented user 53576 41/50 current_auc = 0.8316430020283976
User 53576 AUC after training: 0.8296146044624746
User 53576 does not improve AUC. Reverting changes.
Training on augumented user 85424 42/50 current_auc = 0.8316430020283976
User 85424 AUC after training: 0.8296146044624747
User 85424 does not improve AUC. Reverting changes.
Training on augumented user 41171 43/50 current_auc = 0.8316430020283976
User 41171 AUC after training: 0.8316430020283976
User 41171 does not improve AUC. Reverting changes.
Training on augumented user 3593 44/50 current_auc = 0.8316430020283976
User 3593 AUC after training: 0.8275862068965517
User 3593 does not improve AUC. Reverting changes.
Training on augumented user 105965 45/50 current_auc = 0.8316430020283976
User 105965 AUC after training: 0.8275862068965516
User 105965 does not improve AUC. Reverting changes.
Training on augumented user 17372 46/50 current_auc = 0.8316430020283976
User 17372 AUC after training: 0.8275862068965516
User 17372 does not improve AUC. Reverting changes.
Training on augumented user 84847 47/50 current_auc = 0.8316430020283976
User 84847 AUC after training: 0.8275862068965518
User 84847 does not improve AUC. Reverting changes.
Training on augumented user 128132 48/50 current_auc = 0.8316430020283976
User 128132 AUC after training: 0.8275862068965517
User 128132 does not improve AUC. Reverting changes.
Training on augumented user 111990 49/50 current_auc = 0.8316430020283976
User 111990 AUC after training: 0.8255578093306288
User 111990 does not improve AUC. Reverting changes.
[2024-12-02 18:07:51.764429] start test user 125243 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:52.004281] start test user 125243 56/567 recall augumented users by random, augumented_users = [131062, 75384, 107270, 3210, 108456, 30588, 10275, 137402, 47834, 63611, 66561, 32197, 677, 130904, 11277, 122210, 81962, 127269, 108957, 119748, 1986, 95957, 109299, 40612, 33503, 39505, 73731, 41442, 86702, 136010, 83834, 41936, 125858, 95536, 115175, 121761, 137763, 5769, 33082, 116061, 98786, 33651, 18050, 51124, 10299, 28970, 5732, 29084, 55664, 130617]
[2024-12-02 18:07:52.011707] user = 125243 Cloud 56/567
[2024-12-02 18:07:52.021560] user = 125243 Local 56/567
[2024-12-02 18:07:52.054334] user = 125243 Local+ 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:52.965901] user = 125243 MPDA- 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7279717853839038
Training on augumented user 131062 0/50 current_auc = 0.7279717853839038
User 131062 AUC after training: 0.727913968547641
User 131062 does not improve AUC. Reverting changes.
Training on augumented user 75384 1/50 current_auc = 0.7279717853839038
User 75384 AUC after training: 0.7283765032377428
User 75384 improves AUC. Keeping the model.
Training on augumented user 107270 2/50 current_auc = 0.7283765032377428
User 107270 AUC after training: 0.7292437557816835
User 107270 improves AUC. Keeping the model.
Training on augumented user 3210 3/50 current_auc = 0.7292437557816835
User 3210 AUC after training: 0.7305735430157261
User 3210 improves AUC. Keeping the model.
Training on augumented user 108456 4/50 current_auc = 0.7305735430157261
User 108456 AUC after training: 0.7298797409805735
User 108456 does not improve AUC. Reverting changes.
Training on augumented user 30588 5/50 current_auc = 0.7305735430157261
User 30588 AUC after training: 0.7304000925069379
User 30588 does not improve AUC. Reverting changes.
Training on augumented user 10275 6/50 current_auc = 0.7305735430157261
User 10275 AUC after training: 0.729764107308048
User 10275 does not improve AUC. Reverting changes.
Training on augumented user 137402 7/50 current_auc = 0.7305735430157261
User 137402 AUC after training: 0.7295906567992598
User 137402 does not improve AUC. Reverting changes.
Training on augumented user 47834 8/50 current_auc = 0.7305735430157261
User 47834 AUC after training: 0.7301110083256244
User 47834 does not improve AUC. Reverting changes.
Training on augumented user 63611 9/50 current_auc = 0.7305735430157261
User 63611 AUC after training: 0.7303422756706752
User 63611 does not improve AUC. Reverting changes.
Training on augumented user 66561 10/50 current_auc = 0.7305735430157261
User 66561 AUC after training: 0.7303422756706753
User 66561 does not improve AUC. Reverting changes.
Training on augumented user 32197 11/50 current_auc = 0.7305735430157261
User 32197 AUC after training: 0.7300531914893617
User 32197 does not improve AUC. Reverting changes.
Training on augumented user 677 12/50 current_auc = 0.7305735430157261
User 677 AUC after training: 0.7303422756706752
User 677 does not improve AUC. Reverting changes.
Training on augumented user 130904 13/50 current_auc = 0.7305735430157261
User 130904 AUC after training: 0.7302266419981498
User 130904 does not improve AUC. Reverting changes.
Training on augumented user 11277 14/50 current_auc = 0.7305735430157261
User 11277 AUC after training: 0.7305735430157262
User 11277 improves AUC. Keeping the model.
Training on augumented user 122210 15/50 current_auc = 0.7305735430157262
User 122210 AUC after training: 0.7302266419981498
User 122210 does not improve AUC. Reverting changes.
Training on augumented user 81962 16/50 current_auc = 0.7305735430157262
User 81962 AUC after training: 0.7301110083256244
User 81962 does not improve AUC. Reverting changes.
Training on augumented user 127269 17/50 current_auc = 0.7305735430157262
User 127269 AUC after training: 0.73022664199815
User 127269 does not improve AUC. Reverting changes.
Training on augumented user 108957 18/50 current_auc = 0.7305735430157262
User 108957 AUC after training: 0.7305735430157262
User 108957 does not improve AUC. Reverting changes.
Training on augumented user 119748 19/50 current_auc = 0.7305735430157262
User 119748 AUC after training: 0.7294172062904718
User 119748 does not improve AUC. Reverting changes.
Training on augumented user 1986 20/50 current_auc = 0.7305735430157262
User 1986 AUC after training: 0.7297641073080481
User 1986 does not improve AUC. Reverting changes.
Training on augumented user 95957 21/50 current_auc = 0.7305735430157262
User 95957 AUC after training: 0.7304579093432008
User 95957 does not improve AUC. Reverting changes.
Training on augumented user 109299 22/50 current_auc = 0.7305735430157262
User 109299 AUC after training: 0.7287812210915818
User 109299 does not improve AUC. Reverting changes.
Training on augumented user 40612 23/50 current_auc = 0.7305735430157262
User 40612 AUC after training: 0.7301688251618872
User 40612 does not improve AUC. Reverting changes.
Training on augumented user 33503 24/50 current_auc = 0.7305735430157262
User 33503 AUC after training: 0.7306313598519889
User 33503 improves AUC. Keeping the model.
Training on augumented user 39505 25/50 current_auc = 0.7306313598519889
User 39505 AUC after training: 0.7307469935245143
User 39505 improves AUC. Keeping the model.
Training on augumented user 73731 26/50 current_auc = 0.7307469935245143
User 73731 AUC after training: 0.7309782608695652
User 73731 improves AUC. Keeping the model.
Training on augumented user 41442 27/50 current_auc = 0.7309782608695652
User 41442 AUC after training: 0.7301110083256244
User 41442 does not improve AUC. Reverting changes.
Training on augumented user 86702 28/50 current_auc = 0.7309782608695652
User 86702 AUC after training: 0.7298797409805735
User 86702 does not improve AUC. Reverting changes.
Training on augumented user 136010 29/50 current_auc = 0.7309782608695652
User 136010 AUC after training: 0.7309782608695651
User 136010 does not improve AUC. Reverting changes.
Training on augumented user 83834 30/50 current_auc = 0.7309782608695652
User 83834 AUC after training: 0.731209528214616
User 83834 improves AUC. Keeping the model.
Training on augumented user 41936 31/50 current_auc = 0.731209528214616
User 41936 AUC after training: 0.731209528214616
User 41936 does not improve AUC. Reverting changes.
Training on augumented user 125858 32/50 current_auc = 0.731209528214616
User 125858 AUC after training: 0.7306313598519888
User 125858 does not improve AUC. Reverting changes.
Training on augumented user 95536 33/50 current_auc = 0.731209528214616
User 95536 AUC after training: 0.7295328399629972
User 95536 does not improve AUC. Reverting changes.
Training on augumented user 115175 34/50 current_auc = 0.731209528214616
User 115175 AUC after training: 0.7303422756706752
User 115175 does not improve AUC. Reverting changes.
Training on augumented user 121761 35/50 current_auc = 0.731209528214616
User 121761 AUC after training: 0.731209528214616
User 121761 does not improve AUC. Reverting changes.
Training on augumented user 137763 36/50 current_auc = 0.731209528214616
User 137763 AUC after training: 0.7303422756706752
User 137763 does not improve AUC. Reverting changes.
Training on augumented user 5769 37/50 current_auc = 0.731209528214616
User 5769 AUC after training: 0.7308626271970396
User 5769 does not improve AUC. Reverting changes.
Training on augumented user 33082 38/50 current_auc = 0.731209528214616
User 33082 AUC after training: 0.7272201665124884
User 33082 does not improve AUC. Reverting changes.
Training on augumented user 116061 39/50 current_auc = 0.731209528214616
User 116061 AUC after training: 0.7293015726179464
User 116061 does not improve AUC. Reverting changes.
Training on augumented user 98786 40/50 current_auc = 0.731209528214616
User 98786 AUC after training: 0.7310938945420906
User 98786 does not improve AUC. Reverting changes.
Training on augumented user 33651 41/50 current_auc = 0.731209528214616
User 33651 AUC after training: 0.7313251618871415
User 33651 improves AUC. Keeping the model.
Training on augumented user 18050 42/50 current_auc = 0.7313251618871415
User 18050 AUC after training: 0.7300531914893617
User 18050 does not improve AUC. Reverting changes.
Training on augumented user 51124 43/50 current_auc = 0.7313251618871415
User 51124 AUC after training: 0.7309782608695652
User 51124 does not improve AUC. Reverting changes.
Training on augumented user 10299 44/50 current_auc = 0.7313251618871415
User 10299 AUC after training: 0.7307469935245142
User 10299 does not improve AUC. Reverting changes.
Training on augumented user 28970 45/50 current_auc = 0.7313251618871415
User 28970 AUC after training: 0.730804810360777
User 28970 does not improve AUC. Reverting changes.
Training on augumented user 5732 46/50 current_auc = 0.7313251618871415
User 5732 AUC after training: 0.7310360777058279
User 5732 does not improve AUC. Reverting changes.
Training on augumented user 29084 47/50 current_auc = 0.7313251618871415
User 29084 AUC after training: 0.7303422756706752
User 29084 does not improve AUC. Reverting changes.
Training on augumented user 55664 48/50 current_auc = 0.7313251618871415
User 55664 AUC after training: 0.7309782608695652
User 55664 does not improve AUC. Reverting changes.
Training on augumented user 130617 49/50 current_auc = 0.7313251618871415
User 130617 AUC after training: 0.7296484736355227
User 130617 does not improve AUC. Reverting changes.
[2024-12-02 18:08:14.031002] start test user 125250 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:14.838566] start test user 125250 57/567 recall augumented users by random, augumented_users = [134239, 69634, 92057, 594, 83289, 6307, 104568, 32211, 134798, 18024, 58114, 117534, 418, 75132, 76418, 93978, 3274, 79753, 117365, 127030, 22679, 55354, 66437, 89040, 129928, 25678, 132404, 3222, 79809, 66270, 96065, 62231, 31995, 117105, 8117, 66644, 61924, 86864, 69255, 135261, 137565, 4771, 21728, 98091, 70889, 76860, 7429, 63310, 23901, 125117]
[2024-12-02 18:08:14.856348] user = 125250 Cloud 57/567
[2024-12-02 18:08:14.910249] user = 125250 Local 57/567
[2024-12-02 18:08:14.991796] user = 125250 Local+ 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:16.701304] user = 125250 MPDA- 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6509148900453249
Training on augumented user 134239 0/50 current_auc = 0.6509148900453249
User 134239 AUC after training: 0.6509148900453249
User 134239 does not improve AUC. Reverting changes.
Training on augumented user 69634 1/50 current_auc = 0.6509148900453249
User 69634 AUC after training: 0.6493201275809972
User 69634 does not improve AUC. Reverting changes.
Training on augumented user 92057 2/50 current_auc = 0.6509148900453249
User 92057 AUC after training: 0.6504112808460634
User 92057 does not improve AUC. Reverting changes.
Training on augumented user 594 3/50 current_auc = 0.6509148900453249
User 594 AUC after training: 0.6516703038442169
User 594 improves AUC. Keeping the model.
Training on augumented user 83289 4/50 current_auc = 0.6516703038442169
User 83289 AUC after training: 0.652425717643109
User 83289 improves AUC. Keeping the model.
Training on augumented user 6307 5/50 current_auc = 0.652425717643109
User 6307 AUC after training: 0.6515863689776733
User 6307 does not improve AUC. Reverting changes.
Training on augumented user 104568 6/50 current_auc = 0.652425717643109
User 104568 AUC after training: 0.6511666946449555
User 104568 does not improve AUC. Reverting changes.
Training on augumented user 32211 7/50 current_auc = 0.652425717643109
User 32211 AUC after training: 0.6516703038442169
User 32211 does not improve AUC. Reverting changes.
Training on augumented user 134798 8/50 current_auc = 0.652425717643109
User 134798 AUC after training: 0.6517542387107604
User 134798 does not improve AUC. Reverting changes.
Training on augumented user 18024 9/50 current_auc = 0.652425717643109
User 18024 AUC after training: 0.6513345643780426
User 18024 does not improve AUC. Reverting changes.
Training on augumented user 58114 10/50 current_auc = 0.652425717643109
User 58114 AUC after training: 0.6525935873761961
User 58114 improves AUC. Keeping the model.
Training on augumented user 117534 11/50 current_auc = 0.6525935873761961
User 117534 AUC after training: 0.6516703038442169
User 117534 does not improve AUC. Reverting changes.
Training on augumented user 418 12/50 current_auc = 0.6525935873761961
User 418 AUC after training: 0.6521739130434783
User 418 does not improve AUC. Reverting changes.
Training on augumented user 75132 13/50 current_auc = 0.6525935873761961
User 75132 AUC after training: 0.6523417827765654
User 75132 does not improve AUC. Reverting changes.
Training on augumented user 76418 14/50 current_auc = 0.6525935873761961
User 76418 AUC after training: 0.651838173577304
User 76418 does not improve AUC. Reverting changes.
Training on augumented user 93978 15/50 current_auc = 0.6525935873761961
User 93978 AUC after training: 0.6527614571092832
User 93978 improves AUC. Keeping the model.
Training on augumented user 3274 16/50 current_auc = 0.6527614571092832
User 3274 AUC after training: 0.652425717643109
User 3274 does not improve AUC. Reverting changes.
Training on augumented user 79753 17/50 current_auc = 0.6527614571092832
User 79753 AUC after training: 0.651838173577304
User 79753 does not improve AUC. Reverting changes.
Training on augumented user 117365 18/50 current_auc = 0.6527614571092832
User 117365 AUC after training: 0.651670303844217
User 117365 does not improve AUC. Reverting changes.
Training on augumented user 127030 19/50 current_auc = 0.6527614571092832
User 127030 AUC after training: 0.6530971965754575
User 127030 improves AUC. Keeping the model.
Training on augumented user 22679 20/50 current_auc = 0.6530971965754575
User 22679 AUC after training: 0.651838173577304
User 22679 does not improve AUC. Reverting changes.
Training on augumented user 55354 21/50 current_auc = 0.6530971965754575
User 55354 AUC after training: 0.6520060433103911
User 55354 does not improve AUC. Reverting changes.
Training on augumented user 66437 22/50 current_auc = 0.6530971965754575
User 66437 AUC after training: 0.6520060433103911
User 66437 does not improve AUC. Reverting changes.
Training on augumented user 89040 23/50 current_auc = 0.6530971965754575
User 89040 AUC after training: 0.6525096525096525
User 89040 does not improve AUC. Reverting changes.
Training on augumented user 129928 24/50 current_auc = 0.6530971965754575
User 129928 AUC after training: 0.6515024341111297
User 129928 does not improve AUC. Reverting changes.
Training on augumented user 25678 25/50 current_auc = 0.6530971965754575
User 25678 AUC after training: 0.6521739130434783
User 25678 does not improve AUC. Reverting changes.
Training on augumented user 132404 26/50 current_auc = 0.6530971965754575
User 132404 AUC after training: 0.6532650663085446
User 132404 improves AUC. Keeping the model.
Training on augumented user 3222 27/50 current_auc = 0.6532650663085446
User 3222 AUC after training: 0.6530132617089139
User 3222 does not improve AUC. Reverting changes.
Training on augumented user 79809 28/50 current_auc = 0.6532650663085446
User 79809 AUC after training: 0.6526775222427397
User 79809 does not improve AUC. Reverting changes.
Training on augumented user 66270 29/50 current_auc = 0.6532650663085446
User 66270 AUC after training: 0.652425717643109
User 66270 does not improve AUC. Reverting changes.
Training on augumented user 96065 30/50 current_auc = 0.6532650663085446
User 96065 AUC after training: 0.654691959039785
User 96065 improves AUC. Keeping the model.
Training on augumented user 62231 31/50 current_auc = 0.654691959039785
User 62231 AUC after training: 0.6536847406412624
User 62231 does not improve AUC. Reverting changes.
Training on augumented user 31995 32/50 current_auc = 0.654691959039785
User 31995 AUC after training: 0.6515024341111297
User 31995 does not improve AUC. Reverting changes.
Training on augumented user 117105 33/50 current_auc = 0.654691959039785
User 117105 AUC after training: 0.6541044149739802
User 117105 does not improve AUC. Reverting changes.
Training on augumented user 8117 34/50 current_auc = 0.654691959039785
User 8117 AUC after training: 0.6553634379721336
User 8117 improves AUC. Keeping the model.
Training on augumented user 66644 35/50 current_auc = 0.6553634379721336
User 66644 AUC after training: 0.6548598287728722
User 66644 does not improve AUC. Reverting changes.
Training on augumented user 61924 36/50 current_auc = 0.6553634379721336
User 61924 AUC after training: 0.6543562195736109
User 61924 does not improve AUC. Reverting changes.
Training on augumented user 86864 37/50 current_auc = 0.6553634379721336
User 86864 AUC after training: 0.6555313077052207
User 86864 improves AUC. Keeping the model.
Training on augumented user 69255 38/50 current_auc = 0.6555313077052207
User 69255 AUC after training: 0.6553634379721337
User 69255 does not improve AUC. Reverting changes.
Training on augumented user 135261 39/50 current_auc = 0.6555313077052207
User 135261 AUC after training: 0.6555313077052207
User 135261 does not improve AUC. Reverting changes.
Training on augumented user 137565 40/50 current_auc = 0.6555313077052207
User 137565 AUC after training: 0.6551955682390466
User 137565 does not improve AUC. Reverting changes.
Training on augumented user 4771 41/50 current_auc = 0.6555313077052207
User 4771 AUC after training: 0.6548598287728723
User 4771 does not improve AUC. Reverting changes.
Training on augumented user 21728 42/50 current_auc = 0.6555313077052207
User 21728 AUC after training: 0.6547758939063286
User 21728 does not improve AUC. Reverting changes.
Training on augumented user 98091 43/50 current_auc = 0.6555313077052207
User 98091 AUC after training: 0.6570421353030049
User 98091 improves AUC. Keeping the model.
Training on augumented user 70889 44/50 current_auc = 0.6570421353030049
User 70889 AUC after training: 0.6548598287728722
User 70889 does not improve AUC. Reverting changes.
Training on augumented user 76860 45/50 current_auc = 0.6570421353030049
User 76860 AUC after training: 0.655867047171395
User 76860 does not improve AUC. Reverting changes.
Training on augumented user 7429 46/50 current_auc = 0.6570421353030049
User 7429 AUC after training: 0.657797549101897
User 7429 improves AUC. Keeping the model.
Training on augumented user 63310 47/50 current_auc = 0.657797549101897
User 63310 AUC after training: 0.657965418834984
User 63310 improves AUC. Keeping the model.
Training on augumented user 23901 48/50 current_auc = 0.657965418834984
User 23901 AUC after training: 0.6578814839684405
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 125117 49/50 current_auc = 0.657965418834984
User 125117 AUC after training: 0.658720832633876
User 125117 improves AUC. Keeping the model.
[2024-12-02 18:08:48.652039] start test user 125258 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:49.282041] start test user 125258 58/567 recall augumented users by random, augumented_users = [41840, 128085, 46156, 33145, 97953, 86330, 93278, 59142, 133353, 2656, 3299, 20231, 84779, 14625, 23586, 25349, 17833, 99794, 48043, 92280, 95291, 73235, 59611, 30624, 96493, 70741, 85338, 47921, 124313, 112209, 2745, 26239, 75862, 90569, 17896, 71408, 133352, 77031, 55432, 107138, 84299, 29666, 70535, 9696, 11787, 135350, 65749, 21017, 7451, 47779]
[2024-12-02 18:08:49.314757] user = 125258 Cloud 58/567
[2024-12-02 18:08:49.325697] user = 125258 Local 58/567
[2024-12-02 18:08:49.352558] user = 125258 Local+ 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:51.685513] user = 125258 MPDA- 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.583710407239819
Training on augumented user 41840 0/50 current_auc = 0.583710407239819
User 41840 AUC after training: 0.5927601809954751
User 41840 improves AUC. Keeping the model.
Training on augumented user 128085 1/50 current_auc = 0.5927601809954751
User 128085 AUC after training: 0.5927601809954751
User 128085 does not improve AUC. Reverting changes.
Training on augumented user 46156 2/50 current_auc = 0.5927601809954751
User 46156 AUC after training: 0.5882352941176471
User 46156 does not improve AUC. Reverting changes.
Training on augumented user 33145 3/50 current_auc = 0.5927601809954751
User 33145 AUC after training: 0.5972850678733032
User 33145 improves AUC. Keeping the model.
Training on augumented user 97953 4/50 current_auc = 0.5972850678733032
User 97953 AUC after training: 0.5972850678733032
User 97953 does not improve AUC. Reverting changes.
Training on augumented user 86330 5/50 current_auc = 0.5972850678733032
User 86330 AUC after training: 0.5972850678733032
User 86330 does not improve AUC. Reverting changes.
Training on augumented user 93278 6/50 current_auc = 0.5972850678733032
User 93278 AUC after training: 0.5972850678733032
User 93278 does not improve AUC. Reverting changes.
Training on augumented user 59142 7/50 current_auc = 0.5972850678733032
User 59142 AUC after training: 0.5972850678733032
User 59142 does not improve AUC. Reverting changes.
Training on augumented user 133353 8/50 current_auc = 0.5972850678733032
User 133353 AUC after training: 0.5972850678733032
User 133353 does not improve AUC. Reverting changes.
Training on augumented user 2656 9/50 current_auc = 0.5972850678733032
User 2656 AUC after training: 0.5927601809954751
User 2656 does not improve AUC. Reverting changes.
Training on augumented user 3299 10/50 current_auc = 0.5972850678733032
User 3299 AUC after training: 0.5972850678733032
User 3299 does not improve AUC. Reverting changes.
Training on augumented user 20231 11/50 current_auc = 0.5972850678733032
User 20231 AUC after training: 0.5972850678733032
User 20231 does not improve AUC. Reverting changes.
Training on augumented user 84779 12/50 current_auc = 0.5972850678733032
User 84779 AUC after training: 0.5972850678733032
User 84779 does not improve AUC. Reverting changes.
Training on augumented user 14625 13/50 current_auc = 0.5972850678733032
User 14625 AUC after training: 0.5972850678733032
User 14625 does not improve AUC. Reverting changes.
Training on augumented user 23586 14/50 current_auc = 0.5972850678733032
User 23586 AUC after training: 0.5972850678733032
User 23586 does not improve AUC. Reverting changes.
Training on augumented user 25349 15/50 current_auc = 0.5972850678733032
User 25349 AUC after training: 0.5972850678733032
User 25349 does not improve AUC. Reverting changes.
Training on augumented user 17833 16/50 current_auc = 0.5972850678733032
User 17833 AUC after training: 0.5972850678733032
User 17833 does not improve AUC. Reverting changes.
Training on augumented user 99794 17/50 current_auc = 0.5972850678733032
User 99794 AUC after training: 0.5972850678733032
User 99794 does not improve AUC. Reverting changes.
Training on augumented user 48043 18/50 current_auc = 0.5972850678733032
User 48043 AUC after training: 0.5882352941176471
User 48043 does not improve AUC. Reverting changes.
Training on augumented user 92280 19/50 current_auc = 0.5972850678733032
User 92280 AUC after training: 0.5972850678733032
User 92280 does not improve AUC. Reverting changes.
Training on augumented user 95291 20/50 current_auc = 0.5972850678733032
User 95291 AUC after training: 0.5972850678733032
User 95291 does not improve AUC. Reverting changes.
Training on augumented user 73235 21/50 current_auc = 0.5972850678733032
User 73235 AUC after training: 0.5972850678733032
User 73235 does not improve AUC. Reverting changes.
Training on augumented user 59611 22/50 current_auc = 0.5972850678733032
User 59611 AUC after training: 0.5972850678733032
User 59611 does not improve AUC. Reverting changes.
Training on augumented user 30624 23/50 current_auc = 0.5972850678733032
User 30624 AUC after training: 0.5927601809954751
User 30624 does not improve AUC. Reverting changes.
Training on augumented user 96493 24/50 current_auc = 0.5972850678733032
User 96493 AUC after training: 0.5972850678733032
User 96493 does not improve AUC. Reverting changes.
Training on augumented user 70741 25/50 current_auc = 0.5972850678733032
User 70741 AUC after training: 0.5972850678733032
User 70741 does not improve AUC. Reverting changes.
Training on augumented user 85338 26/50 current_auc = 0.5972850678733032
User 85338 AUC after training: 0.5972850678733032
User 85338 does not improve AUC. Reverting changes.
Training on augumented user 47921 27/50 current_auc = 0.5972850678733032
User 47921 AUC after training: 0.5972850678733032
User 47921 does not improve AUC. Reverting changes.
Training on augumented user 124313 28/50 current_auc = 0.5972850678733032
User 124313 AUC after training: 0.5972850678733032
User 124313 does not improve AUC. Reverting changes.
Training on augumented user 112209 29/50 current_auc = 0.5972850678733032
User 112209 AUC after training: 0.5972850678733032
User 112209 does not improve AUC. Reverting changes.
Training on augumented user 2745 30/50 current_auc = 0.5972850678733032
User 2745 AUC after training: 0.5972850678733032
User 2745 does not improve AUC. Reverting changes.
Training on augumented user 26239 31/50 current_auc = 0.5972850678733032
User 26239 AUC after training: 0.5972850678733032
User 26239 does not improve AUC. Reverting changes.
Training on augumented user 75862 32/50 current_auc = 0.5972850678733032
User 75862 AUC after training: 0.5927601809954751
User 75862 does not improve AUC. Reverting changes.
Training on augumented user 90569 33/50 current_auc = 0.5972850678733032
User 90569 AUC after training: 0.5972850678733032
User 90569 does not improve AUC. Reverting changes.
Training on augumented user 17896 34/50 current_auc = 0.5972850678733032
User 17896 AUC after training: 0.5972850678733032
User 17896 does not improve AUC. Reverting changes.
Training on augumented user 71408 35/50 current_auc = 0.5972850678733032
User 71408 AUC after training: 0.5972850678733032
User 71408 does not improve AUC. Reverting changes.
Training on augumented user 133352 36/50 current_auc = 0.5972850678733032
User 133352 AUC after training: 0.5972850678733032
User 133352 does not improve AUC. Reverting changes.
Training on augumented user 77031 37/50 current_auc = 0.5972850678733032
User 77031 AUC after training: 0.5927601809954751
User 77031 does not improve AUC. Reverting changes.
Training on augumented user 55432 38/50 current_auc = 0.5972850678733032
User 55432 AUC after training: 0.5972850678733032
User 55432 does not improve AUC. Reverting changes.
Training on augumented user 107138 39/50 current_auc = 0.5972850678733032
User 107138 AUC after training: 0.5882352941176471
User 107138 does not improve AUC. Reverting changes.
Training on augumented user 84299 40/50 current_auc = 0.5972850678733032
User 84299 AUC after training: 0.5972850678733032
User 84299 does not improve AUC. Reverting changes.
Training on augumented user 29666 41/50 current_auc = 0.5972850678733032
User 29666 AUC after training: 0.5972850678733032
User 29666 does not improve AUC. Reverting changes.
Training on augumented user 70535 42/50 current_auc = 0.5972850678733032
User 70535 AUC after training: 0.5972850678733032
User 70535 does not improve AUC. Reverting changes.
Training on augumented user 9696 43/50 current_auc = 0.5972850678733032
User 9696 AUC after training: 0.5972850678733032
User 9696 does not improve AUC. Reverting changes.
Training on augumented user 11787 44/50 current_auc = 0.5972850678733032
User 11787 AUC after training: 0.5972850678733032
User 11787 does not improve AUC. Reverting changes.
Training on augumented user 135350 45/50 current_auc = 0.5972850678733032
User 135350 AUC after training: 0.5972850678733032
User 135350 does not improve AUC. Reverting changes.
Training on augumented user 65749 46/50 current_auc = 0.5972850678733032
User 65749 AUC after training: 0.5972850678733032
User 65749 does not improve AUC. Reverting changes.
Training on augumented user 21017 47/50 current_auc = 0.5972850678733032
User 21017 AUC after training: 0.5927601809954751
User 21017 does not improve AUC. Reverting changes.
Training on augumented user 7451 48/50 current_auc = 0.5972850678733032
User 7451 AUC after training: 0.5972850678733032
User 7451 does not improve AUC. Reverting changes.
Training on augumented user 47779 49/50 current_auc = 0.5972850678733032
User 47779 AUC after training: 0.5972850678733032
User 47779 does not improve AUC. Reverting changes.
[2024-12-02 18:09:20.822765] start test user 125263 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:21.454805] start test user 125263 59/567 recall augumented users by random, augumented_users = [7278, 61878, 3329, 53418, 83730, 66926, 130207, 38397, 96052, 19223, 132885, 116142, 19954, 95410, 107675, 6538, 82545, 72977, 79390, 14243, 2418, 132921, 35341, 127751, 70881, 122577, 50445, 72477, 137409, 42078, 25554, 67658, 60385, 17806, 109354, 90754, 30921, 87683, 103522, 17088, 7285, 8280, 133569, 132228, 111800, 107646, 106298, 74505, 59892, 118004]
[2024-12-02 18:09:21.475837] user = 125263 Cloud 59/567
[2024-12-02 18:09:21.487150] user = 125263 Local 59/567
[2024-12-02 18:09:21.520999] user = 125263 Local+ 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:23.803952] user = 125263 MPDA- 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.663265306122449
Training on augumented user 7278 0/50 current_auc = 0.663265306122449
User 7278 AUC after training: 0.663265306122449
User 7278 does not improve AUC. Reverting changes.
Training on augumented user 61878 1/50 current_auc = 0.663265306122449
User 61878 AUC after training: 0.663265306122449
User 61878 does not improve AUC. Reverting changes.
Training on augumented user 3329 2/50 current_auc = 0.663265306122449
User 3329 AUC after training: 0.6615646258503401
User 3329 does not improve AUC. Reverting changes.
Training on augumented user 53418 3/50 current_auc = 0.663265306122449
User 53418 AUC after training: 0.6632653061224489
User 53418 does not improve AUC. Reverting changes.
Training on augumented user 83730 4/50 current_auc = 0.663265306122449
User 83730 AUC after training: 0.663265306122449
User 83730 does not improve AUC. Reverting changes.
Training on augumented user 66926 5/50 current_auc = 0.663265306122449
User 66926 AUC after training: 0.663265306122449
User 66926 does not improve AUC. Reverting changes.
Training on augumented user 130207 6/50 current_auc = 0.663265306122449
User 130207 AUC after training: 0.663265306122449
User 130207 does not improve AUC. Reverting changes.
Training on augumented user 38397 7/50 current_auc = 0.663265306122449
User 38397 AUC after training: 0.6649659863945577
User 38397 improves AUC. Keeping the model.
Training on augumented user 96052 8/50 current_auc = 0.6649659863945577
User 96052 AUC after training: 0.6649659863945578
User 96052 improves AUC. Keeping the model.
Training on augumented user 19223 9/50 current_auc = 0.6649659863945578
User 19223 AUC after training: 0.663265306122449
User 19223 does not improve AUC. Reverting changes.
Training on augumented user 132885 10/50 current_auc = 0.6649659863945578
User 132885 AUC after training: 0.6615646258503401
User 132885 does not improve AUC. Reverting changes.
Training on augumented user 116142 11/50 current_auc = 0.6649659863945578
User 116142 AUC after training: 0.6649659863945578
User 116142 does not improve AUC. Reverting changes.
Training on augumented user 19954 12/50 current_auc = 0.6649659863945578
User 19954 AUC after training: 0.6581632653061225
User 19954 does not improve AUC. Reverting changes.
Training on augumented user 95410 13/50 current_auc = 0.6649659863945578
User 95410 AUC after training: 0.6632653061224489
User 95410 does not improve AUC. Reverting changes.
Training on augumented user 107675 14/50 current_auc = 0.6649659863945578
User 107675 AUC after training: 0.66156462585034
User 107675 does not improve AUC. Reverting changes.
Training on augumented user 6538 15/50 current_auc = 0.6649659863945578
User 6538 AUC after training: 0.6598639455782312
User 6538 does not improve AUC. Reverting changes.
Training on augumented user 82545 16/50 current_auc = 0.6649659863945578
User 82545 AUC after training: 0.66156462585034
User 82545 does not improve AUC. Reverting changes.
Training on augumented user 72977 17/50 current_auc = 0.6649659863945578
User 72977 AUC after training: 0.6666666666666667
User 72977 improves AUC. Keeping the model.
Training on augumented user 79390 18/50 current_auc = 0.6666666666666667
User 79390 AUC after training: 0.6666666666666667
User 79390 does not improve AUC. Reverting changes.
Training on augumented user 14243 19/50 current_auc = 0.6666666666666667
User 14243 AUC after training: 0.6666666666666667
User 14243 does not improve AUC. Reverting changes.
Training on augumented user 2418 20/50 current_auc = 0.6666666666666667
User 2418 AUC after training: 0.6666666666666667
User 2418 does not improve AUC. Reverting changes.
Training on augumented user 132921 21/50 current_auc = 0.6666666666666667
User 132921 AUC after training: 0.6649659863945578
User 132921 does not improve AUC. Reverting changes.
Training on augumented user 35341 22/50 current_auc = 0.6666666666666667
User 35341 AUC after training: 0.663265306122449
User 35341 does not improve AUC. Reverting changes.
Training on augumented user 127751 23/50 current_auc = 0.6666666666666667
User 127751 AUC after training: 0.6666666666666667
User 127751 does not improve AUC. Reverting changes.
Training on augumented user 70881 24/50 current_auc = 0.6666666666666667
User 70881 AUC after training: 0.6666666666666667
User 70881 does not improve AUC. Reverting changes.
Training on augumented user 122577 25/50 current_auc = 0.6666666666666667
User 122577 AUC after training: 0.6649659863945578
User 122577 does not improve AUC. Reverting changes.
Training on augumented user 50445 26/50 current_auc = 0.6666666666666667
User 50445 AUC after training: 0.6666666666666667
User 50445 does not improve AUC. Reverting changes.
Training on augumented user 72477 27/50 current_auc = 0.6666666666666667
User 72477 AUC after training: 0.6649659863945578
User 72477 does not improve AUC. Reverting changes.
Training on augumented user 137409 28/50 current_auc = 0.6666666666666667
User 137409 AUC after training: 0.6666666666666667
User 137409 does not improve AUC. Reverting changes.
Training on augumented user 42078 29/50 current_auc = 0.6666666666666667
User 42078 AUC after training: 0.6649659863945578
User 42078 does not improve AUC. Reverting changes.
Training on augumented user 25554 30/50 current_auc = 0.6666666666666667
User 25554 AUC after training: 0.6666666666666667
User 25554 does not improve AUC. Reverting changes.
Training on augumented user 67658 31/50 current_auc = 0.6666666666666667
User 67658 AUC after training: 0.6615646258503401
User 67658 does not improve AUC. Reverting changes.
Training on augumented user 60385 32/50 current_auc = 0.6666666666666667
User 60385 AUC after training: 0.6632653061224489
User 60385 does not improve AUC. Reverting changes.
Training on augumented user 17806 33/50 current_auc = 0.6666666666666667
User 17806 AUC after training: 0.6649659863945578
User 17806 does not improve AUC. Reverting changes.
Training on augumented user 109354 34/50 current_auc = 0.6666666666666667
User 109354 AUC after training: 0.6598639455782312
User 109354 does not improve AUC. Reverting changes.
Training on augumented user 90754 35/50 current_auc = 0.6666666666666667
User 90754 AUC after training: 0.6666666666666667
User 90754 does not improve AUC. Reverting changes.
Training on augumented user 30921 36/50 current_auc = 0.6666666666666667
User 30921 AUC after training: 0.6666666666666667
User 30921 does not improve AUC. Reverting changes.
Training on augumented user 87683 37/50 current_auc = 0.6666666666666667
User 87683 AUC after training: 0.6666666666666667
User 87683 does not improve AUC. Reverting changes.
Training on augumented user 103522 38/50 current_auc = 0.6666666666666667
User 103522 AUC after training: 0.6666666666666667
User 103522 does not improve AUC. Reverting changes.
Training on augumented user 17088 39/50 current_auc = 0.6666666666666667
User 17088 AUC after training: 0.6598639455782312
User 17088 does not improve AUC. Reverting changes.
Training on augumented user 7285 40/50 current_auc = 0.6666666666666667
User 7285 AUC after training: 0.6666666666666667
User 7285 does not improve AUC. Reverting changes.
Training on augumented user 8280 41/50 current_auc = 0.6666666666666667
User 8280 AUC after training: 0.6666666666666667
User 8280 does not improve AUC. Reverting changes.
Training on augumented user 133569 42/50 current_auc = 0.6666666666666667
User 133569 AUC after training: 0.6666666666666667
User 133569 does not improve AUC. Reverting changes.
Training on augumented user 132228 43/50 current_auc = 0.6666666666666667
User 132228 AUC after training: 0.6649659863945578
User 132228 does not improve AUC. Reverting changes.
Training on augumented user 111800 44/50 current_auc = 0.6666666666666667
User 111800 AUC after training: 0.6666666666666667
User 111800 does not improve AUC. Reverting changes.
Training on augumented user 107646 45/50 current_auc = 0.6666666666666667
User 107646 AUC after training: 0.6666666666666667
User 107646 does not improve AUC. Reverting changes.
Training on augumented user 106298 46/50 current_auc = 0.6666666666666667
User 106298 AUC after training: 0.6666666666666667
User 106298 does not improve AUC. Reverting changes.
Training on augumented user 74505 47/50 current_auc = 0.6666666666666667
User 74505 AUC after training: 0.6649659863945578
User 74505 does not improve AUC. Reverting changes.
Training on augumented user 59892 48/50 current_auc = 0.6666666666666667
User 59892 AUC after training: 0.6649659863945578
User 59892 does not improve AUC. Reverting changes.
Training on augumented user 118004 49/50 current_auc = 0.6666666666666667
User 118004 AUC after training: 0.6547619047619047
User 118004 does not improve AUC. Reverting changes.
[2024-12-02 18:09:49.836286] start test user 125269 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:50.591004] start test user 125269 60/567 recall augumented users by random, augumented_users = [113040, 49031, 49267, 53781, 85786, 7454, 1965, 61074, 103665, 35623, 97430, 16045, 37707, 125678, 60033, 14931, 79011, 10374, 120228, 11772, 54389, 135371, 5664, 84871, 73949, 137977, 29880, 111758, 54391, 87581, 201, 12068, 96938, 121171, 16981, 48587, 101010, 37236, 44451, 9324, 106563, 103794, 59822, 63894, 79411, 104522, 80308, 40930, 64651, 90765]
[2024-12-02 18:09:50.612382] user = 125269 Cloud 60/567
[2024-12-02 18:09:50.632160] user = 125269 Local 60/567
[2024-12-02 18:09:50.717974] user = 125269 Local+ 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:52.838279] user = 125269 MPDA- 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6000000000000001
Training on augumented user 113040 0/50 current_auc = 0.6000000000000001
User 113040 AUC after training: 0.6000000000000001
User 113040 does not improve AUC. Reverting changes.
Training on augumented user 49031 1/50 current_auc = 0.6000000000000001
User 49031 AUC after training: 0.6000000000000001
User 49031 does not improve AUC. Reverting changes.
Training on augumented user 49267 2/50 current_auc = 0.6000000000000001
User 49267 AUC after training: 0.6000000000000001
User 49267 does not improve AUC. Reverting changes.
Training on augumented user 53781 3/50 current_auc = 0.6000000000000001
User 53781 AUC after training: 0.6000000000000001
User 53781 does not improve AUC. Reverting changes.
Training on augumented user 85786 4/50 current_auc = 0.6000000000000001
User 85786 AUC after training: 0.6000000000000001
User 85786 does not improve AUC. Reverting changes.
Training on augumented user 7454 5/50 current_auc = 0.6000000000000001
User 7454 AUC after training: 0.6000000000000001
User 7454 does not improve AUC. Reverting changes.
Training on augumented user 1965 6/50 current_auc = 0.6000000000000001
User 1965 AUC after training: 0.6000000000000001
User 1965 does not improve AUC. Reverting changes.
Training on augumented user 61074 7/50 current_auc = 0.6000000000000001
User 61074 AUC after training: 0.6000000000000001
User 61074 does not improve AUC. Reverting changes.
Training on augumented user 103665 8/50 current_auc = 0.6000000000000001
User 103665 AUC after training: 0.6000000000000001
User 103665 does not improve AUC. Reverting changes.
Training on augumented user 35623 9/50 current_auc = 0.6000000000000001
User 35623 AUC after training: 0.6000000000000001
User 35623 does not improve AUC. Reverting changes.
Training on augumented user 97430 10/50 current_auc = 0.6000000000000001
User 97430 AUC after training: 0.6000000000000001
User 97430 does not improve AUC. Reverting changes.
Training on augumented user 16045 11/50 current_auc = 0.6000000000000001
User 16045 AUC after training: 0.6000000000000001
User 16045 does not improve AUC. Reverting changes.
Training on augumented user 37707 12/50 current_auc = 0.6000000000000001
User 37707 AUC after training: 0.6000000000000001
User 37707 does not improve AUC. Reverting changes.
Training on augumented user 125678 13/50 current_auc = 0.6000000000000001
User 125678 AUC after training: 0.6000000000000001
User 125678 does not improve AUC. Reverting changes.
Training on augumented user 60033 14/50 current_auc = 0.6000000000000001
User 60033 AUC after training: 0.6000000000000001
User 60033 does not improve AUC. Reverting changes.
Training on augumented user 14931 15/50 current_auc = 0.6000000000000001
User 14931 AUC after training: 0.6000000000000001
User 14931 does not improve AUC. Reverting changes.
Training on augumented user 79011 16/50 current_auc = 0.6000000000000001
User 79011 AUC after training: 0.6000000000000001
User 79011 does not improve AUC. Reverting changes.
Training on augumented user 10374 17/50 current_auc = 0.6000000000000001
User 10374 AUC after training: 0.6000000000000001
User 10374 does not improve AUC. Reverting changes.
Training on augumented user 120228 18/50 current_auc = 0.6000000000000001
User 120228 AUC after training: 0.6000000000000001
User 120228 does not improve AUC. Reverting changes.
Training on augumented user 11772 19/50 current_auc = 0.6000000000000001
User 11772 AUC after training: 0.6000000000000001
User 11772 does not improve AUC. Reverting changes.
Training on augumented user 54389 20/50 current_auc = 0.6000000000000001
User 54389 AUC after training: 0.6000000000000001
User 54389 does not improve AUC. Reverting changes.
Training on augumented user 135371 21/50 current_auc = 0.6000000000000001
User 135371 AUC after training: 0.6000000000000001
User 135371 does not improve AUC. Reverting changes.
Training on augumented user 5664 22/50 current_auc = 0.6000000000000001
User 5664 AUC after training: 0.6000000000000001
User 5664 does not improve AUC. Reverting changes.
Training on augumented user 84871 23/50 current_auc = 0.6000000000000001
User 84871 AUC after training: 0.6000000000000001
User 84871 does not improve AUC. Reverting changes.
Training on augumented user 73949 24/50 current_auc = 0.6000000000000001
User 73949 AUC after training: 0.6000000000000001
User 73949 does not improve AUC. Reverting changes.
Training on augumented user 137977 25/50 current_auc = 0.6000000000000001
User 137977 AUC after training: 0.6000000000000001
User 137977 does not improve AUC. Reverting changes.
Training on augumented user 29880 26/50 current_auc = 0.6000000000000001
User 29880 AUC after training: 0.6000000000000001
User 29880 does not improve AUC. Reverting changes.
Training on augumented user 111758 27/50 current_auc = 0.6000000000000001
User 111758 AUC after training: 0.6000000000000001
User 111758 does not improve AUC. Reverting changes.
Training on augumented user 54391 28/50 current_auc = 0.6000000000000001
User 54391 AUC after training: 0.6000000000000001
User 54391 does not improve AUC. Reverting changes.
Training on augumented user 87581 29/50 current_auc = 0.6000000000000001
User 87581 AUC after training: 0.6000000000000001
User 87581 does not improve AUC. Reverting changes.
Training on augumented user 201 30/50 current_auc = 0.6000000000000001
User 201 AUC after training: 0.6000000000000001
User 201 does not improve AUC. Reverting changes.
Training on augumented user 12068 31/50 current_auc = 0.6000000000000001
User 12068 AUC after training: 0.6000000000000001
User 12068 does not improve AUC. Reverting changes.
Training on augumented user 96938 32/50 current_auc = 0.6000000000000001
User 96938 AUC after training: 0.6000000000000001
User 96938 does not improve AUC. Reverting changes.
Training on augumented user 121171 33/50 current_auc = 0.6000000000000001
User 121171 AUC after training: 0.6000000000000001
User 121171 does not improve AUC. Reverting changes.
Training on augumented user 16981 34/50 current_auc = 0.6000000000000001
User 16981 AUC after training: 0.6000000000000001
User 16981 does not improve AUC. Reverting changes.
Training on augumented user 48587 35/50 current_auc = 0.6000000000000001
User 48587 AUC after training: 0.6000000000000001
User 48587 does not improve AUC. Reverting changes.
Training on augumented user 101010 36/50 current_auc = 0.6000000000000001
User 101010 AUC after training: 0.6000000000000001
User 101010 does not improve AUC. Reverting changes.
Training on augumented user 37236 37/50 current_auc = 0.6000000000000001
User 37236 AUC after training: 0.6000000000000001
User 37236 does not improve AUC. Reverting changes.
Training on augumented user 44451 38/50 current_auc = 0.6000000000000001
User 44451 AUC after training: 0.6000000000000001
User 44451 does not improve AUC. Reverting changes.
Training on augumented user 9324 39/50 current_auc = 0.6000000000000001
User 9324 AUC after training: 0.6000000000000001
User 9324 does not improve AUC. Reverting changes.
Training on augumented user 106563 40/50 current_auc = 0.6000000000000001
User 106563 AUC after training: 0.6000000000000001
User 106563 does not improve AUC. Reverting changes.
Training on augumented user 103794 41/50 current_auc = 0.6000000000000001
User 103794 AUC after training: 0.6000000000000001
User 103794 does not improve AUC. Reverting changes.
Training on augumented user 59822 42/50 current_auc = 0.6000000000000001
User 59822 AUC after training: 0.6000000000000001
User 59822 does not improve AUC. Reverting changes.
Training on augumented user 63894 43/50 current_auc = 0.6000000000000001
User 63894 AUC after training: 0.6000000000000001
User 63894 does not improve AUC. Reverting changes.
Training on augumented user 79411 44/50 current_auc = 0.6000000000000001
User 79411 AUC after training: 0.6000000000000001
User 79411 does not improve AUC. Reverting changes.
Training on augumented user 104522 45/50 current_auc = 0.6000000000000001
User 104522 AUC after training: 0.6000000000000001
User 104522 does not improve AUC. Reverting changes.
Training on augumented user 80308 46/50 current_auc = 0.6000000000000001
User 80308 AUC after training: 0.6000000000000001
User 80308 does not improve AUC. Reverting changes.
Training on augumented user 40930 47/50 current_auc = 0.6000000000000001
User 40930 AUC after training: 0.6000000000000001
User 40930 does not improve AUC. Reverting changes.
Training on augumented user 64651 48/50 current_auc = 0.6000000000000001
User 64651 AUC after training: 0.6000000000000001
User 64651 does not improve AUC. Reverting changes.
Training on augumented user 90765 49/50 current_auc = 0.6000000000000001
User 90765 AUC after training: 0.6000000000000001
User 90765 does not improve AUC. Reverting changes.
[2024-12-02 18:10:24.910890] start test user 125335 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:25.526033] start test user 125335 61/567 recall augumented users by random, augumented_users = [61536, 11328, 2554, 70698, 133216, 71449, 50094, 77063, 108872, 112714, 124739, 30973, 118290, 125112, 106102, 106301, 112517, 90417, 37210, 130360, 130130, 63308, 35131, 35598, 124001, 37492, 78439, 121097, 101320, 107633, 17216, 60658, 7356, 111007, 8118, 68692, 23970, 31197, 110989, 56314, 69950, 58358, 46421, 135014, 2524, 22948, 83282, 53579, 45133, 33235]
[2024-12-02 18:10:25.541362] user = 125335 Cloud 61/567
[2024-12-02 18:10:25.559712] user = 125335 Local 61/567
[2024-12-02 18:10:25.626359] user = 125335 Local+ 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:28.062156] user = 125335 MPDA- 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7272360999194197
Training on augumented user 61536 0/50 current_auc = 0.7272360999194197
User 61536 AUC after training: 0.7268331990330379
User 61536 does not improve AUC. Reverting changes.
Training on augumented user 11328 1/50 current_auc = 0.7272360999194197
User 11328 AUC after training: 0.7270346494762289
User 11328 does not improve AUC. Reverting changes.
Training on augumented user 2554 2/50 current_auc = 0.7272360999194197
User 2554 AUC after training: 0.7274375503626108
User 2554 improves AUC. Keeping the model.
Training on augumented user 70698 3/50 current_auc = 0.7274375503626108
User 70698 AUC after training: 0.726631748589847
User 70698 does not improve AUC. Reverting changes.
Training on augumented user 133216 4/50 current_auc = 0.7274375503626108
User 133216 AUC after training: 0.726027397260274
User 133216 does not improve AUC. Reverting changes.
Training on augumented user 71449 5/50 current_auc = 0.7274375503626108
User 71449 AUC after training: 0.7284448025785657
User 71449 improves AUC. Keeping the model.
Training on augumented user 50094 6/50 current_auc = 0.7284448025785657
User 50094 AUC after training: 0.7290491539081385
User 50094 improves AUC. Keeping the model.
Training on augumented user 77063 7/50 current_auc = 0.7290491539081385
User 77063 AUC after training: 0.7296535052377114
User 77063 improves AUC. Keeping the model.
Training on augumented user 108872 8/50 current_auc = 0.7296535052377114
User 108872 AUC after training: 0.7284448025785657
User 108872 does not improve AUC. Reverting changes.
Training on augumented user 112714 9/50 current_auc = 0.7296535052377114
User 112714 AUC after training: 0.7294520547945205
User 112714 does not improve AUC. Reverting changes.
Training on augumented user 124739 10/50 current_auc = 0.7296535052377114
User 124739 AUC after training: 0.7290491539081385
User 124739 does not improve AUC. Reverting changes.
Training on augumented user 30973 11/50 current_auc = 0.7296535052377114
User 30973 AUC after training: 0.7298549556809024
User 30973 improves AUC. Keeping the model.
Training on augumented user 118290 12/50 current_auc = 0.7298549556809024
User 118290 AUC after training: 0.7300564061240934
User 118290 improves AUC. Keeping the model.
Training on augumented user 125112 13/50 current_auc = 0.7300564061240934
User 125112 AUC after training: 0.7306607574536664
User 125112 improves AUC. Keeping the model.
Training on augumented user 106102 14/50 current_auc = 0.7306607574536664
User 106102 AUC after training: 0.7306607574536664
User 106102 does not improve AUC. Reverting changes.
Training on augumented user 106301 15/50 current_auc = 0.7306607574536664
User 106301 AUC after training: 0.7304593070104753
User 106301 does not improve AUC. Reverting changes.
Training on augumented user 112517 16/50 current_auc = 0.7306607574536664
User 112517 AUC after training: 0.7302578565672845
User 112517 does not improve AUC. Reverting changes.
Training on augumented user 90417 17/50 current_auc = 0.7306607574536664
User 90417 AUC after training: 0.7306607574536663
User 90417 does not improve AUC. Reverting changes.
Training on augumented user 37210 18/50 current_auc = 0.7306607574536664
User 37210 AUC after training: 0.7304593070104753
User 37210 does not improve AUC. Reverting changes.
Training on augumented user 130360 19/50 current_auc = 0.7306607574536664
User 130360 AUC after training: 0.7306607574536664
User 130360 does not improve AUC. Reverting changes.
Training on augumented user 130130 20/50 current_auc = 0.7306607574536664
User 130130 AUC after training: 0.7285455278001612
User 130130 does not improve AUC. Reverting changes.
Training on augumented user 63308 21/50 current_auc = 0.7306607574536664
User 63308 AUC after training: 0.7304593070104755
User 63308 does not improve AUC. Reverting changes.
Training on augumented user 35131 22/50 current_auc = 0.7306607574536664
User 35131 AUC after training: 0.7304593070104753
User 35131 does not improve AUC. Reverting changes.
Training on augumented user 35598 23/50 current_auc = 0.7306607574536664
User 35598 AUC after training: 0.7306607574536664
User 35598 does not improve AUC. Reverting changes.
Training on augumented user 124001 24/50 current_auc = 0.7306607574536664
User 124001 AUC after training: 0.7302578565672844
User 124001 does not improve AUC. Reverting changes.
Training on augumented user 37492 25/50 current_auc = 0.7306607574536664
User 37492 AUC after training: 0.7304593070104755
User 37492 does not improve AUC. Reverting changes.
Training on augumented user 78439 26/50 current_auc = 0.7306607574536664
User 78439 AUC after training: 0.7306607574536664
User 78439 does not improve AUC. Reverting changes.
Training on augumented user 121097 27/50 current_auc = 0.7306607574536664
User 121097 AUC after training: 0.7300564061240934
User 121097 does not improve AUC. Reverting changes.
Training on augumented user 101320 28/50 current_auc = 0.7306607574536664
User 101320 AUC after training: 0.7306607574536664
User 101320 does not improve AUC. Reverting changes.
Training on augumented user 107633 29/50 current_auc = 0.7306607574536664
User 107633 AUC after training: 0.7310636583400484
User 107633 improves AUC. Keeping the model.
Training on augumented user 17216 30/50 current_auc = 0.7310636583400484
User 17216 AUC after training: 0.7310636583400483
User 17216 does not improve AUC. Reverting changes.
Training on augumented user 60658 31/50 current_auc = 0.7310636583400484
User 60658 AUC after training: 0.7304593070104755
User 60658 does not improve AUC. Reverting changes.
Training on augumented user 7356 32/50 current_auc = 0.7310636583400484
User 7356 AUC after training: 0.7304593070104755
User 7356 does not improve AUC. Reverting changes.
Training on augumented user 111007 33/50 current_auc = 0.7310636583400484
User 111007 AUC after training: 0.7306607574536664
User 111007 does not improve AUC. Reverting changes.
Training on augumented user 8118 34/50 current_auc = 0.7310636583400484
User 8118 AUC after training: 0.7306607574536664
User 8118 does not improve AUC. Reverting changes.
Training on augumented user 68692 35/50 current_auc = 0.7310636583400484
User 68692 AUC after training: 0.7308622078968573
User 68692 does not improve AUC. Reverting changes.
Training on augumented user 23970 36/50 current_auc = 0.7310636583400484
User 23970 AUC after training: 0.7306607574536664
User 23970 does not improve AUC. Reverting changes.
Training on augumented user 31197 37/50 current_auc = 0.7310636583400484
User 31197 AUC after training: 0.7310636583400484
User 31197 does not improve AUC. Reverting changes.
Training on augumented user 110989 38/50 current_auc = 0.7310636583400484
User 110989 AUC after training: 0.7306607574536664
User 110989 does not improve AUC. Reverting changes.
Training on augumented user 56314 39/50 current_auc = 0.7310636583400484
User 56314 AUC after training: 0.7300564061240935
User 56314 does not improve AUC. Reverting changes.
Training on augumented user 69950 40/50 current_auc = 0.7310636583400484
User 69950 AUC after training: 0.7312651087832392
User 69950 improves AUC. Keeping the model.
Training on augumented user 58358 41/50 current_auc = 0.7312651087832392
User 58358 AUC after training: 0.7306607574536663
User 58358 does not improve AUC. Reverting changes.
Training on augumented user 46421 42/50 current_auc = 0.7312651087832392
User 46421 AUC after training: 0.7306607574536663
User 46421 does not improve AUC. Reverting changes.
Training on augumented user 135014 43/50 current_auc = 0.7312651087832392
User 135014 AUC after training: 0.7306607574536664
User 135014 does not improve AUC. Reverting changes.
Training on augumented user 2524 44/50 current_auc = 0.7312651087832392
User 2524 AUC after training: 0.7298549556809024
User 2524 does not improve AUC. Reverting changes.
Training on augumented user 22948 45/50 current_auc = 0.7312651087832392
User 22948 AUC after training: 0.7312651087832394
User 22948 improves AUC. Keeping the model.
Training on augumented user 83282 46/50 current_auc = 0.7312651087832394
User 83282 AUC after training: 0.7306607574536663
User 83282 does not improve AUC. Reverting changes.
Training on augumented user 53579 47/50 current_auc = 0.7312651087832394
User 53579 AUC after training: 0.7300564061240935
User 53579 does not improve AUC. Reverting changes.
Training on augumented user 45133 48/50 current_auc = 0.7312651087832394
User 45133 AUC after training: 0.7292506043513296
User 45133 does not improve AUC. Reverting changes.
Training on augumented user 33235 49/50 current_auc = 0.7312651087832394
User 33235 AUC after training: 0.7292506043513296
User 33235 does not improve AUC. Reverting changes.
[2024-12-02 18:11:03.343095] start test user 125342 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:04.041149] start test user 125342 62/567 recall augumented users by random, augumented_users = [26066, 62231, 93383, 18026, 122653, 8045, 46941, 49147, 99961, 88849, 124075, 110933, 37878, 113019, 34948, 23717, 68254, 117923, 119742, 100077, 32029, 21173, 4482, 19193, 7617, 113315, 55583, 97419, 131486, 57929, 15915, 101931, 107109, 66179, 122107, 116377, 127876, 74891, 104570, 50696, 28124, 103723, 34824, 27243, 83051, 9804, 123848, 135237, 71526, 13119]
[2024-12-02 18:11:04.110057] user = 125342 Cloud 62/567
[2024-12-02 18:11:04.121906] user = 125342 Local 62/567
[2024-12-02 18:11:04.227284] user = 125342 Local+ 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:06.812866] user = 125342 MPDA- 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 26066 0/50 current_auc = 0.8
User 26066 AUC after training: 0.8
User 26066 does not improve AUC. Reverting changes.
Training on augumented user 62231 1/50 current_auc = 0.8
User 62231 AUC after training: 0.8
User 62231 does not improve AUC. Reverting changes.
Training on augumented user 93383 2/50 current_auc = 0.8
User 93383 AUC after training: 0.8
User 93383 does not improve AUC. Reverting changes.
Training on augumented user 18026 3/50 current_auc = 0.8
User 18026 AUC after training: 0.8
User 18026 does not improve AUC. Reverting changes.
Training on augumented user 122653 4/50 current_auc = 0.8
User 122653 AUC after training: 0.8
User 122653 does not improve AUC. Reverting changes.
Training on augumented user 8045 5/50 current_auc = 0.8
User 8045 AUC after training: 0.8
User 8045 does not improve AUC. Reverting changes.
Training on augumented user 46941 6/50 current_auc = 0.8
User 46941 AUC after training: 0.8
User 46941 does not improve AUC. Reverting changes.
Training on augumented user 49147 7/50 current_auc = 0.8
User 49147 AUC after training: 0.85
User 49147 improves AUC. Keeping the model.
Training on augumented user 99961 8/50 current_auc = 0.85
User 99961 AUC after training: 0.825
User 99961 does not improve AUC. Reverting changes.
Training on augumented user 88849 9/50 current_auc = 0.85
User 88849 AUC after training: 0.825
User 88849 does not improve AUC. Reverting changes.
Training on augumented user 124075 10/50 current_auc = 0.85
User 124075 AUC after training: 0.825
User 124075 does not improve AUC. Reverting changes.
Training on augumented user 110933 11/50 current_auc = 0.85
User 110933 AUC after training: 0.8
User 110933 does not improve AUC. Reverting changes.
Training on augumented user 37878 12/50 current_auc = 0.85
User 37878 AUC after training: 0.85
User 37878 does not improve AUC. Reverting changes.
Training on augumented user 113019 13/50 current_auc = 0.85
User 113019 AUC after training: 0.825
User 113019 does not improve AUC. Reverting changes.
Training on augumented user 34948 14/50 current_auc = 0.85
User 34948 AUC after training: 0.825
User 34948 does not improve AUC. Reverting changes.
Training on augumented user 23717 15/50 current_auc = 0.85
User 23717 AUC after training: 0.85
User 23717 does not improve AUC. Reverting changes.
Training on augumented user 68254 16/50 current_auc = 0.85
User 68254 AUC after training: 0.85
User 68254 does not improve AUC. Reverting changes.
Training on augumented user 117923 17/50 current_auc = 0.85
User 117923 AUC after training: 0.85
User 117923 does not improve AUC. Reverting changes.
Training on augumented user 119742 18/50 current_auc = 0.85
User 119742 AUC after training: 0.85
User 119742 does not improve AUC. Reverting changes.
Training on augumented user 100077 19/50 current_auc = 0.85
User 100077 AUC after training: 0.825
User 100077 does not improve AUC. Reverting changes.
Training on augumented user 32029 20/50 current_auc = 0.85
User 32029 AUC after training: 0.8
User 32029 does not improve AUC. Reverting changes.
Training on augumented user 21173 21/50 current_auc = 0.85
User 21173 AUC after training: 0.85
User 21173 does not improve AUC. Reverting changes.
Training on augumented user 4482 22/50 current_auc = 0.85
User 4482 AUC after training: 0.825
User 4482 does not improve AUC. Reverting changes.
Training on augumented user 19193 23/50 current_auc = 0.85
User 19193 AUC after training: 0.825
User 19193 does not improve AUC. Reverting changes.
Training on augumented user 7617 24/50 current_auc = 0.85
User 7617 AUC after training: 0.85
User 7617 does not improve AUC. Reverting changes.
Training on augumented user 113315 25/50 current_auc = 0.85
User 113315 AUC after training: 0.825
User 113315 does not improve AUC. Reverting changes.
Training on augumented user 55583 26/50 current_auc = 0.85
User 55583 AUC after training: 0.825
User 55583 does not improve AUC. Reverting changes.
Training on augumented user 97419 27/50 current_auc = 0.85
User 97419 AUC after training: 0.85
User 97419 does not improve AUC. Reverting changes.
Training on augumented user 131486 28/50 current_auc = 0.85
User 131486 AUC after training: 0.85
User 131486 does not improve AUC. Reverting changes.
Training on augumented user 57929 29/50 current_auc = 0.85
User 57929 AUC after training: 0.825
User 57929 does not improve AUC. Reverting changes.
Training on augumented user 15915 30/50 current_auc = 0.85
User 15915 AUC after training: 0.825
User 15915 does not improve AUC. Reverting changes.
Training on augumented user 101931 31/50 current_auc = 0.85
User 101931 AUC after training: 0.85
User 101931 does not improve AUC. Reverting changes.
Training on augumented user 107109 32/50 current_auc = 0.85
User 107109 AUC after training: 0.825
User 107109 does not improve AUC. Reverting changes.
Training on augumented user 66179 33/50 current_auc = 0.85
User 66179 AUC after training: 0.8
User 66179 does not improve AUC. Reverting changes.
Training on augumented user 122107 34/50 current_auc = 0.85
User 122107 AUC after training: 0.825
User 122107 does not improve AUC. Reverting changes.
Training on augumented user 116377 35/50 current_auc = 0.85
User 116377 AUC after training: 0.85
User 116377 does not improve AUC. Reverting changes.
Training on augumented user 127876 36/50 current_auc = 0.85
User 127876 AUC after training: 0.825
User 127876 does not improve AUC. Reverting changes.
Training on augumented user 74891 37/50 current_auc = 0.85
User 74891 AUC after training: 0.85
User 74891 does not improve AUC. Reverting changes.
Training on augumented user 104570 38/50 current_auc = 0.85
User 104570 AUC after training: 0.825
User 104570 does not improve AUC. Reverting changes.
Training on augumented user 50696 39/50 current_auc = 0.85
User 50696 AUC after training: 0.825
User 50696 does not improve AUC. Reverting changes.
Training on augumented user 28124 40/50 current_auc = 0.85
User 28124 AUC after training: 0.825
User 28124 does not improve AUC. Reverting changes.
Training on augumented user 103723 41/50 current_auc = 0.85
User 103723 AUC after training: 0.85
User 103723 does not improve AUC. Reverting changes.
Training on augumented user 34824 42/50 current_auc = 0.85
User 34824 AUC after training: 0.85
User 34824 does not improve AUC. Reverting changes.
Training on augumented user 27243 43/50 current_auc = 0.85
User 27243 AUC after training: 0.825
User 27243 does not improve AUC. Reverting changes.
Training on augumented user 83051 44/50 current_auc = 0.85
User 83051 AUC after training: 0.825
User 83051 does not improve AUC. Reverting changes.
Training on augumented user 9804 45/50 current_auc = 0.85
User 9804 AUC after training: 0.825
User 9804 does not improve AUC. Reverting changes.
Training on augumented user 123848 46/50 current_auc = 0.85
User 123848 AUC after training: 0.85
User 123848 does not improve AUC. Reverting changes.
Training on augumented user 135237 47/50 current_auc = 0.85
User 135237 AUC after training: 0.85
User 135237 does not improve AUC. Reverting changes.
Training on augumented user 71526 48/50 current_auc = 0.85
User 71526 AUC after training: 0.8
User 71526 does not improve AUC. Reverting changes.
Training on augumented user 13119 49/50 current_auc = 0.85
User 13119 AUC after training: 0.825
User 13119 does not improve AUC. Reverting changes.
[2024-12-02 18:11:32.093194] start test user 125344 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:32.877829] start test user 125344 63/567 recall augumented users by random, augumented_users = [128897, 39683, 34542, 41827, 85153, 123193, 52662, 53797, 66194, 121104, 130293, 118934, 37286, 86628, 8893, 40638, 72562, 85797, 71245, 4052, 83305, 40972, 32407, 133730, 36987, 64317, 88862, 137963, 120624, 27350, 81363, 62466, 37677, 126801, 92651, 921, 77443, 76600, 10856, 80007, 17817, 138259, 46558, 118574, 53147, 93279, 120692, 73885, 57384, 40059]
[2024-12-02 18:11:32.900722] user = 125344 Cloud 63/567
[2024-12-02 18:11:32.929234] user = 125344 Local 63/567
[2024-12-02 18:11:33.043981] user = 125344 Local+ 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:34.944141] user = 125344 MPDA- 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7210010593220338
Training on augumented user 128897 0/50 current_auc = 0.7210010593220338
User 128897 AUC after training: 0.721530720338983
User 128897 improves AUC. Keeping the model.
Training on augumented user 39683 1/50 current_auc = 0.721530720338983
User 39683 AUC after training: 0.7223252118644068
User 39683 improves AUC. Keeping the model.
Training on augumented user 34542 2/50 current_auc = 0.7223252118644068
User 34542 AUC after training: 0.7225900423728814
User 34542 improves AUC. Keeping the model.
Training on augumented user 41827 3/50 current_auc = 0.7225900423728814
User 41827 AUC after training: 0.7220603813559322
User 41827 does not improve AUC. Reverting changes.
Training on augumented user 85153 4/50 current_auc = 0.7225900423728814
User 85153 AUC after training: 0.7215307203389831
User 85153 does not improve AUC. Reverting changes.
Training on augumented user 123193 5/50 current_auc = 0.7225900423728814
User 123193 AUC after training: 0.7217955508474576
User 123193 does not improve AUC. Reverting changes.
Training on augumented user 52662 6/50 current_auc = 0.7225900423728814
User 52662 AUC after training: 0.7223252118644068
User 52662 does not improve AUC. Reverting changes.
Training on augumented user 53797 7/50 current_auc = 0.7225900423728814
User 53797 AUC after training: 0.722854872881356
User 53797 improves AUC. Keeping the model.
Training on augumented user 66194 8/50 current_auc = 0.722854872881356
User 66194 AUC after training: 0.7217955508474576
User 66194 does not improve AUC. Reverting changes.
Training on augumented user 121104 9/50 current_auc = 0.722854872881356
User 121104 AUC after training: 0.7232521186440678
User 121104 improves AUC. Keeping the model.
Training on augumented user 130293 10/50 current_auc = 0.7232521186440678
User 130293 AUC after training: 0.7233845338983051
User 130293 improves AUC. Keeping the model.
Training on augumented user 118934 11/50 current_auc = 0.7233845338983051
User 118934 AUC after training: 0.7216631355932204
User 118934 does not improve AUC. Reverting changes.
Training on augumented user 37286 12/50 current_auc = 0.7233845338983051
User 37286 AUC after training: 0.7232521186440679
User 37286 does not improve AUC. Reverting changes.
Training on augumented user 86628 13/50 current_auc = 0.7233845338983051
User 86628 AUC after training: 0.7231197033898304
User 86628 does not improve AUC. Reverting changes.
Training on augumented user 8893 14/50 current_auc = 0.7233845338983051
User 8893 AUC after training: 0.7225900423728814
User 8893 does not improve AUC. Reverting changes.
Training on augumented user 40638 15/50 current_auc = 0.7233845338983051
User 40638 AUC after training: 0.7231197033898304
User 40638 does not improve AUC. Reverting changes.
Training on augumented user 72562 16/50 current_auc = 0.7233845338983051
User 72562 AUC after training: 0.723781779661017
User 72562 improves AUC. Keeping the model.
Training on augumented user 85797 17/50 current_auc = 0.723781779661017
User 85797 AUC after training: 0.7203389830508475
User 85797 does not improve AUC. Reverting changes.
Training on augumented user 71245 18/50 current_auc = 0.723781779661017
User 71245 AUC after training: 0.7216631355932204
User 71245 does not improve AUC. Reverting changes.
Training on augumented user 4052 19/50 current_auc = 0.723781779661017
User 4052 AUC after training: 0.7216631355932204
User 4052 does not improve AUC. Reverting changes.
Training on augumented user 83305 20/50 current_auc = 0.723781779661017
User 83305 AUC after training: 0.7236493644067796
User 83305 does not improve AUC. Reverting changes.
Training on augumented user 40972 21/50 current_auc = 0.723781779661017
User 40972 AUC after training: 0.723781779661017
User 40972 does not improve AUC. Reverting changes.
Training on augumented user 32407 22/50 current_auc = 0.723781779661017
User 32407 AUC after training: 0.7236493644067796
User 32407 does not improve AUC. Reverting changes.
Training on augumented user 133730 23/50 current_auc = 0.723781779661017
User 133730 AUC after training: 0.723781779661017
User 133730 does not improve AUC. Reverting changes.
Training on augumented user 36987 24/50 current_auc = 0.723781779661017
User 36987 AUC after training: 0.7231197033898304
User 36987 does not improve AUC. Reverting changes.
Training on augumented user 64317 25/50 current_auc = 0.723781779661017
User 64317 AUC after training: 0.7229872881355932
User 64317 does not improve AUC. Reverting changes.
Training on augumented user 88862 26/50 current_auc = 0.723781779661017
User 88862 AUC after training: 0.7231197033898304
User 88862 does not improve AUC. Reverting changes.
Training on augumented user 137963 27/50 current_auc = 0.723781779661017
User 137963 AUC after training: 0.7227224576271187
User 137963 does not improve AUC. Reverting changes.
Training on augumented user 120624 28/50 current_auc = 0.723781779661017
User 120624 AUC after training: 0.723781779661017
User 120624 does not improve AUC. Reverting changes.
Training on augumented user 27350 29/50 current_auc = 0.723781779661017
User 27350 AUC after training: 0.722854872881356
User 27350 does not improve AUC. Reverting changes.
Training on augumented user 81363 30/50 current_auc = 0.723781779661017
User 81363 AUC after training: 0.7227224576271186
User 81363 does not improve AUC. Reverting changes.
Training on augumented user 62466 31/50 current_auc = 0.723781779661017
User 62466 AUC after training: 0.7231197033898304
User 62466 does not improve AUC. Reverting changes.
Training on augumented user 37677 32/50 current_auc = 0.723781779661017
User 37677 AUC after training: 0.7229872881355932
User 37677 does not improve AUC. Reverting changes.
Training on augumented user 126801 33/50 current_auc = 0.723781779661017
User 126801 AUC after training: 0.7227224576271187
User 126801 does not improve AUC. Reverting changes.
Training on augumented user 92651 34/50 current_auc = 0.723781779661017
User 92651 AUC after training: 0.7240466101694916
User 92651 improves AUC. Keeping the model.
Training on augumented user 921 35/50 current_auc = 0.7240466101694916
User 921 AUC after training: 0.7229872881355932
User 921 does not improve AUC. Reverting changes.
Training on augumented user 77443 36/50 current_auc = 0.7240466101694916
User 77443 AUC after training: 0.7235169491525424
User 77443 does not improve AUC. Reverting changes.
Training on augumented user 76600 37/50 current_auc = 0.7240466101694916
User 76600 AUC after training: 0.7233845338983051
User 76600 does not improve AUC. Reverting changes.
Training on augumented user 10856 38/50 current_auc = 0.7240466101694916
User 10856 AUC after training: 0.722457627118644
User 10856 does not improve AUC. Reverting changes.
Training on augumented user 80007 39/50 current_auc = 0.7240466101694916
User 80007 AUC after training: 0.7224576271186441
User 80007 does not improve AUC. Reverting changes.
Training on augumented user 17817 40/50 current_auc = 0.7240466101694916
User 17817 AUC after training: 0.7213983050847458
User 17817 does not improve AUC. Reverting changes.
Training on augumented user 138259 41/50 current_auc = 0.7240466101694916
User 138259 AUC after training: 0.7217955508474576
User 138259 does not improve AUC. Reverting changes.
Training on augumented user 46558 42/50 current_auc = 0.7240466101694916
User 46558 AUC after training: 0.7232521186440678
User 46558 does not improve AUC. Reverting changes.
Training on augumented user 118574 43/50 current_auc = 0.7240466101694916
User 118574 AUC after training: 0.7241790254237288
User 118574 improves AUC. Keeping the model.
Training on augumented user 53147 44/50 current_auc = 0.7241790254237288
User 53147 AUC after training: 0.7231197033898307
User 53147 does not improve AUC. Reverting changes.
Training on augumented user 93279 45/50 current_auc = 0.7241790254237288
User 93279 AUC after training: 0.7235169491525424
User 93279 does not improve AUC. Reverting changes.
Training on augumented user 120692 46/50 current_auc = 0.7241790254237288
User 120692 AUC after training: 0.7232521186440678
User 120692 does not improve AUC. Reverting changes.
Training on augumented user 73885 47/50 current_auc = 0.7241790254237288
User 73885 AUC after training: 0.722854872881356
User 73885 does not improve AUC. Reverting changes.
Training on augumented user 57384 48/50 current_auc = 0.7241790254237288
User 57384 AUC after training: 0.7231197033898304
User 57384 does not improve AUC. Reverting changes.
Training on augumented user 40059 49/50 current_auc = 0.7241790254237288
User 40059 AUC after training: 0.7240466101694916
User 40059 does not improve AUC. Reverting changes.
[2024-12-02 18:12:03.943735] start test user 125356 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:04.607705] start test user 125356 64/567 recall augumented users by random, augumented_users = [17716, 21190, 90076, 125621, 82056, 86875, 106978, 92943, 37906, 23244, 19752, 95186, 60850, 93491, 107566, 66559, 34124, 50394, 69557, 63091, 104876, 122921, 86553, 115308, 2373, 66743, 101598, 137539, 1080, 88669, 88376, 77217, 108211, 121323, 14421, 42342, 91199, 29925, 17835, 65741, 69527, 134357, 115176, 105935, 7393, 61652, 57873, 28033, 36620, 82951]
[2024-12-02 18:12:04.642288] user = 125356 Cloud 64/567
[2024-12-02 18:12:04.659075] user = 125356 Local 64/567
[2024-12-02 18:12:04.738571] user = 125356 Local+ 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:07.392315] user = 125356 MPDA- 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8431372549019608
Training on augumented user 17716 0/50 current_auc = 0.8431372549019608
User 17716 AUC after training: 0.8431372549019608
User 17716 does not improve AUC. Reverting changes.
Training on augumented user 21190 1/50 current_auc = 0.8431372549019608
User 21190 AUC after training: 0.8431372549019608
User 21190 does not improve AUC. Reverting changes.
Training on augumented user 90076 2/50 current_auc = 0.8431372549019608
User 90076 AUC after training: 0.8431372549019608
User 90076 does not improve AUC. Reverting changes.
Training on augumented user 125621 3/50 current_auc = 0.8431372549019608
User 125621 AUC after training: 0.8431372549019608
User 125621 does not improve AUC. Reverting changes.
Training on augumented user 82056 4/50 current_auc = 0.8431372549019608
User 82056 AUC after training: 0.8431372549019608
User 82056 does not improve AUC. Reverting changes.
Training on augumented user 86875 5/50 current_auc = 0.8431372549019608
User 86875 AUC after training: 0.8431372549019608
User 86875 does not improve AUC. Reverting changes.
Training on augumented user 106978 6/50 current_auc = 0.8431372549019608
User 106978 AUC after training: 0.8431372549019608
User 106978 does not improve AUC. Reverting changes.
Training on augumented user 92943 7/50 current_auc = 0.8431372549019608
User 92943 AUC after training: 0.8431372549019608
User 92943 does not improve AUC. Reverting changes.
Training on augumented user 37906 8/50 current_auc = 0.8431372549019608
User 37906 AUC after training: 0.8431372549019608
User 37906 does not improve AUC. Reverting changes.
Training on augumented user 23244 9/50 current_auc = 0.8431372549019608
User 23244 AUC after training: 0.8431372549019608
User 23244 does not improve AUC. Reverting changes.
Training on augumented user 19752 10/50 current_auc = 0.8431372549019608
User 19752 AUC after training: 0.8431372549019608
User 19752 does not improve AUC. Reverting changes.
Training on augumented user 95186 11/50 current_auc = 0.8431372549019608
User 95186 AUC after training: 0.8431372549019608
User 95186 does not improve AUC. Reverting changes.
Training on augumented user 60850 12/50 current_auc = 0.8431372549019608
User 60850 AUC after training: 0.8431372549019608
User 60850 does not improve AUC. Reverting changes.
Training on augumented user 93491 13/50 current_auc = 0.8431372549019608
User 93491 AUC after training: 0.8431372549019608
User 93491 does not improve AUC. Reverting changes.
Training on augumented user 107566 14/50 current_auc = 0.8431372549019608
User 107566 AUC after training: 0.8431372549019608
User 107566 does not improve AUC. Reverting changes.
Training on augumented user 66559 15/50 current_auc = 0.8431372549019608
User 66559 AUC after training: 0.8431372549019608
User 66559 does not improve AUC. Reverting changes.
Training on augumented user 34124 16/50 current_auc = 0.8431372549019608
User 34124 AUC after training: 0.8431372549019608
User 34124 does not improve AUC. Reverting changes.
Training on augumented user 50394 17/50 current_auc = 0.8431372549019608
User 50394 AUC after training: 0.8431372549019608
User 50394 does not improve AUC. Reverting changes.
Training on augumented user 69557 18/50 current_auc = 0.8431372549019608
User 69557 AUC after training: 0.8431372549019608
User 69557 does not improve AUC. Reverting changes.
Training on augumented user 63091 19/50 current_auc = 0.8431372549019608
User 63091 AUC after training: 0.8431372549019608
User 63091 does not improve AUC. Reverting changes.
Training on augumented user 104876 20/50 current_auc = 0.8431372549019608
User 104876 AUC after training: 0.8431372549019608
User 104876 does not improve AUC. Reverting changes.
Training on augumented user 122921 21/50 current_auc = 0.8431372549019608
User 122921 AUC after training: 0.8431372549019608
User 122921 does not improve AUC. Reverting changes.
Training on augumented user 86553 22/50 current_auc = 0.8431372549019608
User 86553 AUC after training: 0.8431372549019608
User 86553 does not improve AUC. Reverting changes.
Training on augumented user 115308 23/50 current_auc = 0.8431372549019608
User 115308 AUC after training: 0.8431372549019608
User 115308 does not improve AUC. Reverting changes.
Training on augumented user 2373 24/50 current_auc = 0.8431372549019608
User 2373 AUC after training: 0.8431372549019608
User 2373 does not improve AUC. Reverting changes.
Training on augumented user 66743 25/50 current_auc = 0.8431372549019608
User 66743 AUC after training: 0.8431372549019608
User 66743 does not improve AUC. Reverting changes.
Training on augumented user 101598 26/50 current_auc = 0.8431372549019608
User 101598 AUC after training: 0.8431372549019608
User 101598 does not improve AUC. Reverting changes.
Training on augumented user 137539 27/50 current_auc = 0.8431372549019608
User 137539 AUC after training: 0.8431372549019608
User 137539 does not improve AUC. Reverting changes.
Training on augumented user 1080 28/50 current_auc = 0.8431372549019608
User 1080 AUC after training: 0.8431372549019608
User 1080 does not improve AUC. Reverting changes.
Training on augumented user 88669 29/50 current_auc = 0.8431372549019608
User 88669 AUC after training: 0.8431372549019608
User 88669 does not improve AUC. Reverting changes.
Training on augumented user 88376 30/50 current_auc = 0.8431372549019608
User 88376 AUC after training: 0.8431372549019608
User 88376 does not improve AUC. Reverting changes.
Training on augumented user 77217 31/50 current_auc = 0.8431372549019608
User 77217 AUC after training: 0.8431372549019608
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 108211 32/50 current_auc = 0.8431372549019608
User 108211 AUC after training: 0.8431372549019608
User 108211 does not improve AUC. Reverting changes.
Training on augumented user 121323 33/50 current_auc = 0.8431372549019608
User 121323 AUC after training: 0.8431372549019608
User 121323 does not improve AUC. Reverting changes.
Training on augumented user 14421 34/50 current_auc = 0.8431372549019608
User 14421 AUC after training: 0.8431372549019608
User 14421 does not improve AUC. Reverting changes.
Training on augumented user 42342 35/50 current_auc = 0.8431372549019608
User 42342 AUC after training: 0.8431372549019608
User 42342 does not improve AUC. Reverting changes.
Training on augumented user 91199 36/50 current_auc = 0.8431372549019608
User 91199 AUC after training: 0.8431372549019608
User 91199 does not improve AUC. Reverting changes.
Training on augumented user 29925 37/50 current_auc = 0.8431372549019608
User 29925 AUC after training: 0.8431372549019608
User 29925 does not improve AUC. Reverting changes.
Training on augumented user 17835 38/50 current_auc = 0.8431372549019608
User 17835 AUC after training: 0.8431372549019608
User 17835 does not improve AUC. Reverting changes.
Training on augumented user 65741 39/50 current_auc = 0.8431372549019608
User 65741 AUC after training: 0.8431372549019608
User 65741 does not improve AUC. Reverting changes.
Training on augumented user 69527 40/50 current_auc = 0.8431372549019608
User 69527 AUC after training: 0.8431372549019608
User 69527 does not improve AUC. Reverting changes.
Training on augumented user 134357 41/50 current_auc = 0.8431372549019608
User 134357 AUC after training: 0.8431372549019608
User 134357 does not improve AUC. Reverting changes.
Training on augumented user 115176 42/50 current_auc = 0.8431372549019608
User 115176 AUC after training: 0.8431372549019608
User 115176 does not improve AUC. Reverting changes.
Training on augumented user 105935 43/50 current_auc = 0.8431372549019608
User 105935 AUC after training: 0.8431372549019608
User 105935 does not improve AUC. Reverting changes.
Training on augumented user 7393 44/50 current_auc = 0.8431372549019608
User 7393 AUC after training: 0.8431372549019608
User 7393 does not improve AUC. Reverting changes.
Training on augumented user 61652 45/50 current_auc = 0.8431372549019608
User 61652 AUC after training: 0.8431372549019608
User 61652 does not improve AUC. Reverting changes.
Training on augumented user 57873 46/50 current_auc = 0.8431372549019608
User 57873 AUC after training: 0.8431372549019608
User 57873 does not improve AUC. Reverting changes.
Training on augumented user 28033 47/50 current_auc = 0.8431372549019608
User 28033 AUC after training: 0.8431372549019608
User 28033 does not improve AUC. Reverting changes.
Training on augumented user 36620 48/50 current_auc = 0.8431372549019608
User 36620 AUC after training: 0.8431372549019608
User 36620 does not improve AUC. Reverting changes.
Training on augumented user 82951 49/50 current_auc = 0.8431372549019608
User 82951 AUC after training: 0.8431372549019608
User 82951 does not improve AUC. Reverting changes.
[2024-12-02 18:12:39.927060] start test user 125417 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:40.439565] start test user 125417 65/567 recall augumented users by random, augumented_users = [17737, 132662, 125258, 126078, 104067, 14428, 80496, 115694, 16892, 66182, 48671, 113474, 10402, 46845, 67105, 82171, 68552, 101058, 35187, 135802, 116992, 86592, 26185, 2510, 29469, 91721, 64303, 32946, 13722, 54693, 70227, 64978, 100970, 39061, 87353, 91398, 101076, 33927, 55937, 53174, 55745, 57532, 131205, 84019, 15074, 81878, 11540, 42417, 95955, 130925]
[2024-12-02 18:12:40.474445] user = 125417 Cloud 65/567
[2024-12-02 18:12:40.547891] user = 125417 Local 65/567
[2024-12-02 18:12:40.680776] user = 125417 Local+ 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:43.087109] user = 125417 MPDA- 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7307146542827657
Training on augumented user 17737 0/50 current_auc = 0.7307146542827657
User 17737 AUC after training: 0.7310371517027864
User 17737 improves AUC. Keeping the model.
Training on augumented user 132662 1/50 current_auc = 0.7310371517027864
User 132662 AUC after training: 0.7307791537667698
User 132662 does not improve AUC. Reverting changes.
Training on augumented user 125258 2/50 current_auc = 0.7310371517027864
User 125258 AUC after training: 0.731359649122807
User 125258 improves AUC. Keeping the model.
Training on augumented user 126078 3/50 current_auc = 0.731359649122807
User 126078 AUC after training: 0.7314886480908153
User 126078 improves AUC. Keeping the model.
Training on augumented user 104067 4/50 current_auc = 0.7314886480908153
User 104067 AUC after training: 0.7319401444788441
User 104067 improves AUC. Keeping the model.
Training on augumented user 14428 5/50 current_auc = 0.7319401444788441
User 14428 AUC after training: 0.73187564499484
User 14428 does not improve AUC. Reverting changes.
Training on augumented user 80496 6/50 current_auc = 0.7319401444788441
User 80496 AUC after training: 0.731359649122807
User 80496 does not improve AUC. Reverting changes.
Training on augumented user 115694 7/50 current_auc = 0.7319401444788441
User 115694 AUC after training: 0.7312306501547987
User 115694 does not improve AUC. Reverting changes.
Training on augumented user 16892 8/50 current_auc = 0.7319401444788441
User 16892 AUC after training: 0.7316176470588235
User 16892 does not improve AUC. Reverting changes.
Training on augumented user 66182 9/50 current_auc = 0.7319401444788441
User 66182 AUC after training: 0.7318111455108358
User 66182 does not improve AUC. Reverting changes.
Training on augumented user 48671 10/50 current_auc = 0.7319401444788441
User 48671 AUC after training: 0.7316821465428276
User 48671 does not improve AUC. Reverting changes.
Training on augumented user 113474 11/50 current_auc = 0.7319401444788441
User 113474 AUC after training: 0.7323271413828689
User 113474 improves AUC. Keeping the model.
Training on augumented user 10402 12/50 current_auc = 0.7323271413828689
User 10402 AUC after training: 0.7320691434468525
User 10402 does not improve AUC. Reverting changes.
Training on augumented user 46845 13/50 current_auc = 0.7323271413828689
User 46845 AUC after training: 0.7319401444788441
User 46845 does not improve AUC. Reverting changes.
Training on augumented user 67105 14/50 current_auc = 0.7323271413828689
User 67105 AUC after training: 0.7316176470588235
User 67105 does not improve AUC. Reverting changes.
Training on augumented user 82171 15/50 current_auc = 0.7323271413828689
User 82171 AUC after training: 0.7322626418988648
User 82171 does not improve AUC. Reverting changes.
Training on augumented user 68552 16/50 current_auc = 0.7323271413828689
User 68552 AUC after training: 0.7321336429308565
User 68552 does not improve AUC. Reverting changes.
Training on augumented user 101058 17/50 current_auc = 0.7323271413828689
User 101058 AUC after training: 0.7322626418988648
User 101058 does not improve AUC. Reverting changes.
Training on augumented user 35187 18/50 current_auc = 0.7323271413828689
User 35187 AUC after training: 0.7322626418988648
User 35187 does not improve AUC. Reverting changes.
Training on augumented user 135802 19/50 current_auc = 0.7323271413828689
User 135802 AUC after training: 0.7319401444788441
User 135802 does not improve AUC. Reverting changes.
Training on augumented user 116992 20/50 current_auc = 0.7323271413828689
User 116992 AUC after training: 0.7322626418988647
User 116992 does not improve AUC. Reverting changes.
Training on augumented user 86592 21/50 current_auc = 0.7323271413828689
User 86592 AUC after training: 0.731359649122807
User 86592 does not improve AUC. Reverting changes.
Training on augumented user 26185 22/50 current_auc = 0.7323271413828689
User 26185 AUC after training: 0.7316821465428277
User 26185 does not improve AUC. Reverting changes.
Training on augumented user 2510 23/50 current_auc = 0.7323271413828689
User 2510 AUC after training: 0.732391640866873
User 2510 improves AUC. Keeping the model.
Training on augumented user 29469 24/50 current_auc = 0.732391640866873
User 29469 AUC after training: 0.7320691434468524
User 29469 does not improve AUC. Reverting changes.
Training on augumented user 91721 25/50 current_auc = 0.732391640866873
User 91721 AUC after training: 0.7320691434468524
User 91721 does not improve AUC. Reverting changes.
Training on augumented user 64303 26/50 current_auc = 0.732391640866873
User 64303 AUC after training: 0.7323916408668731
User 64303 improves AUC. Keeping the model.
Training on augumented user 32946 27/50 current_auc = 0.7323916408668731
User 32946 AUC after training: 0.7325206398348814
User 32946 improves AUC. Keeping the model.
Training on augumented user 13722 28/50 current_auc = 0.7325206398348814
User 13722 AUC after training: 0.7326496388028896
User 13722 improves AUC. Keeping the model.
Training on augumented user 54693 29/50 current_auc = 0.7326496388028896
User 54693 AUC after training: 0.7316821465428276
User 54693 does not improve AUC. Reverting changes.
Training on augumented user 70227 30/50 current_auc = 0.7326496388028896
User 70227 AUC after training: 0.7327141382868937
User 70227 improves AUC. Keeping the model.
Training on augumented user 64978 31/50 current_auc = 0.7327141382868937
User 64978 AUC after training: 0.7327786377708978
User 64978 improves AUC. Keeping the model.
Training on augumented user 100970 32/50 current_auc = 0.7327786377708978
User 100970 AUC after training: 0.7326496388028896
User 100970 does not improve AUC. Reverting changes.
Training on augumented user 39061 33/50 current_auc = 0.7327786377708978
User 39061 AUC after training: 0.7320691434468525
User 39061 does not improve AUC. Reverting changes.
Training on augumented user 87353 34/50 current_auc = 0.7327786377708978
User 87353 AUC after training: 0.7325851393188855
User 87353 does not improve AUC. Reverting changes.
Training on augumented user 91398 35/50 current_auc = 0.7327786377708978
User 91398 AUC after training: 0.7320691434468525
User 91398 does not improve AUC. Reverting changes.
Training on augumented user 101076 36/50 current_auc = 0.7327786377708978
User 101076 AUC after training: 0.7323916408668731
User 101076 does not improve AUC. Reverting changes.
Training on augumented user 33927 37/50 current_auc = 0.7327786377708978
User 33927 AUC after training: 0.7321981424148607
User 33927 does not improve AUC. Reverting changes.
Training on augumented user 55937 38/50 current_auc = 0.7327786377708978
User 55937 AUC after training: 0.7322626418988648
User 55937 does not improve AUC. Reverting changes.
Training on augumented user 53174 39/50 current_auc = 0.7327786377708978
User 53174 AUC after training: 0.7322626418988648
User 53174 does not improve AUC. Reverting changes.
Training on augumented user 55745 40/50 current_auc = 0.7327786377708978
User 55745 AUC after training: 0.7317466460268318
User 55745 does not improve AUC. Reverting changes.
Training on augumented user 57532 41/50 current_auc = 0.7327786377708978
User 57532 AUC after training: 0.7325851393188855
User 57532 does not improve AUC. Reverting changes.
Training on augumented user 131205 42/50 current_auc = 0.7327786377708978
User 131205 AUC after training: 0.7327786377708978
User 131205 does not improve AUC. Reverting changes.
Training on augumented user 84019 43/50 current_auc = 0.7327786377708978
User 84019 AUC after training: 0.7325851393188855
User 84019 does not improve AUC. Reverting changes.
Training on augumented user 15074 44/50 current_auc = 0.7327786377708978
User 15074 AUC after training: 0.7325206398348814
User 15074 does not improve AUC. Reverting changes.
Training on augumented user 81878 45/50 current_auc = 0.7327786377708978
User 81878 AUC after training: 0.7312306501547987
User 81878 does not improve AUC. Reverting changes.
Training on augumented user 11540 46/50 current_auc = 0.7327786377708978
User 11540 AUC after training: 0.7325851393188854
User 11540 does not improve AUC. Reverting changes.
Training on augumented user 42417 47/50 current_auc = 0.7327786377708978
User 42417 AUC after training: 0.7324561403508771
User 42417 does not improve AUC. Reverting changes.
Training on augumented user 95955 48/50 current_auc = 0.7327786377708978
User 95955 AUC after training: 0.7320046439628483
User 95955 does not improve AUC. Reverting changes.
Training on augumented user 130925 49/50 current_auc = 0.7327786377708978
User 130925 AUC after training: 0.7321981424148607
User 130925 does not improve AUC. Reverting changes.
[2024-12-02 18:13:13.266405] start test user 125424 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:13.859809] start test user 125424 66/567 recall augumented users by random, augumented_users = [25012, 122399, 82546, 114419, 41510, 10877, 6038, 57977, 37251, 96912, 11315, 50681, 136098, 9718, 19176, 42143, 132749, 23177, 11367, 60004, 38538, 61385, 96285, 133718, 68274, 79681, 64112, 68548, 94897, 39743, 98942, 11119, 26155, 28576, 52662, 100201, 102680, 46965, 8725, 31945, 64034, 49064, 136532, 928, 41306, 66687, 16177, 56663, 85967, 93353]
[2024-12-02 18:13:13.874662] user = 125424 Cloud 66/567
[2024-12-02 18:13:13.884986] user = 125424 Local 66/567
[2024-12-02 18:13:13.962887] user = 125424 Local+ 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:16.489436] user = 125424 MPDA- 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 25012 0/50 current_auc = 0.0
User 25012 AUC after training: 0.0
User 25012 does not improve AUC. Reverting changes.
Training on augumented user 122399 1/50 current_auc = 0.0
User 122399 AUC after training: 0.0
User 122399 does not improve AUC. Reverting changes.
Training on augumented user 82546 2/50 current_auc = 0.0
User 82546 AUC after training: 0.0
User 82546 does not improve AUC. Reverting changes.
Training on augumented user 114419 3/50 current_auc = 0.0
User 114419 AUC after training: 0.0
User 114419 does not improve AUC. Reverting changes.
Training on augumented user 41510 4/50 current_auc = 0.0
User 41510 AUC after training: 0.0
User 41510 does not improve AUC. Reverting changes.
Training on augumented user 10877 5/50 current_auc = 0.0
User 10877 AUC after training: 0.0
User 10877 does not improve AUC. Reverting changes.
Training on augumented user 6038 6/50 current_auc = 0.0
User 6038 AUC after training: 0.0
User 6038 does not improve AUC. Reverting changes.
Training on augumented user 57977 7/50 current_auc = 0.0
User 57977 AUC after training: 0.0
User 57977 does not improve AUC. Reverting changes.
Training on augumented user 37251 8/50 current_auc = 0.0
User 37251 AUC after training: 0.0
User 37251 does not improve AUC. Reverting changes.
Training on augumented user 96912 9/50 current_auc = 0.0
User 96912 AUC after training: 0.0
User 96912 does not improve AUC. Reverting changes.
Training on augumented user 11315 10/50 current_auc = 0.0
User 11315 AUC after training: 0.0
User 11315 does not improve AUC. Reverting changes.
Training on augumented user 50681 11/50 current_auc = 0.0
User 50681 AUC after training: 0.0
User 50681 does not improve AUC. Reverting changes.
Training on augumented user 136098 12/50 current_auc = 0.0
User 136098 AUC after training: 0.0
User 136098 does not improve AUC. Reverting changes.
Training on augumented user 9718 13/50 current_auc = 0.0
User 9718 AUC after training: 0.0
User 9718 does not improve AUC. Reverting changes.
Training on augumented user 19176 14/50 current_auc = 0.0
User 19176 AUC after training: 0.0
User 19176 does not improve AUC. Reverting changes.
Training on augumented user 42143 15/50 current_auc = 0.0
User 42143 AUC after training: 0.0
User 42143 does not improve AUC. Reverting changes.
Training on augumented user 132749 16/50 current_auc = 0.0
User 132749 AUC after training: 0.0
User 132749 does not improve AUC. Reverting changes.
Training on augumented user 23177 17/50 current_auc = 0.0
User 23177 AUC after training: 0.0
User 23177 does not improve AUC. Reverting changes.
Training on augumented user 11367 18/50 current_auc = 0.0
User 11367 AUC after training: 0.0
User 11367 does not improve AUC. Reverting changes.
Training on augumented user 60004 19/50 current_auc = 0.0
User 60004 AUC after training: 0.0
User 60004 does not improve AUC. Reverting changes.
Training on augumented user 38538 20/50 current_auc = 0.0
User 38538 AUC after training: 0.0
User 38538 does not improve AUC. Reverting changes.
Training on augumented user 61385 21/50 current_auc = 0.0
User 61385 AUC after training: 0.0
User 61385 does not improve AUC. Reverting changes.
Training on augumented user 96285 22/50 current_auc = 0.0
User 96285 AUC after training: 0.0
User 96285 does not improve AUC. Reverting changes.
Training on augumented user 133718 23/50 current_auc = 0.0
User 133718 AUC after training: 0.0
User 133718 does not improve AUC. Reverting changes.
Training on augumented user 68274 24/50 current_auc = 0.0
User 68274 AUC after training: 0.0
User 68274 does not improve AUC. Reverting changes.
Training on augumented user 79681 25/50 current_auc = 0.0
User 79681 AUC after training: 0.0
User 79681 does not improve AUC. Reverting changes.
Training on augumented user 64112 26/50 current_auc = 0.0
User 64112 AUC after training: 0.0
User 64112 does not improve AUC. Reverting changes.
Training on augumented user 68548 27/50 current_auc = 0.0
User 68548 AUC after training: 0.0
User 68548 does not improve AUC. Reverting changes.
Training on augumented user 94897 28/50 current_auc = 0.0
User 94897 AUC after training: 0.0
User 94897 does not improve AUC. Reverting changes.
Training on augumented user 39743 29/50 current_auc = 0.0
User 39743 AUC after training: 0.0
User 39743 does not improve AUC. Reverting changes.
Training on augumented user 98942 30/50 current_auc = 0.0
User 98942 AUC after training: 0.0
User 98942 does not improve AUC. Reverting changes.
Training on augumented user 11119 31/50 current_auc = 0.0
User 11119 AUC after training: 0.0
User 11119 does not improve AUC. Reverting changes.
Training on augumented user 26155 32/50 current_auc = 0.0
User 26155 AUC after training: 0.0
User 26155 does not improve AUC. Reverting changes.
Training on augumented user 28576 33/50 current_auc = 0.0
User 28576 AUC after training: 0.0
User 28576 does not improve AUC. Reverting changes.
Training on augumented user 52662 34/50 current_auc = 0.0
User 52662 AUC after training: 0.0
User 52662 does not improve AUC. Reverting changes.
Training on augumented user 100201 35/50 current_auc = 0.0
User 100201 AUC after training: 0.0
User 100201 does not improve AUC. Reverting changes.
Training on augumented user 102680 36/50 current_auc = 0.0
User 102680 AUC after training: 0.0
User 102680 does not improve AUC. Reverting changes.
Training on augumented user 46965 37/50 current_auc = 0.0
User 46965 AUC after training: 0.0
User 46965 does not improve AUC. Reverting changes.
Training on augumented user 8725 38/50 current_auc = 0.0
User 8725 AUC after training: 0.0
User 8725 does not improve AUC. Reverting changes.
Training on augumented user 31945 39/50 current_auc = 0.0
User 31945 AUC after training: 0.0
User 31945 does not improve AUC. Reverting changes.
Training on augumented user 64034 40/50 current_auc = 0.0
User 64034 AUC after training: 0.0
User 64034 does not improve AUC. Reverting changes.
Training on augumented user 49064 41/50 current_auc = 0.0
User 49064 AUC after training: 0.0
User 49064 does not improve AUC. Reverting changes.
Training on augumented user 136532 42/50 current_auc = 0.0
User 136532 AUC after training: 0.0
User 136532 does not improve AUC. Reverting changes.
Training on augumented user 928 43/50 current_auc = 0.0
User 928 AUC after training: 0.0
User 928 does not improve AUC. Reverting changes.
Training on augumented user 41306 44/50 current_auc = 0.0
User 41306 AUC after training: 0.0
User 41306 does not improve AUC. Reverting changes.
Training on augumented user 66687 45/50 current_auc = 0.0
User 66687 AUC after training: 0.0
User 66687 does not improve AUC. Reverting changes.
Training on augumented user 16177 46/50 current_auc = 0.0
User 16177 AUC after training: 0.0
User 16177 does not improve AUC. Reverting changes.
Training on augumented user 56663 47/50 current_auc = 0.0
User 56663 AUC after training: 0.0
User 56663 does not improve AUC. Reverting changes.
Training on augumented user 85967 48/50 current_auc = 0.0
User 85967 AUC after training: 0.0
User 85967 does not improve AUC. Reverting changes.
Training on augumented user 93353 49/50 current_auc = 0.0
User 93353 AUC after training: 0.0
User 93353 does not improve AUC. Reverting changes.
[2024-12-02 18:13:43.383578] start test user 125439 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:43.870882] start test user 125439 67/567 recall augumented users by random, augumented_users = [11227, 47804, 4703, 137739, 27963, 98486, 85864, 16404, 1936, 38559, 111410, 96363, 75733, 71707, 54552, 95438, 79481, 86553, 13407, 69469, 89660, 21136, 87706, 99741, 112550, 27772, 49257, 72063, 36509, 39837, 12803, 26195, 84676, 77245, 8695, 42886, 41597, 98287, 104788, 79589, 126508, 88365, 121308, 104249, 24500, 29722, 72336, 114021, 36353, 136324]
[2024-12-02 18:13:43.890964] user = 125439 Cloud 67/567
[2024-12-02 18:13:43.906535] user = 125439 Local 67/567
[2024-12-02 18:13:44.038005] user = 125439 Local+ 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:46.784934] user = 125439 MPDA- 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5813793103448276
Training on augumented user 11227 0/50 current_auc = 0.5813793103448276
User 11227 AUC after training: 0.5806896551724139
User 11227 does not improve AUC. Reverting changes.
Training on augumented user 47804 1/50 current_auc = 0.5813793103448276
User 47804 AUC after training: 0.5793103448275863
User 47804 does not improve AUC. Reverting changes.
Training on augumented user 4703 2/50 current_auc = 0.5813793103448276
User 4703 AUC after training: 0.58
User 4703 does not improve AUC. Reverting changes.
Training on augumented user 137739 3/50 current_auc = 0.5813793103448276
User 137739 AUC after training: 0.5813793103448276
User 137739 does not improve AUC. Reverting changes.
Training on augumented user 27963 4/50 current_auc = 0.5813793103448276
User 27963 AUC after training: 0.5806896551724138
User 27963 does not improve AUC. Reverting changes.
Training on augumented user 98486 5/50 current_auc = 0.5813793103448276
User 98486 AUC after training: 0.5813793103448276
User 98486 does not improve AUC. Reverting changes.
Training on augumented user 85864 6/50 current_auc = 0.5813793103448276
User 85864 AUC after training: 0.5820689655172414
User 85864 improves AUC. Keeping the model.
Training on augumented user 16404 7/50 current_auc = 0.5820689655172414
User 16404 AUC after training: 0.5827586206896551
User 16404 improves AUC. Keeping the model.
Training on augumented user 1936 8/50 current_auc = 0.5827586206896551
User 1936 AUC after training: 0.5841379310344827
User 1936 improves AUC. Keeping the model.
Training on augumented user 38559 9/50 current_auc = 0.5841379310344827
User 38559 AUC after training: 0.5827586206896551
User 38559 does not improve AUC. Reverting changes.
Training on augumented user 111410 10/50 current_auc = 0.5841379310344827
User 111410 AUC after training: 0.5827586206896552
User 111410 does not improve AUC. Reverting changes.
Training on augumented user 96363 11/50 current_auc = 0.5841379310344827
User 96363 AUC after training: 0.5827586206896551
User 96363 does not improve AUC. Reverting changes.
Training on augumented user 75733 12/50 current_auc = 0.5841379310344827
User 75733 AUC after training: 0.5848275862068966
User 75733 improves AUC. Keeping the model.
Training on augumented user 71707 13/50 current_auc = 0.5848275862068966
User 71707 AUC after training: 0.5841379310344827
User 71707 does not improve AUC. Reverting changes.
Training on augumented user 54552 14/50 current_auc = 0.5848275862068966
User 54552 AUC after training: 0.5841379310344827
User 54552 does not improve AUC. Reverting changes.
Training on augumented user 95438 15/50 current_auc = 0.5848275862068966
User 95438 AUC after training: 0.5841379310344827
User 95438 does not improve AUC. Reverting changes.
Training on augumented user 79481 16/50 current_auc = 0.5848275862068966
User 79481 AUC after training: 0.5848275862068966
User 79481 does not improve AUC. Reverting changes.
Training on augumented user 86553 17/50 current_auc = 0.5848275862068966
User 86553 AUC after training: 0.5841379310344827
User 86553 does not improve AUC. Reverting changes.
Training on augumented user 13407 18/50 current_auc = 0.5848275862068966
User 13407 AUC after training: 0.5806896551724138
User 13407 does not improve AUC. Reverting changes.
Training on augumented user 69469 19/50 current_auc = 0.5848275862068966
User 69469 AUC after training: 0.583448275862069
User 69469 does not improve AUC. Reverting changes.
Training on augumented user 89660 20/50 current_auc = 0.5848275862068966
User 89660 AUC after training: 0.5827586206896552
User 89660 does not improve AUC. Reverting changes.
Training on augumented user 21136 21/50 current_auc = 0.5848275862068966
User 21136 AUC after training: 0.583448275862069
User 21136 does not improve AUC. Reverting changes.
Training on augumented user 87706 22/50 current_auc = 0.5848275862068966
User 87706 AUC after training: 0.5820689655172414
User 87706 does not improve AUC. Reverting changes.
Training on augumented user 99741 23/50 current_auc = 0.5848275862068966
User 99741 AUC after training: 0.5841379310344827
User 99741 does not improve AUC. Reverting changes.
Training on augumented user 112550 24/50 current_auc = 0.5848275862068966
User 112550 AUC after training: 0.5841379310344827
User 112550 does not improve AUC. Reverting changes.
Training on augumented user 27772 25/50 current_auc = 0.5848275862068966
User 27772 AUC after training: 0.5834482758620689
User 27772 does not improve AUC. Reverting changes.
Training on augumented user 49257 26/50 current_auc = 0.5848275862068966
User 49257 AUC after training: 0.583448275862069
User 49257 does not improve AUC. Reverting changes.
Training on augumented user 72063 27/50 current_auc = 0.5848275862068966
User 72063 AUC after training: 0.5841379310344827
User 72063 does not improve AUC. Reverting changes.
Training on augumented user 36509 28/50 current_auc = 0.5848275862068966
User 36509 AUC after training: 0.5841379310344827
User 36509 does not improve AUC. Reverting changes.
Training on augumented user 39837 29/50 current_auc = 0.5848275862068966
User 39837 AUC after training: 0.5827586206896552
User 39837 does not improve AUC. Reverting changes.
Training on augumented user 12803 30/50 current_auc = 0.5848275862068966
User 12803 AUC after training: 0.5841379310344827
User 12803 does not improve AUC. Reverting changes.
Training on augumented user 26195 31/50 current_auc = 0.5848275862068966
User 26195 AUC after training: 0.5841379310344827
User 26195 does not improve AUC. Reverting changes.
Training on augumented user 84676 32/50 current_auc = 0.5848275862068966
User 84676 AUC after training: 0.583448275862069
User 84676 does not improve AUC. Reverting changes.
Training on augumented user 77245 33/50 current_auc = 0.5848275862068966
User 77245 AUC after training: 0.5841379310344827
User 77245 does not improve AUC. Reverting changes.
Training on augumented user 8695 34/50 current_auc = 0.5848275862068966
User 8695 AUC after training: 0.5841379310344827
User 8695 does not improve AUC. Reverting changes.
Training on augumented user 42886 35/50 current_auc = 0.5848275862068966
User 42886 AUC after training: 0.5793103448275861
User 42886 does not improve AUC. Reverting changes.
Training on augumented user 41597 36/50 current_auc = 0.5848275862068966
User 41597 AUC after training: 0.5827586206896551
User 41597 does not improve AUC. Reverting changes.
Training on augumented user 98287 37/50 current_auc = 0.5848275862068966
User 98287 AUC after training: 0.5827586206896552
User 98287 does not improve AUC. Reverting changes.
Training on augumented user 104788 38/50 current_auc = 0.5848275862068966
User 104788 AUC after training: 0.5834482758620689
User 104788 does not improve AUC. Reverting changes.
Training on augumented user 79589 39/50 current_auc = 0.5848275862068966
User 79589 AUC after training: 0.5827586206896552
User 79589 does not improve AUC. Reverting changes.
Training on augumented user 126508 40/50 current_auc = 0.5848275862068966
User 126508 AUC after training: 0.5841379310344827
User 126508 does not improve AUC. Reverting changes.
Training on augumented user 88365 41/50 current_auc = 0.5848275862068966
User 88365 AUC after training: 0.583448275862069
User 88365 does not improve AUC. Reverting changes.
Training on augumented user 121308 42/50 current_auc = 0.5848275862068966
User 121308 AUC after training: 0.5848275862068966
User 121308 does not improve AUC. Reverting changes.
Training on augumented user 104249 43/50 current_auc = 0.5848275862068966
User 104249 AUC after training: 0.5813793103448276
User 104249 does not improve AUC. Reverting changes.
Training on augumented user 24500 44/50 current_auc = 0.5848275862068966
User 24500 AUC after training: 0.583448275862069
User 24500 does not improve AUC. Reverting changes.
Training on augumented user 29722 45/50 current_auc = 0.5848275862068966
User 29722 AUC after training: 0.5848275862068966
User 29722 does not improve AUC. Reverting changes.
Training on augumented user 72336 46/50 current_auc = 0.5848275862068966
User 72336 AUC after training: 0.5848275862068966
User 72336 does not improve AUC. Reverting changes.
Training on augumented user 114021 47/50 current_auc = 0.5848275862068966
User 114021 AUC after training: 0.5841379310344827
User 114021 does not improve AUC. Reverting changes.
Training on augumented user 36353 48/50 current_auc = 0.5848275862068966
User 36353 AUC after training: 0.5841379310344827
User 36353 does not improve AUC. Reverting changes.
Training on augumented user 136324 49/50 current_auc = 0.5848275862068966
User 136324 AUC after training: 0.5841379310344827
User 136324 does not improve AUC. Reverting changes.
[2024-12-02 18:14:12.253374] start test user 125456 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:12.680991] start test user 125456 68/567 recall augumented users by random, augumented_users = [83898, 74674, 124021, 128310, 108753, 51190, 94815, 102694, 137801, 84862, 115187, 8392, 74445, 25580, 1931, 69952, 3463, 18350, 54164, 135337, 117716, 115736, 47772, 31795, 29666, 91333, 82460, 94849, 70632, 115311, 124064, 94709, 39012, 60752, 65828, 93169, 137516, 22067, 2454, 8302, 132418, 104648, 89433, 88046, 29994, 8933, 46220, 67099, 52182, 51282]
[2024-12-02 18:14:12.696873] user = 125456 Cloud 68/567
[2024-12-02 18:14:12.740070] user = 125456 Local 68/567
[2024-12-02 18:14:12.871911] user = 125456 Local+ 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:15.238291] user = 125456 MPDA- 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.78421372191864
Training on augumented user 83898 0/50 current_auc = 0.78421372191864
User 83898 AUC after training: 0.78421372191864
User 83898 does not improve AUC. Reverting changes.
Training on augumented user 74674 1/50 current_auc = 0.78421372191864
User 74674 AUC after training: 0.7839708561020036
User 74674 does not improve AUC. Reverting changes.
Training on augumented user 124021 2/50 current_auc = 0.78421372191864
User 124021 AUC after training: 0.7839708561020036
User 124021 does not improve AUC. Reverting changes.
Training on augumented user 128310 3/50 current_auc = 0.78421372191864
User 128310 AUC after training: 0.7842137219186399
User 128310 does not improve AUC. Reverting changes.
Training on augumented user 108753 4/50 current_auc = 0.78421372191864
User 108753 AUC after training: 0.7839708561020036
User 108753 does not improve AUC. Reverting changes.
Training on augumented user 51190 5/50 current_auc = 0.78421372191864
User 51190 AUC after training: 0.7842137219186399
User 51190 does not improve AUC. Reverting changes.
Training on augumented user 94815 6/50 current_auc = 0.78421372191864
User 94815 AUC after training: 0.784335154826958
User 94815 improves AUC. Keeping the model.
Training on augumented user 102694 7/50 current_auc = 0.784335154826958
User 102694 AUC after training: 0.7829993928354584
User 102694 does not improve AUC. Reverting changes.
Training on augumented user 137801 8/50 current_auc = 0.784335154826958
User 137801 AUC after training: 0.7845780206435944
User 137801 improves AUC. Keeping the model.
Training on augumented user 84862 9/50 current_auc = 0.7845780206435944
User 84862 AUC after training: 0.7846994535519125
User 84862 improves AUC. Keeping the model.
Training on augumented user 115187 10/50 current_auc = 0.7846994535519125
User 115187 AUC after training: 0.7848208864602307
User 115187 improves AUC. Keeping the model.
Training on augumented user 8392 11/50 current_auc = 0.7848208864602307
User 8392 AUC after training: 0.7843351548269581
User 8392 does not improve AUC. Reverting changes.
Training on augumented user 74445 12/50 current_auc = 0.7848208864602307
User 74445 AUC after training: 0.7848208864602307
User 74445 does not improve AUC. Reverting changes.
Training on augumented user 25580 13/50 current_auc = 0.7848208864602307
User 25580 AUC after training: 0.7848208864602306
User 25580 does not improve AUC. Reverting changes.
Training on augumented user 1931 14/50 current_auc = 0.7848208864602307
User 1931 AUC after training: 0.7845780206435944
User 1931 does not improve AUC. Reverting changes.
Training on augumented user 69952 15/50 current_auc = 0.7848208864602307
User 69952 AUC after training: 0.7840922890103218
User 69952 does not improve AUC. Reverting changes.
Training on augumented user 3463 16/50 current_auc = 0.7848208864602307
User 3463 AUC after training: 0.784942319368549
User 3463 improves AUC. Keeping the model.
Training on augumented user 18350 17/50 current_auc = 0.784942319368549
User 18350 AUC after training: 0.7842137219186399
User 18350 does not improve AUC. Reverting changes.
Training on augumented user 54164 18/50 current_auc = 0.784942319368549
User 54164 AUC after training: 0.7848208864602307
User 54164 does not improve AUC. Reverting changes.
Training on augumented user 135337 19/50 current_auc = 0.784942319368549
User 135337 AUC after training: 0.784335154826958
User 135337 does not improve AUC. Reverting changes.
Training on augumented user 117716 20/50 current_auc = 0.784942319368549
User 117716 AUC after training: 0.7853066180935033
User 117716 improves AUC. Keeping the model.
Training on augumented user 115736 21/50 current_auc = 0.7853066180935033
User 115736 AUC after training: 0.7855494839101397
User 115736 improves AUC. Keeping the model.
Training on augumented user 47772 22/50 current_auc = 0.7855494839101397
User 47772 AUC after training: 0.7860352155434123
User 47772 improves AUC. Keeping the model.
Training on augumented user 31795 23/50 current_auc = 0.7860352155434123
User 31795 AUC after training: 0.7854280510018214
User 31795 does not improve AUC. Reverting changes.
Training on augumented user 29666 24/50 current_auc = 0.7860352155434123
User 29666 AUC after training: 0.7857923497267759
User 29666 does not improve AUC. Reverting changes.
Training on augumented user 91333 25/50 current_auc = 0.7860352155434123
User 91333 AUC after training: 0.785913782635094
User 91333 does not improve AUC. Reverting changes.
Training on augumented user 82460 26/50 current_auc = 0.7860352155434123
User 82460 AUC after training: 0.7855494839101396
User 82460 does not improve AUC. Reverting changes.
Training on augumented user 94849 27/50 current_auc = 0.7860352155434123
User 94849 AUC after training: 0.7855494839101396
User 94849 does not improve AUC. Reverting changes.
Training on augumented user 70632 28/50 current_auc = 0.7860352155434123
User 70632 AUC after training: 0.7860352155434123
User 70632 does not improve AUC. Reverting changes.
Training on augumented user 115311 29/50 current_auc = 0.7860352155434123
User 115311 AUC after training: 0.7860352155434123
User 115311 does not improve AUC. Reverting changes.
Training on augumented user 124064 30/50 current_auc = 0.7860352155434123
User 124064 AUC after training: 0.7859137826350941
User 124064 does not improve AUC. Reverting changes.
Training on augumented user 94709 31/50 current_auc = 0.7860352155434123
User 94709 AUC after training: 0.7856709168184578
User 94709 does not improve AUC. Reverting changes.
Training on augumented user 39012 32/50 current_auc = 0.7860352155434123
User 39012 AUC after training: 0.7859137826350941
User 39012 does not improve AUC. Reverting changes.
Training on augumented user 60752 33/50 current_auc = 0.7860352155434123
User 60752 AUC after training: 0.7851851851851852
User 60752 does not improve AUC. Reverting changes.
Training on augumented user 65828 34/50 current_auc = 0.7860352155434123
User 65828 AUC after training: 0.7855494839101396
User 65828 does not improve AUC. Reverting changes.
Training on augumented user 93169 35/50 current_auc = 0.7860352155434123
User 93169 AUC after training: 0.7861566484517304
User 93169 improves AUC. Keeping the model.
Training on augumented user 137516 36/50 current_auc = 0.7861566484517304
User 137516 AUC after training: 0.7860352155434123
User 137516 does not improve AUC. Reverting changes.
Training on augumented user 22067 37/50 current_auc = 0.7861566484517304
User 22067 AUC after training: 0.7857923497267759
User 22067 does not improve AUC. Reverting changes.
Training on augumented user 2454 38/50 current_auc = 0.7861566484517304
User 2454 AUC after training: 0.7862780813600485
User 2454 improves AUC. Keeping the model.
Training on augumented user 8302 39/50 current_auc = 0.7862780813600485
User 8302 AUC after training: 0.7860352155434123
User 8302 does not improve AUC. Reverting changes.
Training on augumented user 132418 40/50 current_auc = 0.7862780813600485
User 132418 AUC after training: 0.7856709168184577
User 132418 does not improve AUC. Reverting changes.
Training on augumented user 104648 41/50 current_auc = 0.7862780813600485
User 104648 AUC after training: 0.7857923497267759
User 104648 does not improve AUC. Reverting changes.
Training on augumented user 89433 42/50 current_auc = 0.7862780813600485
User 89433 AUC after training: 0.7863995142683666
User 89433 improves AUC. Keeping the model.
Training on augumented user 88046 43/50 current_auc = 0.7863995142683666
User 88046 AUC after training: 0.7857923497267759
User 88046 does not improve AUC. Reverting changes.
Training on augumented user 29994 44/50 current_auc = 0.7863995142683666
User 29994 AUC after training: 0.7857923497267759
User 29994 does not improve AUC. Reverting changes.
Training on augumented user 8933 45/50 current_auc = 0.7863995142683666
User 8933 AUC after training: 0.7856709168184578
User 8933 does not improve AUC. Reverting changes.
Training on augumented user 46220 46/50 current_auc = 0.7863995142683666
User 46220 AUC after training: 0.7860352155434123
User 46220 does not improve AUC. Reverting changes.
Training on augumented user 67099 47/50 current_auc = 0.7863995142683666
User 67099 AUC after training: 0.7855494839101396
User 67099 does not improve AUC. Reverting changes.
Training on augumented user 52182 48/50 current_auc = 0.7863995142683666
User 52182 AUC after training: 0.7857923497267759
User 52182 does not improve AUC. Reverting changes.
Training on augumented user 51282 49/50 current_auc = 0.7863995142683666
User 51282 AUC after training: 0.7855494839101396
User 51282 does not improve AUC. Reverting changes.
[2024-12-02 18:14:44.183194] start test user 125486 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:44.590542] start test user 125486 69/567 recall augumented users by random, augumented_users = [34456, 36278, 66452, 48643, 15041, 129027, 33245, 20489, 38699, 67487, 82738, 129319, 124778, 17164, 116213, 87914, 83907, 13189, 23848, 58612, 114403, 77202, 90712, 40901, 66211, 134462, 895, 111434, 99485, 40829, 91763, 26838, 48826, 128268, 60510, 129199, 97051, 68020, 83121, 3581, 106319, 23303, 10933, 118267, 80895, 202, 36706, 26025, 89162, 20588]
[2024-12-02 18:14:44.604607] user = 125486 Cloud 69/567
[2024-12-02 18:14:44.615130] user = 125486 Local 69/567
[2024-12-02 18:14:44.647993] user = 125486 Local+ 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:47.097820] user = 125486 MPDA- 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7175925925925926
Training on augumented user 34456 0/50 current_auc = 0.7175925925925926
User 34456 AUC after training: 0.7191358024691358
User 34456 improves AUC. Keeping the model.
Training on augumented user 36278 1/50 current_auc = 0.7191358024691358
User 36278 AUC after training: 0.7175925925925926
User 36278 does not improve AUC. Reverting changes.
Training on augumented user 66452 2/50 current_auc = 0.7191358024691358
User 66452 AUC after training: 0.720679012345679
User 66452 improves AUC. Keeping the model.
Training on augumented user 48643 3/50 current_auc = 0.720679012345679
User 48643 AUC after training: 0.7175925925925926
User 48643 does not improve AUC. Reverting changes.
Training on augumented user 15041 4/50 current_auc = 0.720679012345679
User 15041 AUC after training: 0.720679012345679
User 15041 does not improve AUC. Reverting changes.
Training on augumented user 129027 5/50 current_auc = 0.720679012345679
User 129027 AUC after training: 0.7191358024691358
User 129027 does not improve AUC. Reverting changes.
Training on augumented user 33245 6/50 current_auc = 0.720679012345679
User 33245 AUC after training: 0.7160493827160493
User 33245 does not improve AUC. Reverting changes.
Training on augumented user 20489 7/50 current_auc = 0.720679012345679
User 20489 AUC after training: 0.7191358024691358
User 20489 does not improve AUC. Reverting changes.
Training on augumented user 38699 8/50 current_auc = 0.720679012345679
User 38699 AUC after training: 0.7191358024691358
User 38699 does not improve AUC. Reverting changes.
Training on augumented user 67487 9/50 current_auc = 0.720679012345679
User 67487 AUC after training: 0.720679012345679
User 67487 does not improve AUC. Reverting changes.
Training on augumented user 82738 10/50 current_auc = 0.720679012345679
User 82738 AUC after training: 0.720679012345679
User 82738 does not improve AUC. Reverting changes.
Training on augumented user 129319 11/50 current_auc = 0.720679012345679
User 129319 AUC after training: 0.7191358024691358
User 129319 does not improve AUC. Reverting changes.
Training on augumented user 124778 12/50 current_auc = 0.720679012345679
User 124778 AUC after training: 0.720679012345679
User 124778 does not improve AUC. Reverting changes.
Training on augumented user 17164 13/50 current_auc = 0.720679012345679
User 17164 AUC after training: 0.7191358024691358
User 17164 does not improve AUC. Reverting changes.
Training on augumented user 116213 14/50 current_auc = 0.720679012345679
User 116213 AUC after training: 0.7222222222222222
User 116213 improves AUC. Keeping the model.
Training on augumented user 87914 15/50 current_auc = 0.7222222222222222
User 87914 AUC after training: 0.7160493827160493
User 87914 does not improve AUC. Reverting changes.
Training on augumented user 83907 16/50 current_auc = 0.7222222222222222
User 83907 AUC after training: 0.7191358024691358
User 83907 does not improve AUC. Reverting changes.
Training on augumented user 13189 17/50 current_auc = 0.7222222222222222
User 13189 AUC after training: 0.720679012345679
User 13189 does not improve AUC. Reverting changes.
Training on augumented user 23848 18/50 current_auc = 0.7222222222222222
User 23848 AUC after training: 0.7222222222222222
User 23848 does not improve AUC. Reverting changes.
Training on augumented user 58612 19/50 current_auc = 0.7222222222222222
User 58612 AUC after training: 0.7160493827160493
User 58612 does not improve AUC. Reverting changes.
Training on augumented user 114403 20/50 current_auc = 0.7222222222222222
User 114403 AUC after training: 0.720679012345679
User 114403 does not improve AUC. Reverting changes.
Training on augumented user 77202 21/50 current_auc = 0.7222222222222222
User 77202 AUC after training: 0.7237654320987654
User 77202 improves AUC. Keeping the model.
Training on augumented user 90712 22/50 current_auc = 0.7237654320987654
User 90712 AUC after training: 0.720679012345679
User 90712 does not improve AUC. Reverting changes.
Training on augumented user 40901 23/50 current_auc = 0.7237654320987654
User 40901 AUC after training: 0.720679012345679
User 40901 does not improve AUC. Reverting changes.
Training on augumented user 66211 24/50 current_auc = 0.7237654320987654
User 66211 AUC after training: 0.7191358024691358
User 66211 does not improve AUC. Reverting changes.
Training on augumented user 134462 25/50 current_auc = 0.7237654320987654
User 134462 AUC after training: 0.720679012345679
User 134462 does not improve AUC. Reverting changes.
Training on augumented user 895 26/50 current_auc = 0.7237654320987654
User 895 AUC after training: 0.7222222222222222
User 895 does not improve AUC. Reverting changes.
Training on augumented user 111434 27/50 current_auc = 0.7237654320987654
User 111434 AUC after training: 0.720679012345679
User 111434 does not improve AUC. Reverting changes.
Training on augumented user 99485 28/50 current_auc = 0.7237654320987654
User 99485 AUC after training: 0.720679012345679
User 99485 does not improve AUC. Reverting changes.
Training on augumented user 40829 29/50 current_auc = 0.7237654320987654
User 40829 AUC after training: 0.720679012345679
User 40829 does not improve AUC. Reverting changes.
Training on augumented user 91763 30/50 current_auc = 0.7237654320987654
User 91763 AUC after training: 0.720679012345679
User 91763 does not improve AUC. Reverting changes.
Training on augumented user 26838 31/50 current_auc = 0.7237654320987654
User 26838 AUC after training: 0.7222222222222222
User 26838 does not improve AUC. Reverting changes.
Training on augumented user 48826 32/50 current_auc = 0.7237654320987654
User 48826 AUC after training: 0.720679012345679
User 48826 does not improve AUC. Reverting changes.
Training on augumented user 128268 33/50 current_auc = 0.7237654320987654
User 128268 AUC after training: 0.7191358024691358
User 128268 does not improve AUC. Reverting changes.
Training on augumented user 60510 34/50 current_auc = 0.7237654320987654
User 60510 AUC after training: 0.7237654320987654
User 60510 does not improve AUC. Reverting changes.
Training on augumented user 129199 35/50 current_auc = 0.7237654320987654
User 129199 AUC after training: 0.7222222222222222
User 129199 does not improve AUC. Reverting changes.
Training on augumented user 97051 36/50 current_auc = 0.7237654320987654
User 97051 AUC after training: 0.7222222222222222
User 97051 does not improve AUC. Reverting changes.
Training on augumented user 68020 37/50 current_auc = 0.7237654320987654
User 68020 AUC after training: 0.7222222222222222
User 68020 does not improve AUC. Reverting changes.
Training on augumented user 83121 38/50 current_auc = 0.7237654320987654
User 83121 AUC after training: 0.720679012345679
User 83121 does not improve AUC. Reverting changes.
Training on augumented user 3581 39/50 current_auc = 0.7237654320987654
User 3581 AUC after training: 0.7191358024691358
User 3581 does not improve AUC. Reverting changes.
Training on augumented user 106319 40/50 current_auc = 0.7237654320987654
User 106319 AUC after training: 0.720679012345679
User 106319 does not improve AUC. Reverting changes.
Training on augumented user 23303 41/50 current_auc = 0.7237654320987654
User 23303 AUC after training: 0.7175925925925926
User 23303 does not improve AUC. Reverting changes.
Training on augumented user 10933 42/50 current_auc = 0.7237654320987654
User 10933 AUC after training: 0.7222222222222222
User 10933 does not improve AUC. Reverting changes.
Training on augumented user 118267 43/50 current_auc = 0.7237654320987654
User 118267 AUC after training: 0.7222222222222222
User 118267 does not improve AUC. Reverting changes.
Training on augumented user 80895 44/50 current_auc = 0.7237654320987654
User 80895 AUC after training: 0.7237654320987654
User 80895 does not improve AUC. Reverting changes.
Training on augumented user 202 45/50 current_auc = 0.7237654320987654
User 202 AUC after training: 0.720679012345679
User 202 does not improve AUC. Reverting changes.
Training on augumented user 36706 46/50 current_auc = 0.7237654320987654
User 36706 AUC after training: 0.720679012345679
User 36706 does not improve AUC. Reverting changes.
Training on augumented user 26025 47/50 current_auc = 0.7237654320987654
User 26025 AUC after training: 0.720679012345679
User 26025 does not improve AUC. Reverting changes.
Training on augumented user 89162 48/50 current_auc = 0.7237654320987654
User 89162 AUC after training: 0.720679012345679
User 89162 does not improve AUC. Reverting changes.
Training on augumented user 20588 49/50 current_auc = 0.7237654320987654
User 20588 AUC after training: 0.720679012345679
User 20588 does not improve AUC. Reverting changes.
[2024-12-02 18:15:11.709146] start test user 125493 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:12.169570] start test user 125493 70/567 recall augumented users by random, augumented_users = [103176, 26171, 137493, 121804, 23633, 66611, 71705, 61062, 107656, 135756, 73809, 45935, 116671, 48341, 84996, 82306, 132130, 6793, 23733, 97299, 17003, 83657, 66931, 21296, 6430, 137787, 288, 81836, 41411, 122088, 73529, 111008, 110117, 84383, 96990, 134336, 77956, 77383, 84399, 114146, 96982, 123456, 48908, 91126, 23122, 92669, 56787, 50091, 56241, 61456]
[2024-12-02 18:15:12.184964] user = 125493 Cloud 70/567
[2024-12-02 18:15:12.201711] user = 125493 Local 70/567
[2024-12-02 18:15:12.301154] user = 125493 Local+ 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:14.822681] user = 125493 MPDA- 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5901587301587301
Training on augumented user 103176 0/50 current_auc = 0.5901587301587301
User 103176 AUC after training: 0.5904761904761905
User 103176 improves AUC. Keeping the model.
Training on augumented user 26171 1/50 current_auc = 0.5904761904761905
User 26171 AUC after training: 0.5907936507936508
User 26171 improves AUC. Keeping the model.
Training on augumented user 137493 2/50 current_auc = 0.5907936507936508
User 137493 AUC after training: 0.5898412698412698
User 137493 does not improve AUC. Reverting changes.
Training on augumented user 121804 3/50 current_auc = 0.5907936507936508
User 121804 AUC after training: 0.5911111111111111
User 121804 improves AUC. Keeping the model.
Training on augumented user 23633 4/50 current_auc = 0.5911111111111111
User 23633 AUC after training: 0.5898412698412698
User 23633 does not improve AUC. Reverting changes.
Training on augumented user 66611 5/50 current_auc = 0.5911111111111111
User 66611 AUC after training: 0.5904761904761905
User 66611 does not improve AUC. Reverting changes.
Training on augumented user 71705 6/50 current_auc = 0.5911111111111111
User 71705 AUC after training: 0.5904761904761904
User 71705 does not improve AUC. Reverting changes.
Training on augumented user 61062 7/50 current_auc = 0.5911111111111111
User 61062 AUC after training: 0.5895238095238096
User 61062 does not improve AUC. Reverting changes.
Training on augumented user 107656 8/50 current_auc = 0.5911111111111111
User 107656 AUC after training: 0.5904761904761905
User 107656 does not improve AUC. Reverting changes.
Training on augumented user 135756 9/50 current_auc = 0.5911111111111111
User 135756 AUC after training: 0.5904761904761905
User 135756 does not improve AUC. Reverting changes.
Training on augumented user 73809 10/50 current_auc = 0.5911111111111111
User 73809 AUC after training: 0.5914285714285714
User 73809 improves AUC. Keeping the model.
Training on augumented user 45935 11/50 current_auc = 0.5914285714285714
User 45935 AUC after training: 0.587936507936508
User 45935 does not improve AUC. Reverting changes.
Training on augumented user 116671 12/50 current_auc = 0.5914285714285714
User 116671 AUC after training: 0.5904761904761904
User 116671 does not improve AUC. Reverting changes.
Training on augumented user 48341 13/50 current_auc = 0.5914285714285714
User 48341 AUC after training: 0.5917460317460317
User 48341 improves AUC. Keeping the model.
Training on augumented user 84996 14/50 current_auc = 0.5917460317460317
User 84996 AUC after training: 0.593015873015873
User 84996 improves AUC. Keeping the model.
Training on augumented user 82306 15/50 current_auc = 0.593015873015873
User 82306 AUC after training: 0.5917460317460317
User 82306 does not improve AUC. Reverting changes.
Training on augumented user 132130 16/50 current_auc = 0.593015873015873
User 132130 AUC after training: 0.5923809523809523
User 132130 does not improve AUC. Reverting changes.
Training on augumented user 6793 17/50 current_auc = 0.593015873015873
User 6793 AUC after training: 0.5879365079365079
User 6793 does not improve AUC. Reverting changes.
Training on augumented user 23733 18/50 current_auc = 0.593015873015873
User 23733 AUC after training: 0.5946031746031746
User 23733 improves AUC. Keeping the model.
Training on augumented user 97299 19/50 current_auc = 0.5946031746031746
User 97299 AUC after training: 0.593015873015873
User 97299 does not improve AUC. Reverting changes.
Training on augumented user 17003 20/50 current_auc = 0.5946031746031746
User 17003 AUC after training: 0.5911111111111111
User 17003 does not improve AUC. Reverting changes.
Training on augumented user 83657 21/50 current_auc = 0.5946031746031746
User 83657 AUC after training: 0.593968253968254
User 83657 does not improve AUC. Reverting changes.
Training on augumented user 66931 22/50 current_auc = 0.5946031746031746
User 66931 AUC after training: 0.5949206349206348
User 66931 improves AUC. Keeping the model.
Training on augumented user 21296 23/50 current_auc = 0.5949206349206348
User 21296 AUC after training: 0.5946031746031746
User 21296 does not improve AUC. Reverting changes.
Training on augumented user 6430 24/50 current_auc = 0.5949206349206348
User 6430 AUC after training: 0.5952380952380952
User 6430 improves AUC. Keeping the model.
Training on augumented user 137787 25/50 current_auc = 0.5952380952380952
User 137787 AUC after training: 0.5949206349206348
User 137787 does not improve AUC. Reverting changes.
Training on augumented user 288 26/50 current_auc = 0.5952380952380952
User 288 AUC after training: 0.5946031746031746
User 288 does not improve AUC. Reverting changes.
Training on augumented user 81836 27/50 current_auc = 0.5952380952380952
User 81836 AUC after training: 0.594920634920635
User 81836 does not improve AUC. Reverting changes.
Training on augumented user 41411 28/50 current_auc = 0.5952380952380952
User 41411 AUC after training: 0.5946031746031746
User 41411 does not improve AUC. Reverting changes.
Training on augumented user 122088 29/50 current_auc = 0.5952380952380952
User 122088 AUC after training: 0.5955555555555555
User 122088 improves AUC. Keeping the model.
Training on augumented user 73529 30/50 current_auc = 0.5955555555555555
User 73529 AUC after training: 0.5939682539682539
User 73529 does not improve AUC. Reverting changes.
Training on augumented user 111008 31/50 current_auc = 0.5955555555555555
User 111008 AUC after training: 0.5952380952380953
User 111008 does not improve AUC. Reverting changes.
Training on augumented user 110117 32/50 current_auc = 0.5955555555555555
User 110117 AUC after training: 0.5942857142857143
User 110117 does not improve AUC. Reverting changes.
Training on augumented user 84383 33/50 current_auc = 0.5955555555555555
User 84383 AUC after training: 0.5952380952380951
User 84383 does not improve AUC. Reverting changes.
Training on augumented user 96990 34/50 current_auc = 0.5955555555555555
User 96990 AUC after training: 0.5952380952380952
User 96990 does not improve AUC. Reverting changes.
Training on augumented user 134336 35/50 current_auc = 0.5955555555555555
User 134336 AUC after training: 0.5946031746031746
User 134336 does not improve AUC. Reverting changes.
Training on augumented user 77956 36/50 current_auc = 0.5955555555555555
User 77956 AUC after training: 0.5933333333333333
User 77956 does not improve AUC. Reverting changes.
Training on augumented user 77383 37/50 current_auc = 0.5955555555555555
User 77383 AUC after training: 0.5949206349206348
User 77383 does not improve AUC. Reverting changes.
Training on augumented user 84399 38/50 current_auc = 0.5955555555555555
User 84399 AUC after training: 0.5949206349206348
User 84399 does not improve AUC. Reverting changes.
Training on augumented user 114146 39/50 current_auc = 0.5955555555555555
User 114146 AUC after training: 0.5901587301587301
User 114146 does not improve AUC. Reverting changes.
Training on augumented user 96982 40/50 current_auc = 0.5955555555555555
User 96982 AUC after training: 0.5955555555555555
User 96982 does not improve AUC. Reverting changes.
Training on augumented user 123456 41/50 current_auc = 0.5955555555555555
User 123456 AUC after training: 0.5942857142857143
User 123456 does not improve AUC. Reverting changes.
Training on augumented user 48908 42/50 current_auc = 0.5955555555555555
User 48908 AUC after training: 0.5955555555555555
User 48908 does not improve AUC. Reverting changes.
Training on augumented user 91126 43/50 current_auc = 0.5955555555555555
User 91126 AUC after training: 0.5958730158730159
User 91126 improves AUC. Keeping the model.
Training on augumented user 23122 44/50 current_auc = 0.5958730158730159
User 23122 AUC after training: 0.5946031746031746
User 23122 does not improve AUC. Reverting changes.
Training on augumented user 92669 45/50 current_auc = 0.5958730158730159
User 92669 AUC after training: 0.5958730158730159
User 92669 does not improve AUC. Reverting changes.
Training on augumented user 56787 46/50 current_auc = 0.5958730158730159
User 56787 AUC after training: 0.5955555555555556
User 56787 does not improve AUC. Reverting changes.
Training on augumented user 50091 47/50 current_auc = 0.5958730158730159
User 50091 AUC after training: 0.5942857142857143
User 50091 does not improve AUC. Reverting changes.
Training on augumented user 56241 48/50 current_auc = 0.5958730158730159
User 56241 AUC after training: 0.5955555555555556
User 56241 does not improve AUC. Reverting changes.
Training on augumented user 61456 49/50 current_auc = 0.5958730158730159
User 61456 AUC after training: 0.5946031746031746
User 61456 does not improve AUC. Reverting changes.
[2024-12-02 18:15:46.489242] start test user 125507 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:47.117457] start test user 125507 71/567 recall augumented users by random, augumented_users = [89354, 135760, 90424, 137895, 25901, 127177, 11692, 103126, 67833, 20807, 104674, 23160, 123919, 7206, 38029, 73840, 135962, 4031, 114087, 67136, 33634, 75496, 81643, 124134, 14887, 25025, 1925, 90371, 3236, 61561, 127303, 32664, 81258, 45437, 115471, 97212, 26315, 104932, 118112, 79967, 80336, 3538, 136317, 97796, 63638, 29791, 121481, 30388, 65685, 1560]
[2024-12-02 18:15:47.237394] user = 125507 Cloud 71/567
[2024-12-02 18:15:47.253817] user = 125507 Local 71/567
[2024-12-02 18:15:47.352687] user = 125507 Local+ 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:50.202524] user = 125507 MPDA- 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 89354 0/50 current_auc = 0.6666666666666666
User 89354 AUC after training: 0.6666666666666666
User 89354 does not improve AUC. Reverting changes.
Training on augumented user 135760 1/50 current_auc = 0.6666666666666666
User 135760 AUC after training: 0.6666666666666666
User 135760 does not improve AUC. Reverting changes.
Training on augumented user 90424 2/50 current_auc = 0.6666666666666666
User 90424 AUC after training: 0.6666666666666666
User 90424 does not improve AUC. Reverting changes.
Training on augumented user 137895 3/50 current_auc = 0.6666666666666666
User 137895 AUC after training: 0.6666666666666666
User 137895 does not improve AUC. Reverting changes.
Training on augumented user 25901 4/50 current_auc = 0.6666666666666666
User 25901 AUC after training: 0.6666666666666666
User 25901 does not improve AUC. Reverting changes.
Training on augumented user 127177 5/50 current_auc = 0.6666666666666666
User 127177 AUC after training: 0.6666666666666666
User 127177 does not improve AUC. Reverting changes.
Training on augumented user 11692 6/50 current_auc = 0.6666666666666666
User 11692 AUC after training: 0.6666666666666666
User 11692 does not improve AUC. Reverting changes.
Training on augumented user 103126 7/50 current_auc = 0.6666666666666666
User 103126 AUC after training: 0.6666666666666666
User 103126 does not improve AUC. Reverting changes.
Training on augumented user 67833 8/50 current_auc = 0.6666666666666666
User 67833 AUC after training: 0.6666666666666666
User 67833 does not improve AUC. Reverting changes.
Training on augumented user 20807 9/50 current_auc = 0.6666666666666666
User 20807 AUC after training: 0.6666666666666666
User 20807 does not improve AUC. Reverting changes.
Training on augumented user 104674 10/50 current_auc = 0.6666666666666666
User 104674 AUC after training: 0.6666666666666666
User 104674 does not improve AUC. Reverting changes.
Training on augumented user 23160 11/50 current_auc = 0.6666666666666666
User 23160 AUC after training: 0.6666666666666666
User 23160 does not improve AUC. Reverting changes.
Training on augumented user 123919 12/50 current_auc = 0.6666666666666666
User 123919 AUC after training: 0.6666666666666666
User 123919 does not improve AUC. Reverting changes.
Training on augumented user 7206 13/50 current_auc = 0.6666666666666666
User 7206 AUC after training: 0.6666666666666666
User 7206 does not improve AUC. Reverting changes.
Training on augumented user 38029 14/50 current_auc = 0.6666666666666666
User 38029 AUC after training: 0.6666666666666666
User 38029 does not improve AUC. Reverting changes.
Training on augumented user 73840 15/50 current_auc = 0.6666666666666666
User 73840 AUC after training: 0.6666666666666666
User 73840 does not improve AUC. Reverting changes.
Training on augumented user 135962 16/50 current_auc = 0.6666666666666666
User 135962 AUC after training: 0.6666666666666666
User 135962 does not improve AUC. Reverting changes.
Training on augumented user 4031 17/50 current_auc = 0.6666666666666666
User 4031 AUC after training: 0.6666666666666666
User 4031 does not improve AUC. Reverting changes.
Training on augumented user 114087 18/50 current_auc = 0.6666666666666666
User 114087 AUC after training: 0.6666666666666666
User 114087 does not improve AUC. Reverting changes.
Training on augumented user 67136 19/50 current_auc = 0.6666666666666666
User 67136 AUC after training: 0.6666666666666666
User 67136 does not improve AUC. Reverting changes.
Training on augumented user 33634 20/50 current_auc = 0.6666666666666666
User 33634 AUC after training: 0.6666666666666666
User 33634 does not improve AUC. Reverting changes.
Training on augumented user 75496 21/50 current_auc = 0.6666666666666666
User 75496 AUC after training: 0.6666666666666666
User 75496 does not improve AUC. Reverting changes.
Training on augumented user 81643 22/50 current_auc = 0.6666666666666666
User 81643 AUC after training: 0.6666666666666666
User 81643 does not improve AUC. Reverting changes.
Training on augumented user 124134 23/50 current_auc = 0.6666666666666666
User 124134 AUC after training: 0.6666666666666666
User 124134 does not improve AUC. Reverting changes.
Training on augumented user 14887 24/50 current_auc = 0.6666666666666666
User 14887 AUC after training: 0.6666666666666666
User 14887 does not improve AUC. Reverting changes.
Training on augumented user 25025 25/50 current_auc = 0.6666666666666666
User 25025 AUC after training: 0.6666666666666666
User 25025 does not improve AUC. Reverting changes.
Training on augumented user 1925 26/50 current_auc = 0.6666666666666666
User 1925 AUC after training: 0.6666666666666666
User 1925 does not improve AUC. Reverting changes.
Training on augumented user 90371 27/50 current_auc = 0.6666666666666666
User 90371 AUC after training: 0.6666666666666666
User 90371 does not improve AUC. Reverting changes.
Training on augumented user 3236 28/50 current_auc = 0.6666666666666666
User 3236 AUC after training: 0.6666666666666666
User 3236 does not improve AUC. Reverting changes.
Training on augumented user 61561 29/50 current_auc = 0.6666666666666666
User 61561 AUC after training: 0.6666666666666666
User 61561 does not improve AUC. Reverting changes.
Training on augumented user 127303 30/50 current_auc = 0.6666666666666666
User 127303 AUC after training: 0.6666666666666666
User 127303 does not improve AUC. Reverting changes.
Training on augumented user 32664 31/50 current_auc = 0.6666666666666666
User 32664 AUC after training: 0.6666666666666666
User 32664 does not improve AUC. Reverting changes.
Training on augumented user 81258 32/50 current_auc = 0.6666666666666666
User 81258 AUC after training: 0.6666666666666666
User 81258 does not improve AUC. Reverting changes.
Training on augumented user 45437 33/50 current_auc = 0.6666666666666666
User 45437 AUC after training: 0.6666666666666666
User 45437 does not improve AUC. Reverting changes.
Training on augumented user 115471 34/50 current_auc = 0.6666666666666666
User 115471 AUC after training: 0.6666666666666666
User 115471 does not improve AUC. Reverting changes.
Training on augumented user 97212 35/50 current_auc = 0.6666666666666666
User 97212 AUC after training: 0.6666666666666666
User 97212 does not improve AUC. Reverting changes.
Training on augumented user 26315 36/50 current_auc = 0.6666666666666666
User 26315 AUC after training: 0.6666666666666666
User 26315 does not improve AUC. Reverting changes.
Training on augumented user 104932 37/50 current_auc = 0.6666666666666666
User 104932 AUC after training: 0.6666666666666666
User 104932 does not improve AUC. Reverting changes.
Training on augumented user 118112 38/50 current_auc = 0.6666666666666666
User 118112 AUC after training: 0.6666666666666666
User 118112 does not improve AUC. Reverting changes.
Training on augumented user 79967 39/50 current_auc = 0.6666666666666666
User 79967 AUC after training: 0.6666666666666666
User 79967 does not improve AUC. Reverting changes.
Training on augumented user 80336 40/50 current_auc = 0.6666666666666666
User 80336 AUC after training: 0.6666666666666666
User 80336 does not improve AUC. Reverting changes.
Training on augumented user 3538 41/50 current_auc = 0.6666666666666666
User 3538 AUC after training: 0.6666666666666666
User 3538 does not improve AUC. Reverting changes.
Training on augumented user 136317 42/50 current_auc = 0.6666666666666666
User 136317 AUC after training: 0.6666666666666666
User 136317 does not improve AUC. Reverting changes.
Training on augumented user 97796 43/50 current_auc = 0.6666666666666666
User 97796 AUC after training: 0.6666666666666666
User 97796 does not improve AUC. Reverting changes.
Training on augumented user 63638 44/50 current_auc = 0.6666666666666666
User 63638 AUC after training: 0.6666666666666666
User 63638 does not improve AUC. Reverting changes.
Training on augumented user 29791 45/50 current_auc = 0.6666666666666666
User 29791 AUC after training: 0.6666666666666666
User 29791 does not improve AUC. Reverting changes.
Training on augumented user 121481 46/50 current_auc = 0.6666666666666666
User 121481 AUC after training: 0.6666666666666666
User 121481 does not improve AUC. Reverting changes.
Training on augumented user 30388 47/50 current_auc = 0.6666666666666666
User 30388 AUC after training: 0.6666666666666666
User 30388 does not improve AUC. Reverting changes.
Training on augumented user 65685 48/50 current_auc = 0.6666666666666666
User 65685 AUC after training: 0.6666666666666666
User 65685 does not improve AUC. Reverting changes.
Training on augumented user 1560 49/50 current_auc = 0.6666666666666666
User 1560 AUC after training: 0.6666666666666666
User 1560 does not improve AUC. Reverting changes.
[2024-12-02 18:16:21.865023] start test user 125513 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:22.387528] start test user 125513 72/567 recall augumented users by random, augumented_users = [93588, 66570, 108764, 122394, 118592, 50929, 100014, 56741, 33250, 4462, 122089, 12204, 92824, 133656, 109929, 79397, 33591, 89656, 119832, 83617, 15492, 36636, 43868, 99602, 130074, 113413, 27997, 99440, 69525, 15602, 122608, 60645, 109265, 17236, 12661, 138274, 9038, 5012, 49711, 99928, 95667, 33813, 35600, 73975, 70860, 103663, 31608, 122922, 451, 118920]
[2024-12-02 18:16:22.409601] user = 125513 Cloud 72/567
[2024-12-02 18:16:22.478081] user = 125513 Local 72/567
[2024-12-02 18:16:22.580070] user = 125513 Local+ 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:24.535198] user = 125513 MPDA- 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7309487897723191
Training on augumented user 93588 0/50 current_auc = 0.7309487897723191
User 93588 AUC after training: 0.7289377289377289
User 93588 does not improve AUC. Reverting changes.
Training on augumented user 66570 1/50 current_auc = 0.7309487897723191
User 66570 AUC after training: 0.7306614953673777
User 66570 does not improve AUC. Reverting changes.
Training on augumented user 108764 2/50 current_auc = 0.7309487897723191
User 108764 AUC after training: 0.729727788551318
User 108764 does not improve AUC. Reverting changes.
Training on augumented user 122394 3/50 current_auc = 0.7309487897723191
User 122394 AUC after training: 0.7311283487754076
User 122394 improves AUC. Keeping the model.
Training on augumented user 118592 4/50 current_auc = 0.7311283487754076
User 118592 AUC after training: 0.7311283487754076
User 118592 does not improve AUC. Reverting changes.
Training on augumented user 50929 5/50 current_auc = 0.7311283487754076
User 50929 AUC after training: 0.7309128779717016
User 50929 does not improve AUC. Reverting changes.
Training on augumented user 100014 6/50 current_auc = 0.7311283487754076
User 100014 AUC after training: 0.7305537599655246
User 100014 does not improve AUC. Reverting changes.
Training on augumented user 56741 7/50 current_auc = 0.7311283487754076
User 56741 AUC after training: 0.73109243697479
User 56741 does not improve AUC. Reverting changes.
Training on augumented user 33250 8/50 current_auc = 0.7311283487754076
User 33250 AUC after training: 0.7308769661710838
User 33250 does not improve AUC. Reverting changes.
Training on augumented user 4462 9/50 current_auc = 0.7311283487754076
User 4462 AUC after training: 0.7313438195791137
User 4462 improves AUC. Keeping the model.
Training on augumented user 122089 10/50 current_auc = 0.7313438195791137
User 122089 AUC after training: 0.7306974071679954
User 122089 does not improve AUC. Reverting changes.
Training on augumented user 12204 11/50 current_auc = 0.7313438195791137
User 12204 AUC after training: 0.7309128779717016
User 12204 does not improve AUC. Reverting changes.
Training on augumented user 92824 12/50 current_auc = 0.7313438195791137
User 92824 AUC after training: 0.7306974071679954
User 92824 does not improve AUC. Reverting changes.
Training on augumented user 133656 13/50 current_auc = 0.7313438195791137
User 133656 AUC after training: 0.7312001723766429
User 133656 does not improve AUC. Reverting changes.
Training on augumented user 109929 14/50 current_auc = 0.7313438195791137
User 109929 AUC after training: 0.7311283487754077
User 109929 does not improve AUC. Reverting changes.
Training on augumented user 79397 15/50 current_auc = 0.7313438195791137
User 79397 AUC after training: 0.731200172376643
User 79397 does not improve AUC. Reverting changes.
Training on augumented user 33591 16/50 current_auc = 0.7313438195791137
User 33591 AUC after training: 0.7310206133735545
User 33591 does not improve AUC. Reverting changes.
Training on augumented user 89656 17/50 current_auc = 0.7313438195791137
User 89656 AUC after training: 0.731200172376643
User 89656 does not improve AUC. Reverting changes.
Training on augumented user 119832 18/50 current_auc = 0.7313438195791137
User 119832 AUC after training: 0.7308410543704662
User 119832 does not improve AUC. Reverting changes.
Training on augumented user 83617 19/50 current_auc = 0.7313438195791137
User 83617 AUC after training: 0.7310206133735545
User 83617 does not improve AUC. Reverting changes.
Training on augumented user 15492 20/50 current_auc = 0.7313438195791137
User 15492 AUC after training: 0.731200172376643
User 15492 does not improve AUC. Reverting changes.
Training on augumented user 36636 21/50 current_auc = 0.7313438195791137
User 36636 AUC after training: 0.7317747611865258
User 36636 improves AUC. Keeping the model.
Training on augumented user 43868 22/50 current_auc = 0.7317747611865258
User 43868 AUC after training: 0.7323493499964088
User 43868 improves AUC. Keeping the model.
Training on augumented user 99602 23/50 current_auc = 0.7323493499964088
User 99602 AUC after training: 0.732205702793938
User 99602 does not improve AUC. Reverting changes.
Training on augumented user 130074 24/50 current_auc = 0.7323493499964088
User 130074 AUC after training: 0.7318824965883789
User 130074 does not improve AUC. Reverting changes.
Training on augumented user 113413 25/50 current_auc = 0.7323493499964088
User 113413 AUC after training: 0.7346836170365582
User 113413 improves AUC. Keeping the model.
Training on augumented user 27997 26/50 current_auc = 0.7346836170365582
User 27997 AUC after training: 0.7337858220211161
User 27997 does not improve AUC. Reverting changes.
Training on augumented user 99440 27/50 current_auc = 0.7346836170365582
User 99440 AUC after training: 0.7347554406377936
User 99440 improves AUC. Keeping the model.
Training on augumented user 69525 28/50 current_auc = 0.7347554406377936
User 69525 AUC after training: 0.7335344394167924
User 69525 does not improve AUC. Reverting changes.
Training on augumented user 15602 29/50 current_auc = 0.7347554406377936
User 15602 AUC after training: 0.7343244990303814
User 15602 does not improve AUC. Reverting changes.
Training on augumented user 122608 30/50 current_auc = 0.7347554406377936
User 122608 AUC after training: 0.7336062630180277
User 122608 does not improve AUC. Reverting changes.
Training on augumented user 60645 31/50 current_auc = 0.7347554406377936
User 60645 AUC after training: 0.7343604108309991
User 60645 does not improve AUC. Reverting changes.
Training on augumented user 109265 32/50 current_auc = 0.7347554406377936
User 109265 AUC after training: 0.7344681462328522
User 109265 does not improve AUC. Reverting changes.
Training on augumented user 17236 33/50 current_auc = 0.7347554406377936
User 17236 AUC after training: 0.7343963226316167
User 17236 does not improve AUC. Reverting changes.
Training on augumented user 12661 34/50 current_auc = 0.7347554406377936
User 12661 AUC after training: 0.7347554406377935
User 12661 does not improve AUC. Reverting changes.
Training on augumented user 138274 35/50 current_auc = 0.7347554406377936
User 138274 AUC after training: 0.7341090282266752
User 138274 does not improve AUC. Reverting changes.
Training on augumented user 9038 36/50 current_auc = 0.7347554406377936
User 9038 AUC after training: 0.7347554406377936
User 9038 does not improve AUC. Reverting changes.
Training on augumented user 5012 37/50 current_auc = 0.7347554406377936
User 5012 AUC after training: 0.7350427350427351
User 5012 improves AUC. Keeping the model.
Training on augumented user 49711 38/50 current_auc = 0.7350427350427351
User 49711 AUC after training: 0.7348990878402644
User 49711 does not improve AUC. Reverting changes.
Training on augumented user 99928 39/50 current_auc = 0.7350427350427351
User 99928 AUC after training: 0.7345399698340874
User 99928 does not improve AUC. Reverting changes.
Training on augumented user 95667 40/50 current_auc = 0.7350427350427351
User 95667 AUC after training: 0.7352582058464412
User 95667 improves AUC. Keeping the model.
Training on augumented user 33813 41/50 current_auc = 0.7352582058464412
User 33813 AUC after training: 0.7347554406377936
User 33813 does not improve AUC. Reverting changes.
Training on augumented user 35600 42/50 current_auc = 0.7352582058464412
User 35600 AUC after training: 0.7351145586439705
User 35600 does not improve AUC. Reverting changes.
Training on augumented user 73975 43/50 current_auc = 0.7352582058464412
User 73975 AUC after training: 0.7349709114414997
User 73975 does not improve AUC. Reverting changes.
Training on augumented user 70860 44/50 current_auc = 0.7352582058464412
User 70860 AUC after training: 0.7355455002513825
User 70860 improves AUC. Keeping the model.
Training on augumented user 103663 45/50 current_auc = 0.7355455002513825
User 103663 AUC after training: 0.7356891474538534
User 103663 improves AUC. Keeping the model.
Training on augumented user 31608 46/50 current_auc = 0.7356891474538534
User 31608 AUC after training: 0.7355814120520003
User 31608 does not improve AUC. Reverting changes.
Training on augumented user 122922 47/50 current_auc = 0.7356891474538534
User 122922 AUC after training: 0.7359046182575595
User 122922 improves AUC. Keeping the model.
Training on augumented user 451 48/50 current_auc = 0.7359046182575595
User 451 AUC after training: 0.735832794656324
User 451 does not improve AUC. Reverting changes.
Training on augumented user 118920 49/50 current_auc = 0.7359046182575595
User 118920 AUC after training: 0.7361200890612655
User 118920 improves AUC. Keeping the model.
[2024-12-02 18:16:55.207770] start test user 125514 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:55.605280] start test user 125514 73/567 recall augumented users by random, augumented_users = [43570, 12491, 31608, 12249, 45302, 43609, 102739, 87815, 36137, 109073, 114362, 7937, 37924, 4610, 119621, 66693, 60116, 46858, 74102, 133943, 122816, 129500, 17236, 62436, 81618, 34856, 77736, 32019, 90150, 128487, 44936, 87789, 55343, 40592, 30885, 84159, 16247, 38298, 25708, 5965, 119920, 76579, 107724, 50949, 47582, 49672, 42115, 29271, 117092, 108880]
[2024-12-02 18:16:55.620459] user = 125514 Cloud 73/567
[2024-12-02 18:16:55.634771] user = 125514 Local 73/567
[2024-12-02 18:16:55.748418] user = 125514 Local+ 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:58.385127] user = 125514 MPDA- 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6110347985347986
Training on augumented user 43570 0/50 current_auc = 0.6110347985347986
User 43570 AUC after training: 0.6110347985347986
User 43570 does not improve AUC. Reverting changes.
Training on augumented user 12491 1/50 current_auc = 0.6110347985347986
User 12491 AUC after training: 0.611492673992674
User 12491 improves AUC. Keeping the model.
Training on augumented user 31608 2/50 current_auc = 0.611492673992674
User 31608 AUC after training: 0.6117216117216118
User 31608 improves AUC. Keeping the model.
Training on augumented user 12249 3/50 current_auc = 0.6117216117216118
User 12249 AUC after training: 0.6108058608058609
User 12249 does not improve AUC. Reverting changes.
Training on augumented user 45302 4/50 current_auc = 0.6117216117216118
User 45302 AUC after training: 0.612408424908425
User 45302 improves AUC. Keeping the model.
Training on augumented user 43609 5/50 current_auc = 0.612408424908425
User 43609 AUC after training: 0.6119505494505495
User 43609 does not improve AUC. Reverting changes.
Training on augumented user 102739 6/50 current_auc = 0.612408424908425
User 102739 AUC after training: 0.6130952380952381
User 102739 improves AUC. Keeping the model.
Training on augumented user 87815 7/50 current_auc = 0.6130952380952381
User 87815 AUC after training: 0.6130952380952381
User 87815 does not improve AUC. Reverting changes.
Training on augumented user 36137 8/50 current_auc = 0.6130952380952381
User 36137 AUC after training: 0.6103479853479853
User 36137 does not improve AUC. Reverting changes.
Training on augumented user 109073 9/50 current_auc = 0.6130952380952381
User 109073 AUC after training: 0.6117216117216118
User 109073 does not improve AUC. Reverting changes.
Training on augumented user 114362 10/50 current_auc = 0.6130952380952381
User 114362 AUC after training: 0.6135531135531136
User 114362 improves AUC. Keeping the model.
Training on augumented user 7937 11/50 current_auc = 0.6135531135531136
User 7937 AUC after training: 0.6144688644688645
User 7937 improves AUC. Keeping the model.
Training on augumented user 37924 12/50 current_auc = 0.6144688644688645
User 37924 AUC after training: 0.6144688644688644
User 37924 does not improve AUC. Reverting changes.
Training on augumented user 4610 13/50 current_auc = 0.6144688644688645
User 4610 AUC after training: 0.6130952380952381
User 4610 does not improve AUC. Reverting changes.
Training on augumented user 119621 14/50 current_auc = 0.6144688644688645
User 119621 AUC after training: 0.614010989010989
User 119621 does not improve AUC. Reverting changes.
Training on augumented user 66693 15/50 current_auc = 0.6144688644688645
User 66693 AUC after training: 0.6135531135531136
User 66693 does not improve AUC. Reverting changes.
Training on augumented user 60116 16/50 current_auc = 0.6144688644688645
User 60116 AUC after training: 0.6130952380952381
User 60116 does not improve AUC. Reverting changes.
Training on augumented user 46858 17/50 current_auc = 0.6144688644688645
User 46858 AUC after training: 0.614010989010989
User 46858 does not improve AUC. Reverting changes.
Training on augumented user 74102 18/50 current_auc = 0.6144688644688645
User 74102 AUC after training: 0.6089743589743589
User 74102 does not improve AUC. Reverting changes.
Training on augumented user 133943 19/50 current_auc = 0.6144688644688645
User 133943 AUC after training: 0.614010989010989
User 133943 does not improve AUC. Reverting changes.
Training on augumented user 122816 20/50 current_auc = 0.6144688644688645
User 122816 AUC after training: 0.6133241758241759
User 122816 does not improve AUC. Reverting changes.
Training on augumented user 129500 21/50 current_auc = 0.6144688644688645
User 129500 AUC after training: 0.6105769230769231
User 129500 does not improve AUC. Reverting changes.
Training on augumented user 17236 22/50 current_auc = 0.6144688644688645
User 17236 AUC after training: 0.6130952380952381
User 17236 does not improve AUC. Reverting changes.
Training on augumented user 62436 23/50 current_auc = 0.6144688644688645
User 62436 AUC after training: 0.6121794871794871
User 62436 does not improve AUC. Reverting changes.
Training on augumented user 81618 24/50 current_auc = 0.6144688644688645
User 81618 AUC after training: 0.6135531135531136
User 81618 does not improve AUC. Reverting changes.
Training on augumented user 34856 25/50 current_auc = 0.6144688644688645
User 34856 AUC after training: 0.6130952380952382
User 34856 does not improve AUC. Reverting changes.
Training on augumented user 77736 26/50 current_auc = 0.6144688644688645
User 77736 AUC after training: 0.6117216117216118
User 77736 does not improve AUC. Reverting changes.
Training on augumented user 32019 27/50 current_auc = 0.6144688644688645
User 32019 AUC after training: 0.6121794871794872
User 32019 does not improve AUC. Reverting changes.
Training on augumented user 90150 28/50 current_auc = 0.6144688644688645
User 90150 AUC after training: 0.6130952380952381
User 90150 does not improve AUC. Reverting changes.
Training on augumented user 128487 29/50 current_auc = 0.6144688644688645
User 128487 AUC after training: 0.614010989010989
User 128487 does not improve AUC. Reverting changes.
Training on augumented user 44936 30/50 current_auc = 0.6144688644688645
User 44936 AUC after training: 0.6135531135531136
User 44936 does not improve AUC. Reverting changes.
Training on augumented user 87789 31/50 current_auc = 0.6144688644688645
User 87789 AUC after training: 0.6126373626373626
User 87789 does not improve AUC. Reverting changes.
Training on augumented user 55343 32/50 current_auc = 0.6144688644688645
User 55343 AUC after training: 0.614010989010989
User 55343 does not improve AUC. Reverting changes.
Training on augumented user 40592 33/50 current_auc = 0.6144688644688645
User 40592 AUC after training: 0.6103479853479854
User 40592 does not improve AUC. Reverting changes.
Training on augumented user 30885 34/50 current_auc = 0.6144688644688645
User 30885 AUC after training: 0.611492673992674
User 30885 does not improve AUC. Reverting changes.
Training on augumented user 84159 35/50 current_auc = 0.6144688644688645
User 84159 AUC after training: 0.6144688644688644
User 84159 does not improve AUC. Reverting changes.
Training on augumented user 16247 36/50 current_auc = 0.6144688644688645
User 16247 AUC after training: 0.6144688644688645
User 16247 does not improve AUC. Reverting changes.
Training on augumented user 38298 37/50 current_auc = 0.6144688644688645
User 38298 AUC after training: 0.6135531135531136
User 38298 does not improve AUC. Reverting changes.
Training on augumented user 25708 38/50 current_auc = 0.6144688644688645
User 25708 AUC after training: 0.6119505494505495
User 25708 does not improve AUC. Reverting changes.
Training on augumented user 5965 39/50 current_auc = 0.6144688644688645
User 5965 AUC after training: 0.6144688644688645
User 5965 does not improve AUC. Reverting changes.
Training on augumented user 119920 40/50 current_auc = 0.6144688644688645
User 119920 AUC after training: 0.6130952380952381
User 119920 does not improve AUC. Reverting changes.
Training on augumented user 76579 41/50 current_auc = 0.6144688644688645
User 76579 AUC after training: 0.6126373626373627
User 76579 does not improve AUC. Reverting changes.
Training on augumented user 107724 42/50 current_auc = 0.6144688644688645
User 107724 AUC after training: 0.6130952380952381
User 107724 does not improve AUC. Reverting changes.
Training on augumented user 50949 43/50 current_auc = 0.6144688644688645
User 50949 AUC after training: 0.6108058608058607
User 50949 does not improve AUC. Reverting changes.
Training on augumented user 47582 44/50 current_auc = 0.6144688644688645
User 47582 AUC after training: 0.6144688644688645
User 47582 does not improve AUC. Reverting changes.
Training on augumented user 49672 45/50 current_auc = 0.6144688644688645
User 49672 AUC after training: 0.6135531135531136
User 49672 does not improve AUC. Reverting changes.
Training on augumented user 42115 46/50 current_auc = 0.6144688644688645
User 42115 AUC after training: 0.6126373626373627
User 42115 does not improve AUC. Reverting changes.
Training on augumented user 29271 47/50 current_auc = 0.6144688644688645
User 29271 AUC after training: 0.6130952380952381
User 29271 does not improve AUC. Reverting changes.
Training on augumented user 117092 48/50 current_auc = 0.6144688644688645
User 117092 AUC after training: 0.6128663003663004
User 117092 does not improve AUC. Reverting changes.
Training on augumented user 108880 49/50 current_auc = 0.6144688644688645
User 108880 AUC after training: 0.6108058608058609
User 108880 does not improve AUC. Reverting changes.
[2024-12-02 18:17:30.898727] start test user 125597 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:31.318100] start test user 125597 74/567 recall augumented users by random, augumented_users = [103979, 102682, 65640, 82440, 120143, 93195, 94691, 64122, 14982, 33821, 68291, 98781, 94386, 12160, 114188, 68630, 95462, 56635, 86907, 54490, 17401, 12871, 74126, 82294, 78395, 137174, 87371, 856, 65483, 107910, 61323, 127681, 34444, 98205, 50377, 44516, 83372, 68005, 1860, 43983, 112979, 137260, 11166, 91365, 58649, 118692, 13730, 131204, 6870, 68494]
[2024-12-02 18:17:31.332736] user = 125597 Cloud 74/567
[2024-12-02 18:17:31.342484] user = 125597 Local 74/567
[2024-12-02 18:17:31.362254] user = 125597 Local+ 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:33.720679] user = 125597 MPDA- 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46153846153846156
Training on augumented user 103979 0/50 current_auc = 0.46153846153846156
User 103979 AUC after training: 0.46153846153846156
User 103979 does not improve AUC. Reverting changes.
Training on augumented user 102682 1/50 current_auc = 0.46153846153846156
User 102682 AUC after training: 0.46153846153846156
User 102682 does not improve AUC. Reverting changes.
Training on augumented user 65640 2/50 current_auc = 0.46153846153846156
User 65640 AUC after training: 0.46153846153846156
User 65640 does not improve AUC. Reverting changes.
Training on augumented user 82440 3/50 current_auc = 0.46153846153846156
User 82440 AUC after training: 0.46153846153846156
User 82440 does not improve AUC. Reverting changes.
Training on augumented user 120143 4/50 current_auc = 0.46153846153846156
User 120143 AUC after training: 0.45940170940170943
User 120143 does not improve AUC. Reverting changes.
Training on augumented user 93195 5/50 current_auc = 0.46153846153846156
User 93195 AUC after training: 0.4658119658119658
User 93195 improves AUC. Keeping the model.
Training on augumented user 94691 6/50 current_auc = 0.4658119658119658
User 94691 AUC after training: 0.4636752136752137
User 94691 does not improve AUC. Reverting changes.
Training on augumented user 64122 7/50 current_auc = 0.4658119658119658
User 64122 AUC after training: 0.4658119658119658
User 64122 does not improve AUC. Reverting changes.
Training on augumented user 14982 8/50 current_auc = 0.4658119658119658
User 14982 AUC after training: 0.4658119658119658
User 14982 does not improve AUC. Reverting changes.
Training on augumented user 33821 9/50 current_auc = 0.4658119658119658
User 33821 AUC after training: 0.4658119658119658
User 33821 does not improve AUC. Reverting changes.
Training on augumented user 68291 10/50 current_auc = 0.4658119658119658
User 68291 AUC after training: 0.46153846153846156
User 68291 does not improve AUC. Reverting changes.
Training on augumented user 98781 11/50 current_auc = 0.4658119658119658
User 98781 AUC after training: 0.4658119658119658
User 98781 does not improve AUC. Reverting changes.
Training on augumented user 94386 12/50 current_auc = 0.4658119658119658
User 94386 AUC after training: 0.4658119658119658
User 94386 does not improve AUC. Reverting changes.
Training on augumented user 12160 13/50 current_auc = 0.4658119658119658
User 12160 AUC after training: 0.4658119658119658
User 12160 does not improve AUC. Reverting changes.
Training on augumented user 114188 14/50 current_auc = 0.4658119658119658
User 114188 AUC after training: 0.46153846153846156
User 114188 does not improve AUC. Reverting changes.
Training on augumented user 68630 15/50 current_auc = 0.4658119658119658
User 68630 AUC after training: 0.46153846153846156
User 68630 does not improve AUC. Reverting changes.
Training on augumented user 95462 16/50 current_auc = 0.4658119658119658
User 95462 AUC after training: 0.4658119658119658
User 95462 does not improve AUC. Reverting changes.
Training on augumented user 56635 17/50 current_auc = 0.4658119658119658
User 56635 AUC after training: 0.4658119658119658
User 56635 does not improve AUC. Reverting changes.
Training on augumented user 86907 18/50 current_auc = 0.4658119658119658
User 86907 AUC after training: 0.4658119658119658
User 86907 does not improve AUC. Reverting changes.
Training on augumented user 54490 19/50 current_auc = 0.4658119658119658
User 54490 AUC after training: 0.4636752136752137
User 54490 does not improve AUC. Reverting changes.
Training on augumented user 17401 20/50 current_auc = 0.4658119658119658
User 17401 AUC after training: 0.4700854700854701
User 17401 improves AUC. Keeping the model.
Training on augumented user 12871 21/50 current_auc = 0.4700854700854701
User 12871 AUC after training: 0.4658119658119658
User 12871 does not improve AUC. Reverting changes.
Training on augumented user 74126 22/50 current_auc = 0.4700854700854701
User 74126 AUC after training: 0.4700854700854701
User 74126 does not improve AUC. Reverting changes.
Training on augumented user 82294 23/50 current_auc = 0.4700854700854701
User 82294 AUC after training: 0.4658119658119658
User 82294 does not improve AUC. Reverting changes.
Training on augumented user 78395 24/50 current_auc = 0.4700854700854701
User 78395 AUC after training: 0.46794871794871795
User 78395 does not improve AUC. Reverting changes.
Training on augumented user 137174 25/50 current_auc = 0.4700854700854701
User 137174 AUC after training: 0.4658119658119658
User 137174 does not improve AUC. Reverting changes.
Training on augumented user 87371 26/50 current_auc = 0.4700854700854701
User 87371 AUC after training: 0.4636752136752137
User 87371 does not improve AUC. Reverting changes.
Training on augumented user 856 27/50 current_auc = 0.4700854700854701
User 856 AUC after training: 0.47649572649572647
User 856 improves AUC. Keeping the model.
Training on augumented user 65483 28/50 current_auc = 0.47649572649572647
User 65483 AUC after training: 0.47435897435897434
User 65483 does not improve AUC. Reverting changes.
Training on augumented user 107910 29/50 current_auc = 0.47649572649572647
User 107910 AUC after training: 0.47435897435897445
User 107910 does not improve AUC. Reverting changes.
Training on augumented user 61323 30/50 current_auc = 0.47649572649572647
User 61323 AUC after training: 0.4764957264957266
User 61323 improves AUC. Keeping the model.
Training on augumented user 127681 31/50 current_auc = 0.4764957264957266
User 127681 AUC after training: 0.4764957264957265
User 127681 does not improve AUC. Reverting changes.
Training on augumented user 34444 32/50 current_auc = 0.4764957264957266
User 34444 AUC after training: 0.4700854700854701
User 34444 does not improve AUC. Reverting changes.
Training on augumented user 98205 33/50 current_auc = 0.4764957264957266
User 98205 AUC after training: 0.4700854700854701
User 98205 does not improve AUC. Reverting changes.
Training on augumented user 50377 34/50 current_auc = 0.4764957264957266
User 50377 AUC after training: 0.4700854700854701
User 50377 does not improve AUC. Reverting changes.
Training on augumented user 44516 35/50 current_auc = 0.4764957264957266
User 44516 AUC after training: 0.4700854700854701
User 44516 does not improve AUC. Reverting changes.
Training on augumented user 83372 36/50 current_auc = 0.4764957264957266
User 83372 AUC after training: 0.4807692307692307
User 83372 improves AUC. Keeping the model.
Training on augumented user 68005 37/50 current_auc = 0.4807692307692307
User 68005 AUC after training: 0.4807692307692307
User 68005 does not improve AUC. Reverting changes.
Training on augumented user 1860 38/50 current_auc = 0.4807692307692307
User 1860 AUC after training: 0.47435897435897445
User 1860 does not improve AUC. Reverting changes.
Training on augumented user 43983 39/50 current_auc = 0.4807692307692307
User 43983 AUC after training: 0.4807692307692307
User 43983 does not improve AUC. Reverting changes.
Training on augumented user 112979 40/50 current_auc = 0.4807692307692307
User 112979 AUC after training: 0.4807692307692307
User 112979 does not improve AUC. Reverting changes.
Training on augumented user 137260 41/50 current_auc = 0.4807692307692307
User 137260 AUC after training: 0.4807692307692307
User 137260 does not improve AUC. Reverting changes.
Training on augumented user 11166 42/50 current_auc = 0.4807692307692307
User 11166 AUC after training: 0.46153846153846156
User 11166 does not improve AUC. Reverting changes.
Training on augumented user 91365 43/50 current_auc = 0.4807692307692307
User 91365 AUC after training: 0.4807692307692307
User 91365 does not improve AUC. Reverting changes.
Training on augumented user 58649 44/50 current_auc = 0.4807692307692307
User 58649 AUC after training: 0.4807692307692307
User 58649 does not improve AUC. Reverting changes.
Training on augumented user 118692 45/50 current_auc = 0.4807692307692307
User 118692 AUC after training: 0.4807692307692307
User 118692 does not improve AUC. Reverting changes.
Training on augumented user 13730 46/50 current_auc = 0.4807692307692307
User 13730 AUC after training: 0.47649572649572647
User 13730 does not improve AUC. Reverting changes.
Training on augumented user 131204 47/50 current_auc = 0.4807692307692307
User 131204 AUC after training: 0.47222222222222227
User 131204 does not improve AUC. Reverting changes.
Training on augumented user 6870 48/50 current_auc = 0.4807692307692307
User 6870 AUC after training: 0.4764957264957266
User 6870 does not improve AUC. Reverting changes.
Training on augumented user 68494 49/50 current_auc = 0.4807692307692307
User 68494 AUC after training: 0.47649572649572647
User 68494 does not improve AUC. Reverting changes.
[2024-12-02 18:18:02.833069] start test user 125644 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:03.357921] start test user 125644 75/567 recall augumented users by random, augumented_users = [27259, 27305, 121656, 15252, 50759, 32723, 4804, 4534, 53785, 6885, 91611, 17741, 105732, 65299, 91892, 51316, 44411, 48819, 224, 66577, 42402, 135924, 7533, 39465, 119926, 63438, 83178, 23722, 73393, 36789, 96629, 133530, 57097, 47835, 21652, 125995, 55126, 74587, 28071, 28502, 130785, 19331, 86300, 91559, 59257, 136316, 113142, 22924, 82977, 60346]
[2024-12-02 18:18:03.374888] user = 125644 Cloud 75/567
[2024-12-02 18:18:03.388483] user = 125644 Local 75/567
[2024-12-02 18:18:03.480000] user = 125644 Local+ 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:05.587754] user = 125644 MPDA- 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.520935960591133
Training on augumented user 27259 0/50 current_auc = 0.520935960591133
User 27259 AUC after training: 0.520935960591133
User 27259 does not improve AUC. Reverting changes.
Training on augumented user 27305 1/50 current_auc = 0.520935960591133
User 27305 AUC after training: 0.5221674876847291
User 27305 improves AUC. Keeping the model.
Training on augumented user 121656 2/50 current_auc = 0.5221674876847291
User 121656 AUC after training: 0.520935960591133
User 121656 does not improve AUC. Reverting changes.
Training on augumented user 15252 3/50 current_auc = 0.5221674876847291
User 15252 AUC after training: 0.5197044334975369
User 15252 does not improve AUC. Reverting changes.
Training on augumented user 50759 4/50 current_auc = 0.5221674876847291
User 50759 AUC after training: 0.5221674876847291
User 50759 does not improve AUC. Reverting changes.
Training on augumented user 32723 5/50 current_auc = 0.5221674876847291
User 32723 AUC after training: 0.5221674876847291
User 32723 does not improve AUC. Reverting changes.
Training on augumented user 4804 6/50 current_auc = 0.5221674876847291
User 4804 AUC after training: 0.5233990147783252
User 4804 improves AUC. Keeping the model.
Training on augumented user 4534 7/50 current_auc = 0.5233990147783252
User 4534 AUC after training: 0.5221674876847291
User 4534 does not improve AUC. Reverting changes.
Training on augumented user 53785 8/50 current_auc = 0.5233990147783252
User 53785 AUC after training: 0.5233990147783252
User 53785 does not improve AUC. Reverting changes.
Training on augumented user 6885 9/50 current_auc = 0.5233990147783252
User 6885 AUC after training: 0.5258620689655172
User 6885 improves AUC. Keeping the model.
Training on augumented user 91611 10/50 current_auc = 0.5258620689655172
User 91611 AUC after training: 0.5246305418719213
User 91611 does not improve AUC. Reverting changes.
Training on augumented user 17741 11/50 current_auc = 0.5258620689655172
User 17741 AUC after training: 0.5221674876847291
User 17741 does not improve AUC. Reverting changes.
Training on augumented user 105732 12/50 current_auc = 0.5258620689655172
User 105732 AUC after training: 0.5221674876847291
User 105732 does not improve AUC. Reverting changes.
Training on augumented user 65299 13/50 current_auc = 0.5258620689655172
User 65299 AUC after training: 0.5233990147783252
User 65299 does not improve AUC. Reverting changes.
Training on augumented user 91892 14/50 current_auc = 0.5258620689655172
User 91892 AUC after training: 0.5283251231527094
User 91892 improves AUC. Keeping the model.
Training on augumented user 51316 15/50 current_auc = 0.5283251231527094
User 51316 AUC after training: 0.5258620689655173
User 51316 does not improve AUC. Reverting changes.
Training on augumented user 44411 16/50 current_auc = 0.5283251231527094
User 44411 AUC after training: 0.5270935960591133
User 44411 does not improve AUC. Reverting changes.
Training on augumented user 48819 17/50 current_auc = 0.5283251231527094
User 48819 AUC after training: 0.5258620689655172
User 48819 does not improve AUC. Reverting changes.
Training on augumented user 224 18/50 current_auc = 0.5283251231527094
User 224 AUC after training: 0.5258620689655172
User 224 does not improve AUC. Reverting changes.
Training on augumented user 66577 19/50 current_auc = 0.5283251231527094
User 66577 AUC after training: 0.5258620689655172
User 66577 does not improve AUC. Reverting changes.
Training on augumented user 42402 20/50 current_auc = 0.5283251231527094
User 42402 AUC after training: 0.5270935960591133
User 42402 does not improve AUC. Reverting changes.
Training on augumented user 135924 21/50 current_auc = 0.5283251231527094
User 135924 AUC after training: 0.5258620689655173
User 135924 does not improve AUC. Reverting changes.
Training on augumented user 7533 22/50 current_auc = 0.5283251231527094
User 7533 AUC after training: 0.5258620689655172
User 7533 does not improve AUC. Reverting changes.
Training on augumented user 39465 23/50 current_auc = 0.5283251231527094
User 39465 AUC after training: 0.5258620689655172
User 39465 does not improve AUC. Reverting changes.
Training on augumented user 119926 24/50 current_auc = 0.5283251231527094
User 119926 AUC after training: 0.5258620689655172
User 119926 does not improve AUC. Reverting changes.
Training on augumented user 63438 25/50 current_auc = 0.5283251231527094
User 63438 AUC after training: 0.5246305418719212
User 63438 does not improve AUC. Reverting changes.
Training on augumented user 83178 26/50 current_auc = 0.5283251231527094
User 83178 AUC after training: 0.5233990147783252
User 83178 does not improve AUC. Reverting changes.
Training on augumented user 23722 27/50 current_auc = 0.5283251231527094
User 23722 AUC after training: 0.5283251231527094
User 23722 does not improve AUC. Reverting changes.
Training on augumented user 73393 28/50 current_auc = 0.5283251231527094
User 73393 AUC after training: 0.5258620689655173
User 73393 does not improve AUC. Reverting changes.
Training on augumented user 36789 29/50 current_auc = 0.5283251231527094
User 36789 AUC after training: 0.5283251231527094
User 36789 does not improve AUC. Reverting changes.
Training on augumented user 96629 30/50 current_auc = 0.5283251231527094
User 96629 AUC after training: 0.5221674876847291
User 96629 does not improve AUC. Reverting changes.
Training on augumented user 133530 31/50 current_auc = 0.5283251231527094
User 133530 AUC after training: 0.5258620689655172
User 133530 does not improve AUC. Reverting changes.
Training on augumented user 57097 32/50 current_auc = 0.5283251231527094
User 57097 AUC after training: 0.5246305418719213
User 57097 does not improve AUC. Reverting changes.
Training on augumented user 47835 33/50 current_auc = 0.5283251231527094
User 47835 AUC after training: 0.5270935960591133
User 47835 does not improve AUC. Reverting changes.
Training on augumented user 21652 34/50 current_auc = 0.5283251231527094
User 21652 AUC after training: 0.5270935960591133
User 21652 does not improve AUC. Reverting changes.
Training on augumented user 125995 35/50 current_auc = 0.5283251231527094
User 125995 AUC after training: 0.5258620689655172
User 125995 does not improve AUC. Reverting changes.
Training on augumented user 55126 36/50 current_auc = 0.5283251231527094
User 55126 AUC after training: 0.5233990147783252
User 55126 does not improve AUC. Reverting changes.
Training on augumented user 74587 37/50 current_auc = 0.5283251231527094
User 74587 AUC after training: 0.5270935960591133
User 74587 does not improve AUC. Reverting changes.
Training on augumented user 28071 38/50 current_auc = 0.5283251231527094
User 28071 AUC after training: 0.5270935960591133
User 28071 does not improve AUC. Reverting changes.
Training on augumented user 28502 39/50 current_auc = 0.5283251231527094
User 28502 AUC after training: 0.5258620689655172
User 28502 does not improve AUC. Reverting changes.
Training on augumented user 130785 40/50 current_auc = 0.5283251231527094
User 130785 AUC after training: 0.5258620689655172
User 130785 does not improve AUC. Reverting changes.
Training on augumented user 19331 41/50 current_auc = 0.5283251231527094
User 19331 AUC after training: 0.5270935960591133
User 19331 does not improve AUC. Reverting changes.
Training on augumented user 86300 42/50 current_auc = 0.5283251231527094
User 86300 AUC after training: 0.5283251231527094
User 86300 does not improve AUC. Reverting changes.
Training on augumented user 91559 43/50 current_auc = 0.5283251231527094
User 91559 AUC after training: 0.5283251231527093
User 91559 does not improve AUC. Reverting changes.
Training on augumented user 59257 44/50 current_auc = 0.5283251231527094
User 59257 AUC after training: 0.5270935960591133
User 59257 does not improve AUC. Reverting changes.
Training on augumented user 136316 45/50 current_auc = 0.5283251231527094
User 136316 AUC after training: 0.5283251231527094
User 136316 does not improve AUC. Reverting changes.
Training on augumented user 113142 46/50 current_auc = 0.5283251231527094
User 113142 AUC after training: 0.5233990147783252
User 113142 does not improve AUC. Reverting changes.
Training on augumented user 22924 47/50 current_auc = 0.5283251231527094
User 22924 AUC after training: 0.5270935960591133
User 22924 does not improve AUC. Reverting changes.
Training on augumented user 82977 48/50 current_auc = 0.5283251231527094
User 82977 AUC after training: 0.5283251231527093
User 82977 does not improve AUC. Reverting changes.
Training on augumented user 60346 49/50 current_auc = 0.5283251231527094
User 60346 AUC after training: 0.5258620689655173
User 60346 does not improve AUC. Reverting changes.
[2024-12-02 18:18:29.935804] start test user 125649 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:30.654697] start test user 125649 76/567 recall augumented users by random, augumented_users = [46507, 109256, 66014, 125059, 24708, 101284, 134439, 113719, 20461, 22795, 51371, 29198, 3651, 69807, 137684, 90174, 11892, 27601, 102163, 105338, 35494, 130278, 85740, 56136, 103703, 112938, 583, 128539, 133122, 118091, 117347, 7772, 17092, 57478, 39689, 102412, 9525, 79042, 72024, 36138, 100665, 20509, 88082, 53927, 4117, 98729, 18031, 88094, 48367, 77158]
[2024-12-02 18:18:30.671044] user = 125649 Cloud 76/567
[2024-12-02 18:18:30.700808] user = 125649 Local 76/567
[2024-12-02 18:18:30.862255] user = 125649 Local+ 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:33.251936] user = 125649 MPDA- 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6080387449292161
Training on augumented user 46507 0/50 current_auc = 0.6080387449292161
User 46507 AUC after training: 0.6079145624637802
User 46507 does not improve AUC. Reverting changes.
Training on augumented user 109256 1/50 current_auc = 0.6080387449292161
User 109256 AUC after training: 0.6084526864806691
User 109256 improves AUC. Keeping the model.
Training on augumented user 66014 2/50 current_auc = 0.6084526864806691
User 66014 AUC after training: 0.6082043215497972
User 66014 does not improve AUC. Reverting changes.
Training on augumented user 125059 3/50 current_auc = 0.6084526864806691
User 125059 AUC after training: 0.6085768689461047
User 125059 improves AUC. Keeping the model.
Training on augumented user 24708 4/50 current_auc = 0.6085768689461047
User 24708 AUC after training: 0.6085354747909595
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 101284 5/50 current_auc = 0.6085768689461047
User 101284 AUC after training: 0.6082457157049425
User 101284 does not improve AUC. Reverting changes.
Training on augumented user 134439 6/50 current_auc = 0.6085768689461047
User 134439 AUC after training: 0.6081008361619338
User 134439 does not improve AUC. Reverting changes.
Training on augumented user 113719 7/50 current_auc = 0.6085768689461047
User 113719 AUC after training: 0.6085354747909595
User 113719 does not improve AUC. Reverting changes.
Training on augumented user 20461 8/50 current_auc = 0.6085768689461047
User 20461 AUC after training: 0.6081629273946518
User 20461 does not improve AUC. Reverting changes.
Training on augumented user 22795 9/50 current_auc = 0.6085768689461047
User 22795 AUC after training: 0.6082457157049425
User 22795 does not improve AUC. Reverting changes.
Training on augumented user 51371 10/50 current_auc = 0.6085768689461047
User 51371 AUC after training: 0.6082871098600877
User 51371 does not improve AUC. Reverting changes.
Training on augumented user 29198 11/50 current_auc = 0.6085768689461047
User 29198 AUC after training: 0.6085354747909595
User 29198 does not improve AUC. Reverting changes.
Training on augumented user 3651 12/50 current_auc = 0.6085768689461047
User 3651 AUC after training: 0.6072729530590281
User 3651 does not improve AUC. Reverting changes.
Training on augumented user 69807 13/50 current_auc = 0.6085768689461047
User 69807 AUC after training: 0.6073764384468913
User 69807 does not improve AUC. Reverting changes.
Training on augumented user 137684 14/50 current_auc = 0.6085768689461047
User 137684 AUC after training: 0.6087010514115407
User 137684 improves AUC. Keeping the model.
Training on augumented user 90174 15/50 current_auc = 0.6087010514115407
User 90174 AUC after training: 0.6085354747909595
User 90174 does not improve AUC. Reverting changes.
Training on augumented user 11892 16/50 current_auc = 0.6087010514115407
User 11892 AUC after training: 0.6083285040152331
User 11892 does not improve AUC. Reverting changes.
Training on augumented user 27601 17/50 current_auc = 0.6087010514115407
User 27601 AUC after training: 0.6071487705935921
User 27601 does not improve AUC. Reverting changes.
Training on augumented user 102163 18/50 current_auc = 0.6087010514115407
User 102163 AUC after training: 0.6085354747909595
User 102163 does not improve AUC. Reverting changes.
Training on augumented user 105338 19/50 current_auc = 0.6087010514115407
User 105338 AUC after training: 0.6084940806358141
User 105338 does not improve AUC. Reverting changes.
Training on augumented user 35494 20/50 current_auc = 0.6087010514115407
User 35494 AUC after training: 0.6085768689461049
User 35494 does not improve AUC. Reverting changes.
Training on augumented user 130278 21/50 current_auc = 0.6087010514115407
User 130278 AUC after training: 0.6080801390843613
User 130278 does not improve AUC. Reverting changes.
Training on augumented user 85740 22/50 current_auc = 0.6087010514115407
User 85740 AUC after training: 0.6090529017302757
User 85740 improves AUC. Keeping the model.
Training on augumented user 56136 23/50 current_auc = 0.6090529017302757
User 56136 AUC after training: 0.6085561718685322
User 56136 does not improve AUC. Reverting changes.
Training on augumented user 103703 24/50 current_auc = 0.6090529017302757
User 103703 AUC after training: 0.6078938653862075
User 103703 does not improve AUC. Reverting changes.
Training on augumented user 112938 25/50 current_auc = 0.6090529017302757
User 112938 AUC after training: 0.6086596572563954
User 112938 does not improve AUC. Reverting changes.
Training on augumented user 583 26/50 current_auc = 0.6090529017302757
User 583 AUC after training: 0.6090735988078483
User 583 improves AUC. Keeping the model.
Training on augumented user 128539 27/50 current_auc = 0.6090735988078483
User 128539 AUC after training: 0.6089908104975577
User 128539 does not improve AUC. Reverting changes.
Training on augumented user 133122 28/50 current_auc = 0.6090735988078483
User 133122 AUC after training: 0.6087631426442587
User 133122 does not improve AUC. Reverting changes.
Training on augumented user 118091 29/50 current_auc = 0.6090735988078483
User 118091 AUC after training: 0.6083285040152331
User 118091 does not improve AUC. Reverting changes.
Training on augumented user 117347 30/50 current_auc = 0.6090735988078483
User 117347 AUC after training: 0.6085975660236774
User 117347 does not improve AUC. Reverting changes.
Training on augumented user 7772 31/50 current_auc = 0.6090735988078483
User 7772 AUC after training: 0.6083078069376604
User 7772 does not improve AUC. Reverting changes.
Training on augumented user 17092 32/50 current_auc = 0.6090735988078483
User 17092 AUC after training: 0.6087838397218313
User 17092 does not improve AUC. Reverting changes.
Training on augumented user 57478 33/50 current_auc = 0.6090735988078483
User 57478 AUC after training: 0.6086596572563954
User 57478 does not improve AUC. Reverting changes.
Training on augumented user 39689 34/50 current_auc = 0.6090735988078483
User 39689 AUC after training: 0.609032204652703
User 39689 does not improve AUC. Reverting changes.
Training on augumented user 102412 35/50 current_auc = 0.6090735988078483
User 102412 AUC after training: 0.6087010514115406
User 102412 does not improve AUC. Reverting changes.
Training on augumented user 9525 36/50 current_auc = 0.6090735988078483
User 9525 AUC after training: 0.6088666280321219
User 9525 does not improve AUC. Reverting changes.
Training on augumented user 79042 37/50 current_auc = 0.6090735988078483
User 79042 AUC after training: 0.6090115075751303
User 79042 does not improve AUC. Reverting changes.
Training on augumented user 72024 38/50 current_auc = 0.6090735988078483
User 72024 AUC after training: 0.6083905952479509
User 72024 does not improve AUC. Reverting changes.
Training on augumented user 36138 39/50 current_auc = 0.6090735988078483
User 36138 AUC after training: 0.608742445566686
User 36138 does not improve AUC. Reverting changes.
Training on augumented user 100665 40/50 current_auc = 0.6090735988078483
User 100665 AUC after training: 0.6088252338769765
User 100665 does not improve AUC. Reverting changes.
Training on augumented user 20509 41/50 current_auc = 0.6090735988078483
User 20509 AUC after training: 0.6089080221872671
User 20509 does not improve AUC. Reverting changes.
Training on augumented user 88082 42/50 current_auc = 0.6090735988078483
User 88082 AUC after training: 0.6092391754284294
User 88082 improves AUC. Keeping the model.
Training on augumented user 53927 43/50 current_auc = 0.6092391754284294
User 53927 AUC after training: 0.6091149929629937
User 53927 does not improve AUC. Reverting changes.
Training on augumented user 4117 44/50 current_auc = 0.6092391754284294
User 4117 AUC after training: 0.6086596572563954
User 4117 does not improve AUC. Reverting changes.
Training on augumented user 98729 45/50 current_auc = 0.6092391754284294
User 98729 AUC after training: 0.6085768689461047
User 98729 does not improve AUC. Reverting changes.
Training on augumented user 18031 46/50 current_auc = 0.6092391754284294
User 18031 AUC after training: 0.6080801390843612
User 18031 does not improve AUC. Reverting changes.
Training on augumented user 88094 47/50 current_auc = 0.6092391754284294
User 88094 AUC after training: 0.609032204652703
User 88094 does not improve AUC. Reverting changes.
Training on augumented user 48367 48/50 current_auc = 0.6092391754284294
User 48367 AUC after training: 0.6089080221872673
User 48367 does not improve AUC. Reverting changes.
Training on augumented user 77158 49/50 current_auc = 0.6092391754284294
User 77158 AUC after training: 0.608742445566686
User 77158 does not improve AUC. Reverting changes.
[2024-12-02 18:19:01.753256] start test user 125659 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:02.253305] start test user 125659 77/567 recall augumented users by random, augumented_users = [123809, 124542, 95319, 127933, 33831, 103481, 31785, 35149, 107116, 46885, 108591, 46131, 14690, 37758, 77281, 122598, 22506, 55189, 39537, 55152, 60541, 76331, 25861, 133420, 137080, 109256, 92301, 81744, 84849, 41970, 136694, 15995, 13820, 4801, 58521, 21073, 13230, 127485, 41763, 86755, 123812, 98611, 46416, 4438, 83352, 10523, 55412, 127087, 37074, 133730]
[2024-12-02 18:19:02.269765] user = 125659 Cloud 77/567
[2024-12-02 18:19:02.340379] user = 125659 Local 77/567
[2024-12-02 18:19:02.522150] user = 125659 Local+ 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:05.007662] user = 125659 MPDA- 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6219419924337957
Training on augumented user 123809 0/50 current_auc = 0.6219419924337957
User 123809 AUC after training: 0.6216897856242118
User 123809 does not improve AUC. Reverting changes.
Training on augumented user 124542 1/50 current_auc = 0.6219419924337957
User 124542 AUC after training: 0.6215636822194198
User 124542 does not improve AUC. Reverting changes.
Training on augumented user 95319 2/50 current_auc = 0.6219419924337957
User 95319 AUC after training: 0.621437578814628
User 95319 does not improve AUC. Reverting changes.
Training on augumented user 127933 3/50 current_auc = 0.6219419924337957
User 127933 AUC after training: 0.6221941992433795
User 127933 improves AUC. Keeping the model.
Training on augumented user 33831 4/50 current_auc = 0.6221941992433795
User 33831 AUC after training: 0.6215636822194198
User 33831 does not improve AUC. Reverting changes.
Training on augumented user 103481 5/50 current_auc = 0.6221941992433795
User 103481 AUC after training: 0.6220680958385876
User 103481 does not improve AUC. Reverting changes.
Training on augumented user 31785 6/50 current_auc = 0.6221941992433795
User 31785 AUC after training: 0.6219419924337957
User 31785 does not improve AUC. Reverting changes.
Training on augumented user 35149 7/50 current_auc = 0.6221941992433795
User 35149 AUC after training: 0.6216897856242118
User 35149 does not improve AUC. Reverting changes.
Training on augumented user 107116 8/50 current_auc = 0.6221941992433795
User 107116 AUC after training: 0.62124842370744
User 107116 does not improve AUC. Reverting changes.
Training on augumented user 46885 9/50 current_auc = 0.6221941992433795
User 46885 AUC after training: 0.621437578814628
User 46885 does not improve AUC. Reverting changes.
Training on augumented user 108591 10/50 current_auc = 0.6221941992433795
User 108591 AUC after training: 0.6216897856242118
User 108591 does not improve AUC. Reverting changes.
Training on augumented user 46131 11/50 current_auc = 0.6221941992433795
User 46131 AUC after training: 0.6218158890290038
User 46131 does not improve AUC. Reverting changes.
Training on augumented user 14690 12/50 current_auc = 0.6221941992433795
User 14690 AUC after training: 0.6218158890290038
User 14690 does not improve AUC. Reverting changes.
Training on augumented user 37758 13/50 current_auc = 0.6221941992433795
User 37758 AUC after training: 0.6215636822194198
User 37758 does not improve AUC. Reverting changes.
Training on augumented user 77281 14/50 current_auc = 0.6221941992433795
User 77281 AUC after training: 0.6216897856242118
User 77281 does not improve AUC. Reverting changes.
Training on augumented user 122598 15/50 current_auc = 0.6221941992433795
User 122598 AUC after training: 0.6220050441361917
User 122598 does not improve AUC. Reverting changes.
Training on augumented user 22506 16/50 current_auc = 0.6221941992433795
User 22506 AUC after training: 0.6219419924337957
User 22506 does not improve AUC. Reverting changes.
Training on augumented user 55189 17/50 current_auc = 0.6221941992433795
User 55189 AUC after training: 0.619356872635561
User 55189 does not improve AUC. Reverting changes.
Training on augumented user 39537 18/50 current_auc = 0.6221941992433795
User 39537 AUC after training: 0.6214375788146279
User 39537 does not improve AUC. Reverting changes.
Training on augumented user 55152 19/50 current_auc = 0.6221941992433795
User 55152 AUC after training: 0.6218158890290038
User 55152 does not improve AUC. Reverting changes.
Training on augumented user 60541 20/50 current_auc = 0.6221941992433795
User 60541 AUC after training: 0.6219419924337957
User 60541 does not improve AUC. Reverting changes.
Training on augumented user 76331 21/50 current_auc = 0.6221941992433795
User 76331 AUC after training: 0.621311475409836
User 76331 does not improve AUC. Reverting changes.
Training on augumented user 25861 22/50 current_auc = 0.6221941992433795
User 25861 AUC after training: 0.6216897856242118
User 25861 does not improve AUC. Reverting changes.
Training on augumented user 133420 23/50 current_auc = 0.6221941992433795
User 133420 AUC after training: 0.6216897856242118
User 133420 does not improve AUC. Reverting changes.
Training on augumented user 137080 24/50 current_auc = 0.6221941992433795
User 137080 AUC after training: 0.6216897856242118
User 137080 does not improve AUC. Reverting changes.
Training on augumented user 109256 25/50 current_auc = 0.6221941992433795
User 109256 AUC after training: 0.6218158890290038
User 109256 does not improve AUC. Reverting changes.
Training on augumented user 92301 26/50 current_auc = 0.6221941992433795
User 92301 AUC after training: 0.6215636822194199
User 92301 does not improve AUC. Reverting changes.
Training on augumented user 81744 27/50 current_auc = 0.6221941992433795
User 81744 AUC after training: 0.6210592686002522
User 81744 does not improve AUC. Reverting changes.
Training on augumented user 84849 28/50 current_auc = 0.6221941992433795
User 84849 AUC after training: 0.6221311475409836
User 84849 does not improve AUC. Reverting changes.
Training on augumented user 41970 29/50 current_auc = 0.6221941992433795
User 41970 AUC after training: 0.6218158890290038
User 41970 does not improve AUC. Reverting changes.
Training on augumented user 136694 30/50 current_auc = 0.6221941992433795
User 136694 AUC after training: 0.6227616645649432
User 136694 improves AUC. Keeping the model.
Training on augumented user 15995 31/50 current_auc = 0.6227616645649432
User 15995 AUC after training: 0.6234552332912988
User 15995 improves AUC. Keeping the model.
Training on augumented user 13820 32/50 current_auc = 0.6234552332912988
User 13820 AUC after training: 0.6250945775535939
User 13820 improves AUC. Keeping the model.
Training on augumented user 4801 33/50 current_auc = 0.6250945775535939
User 4801 AUC after training: 0.6225725094577554
User 4801 does not improve AUC. Reverting changes.
Training on augumented user 58521 34/50 current_auc = 0.6250945775535939
User 58521 AUC after training: 0.6244010088272383
User 58521 does not improve AUC. Reverting changes.
Training on augumented user 21073 35/50 current_auc = 0.6250945775535939
User 21073 AUC after training: 0.6247162673392181
User 21073 does not improve AUC. Reverting changes.
Training on augumented user 13230 36/50 current_auc = 0.6250945775535939
User 13230 AUC after training: 0.6233921815889029
User 13230 does not improve AUC. Reverting changes.
Training on augumented user 127485 37/50 current_auc = 0.6250945775535939
User 127485 AUC after training: 0.6241488020176544
User 127485 does not improve AUC. Reverting changes.
Training on augumented user 41763 38/50 current_auc = 0.6250945775535939
User 41763 AUC after training: 0.624968474148802
User 41763 does not improve AUC. Reverting changes.
Training on augumented user 86755 39/50 current_auc = 0.6250945775535939
User 86755 AUC after training: 0.6245901639344261
User 86755 does not improve AUC. Reverting changes.
Training on augumented user 123812 40/50 current_auc = 0.6250945775535939
User 123812 AUC after training: 0.6250945775535939
User 123812 does not improve AUC. Reverting changes.
Training on augumented user 98611 41/50 current_auc = 0.6250945775535939
User 98611 AUC after training: 0.6238335435056747
User 98611 does not improve AUC. Reverting changes.
Training on augumented user 46416 42/50 current_auc = 0.6250945775535939
User 46416 AUC after training: 0.6245901639344262
User 46416 does not improve AUC. Reverting changes.
Training on augumented user 4438 43/50 current_auc = 0.6250945775535939
User 4438 AUC after training: 0.6239596469104665
User 4438 does not improve AUC. Reverting changes.
Training on augumented user 83352 44/50 current_auc = 0.6250945775535939
User 83352 AUC after training: 0.6250945775535939
User 83352 does not improve AUC. Reverting changes.
Training on augumented user 10523 45/50 current_auc = 0.6250945775535939
User 10523 AUC after training: 0.6239596469104665
User 10523 does not improve AUC. Reverting changes.
Training on augumented user 55412 46/50 current_auc = 0.6250945775535939
User 55412 AUC after training: 0.6245901639344262
User 55412 does not improve AUC. Reverting changes.
Training on augumented user 127087 47/50 current_auc = 0.6250945775535939
User 127087 AUC after training: 0.6252206809583858
User 127087 improves AUC. Keeping the model.
Training on augumented user 37074 48/50 current_auc = 0.6252206809583858
User 37074 AUC after training: 0.626607818411097
User 37074 improves AUC. Keeping the model.
Training on augumented user 133730 49/50 current_auc = 0.626607818411097
User 133730 AUC after training: 0.6255989911727615
User 133730 does not improve AUC. Reverting changes.
[2024-12-02 18:19:36.002974] start test user 125701 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:36.426765] start test user 125701 78/567 recall augumented users by random, augumented_users = [90434, 68167, 106621, 72935, 34198, 136615, 99220, 61133, 111792, 39772, 88128, 83559, 78023, 63566, 128812, 80986, 93745, 1815, 60648, 22066, 62288, 83563, 122549, 115975, 77206, 17917, 77778, 2925, 57087, 56979, 10721, 33831, 105111, 107667, 70885, 110791, 26535, 96892, 52456, 78183, 41926, 37611, 107744, 126540, 14094, 7078, 123812, 118691, 42417, 27561]
[2024-12-02 18:19:36.443141] user = 125701 Cloud 78/567
[2024-12-02 18:19:36.463488] user = 125701 Local 78/567
[2024-12-02 18:19:36.546214] user = 125701 Local+ 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:38.659235] user = 125701 MPDA- 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6646294881588999
Training on augumented user 90434 0/50 current_auc = 0.6646294881588999
User 90434 AUC after training: 0.66646294881589
User 90434 improves AUC. Keeping the model.
Training on augumented user 68167 1/50 current_auc = 0.66646294881589
User 68167 AUC after training: 0.6495034377387319
User 68167 does not improve AUC. Reverting changes.
Training on augumented user 106621 2/50 current_auc = 0.66646294881589
User 106621 AUC after training: 0.6666157372039725
User 106621 improves AUC. Keeping the model.
Training on augumented user 72935 3/50 current_auc = 0.6666157372039725
User 72935 AUC after training: 0.6669213139801375
User 72935 improves AUC. Keeping the model.
Training on augumented user 34198 4/50 current_auc = 0.6669213139801375
User 34198 AUC after training: 0.66646294881589
User 34198 does not improve AUC. Reverting changes.
Training on augumented user 136615 5/50 current_auc = 0.6669213139801375
User 136615 AUC after training: 0.6656990068754776
User 136615 does not improve AUC. Reverting changes.
Training on augumented user 99220 6/50 current_auc = 0.6669213139801375
User 99220 AUC after training: 0.66646294881589
User 99220 does not improve AUC. Reverting changes.
Training on augumented user 61133 7/50 current_auc = 0.6669213139801375
User 61133 AUC after training: 0.6655462184873949
User 61133 does not improve AUC. Reverting changes.
Training on augumented user 111792 8/50 current_auc = 0.6669213139801375
User 111792 AUC after training: 0.6661573720397249
User 111792 does not improve AUC. Reverting changes.
Training on augumented user 39772 9/50 current_auc = 0.6669213139801375
User 39772 AUC after training: 0.66646294881589
User 39772 does not improve AUC. Reverting changes.
Training on augumented user 88128 10/50 current_auc = 0.6669213139801375
User 88128 AUC after training: 0.6663101604278074
User 88128 does not improve AUC. Reverting changes.
Training on augumented user 83559 11/50 current_auc = 0.6669213139801375
User 83559 AUC after training: 0.6666157372039725
User 83559 does not improve AUC. Reverting changes.
Training on augumented user 78023 12/50 current_auc = 0.6669213139801375
User 78023 AUC after training: 0.66646294881589
User 78023 does not improve AUC. Reverting changes.
Training on augumented user 63566 13/50 current_auc = 0.6669213139801375
User 63566 AUC after training: 0.66646294881589
User 63566 does not improve AUC. Reverting changes.
Training on augumented user 128812 14/50 current_auc = 0.6669213139801375
User 128812 AUC after training: 0.6663101604278074
User 128812 does not improve AUC. Reverting changes.
Training on augumented user 80986 15/50 current_auc = 0.6669213139801375
User 80986 AUC after training: 0.665546218487395
User 80986 does not improve AUC. Reverting changes.
Training on augumented user 93745 16/50 current_auc = 0.6669213139801375
User 93745 AUC after training: 0.6630252100840336
User 93745 does not improve AUC. Reverting changes.
Training on augumented user 1815 17/50 current_auc = 0.6669213139801375
User 1815 AUC after training: 0.6663101604278074
User 1815 does not improve AUC. Reverting changes.
Training on augumented user 60648 18/50 current_auc = 0.6669213139801375
User 60648 AUC after training: 0.665546218487395
User 60648 does not improve AUC. Reverting changes.
Training on augumented user 22066 19/50 current_auc = 0.6669213139801375
User 22066 AUC after training: 0.6669213139801375
User 22066 does not improve AUC. Reverting changes.
Training on augumented user 62288 20/50 current_auc = 0.6669213139801375
User 62288 AUC after training: 0.6663101604278076
User 62288 does not improve AUC. Reverting changes.
Training on augumented user 83563 21/50 current_auc = 0.6669213139801375
User 83563 AUC after training: 0.6663101604278074
User 83563 does not improve AUC. Reverting changes.
Training on augumented user 122549 22/50 current_auc = 0.6669213139801375
User 122549 AUC after training: 0.6660045836516424
User 122549 does not improve AUC. Reverting changes.
Training on augumented user 115975 23/50 current_auc = 0.6669213139801375
User 115975 AUC after training: 0.6660045836516424
User 115975 does not improve AUC. Reverting changes.
Training on augumented user 77206 24/50 current_auc = 0.6669213139801375
User 77206 AUC after training: 0.6660045836516425
User 77206 does not improve AUC. Reverting changes.
Training on augumented user 17917 25/50 current_auc = 0.6669213139801375
User 17917 AUC after training: 0.6675324675324675
User 17917 improves AUC. Keeping the model.
Training on augumented user 77778 26/50 current_auc = 0.6675324675324675
User 77778 AUC after training: 0.6678380443086325
User 77778 improves AUC. Keeping the model.
Training on augumented user 2925 27/50 current_auc = 0.6678380443086325
User 2925 AUC after training: 0.665546218487395
User 2925 does not improve AUC. Reverting changes.
Training on augumented user 57087 28/50 current_auc = 0.6678380443086325
User 57087 AUC after training: 0.6695187165775401
User 57087 improves AUC. Keeping the model.
Training on augumented user 56979 29/50 current_auc = 0.6695187165775401
User 56979 AUC after training: 0.6696715049656226
User 56979 improves AUC. Keeping the model.
Training on augumented user 10721 30/50 current_auc = 0.6696715049656226
User 10721 AUC after training: 0.6734912146676852
User 10721 improves AUC. Keeping the model.
Training on augumented user 33831 31/50 current_auc = 0.6734912146676852
User 33831 AUC after training: 0.6737967914438503
User 33831 improves AUC. Keeping the model.
Training on augumented user 105111 32/50 current_auc = 0.6737967914438503
User 105111 AUC after training: 0.6716577540106952
User 105111 does not improve AUC. Reverting changes.
Training on augumented user 107667 33/50 current_auc = 0.6737967914438503
User 107667 AUC after training: 0.6737967914438503
User 107667 does not improve AUC. Reverting changes.
Training on augumented user 70885 34/50 current_auc = 0.6737967914438503
User 70885 AUC after training: 0.6725744843391902
User 70885 does not improve AUC. Reverting changes.
Training on augumented user 110791 35/50 current_auc = 0.6737967914438503
User 110791 AUC after training: 0.6745607333842627
User 110791 improves AUC. Keeping the model.
Training on augumented user 26535 36/50 current_auc = 0.6745607333842627
User 26535 AUC after training: 0.6711993888464477
User 26535 does not improve AUC. Reverting changes.
Training on augumented user 96892 37/50 current_auc = 0.6745607333842627
User 96892 AUC after training: 0.6704354469060352
User 96892 does not improve AUC. Reverting changes.
Training on augumented user 52456 38/50 current_auc = 0.6745607333842627
User 52456 AUC after training: 0.6759358288770053
User 52456 improves AUC. Keeping the model.
Training on augumented user 78183 39/50 current_auc = 0.6759358288770053
User 78183 AUC after training: 0.6748663101604278
User 78183 does not improve AUC. Reverting changes.
Training on augumented user 41926 40/50 current_auc = 0.6759358288770053
User 41926 AUC after training: 0.6765469824293353
User 41926 improves AUC. Keeping the model.
Training on augumented user 37611 41/50 current_auc = 0.6765469824293353
User 37611 AUC after training: 0.6750190985485103
User 37611 does not improve AUC. Reverting changes.
Training on augumented user 107744 42/50 current_auc = 0.6765469824293353
User 107744 AUC after training: 0.6765469824293353
User 107744 does not improve AUC. Reverting changes.
Training on augumented user 126540 43/50 current_auc = 0.6765469824293353
User 126540 AUC after training: 0.6727272727272727
User 126540 does not improve AUC. Reverting changes.
Training on augumented user 14094 44/50 current_auc = 0.6765469824293353
User 14094 AUC after training: 0.6754774637127579
User 14094 does not improve AUC. Reverting changes.
Training on augumented user 7078 45/50 current_auc = 0.6765469824293353
User 7078 AUC after training: 0.6750190985485103
User 7078 does not improve AUC. Reverting changes.
Training on augumented user 123812 46/50 current_auc = 0.6765469824293353
User 123812 AUC after training: 0.6763941940412528
User 123812 does not improve AUC. Reverting changes.
Training on augumented user 118691 47/50 current_auc = 0.6765469824293353
User 118691 AUC after training: 0.6745607333842627
User 118691 does not improve AUC. Reverting changes.
Training on augumented user 42417 48/50 current_auc = 0.6765469824293353
User 42417 AUC after training: 0.6750190985485103
User 42417 does not improve AUC. Reverting changes.
Training on augumented user 27561 49/50 current_auc = 0.6765469824293353
User 27561 AUC after training: 0.674025974025974
User 27561 does not improve AUC. Reverting changes.
[2024-12-02 18:20:11.311086] start test user 125731 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:11.747422] start test user 125731 79/567 recall augumented users by random, augumented_users = [76176, 69098, 87673, 81195, 37643, 132672, 6713, 99313, 63420, 91635, 107430, 8581, 20899, 41178, 108252, 60112, 44991, 70217, 28045, 66318, 128613, 116600, 130491, 10088, 80030, 86796, 136331, 113157, 43476, 71135, 131106, 124997, 87145, 82179, 118344, 60989, 97198, 41652, 119555, 30448, 52036, 58796, 15969, 101442, 77284, 72816, 37113, 57416, 15778, 95069]
[2024-12-02 18:20:11.761869] user = 125731 Cloud 79/567
[2024-12-02 18:20:11.772120] user = 125731 Local 79/567
[2024-12-02 18:20:11.804856] user = 125731 Local+ 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:14.217033] user = 125731 MPDA- 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45714285714285713
Training on augumented user 76176 0/50 current_auc = 0.45714285714285713
User 76176 AUC after training: 0.45714285714285713
User 76176 does not improve AUC. Reverting changes.
Training on augumented user 69098 1/50 current_auc = 0.45714285714285713
User 69098 AUC after training: 0.45714285714285713
User 69098 does not improve AUC. Reverting changes.
Training on augumented user 87673 2/50 current_auc = 0.45714285714285713
User 87673 AUC after training: 0.46530612244897956
User 87673 improves AUC. Keeping the model.
Training on augumented user 81195 3/50 current_auc = 0.46530612244897956
User 81195 AUC after training: 0.46122448979591835
User 81195 does not improve AUC. Reverting changes.
Training on augumented user 37643 4/50 current_auc = 0.46530612244897956
User 37643 AUC after training: 0.46122448979591835
User 37643 does not improve AUC. Reverting changes.
Training on augumented user 132672 5/50 current_auc = 0.46530612244897956
User 132672 AUC after training: 0.46122448979591835
User 132672 does not improve AUC. Reverting changes.
Training on augumented user 6713 6/50 current_auc = 0.46530612244897956
User 6713 AUC after training: 0.46530612244897956
User 6713 does not improve AUC. Reverting changes.
Training on augumented user 99313 7/50 current_auc = 0.46530612244897956
User 99313 AUC after training: 0.46122448979591835
User 99313 does not improve AUC. Reverting changes.
Training on augumented user 63420 8/50 current_auc = 0.46530612244897956
User 63420 AUC after training: 0.46122448979591835
User 63420 does not improve AUC. Reverting changes.
Training on augumented user 91635 9/50 current_auc = 0.46530612244897956
User 91635 AUC after training: 0.46122448979591835
User 91635 does not improve AUC. Reverting changes.
Training on augumented user 107430 10/50 current_auc = 0.46530612244897956
User 107430 AUC after training: 0.46122448979591835
User 107430 does not improve AUC. Reverting changes.
Training on augumented user 8581 11/50 current_auc = 0.46530612244897956
User 8581 AUC after training: 0.46122448979591835
User 8581 does not improve AUC. Reverting changes.
Training on augumented user 20899 12/50 current_auc = 0.46530612244897956
User 20899 AUC after training: 0.4693877551020408
User 20899 improves AUC. Keeping the model.
Training on augumented user 41178 13/50 current_auc = 0.4693877551020408
User 41178 AUC after training: 0.4693877551020408
User 41178 does not improve AUC. Reverting changes.
Training on augumented user 108252 14/50 current_auc = 0.4693877551020408
User 108252 AUC after training: 0.4693877551020408
User 108252 does not improve AUC. Reverting changes.
Training on augumented user 60112 15/50 current_auc = 0.4693877551020408
User 60112 AUC after training: 0.4693877551020408
User 60112 does not improve AUC. Reverting changes.
Training on augumented user 44991 16/50 current_auc = 0.4693877551020408
User 44991 AUC after training: 0.4571428571428572
User 44991 does not improve AUC. Reverting changes.
Training on augumented user 70217 17/50 current_auc = 0.4693877551020408
User 70217 AUC after training: 0.4693877551020408
User 70217 does not improve AUC. Reverting changes.
Training on augumented user 28045 18/50 current_auc = 0.4693877551020408
User 28045 AUC after training: 0.4693877551020408
User 28045 does not improve AUC. Reverting changes.
Training on augumented user 66318 19/50 current_auc = 0.4693877551020408
User 66318 AUC after training: 0.4693877551020408
User 66318 does not improve AUC. Reverting changes.
Training on augumented user 128613 20/50 current_auc = 0.4693877551020408
User 128613 AUC after training: 0.4693877551020408
User 128613 does not improve AUC. Reverting changes.
Training on augumented user 116600 21/50 current_auc = 0.4693877551020408
User 116600 AUC after training: 0.4693877551020408
User 116600 does not improve AUC. Reverting changes.
Training on augumented user 130491 22/50 current_auc = 0.4693877551020408
User 130491 AUC after training: 0.46122448979591835
User 130491 does not improve AUC. Reverting changes.
Training on augumented user 10088 23/50 current_auc = 0.4693877551020408
User 10088 AUC after training: 0.4693877551020408
User 10088 does not improve AUC. Reverting changes.
Training on augumented user 80030 24/50 current_auc = 0.4693877551020408
User 80030 AUC after training: 0.4693877551020408
User 80030 does not improve AUC. Reverting changes.
Training on augumented user 86796 25/50 current_auc = 0.4693877551020408
User 86796 AUC after training: 0.4693877551020408
User 86796 does not improve AUC. Reverting changes.
Training on augumented user 136331 26/50 current_auc = 0.4693877551020408
User 136331 AUC after training: 0.4693877551020408
User 136331 does not improve AUC. Reverting changes.
Training on augumented user 113157 27/50 current_auc = 0.4693877551020408
User 113157 AUC after training: 0.4693877551020408
User 113157 does not improve AUC. Reverting changes.
Training on augumented user 43476 28/50 current_auc = 0.4693877551020408
User 43476 AUC after training: 0.4693877551020408
User 43476 does not improve AUC. Reverting changes.
Training on augumented user 71135 29/50 current_auc = 0.4693877551020408
User 71135 AUC after training: 0.4530612244897959
User 71135 does not improve AUC. Reverting changes.
Training on augumented user 131106 30/50 current_auc = 0.4693877551020408
User 131106 AUC after training: 0.4693877551020408
User 131106 does not improve AUC. Reverting changes.
Training on augumented user 124997 31/50 current_auc = 0.4693877551020408
User 124997 AUC after training: 0.4693877551020408
User 124997 does not improve AUC. Reverting changes.
Training on augumented user 87145 32/50 current_auc = 0.4693877551020408
User 87145 AUC after training: 0.4693877551020408
User 87145 does not improve AUC. Reverting changes.
Training on augumented user 82179 33/50 current_auc = 0.4693877551020408
User 82179 AUC after training: 0.4693877551020408
User 82179 does not improve AUC. Reverting changes.
Training on augumented user 118344 34/50 current_auc = 0.4693877551020408
User 118344 AUC after training: 0.4693877551020408
User 118344 does not improve AUC. Reverting changes.
Training on augumented user 60989 35/50 current_auc = 0.4693877551020408
User 60989 AUC after training: 0.4693877551020408
User 60989 does not improve AUC. Reverting changes.
Training on augumented user 97198 36/50 current_auc = 0.4693877551020408
User 97198 AUC after training: 0.47346938775510206
User 97198 improves AUC. Keeping the model.
Training on augumented user 41652 37/50 current_auc = 0.47346938775510206
User 41652 AUC after training: 0.47346938775510206
User 41652 does not improve AUC. Reverting changes.
Training on augumented user 119555 38/50 current_auc = 0.47346938775510206
User 119555 AUC after training: 0.4693877551020408
User 119555 does not improve AUC. Reverting changes.
Training on augumented user 30448 39/50 current_auc = 0.47346938775510206
User 30448 AUC after training: 0.47346938775510206
User 30448 does not improve AUC. Reverting changes.
Training on augumented user 52036 40/50 current_auc = 0.47346938775510206
User 52036 AUC after training: 0.47346938775510206
User 52036 does not improve AUC. Reverting changes.
Training on augumented user 58796 41/50 current_auc = 0.47346938775510206
User 58796 AUC after training: 0.47346938775510206
User 58796 does not improve AUC. Reverting changes.
Training on augumented user 15969 42/50 current_auc = 0.47346938775510206
User 15969 AUC after training: 0.47346938775510206
User 15969 does not improve AUC. Reverting changes.
Training on augumented user 101442 43/50 current_auc = 0.47346938775510206
User 101442 AUC after training: 0.47346938775510206
User 101442 does not improve AUC. Reverting changes.
Training on augumented user 77284 44/50 current_auc = 0.47346938775510206
User 77284 AUC after training: 0.47346938775510206
User 77284 does not improve AUC. Reverting changes.
Training on augumented user 72816 45/50 current_auc = 0.47346938775510206
User 72816 AUC after training: 0.47346938775510206
User 72816 does not improve AUC. Reverting changes.
Training on augumented user 37113 46/50 current_auc = 0.47346938775510206
User 37113 AUC after training: 0.4693877551020408
User 37113 does not improve AUC. Reverting changes.
Training on augumented user 57416 47/50 current_auc = 0.47346938775510206
User 57416 AUC after training: 0.47346938775510206
User 57416 does not improve AUC. Reverting changes.
Training on augumented user 15778 48/50 current_auc = 0.47346938775510206
User 15778 AUC after training: 0.4693877551020408
User 15778 does not improve AUC. Reverting changes.
Training on augumented user 95069 49/50 current_auc = 0.47346938775510206
User 95069 AUC after training: 0.47346938775510206
User 95069 does not improve AUC. Reverting changes.
[2024-12-02 18:20:42.801649] start test user 125777 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:43.610286] start test user 125777 80/567 recall augumented users by random, augumented_users = [115841, 62290, 76932, 36863, 110322, 136048, 32292, 37130, 66755, 79987, 108034, 32368, 68670, 102363, 1685, 49881, 68685, 130583, 5203, 1582, 59573, 111177, 55682, 129391, 2555, 74953, 60791, 52772, 104056, 111129, 49529, 135466, 65529, 66088, 65400, 73117, 16853, 520, 20715, 78376, 43912, 21792, 6247, 91487, 19698, 77010, 120667, 49175, 27703, 101486]
[2024-12-02 18:20:43.629108] user = 125777 Cloud 80/567
[2024-12-02 18:20:43.673471] user = 125777 Local 80/567
[2024-12-02 18:20:43.887324] user = 125777 Local+ 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:47.067274] user = 125777 MPDA- 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7042428094708406
Training on augumented user 115841 0/50 current_auc = 0.7042428094708406
User 115841 AUC after training: 0.7044652788812966
User 115841 improves AUC. Keeping the model.
Training on augumented user 62290 1/50 current_auc = 0.7044652788812966
User 62290 AUC after training: 0.7042428094708406
User 62290 does not improve AUC. Reverting changes.
Training on augumented user 76932 2/50 current_auc = 0.7044652788812966
User 76932 AUC after training: 0.7046241856030511
User 76932 improves AUC. Keeping the model.
Training on augumented user 36863 3/50 current_auc = 0.7046241856030511
User 36863 AUC after training: 0.7043540441760685
User 36863 does not improve AUC. Reverting changes.
Training on augumented user 110322 4/50 current_auc = 0.7046241856030511
User 110322 AUC after training: 0.7045606229143493
User 110322 does not improve AUC. Reverting changes.
Training on augumented user 136048 5/50 current_auc = 0.7046241856030511
User 136048 AUC after training: 0.70476720165263
User 136048 improves AUC. Keeping the model.
Training on augumented user 32292 6/50 current_auc = 0.70476720165263
User 32292 AUC after training: 0.7045526775782616
User 32292 does not improve AUC. Reverting changes.
Training on augumented user 37130 7/50 current_auc = 0.70476720165263
User 37130 AUC after training: 0.7048546003495949
User 37130 improves AUC. Keeping the model.
Training on augumented user 66755 8/50 current_auc = 0.7048546003495949
User 66755 AUC after training: 0.704655966947402
User 66755 does not improve AUC. Reverting changes.
Training on augumented user 79987 9/50 current_auc = 0.7048546003495949
User 79987 AUC after training: 0.7048387096774194
User 79987 does not improve AUC. Reverting changes.
Training on augumented user 108034 10/50 current_auc = 0.7048546003495949
User 108034 AUC after training: 0.7048307643413316
User 108034 does not improve AUC. Reverting changes.
Training on augumented user 32368 11/50 current_auc = 0.7048546003495949
User 32368 AUC after training: 0.7047036389639283
User 32368 does not improve AUC. Reverting changes.
Training on augumented user 68670 12/50 current_auc = 0.7048546003495949
User 68670 AUC after training: 0.7047751469887177
User 68670 does not improve AUC. Reverting changes.
Training on augumented user 102363 13/50 current_auc = 0.7048546003495949
User 102363 AUC after training: 0.705243921817893
User 102363 improves AUC. Keeping the model.
Training on augumented user 1685 14/50 current_auc = 0.705243921817893
User 1685 AUC after training: 0.7053154298426824
User 1685 improves AUC. Keeping the model.
Training on augumented user 49881 15/50 current_auc = 0.7053154298426824
User 49881 AUC after training: 0.7053472111870333
User 49881 improves AUC. Keeping the model.
Training on augumented user 68685 16/50 current_auc = 0.7053472111870333
User 68685 AUC after training: 0.7054028285396472
User 68685 improves AUC. Keeping the model.
Training on augumented user 130583 17/50 current_auc = 0.7054028285396472
User 130583 AUC after training: 0.7055140632448753
User 130583 improves AUC. Keeping the model.
Training on augumented user 5203 18/50 current_auc = 0.7055140632448753
User 5203 AUC after training: 0.7053631018592086
User 5203 does not improve AUC. Reverting changes.
Training on augumented user 1582 19/50 current_auc = 0.7055140632448753
User 1582 AUC after training: 0.705522008580963
User 1582 improves AUC. Keeping the model.
Training on augumented user 59573 20/50 current_auc = 0.705522008580963
User 59573 AUC after training: 0.7054584458922613
User 59573 does not improve AUC. Reverting changes.
Training on augumented user 111177 21/50 current_auc = 0.705522008580963
User 111177 AUC after training: 0.704655966947402
User 111177 does not improve AUC. Reverting changes.
Training on augumented user 55682 22/50 current_auc = 0.705522008580963
User 55682 AUC after training: 0.705466391228349
User 55682 does not improve AUC. Reverting changes.
Training on augumented user 129391 23/50 current_auc = 0.705522008580963
User 129391 AUC after training: 0.7053472111870333
User 129391 does not improve AUC. Reverting changes.
Training on augumented user 2555 24/50 current_auc = 0.705522008580963
User 2555 AUC after training: 0.7052757031622438
User 2555 does not improve AUC. Reverting changes.
Training on augumented user 74953 25/50 current_auc = 0.705522008580963
User 74953 AUC after training: 0.7053472111870331
User 74953 does not improve AUC. Reverting changes.
Training on augumented user 60791 26/50 current_auc = 0.705522008580963
User 60791 AUC after training: 0.7044811695534722
User 60791 does not improve AUC. Reverting changes.
Training on augumented user 52772 27/50 current_auc = 0.705522008580963
User 52772 AUC after training: 0.705522008580963
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 104056 28/50 current_auc = 0.705522008580963
User 104056 AUC after training: 0.7054505005561735
User 104056 does not improve AUC. Reverting changes.
Training on augumented user 111129 29/50 current_auc = 0.705522008580963
User 111129 AUC after training: 0.7052757031622436
User 111129 does not improve AUC. Reverting changes.
Training on augumented user 49529 30/50 current_auc = 0.705522008580963
User 49529 AUC after training: 0.7046639122834897
User 49529 does not improve AUC. Reverting changes.
Training on augumented user 135466 31/50 current_auc = 0.705522008580963
User 135466 AUC after training: 0.7054187192118226
User 135466 does not improve AUC. Reverting changes.
Training on augumented user 65529 32/50 current_auc = 0.705522008580963
User 65529 AUC after training: 0.7042507548069283
User 65529 does not improve AUC. Reverting changes.
Training on augumented user 66088 33/50 current_auc = 0.705522008580963
User 66088 AUC after training: 0.7048307643413316
User 66088 does not improve AUC. Reverting changes.
Training on augumented user 65400 34/50 current_auc = 0.705522008580963
User 65400 AUC after training: 0.705410773875735
User 65400 does not improve AUC. Reverting changes.
Training on augumented user 73117 35/50 current_auc = 0.705522008580963
User 73117 AUC after training: 0.7048148736691562
User 73117 does not improve AUC. Reverting changes.
Training on augumented user 16853 36/50 current_auc = 0.705522008580963
User 16853 AUC after training: 0.7053869378674718
User 16853 does not improve AUC. Reverting changes.
Training on augumented user 520 37/50 current_auc = 0.705522008580963
User 520 AUC after training: 0.7054266645479105
User 520 does not improve AUC. Reverting changes.
Training on augumented user 20715 38/50 current_auc = 0.705522008580963
User 20715 AUC after training: 0.7052915938344192
User 20715 does not improve AUC. Reverting changes.
Training on augumented user 78376 39/50 current_auc = 0.705522008580963
User 78376 AUC after training: 0.7053948832035595
User 78376 does not improve AUC. Reverting changes.
Training on augumented user 43912 40/50 current_auc = 0.705522008580963
User 43912 AUC after training: 0.7052598124900683
User 43912 does not improve AUC. Reverting changes.
Training on augumented user 21792 41/50 current_auc = 0.705522008580963
User 21792 AUC after training: 0.7049976163991738
User 21792 does not improve AUC. Reverting changes.
Training on augumented user 6247 42/50 current_auc = 0.705522008580963
User 6247 AUC after training: 0.7043143174956301
User 6247 does not improve AUC. Reverting changes.
Training on augumented user 91487 43/50 current_auc = 0.705522008580963
User 91487 AUC after training: 0.7050293977435246
User 91487 does not improve AUC. Reverting changes.
Training on augumented user 19698 44/50 current_auc = 0.705522008580963
User 19698 AUC after training: 0.7052518671539807
User 19698 does not improve AUC. Reverting changes.
Training on augumented user 77010 45/50 current_auc = 0.705522008580963
User 77010 AUC after training: 0.7054346098839981
User 77010 does not improve AUC. Reverting changes.
Training on augumented user 120667 46/50 current_auc = 0.705522008580963
User 120667 AUC after training: 0.7051962498013665
User 120667 does not improve AUC. Reverting changes.
Training on augumented user 49175 47/50 current_auc = 0.705522008580963
User 49175 AUC after training: 0.7053313205148578
User 49175 does not improve AUC. Reverting changes.
Training on augumented user 27703 48/50 current_auc = 0.705522008580963
User 27703 AUC after training: 0.7054981725726999
User 27703 does not improve AUC. Reverting changes.
Training on augumented user 101486 49/50 current_auc = 0.705522008580963
User 101486 AUC after training: 0.7052200858096298
User 101486 does not improve AUC. Reverting changes.
[2024-12-02 18:21:18.126432] start test user 125794 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:18.772122] start test user 125794 81/567 recall augumented users by random, augumented_users = [6922, 70045, 43228, 41314, 46608, 77301, 79230, 110660, 46148, 136085, 81458, 46951, 2728, 10396, 106520, 53742, 118627, 26937, 104777, 82132, 89600, 21120, 104084, 71720, 84389, 31333, 88654, 41830, 38344, 111938, 128644, 111379, 55727, 61124, 95685, 39017, 114152, 42999, 11648, 39039, 59756, 26900, 60508, 111763, 47418, 102511, 20431, 16222, 69845, 13944]
[2024-12-02 18:21:18.802707] user = 125794 Cloud 81/567
[2024-12-02 18:21:18.901588] user = 125794 Local 81/567
[2024-12-02 18:21:20.259296] user = 125794 Local+ 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:22.708365] user = 125794 MPDA- 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5161029513231595
Training on augumented user 6922 0/50 current_auc = 0.5161029513231595
User 6922 AUC after training: 0.516932690300369
User 6922 improves AUC. Keeping the model.
Training on augumented user 70045 1/50 current_auc = 0.516932690300369
User 70045 AUC after training: 0.5171573744157328
User 70045 improves AUC. Keeping the model.
Training on augumented user 43228 2/50 current_auc = 0.5171573744157328
User 43228 AUC after training: 0.5173466752058425
User 43228 improves AUC. Keeping the model.
Training on augumented user 41314 3/50 current_auc = 0.5173466752058425
User 41314 AUC after training: 0.5174103651913
User 41314 improves AUC. Keeping the model.
Training on augumented user 46608 4/50 current_auc = 0.5174103651913
User 46608 AUC after training: 0.5172936002179612
User 46608 does not improve AUC. Reverting changes.
Training on augumented user 77301 5/50 current_auc = 0.5174103651913
User 77301 AUC after training: 0.5173360602082663
User 77301 does not improve AUC. Reverting changes.
Training on augumented user 79230 6/50 current_auc = 0.5174103651913
User 79230 AUC after training: 0.5172918310516986
User 79230 does not improve AUC. Reverting changes.
Training on augumented user 110660 7/50 current_auc = 0.5174103651913
User 110660 AUC after training: 0.5177606601113159
User 110660 improves AUC. Keeping the model.
Training on augumented user 46148 8/50 current_auc = 0.5177606601113159
User 46148 AUC after training: 0.5176863551282823
User 46148 does not improve AUC. Reverting changes.
Training on augumented user 136085 9/50 current_auc = 0.5177606601113159
User 136085 AUC after training: 0.5169397669654199
User 136085 does not improve AUC. Reverting changes.
Training on augumented user 81458 10/50 current_auc = 0.5177606601113159
User 81458 AUC after training: 0.517627972641613
User 81458 does not improve AUC. Reverting changes.
Training on augumented user 46951 11/50 current_auc = 0.5177606601113159
User 46951 AUC after training: 0.5170459169411823
User 46951 does not improve AUC. Reverting changes.
Training on augumented user 2728 12/50 current_auc = 0.5177606601113159
User 2728 AUC after training: 0.5185107866067038
User 2728 improves AUC. Keeping the model.
Training on augumented user 10396 13/50 current_auc = 0.5185107866067038
User 10396 AUC after training: 0.5183144091515433
User 10396 does not improve AUC. Reverting changes.
Training on augumented user 106520 14/50 current_auc = 0.5185107866067038
User 106520 AUC after training: 0.5171732969120972
User 106520 does not improve AUC. Reverting changes.
Training on augumented user 53742 15/50 current_auc = 0.5185107866067038
User 53742 AUC after training: 0.518714240726915
User 53742 improves AUC. Keeping the model.
Training on augumented user 118627 16/50 current_auc = 0.518714240726915
User 118627 AUC after training: 0.5186947798980253
User 118627 does not improve AUC. Reverting changes.
Training on augumented user 26937 17/50 current_auc = 0.518714240726915
User 26937 AUC after training: 0.5187460857196438
User 26937 improves AUC. Keeping the model.
Training on augumented user 104777 18/50 current_auc = 0.5187460857196438
User 104777 AUC after training: 0.5186363974113559
User 104777 does not improve AUC. Reverting changes.
Training on augumented user 82132 19/50 current_auc = 0.5187460857196438
User 82132 AUC after training: 0.5190928423071344
User 82132 improves AUC. Keeping the model.
Training on augumented user 89600 20/50 current_auc = 0.5190928423071344
User 89600 AUC after training: 0.5190963806396598
User 89600 improves AUC. Keeping the model.
Training on augumented user 21120 21/50 current_auc = 0.5190963806396598
User 21120 AUC after training: 0.5195864396944296
User 21120 improves AUC. Keeping the model.
Training on augumented user 104084 22/50 current_auc = 0.5195864396944296
User 104084 AUC after training: 0.5194802897186672
User 104084 does not improve AUC. Reverting changes.
Training on augumented user 71720 23/50 current_auc = 0.5195864396944296
User 71720 AUC after training: 0.5186505507414576
User 71720 does not improve AUC. Reverting changes.
Training on augumented user 84389 24/50 current_auc = 0.5195864396944296
User 84389 AUC after training: 0.5190521514830921
User 84389 does not improve AUC. Reverting changes.
Training on augumented user 31333 25/50 current_auc = 0.5195864396944296
User 31333 AUC after training: 0.5206886302760961
User 31333 improves AUC. Keeping the model.
Training on augumented user 88654 26/50 current_auc = 0.5206886302760961
User 88654 AUC after training: 0.519264451434617
User 88654 does not improve AUC. Reverting changes.
Training on augumented user 41830 27/50 current_auc = 0.5206886302760961
User 41830 AUC after training: 0.5203383353560802
User 41830 does not improve AUC. Reverting changes.
Training on augumented user 38344 28/50 current_auc = 0.5206886302760961
User 38344 AUC after training: 0.5206143252930624
User 38344 does not improve AUC. Reverting changes.
Training on augumented user 111938 29/50 current_auc = 0.5206886302760961
User 111938 AUC after training: 0.5205258669799271
User 111938 does not improve AUC. Reverting changes.
Training on augumented user 128644 30/50 current_auc = 0.5206886302760961
User 128644 AUC after training: 0.5203560270187071
User 128644 does not improve AUC. Reverting changes.
Training on augumented user 111379 31/50 current_auc = 0.5206886302760961
User 111379 AUC after training: 0.5202799528694108
User 111379 does not improve AUC. Reverting changes.
Training on augumented user 55727 32/50 current_auc = 0.5206886302760961
User 55727 AUC after training: 0.5206249402906387
User 55727 does not improve AUC. Reverting changes.
Training on augumented user 61124 33/50 current_auc = 0.5206886302760961
User 61124 AUC after training: 0.5205665578039693
User 61124 does not improve AUC. Reverting changes.
Training on augumented user 95685 34/50 current_auc = 0.5206886302760961
User 95685 AUC after training: 0.5205877877991217
User 95685 does not improve AUC. Reverting changes.
Training on augumented user 39017 35/50 current_auc = 0.5206886302760961
User 39017 AUC after training: 0.52097877354318
User 39017 improves AUC. Keeping the model.
Training on augumented user 114152 36/50 current_auc = 0.52097877354318
User 114152 AUC after training: 0.5208867768975193
User 114152 does not improve AUC. Reverting changes.
Training on augumented user 42999 37/50 current_auc = 0.52097877354318
User 42999 AUC after training: 0.5214281417739076
User 42999 improves AUC. Keeping the model.
Training on augumented user 11648 38/50 current_auc = 0.5214281417739076
User 11648 AUC after training: 0.521136229340561
User 11648 does not improve AUC. Reverting changes.
Training on augumented user 39039 39/50 current_auc = 0.5214281417739076
User 39039 AUC after training: 0.5222437274210157
User 39039 improves AUC. Keeping the model.
Training on augumented user 59756 40/50 current_auc = 0.5222437274210157
User 59756 AUC after training: 0.5224984873628453
User 59756 improves AUC. Keeping the model.
Training on augumented user 26900 41/50 current_auc = 0.5224984873628453
User 26900 AUC after training: 0.5229460864273103
User 26900 improves AUC. Keeping the model.
Training on augumented user 60508 42/50 current_auc = 0.5229460864273103
User 60508 AUC after training: 0.5213874509498653
User 60508 does not improve AUC. Reverting changes.
Training on augumented user 111763 43/50 current_auc = 0.5229460864273103
User 111763 AUC after training: 0.5228133989576073
User 111763 does not improve AUC. Reverting changes.
Training on augumented user 47418 44/50 current_auc = 0.5229460864273103
User 47418 AUC after training: 0.5226382514975992
User 47418 does not improve AUC. Reverting changes.
Training on augumented user 102511 45/50 current_auc = 0.5229460864273103
User 102511 AUC after training: 0.5231920005378266
User 102511 improves AUC. Keeping the model.
Training on augumented user 20431 46/50 current_auc = 0.5231920005378266
User 20431 AUC after training: 0.5228788581093274
User 20431 does not improve AUC. Reverting changes.
Training on augumented user 16222 47/50 current_auc = 0.5231920005378266
User 16222 AUC after training: 0.5209327752203496
User 16222 does not improve AUC. Reverting changes.
Training on augumented user 69845 48/50 current_auc = 0.5231920005378266
User 69845 AUC after training: 0.5226771731553788
User 69845 does not improve AUC. Reverting changes.
Training on augumented user 13944 49/50 current_auc = 0.5231920005378266
User 13944 AUC after training: 0.5232503830244959
User 13944 improves AUC. Keeping the model.
[2024-12-02 18:21:55.735066] start test user 125821 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:56.227599] start test user 125821 82/567 recall augumented users by random, augumented_users = [116666, 112381, 84683, 24735, 25050, 128934, 41796, 107947, 19497, 49988, 54149, 931, 69089, 43761, 118903, 14465, 20151, 27371, 71243, 78000, 29844, 134796, 79683, 124084, 77830, 37751, 130538, 65236, 24640, 67460, 87781, 34531, 93990, 23984, 118615, 115313, 123562, 105683, 50780, 90152, 29633, 52276, 17427, 13670, 10302, 69760, 21186, 58968, 40625, 69201]
[2024-12-02 18:21:56.243209] user = 125821 Cloud 82/567
[2024-12-02 18:21:56.268356] user = 125821 Local 82/567
[2024-12-02 18:21:56.461043] user = 125821 Local+ 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:59.068436] user = 125821 MPDA- 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5227864583333334
Training on augumented user 116666 0/50 current_auc = 0.5227864583333334
User 116666 AUC after training: 0.521484375
User 116666 does not improve AUC. Reverting changes.
Training on augumented user 112381 1/50 current_auc = 0.5227864583333334
User 112381 AUC after training: 0.5240885416666666
User 112381 improves AUC. Keeping the model.
Training on augumented user 84683 2/50 current_auc = 0.5240885416666666
User 84683 AUC after training: 0.525390625
User 84683 improves AUC. Keeping the model.
Training on augumented user 24735 3/50 current_auc = 0.525390625
User 24735 AUC after training: 0.525390625
User 24735 does not improve AUC. Reverting changes.
Training on augumented user 25050 4/50 current_auc = 0.525390625
User 25050 AUC after training: 0.5227864583333334
User 25050 does not improve AUC. Reverting changes.
Training on augumented user 128934 5/50 current_auc = 0.525390625
User 128934 AUC after training: 0.5240885416666666
User 128934 does not improve AUC. Reverting changes.
Training on augumented user 41796 6/50 current_auc = 0.525390625
User 41796 AUC after training: 0.5240885416666666
User 41796 does not improve AUC. Reverting changes.
Training on augumented user 107947 7/50 current_auc = 0.525390625
User 107947 AUC after training: 0.525390625
User 107947 does not improve AUC. Reverting changes.
Training on augumented user 19497 8/50 current_auc = 0.525390625
User 19497 AUC after training: 0.5240885416666666
User 19497 does not improve AUC. Reverting changes.
Training on augumented user 49988 9/50 current_auc = 0.525390625
User 49988 AUC after training: 0.525390625
User 49988 does not improve AUC. Reverting changes.
Training on augumented user 54149 10/50 current_auc = 0.525390625
User 54149 AUC after training: 0.525390625
User 54149 does not improve AUC. Reverting changes.
Training on augumented user 931 11/50 current_auc = 0.525390625
User 931 AUC after training: 0.525390625
User 931 does not improve AUC. Reverting changes.
Training on augumented user 69089 12/50 current_auc = 0.525390625
User 69089 AUC after training: 0.525390625
User 69089 does not improve AUC. Reverting changes.
Training on augumented user 43761 13/50 current_auc = 0.525390625
User 43761 AUC after training: 0.5240885416666666
User 43761 does not improve AUC. Reverting changes.
Training on augumented user 118903 14/50 current_auc = 0.525390625
User 118903 AUC after training: 0.525390625
User 118903 does not improve AUC. Reverting changes.
Training on augumented user 14465 15/50 current_auc = 0.525390625
User 14465 AUC after training: 0.5240885416666666
User 14465 does not improve AUC. Reverting changes.
Training on augumented user 20151 16/50 current_auc = 0.525390625
User 20151 AUC after training: 0.5240885416666666
User 20151 does not improve AUC. Reverting changes.
Training on augumented user 27371 17/50 current_auc = 0.525390625
User 27371 AUC after training: 0.525390625
User 27371 does not improve AUC. Reverting changes.
Training on augumented user 71243 18/50 current_auc = 0.525390625
User 71243 AUC after training: 0.525390625
User 71243 does not improve AUC. Reverting changes.
Training on augumented user 78000 19/50 current_auc = 0.525390625
User 78000 AUC after training: 0.521484375
User 78000 does not improve AUC. Reverting changes.
Training on augumented user 29844 20/50 current_auc = 0.525390625
User 29844 AUC after training: 0.525390625
User 29844 does not improve AUC. Reverting changes.
Training on augumented user 134796 21/50 current_auc = 0.525390625
User 134796 AUC after training: 0.525390625
User 134796 does not improve AUC. Reverting changes.
Training on augumented user 79683 22/50 current_auc = 0.525390625
User 79683 AUC after training: 0.5266927083333333
User 79683 improves AUC. Keeping the model.
Training on augumented user 124084 23/50 current_auc = 0.5266927083333333
User 124084 AUC after training: 0.5240885416666666
User 124084 does not improve AUC. Reverting changes.
Training on augumented user 77830 24/50 current_auc = 0.5266927083333333
User 77830 AUC after training: 0.525390625
User 77830 does not improve AUC. Reverting changes.
Training on augumented user 37751 25/50 current_auc = 0.5266927083333333
User 37751 AUC after training: 0.5266927083333333
User 37751 does not improve AUC. Reverting changes.
Training on augumented user 130538 26/50 current_auc = 0.5266927083333333
User 130538 AUC after training: 0.5266927083333334
User 130538 improves AUC. Keeping the model.
Training on augumented user 65236 27/50 current_auc = 0.5266927083333334
User 65236 AUC after training: 0.5266927083333334
User 65236 does not improve AUC. Reverting changes.
Training on augumented user 24640 28/50 current_auc = 0.5266927083333334
User 24640 AUC after training: 0.5266927083333334
User 24640 does not improve AUC. Reverting changes.
Training on augumented user 67460 29/50 current_auc = 0.5266927083333334
User 67460 AUC after training: 0.5266927083333333
User 67460 does not improve AUC. Reverting changes.
Training on augumented user 87781 30/50 current_auc = 0.5266927083333334
User 87781 AUC after training: 0.5240885416666666
User 87781 does not improve AUC. Reverting changes.
Training on augumented user 34531 31/50 current_auc = 0.5266927083333334
User 34531 AUC after training: 0.525390625
User 34531 does not improve AUC. Reverting changes.
Training on augumented user 93990 32/50 current_auc = 0.5266927083333334
User 93990 AUC after training: 0.5266927083333334
User 93990 does not improve AUC. Reverting changes.
Training on augumented user 23984 33/50 current_auc = 0.5266927083333334
User 23984 AUC after training: 0.5240885416666666
User 23984 does not improve AUC. Reverting changes.
Training on augumented user 118615 34/50 current_auc = 0.5266927083333334
User 118615 AUC after training: 0.5279947916666666
User 118615 improves AUC. Keeping the model.
Training on augumented user 115313 35/50 current_auc = 0.5279947916666666
User 115313 AUC after training: 0.529296875
User 115313 improves AUC. Keeping the model.
Training on augumented user 123562 36/50 current_auc = 0.529296875
User 123562 AUC after training: 0.5266927083333333
User 123562 does not improve AUC. Reverting changes.
Training on augumented user 105683 37/50 current_auc = 0.529296875
User 105683 AUC after training: 0.5279947916666666
User 105683 does not improve AUC. Reverting changes.
Training on augumented user 50780 38/50 current_auc = 0.529296875
User 50780 AUC after training: 0.5279947916666666
User 50780 does not improve AUC. Reverting changes.
Training on augumented user 90152 39/50 current_auc = 0.529296875
User 90152 AUC after training: 0.529296875
User 90152 does not improve AUC. Reverting changes.
Training on augumented user 29633 40/50 current_auc = 0.529296875
User 29633 AUC after training: 0.5279947916666667
User 29633 does not improve AUC. Reverting changes.
Training on augumented user 52276 41/50 current_auc = 0.529296875
User 52276 AUC after training: 0.5279947916666666
User 52276 does not improve AUC. Reverting changes.
Training on augumented user 17427 42/50 current_auc = 0.529296875
User 17427 AUC after training: 0.5266927083333333
User 17427 does not improve AUC. Reverting changes.
Training on augumented user 13670 43/50 current_auc = 0.529296875
User 13670 AUC after training: 0.529296875
User 13670 does not improve AUC. Reverting changes.
Training on augumented user 10302 44/50 current_auc = 0.529296875
User 10302 AUC after training: 0.5279947916666667
User 10302 does not improve AUC. Reverting changes.
Training on augumented user 69760 45/50 current_auc = 0.529296875
User 69760 AUC after training: 0.5279947916666666
User 69760 does not improve AUC. Reverting changes.
Training on augumented user 21186 46/50 current_auc = 0.529296875
User 21186 AUC after training: 0.5305989583333333
User 21186 improves AUC. Keeping the model.
Training on augumented user 58968 47/50 current_auc = 0.5305989583333333
User 58968 AUC after training: 0.5305989583333333
User 58968 does not improve AUC. Reverting changes.
Training on augumented user 40625 48/50 current_auc = 0.5305989583333333
User 40625 AUC after training: 0.529296875
User 40625 does not improve AUC. Reverting changes.
Training on augumented user 69201 49/50 current_auc = 0.5305989583333333
User 69201 AUC after training: 0.5319010416666666
User 69201 improves AUC. Keeping the model.
[2024-12-02 18:22:30.587503] start test user 125838 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:31.241213] start test user 125838 83/567 recall augumented users by random, augumented_users = [108585, 57523, 96159, 110122, 39552, 102937, 3023, 21778, 100258, 96700, 105771, 63102, 129549, 31352, 77088, 1302, 61884, 64649, 9041, 61953, 130620, 10618, 44250, 111675, 1068, 122739, 95763, 104881, 101627, 61045, 72466, 114583, 124239, 131550, 43957, 48751, 14785, 107080, 112602, 134849, 97785, 87287, 15378, 132672, 93745, 94623, 137439, 25516, 15379, 96323]
[2024-12-02 18:22:31.257718] user = 125838 Cloud 83/567
[2024-12-02 18:22:31.275211] user = 125838 Local 83/567
[2024-12-02 18:22:31.346623] user = 125838 Local+ 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:33.504416] user = 125838 MPDA- 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7106976744186047
Training on augumented user 108585 0/50 current_auc = 0.7106976744186047
User 108585 AUC after training: 0.7104651162790698
User 108585 does not improve AUC. Reverting changes.
Training on augumented user 57523 1/50 current_auc = 0.7106976744186047
User 57523 AUC after training: 0.7095348837209302
User 57523 does not improve AUC. Reverting changes.
Training on augumented user 96159 2/50 current_auc = 0.7106976744186047
User 96159 AUC after training: 0.7106976744186047
User 96159 does not improve AUC. Reverting changes.
Training on augumented user 110122 3/50 current_auc = 0.7106976744186047
User 110122 AUC after training: 0.7104651162790697
User 110122 does not improve AUC. Reverting changes.
Training on augumented user 39552 4/50 current_auc = 0.7106976744186047
User 39552 AUC after training: 0.7104651162790697
User 39552 does not improve AUC. Reverting changes.
Training on augumented user 102937 5/50 current_auc = 0.7106976744186047
User 102937 AUC after training: 0.7102325581395348
User 102937 does not improve AUC. Reverting changes.
Training on augumented user 3023 6/50 current_auc = 0.7106976744186047
User 3023 AUC after training: 0.7102325581395349
User 3023 does not improve AUC. Reverting changes.
Training on augumented user 21778 7/50 current_auc = 0.7106976744186047
User 21778 AUC after training: 0.7102325581395348
User 21778 does not improve AUC. Reverting changes.
Training on augumented user 100258 8/50 current_auc = 0.7106976744186047
User 100258 AUC after training: 0.7102325581395349
User 100258 does not improve AUC. Reverting changes.
Training on augumented user 96700 9/50 current_auc = 0.7106976744186047
User 96700 AUC after training: 0.7095348837209302
User 96700 does not improve AUC. Reverting changes.
Training on augumented user 105771 10/50 current_auc = 0.7106976744186047
User 105771 AUC after training: 0.7093023255813953
User 105771 does not improve AUC. Reverting changes.
Training on augumented user 63102 11/50 current_auc = 0.7106976744186047
User 63102 AUC after training: 0.7097674418604651
User 63102 does not improve AUC. Reverting changes.
Training on augumented user 129549 12/50 current_auc = 0.7106976744186047
User 129549 AUC after training: 0.71
User 129549 does not improve AUC. Reverting changes.
Training on augumented user 31352 13/50 current_auc = 0.7106976744186047
User 31352 AUC after training: 0.7104651162790697
User 31352 does not improve AUC. Reverting changes.
Training on augumented user 77088 14/50 current_auc = 0.7106976744186047
User 77088 AUC after training: 0.7104651162790697
User 77088 does not improve AUC. Reverting changes.
Training on augumented user 1302 15/50 current_auc = 0.7106976744186047
User 1302 AUC after training: 0.7102325581395349
User 1302 does not improve AUC. Reverting changes.
Training on augumented user 61884 16/50 current_auc = 0.7106976744186047
User 61884 AUC after training: 0.7106976744186047
User 61884 does not improve AUC. Reverting changes.
Training on augumented user 64649 17/50 current_auc = 0.7106976744186047
User 64649 AUC after training: 0.7104651162790698
User 64649 does not improve AUC. Reverting changes.
Training on augumented user 9041 18/50 current_auc = 0.7106976744186047
User 9041 AUC after training: 0.7102325581395348
User 9041 does not improve AUC. Reverting changes.
Training on augumented user 61953 19/50 current_auc = 0.7106976744186047
User 61953 AUC after training: 0.7106976744186047
User 61953 does not improve AUC. Reverting changes.
Training on augumented user 130620 20/50 current_auc = 0.7106976744186047
User 130620 AUC after training: 0.7102325581395349
User 130620 does not improve AUC. Reverting changes.
Training on augumented user 10618 21/50 current_auc = 0.7106976744186047
User 10618 AUC after training: 0.7106976744186047
User 10618 does not improve AUC. Reverting changes.
Training on augumented user 44250 22/50 current_auc = 0.7106976744186047
User 44250 AUC after training: 0.7106976744186047
User 44250 does not improve AUC. Reverting changes.
Training on augumented user 111675 23/50 current_auc = 0.7106976744186047
User 111675 AUC after training: 0.7104651162790697
User 111675 does not improve AUC. Reverting changes.
Training on augumented user 1068 24/50 current_auc = 0.7106976744186047
User 1068 AUC after training: 0.7104651162790697
User 1068 does not improve AUC. Reverting changes.
Training on augumented user 122739 25/50 current_auc = 0.7106976744186047
User 122739 AUC after training: 0.709767441860465
User 122739 does not improve AUC. Reverting changes.
Training on augumented user 95763 26/50 current_auc = 0.7106976744186047
User 95763 AUC after training: 0.7102325581395348
User 95763 does not improve AUC. Reverting changes.
Training on augumented user 104881 27/50 current_auc = 0.7106976744186047
User 104881 AUC after training: 0.71
User 104881 does not improve AUC. Reverting changes.
Training on augumented user 101627 28/50 current_auc = 0.7106976744186047
User 101627 AUC after training: 0.7104651162790698
User 101627 does not improve AUC. Reverting changes.
Training on augumented user 61045 29/50 current_auc = 0.7106976744186047
User 61045 AUC after training: 0.709767441860465
User 61045 does not improve AUC. Reverting changes.
Training on augumented user 72466 30/50 current_auc = 0.7106976744186047
User 72466 AUC after training: 0.7102325581395349
User 72466 does not improve AUC. Reverting changes.
Training on augumented user 114583 31/50 current_auc = 0.7106976744186047
User 114583 AUC after training: 0.7104651162790697
User 114583 does not improve AUC. Reverting changes.
Training on augumented user 124239 32/50 current_auc = 0.7106976744186047
User 124239 AUC after training: 0.7102325581395349
User 124239 does not improve AUC. Reverting changes.
Training on augumented user 131550 33/50 current_auc = 0.7106976744186047
User 131550 AUC after training: 0.7104651162790697
User 131550 does not improve AUC. Reverting changes.
Training on augumented user 43957 34/50 current_auc = 0.7106976744186047
User 43957 AUC after training: 0.7104651162790698
User 43957 does not improve AUC. Reverting changes.
Training on augumented user 48751 35/50 current_auc = 0.7106976744186047
User 48751 AUC after training: 0.7097674418604651
User 48751 does not improve AUC. Reverting changes.
Training on augumented user 14785 36/50 current_auc = 0.7106976744186047
User 14785 AUC after training: 0.7106976744186045
User 14785 does not improve AUC. Reverting changes.
Training on augumented user 107080 37/50 current_auc = 0.7106976744186047
User 107080 AUC after training: 0.7106976744186045
User 107080 does not improve AUC. Reverting changes.
Training on augumented user 112602 38/50 current_auc = 0.7106976744186047
User 112602 AUC after training: 0.7086046511627907
User 112602 does not improve AUC. Reverting changes.
Training on augumented user 134849 39/50 current_auc = 0.7106976744186047
User 134849 AUC after training: 0.7104651162790698
User 134849 does not improve AUC. Reverting changes.
Training on augumented user 97785 40/50 current_auc = 0.7106976744186047
User 97785 AUC after training: 0.7102325581395349
User 97785 does not improve AUC. Reverting changes.
Training on augumented user 87287 41/50 current_auc = 0.7106976744186047
User 87287 AUC after training: 0.7095348837209302
User 87287 does not improve AUC. Reverting changes.
Training on augumented user 15378 42/50 current_auc = 0.7106976744186047
User 15378 AUC after training: 0.71
User 15378 does not improve AUC. Reverting changes.
Training on augumented user 132672 43/50 current_auc = 0.7106976744186047
User 132672 AUC after training: 0.7104651162790697
User 132672 does not improve AUC. Reverting changes.
Training on augumented user 93745 44/50 current_auc = 0.7106976744186047
User 93745 AUC after training: 0.7104651162790698
User 93745 does not improve AUC. Reverting changes.
Training on augumented user 94623 45/50 current_auc = 0.7106976744186047
User 94623 AUC after training: 0.71
User 94623 does not improve AUC. Reverting changes.
Training on augumented user 137439 46/50 current_auc = 0.7106976744186047
User 137439 AUC after training: 0.7102325581395349
User 137439 does not improve AUC. Reverting changes.
Training on augumented user 25516 47/50 current_auc = 0.7106976744186047
User 25516 AUC after training: 0.7100000000000001
User 25516 does not improve AUC. Reverting changes.
Training on augumented user 15379 48/50 current_auc = 0.7106976744186047
User 15379 AUC after training: 0.7109302325581396
User 15379 improves AUC. Keeping the model.
Training on augumented user 96323 49/50 current_auc = 0.7109302325581396
User 96323 AUC after training: 0.71
User 96323 does not improve AUC. Reverting changes.
[2024-12-02 18:23:06.945602] start test user 125846 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:07.382700] start test user 125846 84/567 recall augumented users by random, augumented_users = [112997, 44212, 71176, 113059, 123, 80527, 80323, 85913, 75865, 41457, 43086, 75351, 70298, 51558, 57017, 4010, 9478, 987, 76000, 63199, 61368, 125825, 132422, 35993, 99915, 23793, 506, 66130, 11421, 110881, 113138, 109854, 1083, 129804, 34610, 40373, 88376, 46700, 98830, 28022, 71202, 110717, 35351, 30612, 81597, 70747, 20320, 64875, 29317, 23897]
[2024-12-02 18:23:07.397963] user = 125846 Cloud 84/567
[2024-12-02 18:23:07.426639] user = 125846 Local 84/567
[2024-12-02 18:23:07.556225] user = 125846 Local+ 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:10.083679] user = 125846 MPDA- 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6957403651115619
Training on augumented user 112997 0/50 current_auc = 0.6957403651115619
User 112997 AUC after training: 0.6954505940307156
User 112997 does not improve AUC. Reverting changes.
Training on augumented user 44212 1/50 current_auc = 0.6957403651115619
User 44212 AUC after training: 0.6963199072732541
User 44212 improves AUC. Keeping the model.
Training on augumented user 71176 2/50 current_auc = 0.6963199072732541
User 71176 AUC after training: 0.6945812807881774
User 71176 does not improve AUC. Reverting changes.
Training on augumented user 113059 3/50 current_auc = 0.6963199072732541
User 113059 AUC after training: 0.6957403651115618
User 113059 does not improve AUC. Reverting changes.
Training on augumented user 123 4/50 current_auc = 0.6963199072732541
User 123 AUC after training: 0.6968994494349463
User 123 improves AUC. Keeping the model.
Training on augumented user 80527 5/50 current_auc = 0.6968994494349463
User 80527 AUC after training: 0.6966096783541003
User 80527 does not improve AUC. Reverting changes.
Training on augumented user 80323 6/50 current_auc = 0.6968994494349463
User 80323 AUC after training: 0.6954505940307156
User 80323 does not improve AUC. Reverting changes.
Training on augumented user 85913 7/50 current_auc = 0.6968994494349463
User 85913 AUC after training: 0.6960301361924079
User 85913 does not improve AUC. Reverting changes.
Training on augumented user 75865 8/50 current_auc = 0.6968994494349463
User 75865 AUC after training: 0.6948710518690234
User 75865 does not improve AUC. Reverting changes.
Training on augumented user 41457 9/50 current_auc = 0.6968994494349463
User 41457 AUC after training: 0.6963199072732541
User 41457 does not improve AUC. Reverting changes.
Training on augumented user 43086 10/50 current_auc = 0.6968994494349463
User 43086 AUC after training: 0.6963199072732541
User 43086 does not improve AUC. Reverting changes.
Training on augumented user 75351 11/50 current_auc = 0.6968994494349463
User 75351 AUC after training: 0.6963199072732542
User 75351 does not improve AUC. Reverting changes.
Training on augumented user 70298 12/50 current_auc = 0.6968994494349463
User 70298 AUC after training: 0.6945812807881774
User 70298 does not improve AUC. Reverting changes.
Training on augumented user 51558 13/50 current_auc = 0.6968994494349463
User 51558 AUC after training: 0.6954505940307157
User 51558 does not improve AUC. Reverting changes.
Training on augumented user 57017 14/50 current_auc = 0.6968994494349463
User 57017 AUC after training: 0.6948710518690235
User 57017 does not improve AUC. Reverting changes.
Training on augumented user 4010 15/50 current_auc = 0.6968994494349463
User 4010 AUC after training: 0.6968994494349464
User 4010 improves AUC. Keeping the model.
Training on augumented user 9478 16/50 current_auc = 0.6968994494349464
User 9478 AUC after training: 0.6980585337583309
User 9478 improves AUC. Keeping the model.
Training on augumented user 987 17/50 current_auc = 0.6980585337583309
User 987 AUC after training: 0.6971892205157925
User 987 does not improve AUC. Reverting changes.
Training on augumented user 76000 18/50 current_auc = 0.6980585337583309
User 76000 AUC after training: 0.6977687626774848
User 76000 does not improve AUC. Reverting changes.
Training on augumented user 63199 19/50 current_auc = 0.6980585337583309
User 63199 AUC after training: 0.6963199072732541
User 63199 does not improve AUC. Reverting changes.
Training on augumented user 61368 20/50 current_auc = 0.6980585337583309
User 61368 AUC after training: 0.6919733410605621
User 61368 does not improve AUC. Reverting changes.
Training on augumented user 125825 21/50 current_auc = 0.6980585337583309
User 125825 AUC after training: 0.6974789915966386
User 125825 does not improve AUC. Reverting changes.
Training on augumented user 132422 22/50 current_auc = 0.6980585337583309
User 132422 AUC after training: 0.6974789915966387
User 132422 does not improve AUC. Reverting changes.
Training on augumented user 35993 23/50 current_auc = 0.6980585337583309
User 35993 AUC after training: 0.6977687626774848
User 35993 does not improve AUC. Reverting changes.
Training on augumented user 99915 24/50 current_auc = 0.6980585337583309
User 99915 AUC after training: 0.6971892205157926
User 99915 does not improve AUC. Reverting changes.
Training on augumented user 23793 25/50 current_auc = 0.6980585337583309
User 23793 AUC after training: 0.6974789915966386
User 23793 does not improve AUC. Reverting changes.
Training on augumented user 506 26/50 current_auc = 0.6980585337583309
User 506 AUC after training: 0.6974789915966386
User 506 does not improve AUC. Reverting changes.
Training on augumented user 66130 27/50 current_auc = 0.6980585337583309
User 66130 AUC after training: 0.6980585337583309
User 66130 does not improve AUC. Reverting changes.
Training on augumented user 11421 28/50 current_auc = 0.6980585337583309
User 11421 AUC after training: 0.6974789915966386
User 11421 does not improve AUC. Reverting changes.
Training on augumented user 110881 29/50 current_auc = 0.6980585337583309
User 110881 AUC after training: 0.6966096783541003
User 110881 does not improve AUC. Reverting changes.
Training on augumented user 113138 30/50 current_auc = 0.6980585337583309
User 113138 AUC after training: 0.6977687626774848
User 113138 does not improve AUC. Reverting changes.
Training on augumented user 109854 31/50 current_auc = 0.6980585337583309
User 109854 AUC after training: 0.6971892205157926
User 109854 does not improve AUC. Reverting changes.
Training on augumented user 1083 32/50 current_auc = 0.6980585337583309
User 1083 AUC after training: 0.6966096783541003
User 1083 does not improve AUC. Reverting changes.
Training on augumented user 129804 33/50 current_auc = 0.6980585337583309
User 129804 AUC after training: 0.6977687626774848
User 129804 does not improve AUC. Reverting changes.
Training on augumented user 34610 34/50 current_auc = 0.6980585337583309
User 34610 AUC after training: 0.6971892205157926
User 34610 does not improve AUC. Reverting changes.
Training on augumented user 40373 35/50 current_auc = 0.6980585337583309
User 40373 AUC after training: 0.6966096783541004
User 40373 does not improve AUC. Reverting changes.
Training on augumented user 88376 36/50 current_auc = 0.6980585337583309
User 88376 AUC after training: 0.6974789915966386
User 88376 does not improve AUC. Reverting changes.
Training on augumented user 46700 37/50 current_auc = 0.6980585337583309
User 46700 AUC after training: 0.6971892205157925
User 46700 does not improve AUC. Reverting changes.
Training on augumented user 98830 38/50 current_auc = 0.6980585337583309
User 98830 AUC after training: 0.6977687626774848
User 98830 does not improve AUC. Reverting changes.
Training on augumented user 28022 39/50 current_auc = 0.6980585337583309
User 28022 AUC after training: 0.6971892205157926
User 28022 does not improve AUC. Reverting changes.
Training on augumented user 71202 40/50 current_auc = 0.6980585337583309
User 71202 AUC after training: 0.6974789915966386
User 71202 does not improve AUC. Reverting changes.
Training on augumented user 110717 41/50 current_auc = 0.6980585337583309
User 110717 AUC after training: 0.698348304839177
User 110717 improves AUC. Keeping the model.
Training on augumented user 35351 42/50 current_auc = 0.698348304839177
User 35351 AUC after training: 0.6974789915966386
User 35351 does not improve AUC. Reverting changes.
Training on augumented user 30612 43/50 current_auc = 0.698348304839177
User 30612 AUC after training: 0.6977687626774848
User 30612 does not improve AUC. Reverting changes.
Training on augumented user 81597 44/50 current_auc = 0.698348304839177
User 81597 AUC after training: 0.6977687626774848
User 81597 does not improve AUC. Reverting changes.
Training on augumented user 70747 45/50 current_auc = 0.698348304839177
User 70747 AUC after training: 0.6954505940307157
User 70747 does not improve AUC. Reverting changes.
Training on augumented user 20320 46/50 current_auc = 0.698348304839177
User 20320 AUC after training: 0.6974789915966387
User 20320 does not improve AUC. Reverting changes.
Training on augumented user 64875 47/50 current_auc = 0.698348304839177
User 64875 AUC after training: 0.6974789915966386
User 64875 does not improve AUC. Reverting changes.
Training on augumented user 29317 48/50 current_auc = 0.698348304839177
User 29317 AUC after training: 0.6974789915966386
User 29317 does not improve AUC. Reverting changes.
Training on augumented user 23897 49/50 current_auc = 0.698348304839177
User 23897 AUC after training: 0.6974789915966386
User 23897 does not improve AUC. Reverting changes.
[2024-12-02 18:23:45.071669] start test user 125855 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:45.620072] start test user 125855 85/567 recall augumented users by random, augumented_users = [15097, 7227, 132779, 31429, 5081, 132568, 17032, 58819, 106858, 32053, 83904, 75505, 64676, 66699, 109538, 97033, 34553, 68710, 124118, 127320, 65591, 50091, 106392, 101160, 22892, 107324, 124787, 7, 89697, 119396, 116050, 49852, 118519, 114614, 2567, 2196, 106010, 31994, 5556, 43245, 35861, 6589, 98414, 62582, 89189, 51795, 102875, 13018, 75730, 117010]
[2024-12-02 18:23:45.649650] user = 125855 Cloud 85/567
[2024-12-02 18:23:45.662545] user = 125855 Local 85/567
[2024-12-02 18:23:45.760493] user = 125855 Local+ 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:48.522395] user = 125855 MPDA- 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5428571428571428
Training on augumented user 15097 0/50 current_auc = 0.5428571428571428
User 15097 AUC after training: 0.5428571428571428
User 15097 does not improve AUC. Reverting changes.
Training on augumented user 7227 1/50 current_auc = 0.5428571428571428
User 7227 AUC after training: 0.5428571428571428
User 7227 does not improve AUC. Reverting changes.
Training on augumented user 132779 2/50 current_auc = 0.5428571428571428
User 132779 AUC after training: 0.5428571428571428
User 132779 does not improve AUC. Reverting changes.
Training on augumented user 31429 3/50 current_auc = 0.5428571428571428
User 31429 AUC after training: 0.5428571428571428
User 31429 does not improve AUC. Reverting changes.
Training on augumented user 5081 4/50 current_auc = 0.5428571428571428
User 5081 AUC after training: 0.5428571428571428
User 5081 does not improve AUC. Reverting changes.
Training on augumented user 132568 5/50 current_auc = 0.5428571428571428
User 132568 AUC after training: 0.5428571428571428
User 132568 does not improve AUC. Reverting changes.
Training on augumented user 17032 6/50 current_auc = 0.5428571428571428
User 17032 AUC after training: 0.5214285714285714
User 17032 does not improve AUC. Reverting changes.
Training on augumented user 58819 7/50 current_auc = 0.5428571428571428
User 58819 AUC after training: 0.5428571428571428
User 58819 does not improve AUC. Reverting changes.
Training on augumented user 106858 8/50 current_auc = 0.5428571428571428
User 106858 AUC after training: 0.5428571428571428
User 106858 does not improve AUC. Reverting changes.
Training on augumented user 32053 9/50 current_auc = 0.5428571428571428
User 32053 AUC after training: 0.5428571428571428
User 32053 does not improve AUC. Reverting changes.
Training on augumented user 83904 10/50 current_auc = 0.5428571428571428
User 83904 AUC after training: 0.5428571428571428
User 83904 does not improve AUC. Reverting changes.
Training on augumented user 75505 11/50 current_auc = 0.5428571428571428
User 75505 AUC after training: 0.5428571428571428
User 75505 does not improve AUC. Reverting changes.
Training on augumented user 64676 12/50 current_auc = 0.5428571428571428
User 64676 AUC after training: 0.5428571428571428
User 64676 does not improve AUC. Reverting changes.
Training on augumented user 66699 13/50 current_auc = 0.5428571428571428
User 66699 AUC after training: 0.5428571428571428
User 66699 does not improve AUC. Reverting changes.
Training on augumented user 109538 14/50 current_auc = 0.5428571428571428
User 109538 AUC after training: 0.5428571428571428
User 109538 does not improve AUC. Reverting changes.
Training on augumented user 97033 15/50 current_auc = 0.5428571428571428
User 97033 AUC after training: 0.5428571428571428
User 97033 does not improve AUC. Reverting changes.
Training on augumented user 34553 16/50 current_auc = 0.5428571428571428
User 34553 AUC after training: 0.5428571428571428
User 34553 does not improve AUC. Reverting changes.
Training on augumented user 68710 17/50 current_auc = 0.5428571428571428
User 68710 AUC after training: 0.5214285714285714
User 68710 does not improve AUC. Reverting changes.
Training on augumented user 124118 18/50 current_auc = 0.5428571428571428
User 124118 AUC after training: 0.5428571428571428
User 124118 does not improve AUC. Reverting changes.
Training on augumented user 127320 19/50 current_auc = 0.5428571428571428
User 127320 AUC after training: 0.5428571428571428
User 127320 does not improve AUC. Reverting changes.
Training on augumented user 65591 20/50 current_auc = 0.5428571428571428
User 65591 AUC after training: 0.5428571428571428
User 65591 does not improve AUC. Reverting changes.
Training on augumented user 50091 21/50 current_auc = 0.5428571428571428
User 50091 AUC after training: 0.5428571428571428
User 50091 does not improve AUC. Reverting changes.
Training on augumented user 106392 22/50 current_auc = 0.5428571428571428
User 106392 AUC after training: 0.5428571428571428
User 106392 does not improve AUC. Reverting changes.
Training on augumented user 101160 23/50 current_auc = 0.5428571428571428
User 101160 AUC after training: 0.5428571428571428
User 101160 does not improve AUC. Reverting changes.
Training on augumented user 22892 24/50 current_auc = 0.5428571428571428
User 22892 AUC after training: 0.5428571428571428
User 22892 does not improve AUC. Reverting changes.
Training on augumented user 107324 25/50 current_auc = 0.5428571428571428
User 107324 AUC after training: 0.5428571428571428
User 107324 does not improve AUC. Reverting changes.
Training on augumented user 124787 26/50 current_auc = 0.5428571428571428
User 124787 AUC after training: 0.5428571428571428
User 124787 does not improve AUC. Reverting changes.
Training on augumented user 7 27/50 current_auc = 0.5428571428571428
User 7 AUC after training: 0.5428571428571428
User 7 does not improve AUC. Reverting changes.
Training on augumented user 89697 28/50 current_auc = 0.5428571428571428
User 89697 AUC after training: 0.5428571428571428
User 89697 does not improve AUC. Reverting changes.
Training on augumented user 119396 29/50 current_auc = 0.5428571428571428
User 119396 AUC after training: 0.5428571428571428
User 119396 does not improve AUC. Reverting changes.
Training on augumented user 116050 30/50 current_auc = 0.5428571428571428
User 116050 AUC after training: 0.5428571428571428
User 116050 does not improve AUC. Reverting changes.
Training on augumented user 49852 31/50 current_auc = 0.5428571428571428
User 49852 AUC after training: 0.5428571428571428
User 49852 does not improve AUC. Reverting changes.
Training on augumented user 118519 32/50 current_auc = 0.5428571428571428
User 118519 AUC after training: 0.5428571428571428
User 118519 does not improve AUC. Reverting changes.
Training on augumented user 114614 33/50 current_auc = 0.5428571428571428
User 114614 AUC after training: 0.5214285714285714
User 114614 does not improve AUC. Reverting changes.
Training on augumented user 2567 34/50 current_auc = 0.5428571428571428
User 2567 AUC after training: 0.5428571428571428
User 2567 does not improve AUC. Reverting changes.
Training on augumented user 2196 35/50 current_auc = 0.5428571428571428
User 2196 AUC after training: 0.5428571428571428
User 2196 does not improve AUC. Reverting changes.
Training on augumented user 106010 36/50 current_auc = 0.5428571428571428
User 106010 AUC after training: 0.5428571428571428
User 106010 does not improve AUC. Reverting changes.
Training on augumented user 31994 37/50 current_auc = 0.5428571428571428
User 31994 AUC after training: 0.5428571428571428
User 31994 does not improve AUC. Reverting changes.
Training on augumented user 5556 38/50 current_auc = 0.5428571428571428
User 5556 AUC after training: 0.5428571428571428
User 5556 does not improve AUC. Reverting changes.
Training on augumented user 43245 39/50 current_auc = 0.5428571428571428
User 43245 AUC after training: 0.5428571428571428
User 43245 does not improve AUC. Reverting changes.
Training on augumented user 35861 40/50 current_auc = 0.5428571428571428
User 35861 AUC after training: 0.5428571428571428
User 35861 does not improve AUC. Reverting changes.
Training on augumented user 6589 41/50 current_auc = 0.5428571428571428
User 6589 AUC after training: 0.5428571428571428
User 6589 does not improve AUC. Reverting changes.
Training on augumented user 98414 42/50 current_auc = 0.5428571428571428
User 98414 AUC after training: 0.5428571428571428
User 98414 does not improve AUC. Reverting changes.
Training on augumented user 62582 43/50 current_auc = 0.5428571428571428
User 62582 AUC after training: 0.5428571428571428
User 62582 does not improve AUC. Reverting changes.
Training on augumented user 89189 44/50 current_auc = 0.5428571428571428
User 89189 AUC after training: 0.5428571428571428
User 89189 does not improve AUC. Reverting changes.
Training on augumented user 51795 45/50 current_auc = 0.5428571428571428
User 51795 AUC after training: 0.5428571428571428
User 51795 does not improve AUC. Reverting changes.
Training on augumented user 102875 46/50 current_auc = 0.5428571428571428
User 102875 AUC after training: 0.5428571428571428
User 102875 does not improve AUC. Reverting changes.
Training on augumented user 13018 47/50 current_auc = 0.5428571428571428
User 13018 AUC after training: 0.5428571428571428
User 13018 does not improve AUC. Reverting changes.
Training on augumented user 75730 48/50 current_auc = 0.5428571428571428
User 75730 AUC after training: 0.5428571428571428
User 75730 does not improve AUC. Reverting changes.
Training on augumented user 117010 49/50 current_auc = 0.5428571428571428
User 117010 AUC after training: 0.5428571428571428
User 117010 does not improve AUC. Reverting changes.
[2024-12-02 18:24:14.960094] start test user 125896 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:15.504694] start test user 125896 86/567 recall augumented users by random, augumented_users = [94838, 79008, 89401, 96319, 117091, 20627, 86200, 52626, 124121, 76047, 87569, 84849, 130915, 116988, 115196, 130749, 27329, 77554, 107428, 436, 81305, 49706, 2529, 110866, 46882, 96435, 113813, 21970, 112428, 96747, 54365, 129717, 82584, 126574, 86361, 32544, 65760, 1605, 121173, 75156, 52674, 85168, 75629, 55065, 38173, 132084, 80253, 54878, 92038, 94181]
[2024-12-02 18:24:15.558500] user = 125896 Cloud 86/567
[2024-12-02 18:24:15.575127] user = 125896 Local 86/567
[2024-12-02 18:24:15.743575] user = 125896 Local+ 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:18.294155] user = 125896 MPDA- 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7103658536585366
Training on augumented user 94838 0/50 current_auc = 0.7103658536585366
User 94838 AUC after training: 0.7103658536585366
User 94838 does not improve AUC. Reverting changes.
Training on augumented user 79008 1/50 current_auc = 0.7103658536585366
User 79008 AUC after training: 0.7103658536585366
User 79008 does not improve AUC. Reverting changes.
Training on augumented user 89401 2/50 current_auc = 0.7103658536585366
User 89401 AUC after training: 0.7103658536585366
User 89401 does not improve AUC. Reverting changes.
Training on augumented user 96319 3/50 current_auc = 0.7103658536585366
User 96319 AUC after training: 0.7103658536585366
User 96319 does not improve AUC. Reverting changes.
Training on augumented user 117091 4/50 current_auc = 0.7103658536585366
User 117091 AUC after training: 0.7103658536585366
User 117091 does not improve AUC. Reverting changes.
Training on augumented user 20627 5/50 current_auc = 0.7103658536585366
User 20627 AUC after training: 0.7103658536585366
User 20627 does not improve AUC. Reverting changes.
Training on augumented user 86200 6/50 current_auc = 0.7103658536585366
User 86200 AUC after training: 0.7103658536585366
User 86200 does not improve AUC. Reverting changes.
Training on augumented user 52626 7/50 current_auc = 0.7103658536585366
User 52626 AUC after training: 0.7103658536585366
User 52626 does not improve AUC. Reverting changes.
Training on augumented user 124121 8/50 current_auc = 0.7103658536585366
User 124121 AUC after training: 0.7103658536585366
User 124121 does not improve AUC. Reverting changes.
Training on augumented user 76047 9/50 current_auc = 0.7103658536585366
User 76047 AUC after training: 0.7103658536585366
User 76047 does not improve AUC. Reverting changes.
Training on augumented user 87569 10/50 current_auc = 0.7103658536585366
User 87569 AUC after training: 0.7103658536585366
User 87569 does not improve AUC. Reverting changes.
Training on augumented user 84849 11/50 current_auc = 0.7103658536585366
User 84849 AUC after training: 0.7073170731707317
User 84849 does not improve AUC. Reverting changes.
Training on augumented user 130915 12/50 current_auc = 0.7103658536585366
User 130915 AUC after training: 0.7103658536585366
User 130915 does not improve AUC. Reverting changes.
Training on augumented user 116988 13/50 current_auc = 0.7103658536585366
User 116988 AUC after training: 0.7103658536585366
User 116988 does not improve AUC. Reverting changes.
Training on augumented user 115196 14/50 current_auc = 0.7103658536585366
User 115196 AUC after training: 0.7103658536585366
User 115196 does not improve AUC. Reverting changes.
Training on augumented user 130749 15/50 current_auc = 0.7103658536585366
User 130749 AUC after training: 0.7103658536585366
User 130749 does not improve AUC. Reverting changes.
Training on augumented user 27329 16/50 current_auc = 0.7103658536585366
User 27329 AUC after training: 0.7103658536585366
User 27329 does not improve AUC. Reverting changes.
Training on augumented user 77554 17/50 current_auc = 0.7103658536585366
User 77554 AUC after training: 0.7103658536585366
User 77554 does not improve AUC. Reverting changes.
Training on augumented user 107428 18/50 current_auc = 0.7103658536585366
User 107428 AUC after training: 0.7103658536585366
User 107428 does not improve AUC. Reverting changes.
Training on augumented user 436 19/50 current_auc = 0.7103658536585366
User 436 AUC after training: 0.7103658536585366
User 436 does not improve AUC. Reverting changes.
Training on augumented user 81305 20/50 current_auc = 0.7103658536585366
User 81305 AUC after training: 0.7103658536585366
User 81305 does not improve AUC. Reverting changes.
Training on augumented user 49706 21/50 current_auc = 0.7103658536585366
User 49706 AUC after training: 0.7103658536585366
User 49706 does not improve AUC. Reverting changes.
Training on augumented user 2529 22/50 current_auc = 0.7103658536585366
User 2529 AUC after training: 0.7103658536585366
User 2529 does not improve AUC. Reverting changes.
Training on augumented user 110866 23/50 current_auc = 0.7103658536585366
User 110866 AUC after training: 0.7073170731707317
User 110866 does not improve AUC. Reverting changes.
Training on augumented user 46882 24/50 current_auc = 0.7103658536585366
User 46882 AUC after training: 0.7103658536585366
User 46882 does not improve AUC. Reverting changes.
Training on augumented user 96435 25/50 current_auc = 0.7103658536585366
User 96435 AUC after training: 0.7103658536585366
User 96435 does not improve AUC. Reverting changes.
Training on augumented user 113813 26/50 current_auc = 0.7103658536585366
User 113813 AUC after training: 0.7103658536585366
User 113813 does not improve AUC. Reverting changes.
Training on augumented user 21970 27/50 current_auc = 0.7103658536585366
User 21970 AUC after training: 0.7103658536585366
User 21970 does not improve AUC. Reverting changes.
Training on augumented user 112428 28/50 current_auc = 0.7103658536585366
User 112428 AUC after training: 0.7103658536585366
User 112428 does not improve AUC. Reverting changes.
Training on augumented user 96747 29/50 current_auc = 0.7103658536585366
User 96747 AUC after training: 0.7103658536585366
User 96747 does not improve AUC. Reverting changes.
Training on augumented user 54365 30/50 current_auc = 0.7103658536585366
User 54365 AUC after training: 0.7103658536585366
User 54365 does not improve AUC. Reverting changes.
Training on augumented user 129717 31/50 current_auc = 0.7103658536585366
User 129717 AUC after training: 0.7103658536585366
User 129717 does not improve AUC. Reverting changes.
Training on augumented user 82584 32/50 current_auc = 0.7103658536585366
User 82584 AUC after training: 0.7103658536585366
User 82584 does not improve AUC. Reverting changes.
Training on augumented user 126574 33/50 current_auc = 0.7103658536585366
User 126574 AUC after training: 0.7042682926829268
User 126574 does not improve AUC. Reverting changes.
Training on augumented user 86361 34/50 current_auc = 0.7103658536585366
User 86361 AUC after training: 0.7103658536585366
User 86361 does not improve AUC. Reverting changes.
Training on augumented user 32544 35/50 current_auc = 0.7103658536585366
User 32544 AUC after training: 0.7103658536585366
User 32544 does not improve AUC. Reverting changes.
Training on augumented user 65760 36/50 current_auc = 0.7103658536585366
User 65760 AUC after training: 0.7103658536585366
User 65760 does not improve AUC. Reverting changes.
Training on augumented user 1605 37/50 current_auc = 0.7103658536585366
User 1605 AUC after training: 0.7103658536585366
User 1605 does not improve AUC. Reverting changes.
Training on augumented user 121173 38/50 current_auc = 0.7103658536585366
User 121173 AUC after training: 0.7103658536585366
User 121173 does not improve AUC. Reverting changes.
Training on augumented user 75156 39/50 current_auc = 0.7103658536585366
User 75156 AUC after training: 0.7103658536585366
User 75156 does not improve AUC. Reverting changes.
Training on augumented user 52674 40/50 current_auc = 0.7103658536585366
User 52674 AUC after training: 0.7103658536585366
User 52674 does not improve AUC. Reverting changes.
Training on augumented user 85168 41/50 current_auc = 0.7103658536585366
User 85168 AUC after training: 0.7103658536585366
User 85168 does not improve AUC. Reverting changes.
Training on augumented user 75629 42/50 current_auc = 0.7103658536585366
User 75629 AUC after training: 0.7103658536585366
User 75629 does not improve AUC. Reverting changes.
Training on augumented user 55065 43/50 current_auc = 0.7103658536585366
User 55065 AUC after training: 0.7103658536585366
User 55065 does not improve AUC. Reverting changes.
Training on augumented user 38173 44/50 current_auc = 0.7103658536585366
User 38173 AUC after training: 0.7103658536585366
User 38173 does not improve AUC. Reverting changes.
Training on augumented user 132084 45/50 current_auc = 0.7103658536585366
User 132084 AUC after training: 0.7103658536585366
User 132084 does not improve AUC. Reverting changes.
Training on augumented user 80253 46/50 current_auc = 0.7103658536585366
User 80253 AUC after training: 0.7103658536585366
User 80253 does not improve AUC. Reverting changes.
Training on augumented user 54878 47/50 current_auc = 0.7103658536585366
User 54878 AUC after training: 0.7103658536585366
User 54878 does not improve AUC. Reverting changes.
Training on augumented user 92038 48/50 current_auc = 0.7103658536585366
User 92038 AUC after training: 0.7103658536585366
User 92038 does not improve AUC. Reverting changes.
Training on augumented user 94181 49/50 current_auc = 0.7103658536585366
User 94181 AUC after training: 0.7103658536585366
User 94181 does not improve AUC. Reverting changes.
[2024-12-02 18:24:44.540293] start test user 125903 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:45.171821] start test user 125903 87/567 recall augumented users by random, augumented_users = [12285, 58056, 106946, 18000, 23647, 69681, 114357, 37186, 31502, 23589, 78416, 100508, 69011, 32265, 80732, 37211, 77901, 108413, 97627, 102574, 85421, 99814, 135133, 115004, 129342, 29034, 1745, 2169, 97825, 15765, 101777, 9536, 37272, 6658, 66454, 55636, 72090, 128288, 131242, 92230, 117248, 35012, 136761, 104430, 73786, 3968, 69045, 97513, 94905, 5159]
[2024-12-02 18:24:45.189028] user = 125903 Cloud 87/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:24:45.205059] user = 125903 Local 87/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:24:45.317568] user = 125903 Local+ 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:24:47.726921] user = 125903 MPDA- 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 12285 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12285 AUC after training: 0.5
User 12285 does not improve AUC. Reverting changes.
Training on augumented user 58056 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58056 AUC after training: 0.5
User 58056 does not improve AUC. Reverting changes.
Training on augumented user 106946 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106946 AUC after training: 0.5
User 106946 does not improve AUC. Reverting changes.
Training on augumented user 18000 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18000 AUC after training: 0.5
User 18000 does not improve AUC. Reverting changes.
Training on augumented user 23647 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23647 AUC after training: 0.5
User 23647 does not improve AUC. Reverting changes.
Training on augumented user 69681 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69681 AUC after training: 0.5
User 69681 does not improve AUC. Reverting changes.
Training on augumented user 114357 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114357 AUC after training: 0.5
User 114357 does not improve AUC. Reverting changes.
Training on augumented user 37186 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37186 AUC after training: 0.5
User 37186 does not improve AUC. Reverting changes.
Training on augumented user 31502 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31502 AUC after training: 0.5
User 31502 does not improve AUC. Reverting changes.
Training on augumented user 23589 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23589 AUC after training: 0.5
User 23589 does not improve AUC. Reverting changes.
Training on augumented user 78416 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78416 AUC after training: 0.5
User 78416 does not improve AUC. Reverting changes.
Training on augumented user 100508 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100508 AUC after training: 0.5
User 100508 does not improve AUC. Reverting changes.
Training on augumented user 69011 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69011 AUC after training: 0.5
User 69011 does not improve AUC. Reverting changes.
Training on augumented user 32265 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32265 AUC after training: 0.5
User 32265 does not improve AUC. Reverting changes.
Training on augumented user 80732 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80732 AUC after training: 0.5
User 80732 does not improve AUC. Reverting changes.
Training on augumented user 37211 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37211 AUC after training: 0.5
User 37211 does not improve AUC. Reverting changes.
Training on augumented user 77901 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77901 AUC after training: 0.5
User 77901 does not improve AUC. Reverting changes.
Training on augumented user 108413 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108413 AUC after training: 0.5
User 108413 does not improve AUC. Reverting changes.
Training on augumented user 97627 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97627 AUC after training: 0.5
User 97627 does not improve AUC. Reverting changes.
Training on augumented user 102574 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102574 AUC after training: 0.5
User 102574 does not improve AUC. Reverting changes.
Training on augumented user 85421 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85421 AUC after training: 0.5
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 99814 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99814 AUC after training: 0.5
User 99814 does not improve AUC. Reverting changes.
Training on augumented user 135133 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135133 AUC after training: 0.5
User 135133 does not improve AUC. Reverting changes.
Training on augumented user 115004 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115004 AUC after training: 0.5
User 115004 does not improve AUC. Reverting changes.
Training on augumented user 129342 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129342 AUC after training: 0.5
User 129342 does not improve AUC. Reverting changes.
Training on augumented user 29034 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29034 AUC after training: 0.5
User 29034 does not improve AUC. Reverting changes.
Training on augumented user 1745 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1745 AUC after training: 0.5
User 1745 does not improve AUC. Reverting changes.
Training on augumented user 2169 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2169 AUC after training: 0.5
User 2169 does not improve AUC. Reverting changes.
Training on augumented user 97825 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97825 AUC after training: 0.5
User 97825 does not improve AUC. Reverting changes.
Training on augumented user 15765 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15765 AUC after training: 0.5
User 15765 does not improve AUC. Reverting changes.
Training on augumented user 101777 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101777 AUC after training: 0.5
User 101777 does not improve AUC. Reverting changes.
Training on augumented user 9536 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9536 AUC after training: 0.5
User 9536 does not improve AUC. Reverting changes.
Training on augumented user 37272 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37272 AUC after training: 0.5
User 37272 does not improve AUC. Reverting changes.
Training on augumented user 6658 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6658 AUC after training: 0.5
User 6658 does not improve AUC. Reverting changes.
Training on augumented user 66454 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66454 AUC after training: 0.5
User 66454 does not improve AUC. Reverting changes.
Training on augumented user 55636 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55636 AUC after training: 0.5
User 55636 does not improve AUC. Reverting changes.
Training on augumented user 72090 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72090 AUC after training: 0.5
User 72090 does not improve AUC. Reverting changes.
Training on augumented user 128288 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128288 AUC after training: 0.5
User 128288 does not improve AUC. Reverting changes.
Training on augumented user 131242 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131242 AUC after training: 0.5
User 131242 does not improve AUC. Reverting changes.
Training on augumented user 92230 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92230 AUC after training: 0.5
User 92230 does not improve AUC. Reverting changes.
Training on augumented user 117248 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117248 AUC after training: 0.5
User 117248 does not improve AUC. Reverting changes.
Training on augumented user 35012 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35012 AUC after training: 0.5
User 35012 does not improve AUC. Reverting changes.
Training on augumented user 136761 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136761 AUC after training: 0.5
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 104430 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104430 AUC after training: 0.5
User 104430 does not improve AUC. Reverting changes.
Training on augumented user 73786 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73786 AUC after training: 0.5
User 73786 does not improve AUC. Reverting changes.
Training on augumented user 3968 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3968 AUC after training: 0.5
User 3968 does not improve AUC. Reverting changes.
Training on augumented user 69045 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69045 AUC after training: 0.5
User 69045 does not improve AUC. Reverting changes.
Training on augumented user 97513 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97513 AUC after training: 0.5
User 97513 does not improve AUC. Reverting changes.
Training on augumented user 94905 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94905 AUC after training: 0.5
User 94905 does not improve AUC. Reverting changes.
Training on augumented user 5159 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5159 AUC after training: 0.5
User 5159 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:15.044200] start test user 125924 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:15.886172] start test user 125924 88/567 recall augumented users by random, augumented_users = [61295, 5640, 86311, 19368, 59558, 53749, 90287, 27934, 46986, 118980, 100296, 22393, 114258, 83501, 129480, 91059, 92175, 29520, 10257, 69700, 95065, 102392, 134074, 72801, 138000, 89047, 61357, 72662, 10593, 129305, 67312, 73838, 48045, 103480, 49544, 59337, 109376, 21845, 129202, 121076, 59551, 134514, 136885, 66990, 137053, 19425, 34616, 16305, 93712, 91918]
[2024-12-02 18:25:15.903854] user = 125924 Cloud 88/567
[2024-12-02 18:25:15.914429] user = 125924 Local 88/567
[2024-12-02 18:25:16.182513] user = 125924 Local+ 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:18.868434] user = 125924 MPDA- 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 61295 0/50 current_auc = 1.0
User 61295 AUC after training: 1.0
User 61295 does not improve AUC. Reverting changes.
Training on augumented user 5640 1/50 current_auc = 1.0
User 5640 AUC after training: 1.0
User 5640 does not improve AUC. Reverting changes.
Training on augumented user 86311 2/50 current_auc = 1.0
User 86311 AUC after training: 1.0
User 86311 does not improve AUC. Reverting changes.
Training on augumented user 19368 3/50 current_auc = 1.0
User 19368 AUC after training: 1.0
User 19368 does not improve AUC. Reverting changes.
Training on augumented user 59558 4/50 current_auc = 1.0
User 59558 AUC after training: 1.0
User 59558 does not improve AUC. Reverting changes.
Training on augumented user 53749 5/50 current_auc = 1.0
User 53749 AUC after training: 1.0
User 53749 does not improve AUC. Reverting changes.
Training on augumented user 90287 6/50 current_auc = 1.0
User 90287 AUC after training: 1.0
User 90287 does not improve AUC. Reverting changes.
Training on augumented user 27934 7/50 current_auc = 1.0
User 27934 AUC after training: 1.0
User 27934 does not improve AUC. Reverting changes.
Training on augumented user 46986 8/50 current_auc = 1.0
User 46986 AUC after training: 1.0
User 46986 does not improve AUC. Reverting changes.
Training on augumented user 118980 9/50 current_auc = 1.0
User 118980 AUC after training: 1.0
User 118980 does not improve AUC. Reverting changes.
Training on augumented user 100296 10/50 current_auc = 1.0
User 100296 AUC after training: 1.0
User 100296 does not improve AUC. Reverting changes.
Training on augumented user 22393 11/50 current_auc = 1.0
User 22393 AUC after training: 1.0
User 22393 does not improve AUC. Reverting changes.
Training on augumented user 114258 12/50 current_auc = 1.0
User 114258 AUC after training: 1.0
User 114258 does not improve AUC. Reverting changes.
Training on augumented user 83501 13/50 current_auc = 1.0
User 83501 AUC after training: 1.0
User 83501 does not improve AUC. Reverting changes.
Training on augumented user 129480 14/50 current_auc = 1.0
User 129480 AUC after training: 1.0
User 129480 does not improve AUC. Reverting changes.
Training on augumented user 91059 15/50 current_auc = 1.0
User 91059 AUC after training: 1.0
User 91059 does not improve AUC. Reverting changes.
Training on augumented user 92175 16/50 current_auc = 1.0
User 92175 AUC after training: 1.0
User 92175 does not improve AUC. Reverting changes.
Training on augumented user 29520 17/50 current_auc = 1.0
User 29520 AUC after training: 1.0
User 29520 does not improve AUC. Reverting changes.
Training on augumented user 10257 18/50 current_auc = 1.0
User 10257 AUC after training: 1.0
User 10257 does not improve AUC. Reverting changes.
Training on augumented user 69700 19/50 current_auc = 1.0
User 69700 AUC after training: 1.0
User 69700 does not improve AUC. Reverting changes.
Training on augumented user 95065 20/50 current_auc = 1.0
User 95065 AUC after training: 1.0
User 95065 does not improve AUC. Reverting changes.
Training on augumented user 102392 21/50 current_auc = 1.0
User 102392 AUC after training: 1.0
User 102392 does not improve AUC. Reverting changes.
Training on augumented user 134074 22/50 current_auc = 1.0
User 134074 AUC after training: 1.0
User 134074 does not improve AUC. Reverting changes.
Training on augumented user 72801 23/50 current_auc = 1.0
User 72801 AUC after training: 1.0
User 72801 does not improve AUC. Reverting changes.
Training on augumented user 138000 24/50 current_auc = 1.0
User 138000 AUC after training: 1.0
User 138000 does not improve AUC. Reverting changes.
Training on augumented user 89047 25/50 current_auc = 1.0
User 89047 AUC after training: 1.0
User 89047 does not improve AUC. Reverting changes.
Training on augumented user 61357 26/50 current_auc = 1.0
User 61357 AUC after training: 1.0
User 61357 does not improve AUC. Reverting changes.
Training on augumented user 72662 27/50 current_auc = 1.0
User 72662 AUC after training: 1.0
User 72662 does not improve AUC. Reverting changes.
Training on augumented user 10593 28/50 current_auc = 1.0
User 10593 AUC after training: 1.0
User 10593 does not improve AUC. Reverting changes.
Training on augumented user 129305 29/50 current_auc = 1.0
User 129305 AUC after training: 1.0
User 129305 does not improve AUC. Reverting changes.
Training on augumented user 67312 30/50 current_auc = 1.0
User 67312 AUC after training: 1.0
User 67312 does not improve AUC. Reverting changes.
Training on augumented user 73838 31/50 current_auc = 1.0
User 73838 AUC after training: 1.0
User 73838 does not improve AUC. Reverting changes.
Training on augumented user 48045 32/50 current_auc = 1.0
User 48045 AUC after training: 1.0
User 48045 does not improve AUC. Reverting changes.
Training on augumented user 103480 33/50 current_auc = 1.0
User 103480 AUC after training: 1.0
User 103480 does not improve AUC. Reverting changes.
Training on augumented user 49544 34/50 current_auc = 1.0
User 49544 AUC after training: 1.0
User 49544 does not improve AUC. Reverting changes.
Training on augumented user 59337 35/50 current_auc = 1.0
User 59337 AUC after training: 1.0
User 59337 does not improve AUC. Reverting changes.
Training on augumented user 109376 36/50 current_auc = 1.0
User 109376 AUC after training: 1.0
User 109376 does not improve AUC. Reverting changes.
Training on augumented user 21845 37/50 current_auc = 1.0
User 21845 AUC after training: 1.0
User 21845 does not improve AUC. Reverting changes.
Training on augumented user 129202 38/50 current_auc = 1.0
User 129202 AUC after training: 1.0
User 129202 does not improve AUC. Reverting changes.
Training on augumented user 121076 39/50 current_auc = 1.0
User 121076 AUC after training: 1.0
User 121076 does not improve AUC. Reverting changes.
Training on augumented user 59551 40/50 current_auc = 1.0
User 59551 AUC after training: 1.0
User 59551 does not improve AUC. Reverting changes.
Training on augumented user 134514 41/50 current_auc = 1.0
User 134514 AUC after training: 1.0
User 134514 does not improve AUC. Reverting changes.
Training on augumented user 136885 42/50 current_auc = 1.0
User 136885 AUC after training: 1.0
User 136885 does not improve AUC. Reverting changes.
Training on augumented user 66990 43/50 current_auc = 1.0
User 66990 AUC after training: 1.0
User 66990 does not improve AUC. Reverting changes.
Training on augumented user 137053 44/50 current_auc = 1.0
User 137053 AUC after training: 1.0
User 137053 does not improve AUC. Reverting changes.
Training on augumented user 19425 45/50 current_auc = 1.0
User 19425 AUC after training: 1.0
User 19425 does not improve AUC. Reverting changes.
Training on augumented user 34616 46/50 current_auc = 1.0
User 34616 AUC after training: 1.0
User 34616 does not improve AUC. Reverting changes.
Training on augumented user 16305 47/50 current_auc = 1.0
User 16305 AUC after training: 1.0
User 16305 does not improve AUC. Reverting changes.
Training on augumented user 93712 48/50 current_auc = 1.0
User 93712 AUC after training: 1.0
User 93712 does not improve AUC. Reverting changes.
Training on augumented user 91918 49/50 current_auc = 1.0
User 91918 AUC after training: 1.0
User 91918 does not improve AUC. Reverting changes.
[2024-12-02 18:25:51.866765] start test user 125930 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:52.672365] start test user 125930 89/567 recall augumented users by random, augumented_users = [33680, 62356, 89667, 5740, 70737, 37928, 69886, 34923, 129080, 65748, 25383, 8746, 104776, 134178, 53858, 25292, 11893, 83386, 78865, 16833, 33725, 95147, 49737, 91804, 64829, 66587, 36666, 113744, 15086, 87509, 50652, 95503, 93690, 122596, 100966, 100774, 75091, 69319, 111219, 86826, 17452, 134586, 118312, 106905, 110452, 128504, 129057, 18170, 114269, 130090]
[2024-12-02 18:25:52.691300] user = 125930 Cloud 89/567
[2024-12-02 18:25:52.708776] user = 125930 Local 89/567
[2024-12-02 18:25:52.928575] user = 125930 Local+ 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:55.324528] user = 125930 MPDA- 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7458617332035054
Training on augumented user 33680 0/50 current_auc = 0.7458617332035054
User 33680 AUC after training: 0.7439143135345667
User 33680 does not improve AUC. Reverting changes.
Training on augumented user 62356 1/50 current_auc = 0.7458617332035054
User 62356 AUC after training: 0.7468354430379747
User 62356 improves AUC. Keeping the model.
Training on augumented user 89667 2/50 current_auc = 0.7468354430379747
User 89667 AUC after training: 0.7461863031483285
User 89667 does not improve AUC. Reverting changes.
Training on augumented user 5740 3/50 current_auc = 0.7468354430379747
User 5740 AUC after training: 0.7458617332035054
User 5740 does not improve AUC. Reverting changes.
Training on augumented user 70737 4/50 current_auc = 0.7468354430379747
User 70737 AUC after training: 0.7465108730931516
User 70737 does not improve AUC. Reverting changes.
Training on augumented user 37928 5/50 current_auc = 0.7468354430379747
User 37928 AUC after training: 0.7471600129827978
User 37928 improves AUC. Keeping the model.
Training on augumented user 69886 6/50 current_auc = 0.7471600129827978
User 69886 AUC after training: 0.7455371632586822
User 69886 does not improve AUC. Reverting changes.
Training on augumented user 34923 7/50 current_auc = 0.7471600129827978
User 34923 AUC after training: 0.7471600129827978
User 34923 does not improve AUC. Reverting changes.
Training on augumented user 129080 8/50 current_auc = 0.7471600129827978
User 129080 AUC after training: 0.7471600129827978
User 129080 does not improve AUC. Reverting changes.
Training on augumented user 65748 9/50 current_auc = 0.7471600129827978
User 65748 AUC after training: 0.7468354430379747
User 65748 does not improve AUC. Reverting changes.
Training on augumented user 25383 10/50 current_auc = 0.7471600129827978
User 25383 AUC after training: 0.7500811424862058
User 25383 improves AUC. Keeping the model.
Training on augumented user 8746 11/50 current_auc = 0.7500811424862058
User 8746 AUC after training: 0.7497565725413827
User 8746 does not improve AUC. Reverting changes.
Training on augumented user 104776 12/50 current_auc = 0.7500811424862058
User 104776 AUC after training: 0.7504057124310289
User 104776 improves AUC. Keeping the model.
Training on augumented user 134178 13/50 current_auc = 0.7504057124310289
User 134178 AUC after training: 0.7504057124310289
User 134178 does not improve AUC. Reverting changes.
Training on augumented user 53858 14/50 current_auc = 0.7504057124310289
User 53858 AUC after training: 0.7497565725413827
User 53858 does not improve AUC. Reverting changes.
Training on augumented user 25292 15/50 current_auc = 0.7504057124310289
User 25292 AUC after training: 0.7504057124310289
User 25292 does not improve AUC. Reverting changes.
Training on augumented user 11893 16/50 current_auc = 0.7504057124310289
User 11893 AUC after training: 0.7500811424862057
User 11893 does not improve AUC. Reverting changes.
Training on augumented user 83386 17/50 current_auc = 0.7504057124310289
User 83386 AUC after training: 0.7510548523206751
User 83386 improves AUC. Keeping the model.
Training on augumented user 78865 18/50 current_auc = 0.7510548523206751
User 78865 AUC after training: 0.7513794222654981
User 78865 improves AUC. Keeping the model.
Training on augumented user 16833 19/50 current_auc = 0.7513794222654981
User 16833 AUC after training: 0.7510548523206751
User 16833 does not improve AUC. Reverting changes.
Training on augumented user 33725 20/50 current_auc = 0.7513794222654981
User 33725 AUC after training: 0.7497565725413827
User 33725 does not improve AUC. Reverting changes.
Training on augumented user 95147 21/50 current_auc = 0.7513794222654981
User 95147 AUC after training: 0.750730282375852
User 95147 does not improve AUC. Reverting changes.
Training on augumented user 49737 22/50 current_auc = 0.7513794222654981
User 49737 AUC after training: 0.7504057124310288
User 49737 does not improve AUC. Reverting changes.
Training on augumented user 91804 23/50 current_auc = 0.7513794222654981
User 91804 AUC after training: 0.7504057124310288
User 91804 does not improve AUC. Reverting changes.
Training on augumented user 64829 24/50 current_auc = 0.7513794222654981
User 64829 AUC after training: 0.7510548523206751
User 64829 does not improve AUC. Reverting changes.
Training on augumented user 66587 25/50 current_auc = 0.7513794222654981
User 66587 AUC after training: 0.7513794222654983
User 66587 improves AUC. Keeping the model.
Training on augumented user 36666 26/50 current_auc = 0.7513794222654983
User 36666 AUC after training: 0.7491074326517364
User 36666 does not improve AUC. Reverting changes.
Training on augumented user 113744 27/50 current_auc = 0.7513794222654983
User 113744 AUC after training: 0.7513794222654981
User 113744 does not improve AUC. Reverting changes.
Training on augumented user 15086 28/50 current_auc = 0.7513794222654983
User 15086 AUC after training: 0.7513794222654983
User 15086 does not improve AUC. Reverting changes.
Training on augumented user 87509 29/50 current_auc = 0.7513794222654983
User 87509 AUC after training: 0.7507302823758519
User 87509 does not improve AUC. Reverting changes.
Training on augumented user 50652 30/50 current_auc = 0.7513794222654983
User 50652 AUC after training: 0.751054852320675
User 50652 does not improve AUC. Reverting changes.
Training on augumented user 95503 31/50 current_auc = 0.7513794222654983
User 95503 AUC after training: 0.751054852320675
User 95503 does not improve AUC. Reverting changes.
Training on augumented user 93690 32/50 current_auc = 0.7513794222654983
User 93690 AUC after training: 0.7461863031483285
User 93690 does not improve AUC. Reverting changes.
Training on augumented user 122596 33/50 current_auc = 0.7513794222654983
User 122596 AUC after training: 0.751054852320675
User 122596 does not improve AUC. Reverting changes.
Training on augumented user 100966 34/50 current_auc = 0.7513794222654983
User 100966 AUC after training: 0.7513794222654981
User 100966 does not improve AUC. Reverting changes.
Training on augumented user 100774 35/50 current_auc = 0.7513794222654983
User 100774 AUC after training: 0.7510548523206751
User 100774 does not improve AUC. Reverting changes.
Training on augumented user 75091 36/50 current_auc = 0.7513794222654983
User 75091 AUC after training: 0.7510548523206751
User 75091 does not improve AUC. Reverting changes.
Training on augumented user 69319 37/50 current_auc = 0.7513794222654983
User 69319 AUC after training: 0.7517039922103214
User 69319 improves AUC. Keeping the model.
Training on augumented user 111219 38/50 current_auc = 0.7517039922103214
User 111219 AUC after training: 0.7513794222654983
User 111219 does not improve AUC. Reverting changes.
Training on augumented user 86826 39/50 current_auc = 0.7517039922103214
User 86826 AUC after training: 0.7517039922103214
User 86826 does not improve AUC. Reverting changes.
Training on augumented user 17452 40/50 current_auc = 0.7517039922103214
User 17452 AUC after training: 0.7520285621551444
User 17452 improves AUC. Keeping the model.
Training on augumented user 134586 41/50 current_auc = 0.7520285621551444
User 134586 AUC after training: 0.7520285621551445
User 134586 improves AUC. Keeping the model.
Training on augumented user 118312 42/50 current_auc = 0.7520285621551445
User 118312 AUC after training: 0.7517039922103212
User 118312 does not improve AUC. Reverting changes.
Training on augumented user 106905 43/50 current_auc = 0.7520285621551445
User 106905 AUC after training: 0.7513794222654981
User 106905 does not improve AUC. Reverting changes.
Training on augumented user 110452 44/50 current_auc = 0.7520285621551445
User 110452 AUC after training: 0.7513794222654981
User 110452 does not improve AUC. Reverting changes.
Training on augumented user 128504 45/50 current_auc = 0.7520285621551445
User 128504 AUC after training: 0.7520285621551445
User 128504 does not improve AUC. Reverting changes.
Training on augumented user 129057 46/50 current_auc = 0.7520285621551445
User 129057 AUC after training: 0.7520285621551445
User 129057 does not improve AUC. Reverting changes.
Training on augumented user 18170 47/50 current_auc = 0.7520285621551445
User 18170 AUC after training: 0.7517039922103212
User 18170 does not improve AUC. Reverting changes.
Training on augumented user 114269 48/50 current_auc = 0.7520285621551445
User 114269 AUC after training: 0.7513794222654981
User 114269 does not improve AUC. Reverting changes.
Training on augumented user 130090 49/50 current_auc = 0.7520285621551445
User 130090 AUC after training: 0.7520285621551445
User 130090 does not improve AUC. Reverting changes.
[2024-12-02 18:26:27.008612] start test user 125937 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:27.574557] start test user 125937 90/567 recall augumented users by random, augumented_users = [31473, 111684, 53197, 137565, 77124, 35978, 14156, 6617, 115601, 2059, 123309, 106263, 99925, 55579, 61167, 57346, 46892, 102452, 128856, 138189, 36195, 96839, 5307, 120301, 128691, 84377, 90663, 11503, 61210, 82555, 123651, 92836, 60994, 125463, 37045, 80559, 39919, 89054, 33549, 78718, 53412, 65015, 13179, 833, 125491, 52317, 18083, 79731, 98034, 77633]
[2024-12-02 18:26:27.591864] user = 125937 Cloud 90/567
[2024-12-02 18:26:27.602875] user = 125937 Local 90/567
[2024-12-02 18:26:27.638533] user = 125937 Local+ 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:30.542065] user = 125937 MPDA- 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 31473 0/50 current_auc = 1.0
User 31473 AUC after training: 1.0
User 31473 does not improve AUC. Reverting changes.
Training on augumented user 111684 1/50 current_auc = 1.0
User 111684 AUC after training: 1.0
User 111684 does not improve AUC. Reverting changes.
Training on augumented user 53197 2/50 current_auc = 1.0
User 53197 AUC after training: 1.0
User 53197 does not improve AUC. Reverting changes.
Training on augumented user 137565 3/50 current_auc = 1.0
User 137565 AUC after training: 1.0
User 137565 does not improve AUC. Reverting changes.
Training on augumented user 77124 4/50 current_auc = 1.0
User 77124 AUC after training: 1.0
User 77124 does not improve AUC. Reverting changes.
Training on augumented user 35978 5/50 current_auc = 1.0
User 35978 AUC after training: 1.0
User 35978 does not improve AUC. Reverting changes.
Training on augumented user 14156 6/50 current_auc = 1.0
User 14156 AUC after training: 1.0
User 14156 does not improve AUC. Reverting changes.
Training on augumented user 6617 7/50 current_auc = 1.0
User 6617 AUC after training: 1.0
User 6617 does not improve AUC. Reverting changes.
Training on augumented user 115601 8/50 current_auc = 1.0
User 115601 AUC after training: 1.0
User 115601 does not improve AUC. Reverting changes.
Training on augumented user 2059 9/50 current_auc = 1.0
User 2059 AUC after training: 1.0
User 2059 does not improve AUC. Reverting changes.
Training on augumented user 123309 10/50 current_auc = 1.0
User 123309 AUC after training: 1.0
User 123309 does not improve AUC. Reverting changes.
Training on augumented user 106263 11/50 current_auc = 1.0
User 106263 AUC after training: 1.0
User 106263 does not improve AUC. Reverting changes.
Training on augumented user 99925 12/50 current_auc = 1.0
User 99925 AUC after training: 1.0
User 99925 does not improve AUC. Reverting changes.
Training on augumented user 55579 13/50 current_auc = 1.0
User 55579 AUC after training: 1.0
User 55579 does not improve AUC. Reverting changes.
Training on augumented user 61167 14/50 current_auc = 1.0
User 61167 AUC after training: 1.0
User 61167 does not improve AUC. Reverting changes.
Training on augumented user 57346 15/50 current_auc = 1.0
User 57346 AUC after training: 1.0
User 57346 does not improve AUC. Reverting changes.
Training on augumented user 46892 16/50 current_auc = 1.0
User 46892 AUC after training: 1.0
User 46892 does not improve AUC. Reverting changes.
Training on augumented user 102452 17/50 current_auc = 1.0
User 102452 AUC after training: 1.0
User 102452 does not improve AUC. Reverting changes.
Training on augumented user 128856 18/50 current_auc = 1.0
User 128856 AUC after training: 1.0
User 128856 does not improve AUC. Reverting changes.
Training on augumented user 138189 19/50 current_auc = 1.0
User 138189 AUC after training: 1.0
User 138189 does not improve AUC. Reverting changes.
Training on augumented user 36195 20/50 current_auc = 1.0
User 36195 AUC after training: 1.0
User 36195 does not improve AUC. Reverting changes.
Training on augumented user 96839 21/50 current_auc = 1.0
User 96839 AUC after training: 1.0
User 96839 does not improve AUC. Reverting changes.
Training on augumented user 5307 22/50 current_auc = 1.0
User 5307 AUC after training: 1.0
User 5307 does not improve AUC. Reverting changes.
Training on augumented user 120301 23/50 current_auc = 1.0
User 120301 AUC after training: 1.0
User 120301 does not improve AUC. Reverting changes.
Training on augumented user 128691 24/50 current_auc = 1.0
User 128691 AUC after training: 1.0
User 128691 does not improve AUC. Reverting changes.
Training on augumented user 84377 25/50 current_auc = 1.0
User 84377 AUC after training: 1.0
User 84377 does not improve AUC. Reverting changes.
Training on augumented user 90663 26/50 current_auc = 1.0
User 90663 AUC after training: 1.0
User 90663 does not improve AUC. Reverting changes.
Training on augumented user 11503 27/50 current_auc = 1.0
User 11503 AUC after training: 1.0
User 11503 does not improve AUC. Reverting changes.
Training on augumented user 61210 28/50 current_auc = 1.0
User 61210 AUC after training: 1.0
User 61210 does not improve AUC. Reverting changes.
Training on augumented user 82555 29/50 current_auc = 1.0
User 82555 AUC after training: 1.0
User 82555 does not improve AUC. Reverting changes.
Training on augumented user 123651 30/50 current_auc = 1.0
User 123651 AUC after training: 1.0
User 123651 does not improve AUC. Reverting changes.
Training on augumented user 92836 31/50 current_auc = 1.0
User 92836 AUC after training: 1.0
User 92836 does not improve AUC. Reverting changes.
Training on augumented user 60994 32/50 current_auc = 1.0
User 60994 AUC after training: 1.0
User 60994 does not improve AUC. Reverting changes.
Training on augumented user 125463 33/50 current_auc = 1.0
User 125463 AUC after training: 1.0
User 125463 does not improve AUC. Reverting changes.
Training on augumented user 37045 34/50 current_auc = 1.0
User 37045 AUC after training: 1.0
User 37045 does not improve AUC. Reverting changes.
Training on augumented user 80559 35/50 current_auc = 1.0
User 80559 AUC after training: 1.0
User 80559 does not improve AUC. Reverting changes.
Training on augumented user 39919 36/50 current_auc = 1.0
User 39919 AUC after training: 1.0
User 39919 does not improve AUC. Reverting changes.
Training on augumented user 89054 37/50 current_auc = 1.0
User 89054 AUC after training: 1.0
User 89054 does not improve AUC. Reverting changes.
Training on augumented user 33549 38/50 current_auc = 1.0
User 33549 AUC after training: 1.0
User 33549 does not improve AUC. Reverting changes.
Training on augumented user 78718 39/50 current_auc = 1.0
User 78718 AUC after training: 1.0
User 78718 does not improve AUC. Reverting changes.
Training on augumented user 53412 40/50 current_auc = 1.0
User 53412 AUC after training: 1.0
User 53412 does not improve AUC. Reverting changes.
Training on augumented user 65015 41/50 current_auc = 1.0
User 65015 AUC after training: 1.0
User 65015 does not improve AUC. Reverting changes.
Training on augumented user 13179 42/50 current_auc = 1.0
User 13179 AUC after training: 1.0
User 13179 does not improve AUC. Reverting changes.
Training on augumented user 833 43/50 current_auc = 1.0
User 833 AUC after training: 1.0
User 833 does not improve AUC. Reverting changes.
Training on augumented user 125491 44/50 current_auc = 1.0
User 125491 AUC after training: 1.0
User 125491 does not improve AUC. Reverting changes.
Training on augumented user 52317 45/50 current_auc = 1.0
User 52317 AUC after training: 1.0
User 52317 does not improve AUC. Reverting changes.
Training on augumented user 18083 46/50 current_auc = 1.0
User 18083 AUC after training: 1.0
User 18083 does not improve AUC. Reverting changes.
Training on augumented user 79731 47/50 current_auc = 1.0
User 79731 AUC after training: 1.0
User 79731 does not improve AUC. Reverting changes.
Training on augumented user 98034 48/50 current_auc = 1.0
User 98034 AUC after training: 1.0
User 98034 does not improve AUC. Reverting changes.
Training on augumented user 77633 49/50 current_auc = 1.0
User 77633 AUC after training: 1.0
User 77633 does not improve AUC. Reverting changes.
[2024-12-02 18:26:57.153078] start test user 125978 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:57.595354] start test user 125978 91/567 recall augumented users by random, augumented_users = [83724, 19491, 48702, 126865, 114505, 41477, 11068, 90020, 85424, 112733, 56895, 41021, 96252, 66505, 9538, 15245, 91073, 97533, 116630, 54694, 49424, 4212, 117372, 82275, 97055, 39402, 116487, 11169, 55361, 116094, 134284, 98228, 1055, 113184, 100256, 88538, 53674, 74872, 82161, 7672, 76185, 41733, 9487, 26457, 128, 88963, 105919, 6392, 15588, 68062]
[2024-12-02 18:26:57.615133] user = 125978 Cloud 91/567
[2024-12-02 18:26:57.661974] user = 125978 Local 91/567
[2024-12-02 18:26:58.241795] user = 125978 Local+ 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:00.143339] user = 125978 MPDA- 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45877178889870673
Training on augumented user 83724 0/50 current_auc = 0.45877178889870673
User 83724 AUC after training: 0.45806892119848985
User 83724 does not improve AUC. Reverting changes.
Training on augumented user 19491 1/50 current_auc = 0.45877178889870673
User 19491 AUC after training: 0.45837015021286853
User 19491 does not improve AUC. Reverting changes.
Training on augumented user 48702 2/50 current_auc = 0.45877178889870673
User 48702 AUC after training: 0.4589926901759177
User 48702 improves AUC. Keeping the model.
Training on augumented user 126865 3/50 current_auc = 0.4589926901759177
User 126865 AUC after training: 0.4585508876214957
User 126865 does not improve AUC. Reverting changes.
Training on augumented user 114505 4/50 current_auc = 0.4589926901759177
User 114505 AUC after training: 0.45925375532171253
User 114505 improves AUC. Keeping the model.
Training on augumented user 41477 5/50 current_auc = 0.45925375532171253
User 41477 AUC after training: 0.45911318178166916
User 41477 does not improve AUC. Reverting changes.
Training on augumented user 11068 6/50 current_auc = 0.45925375532171253
User 11068 AUC after training: 0.45951482046750747
User 11068 improves AUC. Keeping the model.
Training on augumented user 90020 7/50 current_auc = 0.45951482046750747
User 90020 AUC after training: 0.45975580367901037
User 90020 improves AUC. Keeping the model.
Training on augumented user 85424 8/50 current_auc = 0.45975580367901037
User 85424 AUC after training: 0.4594545746646318
User 85424 does not improve AUC. Reverting changes.
Training on augumented user 112733 9/50 current_auc = 0.45975580367901037
User 112733 AUC after training: 0.4598160494818861
User 112733 improves AUC. Keeping the model.
Training on augumented user 56895 10/50 current_auc = 0.4598160494818861
User 56895 AUC after training: 0.45993654108763754
User 56895 improves AUC. Keeping the model.
Training on augumented user 41021 11/50 current_auc = 0.45993654108763754
User 41021 AUC after training: 0.45949473853321554
User 41021 does not improve AUC. Reverting changes.
Training on augumented user 96252 12/50 current_auc = 0.45993654108763754
User 96252 AUC after training: 0.4595549843360912
User 96252 does not improve AUC. Reverting changes.
Training on augumented user 66505 13/50 current_auc = 0.45993654108763754
User 66505 AUC after training: 0.45927383725600446
User 66505 does not improve AUC. Reverting changes.
Training on augumented user 9538 14/50 current_auc = 0.45993654108763754
User 9538 AUC after training: 0.45959514820467506
User 9538 does not improve AUC. Reverting changes.
Training on augumented user 15245 15/50 current_auc = 0.45993654108763754
User 15245 AUC after training: 0.45939432886175596
User 15245 does not improve AUC. Reverting changes.
Training on augumented user 91073 16/50 current_auc = 0.45993654108763754
User 91073 AUC after training: 0.45911318178166916
User 91073 does not improve AUC. Reverting changes.
Training on augumented user 97533 17/50 current_auc = 0.45993654108763754
User 97533 AUC after training: 0.45999678689051327
User 97533 improves AUC. Keeping the model.
Training on augumented user 116630 18/50 current_auc = 0.45999678689051327
User 116630 AUC after training: 0.4602578520363081
User 116630 improves AUC. Keeping the model.
Training on augumented user 54694 19/50 current_auc = 0.4602578520363081
User 54694 AUC after training: 0.4598461723833239
User 54694 does not improve AUC. Reverting changes.
Training on augumented user 49424 20/50 current_auc = 0.4602578520363081
User 49424 AUC after training: 0.4606594907221463
User 49424 improves AUC. Keeping the model.
Training on augumented user 4212 21/50 current_auc = 0.4606594907221463
User 4212 AUC after training: 0.46055908105068677
User 4212 does not improve AUC. Reverting changes.
Training on augumented user 117372 22/50 current_auc = 0.4606594907221463
User 117372 AUC after training: 0.46064944975500033
User 117372 does not improve AUC. Reverting changes.
Training on augumented user 82275 23/50 current_auc = 0.4606594907221463
User 82275 AUC after training: 0.4601976062334324
User 82275 does not improve AUC. Reverting changes.
Training on augumented user 97055 24/50 current_auc = 0.4606594907221463
User 97055 AUC after training: 0.4604988352478111
User 97055 does not improve AUC. Reverting changes.
Training on augumented user 39402 25/50 current_auc = 0.4606594907221463
User 39402 AUC after training: 0.4597357217447185
User 39402 does not improve AUC. Reverting changes.
Training on augumented user 116487 26/50 current_auc = 0.4606594907221463
User 116487 AUC after training: 0.45933408305888024
User 116487 does not improve AUC. Reverting changes.
Training on augumented user 11169 27/50 current_auc = 0.4606594907221463
User 11169 AUC after training: 0.46011727849626477
User 11169 does not improve AUC. Reverting changes.
Training on augumented user 55361 28/50 current_auc = 0.4606594907221463
User 55361 AUC after training: 0.4597959675475942
User 55361 does not improve AUC. Reverting changes.
Training on augumented user 116094 29/50 current_auc = 0.4606594907221463
User 116094 AUC after training: 0.45943449273033976
User 116094 does not improve AUC. Reverting changes.
Training on augumented user 134284 30/50 current_auc = 0.4606594907221463
User 134284 AUC after training: 0.459605189171821
User 134284 does not improve AUC. Reverting changes.
Training on augumented user 98228 31/50 current_auc = 0.4606594907221463
User 98228 AUC after training: 0.45917342758454494
User 98228 does not improve AUC. Reverting changes.
Training on augumented user 1055 32/50 current_auc = 0.4606594907221463
User 1055 AUC after training: 0.4600369507590971
User 1055 does not improve AUC. Reverting changes.
Training on augumented user 113184 33/50 current_auc = 0.4606594907221463
User 113184 AUC after training: 0.46037834364205965
User 113184 does not improve AUC. Reverting changes.
Training on augumented user 100256 34/50 current_auc = 0.4606594907221463
User 100256 AUC after training: 0.459826090449032
User 100256 does not improve AUC. Reverting changes.
Training on augumented user 88538 35/50 current_auc = 0.4606594907221463
User 88538 AUC after training: 0.46053899911639484
User 88538 does not improve AUC. Reverting changes.
Training on augumented user 53674 36/50 current_auc = 0.4606594907221463
User 53674 AUC after training: 0.45991645915334567
User 53674 does not improve AUC. Reverting changes.
Training on augumented user 74872 37/50 current_auc = 0.4606594907221463
User 74872 AUC after training: 0.46052895814924893
User 74872 does not improve AUC. Reverting changes.
Training on augumented user 82161 38/50 current_auc = 0.4606594907221463
User 82161 AUC after training: 0.4599164591533456
User 82161 does not improve AUC. Reverting changes.
Training on augumented user 7672 39/50 current_auc = 0.4606594907221463
User 7672 AUC after training: 0.46029801590489194
User 7672 does not improve AUC. Reverting changes.
Training on augumented user 76185 40/50 current_auc = 0.4606594907221463
User 76185 AUC after training: 0.4605691220178328
User 76185 does not improve AUC. Reverting changes.
Training on augumented user 41733 41/50 current_auc = 0.4606594907221463
User 41733 AUC after training: 0.460287974937746
User 41733 does not improve AUC. Reverting changes.
Training on augumented user 9487 42/50 current_auc = 0.4606594907221463
User 9487 AUC after training: 0.46039842557635147
User 9487 does not improve AUC. Reverting changes.
Training on augumented user 26457 43/50 current_auc = 0.4606594907221463
User 26457 AUC after training: 0.460057032693389
User 26457 does not improve AUC. Reverting changes.
Training on augumented user 128 44/50 current_auc = 0.4606594907221463
User 128 AUC after training: 0.46019760623343237
User 128 does not improve AUC. Reverting changes.
Training on augumented user 88963 45/50 current_auc = 0.4606594907221463
User 88963 AUC after training: 0.45973572174471844
User 88963 does not improve AUC. Reverting changes.
Training on augumented user 105919 46/50 current_auc = 0.4606594907221463
User 105919 AUC after training: 0.4613322355209254
User 105919 improves AUC. Keeping the model.
Training on augumented user 6392 47/50 current_auc = 0.4613322355209254
User 6392 AUC after training: 0.46086031006506545
User 6392 does not improve AUC. Reverting changes.
Training on augumented user 15588 48/50 current_auc = 0.4613322355209254
User 15588 AUC after training: 0.4611012932765684
User 15588 does not improve AUC. Reverting changes.
Training on augumented user 68062 49/50 current_auc = 0.4613322355209254
User 68062 AUC after training: 0.46123182584946576
User 68062 does not improve AUC. Reverting changes.
[2024-12-02 18:27:32.478043] start test user 126009 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:33.237818] start test user 126009 92/567 recall augumented users by random, augumented_users = [125142, 81200, 68126, 110123, 9156, 16948, 59721, 123760, 28763, 61221, 113103, 51558, 118377, 126896, 127417, 103440, 136689, 90828, 30277, 42046, 134768, 15238, 74512, 46884, 125017, 59268, 30436, 47755, 55674, 114529, 109787, 48488, 22948, 90925, 14215, 24289, 16477, 131953, 91020, 24037, 74451, 5777, 22263, 61721, 59461, 130037, 36284, 131578, 81074, 40558]
[2024-12-02 18:27:33.253619] user = 126009 Cloud 92/567
[2024-12-02 18:27:33.267341] user = 126009 Local 92/567
[2024-12-02 18:27:33.404749] user = 126009 Local+ 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:36.381648] user = 126009 MPDA- 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7938461538461539
Training on augumented user 125142 0/50 current_auc = 0.7938461538461539
User 125142 AUC after training: 0.7938461538461539
User 125142 does not improve AUC. Reverting changes.
Training on augumented user 81200 1/50 current_auc = 0.7938461538461539
User 81200 AUC after training: 0.7907692307692308
User 81200 does not improve AUC. Reverting changes.
Training on augumented user 68126 2/50 current_auc = 0.7938461538461539
User 68126 AUC after training: 0.7907692307692308
User 68126 does not improve AUC. Reverting changes.
Training on augumented user 110123 3/50 current_auc = 0.7938461538461539
User 110123 AUC after training: 0.7938461538461539
User 110123 does not improve AUC. Reverting changes.
Training on augumented user 9156 4/50 current_auc = 0.7938461538461539
User 9156 AUC after training: 0.7938461538461539
User 9156 does not improve AUC. Reverting changes.
Training on augumented user 16948 5/50 current_auc = 0.7938461538461539
User 16948 AUC after training: 0.7907692307692308
User 16948 does not improve AUC. Reverting changes.
Training on augumented user 59721 6/50 current_auc = 0.7938461538461539
User 59721 AUC after training: 0.7938461538461539
User 59721 does not improve AUC. Reverting changes.
Training on augumented user 123760 7/50 current_auc = 0.7938461538461539
User 123760 AUC after training: 0.7907692307692308
User 123760 does not improve AUC. Reverting changes.
Training on augumented user 28763 8/50 current_auc = 0.7938461538461539
User 28763 AUC after training: 0.7938461538461539
User 28763 does not improve AUC. Reverting changes.
Training on augumented user 61221 9/50 current_auc = 0.7938461538461539
User 61221 AUC after training: 0.7938461538461539
User 61221 does not improve AUC. Reverting changes.
Training on augumented user 113103 10/50 current_auc = 0.7938461538461539
User 113103 AUC after training: 0.7907692307692308
User 113103 does not improve AUC. Reverting changes.
Training on augumented user 51558 11/50 current_auc = 0.7938461538461539
User 51558 AUC after training: 0.7876923076923077
User 51558 does not improve AUC. Reverting changes.
Training on augumented user 118377 12/50 current_auc = 0.7938461538461539
User 118377 AUC after training: 0.7938461538461539
User 118377 does not improve AUC. Reverting changes.
Training on augumented user 126896 13/50 current_auc = 0.7938461538461539
User 126896 AUC after training: 0.7938461538461539
User 126896 does not improve AUC. Reverting changes.
Training on augumented user 127417 14/50 current_auc = 0.7938461538461539
User 127417 AUC after training: 0.7938461538461539
User 127417 does not improve AUC. Reverting changes.
Training on augumented user 103440 15/50 current_auc = 0.7938461538461539
User 103440 AUC after training: 0.7938461538461539
User 103440 does not improve AUC. Reverting changes.
Training on augumented user 136689 16/50 current_auc = 0.7938461538461539
User 136689 AUC after training: 0.7938461538461539
User 136689 does not improve AUC. Reverting changes.
Training on augumented user 90828 17/50 current_auc = 0.7938461538461539
User 90828 AUC after training: 0.7938461538461539
User 90828 does not improve AUC. Reverting changes.
Training on augumented user 30277 18/50 current_auc = 0.7938461538461539
User 30277 AUC after training: 0.7938461538461539
User 30277 does not improve AUC. Reverting changes.
Training on augumented user 42046 19/50 current_auc = 0.7938461538461539
User 42046 AUC after training: 0.7907692307692308
User 42046 does not improve AUC. Reverting changes.
Training on augumented user 134768 20/50 current_auc = 0.7938461538461539
User 134768 AUC after training: 0.7938461538461539
User 134768 does not improve AUC. Reverting changes.
Training on augumented user 15238 21/50 current_auc = 0.7938461538461539
User 15238 AUC after training: 0.7938461538461539
User 15238 does not improve AUC. Reverting changes.
Training on augumented user 74512 22/50 current_auc = 0.7938461538461539
User 74512 AUC after training: 0.7938461538461539
User 74512 does not improve AUC. Reverting changes.
Training on augumented user 46884 23/50 current_auc = 0.7938461538461539
User 46884 AUC after training: 0.7938461538461539
User 46884 does not improve AUC. Reverting changes.
Training on augumented user 125017 24/50 current_auc = 0.7938461538461539
User 125017 AUC after training: 0.7938461538461539
User 125017 does not improve AUC. Reverting changes.
Training on augumented user 59268 25/50 current_auc = 0.7938461538461539
User 59268 AUC after training: 0.7938461538461539
User 59268 does not improve AUC. Reverting changes.
Training on augumented user 30436 26/50 current_auc = 0.7938461538461539
User 30436 AUC after training: 0.7876923076923077
User 30436 does not improve AUC. Reverting changes.
Training on augumented user 47755 27/50 current_auc = 0.7938461538461539
User 47755 AUC after training: 0.7938461538461539
User 47755 does not improve AUC. Reverting changes.
Training on augumented user 55674 28/50 current_auc = 0.7938461538461539
User 55674 AUC after training: 0.7938461538461539
User 55674 does not improve AUC. Reverting changes.
Training on augumented user 114529 29/50 current_auc = 0.7938461538461539
User 114529 AUC after training: 0.7938461538461539
User 114529 does not improve AUC. Reverting changes.
Training on augumented user 109787 30/50 current_auc = 0.7938461538461539
User 109787 AUC after training: 0.7938461538461539
User 109787 does not improve AUC. Reverting changes.
Training on augumented user 48488 31/50 current_auc = 0.7938461538461539
User 48488 AUC after training: 0.7938461538461539
User 48488 does not improve AUC. Reverting changes.
Training on augumented user 22948 32/50 current_auc = 0.7938461538461539
User 22948 AUC after training: 0.7938461538461539
User 22948 does not improve AUC. Reverting changes.
Training on augumented user 90925 33/50 current_auc = 0.7938461538461539
User 90925 AUC after training: 0.7938461538461539
User 90925 does not improve AUC. Reverting changes.
Training on augumented user 14215 34/50 current_auc = 0.7938461538461539
User 14215 AUC after training: 0.7938461538461539
User 14215 does not improve AUC. Reverting changes.
Training on augumented user 24289 35/50 current_auc = 0.7938461538461539
User 24289 AUC after training: 0.7938461538461539
User 24289 does not improve AUC. Reverting changes.
Training on augumented user 16477 36/50 current_auc = 0.7938461538461539
User 16477 AUC after training: 0.7938461538461539
User 16477 does not improve AUC. Reverting changes.
Training on augumented user 131953 37/50 current_auc = 0.7938461538461539
User 131953 AUC after training: 0.7938461538461539
User 131953 does not improve AUC. Reverting changes.
Training on augumented user 91020 38/50 current_auc = 0.7938461538461539
User 91020 AUC after training: 0.7938461538461539
User 91020 does not improve AUC. Reverting changes.
Training on augumented user 24037 39/50 current_auc = 0.7938461538461539
User 24037 AUC after training: 0.7938461538461539
User 24037 does not improve AUC. Reverting changes.
Training on augumented user 74451 40/50 current_auc = 0.7938461538461539
User 74451 AUC after training: 0.7938461538461539
User 74451 does not improve AUC. Reverting changes.
Training on augumented user 5777 41/50 current_auc = 0.7938461538461539
User 5777 AUC after training: 0.7938461538461539
User 5777 does not improve AUC. Reverting changes.
Training on augumented user 22263 42/50 current_auc = 0.7938461538461539
User 22263 AUC after training: 0.7938461538461539
User 22263 does not improve AUC. Reverting changes.
Training on augumented user 61721 43/50 current_auc = 0.7938461538461539
User 61721 AUC after training: 0.7938461538461539
User 61721 does not improve AUC. Reverting changes.
Training on augumented user 59461 44/50 current_auc = 0.7938461538461539
User 59461 AUC after training: 0.7938461538461539
User 59461 does not improve AUC. Reverting changes.
Training on augumented user 130037 45/50 current_auc = 0.7938461538461539
User 130037 AUC after training: 0.7938461538461539
User 130037 does not improve AUC. Reverting changes.
Training on augumented user 36284 46/50 current_auc = 0.7938461538461539
User 36284 AUC after training: 0.7907692307692308
User 36284 does not improve AUC. Reverting changes.
Training on augumented user 131578 47/50 current_auc = 0.7938461538461539
User 131578 AUC after training: 0.7938461538461539
User 131578 does not improve AUC. Reverting changes.
Training on augumented user 81074 48/50 current_auc = 0.7938461538461539
User 81074 AUC after training: 0.7907692307692308
User 81074 does not improve AUC. Reverting changes.
Training on augumented user 40558 49/50 current_auc = 0.7938461538461539
User 40558 AUC after training: 0.7938461538461539
User 40558 does not improve AUC. Reverting changes.
[2024-12-02 18:28:05.556848] start test user 126034 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:06.432947] start test user 126034 93/567 recall augumented users by random, augumented_users = [138341, 71525, 70259, 89730, 79432, 2311, 65533, 104122, 71135, 43071, 62258, 84084, 112781, 135731, 101886, 118644, 121222, 80736, 29165, 65664, 134152, 110106, 22329, 3809, 97026, 107018, 80250, 123383, 49038, 67483, 129302, 14389, 30787, 95941, 5275, 94182, 10268, 134678, 92524, 60308, 124951, 32765, 39540, 20692, 43819, 67382, 104823, 63592, 77163, 67621]
[2024-12-02 18:28:06.463915] user = 126034 Cloud 93/567
[2024-12-02 18:28:06.489475] user = 126034 Local 93/567
[2024-12-02 18:28:06.521447] user = 126034 Local+ 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:09.662490] user = 126034 MPDA- 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5718749999999999
Training on augumented user 138341 0/50 current_auc = 0.5718749999999999
User 138341 AUC after training: 0.5708333333333333
User 138341 does not improve AUC. Reverting changes.
Training on augumented user 71525 1/50 current_auc = 0.5718749999999999
User 71525 AUC after training: 0.5708333333333333
User 71525 does not improve AUC. Reverting changes.
Training on augumented user 70259 2/50 current_auc = 0.5718749999999999
User 70259 AUC after training: 0.5718749999999999
User 70259 does not improve AUC. Reverting changes.
Training on augumented user 89730 3/50 current_auc = 0.5718749999999999
User 89730 AUC after training: 0.5708333333333333
User 89730 does not improve AUC. Reverting changes.
Training on augumented user 79432 4/50 current_auc = 0.5718749999999999
User 79432 AUC after training: 0.5729166666666666
User 79432 improves AUC. Keeping the model.
Training on augumented user 2311 5/50 current_auc = 0.5729166666666666
User 2311 AUC after training: 0.5708333333333333
User 2311 does not improve AUC. Reverting changes.
Training on augumented user 65533 6/50 current_auc = 0.5729166666666666
User 65533 AUC after training: 0.5729166666666666
User 65533 does not improve AUC. Reverting changes.
Training on augumented user 104122 7/50 current_auc = 0.5729166666666666
User 104122 AUC after training: 0.5729166666666666
User 104122 does not improve AUC. Reverting changes.
Training on augumented user 71135 8/50 current_auc = 0.5729166666666666
User 71135 AUC after training: 0.5708333333333333
User 71135 does not improve AUC. Reverting changes.
Training on augumented user 43071 9/50 current_auc = 0.5729166666666666
User 43071 AUC after training: 0.5760416666666666
User 43071 improves AUC. Keeping the model.
Training on augumented user 62258 10/50 current_auc = 0.5760416666666666
User 62258 AUC after training: 0.5718749999999999
User 62258 does not improve AUC. Reverting changes.
Training on augumented user 84084 11/50 current_auc = 0.5760416666666666
User 84084 AUC after training: 0.5739583333333333
User 84084 does not improve AUC. Reverting changes.
Training on augumented user 112781 12/50 current_auc = 0.5760416666666666
User 112781 AUC after training: 0.5770833333333333
User 112781 improves AUC. Keeping the model.
Training on augumented user 135731 13/50 current_auc = 0.5770833333333333
User 135731 AUC after training: 0.575
User 135731 does not improve AUC. Reverting changes.
Training on augumented user 101886 14/50 current_auc = 0.5770833333333333
User 101886 AUC after training: 0.5760416666666666
User 101886 does not improve AUC. Reverting changes.
Training on augumented user 118644 15/50 current_auc = 0.5770833333333333
User 118644 AUC after training: 0.571875
User 118644 does not improve AUC. Reverting changes.
Training on augumented user 121222 16/50 current_auc = 0.5770833333333333
User 121222 AUC after training: 0.5770833333333333
User 121222 does not improve AUC. Reverting changes.
Training on augumented user 80736 17/50 current_auc = 0.5770833333333333
User 80736 AUC after training: 0.5791666666666667
User 80736 improves AUC. Keeping the model.
Training on augumented user 29165 18/50 current_auc = 0.5791666666666667
User 29165 AUC after training: 0.5729166666666666
User 29165 does not improve AUC. Reverting changes.
Training on augumented user 65664 19/50 current_auc = 0.5791666666666667
User 65664 AUC after training: 0.5749999999999998
User 65664 does not improve AUC. Reverting changes.
Training on augumented user 134152 20/50 current_auc = 0.5791666666666667
User 134152 AUC after training: 0.5729166666666666
User 134152 does not improve AUC. Reverting changes.
Training on augumented user 110106 21/50 current_auc = 0.5791666666666667
User 110106 AUC after training: 0.5718749999999999
User 110106 does not improve AUC. Reverting changes.
Training on augumented user 22329 22/50 current_auc = 0.5791666666666667
User 22329 AUC after training: 0.5760416666666666
User 22329 does not improve AUC. Reverting changes.
Training on augumented user 3809 23/50 current_auc = 0.5791666666666667
User 3809 AUC after training: 0.5791666666666666
User 3809 does not improve AUC. Reverting changes.
Training on augumented user 97026 24/50 current_auc = 0.5791666666666667
User 97026 AUC after training: 0.575
User 97026 does not improve AUC. Reverting changes.
Training on augumented user 107018 25/50 current_auc = 0.5791666666666667
User 107018 AUC after training: 0.5770833333333333
User 107018 does not improve AUC. Reverting changes.
Training on augumented user 80250 26/50 current_auc = 0.5791666666666667
User 80250 AUC after training: 0.5770833333333333
User 80250 does not improve AUC. Reverting changes.
Training on augumented user 123383 27/50 current_auc = 0.5791666666666667
User 123383 AUC after training: 0.575
User 123383 does not improve AUC. Reverting changes.
Training on augumented user 49038 28/50 current_auc = 0.5791666666666667
User 49038 AUC after training: 0.578125
User 49038 does not improve AUC. Reverting changes.
Training on augumented user 67483 29/50 current_auc = 0.5791666666666667
User 67483 AUC after training: 0.5770833333333333
User 67483 does not improve AUC. Reverting changes.
Training on augumented user 129302 30/50 current_auc = 0.5791666666666667
User 129302 AUC after training: 0.5770833333333333
User 129302 does not improve AUC. Reverting changes.
Training on augumented user 14389 31/50 current_auc = 0.5791666666666667
User 14389 AUC after training: 0.5760416666666666
User 14389 does not improve AUC. Reverting changes.
Training on augumented user 30787 32/50 current_auc = 0.5791666666666667
User 30787 AUC after training: 0.578125
User 30787 does not improve AUC. Reverting changes.
Training on augumented user 95941 33/50 current_auc = 0.5791666666666667
User 95941 AUC after training: 0.5708333333333333
User 95941 does not improve AUC. Reverting changes.
Training on augumented user 5275 34/50 current_auc = 0.5791666666666667
User 5275 AUC after training: 0.575
User 5275 does not improve AUC. Reverting changes.
Training on augumented user 94182 35/50 current_auc = 0.5791666666666667
User 94182 AUC after training: 0.5729166666666666
User 94182 does not improve AUC. Reverting changes.
Training on augumented user 10268 36/50 current_auc = 0.5791666666666667
User 10268 AUC after training: 0.5739583333333332
User 10268 does not improve AUC. Reverting changes.
Training on augumented user 134678 37/50 current_auc = 0.5791666666666667
User 134678 AUC after training: 0.578125
User 134678 does not improve AUC. Reverting changes.
Training on augumented user 92524 38/50 current_auc = 0.5791666666666667
User 92524 AUC after training: 0.5760416666666666
User 92524 does not improve AUC. Reverting changes.
Training on augumented user 60308 39/50 current_auc = 0.5791666666666667
User 60308 AUC after training: 0.578125
User 60308 does not improve AUC. Reverting changes.
Training on augumented user 124951 40/50 current_auc = 0.5791666666666667
User 124951 AUC after training: 0.575
User 124951 does not improve AUC. Reverting changes.
Training on augumented user 32765 41/50 current_auc = 0.5791666666666667
User 32765 AUC after training: 0.5781249999999999
User 32765 does not improve AUC. Reverting changes.
Training on augumented user 39540 42/50 current_auc = 0.5791666666666667
User 39540 AUC after training: 0.5770833333333333
User 39540 does not improve AUC. Reverting changes.
Training on augumented user 20692 43/50 current_auc = 0.5791666666666667
User 20692 AUC after training: 0.578125
User 20692 does not improve AUC. Reverting changes.
Training on augumented user 43819 44/50 current_auc = 0.5791666666666667
User 43819 AUC after training: 0.575
User 43819 does not improve AUC. Reverting changes.
Training on augumented user 67382 45/50 current_auc = 0.5791666666666667
User 67382 AUC after training: 0.575
User 67382 does not improve AUC. Reverting changes.
Training on augumented user 104823 46/50 current_auc = 0.5791666666666667
User 104823 AUC after training: 0.575
User 104823 does not improve AUC. Reverting changes.
Training on augumented user 63592 47/50 current_auc = 0.5791666666666667
User 63592 AUC after training: 0.5760416666666667
User 63592 does not improve AUC. Reverting changes.
Training on augumented user 77163 48/50 current_auc = 0.5791666666666667
User 77163 AUC after training: 0.5770833333333333
User 77163 does not improve AUC. Reverting changes.
Training on augumented user 67621 49/50 current_auc = 0.5791666666666667
User 67621 AUC after training: 0.5739583333333333
User 67621 does not improve AUC. Reverting changes.
[2024-12-02 18:28:41.945728] start test user 126040 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:42.496852] start test user 126040 94/567 recall augumented users by random, augumented_users = [118629, 8579, 63678, 18364, 57714, 45065, 99337, 51032, 93034, 48614, 126951, 106492, 122912, 133022, 109160, 12129, 73446, 123248, 47251, 75901, 77116, 25046, 72274, 66167, 54978, 41947, 1423, 11675, 40417, 94255, 69752, 113440, 72724, 100196, 35941, 57464, 9777, 41714, 59374, 18354, 109738, 59413, 65274, 93200, 105271, 110178, 90671, 85525, 114144, 28254]
[2024-12-02 18:28:42.515057] user = 126040 Cloud 94/567
[2024-12-02 18:28:42.538418] user = 126040 Local 94/567
[2024-12-02 18:28:42.634770] user = 126040 Local+ 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:44.637869] user = 126040 MPDA- 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6508902411539329
Training on augumented user 118629 0/50 current_auc = 0.6508902411539329
User 118629 AUC after training: 0.650664863646608
User 118629 does not improve AUC. Reverting changes.
Training on augumented user 8579 1/50 current_auc = 0.6508902411539329
User 8579 AUC after training: 0.650664863646608
User 8579 does not improve AUC. Reverting changes.
Training on augumented user 63678 2/50 current_auc = 0.6508902411539329
User 63678 AUC after training: 0.6508902411539328
User 63678 does not improve AUC. Reverting changes.
Training on augumented user 18364 3/50 current_auc = 0.6508902411539329
User 18364 AUC after training: 0.6511156186612576
User 18364 improves AUC. Keeping the model.
Training on augumented user 57714 4/50 current_auc = 0.6511156186612576
User 57714 AUC after training: 0.6511156186612576
User 57714 does not improve AUC. Reverting changes.
Training on augumented user 45065 5/50 current_auc = 0.6511156186612576
User 45065 AUC after training: 0.6540455262564796
User 45065 improves AUC. Keeping the model.
Training on augumented user 99337 6/50 current_auc = 0.6540455262564796
User 99337 AUC after training: 0.6535947712418301
User 99337 does not improve AUC. Reverting changes.
Training on augumented user 51032 7/50 current_auc = 0.6540455262564796
User 51032 AUC after training: 0.6533693937345053
User 51032 does not improve AUC. Reverting changes.
Training on augumented user 93034 8/50 current_auc = 0.6540455262564796
User 93034 AUC after training: 0.6533693937345052
User 93034 does not improve AUC. Reverting changes.
Training on augumented user 48614 9/50 current_auc = 0.6540455262564796
User 48614 AUC after training: 0.652693261212531
User 48614 does not improve AUC. Reverting changes.
Training on augumented user 126951 10/50 current_auc = 0.6540455262564796
User 126951 AUC after training: 0.6520171286905566
User 126951 does not improve AUC. Reverting changes.
Training on augumented user 106492 11/50 current_auc = 0.6540455262564796
User 106492 AUC after training: 0.6549470362857787
User 106492 improves AUC. Keeping the model.
Training on augumented user 122912 12/50 current_auc = 0.6549470362857787
User 122912 AUC after training: 0.6544962812711291
User 122912 does not improve AUC. Reverting changes.
Training on augumented user 133022 13/50 current_auc = 0.6549470362857787
User 133022 AUC after training: 0.6524678837052063
User 133022 does not improve AUC. Reverting changes.
Training on augumented user 109160 14/50 current_auc = 0.6549470362857787
User 109160 AUC after training: 0.6549470362857787
User 109160 does not improve AUC. Reverting changes.
Training on augumented user 12129 15/50 current_auc = 0.6549470362857787
User 12129 AUC after training: 0.6538201487491548
User 12129 does not improve AUC. Reverting changes.
Training on augumented user 73446 16/50 current_auc = 0.6549470362857787
User 73446 AUC after training: 0.6553977913004282
User 73446 improves AUC. Keeping the model.
Training on augumented user 123248 17/50 current_auc = 0.6553977913004282
User 123248 AUC after training: 0.6551724137931034
User 123248 does not improve AUC. Reverting changes.
Training on augumented user 47251 18/50 current_auc = 0.6553977913004282
User 47251 AUC after training: 0.6544962812711291
User 47251 does not improve AUC. Reverting changes.
Training on augumented user 75901 19/50 current_auc = 0.6553977913004282
User 75901 AUC after training: 0.6547216587784539
User 75901 does not improve AUC. Reverting changes.
Training on augumented user 77116 20/50 current_auc = 0.6553977913004282
User 77116 AUC after training: 0.6549470362857787
User 77116 does not improve AUC. Reverting changes.
Training on augumented user 25046 21/50 current_auc = 0.6553977913004282
User 25046 AUC after training: 0.6553977913004282
User 25046 does not improve AUC. Reverting changes.
Training on augumented user 72274 22/50 current_auc = 0.6553977913004282
User 72274 AUC after training: 0.6547216587784538
User 72274 does not improve AUC. Reverting changes.
Training on augumented user 66167 23/50 current_auc = 0.6553977913004282
User 66167 AUC after training: 0.6538201487491548
User 66167 does not improve AUC. Reverting changes.
Training on augumented user 54978 24/50 current_auc = 0.6553977913004282
User 54978 AUC after training: 0.655623168807753
User 54978 improves AUC. Keeping the model.
Training on augumented user 41947 25/50 current_auc = 0.655623168807753
User 41947 AUC after training: 0.6549470362857788
User 41947 does not improve AUC. Reverting changes.
Training on augumented user 1423 26/50 current_auc = 0.655623168807753
User 1423 AUC after training: 0.6551724137931034
User 1423 does not improve AUC. Reverting changes.
Training on augumented user 11675 27/50 current_auc = 0.655623168807753
User 11675 AUC after training: 0.6551724137931034
User 11675 does not improve AUC. Reverting changes.
Training on augumented user 40417 28/50 current_auc = 0.655623168807753
User 40417 AUC after training: 0.6560739238224025
User 40417 improves AUC. Keeping the model.
Training on augumented user 94255 29/50 current_auc = 0.6560739238224025
User 94255 AUC after training: 0.6553977913004282
User 94255 does not improve AUC. Reverting changes.
Training on augumented user 69752 30/50 current_auc = 0.6560739238224025
User 69752 AUC after training: 0.6562993013297274
User 69752 improves AUC. Keeping the model.
Training on augumented user 113440 31/50 current_auc = 0.6562993013297274
User 113440 AUC after training: 0.655623168807753
User 113440 does not improve AUC. Reverting changes.
Training on augumented user 72724 32/50 current_auc = 0.6562993013297274
User 72724 AUC after training: 0.6551724137931034
User 72724 does not improve AUC. Reverting changes.
Training on augumented user 100196 33/50 current_auc = 0.6562993013297274
User 100196 AUC after training: 0.6553977913004283
User 100196 does not improve AUC. Reverting changes.
Training on augumented user 35941 34/50 current_auc = 0.6562993013297274
User 35941 AUC after training: 0.6551724137931034
User 35941 does not improve AUC. Reverting changes.
Training on augumented user 57464 35/50 current_auc = 0.6562993013297274
User 57464 AUC after training: 0.6549470362857788
User 57464 does not improve AUC. Reverting changes.
Training on augumented user 9777 36/50 current_auc = 0.6562993013297274
User 9777 AUC after training: 0.6560739238224025
User 9777 does not improve AUC. Reverting changes.
Training on augumented user 41714 37/50 current_auc = 0.6562993013297274
User 41714 AUC after training: 0.6549470362857787
User 41714 does not improve AUC. Reverting changes.
Training on augumented user 59374 38/50 current_auc = 0.6562993013297274
User 59374 AUC after training: 0.6553977913004283
User 59374 does not improve AUC. Reverting changes.
Training on augumented user 18354 39/50 current_auc = 0.6562993013297274
User 18354 AUC after training: 0.6544962812711292
User 18354 does not improve AUC. Reverting changes.
Training on augumented user 109738 40/50 current_auc = 0.6562993013297274
User 109738 AUC after training: 0.6558485463150777
User 109738 does not improve AUC. Reverting changes.
Training on augumented user 59413 41/50 current_auc = 0.6562993013297274
User 59413 AUC after training: 0.6553977913004282
User 59413 does not improve AUC. Reverting changes.
Training on augumented user 65274 42/50 current_auc = 0.6562993013297274
User 65274 AUC after training: 0.6560739238224025
User 65274 does not improve AUC. Reverting changes.
Training on augumented user 93200 43/50 current_auc = 0.6562993013297274
User 93200 AUC after training: 0.6562993013297274
User 93200 does not improve AUC. Reverting changes.
Training on augumented user 105271 44/50 current_auc = 0.6562993013297274
User 105271 AUC after training: 0.6551724137931034
User 105271 does not improve AUC. Reverting changes.
Training on augumented user 110178 45/50 current_auc = 0.6562993013297274
User 110178 AUC after training: 0.6549470362857788
User 110178 does not improve AUC. Reverting changes.
Training on augumented user 90671 46/50 current_auc = 0.6562993013297274
User 90671 AUC after training: 0.655623168807753
User 90671 does not improve AUC. Reverting changes.
Training on augumented user 85525 47/50 current_auc = 0.6562993013297274
User 85525 AUC after training: 0.6557358575614154
User 85525 does not improve AUC. Reverting changes.
Training on augumented user 114144 48/50 current_auc = 0.6562993013297274
User 114144 AUC after training: 0.6551724137931034
User 114144 does not improve AUC. Reverting changes.
Training on augumented user 28254 49/50 current_auc = 0.6562993013297274
User 28254 AUC after training: 0.6560739238224025
User 28254 does not improve AUC. Reverting changes.
[2024-12-02 18:29:13.958698] start test user 126055 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:14.457169] start test user 126055 95/567 recall augumented users by random, augumented_users = [27460, 35156, 105213, 113015, 21173, 43204, 8504, 110717, 82065, 66047, 51818, 104484, 40546, 112325, 78932, 38764, 83736, 31445, 76553, 87636, 54686, 134618, 13128, 18041, 21409, 119250, 28664, 112564, 45610, 445, 48073, 134338, 75462, 4545, 137193, 26409, 136379, 117553, 135168, 100506, 5467, 53819, 103517, 15644, 72819, 136796, 107089, 102044, 8886, 8066]
[2024-12-02 18:29:14.472312] user = 126055 Cloud 95/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:29:14.491851] user = 126055 Local 95/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:29:14.522603] user = 126055 Local+ 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:29:16.385595] user = 126055 MPDA- 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 27460 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27460 AUC after training: 0.5
User 27460 does not improve AUC. Reverting changes.
Training on augumented user 35156 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35156 AUC after training: 0.5
User 35156 does not improve AUC. Reverting changes.
Training on augumented user 105213 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105213 AUC after training: 0.5
User 105213 does not improve AUC. Reverting changes.
Training on augumented user 113015 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113015 AUC after training: 0.5
User 113015 does not improve AUC. Reverting changes.
Training on augumented user 21173 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21173 AUC after training: 0.5
User 21173 does not improve AUC. Reverting changes.
Training on augumented user 43204 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43204 AUC after training: 0.5
User 43204 does not improve AUC. Reverting changes.
Training on augumented user 8504 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8504 AUC after training: 0.5
User 8504 does not improve AUC. Reverting changes.
Training on augumented user 110717 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110717 AUC after training: 0.5
User 110717 does not improve AUC. Reverting changes.
Training on augumented user 82065 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82065 AUC after training: 0.5
User 82065 does not improve AUC. Reverting changes.
Training on augumented user 66047 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66047 AUC after training: 0.5
User 66047 does not improve AUC. Reverting changes.
Training on augumented user 51818 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51818 AUC after training: 0.5
User 51818 does not improve AUC. Reverting changes.
Training on augumented user 104484 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104484 AUC after training: 0.5
User 104484 does not improve AUC. Reverting changes.
Training on augumented user 40546 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40546 AUC after training: 0.5
User 40546 does not improve AUC. Reverting changes.
Training on augumented user 112325 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112325 AUC after training: 0.5
User 112325 does not improve AUC. Reverting changes.
Training on augumented user 78932 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78932 AUC after training: 0.5
User 78932 does not improve AUC. Reverting changes.
Training on augumented user 38764 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38764 AUC after training: 0.5
User 38764 does not improve AUC. Reverting changes.
Training on augumented user 83736 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83736 AUC after training: 0.5
User 83736 does not improve AUC. Reverting changes.
Training on augumented user 31445 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31445 AUC after training: 0.5
User 31445 does not improve AUC. Reverting changes.
Training on augumented user 76553 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76553 AUC after training: 0.5
User 76553 does not improve AUC. Reverting changes.
Training on augumented user 87636 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87636 AUC after training: 0.5
User 87636 does not improve AUC. Reverting changes.
Training on augumented user 54686 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54686 AUC after training: 0.5
User 54686 does not improve AUC. Reverting changes.
Training on augumented user 134618 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134618 AUC after training: 0.5
User 134618 does not improve AUC. Reverting changes.
Training on augumented user 13128 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13128 AUC after training: 0.5
User 13128 does not improve AUC. Reverting changes.
Training on augumented user 18041 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18041 AUC after training: 0.5
User 18041 does not improve AUC. Reverting changes.
Training on augumented user 21409 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21409 AUC after training: 0.5
User 21409 does not improve AUC. Reverting changes.
Training on augumented user 119250 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119250 AUC after training: 0.5
User 119250 does not improve AUC. Reverting changes.
Training on augumented user 28664 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28664 AUC after training: 0.5
User 28664 does not improve AUC. Reverting changes.
Training on augumented user 112564 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112564 AUC after training: 0.5
User 112564 does not improve AUC. Reverting changes.
Training on augumented user 45610 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45610 AUC after training: 0.5
User 45610 does not improve AUC. Reverting changes.
Training on augumented user 445 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 445 AUC after training: 0.5
User 445 does not improve AUC. Reverting changes.
Training on augumented user 48073 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48073 AUC after training: 0.5
User 48073 does not improve AUC. Reverting changes.
Training on augumented user 134338 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134338 AUC after training: 0.5
User 134338 does not improve AUC. Reverting changes.
Training on augumented user 75462 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75462 AUC after training: 0.5
User 75462 does not improve AUC. Reverting changes.
Training on augumented user 4545 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4545 AUC after training: 0.5
User 4545 does not improve AUC. Reverting changes.
Training on augumented user 137193 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137193 AUC after training: 0.5
User 137193 does not improve AUC. Reverting changes.
Training on augumented user 26409 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26409 AUC after training: 0.5
User 26409 does not improve AUC. Reverting changes.
Training on augumented user 136379 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136379 AUC after training: 0.5
User 136379 does not improve AUC. Reverting changes.
Training on augumented user 117553 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117553 AUC after training: 0.5
User 117553 does not improve AUC. Reverting changes.
Training on augumented user 135168 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135168 AUC after training: 0.5
User 135168 does not improve AUC. Reverting changes.
Training on augumented user 100506 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100506 AUC after training: 0.5
User 100506 does not improve AUC. Reverting changes.
Training on augumented user 5467 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5467 AUC after training: 0.5
User 5467 does not improve AUC. Reverting changes.
Training on augumented user 53819 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53819 AUC after training: 0.5
User 53819 does not improve AUC. Reverting changes.
Training on augumented user 103517 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103517 AUC after training: 0.5
User 103517 does not improve AUC. Reverting changes.
Training on augumented user 15644 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15644 AUC after training: 0.5
User 15644 does not improve AUC. Reverting changes.
Training on augumented user 72819 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72819 AUC after training: 0.5
User 72819 does not improve AUC. Reverting changes.
Training on augumented user 136796 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136796 AUC after training: 0.5
User 136796 does not improve AUC. Reverting changes.
Training on augumented user 107089 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107089 AUC after training: 0.5
User 107089 does not improve AUC. Reverting changes.
Training on augumented user 102044 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102044 AUC after training: 0.5
User 102044 does not improve AUC. Reverting changes.
Training on augumented user 8886 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8886 AUC after training: 0.5
User 8886 does not improve AUC. Reverting changes.
Training on augumented user 8066 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8066 AUC after training: 0.5
User 8066 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:29:44.360931] start test user 126067 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:44.785723] start test user 126067 96/567 recall augumented users by random, augumented_users = [16175, 93874, 29530, 22933, 136443, 13566, 90764, 36549, 24863, 11094, 104014, 76614, 95888, 133827, 117236, 52163, 15613, 53413, 116228, 49138, 102774, 55166, 56157, 12118, 83924, 138375, 71719, 84972, 44826, 83997, 20498, 86092, 119309, 62786, 8151, 110060, 38335, 792, 14942, 125730, 36278, 28331, 55115, 6714, 112791, 82535, 39262, 61164, 118637, 132671]
[2024-12-02 18:29:44.802399] user = 126067 Cloud 96/567
[2024-12-02 18:29:44.831163] user = 126067 Local 96/567
[2024-12-02 18:29:44.992675] user = 126067 Local+ 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:47.988377] user = 126067 MPDA- 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7880414133738601
Training on augumented user 16175 0/50 current_auc = 0.7880414133738601
User 16175 AUC after training: 0.7889200227963526
User 16175 improves AUC. Keeping the model.
Training on augumented user 93874 1/50 current_auc = 0.7889200227963526
User 93874 AUC after training: 0.7890150075987843
User 93874 improves AUC. Keeping the model.
Training on augumented user 29530 2/50 current_auc = 0.7890150075987843
User 29530 AUC after training: 0.7888962765957447
User 29530 does not improve AUC. Reverting changes.
Training on augumented user 22933 3/50 current_auc = 0.7890150075987843
User 22933 AUC after training: 0.7886113221884498
User 22933 does not improve AUC. Reverting changes.
Training on augumented user 136443 4/50 current_auc = 0.7890150075987843
User 136443 AUC after training: 0.7887300531914894
User 136443 does not improve AUC. Reverting changes.
Training on augumented user 13566 5/50 current_auc = 0.7890150075987843
User 13566 AUC after training: 0.7890625
User 13566 improves AUC. Keeping the model.
Training on augumented user 90764 6/50 current_auc = 0.7890625
User 90764 AUC after training: 0.788563829787234
User 90764 does not improve AUC. Reverting changes.
Training on augumented user 36549 7/50 current_auc = 0.7890625
User 36549 AUC after training: 0.7890625
User 36549 does not improve AUC. Reverting changes.
Training on augumented user 24863 8/50 current_auc = 0.7890625
User 24863 AUC after training: 0.7892049772036475
User 24863 improves AUC. Keeping the model.
Training on augumented user 11094 9/50 current_auc = 0.7892049772036475
User 11094 AUC after training: 0.7887775455927052
User 11094 does not improve AUC. Reverting changes.
Training on augumented user 104014 10/50 current_auc = 0.7892049772036475
User 104014 AUC after training: 0.7879939209726443
User 104014 does not improve AUC. Reverting changes.
Training on augumented user 76614 11/50 current_auc = 0.7892049772036475
User 76614 AUC after training: 0.7889200227963525
User 76614 does not improve AUC. Reverting changes.
Training on augumented user 95888 12/50 current_auc = 0.7892049772036475
User 95888 AUC after training: 0.788825037993921
User 95888 does not improve AUC. Reverting changes.
Training on augumented user 133827 13/50 current_auc = 0.7892049772036475
User 133827 AUC after training: 0.7890625
User 133827 does not improve AUC. Reverting changes.
Training on augumented user 117236 14/50 current_auc = 0.7892049772036475
User 117236 AUC after training: 0.7892049772036474
User 117236 does not improve AUC. Reverting changes.
Training on augumented user 52163 15/50 current_auc = 0.7892049772036475
User 52163 AUC after training: 0.7888725303951368
User 52163 does not improve AUC. Reverting changes.
Training on augumented user 15613 16/50 current_auc = 0.7892049772036475
User 15613 AUC after training: 0.7876852203647416
User 15613 does not improve AUC. Reverting changes.
Training on augumented user 53413 17/50 current_auc = 0.7892049772036475
User 53413 AUC after training: 0.7884213525835866
User 53413 does not improve AUC. Reverting changes.
Training on augumented user 116228 18/50 current_auc = 0.7892049772036475
User 116228 AUC after training: 0.7891099924012158
User 116228 does not improve AUC. Reverting changes.
Training on augumented user 49138 19/50 current_auc = 0.7892049772036475
User 49138 AUC after training: 0.7885163373860182
User 49138 does not improve AUC. Reverting changes.
Training on augumented user 102774 20/50 current_auc = 0.7892049772036475
User 102774 AUC after training: 0.7889200227963526
User 102774 does not improve AUC. Reverting changes.
Training on augumented user 55166 21/50 current_auc = 0.7892049772036475
User 55166 AUC after training: 0.7890624999999999
User 55166 does not improve AUC. Reverting changes.
Training on augumented user 56157 22/50 current_auc = 0.7892049772036475
User 56157 AUC after training: 0.7888962765957448
User 56157 does not improve AUC. Reverting changes.
Training on augumented user 12118 23/50 current_auc = 0.7892049772036475
User 12118 AUC after training: 0.7887300531914895
User 12118 does not improve AUC. Reverting changes.
Training on augumented user 83924 24/50 current_auc = 0.7892049772036475
User 83924 AUC after training: 0.7883026215805471
User 83924 does not improve AUC. Reverting changes.
Training on augumented user 138375 25/50 current_auc = 0.7892049772036475
User 138375 AUC after training: 0.7887537993920973
User 138375 does not improve AUC. Reverting changes.
Training on augumented user 71719 26/50 current_auc = 0.7892049772036475
User 71719 AUC after training: 0.788587575987842
User 71719 does not improve AUC. Reverting changes.
Training on augumented user 84972 27/50 current_auc = 0.7892049772036475
User 84972 AUC after training: 0.7891099924012158
User 84972 does not improve AUC. Reverting changes.
Training on augumented user 44826 28/50 current_auc = 0.7892049772036475
User 44826 AUC after training: 0.7885875759878419
User 44826 does not improve AUC. Reverting changes.
Training on augumented user 83997 29/50 current_auc = 0.7892049772036475
User 83997 AUC after training: 0.7888487841945289
User 83997 does not improve AUC. Reverting changes.
Training on augumented user 20498 30/50 current_auc = 0.7892049772036475
User 20498 AUC after training: 0.7892999620060791
User 20498 improves AUC. Keeping the model.
Training on augumented user 86092 31/50 current_auc = 0.7892999620060791
User 86092 AUC after training: 0.7887300531914894
User 86092 does not improve AUC. Reverting changes.
Training on augumented user 119309 32/50 current_auc = 0.7892999620060791
User 119309 AUC after training: 0.7878989361702128
User 119309 does not improve AUC. Reverting changes.
Training on augumented user 62786 33/50 current_auc = 0.7892999620060791
User 62786 AUC after training: 0.7887300531914894
User 62786 does not improve AUC. Reverting changes.
Training on augumented user 8151 34/50 current_auc = 0.7892999620060791
User 8151 AUC after training: 0.7892524696048633
User 8151 does not improve AUC. Reverting changes.
Training on augumented user 110060 35/50 current_auc = 0.7892999620060791
User 110060 AUC after training: 0.7887300531914893
User 110060 does not improve AUC. Reverting changes.
Training on augumented user 38335 36/50 current_auc = 0.7892999620060791
User 38335 AUC after training: 0.7892524696048632
User 38335 does not improve AUC. Reverting changes.
Training on augumented user 792 37/50 current_auc = 0.7892999620060791
User 792 AUC after training: 0.789086246200608
User 792 does not improve AUC. Reverting changes.
Training on augumented user 14942 38/50 current_auc = 0.7892999620060791
User 14942 AUC after training: 0.788825037993921
User 14942 does not improve AUC. Reverting changes.
Training on augumented user 125730 39/50 current_auc = 0.7892999620060791
User 125730 AUC after training: 0.7889200227963525
User 125730 does not improve AUC. Reverting changes.
Training on augumented user 36278 40/50 current_auc = 0.7892999620060791
User 36278 AUC after training: 0.7882076367781155
User 36278 does not improve AUC. Reverting changes.
Training on augumented user 28331 41/50 current_auc = 0.7892999620060791
User 28331 AUC after training: 0.7891574848024316
User 28331 does not improve AUC. Reverting changes.
Training on augumented user 55115 42/50 current_auc = 0.7892999620060791
User 55115 AUC after training: 0.7891099924012158
User 55115 does not improve AUC. Reverting changes.
Training on augumented user 6714 43/50 current_auc = 0.7892999620060791
User 6714 AUC after training: 0.7884688449848025
User 6714 does not improve AUC. Reverting changes.
Training on augumented user 112791 44/50 current_auc = 0.7892999620060791
User 112791 AUC after training: 0.7889675151975684
User 112791 does not improve AUC. Reverting changes.
Training on augumented user 82535 45/50 current_auc = 0.7892999620060791
User 82535 AUC after training: 0.7891099924012158
User 82535 does not improve AUC. Reverting changes.
Training on augumented user 39262 46/50 current_auc = 0.7892999620060791
User 39262 AUC after training: 0.7889200227963525
User 39262 does not improve AUC. Reverting changes.
Training on augumented user 61164 47/50 current_auc = 0.7892999620060791
User 61164 AUC after training: 0.7891099924012158
User 61164 does not improve AUC. Reverting changes.
Training on augumented user 118637 48/50 current_auc = 0.7892999620060791
User 118637 AUC after training: 0.7892049772036475
User 118637 does not improve AUC. Reverting changes.
Training on augumented user 132671 49/50 current_auc = 0.7892999620060791
User 132671 AUC after training: 0.7890150075987842
User 132671 does not improve AUC. Reverting changes.
[2024-12-02 18:30:21.136098] start test user 126098 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:22.059901] start test user 126098 97/567 recall augumented users by random, augumented_users = [35041, 117084, 74092, 107376, 48632, 115108, 123911, 17636, 73313, 104487, 2364, 95367, 53114, 122147, 3390, 106858, 67956, 124149, 56653, 117453, 132982, 71510, 102088, 52085, 136295, 131728, 56037, 7637, 75719, 96154, 56403, 88611, 39230, 32486, 8923, 107799, 91230, 78391, 31004, 86650, 125284, 63971, 11831, 121863, 125896, 80397, 119077, 134954, 100246, 20293]
[2024-12-02 18:30:22.077598] user = 126098 Cloud 97/567
[2024-12-02 18:30:22.090329] user = 126098 Local 97/567
[2024-12-02 18:30:22.283461] user = 126098 Local+ 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:24.467807] user = 126098 MPDA- 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6168981481481481
Training on augumented user 35041 0/50 current_auc = 0.6168981481481481
User 35041 AUC after training: 0.6157407407407407
User 35041 does not improve AUC. Reverting changes.
Training on augumented user 117084 1/50 current_auc = 0.6168981481481481
User 117084 AUC after training: 0.6168981481481481
User 117084 does not improve AUC. Reverting changes.
Training on augumented user 74092 2/50 current_auc = 0.6168981481481481
User 74092 AUC after training: 0.6168981481481481
User 74092 does not improve AUC. Reverting changes.
Training on augumented user 107376 3/50 current_auc = 0.6168981481481481
User 107376 AUC after training: 0.6180555555555556
User 107376 improves AUC. Keeping the model.
Training on augumented user 48632 4/50 current_auc = 0.6180555555555556
User 48632 AUC after training: 0.6180555555555556
User 48632 does not improve AUC. Reverting changes.
Training on augumented user 115108 5/50 current_auc = 0.6180555555555556
User 115108 AUC after training: 0.6180555555555556
User 115108 does not improve AUC. Reverting changes.
Training on augumented user 123911 6/50 current_auc = 0.6180555555555556
User 123911 AUC after training: 0.6180555555555556
User 123911 does not improve AUC. Reverting changes.
Training on augumented user 17636 7/50 current_auc = 0.6180555555555556
User 17636 AUC after training: 0.6180555555555556
User 17636 does not improve AUC. Reverting changes.
Training on augumented user 73313 8/50 current_auc = 0.6180555555555556
User 73313 AUC after training: 0.6180555555555556
User 73313 does not improve AUC. Reverting changes.
Training on augumented user 104487 9/50 current_auc = 0.6180555555555556
User 104487 AUC after training: 0.6180555555555556
User 104487 does not improve AUC. Reverting changes.
Training on augumented user 2364 10/50 current_auc = 0.6180555555555556
User 2364 AUC after training: 0.6180555555555556
User 2364 does not improve AUC. Reverting changes.
Training on augumented user 95367 11/50 current_auc = 0.6180555555555556
User 95367 AUC after training: 0.6168981481481481
User 95367 does not improve AUC. Reverting changes.
Training on augumented user 53114 12/50 current_auc = 0.6180555555555556
User 53114 AUC after training: 0.6180555555555556
User 53114 does not improve AUC. Reverting changes.
Training on augumented user 122147 13/50 current_auc = 0.6180555555555556
User 122147 AUC after training: 0.6180555555555556
User 122147 does not improve AUC. Reverting changes.
Training on augumented user 3390 14/50 current_auc = 0.6180555555555556
User 3390 AUC after training: 0.6180555555555556
User 3390 does not improve AUC. Reverting changes.
Training on augumented user 106858 15/50 current_auc = 0.6180555555555556
User 106858 AUC after training: 0.6180555555555556
User 106858 does not improve AUC. Reverting changes.
Training on augumented user 67956 16/50 current_auc = 0.6180555555555556
User 67956 AUC after training: 0.619212962962963
User 67956 improves AUC. Keeping the model.
Training on augumented user 124149 17/50 current_auc = 0.619212962962963
User 124149 AUC after training: 0.619212962962963
User 124149 does not improve AUC. Reverting changes.
Training on augumented user 56653 18/50 current_auc = 0.619212962962963
User 56653 AUC after training: 0.6180555555555556
User 56653 does not improve AUC. Reverting changes.
Training on augumented user 117453 19/50 current_auc = 0.619212962962963
User 117453 AUC after training: 0.619212962962963
User 117453 does not improve AUC. Reverting changes.
Training on augumented user 132982 20/50 current_auc = 0.619212962962963
User 132982 AUC after training: 0.619212962962963
User 132982 does not improve AUC. Reverting changes.
Training on augumented user 71510 21/50 current_auc = 0.619212962962963
User 71510 AUC after training: 0.619212962962963
User 71510 does not improve AUC. Reverting changes.
Training on augumented user 102088 22/50 current_auc = 0.619212962962963
User 102088 AUC after training: 0.619212962962963
User 102088 does not improve AUC. Reverting changes.
Training on augumented user 52085 23/50 current_auc = 0.619212962962963
User 52085 AUC after training: 0.6180555555555556
User 52085 does not improve AUC. Reverting changes.
Training on augumented user 136295 24/50 current_auc = 0.619212962962963
User 136295 AUC after training: 0.6180555555555556
User 136295 does not improve AUC. Reverting changes.
Training on augumented user 131728 25/50 current_auc = 0.619212962962963
User 131728 AUC after training: 0.6180555555555556
User 131728 does not improve AUC. Reverting changes.
Training on augumented user 56037 26/50 current_auc = 0.619212962962963
User 56037 AUC after training: 0.619212962962963
User 56037 does not improve AUC. Reverting changes.
Training on augumented user 7637 27/50 current_auc = 0.619212962962963
User 7637 AUC after training: 0.6180555555555556
User 7637 does not improve AUC. Reverting changes.
Training on augumented user 75719 28/50 current_auc = 0.619212962962963
User 75719 AUC after training: 0.619212962962963
User 75719 does not improve AUC. Reverting changes.
Training on augumented user 96154 29/50 current_auc = 0.619212962962963
User 96154 AUC after training: 0.6180555555555556
User 96154 does not improve AUC. Reverting changes.
Training on augumented user 56403 30/50 current_auc = 0.619212962962963
User 56403 AUC after training: 0.619212962962963
User 56403 does not improve AUC. Reverting changes.
Training on augumented user 88611 31/50 current_auc = 0.619212962962963
User 88611 AUC after training: 0.619212962962963
User 88611 does not improve AUC. Reverting changes.
Training on augumented user 39230 32/50 current_auc = 0.619212962962963
User 39230 AUC after training: 0.619212962962963
User 39230 does not improve AUC. Reverting changes.
Training on augumented user 32486 33/50 current_auc = 0.619212962962963
User 32486 AUC after training: 0.619212962962963
User 32486 does not improve AUC. Reverting changes.
Training on augumented user 8923 34/50 current_auc = 0.619212962962963
User 8923 AUC after training: 0.619212962962963
User 8923 does not improve AUC. Reverting changes.
Training on augumented user 107799 35/50 current_auc = 0.619212962962963
User 107799 AUC after training: 0.619212962962963
User 107799 does not improve AUC. Reverting changes.
Training on augumented user 91230 36/50 current_auc = 0.619212962962963
User 91230 AUC after training: 0.6180555555555556
User 91230 does not improve AUC. Reverting changes.
Training on augumented user 78391 37/50 current_auc = 0.619212962962963
User 78391 AUC after training: 0.619212962962963
User 78391 does not improve AUC. Reverting changes.
Training on augumented user 31004 38/50 current_auc = 0.619212962962963
User 31004 AUC after training: 0.619212962962963
User 31004 does not improve AUC. Reverting changes.
Training on augumented user 86650 39/50 current_auc = 0.619212962962963
User 86650 AUC after training: 0.619212962962963
User 86650 does not improve AUC. Reverting changes.
Training on augumented user 125284 40/50 current_auc = 0.619212962962963
User 125284 AUC after training: 0.6180555555555556
User 125284 does not improve AUC. Reverting changes.
Training on augumented user 63971 41/50 current_auc = 0.619212962962963
User 63971 AUC after training: 0.6180555555555556
User 63971 does not improve AUC. Reverting changes.
Training on augumented user 11831 42/50 current_auc = 0.619212962962963
User 11831 AUC after training: 0.6180555555555556
User 11831 does not improve AUC. Reverting changes.
Training on augumented user 121863 43/50 current_auc = 0.619212962962963
User 121863 AUC after training: 0.619212962962963
User 121863 does not improve AUC. Reverting changes.
Training on augumented user 125896 44/50 current_auc = 0.619212962962963
User 125896 AUC after training: 0.6203703703703703
User 125896 improves AUC. Keeping the model.
Training on augumented user 80397 45/50 current_auc = 0.6203703703703703
User 80397 AUC after training: 0.6203703703703703
User 80397 does not improve AUC. Reverting changes.
Training on augumented user 119077 46/50 current_auc = 0.6203703703703703
User 119077 AUC after training: 0.6203703703703703
User 119077 does not improve AUC. Reverting changes.
Training on augumented user 134954 47/50 current_auc = 0.6203703703703703
User 134954 AUC after training: 0.6203703703703703
User 134954 does not improve AUC. Reverting changes.
Training on augumented user 100246 48/50 current_auc = 0.6203703703703703
User 100246 AUC after training: 0.6203703703703703
User 100246 does not improve AUC. Reverting changes.
Training on augumented user 20293 49/50 current_auc = 0.6203703703703703
User 20293 AUC after training: 0.6180555555555556
User 20293 does not improve AUC. Reverting changes.
[2024-12-02 18:30:51.414531] start test user 126121 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:51.829367] start test user 126121 98/567 recall augumented users by random, augumented_users = [83783, 3817, 46701, 128798, 35577, 88755, 108427, 121939, 11650, 136443, 17019, 134533, 24738, 52906, 131261, 126776, 121501, 101158, 107596, 103783, 124438, 4367, 60568, 63187, 132104, 135893, 25386, 35867, 13521, 56021, 39131, 34435, 76546, 40318, 4402, 106532, 133957, 88125, 112779, 35346, 28226, 45223, 21833, 34819, 13250, 123140, 15383, 78993, 27712, 33303]
[2024-12-02 18:30:51.845486] user = 126121 Cloud 98/567
[2024-12-02 18:30:51.928280] user = 126121 Local 98/567
[2024-12-02 18:30:51.995671] user = 126121 Local+ 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:53.445394] user = 126121 MPDA- 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7048152493821981
Training on augumented user 83783 0/50 current_auc = 0.7048152493821981
User 83783 AUC after training: 0.7057722687257877
User 83783 improves AUC. Keeping the model.
Training on augumented user 3817 1/50 current_auc = 0.7057722687257877
User 3817 AUC after training: 0.705841095459402
User 3817 improves AUC. Keeping the model.
Training on augumented user 46701 2/50 current_auc = 0.705841095459402
User 46701 AUC after training: 0.7061426221019028
User 46701 improves AUC. Keeping the model.
Training on augumented user 128798 3/50 current_auc = 0.7061426221019028
User 128798 AUC after training: 0.7056280603315481
User 128798 does not improve AUC. Reverting changes.
Training on augumented user 35577 4/50 current_auc = 0.7061426221019028
User 35577 AUC after training: 0.7061295122478812
User 35577 does not improve AUC. Reverting changes.
Training on augumented user 88755 5/50 current_auc = 0.7061426221019028
User 88755 AUC after training: 0.7059394193645654
User 88755 does not improve AUC. Reverting changes.
Training on augumented user 108427 6/50 current_auc = 0.7061426221019028
User 108427 AUC after training: 0.7049266831413833
User 108427 does not improve AUC. Reverting changes.
Training on augumented user 121939 7/50 current_auc = 0.7061426221019028
User 121939 AUC after training: 0.7061786742004628
User 121939 improves AUC. Keeping the model.
Training on augumented user 11650 8/50 current_auc = 0.7061786742004628
User 11650 AUC after training: 0.7065621374305997
User 11650 improves AUC. Keeping the model.
Training on augumented user 136443 9/50 current_auc = 0.7065621374305997
User 136443 AUC after training: 0.7066440740182358
User 136443 improves AUC. Keeping the model.
Training on augumented user 17019 10/50 current_auc = 0.7066440740182358
User 17019 AUC after training: 0.7065588599670942
User 17019 does not improve AUC. Reverting changes.
Training on augumented user 134533 11/50 current_auc = 0.7066440740182358
User 134533 AUC after training: 0.7062933854231533
User 134533 does not improve AUC. Reverting changes.
Training on augumented user 24738 12/50 current_auc = 0.7066440740182358
User 24738 AUC after training: 0.7070242597848674
User 24738 improves AUC. Keeping the model.
Training on augumented user 52906 13/50 current_auc = 0.7070242597848674
User 52906 AUC after training: 0.7069488781242421
User 52906 does not improve AUC. Reverting changes.
Training on augumented user 131261 14/50 current_auc = 0.7070242597848674
User 131261 AUC after training: 0.7063851544013058
User 131261 does not improve AUC. Reverting changes.
Training on augumented user 126776 15/50 current_auc = 0.7070242597848674
User 126776 AUC after training: 0.7069423231972313
User 126776 does not improve AUC. Reverting changes.
Training on augumented user 121501 16/50 current_auc = 0.7070242597848674
User 121501 AUC after training: 0.7069357682702203
User 121501 does not improve AUC. Reverting changes.
Training on augumented user 101158 17/50 current_auc = 0.7070242597848674
User 101158 AUC after training: 0.707132416080547
User 101158 improves AUC. Keeping the model.
Training on augumented user 107596 18/50 current_auc = 0.707132416080547
User 107596 AUC after training: 0.7071520808615797
User 107596 improves AUC. Keeping the model.
Training on augumented user 103783 19/50 current_auc = 0.7071520808615797
User 103783 AUC after training: 0.7072635146207646
User 103783 improves AUC. Keeping the model.
Training on augumented user 124438 20/50 current_auc = 0.7072635146207646
User 124438 AUC after training: 0.7072700695477756
User 124438 improves AUC. Keeping the model.
Training on augumented user 4367 21/50 current_auc = 0.7072700695477756
User 4367 AUC after training: 0.7065260853320399
User 4367 does not improve AUC. Reverting changes.
Training on augumented user 60568 22/50 current_auc = 0.7072700695477756
User 60568 AUC after training: 0.7073946131609825
User 60568 improves AUC. Keeping the model.
Training on augumented user 63187 23/50 current_auc = 0.7073946131609825
User 63187 AUC after training: 0.7073356188178845
User 63187 does not improve AUC. Reverting changes.
Training on augumented user 132104 24/50 current_auc = 0.7073946131609825
User 132104 AUC after training: 0.707361838525928
User 132104 does not improve AUC. Reverting changes.
Training on augumented user 135893 25/50 current_auc = 0.7073946131609825
User 135893 AUC after training: 0.7073520061354117
User 135893 does not improve AUC. Reverting changes.
Training on augumented user 25386 26/50 current_auc = 0.7073946131609825
User 25386 AUC after training: 0.7074404976500587
User 25386 improves AUC. Keeping the model.
Training on augumented user 35867 27/50 current_auc = 0.7074404976500587
User 35867 AUC after training: 0.7075060469201675
User 35867 improves AUC. Keeping the model.
Training on augumented user 13521 28/50 current_auc = 0.7075060469201675
User 13521 AUC after training: 0.707663365168429
User 13521 improves AUC. Keeping the model.
Training on augumented user 56021 29/50 current_auc = 0.707663365168429
User 56021 AUC after training: 0.7080173312270169
User 56021 improves AUC. Keeping the model.
Training on augumented user 39131 30/50 current_auc = 0.7080173312270169
User 39131 AUC after training: 0.7079255622488644
User 39131 does not improve AUC. Reverting changes.
Training on augumented user 34435 31/50 current_auc = 0.7080173312270169
User 34435 AUC after training: 0.7075322666282111
User 34435 does not improve AUC. Reverting changes.
Training on augumented user 76546 32/50 current_auc = 0.7080173312270169
User 76546 AUC after training: 0.708063215716093
User 76546 improves AUC. Keeping the model.
Training on augumented user 40318 33/50 current_auc = 0.708063215716093
User 40318 AUC after training: 0.707833793270712
User 40318 does not improve AUC. Reverting changes.
Training on augumented user 4402 34/50 current_auc = 0.708063215716093
User 4402 AUC after training: 0.7082598635264197
User 4402 improves AUC. Keeping the model.
Training on augumented user 106532 35/50 current_auc = 0.7082598635264197
User 106532 AUC after training: 0.7081484297672346
User 106532 does not improve AUC. Reverting changes.
Training on augumented user 133957 36/50 current_auc = 0.7082598635264197
User 133957 AUC after training: 0.7079976664459842
User 133957 does not improve AUC. Reverting changes.
Training on augumented user 88125 37/50 current_auc = 0.7082598635264197
User 88125 AUC after training: 0.7091382237458786
User 88125 improves AUC. Keeping the model.
Training on augumented user 112779 38/50 current_auc = 0.7091382237458786
User 112779 AUC after training: 0.7079190073218534
User 112779 does not improve AUC. Reverting changes.
Training on augumented user 35346 39/50 current_auc = 0.7091382237458786
User 35346 AUC after training: 0.7091873856984603
User 35346 improves AUC. Keeping the model.
Training on augumented user 28226 40/50 current_auc = 0.7091873856984603
User 28226 AUC after training: 0.7093217617021835
User 28226 improves AUC. Keeping the model.
Training on augumented user 45223 41/50 current_auc = 0.7093217617021835
User 45223 AUC after training: 0.7090136801326716
User 45223 does not improve AUC. Reverting changes.
Training on augumented user 21833 42/50 current_auc = 0.7093217617021835
User 21833 AUC after training: 0.7094135306803359
User 21833 improves AUC. Keeping the model.
Training on augumented user 34819 43/50 current_auc = 0.7094135306803359
User 34819 AUC after training: 0.7089645181800901
User 34819 does not improve AUC. Reverting changes.
Training on augumented user 13250 44/50 current_auc = 0.7094135306803359
User 13250 AUC after training: 0.7092562124320747
User 13250 does not improve AUC. Reverting changes.
Training on augumented user 123140 45/50 current_auc = 0.7094135306803359
User 123140 AUC after training: 0.709347981410227
User 123140 does not improve AUC. Reverting changes.
Training on augumented user 15383 46/50 current_auc = 0.7094135306803359
User 15383 AUC after training: 0.7098002713739783
User 15383 improves AUC. Keeping the model.
Training on augumented user 78993 47/50 current_auc = 0.7098002713739783
User 78993 AUC after training: 0.7100001966478104
User 78993 improves AUC. Keeping the model.
Training on augumented user 27712 48/50 current_auc = 0.7100001966478104
User 27712 AUC after training: 0.7087842576872907
User 27712 does not improve AUC. Reverting changes.
Training on augumented user 33303 49/50 current_auc = 0.7100001966478104
User 33303 AUC after training: 0.7098264910820218
User 33303 does not improve AUC. Reverting changes.
[2024-12-02 18:31:21.220900] start test user 126134 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:21.925946] start test user 126134 99/567 recall augumented users by random, augumented_users = [2116, 27147, 78949, 83971, 117800, 112979, 84131, 127636, 7037, 60143, 130152, 1459, 33348, 112576, 27665, 3819, 42118, 116480, 119609, 61833, 76620, 118823, 42322, 38390, 103710, 52961, 126083, 37964, 25052, 117085, 84269, 4894, 131186, 69358, 82386, 16303, 86314, 129974, 4466, 76686, 17468, 72131, 107603, 132109, 49540, 66622, 50901, 128156, 107066, 10111]
[2024-12-02 18:31:21.975554] user = 126134 Cloud 99/567
[2024-12-02 18:31:22.065250] user = 126134 Local 99/567
[2024-12-02 18:31:22.340617] user = 126134 Local+ 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:25.038062] user = 126134 MPDA- 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5889977546438048
Training on augumented user 2116 0/50 current_auc = 0.5889977546438048
User 2116 AUC after training: 0.5896994284547867
User 2116 improves AUC. Keeping the model.
Training on augumented user 27147 1/50 current_auc = 0.5896994284547867
User 27147 AUC after training: 0.5900566442131047
User 27147 improves AUC. Keeping the model.
Training on augumented user 78949 2/50 current_auc = 0.5900566442131047
User 78949 AUC after training: 0.5900311288017963
User 78949 does not improve AUC. Reverting changes.
Training on augumented user 83971 3/50 current_auc = 0.5900566442131047
User 83971 AUC after training: 0.590605225556236
User 83971 improves AUC. Keeping the model.
Training on augumented user 117800 4/50 current_auc = 0.590605225556236
User 117800 AUC after training: 0.5900949173300674
User 117800 does not improve AUC. Reverting changes.
Training on augumented user 112979 5/50 current_auc = 0.590605225556236
User 112979 AUC after training: 0.5904266176770769
User 112979 does not improve AUC. Reverting changes.
Training on augumented user 84131 6/50 current_auc = 0.590605225556236
User 84131 AUC after training: 0.590669014084507
User 84131 improves AUC. Keeping the model.
Training on augumented user 127636 7/50 current_auc = 0.590669014084507
User 127636 AUC after training: 0.59037558685446
User 127636 does not improve AUC. Reverting changes.
Training on augumented user 7037 8/50 current_auc = 0.590669014084507
User 7037 AUC after training: 0.59037558685446
User 7037 does not improve AUC. Reverting changes.
Training on augumented user 60143 9/50 current_auc = 0.590669014084507
User 60143 AUC after training: 0.5900821596244131
User 60143 does not improve AUC. Reverting changes.
Training on augumented user 130152 10/50 current_auc = 0.590669014084507
User 130152 AUC after training: 0.5904648907940395
User 130152 does not improve AUC. Reverting changes.
Training on augumented user 1459 11/50 current_auc = 0.590669014084507
User 1459 AUC after training: 0.590732802612778
User 1459 improves AUC. Keeping the model.
Training on augumented user 33348 12/50 current_auc = 0.590732802612778
User 33348 AUC after training: 0.5901587058583385
User 33348 does not improve AUC. Reverting changes.
Training on augumented user 112576 13/50 current_auc = 0.590732802612778
User 112576 AUC after training: 0.5904393753827313
User 112576 does not improve AUC. Reverting changes.
Training on augumented user 27665 14/50 current_auc = 0.590732802612778
User 27665 AUC after training: 0.5903628291488059
User 27665 does not improve AUC. Reverting changes.
Training on augumented user 3819 15/50 current_auc = 0.590732802612778
User 3819 AUC after training: 0.5907455603184323
User 3819 improves AUC. Keeping the model.
Training on augumented user 42118 16/50 current_auc = 0.5907455603184323
User 42118 AUC after training: 0.5904776484996939
User 42118 does not improve AUC. Reverting changes.
Training on augumented user 116480 17/50 current_auc = 0.5907455603184323
User 116480 AUC after training: 0.5900694019187589
User 116480 does not improve AUC. Reverting changes.
Training on augumented user 119609 18/50 current_auc = 0.5907455603184323
User 119609 AUC after training: 0.5898397632169831
User 119609 does not improve AUC. Reverting changes.
Training on augumented user 61833 19/50 current_auc = 0.5907455603184323
User 61833 AUC after training: 0.5904521330883854
User 61833 does not improve AUC. Reverting changes.
Training on augumented user 76620 20/50 current_auc = 0.5907455603184323
User 76620 AUC after training: 0.5906817717901612
User 76620 does not improve AUC. Reverting changes.
Training on augumented user 118823 21/50 current_auc = 0.5907455603184323
User 118823 AUC after training: 0.590311798326189
User 118823 does not improve AUC. Reverting changes.
Training on augumented user 42322 22/50 current_auc = 0.5907455603184323
User 42322 AUC after training: 0.5913324147785262
User 42322 improves AUC. Keeping the model.
Training on augumented user 38390 23/50 current_auc = 0.5913324147785262
User 38390 AUC after training: 0.5912941416615636
User 38390 does not improve AUC. Reverting changes.
Training on augumented user 103710 24/50 current_auc = 0.5913324147785262
User 103710 AUC after training: 0.5908731373749745
User 103710 does not improve AUC. Reverting changes.
Training on augumented user 52961 25/50 current_auc = 0.5913324147785262
User 52961 AUC after training: 0.5914472341294141
User 52961 improves AUC. Keeping the model.
Training on augumented user 126083 26/50 current_auc = 0.5914472341294141
User 126083 AUC after training: 0.5914727495407226
User 126083 improves AUC. Keeping the model.
Training on augumented user 37964 27/50 current_auc = 0.5914727495407226
User 37964 AUC after training: 0.5910900183710961
User 37964 does not improve AUC. Reverting changes.
Training on augumented user 25052 28/50 current_auc = 0.5914727495407226
User 25052 AUC after training: 0.590898652786283
User 25052 does not improve AUC. Reverting changes.
Training on augumented user 117085 29/50 current_auc = 0.5914727495407226
User 117085 AUC after training: 0.5909879567258625
User 117085 does not improve AUC. Reverting changes.
Training on augumented user 84269 30/50 current_auc = 0.5914727495407226
User 84269 AUC after training: 0.5898397632169831
User 84269 does not improve AUC. Reverting changes.
Training on augumented user 4894 31/50 current_auc = 0.5914727495407226
User 4894 AUC after training: 0.5915748111859563
User 4894 improves AUC. Keeping the model.
Training on augumented user 131186 32/50 current_auc = 0.5915748111859563
User 131186 AUC after training: 0.5913834456011431
User 131186 does not improve AUC. Reverting changes.
Training on augumented user 69358 33/50 current_auc = 0.5915748111859563
User 69358 AUC after training: 0.5912941416615636
User 69358 does not improve AUC. Reverting changes.
Training on augumented user 82386 34/50 current_auc = 0.5915748111859563
User 82386 AUC after training: 0.5911920800163298
User 82386 does not improve AUC. Reverting changes.
Training on augumented user 16303 35/50 current_auc = 0.5915748111859563
User 16303 AUC after training: 0.5901714635639927
User 16303 does not improve AUC. Reverting changes.
Training on augumented user 86314 36/50 current_auc = 0.5915748111859563
User 86314 AUC after training: 0.5907200449071239
User 86314 does not improve AUC. Reverting changes.
Training on augumented user 129974 37/50 current_auc = 0.5915748111859563
User 129974 AUC after training: 0.5912431108389468
User 129974 does not improve AUC. Reverting changes.
Training on augumented user 4466 38/50 current_auc = 0.5915748111859563
User 4466 AUC after training: 0.5915110226576852
User 4466 does not improve AUC. Reverting changes.
Training on augumented user 76686 39/50 current_auc = 0.5915748111859563
User 76686 AUC after training: 0.5916641151255357
User 76686 improves AUC. Keeping the model.
Training on augumented user 17468 40/50 current_auc = 0.5916641151255357
User 17468 AUC after training: 0.5908731373749745
User 17468 does not improve AUC. Reverting changes.
Training on augumented user 72131 41/50 current_auc = 0.5916641151255357
User 72131 AUC after training: 0.5897759746887119
User 72131 does not improve AUC. Reverting changes.
Training on augumented user 107603 42/50 current_auc = 0.5916641151255357
User 107603 AUC after training: 0.5915110226576852
User 107603 does not improve AUC. Reverting changes.
Training on augumented user 132109 43/50 current_auc = 0.5916641151255357
User 132109 AUC after training: 0.5914982649520311
User 132109 does not improve AUC. Reverting changes.
Training on augumented user 49540 44/50 current_auc = 0.5916641151255357
User 49540 AUC after training: 0.5915110226576852
User 49540 does not improve AUC. Reverting changes.
Training on augumented user 66622 45/50 current_auc = 0.5916641151255357
User 66622 AUC after training: 0.591791692182078
User 66622 improves AUC. Keeping the model.
Training on augumented user 50901 46/50 current_auc = 0.591791692182078
User 50901 AUC after training: 0.5912175954276383
User 50901 does not improve AUC. Reverting changes.
Training on augumented user 128156 47/50 current_auc = 0.591791692182078
User 128156 AUC after training: 0.5919320269442744
User 128156 improves AUC. Keeping the model.
Training on augumented user 107066 48/50 current_auc = 0.5919320269442744
User 107066 AUC after training: 0.5916641151255357
User 107066 does not improve AUC. Reverting changes.
Training on augumented user 10111 49/50 current_auc = 0.5919320269442744
User 10111 AUC after training: 0.5915237803633395
User 10111 does not improve AUC. Reverting changes.
[2024-12-02 18:31:55.354016] start test user 126184 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:55.769427] start test user 126184 100/567 recall augumented users by random, augumented_users = [98250, 82386, 48492, 19117, 100891, 46130, 97389, 32030, 99369, 108994, 95464, 36182, 60076, 83122, 2061, 44874, 6493, 54285, 22434, 21949, 120341, 65759, 133727, 114285, 43631, 4528, 72311, 104698, 74431, 131371, 5487, 81124, 72799, 128282, 20035, 121792, 67138, 54363, 64753, 118119, 136771, 43600, 126210, 92266, 81836, 35324, 30759, 17901, 67472, 87420]
[2024-12-02 18:31:55.785449] user = 126184 Cloud 100/567
[2024-12-02 18:31:55.833987] user = 126184 Local 100/567
[2024-12-02 18:31:55.945091] user = 126184 Local+ 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:58.195723] user = 126184 MPDA- 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7504989325164764
Training on augumented user 98250 0/50 current_auc = 0.7504989325164764
User 98250 AUC after training: 0.7503829016986912
User 98250 does not improve AUC. Reverting changes.
Training on augumented user 82386 1/50 current_auc = 0.7504989325164764
User 82386 AUC after training: 0.7504757263529194
User 82386 does not improve AUC. Reverting changes.
Training on augumented user 48492 2/50 current_auc = 0.7504989325164764
User 48492 AUC after training: 0.7503248862897984
User 48492 does not improve AUC. Reverting changes.
Training on augumented user 19117 3/50 current_auc = 0.7504989325164764
User 19117 AUC after training: 0.750556947925369
User 19117 improves AUC. Keeping the model.
Training on augumented user 100891 4/50 current_auc = 0.750556947925369
User 100891 AUC after training: 0.7506729787431543
User 100891 improves AUC. Keeping the model.
Training on augumented user 46130 5/50 current_auc = 0.7506729787431543
User 46130 AUC after training: 0.7504757263529194
User 46130 does not improve AUC. Reverting changes.
Training on augumented user 97389 6/50 current_auc = 0.7506729787431543
User 97389 AUC after training: 0.7506497725795972
User 97389 does not improve AUC. Reverting changes.
Training on augumented user 32030 7/50 current_auc = 0.7506729787431543
User 32030 AUC after training: 0.7508006126427179
User 32030 improves AUC. Keeping the model.
Training on augumented user 99369 8/50 current_auc = 0.7508006126427179
User 99369 AUC after training: 0.7506613756613756
User 99369 does not improve AUC. Reverting changes.
Training on augumented user 108994 9/50 current_auc = 0.7508006126427179
User 108994 AUC after training: 0.7506961849067112
User 108994 does not improve AUC. Reverting changes.
Training on augumented user 95464 10/50 current_auc = 0.7508006126427179
User 95464 AUC after training: 0.7508006126427178
User 95464 does not improve AUC. Reverting changes.
Training on augumented user 36182 11/50 current_auc = 0.7508006126427179
User 36182 AUC after training: 0.7504525201893624
User 36182 does not improve AUC. Reverting changes.
Training on augumented user 60076 12/50 current_auc = 0.7508006126427179
User 60076 AUC after training: 0.7507077879884898
User 60076 does not improve AUC. Reverting changes.
Training on augumented user 83122 13/50 current_auc = 0.7508006126427179
User 83122 AUC after training: 0.7506381694978186
User 83122 does not improve AUC. Reverting changes.
Training on augumented user 2061 14/50 current_auc = 0.7508006126427179
User 2061 AUC after training: 0.7507542003156037
User 2061 does not improve AUC. Reverting changes.
Training on augumented user 44874 15/50 current_auc = 0.7508006126427179
User 44874 AUC after training: 0.7516476376125498
User 44874 improves AUC. Keeping the model.
Training on augumented user 6493 16/50 current_auc = 0.7516476376125498
User 6493 AUC after training: 0.7519145084934559
User 6493 improves AUC. Keeping the model.
Training on augumented user 54285 17/50 current_auc = 0.7519145084934559
User 54285 AUC after training: 0.7520653485565766
User 54285 improves AUC. Keeping the model.
Training on augumented user 22434 18/50 current_auc = 0.7520653485565766
User 22434 AUC after training: 0.7518796992481203
User 22434 does not improve AUC. Reverting changes.
Training on augumented user 21949 19/50 current_auc = 0.7520653485565766
User 21949 AUC after training: 0.7519493177387915
User 21949 does not improve AUC. Reverting changes.
Training on augumented user 120341 20/50 current_auc = 0.7520653485565766
User 120341 AUC after training: 0.7520189362294627
User 120341 does not improve AUC. Reverting changes.
Training on augumented user 65759 21/50 current_auc = 0.7520653485565766
User 65759 AUC after training: 0.7516128283672143
User 65759 does not improve AUC. Reverting changes.
Training on augumented user 133727 22/50 current_auc = 0.7520653485565766
User 133727 AUC after training: 0.7519493177387914
User 133727 does not improve AUC. Reverting changes.
Training on augumented user 114285 23/50 current_auc = 0.7520653485565766
User 114285 AUC after training: 0.7521465701290263
User 114285 improves AUC. Keeping the model.
Training on augumented user 43631 24/50 current_auc = 0.7521465701290263
User 43631 AUC after training: 0.7517520653485565
User 43631 does not improve AUC. Reverting changes.
Training on augumented user 4528 25/50 current_auc = 0.7521465701290263
User 4528 AUC after training: 0.7521001578019122
User 4528 does not improve AUC. Reverting changes.
Training on augumented user 72311 26/50 current_auc = 0.7521465701290263
User 72311 AUC after training: 0.7518680961663418
User 72311 does not improve AUC. Reverting changes.
Training on augumented user 104698 27/50 current_auc = 0.7521465701290263
User 104698 AUC after training: 0.7521117608836907
User 104698 does not improve AUC. Reverting changes.
Training on augumented user 74431 28/50 current_auc = 0.7521465701290263
User 74431 AUC after training: 0.7521349670472478
User 74431 does not improve AUC. Reverting changes.
Training on augumented user 131371 29/50 current_auc = 0.7521465701290263
User 131371 AUC after training: 0.7521697762925834
User 131371 improves AUC. Keeping the model.
Training on augumented user 5487 30/50 current_auc = 0.7521697762925834
User 5487 AUC after training: 0.7526687088090597
User 5487 improves AUC. Keeping the model.
Training on augumented user 81124 31/50 current_auc = 0.7526687088090597
User 81124 AUC after training: 0.7520885547201337
User 81124 does not improve AUC. Reverting changes.
Training on augumented user 72799 32/50 current_auc = 0.7526687088090597
User 72799 AUC after training: 0.7526222964819456
User 72799 does not improve AUC. Reverting changes.
Training on augumented user 128282 33/50 current_auc = 0.7526687088090597
User 128282 AUC after training: 0.7525178687459388
User 128282 does not improve AUC. Reverting changes.
Training on augumented user 20035 34/50 current_auc = 0.7526687088090597
User 20035 AUC after training: 0.7526687088090597
User 20035 does not improve AUC. Reverting changes.
Training on augumented user 121792 35/50 current_auc = 0.7526687088090597
User 121792 AUC after training: 0.7523554256010396
User 121792 does not improve AUC. Reverting changes.
Training on augumented user 67138 36/50 current_auc = 0.7526687088090597
User 67138 AUC after training: 0.7526687088090596
User 67138 does not improve AUC. Reverting changes.
Training on augumented user 54363 37/50 current_auc = 0.7526687088090597
User 54363 AUC after training: 0.7525062656641603
User 54363 does not improve AUC. Reverting changes.
Training on augumented user 64753 38/50 current_auc = 0.7526687088090597
User 64753 AUC after training: 0.752320616355704
User 64753 does not improve AUC. Reverting changes.
Training on augumented user 118119 39/50 current_auc = 0.7526687088090597
User 118119 AUC after training: 0.7522393947832545
User 118119 does not improve AUC. Reverting changes.
Training on augumented user 136771 40/50 current_auc = 0.7526687088090597
User 136771 AUC after training: 0.7524714564188248
User 136771 does not improve AUC. Reverting changes.
Training on augumented user 43600 41/50 current_auc = 0.7526687088090597
User 43600 AUC after training: 0.7524714564188248
User 43600 does not improve AUC. Reverting changes.
Training on augumented user 126210 42/50 current_auc = 0.7526687088090597
User 126210 AUC after training: 0.7525758841548316
User 126210 does not improve AUC. Reverting changes.
Training on augumented user 92266 43/50 current_auc = 0.7526687088090597
User 92266 AUC after training: 0.7524018379281537
User 92266 does not improve AUC. Reverting changes.
Training on augumented user 81836 44/50 current_auc = 0.7526687088090597
User 81836 AUC after training: 0.7524482502552677
User 81836 does not improve AUC. Reverting changes.
Training on augumented user 35324 45/50 current_auc = 0.7526687088090597
User 35324 AUC after training: 0.7527499303815093
User 35324 improves AUC. Keeping the model.
Training on augumented user 30759 46/50 current_auc = 0.7527499303815093
User 30759 AUC after training: 0.75258748723661
User 30759 does not improve AUC. Reverting changes.
Training on augumented user 17901 47/50 current_auc = 0.7527499303815093
User 17901 AUC after training: 0.7525874872366101
User 17901 does not improve AUC. Reverting changes.
Training on augumented user 67472 48/50 current_auc = 0.7527499303815093
User 67472 AUC after training: 0.7527035180543953
User 67472 does not improve AUC. Reverting changes.
Training on augumented user 87420 49/50 current_auc = 0.7527499303815093
User 87420 AUC after training: 0.7526803118908382
User 87420 does not improve AUC. Reverting changes.
[2024-12-02 18:32:28.028954] start test user 126231 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:28.454988] start test user 126231 101/567 recall augumented users by random, augumented_users = [49894, 138342, 30047, 86156, 24689, 44093, 44646, 120454, 102528, 56821, 134504, 80973, 110538, 89412, 3913, 113291, 48952, 100486, 101723, 67635, 113842, 135338, 33888, 132249, 79999, 136256, 96220, 86645, 134434, 121786, 130503, 2822, 132652, 70652, 95314, 80243, 52735, 15701, 132680, 64584, 1101, 20661, 61105, 132361, 127150, 84827, 100253, 110722, 71107, 40416]
[2024-12-02 18:32:28.470622] user = 126231 Cloud 101/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:28.477008] user = 126231 Local 101/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:28.532165] user = 126231 Local+ 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:31.108364] user = 126231 MPDA- 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 49894 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49894 AUC after training: 0.5
User 49894 does not improve AUC. Reverting changes.
Training on augumented user 138342 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138342 AUC after training: 0.5
User 138342 does not improve AUC. Reverting changes.
Training on augumented user 30047 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30047 AUC after training: 0.5
User 30047 does not improve AUC. Reverting changes.
Training on augumented user 86156 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86156 AUC after training: 0.5
User 86156 does not improve AUC. Reverting changes.
Training on augumented user 24689 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24689 AUC after training: 0.5
User 24689 does not improve AUC. Reverting changes.
Training on augumented user 44093 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44093 AUC after training: 0.5
User 44093 does not improve AUC. Reverting changes.
Training on augumented user 44646 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44646 AUC after training: 0.5
User 44646 does not improve AUC. Reverting changes.
Training on augumented user 120454 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120454 AUC after training: 0.5
User 120454 does not improve AUC. Reverting changes.
Training on augumented user 102528 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102528 AUC after training: 0.5
User 102528 does not improve AUC. Reverting changes.
Training on augumented user 56821 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56821 AUC after training: 0.5
User 56821 does not improve AUC. Reverting changes.
Training on augumented user 134504 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134504 AUC after training: 0.5
User 134504 does not improve AUC. Reverting changes.
Training on augumented user 80973 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80973 AUC after training: 0.5
User 80973 does not improve AUC. Reverting changes.
Training on augumented user 110538 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110538 AUC after training: 0.5
User 110538 does not improve AUC. Reverting changes.
Training on augumented user 89412 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89412 AUC after training: 0.5
User 89412 does not improve AUC. Reverting changes.
Training on augumented user 3913 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3913 AUC after training: 0.5
User 3913 does not improve AUC. Reverting changes.
Training on augumented user 113291 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113291 AUC after training: 0.5
User 113291 does not improve AUC. Reverting changes.
Training on augumented user 48952 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48952 AUC after training: 0.5
User 48952 does not improve AUC. Reverting changes.
Training on augumented user 100486 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100486 AUC after training: 0.5
User 100486 does not improve AUC. Reverting changes.
Training on augumented user 101723 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101723 AUC after training: 0.5
User 101723 does not improve AUC. Reverting changes.
Training on augumented user 67635 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67635 AUC after training: 0.5
User 67635 does not improve AUC. Reverting changes.
Training on augumented user 113842 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113842 AUC after training: 0.5
User 113842 does not improve AUC. Reverting changes.
Training on augumented user 135338 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135338 AUC after training: 0.5
User 135338 does not improve AUC. Reverting changes.
Training on augumented user 33888 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33888 AUC after training: 0.5
User 33888 does not improve AUC. Reverting changes.
Training on augumented user 132249 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132249 AUC after training: 0.5
User 132249 does not improve AUC. Reverting changes.
Training on augumented user 79999 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79999 AUC after training: 0.5
User 79999 does not improve AUC. Reverting changes.
Training on augumented user 136256 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136256 AUC after training: 0.5
User 136256 does not improve AUC. Reverting changes.
Training on augumented user 96220 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96220 AUC after training: 0.5
User 96220 does not improve AUC. Reverting changes.
Training on augumented user 86645 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86645 AUC after training: 0.5
User 86645 does not improve AUC. Reverting changes.
Training on augumented user 134434 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134434 AUC after training: 0.5
User 134434 does not improve AUC. Reverting changes.
Training on augumented user 121786 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121786 AUC after training: 0.5
User 121786 does not improve AUC. Reverting changes.
Training on augumented user 130503 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130503 AUC after training: 0.5
User 130503 does not improve AUC. Reverting changes.
Training on augumented user 2822 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2822 AUC after training: 0.5
User 2822 does not improve AUC. Reverting changes.
Training on augumented user 132652 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132652 AUC after training: 0.5
User 132652 does not improve AUC. Reverting changes.
Training on augumented user 70652 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70652 AUC after training: 0.5
User 70652 does not improve AUC. Reverting changes.
Training on augumented user 95314 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95314 AUC after training: 0.5
User 95314 does not improve AUC. Reverting changes.
Training on augumented user 80243 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80243 AUC after training: 0.5
User 80243 does not improve AUC. Reverting changes.
Training on augumented user 52735 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52735 AUC after training: 0.5
User 52735 does not improve AUC. Reverting changes.
Training on augumented user 15701 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15701 AUC after training: 0.5
User 15701 does not improve AUC. Reverting changes.
Training on augumented user 132680 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132680 AUC after training: 0.5
User 132680 does not improve AUC. Reverting changes.
Training on augumented user 64584 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64584 AUC after training: 0.5
User 64584 does not improve AUC. Reverting changes.
Training on augumented user 1101 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1101 AUC after training: 0.5
User 1101 does not improve AUC. Reverting changes.
Training on augumented user 20661 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20661 AUC after training: 0.5
User 20661 does not improve AUC. Reverting changes.
Training on augumented user 61105 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61105 AUC after training: 0.5
User 61105 does not improve AUC. Reverting changes.
Training on augumented user 132361 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132361 AUC after training: 0.5
User 132361 does not improve AUC. Reverting changes.
Training on augumented user 127150 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127150 AUC after training: 0.5
User 127150 does not improve AUC. Reverting changes.
Training on augumented user 84827 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84827 AUC after training: 0.5
User 84827 does not improve AUC. Reverting changes.
Training on augumented user 100253 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100253 AUC after training: 0.5
User 100253 does not improve AUC. Reverting changes.
Training on augumented user 110722 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110722 AUC after training: 0.5
User 110722 does not improve AUC. Reverting changes.
Training on augumented user 71107 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71107 AUC after training: 0.5
User 71107 does not improve AUC. Reverting changes.
Training on augumented user 40416 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40416 AUC after training: 0.5
User 40416 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:33:02.276290] start test user 126265 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:02.679158] start test user 126265 102/567 recall augumented users by random, augumented_users = [125304, 48248, 72783, 102005, 33555, 121340, 47782, 57793, 17477, 5088, 201, 30155, 57381, 37397, 130692, 75781, 111636, 20898, 106595, 55679, 5674, 90900, 106545, 69641, 137564, 7229, 136853, 87976, 97558, 102046, 18393, 119961, 86788, 2190, 115409, 55008, 4599, 66605, 51305, 78225, 34815, 108061, 46313, 41205, 89014, 58778, 106355, 61379, 114518, 35201]
[2024-12-02 18:33:02.694944] user = 126265 Cloud 102/567
[2024-12-02 18:33:02.722158] user = 126265 Local 102/567
[2024-12-02 18:33:02.809697] user = 126265 Local+ 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:05.711305] user = 126265 MPDA- 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6778266862300476
Training on augumented user 125304 0/50 current_auc = 0.6778266862300476
User 125304 AUC after training: 0.6780934596060647
User 125304 improves AUC. Keeping the model.
Training on augumented user 48248 1/50 current_auc = 0.6780934596060647
User 48248 AUC after training: 0.6785603130140945
User 48248 improves AUC. Keeping the model.
Training on augumented user 72783 2/50 current_auc = 0.6785603130140945
User 72783 AUC after training: 0.6790271664221245
User 72783 improves AUC. Keeping the model.
Training on augumented user 102005 3/50 current_auc = 0.6790271664221245
User 102005 AUC after training: 0.6788937797341159
User 102005 does not improve AUC. Reverting changes.
Training on augumented user 33555 4/50 current_auc = 0.6790271664221245
User 33555 AUC after training: 0.6792494775688053
User 33555 improves AUC. Keeping the model.
Training on augumented user 121340 5/50 current_auc = 0.6792494775688053
User 121340 AUC after training: 0.6793828642568138
User 121340 improves AUC. Keeping the model.
Training on augumented user 47782 6/50 current_auc = 0.6793828642568138
User 47782 AUC after training: 0.6796051754034947
User 47782 improves AUC. Keeping the model.
Training on augumented user 57793 7/50 current_auc = 0.6796051754034947
User 57793 AUC after training: 0.6795162509448224
User 57793 does not improve AUC. Reverting changes.
Training on augumented user 17477 8/50 current_auc = 0.6796051754034947
User 17477 AUC after training: 0.67942732648615
User 17477 does not improve AUC. Reverting changes.
Training on augumented user 5088 9/50 current_auc = 0.6796051754034947
User 5088 AUC after training: 0.6795162509448224
User 5088 does not improve AUC. Reverting changes.
Training on augumented user 201 10/50 current_auc = 0.6796051754034947
User 201 AUC after training: 0.6798274865501757
User 201 improves AUC. Keeping the model.
Training on augumented user 30155 11/50 current_auc = 0.6798274865501757
User 30155 AUC after training: 0.6798941798941799
User 30155 improves AUC. Keeping the model.
Training on augumented user 57381 12/50 current_auc = 0.6798941798941799
User 57381 AUC after training: 0.6800942599261928
User 57381 improves AUC. Keeping the model.
Training on augumented user 37397 13/50 current_auc = 0.6800942599261928
User 37397 AUC after training: 0.6797163309768351
User 37397 does not improve AUC. Reverting changes.
Training on augumented user 130692 14/50 current_auc = 0.6800942599261928
User 130692 AUC after training: 0.6805611133342225
User 130692 improves AUC. Keeping the model.
Training on augumented user 75781 15/50 current_auc = 0.6805611133342225
User 75781 AUC after training: 0.6799831043528523
User 75781 does not improve AUC. Reverting changes.
Training on augumented user 111636 16/50 current_auc = 0.6805611133342225
User 111636 AUC after training: 0.6795607131741586
User 111636 does not improve AUC. Reverting changes.
Training on augumented user 20898 17/50 current_auc = 0.6805611133342225
User 20898 AUC after training: 0.6801609532701969
User 20898 does not improve AUC. Reverting changes.
Training on augumented user 106595 18/50 current_auc = 0.6805611133342225
User 106595 AUC after training: 0.6803832644168779
User 106595 does not improve AUC. Reverting changes.
Training on augumented user 55679 19/50 current_auc = 0.6805611133342225
User 55679 AUC after training: 0.6796274065181629
User 55679 does not improve AUC. Reverting changes.
Training on augumented user 5674 20/50 current_auc = 0.6805611133342225
User 5674 AUC after training: 0.6801387221555288
User 5674 does not improve AUC. Reverting changes.
Training on augumented user 90900 21/50 current_auc = 0.6805611133342225
User 90900 AUC after training: 0.680405495531546
User 90900 does not improve AUC. Reverting changes.
Training on augumented user 106545 22/50 current_auc = 0.6805611133342225
User 106545 AUC after training: 0.6802943399582054
User 106545 does not improve AUC. Reverting changes.
Training on augumented user 69641 23/50 current_auc = 0.6805611133342225
User 69641 AUC after training: 0.6802054154995332
User 69641 does not improve AUC. Reverting changes.
Training on augumented user 137564 24/50 current_auc = 0.6805611133342225
User 137564 AUC after training: 0.6806278066782269
User 137564 improves AUC. Keeping the model.
Training on augumented user 7229 25/50 current_auc = 0.6806278066782269
User 7229 AUC after training: 0.6802721088435374
User 7229 does not improve AUC. Reverting changes.
Training on augumented user 136853 26/50 current_auc = 0.6806278066782269
User 136853 AUC after training: 0.6802721088435373
User 136853 does not improve AUC. Reverting changes.
Training on augumented user 87976 27/50 current_auc = 0.6806278066782269
User 87976 AUC after training: 0.6808501178249077
User 87976 improves AUC. Keeping the model.
Training on augumented user 97558 28/50 current_auc = 0.6808501178249077
User 97558 AUC after training: 0.6803610333022097
User 97558 does not improve AUC. Reverting changes.
Training on augumented user 102046 29/50 current_auc = 0.6808501178249077
User 102046 AUC after training: 0.6803388021875417
User 102046 does not improve AUC. Reverting changes.
Training on augumented user 18393 30/50 current_auc = 0.6808501178249077
User 18393 AUC after training: 0.6794717887154862
User 18393 does not improve AUC. Reverting changes.
Training on augumented user 119961 31/50 current_auc = 0.6808501178249077
User 119961 AUC after training: 0.680672268907563
User 119961 does not improve AUC. Reverting changes.
Training on augumented user 86788 32/50 current_auc = 0.6808501178249077
User 86788 AUC after training: 0.680183184384865
User 86788 does not improve AUC. Reverting changes.
Training on augumented user 2190 33/50 current_auc = 0.6808501178249077
User 2190 AUC after training: 0.6808056555955716
User 2190 does not improve AUC. Reverting changes.
Training on augumented user 115409 34/50 current_auc = 0.6808501178249077
User 115409 AUC after training: 0.68093904228358
User 115409 improves AUC. Keeping the model.
Training on augumented user 55008 35/50 current_auc = 0.68093904228358
User 55008 AUC after training: 0.6779156106887199
User 55008 does not improve AUC. Reverting changes.
Training on augumented user 4599 36/50 current_auc = 0.68093904228358
User 4599 AUC after training: 0.6804944199902183
User 4599 does not improve AUC. Reverting changes.
Training on augumented user 66605 37/50 current_auc = 0.68093904228358
User 66605 AUC after training: 0.6787159308167712
User 66605 does not improve AUC. Reverting changes.
Training on augumented user 51305 38/50 current_auc = 0.68093904228358
User 51305 AUC after training: 0.6805388822195545
User 51305 does not improve AUC. Reverting changes.
Training on augumented user 78225 39/50 current_auc = 0.68093904228358
User 78225 AUC after training: 0.6807611933662354
User 78225 does not improve AUC. Reverting changes.
Training on augumented user 34815 40/50 current_auc = 0.68093904228358
User 34815 AUC after training: 0.6806278066782269
User 34815 does not improve AUC. Reverting changes.
Training on augumented user 108061 41/50 current_auc = 0.68093904228358
User 108061 AUC after training: 0.6806278066782268
User 108061 does not improve AUC. Reverting changes.
Training on augumented user 46313 42/50 current_auc = 0.68093904228358
User 46313 AUC after training: 0.6799164110088479
User 46313 does not improve AUC. Reverting changes.
Training on augumented user 41205 43/50 current_auc = 0.68093904228358
User 41205 AUC after training: 0.6804944199902183
User 41205 does not improve AUC. Reverting changes.
Training on augumented user 89014 44/50 current_auc = 0.68093904228358
User 89014 AUC after training: 0.680672268907563
User 89014 does not improve AUC. Reverting changes.
Training on augumented user 58778 45/50 current_auc = 0.68093904228358
User 58778 AUC after training: 0.6810279667422525
User 58778 improves AUC. Keeping the model.
Training on augumented user 106355 46/50 current_auc = 0.6810279667422525
User 106355 AUC after training: 0.6799831043528523
User 106355 does not improve AUC. Reverting changes.
Training on augumented user 61379 47/50 current_auc = 0.6810279667422525
User 61379 AUC after training: 0.6798719487795117
User 61379 does not improve AUC. Reverting changes.
Training on augumented user 114518 48/50 current_auc = 0.6810279667422525
User 114518 AUC after training: 0.6801609532701969
User 114518 does not improve AUC. Reverting changes.
Training on augumented user 35201 49/50 current_auc = 0.6810279667422525
User 35201 AUC after training: 0.6803165710728736
User 35201 does not improve AUC. Reverting changes.
[2024-12-02 18:33:40.171492] start test user 126269 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:40.586057] start test user 126269 103/567 recall augumented users by random, augumented_users = [136159, 129047, 123455, 77221, 6009, 100871, 39825, 4056, 46776, 47013, 80100, 69004, 31522, 130104, 90840, 27517, 81129, 122068, 5092, 122099, 125531, 130997, 57378, 75577, 137565, 101175, 136182, 69261, 39451, 52586, 59215, 19560, 42056, 121451, 18680, 104147, 61049, 48175, 104533, 133208, 97681, 131408, 117453, 94295, 43388, 44714, 86296, 40534, 20724, 107184]
[2024-12-02 18:33:40.602336] user = 126269 Cloud 103/567
[2024-12-02 18:33:40.611998] user = 126269 Local 103/567
[2024-12-02 18:33:41.055027] user = 126269 Local+ 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:44.035883] user = 126269 MPDA- 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 136159 0/50 current_auc = 0.6
User 136159 AUC after training: 0.5777777777777778
User 136159 does not improve AUC. Reverting changes.
Training on augumented user 129047 1/50 current_auc = 0.6
User 129047 AUC after training: 0.5777777777777778
User 129047 does not improve AUC. Reverting changes.
Training on augumented user 123455 2/50 current_auc = 0.6
User 123455 AUC after training: 0.6
User 123455 does not improve AUC. Reverting changes.
Training on augumented user 77221 3/50 current_auc = 0.6
User 77221 AUC after training: 0.6
User 77221 does not improve AUC. Reverting changes.
Training on augumented user 6009 4/50 current_auc = 0.6
User 6009 AUC after training: 0.6
User 6009 does not improve AUC. Reverting changes.
Training on augumented user 100871 5/50 current_auc = 0.6
User 100871 AUC after training: 0.6
User 100871 does not improve AUC. Reverting changes.
Training on augumented user 39825 6/50 current_auc = 0.6
User 39825 AUC after training: 0.6
User 39825 does not improve AUC. Reverting changes.
Training on augumented user 4056 7/50 current_auc = 0.6
User 4056 AUC after training: 0.5555555555555556
User 4056 does not improve AUC. Reverting changes.
Training on augumented user 46776 8/50 current_auc = 0.6
User 46776 AUC after training: 0.6
User 46776 does not improve AUC. Reverting changes.
Training on augumented user 47013 9/50 current_auc = 0.6
User 47013 AUC after training: 0.6
User 47013 does not improve AUC. Reverting changes.
Training on augumented user 80100 10/50 current_auc = 0.6
User 80100 AUC after training: 0.6
User 80100 does not improve AUC. Reverting changes.
Training on augumented user 69004 11/50 current_auc = 0.6
User 69004 AUC after training: 0.6
User 69004 does not improve AUC. Reverting changes.
Training on augumented user 31522 12/50 current_auc = 0.6
User 31522 AUC after training: 0.6
User 31522 does not improve AUC. Reverting changes.
Training on augumented user 130104 13/50 current_auc = 0.6
User 130104 AUC after training: 0.6
User 130104 does not improve AUC. Reverting changes.
Training on augumented user 90840 14/50 current_auc = 0.6
User 90840 AUC after training: 0.6
User 90840 does not improve AUC. Reverting changes.
Training on augumented user 27517 15/50 current_auc = 0.6
User 27517 AUC after training: 0.6
User 27517 does not improve AUC. Reverting changes.
Training on augumented user 81129 16/50 current_auc = 0.6
User 81129 AUC after training: 0.5555555555555556
User 81129 does not improve AUC. Reverting changes.
Training on augumented user 122068 17/50 current_auc = 0.6
User 122068 AUC after training: 0.5777777777777778
User 122068 does not improve AUC. Reverting changes.
Training on augumented user 5092 18/50 current_auc = 0.6
User 5092 AUC after training: 0.5555555555555556
User 5092 does not improve AUC. Reverting changes.
Training on augumented user 122099 19/50 current_auc = 0.6
User 122099 AUC after training: 0.6
User 122099 does not improve AUC. Reverting changes.
Training on augumented user 125531 20/50 current_auc = 0.6
User 125531 AUC after training: 0.6
User 125531 does not improve AUC. Reverting changes.
Training on augumented user 130997 21/50 current_auc = 0.6
User 130997 AUC after training: 0.6
User 130997 does not improve AUC. Reverting changes.
Training on augumented user 57378 22/50 current_auc = 0.6
User 57378 AUC after training: 0.6
User 57378 does not improve AUC. Reverting changes.
Training on augumented user 75577 23/50 current_auc = 0.6
User 75577 AUC after training: 0.6
User 75577 does not improve AUC. Reverting changes.
Training on augumented user 137565 24/50 current_auc = 0.6
User 137565 AUC after training: 0.6
User 137565 does not improve AUC. Reverting changes.
Training on augumented user 101175 25/50 current_auc = 0.6
User 101175 AUC after training: 0.6
User 101175 does not improve AUC. Reverting changes.
Training on augumented user 136182 26/50 current_auc = 0.6
User 136182 AUC after training: 0.6
User 136182 does not improve AUC. Reverting changes.
Training on augumented user 69261 27/50 current_auc = 0.6
User 69261 AUC after training: 0.5555555555555556
User 69261 does not improve AUC. Reverting changes.
Training on augumented user 39451 28/50 current_auc = 0.6
User 39451 AUC after training: 0.6
User 39451 does not improve AUC. Reverting changes.
Training on augumented user 52586 29/50 current_auc = 0.6
User 52586 AUC after training: 0.6
User 52586 does not improve AUC. Reverting changes.
Training on augumented user 59215 30/50 current_auc = 0.6
User 59215 AUC after training: 0.6
User 59215 does not improve AUC. Reverting changes.
Training on augumented user 19560 31/50 current_auc = 0.6
User 19560 AUC after training: 0.6
User 19560 does not improve AUC. Reverting changes.
Training on augumented user 42056 32/50 current_auc = 0.6
User 42056 AUC after training: 0.6
User 42056 does not improve AUC. Reverting changes.
Training on augumented user 121451 33/50 current_auc = 0.6
User 121451 AUC after training: 0.6
User 121451 does not improve AUC. Reverting changes.
Training on augumented user 18680 34/50 current_auc = 0.6
User 18680 AUC after training: 0.5777777777777778
User 18680 does not improve AUC. Reverting changes.
Training on augumented user 104147 35/50 current_auc = 0.6
User 104147 AUC after training: 0.6
User 104147 does not improve AUC. Reverting changes.
Training on augumented user 61049 36/50 current_auc = 0.6
User 61049 AUC after training: 0.6
User 61049 does not improve AUC. Reverting changes.
Training on augumented user 48175 37/50 current_auc = 0.6
User 48175 AUC after training: 0.6
User 48175 does not improve AUC. Reverting changes.
Training on augumented user 104533 38/50 current_auc = 0.6
User 104533 AUC after training: 0.6
User 104533 does not improve AUC. Reverting changes.
Training on augumented user 133208 39/50 current_auc = 0.6
User 133208 AUC after training: 0.6
User 133208 does not improve AUC. Reverting changes.
Training on augumented user 97681 40/50 current_auc = 0.6
User 97681 AUC after training: 0.6
User 97681 does not improve AUC. Reverting changes.
Training on augumented user 131408 41/50 current_auc = 0.6
User 131408 AUC after training: 0.6
User 131408 does not improve AUC. Reverting changes.
Training on augumented user 117453 42/50 current_auc = 0.6
User 117453 AUC after training: 0.6
User 117453 does not improve AUC. Reverting changes.
Training on augumented user 94295 43/50 current_auc = 0.6
User 94295 AUC after training: 0.6
User 94295 does not improve AUC. Reverting changes.
Training on augumented user 43388 44/50 current_auc = 0.6
User 43388 AUC after training: 0.5555555555555556
User 43388 does not improve AUC. Reverting changes.
Training on augumented user 44714 45/50 current_auc = 0.6
User 44714 AUC after training: 0.6
User 44714 does not improve AUC. Reverting changes.
Training on augumented user 86296 46/50 current_auc = 0.6
User 86296 AUC after training: 0.6
User 86296 does not improve AUC. Reverting changes.
Training on augumented user 40534 47/50 current_auc = 0.6
User 40534 AUC after training: 0.6
User 40534 does not improve AUC. Reverting changes.
Training on augumented user 20724 48/50 current_auc = 0.6
User 20724 AUC after training: 0.6
User 20724 does not improve AUC. Reverting changes.
Training on augumented user 107184 49/50 current_auc = 0.6
User 107184 AUC after training: 0.6
User 107184 does not improve AUC. Reverting changes.
[2024-12-02 18:34:16.198988] start test user 126274 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:16.673483] start test user 126274 104/567 recall augumented users by random, augumented_users = [3723, 137066, 47327, 1308, 106600, 40872, 22779, 53562, 91118, 65618, 110186, 123092, 54258, 133796, 10307, 69633, 77155, 18221, 48005, 39966, 8367, 31272, 13448, 129756, 44301, 1677, 53704, 73574, 120540, 20163, 31722, 118632, 6135, 39684, 47910, 32429, 64085, 96266, 36009, 58773, 109898, 45784, 66553, 13328, 60243, 14520, 84805, 124167, 199, 7395]
[2024-12-02 18:34:16.688407] user = 126274 Cloud 104/567
[2024-12-02 18:34:16.719264] user = 126274 Local 104/567
[2024-12-02 18:34:16.743386] user = 126274 Local+ 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:18.727803] user = 126274 MPDA- 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5493547261946286
Training on augumented user 3723 0/50 current_auc = 0.5493547261946286
User 3723 AUC after training: 0.5490059295430765
User 3723 does not improve AUC. Reverting changes.
Training on augumented user 137066 1/50 current_auc = 0.5493547261946286
User 137066 AUC after training: 0.5490059295430765
User 137066 does not improve AUC. Reverting changes.
Training on augumented user 47327 2/50 current_auc = 0.5493547261946286
User 47327 AUC after training: 0.5493547261946286
User 47327 does not improve AUC. Reverting changes.
Training on augumented user 1308 3/50 current_auc = 0.5493547261946286
User 1308 AUC after training: 0.5493547261946286
User 1308 does not improve AUC. Reverting changes.
Training on augumented user 106600 4/50 current_auc = 0.5493547261946286
User 106600 AUC after training: 0.5490059295430765
User 106600 does not improve AUC. Reverting changes.
Training on augumented user 40872 5/50 current_auc = 0.5493547261946286
User 40872 AUC after training: 0.5490059295430765
User 40872 does not improve AUC. Reverting changes.
Training on augumented user 22779 6/50 current_auc = 0.5493547261946286
User 22779 AUC after training: 0.5500523194977329
User 22779 improves AUC. Keeping the model.
Training on augumented user 53562 7/50 current_auc = 0.5500523194977329
User 53562 AUC after training: 0.550401116149285
User 53562 improves AUC. Keeping the model.
Training on augumented user 91118 8/50 current_auc = 0.550401116149285
User 91118 AUC after training: 0.5486571328915243
User 91118 does not improve AUC. Reverting changes.
Training on augumented user 65618 9/50 current_auc = 0.550401116149285
User 65618 AUC after training: 0.550401116149285
User 65618 does not improve AUC. Reverting changes.
Training on augumented user 110186 10/50 current_auc = 0.550401116149285
User 110186 AUC after training: 0.5497035228461807
User 110186 does not improve AUC. Reverting changes.
Training on augumented user 123092 11/50 current_auc = 0.550401116149285
User 123092 AUC after training: 0.5500523194977328
User 123092 does not improve AUC. Reverting changes.
Training on augumented user 54258 12/50 current_auc = 0.550401116149285
User 54258 AUC after training: 0.5507499128008372
User 54258 improves AUC. Keeping the model.
Training on augumented user 133796 13/50 current_auc = 0.5507499128008372
User 133796 AUC after training: 0.5497035228461806
User 133796 does not improve AUC. Reverting changes.
Training on augumented user 10307 14/50 current_auc = 0.5507499128008372
User 10307 AUC after training: 0.5490059295430764
User 10307 does not improve AUC. Reverting changes.
Training on augumented user 69633 15/50 current_auc = 0.5507499128008372
User 69633 AUC after training: 0.5510987094523893
User 69633 improves AUC. Keeping the model.
Training on augumented user 77155 16/50 current_auc = 0.5510987094523893
User 77155 AUC after training: 0.5507499128008372
User 77155 does not improve AUC. Reverting changes.
Training on augumented user 18221 17/50 current_auc = 0.5510987094523893
User 18221 AUC after training: 0.5497035228461807
User 18221 does not improve AUC. Reverting changes.
Training on augumented user 48005 18/50 current_auc = 0.5510987094523893
User 48005 AUC after training: 0.5507499128008371
User 48005 does not improve AUC. Reverting changes.
Training on augumented user 39966 19/50 current_auc = 0.5510987094523893
User 39966 AUC after training: 0.5514475061039413
User 39966 improves AUC. Keeping the model.
Training on augumented user 8367 20/50 current_auc = 0.5514475061039413
User 8367 AUC after training: 0.5514475061039414
User 8367 improves AUC. Keeping the model.
Training on augumented user 31272 21/50 current_auc = 0.5514475061039414
User 31272 AUC after training: 0.5507499128008372
User 31272 does not improve AUC. Reverting changes.
Training on augumented user 13448 22/50 current_auc = 0.5514475061039414
User 13448 AUC after training: 0.5521450994070457
User 13448 improves AUC. Keeping the model.
Training on augumented user 129756 23/50 current_auc = 0.5521450994070457
User 129756 AUC after training: 0.5510987094523893
User 129756 does not improve AUC. Reverting changes.
Training on augumented user 44301 24/50 current_auc = 0.5521450994070457
User 44301 AUC after training: 0.5510987094523893
User 44301 does not improve AUC. Reverting changes.
Training on augumented user 1677 25/50 current_auc = 0.5521450994070457
User 1677 AUC after training: 0.5514475061039414
User 1677 does not improve AUC. Reverting changes.
Training on augumented user 53704 26/50 current_auc = 0.5521450994070457
User 53704 AUC after training: 0.5507499128008371
User 53704 does not improve AUC. Reverting changes.
Training on augumented user 73574 27/50 current_auc = 0.5521450994070457
User 73574 AUC after training: 0.5521450994070457
User 73574 does not improve AUC. Reverting changes.
Training on augumented user 120540 28/50 current_auc = 0.5521450994070457
User 120540 AUC after training: 0.5497035228461807
User 120540 does not improve AUC. Reverting changes.
Training on augumented user 20163 29/50 current_auc = 0.5521450994070457
User 20163 AUC after training: 0.550226717823509
User 20163 does not improve AUC. Reverting changes.
Training on augumented user 31722 30/50 current_auc = 0.5521450994070457
User 31722 AUC after training: 0.550401116149285
User 31722 does not improve AUC. Reverting changes.
Training on augumented user 118632 31/50 current_auc = 0.5521450994070457
User 118632 AUC after training: 0.5493547261946286
User 118632 does not improve AUC. Reverting changes.
Training on augumented user 6135 32/50 current_auc = 0.5521450994070457
User 6135 AUC after training: 0.5507499128008371
User 6135 does not improve AUC. Reverting changes.
Training on augumented user 39684 33/50 current_auc = 0.5521450994070457
User 39684 AUC after training: 0.5514475061039414
User 39684 does not improve AUC. Reverting changes.
Training on augumented user 47910 34/50 current_auc = 0.5521450994070457
User 47910 AUC after training: 0.5517963027554935
User 47910 does not improve AUC. Reverting changes.
Training on augumented user 32429 35/50 current_auc = 0.5521450994070457
User 32429 AUC after training: 0.5517963027554935
User 32429 does not improve AUC. Reverting changes.
Training on augumented user 64085 36/50 current_auc = 0.5521450994070457
User 64085 AUC after training: 0.5514475061039414
User 64085 does not improve AUC. Reverting changes.
Training on augumented user 96266 37/50 current_auc = 0.5521450994070457
User 96266 AUC after training: 0.5521450994070457
User 96266 does not improve AUC. Reverting changes.
Training on augumented user 36009 38/50 current_auc = 0.5521450994070457
User 36009 AUC after training: 0.5517963027554935
User 36009 does not improve AUC. Reverting changes.
Training on augumented user 58773 39/50 current_auc = 0.5521450994070457
User 58773 AUC after training: 0.5514475061039413
User 58773 does not improve AUC. Reverting changes.
Training on augumented user 109898 40/50 current_auc = 0.5521450994070457
User 109898 AUC after training: 0.5521450994070457
User 109898 does not improve AUC. Reverting changes.
Training on augumented user 45784 41/50 current_auc = 0.5521450994070457
User 45784 AUC after training: 0.55284269271015
User 45784 improves AUC. Keeping the model.
Training on augumented user 66553 42/50 current_auc = 0.55284269271015
User 66553 AUC after training: 0.5517963027554935
User 66553 does not improve AUC. Reverting changes.
Training on augumented user 13328 43/50 current_auc = 0.55284269271015
User 13328 AUC after training: 0.5521450994070457
User 13328 does not improve AUC. Reverting changes.
Training on augumented user 60243 44/50 current_auc = 0.55284269271015
User 60243 AUC after training: 0.5510987094523893
User 60243 does not improve AUC. Reverting changes.
Training on augumented user 14520 45/50 current_auc = 0.55284269271015
User 14520 AUC after training: 0.5521450994070457
User 14520 does not improve AUC. Reverting changes.
Training on augumented user 84805 46/50 current_auc = 0.55284269271015
User 84805 AUC after training: 0.5514475061039414
User 84805 does not improve AUC. Reverting changes.
Training on augumented user 124167 47/50 current_auc = 0.55284269271015
User 124167 AUC after training: 0.5521450994070457
User 124167 does not improve AUC. Reverting changes.
Training on augumented user 199 48/50 current_auc = 0.55284269271015
User 199 AUC after training: 0.5514475061039414
User 199 does not improve AUC. Reverting changes.
Training on augumented user 7395 49/50 current_auc = 0.55284269271015
User 7395 AUC after training: 0.5521450994070457
User 7395 does not improve AUC. Reverting changes.
[2024-12-02 18:34:45.150483] start test user 126293 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:45.808415] start test user 126293 105/567 recall augumented users by random, augumented_users = [20344, 29437, 26402, 53340, 87647, 96428, 14043, 106056, 77847, 927, 57157, 93892, 127861, 59887, 74295, 10845, 69444, 100303, 119437, 83576, 101689, 40497, 89368, 51302, 50954, 96973, 116065, 119291, 40375, 88917, 71925, 130882, 78229, 61095, 65299, 108782, 99881, 127720, 121874, 65879, 105414, 21286, 35912, 54225, 111912, 92014, 79971, 99237, 12617, 52610]
[2024-12-02 18:34:45.823798] user = 126293 Cloud 105/567
[2024-12-02 18:34:45.833541] user = 126293 Local 105/567
[2024-12-02 18:34:45.919848] user = 126293 Local+ 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:48.757056] user = 126293 MPDA- 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 20344 0/50 current_auc = 0.0
User 20344 AUC after training: 0.0
User 20344 does not improve AUC. Reverting changes.
Training on augumented user 29437 1/50 current_auc = 0.0
User 29437 AUC after training: 0.0
User 29437 does not improve AUC. Reverting changes.
Training on augumented user 26402 2/50 current_auc = 0.0
User 26402 AUC after training: 0.0
User 26402 does not improve AUC. Reverting changes.
Training on augumented user 53340 3/50 current_auc = 0.0
User 53340 AUC after training: 0.0
User 53340 does not improve AUC. Reverting changes.
Training on augumented user 87647 4/50 current_auc = 0.0
User 87647 AUC after training: 0.0
User 87647 does not improve AUC. Reverting changes.
Training on augumented user 96428 5/50 current_auc = 0.0
User 96428 AUC after training: 0.0
User 96428 does not improve AUC. Reverting changes.
Training on augumented user 14043 6/50 current_auc = 0.0
User 14043 AUC after training: 0.0
User 14043 does not improve AUC. Reverting changes.
Training on augumented user 106056 7/50 current_auc = 0.0
User 106056 AUC after training: 0.0
User 106056 does not improve AUC. Reverting changes.
Training on augumented user 77847 8/50 current_auc = 0.0
User 77847 AUC after training: 0.0
User 77847 does not improve AUC. Reverting changes.
Training on augumented user 927 9/50 current_auc = 0.0
User 927 AUC after training: 0.0
User 927 does not improve AUC. Reverting changes.
Training on augumented user 57157 10/50 current_auc = 0.0
User 57157 AUC after training: 0.0
User 57157 does not improve AUC. Reverting changes.
Training on augumented user 93892 11/50 current_auc = 0.0
User 93892 AUC after training: 0.0
User 93892 does not improve AUC. Reverting changes.
Training on augumented user 127861 12/50 current_auc = 0.0
User 127861 AUC after training: 0.0
User 127861 does not improve AUC. Reverting changes.
Training on augumented user 59887 13/50 current_auc = 0.0
User 59887 AUC after training: 0.0
User 59887 does not improve AUC. Reverting changes.
Training on augumented user 74295 14/50 current_auc = 0.0
User 74295 AUC after training: 0.0
User 74295 does not improve AUC. Reverting changes.
Training on augumented user 10845 15/50 current_auc = 0.0
User 10845 AUC after training: 0.0
User 10845 does not improve AUC. Reverting changes.
Training on augumented user 69444 16/50 current_auc = 0.0
User 69444 AUC after training: 0.0
User 69444 does not improve AUC. Reverting changes.
Training on augumented user 100303 17/50 current_auc = 0.0
User 100303 AUC after training: 0.0
User 100303 does not improve AUC. Reverting changes.
Training on augumented user 119437 18/50 current_auc = 0.0
User 119437 AUC after training: 0.0
User 119437 does not improve AUC. Reverting changes.
Training on augumented user 83576 19/50 current_auc = 0.0
User 83576 AUC after training: 0.0
User 83576 does not improve AUC. Reverting changes.
Training on augumented user 101689 20/50 current_auc = 0.0
User 101689 AUC after training: 0.0
User 101689 does not improve AUC. Reverting changes.
Training on augumented user 40497 21/50 current_auc = 0.0
User 40497 AUC after training: 0.0
User 40497 does not improve AUC. Reverting changes.
Training on augumented user 89368 22/50 current_auc = 0.0
User 89368 AUC after training: 0.0
User 89368 does not improve AUC. Reverting changes.
Training on augumented user 51302 23/50 current_auc = 0.0
User 51302 AUC after training: 0.0
User 51302 does not improve AUC. Reverting changes.
Training on augumented user 50954 24/50 current_auc = 0.0
User 50954 AUC after training: 0.0
User 50954 does not improve AUC. Reverting changes.
Training on augumented user 96973 25/50 current_auc = 0.0
User 96973 AUC after training: 0.0
User 96973 does not improve AUC. Reverting changes.
Training on augumented user 116065 26/50 current_auc = 0.0
User 116065 AUC after training: 0.0
User 116065 does not improve AUC. Reverting changes.
Training on augumented user 119291 27/50 current_auc = 0.0
User 119291 AUC after training: 0.0
User 119291 does not improve AUC. Reverting changes.
Training on augumented user 40375 28/50 current_auc = 0.0
User 40375 AUC after training: 0.0
User 40375 does not improve AUC. Reverting changes.
Training on augumented user 88917 29/50 current_auc = 0.0
User 88917 AUC after training: 0.0
User 88917 does not improve AUC. Reverting changes.
Training on augumented user 71925 30/50 current_auc = 0.0
User 71925 AUC after training: 0.0
User 71925 does not improve AUC. Reverting changes.
Training on augumented user 130882 31/50 current_auc = 0.0
User 130882 AUC after training: 0.0
User 130882 does not improve AUC. Reverting changes.
Training on augumented user 78229 32/50 current_auc = 0.0
User 78229 AUC after training: 0.0
User 78229 does not improve AUC. Reverting changes.
Training on augumented user 61095 33/50 current_auc = 0.0
User 61095 AUC after training: 0.0
User 61095 does not improve AUC. Reverting changes.
Training on augumented user 65299 34/50 current_auc = 0.0
User 65299 AUC after training: 0.0
User 65299 does not improve AUC. Reverting changes.
Training on augumented user 108782 35/50 current_auc = 0.0
User 108782 AUC after training: 0.0
User 108782 does not improve AUC. Reverting changes.
Training on augumented user 99881 36/50 current_auc = 0.0
User 99881 AUC after training: 0.0
User 99881 does not improve AUC. Reverting changes.
Training on augumented user 127720 37/50 current_auc = 0.0
User 127720 AUC after training: 0.0
User 127720 does not improve AUC. Reverting changes.
Training on augumented user 121874 38/50 current_auc = 0.0
User 121874 AUC after training: 0.0
User 121874 does not improve AUC. Reverting changes.
Training on augumented user 65879 39/50 current_auc = 0.0
User 65879 AUC after training: 0.0
User 65879 does not improve AUC. Reverting changes.
Training on augumented user 105414 40/50 current_auc = 0.0
User 105414 AUC after training: 0.0
User 105414 does not improve AUC. Reverting changes.
Training on augumented user 21286 41/50 current_auc = 0.0
User 21286 AUC after training: 0.0
User 21286 does not improve AUC. Reverting changes.
Training on augumented user 35912 42/50 current_auc = 0.0
User 35912 AUC after training: 0.0
User 35912 does not improve AUC. Reverting changes.
Training on augumented user 54225 43/50 current_auc = 0.0
User 54225 AUC after training: 0.0
User 54225 does not improve AUC. Reverting changes.
Training on augumented user 111912 44/50 current_auc = 0.0
User 111912 AUC after training: 0.0
User 111912 does not improve AUC. Reverting changes.
Training on augumented user 92014 45/50 current_auc = 0.0
User 92014 AUC after training: 0.0
User 92014 does not improve AUC. Reverting changes.
Training on augumented user 79971 46/50 current_auc = 0.0
User 79971 AUC after training: 0.0
User 79971 does not improve AUC. Reverting changes.
Training on augumented user 99237 47/50 current_auc = 0.0
User 99237 AUC after training: 0.0
User 99237 does not improve AUC. Reverting changes.
Training on augumented user 12617 48/50 current_auc = 0.0
User 12617 AUC after training: 0.0
User 12617 does not improve AUC. Reverting changes.
Training on augumented user 52610 49/50 current_auc = 0.0
User 52610 AUC after training: 0.0
User 52610 does not improve AUC. Reverting changes.
[2024-12-02 18:35:15.633643] start test user 126294 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:16.111150] start test user 126294 106/567 recall augumented users by random, augumented_users = [57386, 24214, 136993, 6649, 7729, 46726, 37616, 33419, 132274, 47213, 126864, 18541, 69468, 49609, 54196, 17652, 115672, 88928, 121683, 36956, 53536, 91828, 71600, 110314, 71659, 61856, 59019, 35972, 111286, 26002, 9715, 105263, 4089, 123019, 16715, 2141, 114128, 107562, 102547, 129145, 94636, 16566, 36894, 946, 45135, 103145, 86003, 50109, 62174, 72288]
[2024-12-02 18:35:16.123933] user = 126294 Cloud 106/567
[2024-12-02 18:35:16.132245] user = 126294 Local 106/567
[2024-12-02 18:35:16.198393] user = 126294 Local+ 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:18.601129] user = 126294 MPDA- 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 57386 0/50 current_auc = 0.25
User 57386 AUC after training: 0.25
User 57386 does not improve AUC. Reverting changes.
Training on augumented user 24214 1/50 current_auc = 0.25
User 24214 AUC after training: 0.25
User 24214 does not improve AUC. Reverting changes.
Training on augumented user 136993 2/50 current_auc = 0.25
User 136993 AUC after training: 0.25
User 136993 does not improve AUC. Reverting changes.
Training on augumented user 6649 3/50 current_auc = 0.25
User 6649 AUC after training: 0.25
User 6649 does not improve AUC. Reverting changes.
Training on augumented user 7729 4/50 current_auc = 0.25
User 7729 AUC after training: 0.25
User 7729 does not improve AUC. Reverting changes.
Training on augumented user 46726 5/50 current_auc = 0.25
User 46726 AUC after training: 0.25
User 46726 does not improve AUC. Reverting changes.
Training on augumented user 37616 6/50 current_auc = 0.25
User 37616 AUC after training: 0.25
User 37616 does not improve AUC. Reverting changes.
Training on augumented user 33419 7/50 current_auc = 0.25
User 33419 AUC after training: 0.25
User 33419 does not improve AUC. Reverting changes.
Training on augumented user 132274 8/50 current_auc = 0.25
User 132274 AUC after training: 0.25
User 132274 does not improve AUC. Reverting changes.
Training on augumented user 47213 9/50 current_auc = 0.25
User 47213 AUC after training: 0.25
User 47213 does not improve AUC. Reverting changes.
Training on augumented user 126864 10/50 current_auc = 0.25
User 126864 AUC after training: 0.25
User 126864 does not improve AUC. Reverting changes.
Training on augumented user 18541 11/50 current_auc = 0.25
User 18541 AUC after training: 0.25
User 18541 does not improve AUC. Reverting changes.
Training on augumented user 69468 12/50 current_auc = 0.25
User 69468 AUC after training: 0.25
User 69468 does not improve AUC. Reverting changes.
Training on augumented user 49609 13/50 current_auc = 0.25
User 49609 AUC after training: 0.25
User 49609 does not improve AUC. Reverting changes.
Training on augumented user 54196 14/50 current_auc = 0.25
User 54196 AUC after training: 0.25
User 54196 does not improve AUC. Reverting changes.
Training on augumented user 17652 15/50 current_auc = 0.25
User 17652 AUC after training: 0.25
User 17652 does not improve AUC. Reverting changes.
Training on augumented user 115672 16/50 current_auc = 0.25
User 115672 AUC after training: 0.25
User 115672 does not improve AUC. Reverting changes.
Training on augumented user 88928 17/50 current_auc = 0.25
User 88928 AUC after training: 0.25
User 88928 does not improve AUC. Reverting changes.
Training on augumented user 121683 18/50 current_auc = 0.25
User 121683 AUC after training: 0.25
User 121683 does not improve AUC. Reverting changes.
Training on augumented user 36956 19/50 current_auc = 0.25
User 36956 AUC after training: 0.25
User 36956 does not improve AUC. Reverting changes.
Training on augumented user 53536 20/50 current_auc = 0.25
User 53536 AUC after training: 0.25
User 53536 does not improve AUC. Reverting changes.
Training on augumented user 91828 21/50 current_auc = 0.25
User 91828 AUC after training: 0.25
User 91828 does not improve AUC. Reverting changes.
Training on augumented user 71600 22/50 current_auc = 0.25
User 71600 AUC after training: 0.25
User 71600 does not improve AUC. Reverting changes.
Training on augumented user 110314 23/50 current_auc = 0.25
User 110314 AUC after training: 0.25
User 110314 does not improve AUC. Reverting changes.
Training on augumented user 71659 24/50 current_auc = 0.25
User 71659 AUC after training: 0.25
User 71659 does not improve AUC. Reverting changes.
Training on augumented user 61856 25/50 current_auc = 0.25
User 61856 AUC after training: 0.25
User 61856 does not improve AUC. Reverting changes.
Training on augumented user 59019 26/50 current_auc = 0.25
User 59019 AUC after training: 0.25
User 59019 does not improve AUC. Reverting changes.
Training on augumented user 35972 27/50 current_auc = 0.25
User 35972 AUC after training: 0.25
User 35972 does not improve AUC. Reverting changes.
Training on augumented user 111286 28/50 current_auc = 0.25
User 111286 AUC after training: 0.25
User 111286 does not improve AUC. Reverting changes.
Training on augumented user 26002 29/50 current_auc = 0.25
User 26002 AUC after training: 0.25
User 26002 does not improve AUC. Reverting changes.
Training on augumented user 9715 30/50 current_auc = 0.25
User 9715 AUC after training: 0.25
User 9715 does not improve AUC. Reverting changes.
Training on augumented user 105263 31/50 current_auc = 0.25
User 105263 AUC after training: 0.25
User 105263 does not improve AUC. Reverting changes.
Training on augumented user 4089 32/50 current_auc = 0.25
User 4089 AUC after training: 0.25
User 4089 does not improve AUC. Reverting changes.
Training on augumented user 123019 33/50 current_auc = 0.25
User 123019 AUC after training: 0.25
User 123019 does not improve AUC. Reverting changes.
Training on augumented user 16715 34/50 current_auc = 0.25
User 16715 AUC after training: 0.25
User 16715 does not improve AUC. Reverting changes.
Training on augumented user 2141 35/50 current_auc = 0.25
User 2141 AUC after training: 0.25
User 2141 does not improve AUC. Reverting changes.
Training on augumented user 114128 36/50 current_auc = 0.25
User 114128 AUC after training: 0.25
User 114128 does not improve AUC. Reverting changes.
Training on augumented user 107562 37/50 current_auc = 0.25
User 107562 AUC after training: 0.25
User 107562 does not improve AUC. Reverting changes.
Training on augumented user 102547 38/50 current_auc = 0.25
User 102547 AUC after training: 0.25
User 102547 does not improve AUC. Reverting changes.
Training on augumented user 129145 39/50 current_auc = 0.25
User 129145 AUC after training: 0.25
User 129145 does not improve AUC. Reverting changes.
Training on augumented user 94636 40/50 current_auc = 0.25
User 94636 AUC after training: 0.25
User 94636 does not improve AUC. Reverting changes.
Training on augumented user 16566 41/50 current_auc = 0.25
User 16566 AUC after training: 0.25
User 16566 does not improve AUC. Reverting changes.
Training on augumented user 36894 42/50 current_auc = 0.25
User 36894 AUC after training: 0.25
User 36894 does not improve AUC. Reverting changes.
Training on augumented user 946 43/50 current_auc = 0.25
User 946 AUC after training: 0.25
User 946 does not improve AUC. Reverting changes.
Training on augumented user 45135 44/50 current_auc = 0.25
User 45135 AUC after training: 0.25
User 45135 does not improve AUC. Reverting changes.
Training on augumented user 103145 45/50 current_auc = 0.25
User 103145 AUC after training: 0.25
User 103145 does not improve AUC. Reverting changes.
Training on augumented user 86003 46/50 current_auc = 0.25
User 86003 AUC after training: 0.25
User 86003 does not improve AUC. Reverting changes.
Training on augumented user 50109 47/50 current_auc = 0.25
User 50109 AUC after training: 0.25
User 50109 does not improve AUC. Reverting changes.
Training on augumented user 62174 48/50 current_auc = 0.25
User 62174 AUC after training: 0.25
User 62174 does not improve AUC. Reverting changes.
Training on augumented user 72288 49/50 current_auc = 0.25
User 72288 AUC after training: 0.25
User 72288 does not improve AUC. Reverting changes.
[2024-12-02 18:35:47.669795] start test user 126338 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:48.185626] start test user 126338 107/567 recall augumented users by random, augumented_users = [3269, 114587, 15406, 24715, 85313, 136138, 134137, 133953, 60840, 129665, 126935, 17094, 77417, 7865, 6606, 102658, 133634, 21874, 80968, 91629, 24433, 83313, 136025, 22129, 87557, 5640, 30761, 98990, 122891, 99864, 128163, 122297, 98713, 65816, 124122, 13289, 126969, 138119, 27200, 13281, 135692, 85319, 1786, 70099, 70439, 66834, 114171, 98045, 48233, 3467]
[2024-12-02 18:35:48.212115] user = 126338 Cloud 107/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:35:48.226746] user = 126338 Local 107/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:35:48.318774] user = 126338 Local+ 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:35:51.480957] user = 126338 MPDA- 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 3269 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3269 AUC after training: 0.5
User 3269 does not improve AUC. Reverting changes.
Training on augumented user 114587 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114587 AUC after training: 0.5
User 114587 does not improve AUC. Reverting changes.
Training on augumented user 15406 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15406 AUC after training: 0.5
User 15406 does not improve AUC. Reverting changes.
Training on augumented user 24715 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24715 AUC after training: 0.5
User 24715 does not improve AUC. Reverting changes.
Training on augumented user 85313 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85313 AUC after training: 0.5
User 85313 does not improve AUC. Reverting changes.
Training on augumented user 136138 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136138 AUC after training: 0.5
User 136138 does not improve AUC. Reverting changes.
Training on augumented user 134137 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134137 AUC after training: 0.5
User 134137 does not improve AUC. Reverting changes.
Training on augumented user 133953 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133953 AUC after training: 0.5
User 133953 does not improve AUC. Reverting changes.
Training on augumented user 60840 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60840 AUC after training: 0.5
User 60840 does not improve AUC. Reverting changes.
Training on augumented user 129665 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129665 AUC after training: 0.5
User 129665 does not improve AUC. Reverting changes.
Training on augumented user 126935 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126935 AUC after training: 0.5
User 126935 does not improve AUC. Reverting changes.
Training on augumented user 17094 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17094 AUC after training: 0.5
User 17094 does not improve AUC. Reverting changes.
Training on augumented user 77417 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77417 AUC after training: 0.5
User 77417 does not improve AUC. Reverting changes.
Training on augumented user 7865 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7865 AUC after training: 0.5
User 7865 does not improve AUC. Reverting changes.
Training on augumented user 6606 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6606 AUC after training: 0.5
User 6606 does not improve AUC. Reverting changes.
Training on augumented user 102658 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102658 AUC after training: 0.5
User 102658 does not improve AUC. Reverting changes.
Training on augumented user 133634 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133634 AUC after training: 0.5
User 133634 does not improve AUC. Reverting changes.
Training on augumented user 21874 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21874 AUC after training: 0.5
User 21874 does not improve AUC. Reverting changes.
Training on augumented user 80968 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80968 AUC after training: 0.5
User 80968 does not improve AUC. Reverting changes.
Training on augumented user 91629 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91629 AUC after training: 0.5
User 91629 does not improve AUC. Reverting changes.
Training on augumented user 24433 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24433 AUC after training: 0.5
User 24433 does not improve AUC. Reverting changes.
Training on augumented user 83313 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83313 AUC after training: 0.5
User 83313 does not improve AUC. Reverting changes.
Training on augumented user 136025 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136025 AUC after training: 0.5
User 136025 does not improve AUC. Reverting changes.
Training on augumented user 22129 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22129 AUC after training: 0.5
User 22129 does not improve AUC. Reverting changes.
Training on augumented user 87557 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87557 AUC after training: 0.5
User 87557 does not improve AUC. Reverting changes.
Training on augumented user 5640 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5640 AUC after training: 0.5
User 5640 does not improve AUC. Reverting changes.
Training on augumented user 30761 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30761 AUC after training: 0.5
User 30761 does not improve AUC. Reverting changes.
Training on augumented user 98990 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98990 AUC after training: 0.5
User 98990 does not improve AUC. Reverting changes.
Training on augumented user 122891 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122891 AUC after training: 0.5
User 122891 does not improve AUC. Reverting changes.
Training on augumented user 99864 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99864 AUC after training: 0.5
User 99864 does not improve AUC. Reverting changes.
Training on augumented user 128163 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128163 AUC after training: 0.5
User 128163 does not improve AUC. Reverting changes.
Training on augumented user 122297 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122297 AUC after training: 0.5
User 122297 does not improve AUC. Reverting changes.
Training on augumented user 98713 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98713 AUC after training: 0.5
User 98713 does not improve AUC. Reverting changes.
Training on augumented user 65816 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65816 AUC after training: 0.5
User 65816 does not improve AUC. Reverting changes.
Training on augumented user 124122 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124122 AUC after training: 0.5
User 124122 does not improve AUC. Reverting changes.
Training on augumented user 13289 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13289 AUC after training: 0.5
User 13289 does not improve AUC. Reverting changes.
Training on augumented user 126969 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126969 AUC after training: 0.5
User 126969 does not improve AUC. Reverting changes.
Training on augumented user 138119 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138119 AUC after training: 0.5
User 138119 does not improve AUC. Reverting changes.
Training on augumented user 27200 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27200 AUC after training: 0.5
User 27200 does not improve AUC. Reverting changes.
Training on augumented user 13281 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13281 AUC after training: 0.5
User 13281 does not improve AUC. Reverting changes.
Training on augumented user 135692 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135692 AUC after training: 0.5
User 135692 does not improve AUC. Reverting changes.
Training on augumented user 85319 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85319 AUC after training: 0.5
User 85319 does not improve AUC. Reverting changes.
Training on augumented user 1786 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1786 AUC after training: 0.5
User 1786 does not improve AUC. Reverting changes.
Training on augumented user 70099 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70099 AUC after training: 0.5
User 70099 does not improve AUC. Reverting changes.
Training on augumented user 70439 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70439 AUC after training: 0.5
User 70439 does not improve AUC. Reverting changes.
Training on augumented user 66834 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66834 AUC after training: 0.5
User 66834 does not improve AUC. Reverting changes.
Training on augumented user 114171 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114171 AUC after training: 0.5
User 114171 does not improve AUC. Reverting changes.
Training on augumented user 98045 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98045 AUC after training: 0.5
User 98045 does not improve AUC. Reverting changes.
Training on augumented user 48233 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48233 AUC after training: 0.5
User 48233 does not improve AUC. Reverting changes.
Training on augumented user 3467 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3467 AUC after training: 0.5
User 3467 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:36:17.556619] start test user 126344 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:18.085499] start test user 126344 108/567 recall augumented users by random, augumented_users = [84814, 767, 101010, 122654, 49049, 8175, 64435, 102413, 22305, 10221, 45471, 137228, 84635, 89994, 84764, 101648, 65602, 25241, 19169, 50767, 133155, 116933, 85943, 67833, 137549, 123078, 93774, 109230, 84965, 114033, 89959, 35771, 107418, 124643, 119702, 50441, 13492, 42903, 70770, 58219, 86411, 4754, 14571, 20609, 127854, 84983, 132044, 85674, 40735, 16574]
[2024-12-02 18:36:18.100653] user = 126344 Cloud 108/567
[2024-12-02 18:36:18.127843] user = 126344 Local 108/567
[2024-12-02 18:36:18.195294] user = 126344 Local+ 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:20.959972] user = 126344 MPDA- 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5976257973068746
Training on augumented user 84814 0/50 current_auc = 0.5976257973068746
User 84814 AUC after training: 0.5975667375383888
User 84814 does not improve AUC. Reverting changes.
Training on augumented user 767 1/50 current_auc = 0.5976257973068746
User 767 AUC after training: 0.5976848570753602
User 767 improves AUC. Keeping the model.
Training on augumented user 101010 2/50 current_auc = 0.5976848570753602
User 101010 AUC after training: 0.598334514528703
User 101010 improves AUC. Keeping the model.
Training on augumented user 122654 3/50 current_auc = 0.598334514528703
User 122654 AUC after training: 0.5978029766123316
User 122654 does not improve AUC. Reverting changes.
Training on augumented user 49049 4/50 current_auc = 0.598334514528703
User 49049 AUC after training: 0.598157335223246
User 49049 does not improve AUC. Reverting changes.
Training on augumented user 8175 5/50 current_auc = 0.598334514528703
User 8175 AUC after training: 0.5983345145287031
User 8175 improves AUC. Keeping the model.
Training on augumented user 64435 6/50 current_auc = 0.5983345145287031
User 64435 AUC after training: 0.5982754547602175
User 64435 does not improve AUC. Reverting changes.
Training on augumented user 102413 7/50 current_auc = 0.5983345145287031
User 102413 AUC after training: 0.5978620363808174
User 102413 does not improve AUC. Reverting changes.
Training on augumented user 22305 8/50 current_auc = 0.5983345145287031
User 22305 AUC after training: 0.5980392156862745
User 22305 does not improve AUC. Reverting changes.
Training on augumented user 10221 9/50 current_auc = 0.5983345145287031
User 10221 AUC after training: 0.5982754547602174
User 10221 does not improve AUC. Reverting changes.
Training on augumented user 45471 10/50 current_auc = 0.5983345145287031
User 45471 AUC after training: 0.5980982754547602
User 45471 does not improve AUC. Reverting changes.
Training on augumented user 137228 11/50 current_auc = 0.5983345145287031
User 137228 AUC after training: 0.5982459248759745
User 137228 does not improve AUC. Reverting changes.
Training on augumented user 84635 12/50 current_auc = 0.5983345145287031
User 84635 AUC after training: 0.5982163949917316
User 84635 does not improve AUC. Reverting changes.
Training on augumented user 89994 13/50 current_auc = 0.5983345145287031
User 89994 AUC after training: 0.5979801559177887
User 89994 does not improve AUC. Reverting changes.
Training on augumented user 84764 14/50 current_auc = 0.5983345145287031
User 84764 AUC after training: 0.5986298133711316
User 84764 improves AUC. Keeping the model.
Training on augumented user 101648 15/50 current_auc = 0.5986298133711316
User 101648 AUC after training: 0.5986888731396173
User 101648 improves AUC. Keeping the model.
Training on augumented user 65602 16/50 current_auc = 0.5986888731396173
User 65602 AUC after training: 0.5988660524450745
User 65602 improves AUC. Keeping the model.
Training on augumented user 25241 17/50 current_auc = 0.5988660524450745
User 25241 AUC after training: 0.5979801559177887
User 25241 does not improve AUC. Reverting changes.
Training on augumented user 19169 18/50 current_auc = 0.5988660524450745
User 19169 AUC after training: 0.5988660524450743
User 19169 does not improve AUC. Reverting changes.
Training on augumented user 50767 19/50 current_auc = 0.5988660524450745
User 50767 AUC after training: 0.5984231041814316
User 50767 does not improve AUC. Reverting changes.
Training on augumented user 133155 20/50 current_auc = 0.5988660524450745
User 133155 AUC after training: 0.5988660524450744
User 133155 does not improve AUC. Reverting changes.
Training on augumented user 116933 21/50 current_auc = 0.5988660524450745
User 116933 AUC after training: 0.5983049846444602
User 116933 does not improve AUC. Reverting changes.
Training on augumented user 85943 22/50 current_auc = 0.5988660524450745
User 85943 AUC after training: 0.5989251122135602
User 85943 improves AUC. Keeping the model.
Training on augumented user 67833 23/50 current_auc = 0.5989251122135602
User 67833 AUC after training: 0.599161351287503
User 67833 improves AUC. Keeping the model.
Training on augumented user 137549 24/50 current_auc = 0.599161351287503
User 137549 AUC after training: 0.5987479329081029
User 137549 does not improve AUC. Reverting changes.
Training on augumented user 123078 25/50 current_auc = 0.599161351287503
User 123078 AUC after training: 0.5990432317505315
User 123078 does not improve AUC. Reverting changes.
Training on augumented user 93774 26/50 current_auc = 0.599161351287503
User 93774 AUC after training: 0.5988660524450744
User 93774 does not improve AUC. Reverting changes.
Training on augumented user 109230 27/50 current_auc = 0.599161351287503
User 109230 AUC after training: 0.5991022915190173
User 109230 does not improve AUC. Reverting changes.
Training on augumented user 84965 28/50 current_auc = 0.599161351287503
User 84965 AUC after training: 0.5993975903614459
User 84965 improves AUC. Keeping the model.
Training on augumented user 114033 29/50 current_auc = 0.5993975903614459
User 114033 AUC after training: 0.5992794708244744
User 114033 does not improve AUC. Reverting changes.
Training on augumented user 89959 30/50 current_auc = 0.5993975903614459
User 89959 AUC after training: 0.5995157098984173
User 89959 improves AUC. Keeping the model.
Training on augumented user 35771 31/50 current_auc = 0.5995157098984173
User 35771 AUC after training: 0.59954523978266
User 35771 improves AUC. Keeping the model.
Training on augumented user 107418 32/50 current_auc = 0.59954523978266
User 107418 AUC after training: 0.5996338294353887
User 107418 improves AUC. Keeping the model.
Training on augumented user 124643 33/50 current_auc = 0.5996338294353887
User 124643 AUC after training: 0.5996928892038744
User 124643 improves AUC. Keeping the model.
Training on augumented user 119702 34/50 current_auc = 0.5996928892038744
User 119702 AUC after training: 0.5999291282778172
User 119702 improves AUC. Keeping the model.
Training on augumented user 50441 35/50 current_auc = 0.5999291282778172
User 50441 AUC after training: 0.5995157098984172
User 50441 does not improve AUC. Reverting changes.
Training on augumented user 13492 36/50 current_auc = 0.5999291282778172
User 13492 AUC after training: 0.5992794708244744
User 13492 does not improve AUC. Reverting changes.
Training on augumented user 42903 37/50 current_auc = 0.5999291282778172
User 42903 AUC after training: 0.5991613512875029
User 42903 does not improve AUC. Reverting changes.
Training on augumented user 70770 38/50 current_auc = 0.5999291282778172
User 70770 AUC after training: 0.5988365225608316
User 70770 does not improve AUC. Reverting changes.
Training on augumented user 58219 39/50 current_auc = 0.5999291282778172
User 58219 AUC after training: 0.6003425466572171
User 58219 improves AUC. Keeping the model.
Training on augumented user 86411 40/50 current_auc = 0.6003425466572171
User 86411 AUC after training: 0.6004606661941886
User 86411 improves AUC. Keeping the model.
Training on augumented user 4754 41/50 current_auc = 0.6004606661941886
User 4754 AUC after training: 0.6003425466572172
User 4754 does not improve AUC. Reverting changes.
Training on augumented user 14571 42/50 current_auc = 0.6004606661941886
User 14571 AUC after training: 0.60057878573116
User 14571 improves AUC. Keeping the model.
Training on augumented user 20609 43/50 current_auc = 0.60057878573116
User 20609 AUC after training: 0.60057878573116
User 20609 does not improve AUC. Reverting changes.
Training on augumented user 127854 44/50 current_auc = 0.60057878573116
User 127854 AUC after training: 0.6002244271202457
User 127854 does not improve AUC. Reverting changes.
Training on augumented user 84983 45/50 current_auc = 0.60057878573116
User 84983 AUC after training: 0.6010512638790456
User 84983 improves AUC. Keeping the model.
Training on augumented user 132044 46/50 current_auc = 0.6010512638790456
User 132044 AUC after training: 0.6003425466572172
User 132044 does not improve AUC. Reverting changes.
Training on augumented user 85674 47/50 current_auc = 0.6010512638790456
User 85674 AUC after training: 0.6009922041105599
User 85674 does not improve AUC. Reverting changes.
Training on augumented user 40735 48/50 current_auc = 0.6010512638790456
User 40735 AUC after training: 0.6007559650366171
User 40735 does not improve AUC. Reverting changes.
Training on augumented user 16574 49/50 current_auc = 0.6010512638790456
User 16574 AUC after training: 0.6011103236475314
User 16574 improves AUC. Keeping the model.
[2024-12-02 18:36:54.551605] start test user 126467 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:55.268860] start test user 126467 109/567 recall augumented users by random, augumented_users = [54846, 64817, 88216, 108865, 71745, 49971, 18376, 98504, 107636, 42935, 130750, 5814, 66264, 112969, 7575, 92910, 110160, 21333, 123708, 53288, 19579, 136364, 96105, 14939, 38476, 83947, 122339, 28789, 877, 6923, 130290, 133485, 138267, 56582, 112916, 56143, 595, 110477, 87340, 56556, 39400, 8458, 108296, 116955, 35468, 73250, 51485, 49571, 67731, 69031]
[2024-12-02 18:36:55.285159] user = 126467 Cloud 109/567
[2024-12-02 18:36:55.296066] user = 126467 Local 109/567
[2024-12-02 18:36:55.413959] user = 126467 Local+ 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:58.361521] user = 126467 MPDA- 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6875
Training on augumented user 54846 0/50 current_auc = 0.6875
User 54846 AUC after training: 0.6875
User 54846 does not improve AUC. Reverting changes.
Training on augumented user 64817 1/50 current_auc = 0.6875
User 64817 AUC after training: 0.6875
User 64817 does not improve AUC. Reverting changes.
Training on augumented user 88216 2/50 current_auc = 0.6875
User 88216 AUC after training: 0.671875
User 88216 does not improve AUC. Reverting changes.
Training on augumented user 108865 3/50 current_auc = 0.6875
User 108865 AUC after training: 0.671875
User 108865 does not improve AUC. Reverting changes.
Training on augumented user 71745 4/50 current_auc = 0.6875
User 71745 AUC after training: 0.6875
User 71745 does not improve AUC. Reverting changes.
Training on augumented user 49971 5/50 current_auc = 0.6875
User 49971 AUC after training: 0.671875
User 49971 does not improve AUC. Reverting changes.
Training on augumented user 18376 6/50 current_auc = 0.6875
User 18376 AUC after training: 0.6875
User 18376 does not improve AUC. Reverting changes.
Training on augumented user 98504 7/50 current_auc = 0.6875
User 98504 AUC after training: 0.6875
User 98504 does not improve AUC. Reverting changes.
Training on augumented user 107636 8/50 current_auc = 0.6875
User 107636 AUC after training: 0.6875
User 107636 does not improve AUC. Reverting changes.
Training on augumented user 42935 9/50 current_auc = 0.6875
User 42935 AUC after training: 0.6875
User 42935 does not improve AUC. Reverting changes.
Training on augumented user 130750 10/50 current_auc = 0.6875
User 130750 AUC after training: 0.6875
User 130750 does not improve AUC. Reverting changes.
Training on augumented user 5814 11/50 current_auc = 0.6875
User 5814 AUC after training: 0.671875
User 5814 does not improve AUC. Reverting changes.
Training on augumented user 66264 12/50 current_auc = 0.6875
User 66264 AUC after training: 0.6875
User 66264 does not improve AUC. Reverting changes.
Training on augumented user 112969 13/50 current_auc = 0.6875
User 112969 AUC after training: 0.6875
User 112969 does not improve AUC. Reverting changes.
Training on augumented user 7575 14/50 current_auc = 0.6875
User 7575 AUC after training: 0.6875
User 7575 does not improve AUC. Reverting changes.
Training on augumented user 92910 15/50 current_auc = 0.6875
User 92910 AUC after training: 0.671875
User 92910 does not improve AUC. Reverting changes.
Training on augumented user 110160 16/50 current_auc = 0.6875
User 110160 AUC after training: 0.6875
User 110160 does not improve AUC. Reverting changes.
Training on augumented user 21333 17/50 current_auc = 0.6875
User 21333 AUC after training: 0.6875
User 21333 does not improve AUC. Reverting changes.
Training on augumented user 123708 18/50 current_auc = 0.6875
User 123708 AUC after training: 0.671875
User 123708 does not improve AUC. Reverting changes.
Training on augumented user 53288 19/50 current_auc = 0.6875
User 53288 AUC after training: 0.671875
User 53288 does not improve AUC. Reverting changes.
Training on augumented user 19579 20/50 current_auc = 0.6875
User 19579 AUC after training: 0.6875
User 19579 does not improve AUC. Reverting changes.
Training on augumented user 136364 21/50 current_auc = 0.6875
User 136364 AUC after training: 0.671875
User 136364 does not improve AUC. Reverting changes.
Training on augumented user 96105 22/50 current_auc = 0.6875
User 96105 AUC after training: 0.6875
User 96105 does not improve AUC. Reverting changes.
Training on augumented user 14939 23/50 current_auc = 0.6875
User 14939 AUC after training: 0.6875
User 14939 does not improve AUC. Reverting changes.
Training on augumented user 38476 24/50 current_auc = 0.6875
User 38476 AUC after training: 0.6875
User 38476 does not improve AUC. Reverting changes.
Training on augumented user 83947 25/50 current_auc = 0.6875
User 83947 AUC after training: 0.6875
User 83947 does not improve AUC. Reverting changes.
Training on augumented user 122339 26/50 current_auc = 0.6875
User 122339 AUC after training: 0.671875
User 122339 does not improve AUC. Reverting changes.
Training on augumented user 28789 27/50 current_auc = 0.6875
User 28789 AUC after training: 0.6875
User 28789 does not improve AUC. Reverting changes.
Training on augumented user 877 28/50 current_auc = 0.6875
User 877 AUC after training: 0.671875
User 877 does not improve AUC. Reverting changes.
Training on augumented user 6923 29/50 current_auc = 0.6875
User 6923 AUC after training: 0.6875
User 6923 does not improve AUC. Reverting changes.
Training on augumented user 130290 30/50 current_auc = 0.6875
User 130290 AUC after training: 0.6875
User 130290 does not improve AUC. Reverting changes.
Training on augumented user 133485 31/50 current_auc = 0.6875
User 133485 AUC after training: 0.671875
User 133485 does not improve AUC. Reverting changes.
Training on augumented user 138267 32/50 current_auc = 0.6875
User 138267 AUC after training: 0.6875
User 138267 does not improve AUC. Reverting changes.
Training on augumented user 56582 33/50 current_auc = 0.6875
User 56582 AUC after training: 0.6875
User 56582 does not improve AUC. Reverting changes.
Training on augumented user 112916 34/50 current_auc = 0.6875
User 112916 AUC after training: 0.6875
User 112916 does not improve AUC. Reverting changes.
Training on augumented user 56143 35/50 current_auc = 0.6875
User 56143 AUC after training: 0.6875
User 56143 does not improve AUC. Reverting changes.
Training on augumented user 595 36/50 current_auc = 0.6875
User 595 AUC after training: 0.671875
User 595 does not improve AUC. Reverting changes.
Training on augumented user 110477 37/50 current_auc = 0.6875
User 110477 AUC after training: 0.6875
User 110477 does not improve AUC. Reverting changes.
Training on augumented user 87340 38/50 current_auc = 0.6875
User 87340 AUC after training: 0.671875
User 87340 does not improve AUC. Reverting changes.
Training on augumented user 56556 39/50 current_auc = 0.6875
User 56556 AUC after training: 0.6875
User 56556 does not improve AUC. Reverting changes.
Training on augumented user 39400 40/50 current_auc = 0.6875
User 39400 AUC after training: 0.6875
User 39400 does not improve AUC. Reverting changes.
Training on augumented user 8458 41/50 current_auc = 0.6875
User 8458 AUC after training: 0.671875
User 8458 does not improve AUC. Reverting changes.
Training on augumented user 108296 42/50 current_auc = 0.6875
User 108296 AUC after training: 0.6875
User 108296 does not improve AUC. Reverting changes.
Training on augumented user 116955 43/50 current_auc = 0.6875
User 116955 AUC after training: 0.6875
User 116955 does not improve AUC. Reverting changes.
Training on augumented user 35468 44/50 current_auc = 0.6875
User 35468 AUC after training: 0.6875
User 35468 does not improve AUC. Reverting changes.
Training on augumented user 73250 45/50 current_auc = 0.6875
User 73250 AUC after training: 0.6875
User 73250 does not improve AUC. Reverting changes.
Training on augumented user 51485 46/50 current_auc = 0.6875
User 51485 AUC after training: 0.6875
User 51485 does not improve AUC. Reverting changes.
Training on augumented user 49571 47/50 current_auc = 0.6875
User 49571 AUC after training: 0.6875
User 49571 does not improve AUC. Reverting changes.
Training on augumented user 67731 48/50 current_auc = 0.6875
User 67731 AUC after training: 0.6875
User 67731 does not improve AUC. Reverting changes.
Training on augumented user 69031 49/50 current_auc = 0.6875
User 69031 AUC after training: 0.6875
User 69031 does not improve AUC. Reverting changes.
[2024-12-02 18:37:23.122209] start test user 126526 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:23.525670] start test user 126526 110/567 recall augumented users by random, augumented_users = [1488, 25732, 44451, 29776, 118978, 80997, 73394, 119019, 108409, 123500, 6504, 78225, 103438, 118171, 72756, 50250, 129686, 3361, 71307, 43817, 22802, 71685, 14760, 4244, 74647, 129547, 5668, 123043, 97589, 97882, 48007, 75171, 13246, 85039, 59415, 18308, 129419, 41074, 21035, 42499, 29639, 132237, 68792, 92142, 94211, 129016, 37482, 102441, 2157, 111188]
[2024-12-02 18:37:23.539919] user = 126526 Cloud 110/567
[2024-12-02 18:37:23.551877] user = 126526 Local 110/567
[2024-12-02 18:37:23.607293] user = 126526 Local+ 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:25.845447] user = 126526 MPDA- 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6505102040816326
Training on augumented user 1488 0/50 current_auc = 0.6505102040816326
User 1488 AUC after training: 0.6505102040816326
User 1488 does not improve AUC. Reverting changes.
Training on augumented user 25732 1/50 current_auc = 0.6505102040816326
User 25732 AUC after training: 0.6517857142857142
User 25732 improves AUC. Keeping the model.
Training on augumented user 44451 2/50 current_auc = 0.6517857142857142
User 44451 AUC after training: 0.6517857142857142
User 44451 does not improve AUC. Reverting changes.
Training on augumented user 29776 3/50 current_auc = 0.6517857142857142
User 29776 AUC after training: 0.6479591836734694
User 29776 does not improve AUC. Reverting changes.
Training on augumented user 118978 4/50 current_auc = 0.6517857142857142
User 118978 AUC after training: 0.6517857142857142
User 118978 does not improve AUC. Reverting changes.
Training on augumented user 80997 5/50 current_auc = 0.6517857142857142
User 80997 AUC after training: 0.6543367346938775
User 80997 improves AUC. Keeping the model.
Training on augumented user 73394 6/50 current_auc = 0.6543367346938775
User 73394 AUC after training: 0.6543367346938775
User 73394 does not improve AUC. Reverting changes.
Training on augumented user 119019 7/50 current_auc = 0.6543367346938775
User 119019 AUC after training: 0.6505102040816326
User 119019 does not improve AUC. Reverting changes.
Training on augumented user 108409 8/50 current_auc = 0.6543367346938775
User 108409 AUC after training: 0.6505102040816326
User 108409 does not improve AUC. Reverting changes.
Training on augumented user 123500 9/50 current_auc = 0.6543367346938775
User 123500 AUC after training: 0.6581632653061225
User 123500 improves AUC. Keeping the model.
Training on augumented user 6504 10/50 current_auc = 0.6581632653061225
User 6504 AUC after training: 0.6581632653061225
User 6504 does not improve AUC. Reverting changes.
Training on augumented user 78225 11/50 current_auc = 0.6581632653061225
User 78225 AUC after training: 0.6581632653061225
User 78225 does not improve AUC. Reverting changes.
Training on augumented user 103438 12/50 current_auc = 0.6581632653061225
User 103438 AUC after training: 0.6581632653061225
User 103438 does not improve AUC. Reverting changes.
Training on augumented user 118171 13/50 current_auc = 0.6581632653061225
User 118171 AUC after training: 0.659438775510204
User 118171 improves AUC. Keeping the model.
Training on augumented user 72756 14/50 current_auc = 0.659438775510204
User 72756 AUC after training: 0.6607142857142857
User 72756 improves AUC. Keeping the model.
Training on augumented user 50250 15/50 current_auc = 0.6607142857142857
User 50250 AUC after training: 0.659438775510204
User 50250 does not improve AUC. Reverting changes.
Training on augumented user 129686 16/50 current_auc = 0.6607142857142857
User 129686 AUC after training: 0.6479591836734694
User 129686 does not improve AUC. Reverting changes.
Training on augumented user 3361 17/50 current_auc = 0.6607142857142857
User 3361 AUC after training: 0.6568877551020409
User 3361 does not improve AUC. Reverting changes.
Training on augumented user 71307 18/50 current_auc = 0.6607142857142857
User 71307 AUC after training: 0.653061224489796
User 71307 does not improve AUC. Reverting changes.
Training on augumented user 43817 19/50 current_auc = 0.6607142857142857
User 43817 AUC after training: 0.6543367346938775
User 43817 does not improve AUC. Reverting changes.
Training on augumented user 22802 20/50 current_auc = 0.6607142857142857
User 22802 AUC after training: 0.6581632653061225
User 22802 does not improve AUC. Reverting changes.
Training on augumented user 71685 21/50 current_auc = 0.6607142857142857
User 71685 AUC after training: 0.6568877551020409
User 71685 does not improve AUC. Reverting changes.
Training on augumented user 14760 22/50 current_auc = 0.6607142857142857
User 14760 AUC after training: 0.6619897959183674
User 14760 improves AUC. Keeping the model.
Training on augumented user 4244 23/50 current_auc = 0.6619897959183674
User 4244 AUC after training: 0.6581632653061225
User 4244 does not improve AUC. Reverting changes.
Training on augumented user 74647 24/50 current_auc = 0.6619897959183674
User 74647 AUC after training: 0.6568877551020407
User 74647 does not improve AUC. Reverting changes.
Training on augumented user 129547 25/50 current_auc = 0.6619897959183674
User 129547 AUC after training: 0.659438775510204
User 129547 does not improve AUC. Reverting changes.
Training on augumented user 5668 26/50 current_auc = 0.6619897959183674
User 5668 AUC after training: 0.6607142857142858
User 5668 does not improve AUC. Reverting changes.
Training on augumented user 123043 27/50 current_auc = 0.6619897959183674
User 123043 AUC after training: 0.6581632653061225
User 123043 does not improve AUC. Reverting changes.
Training on augumented user 97589 28/50 current_auc = 0.6619897959183674
User 97589 AUC after training: 0.6581632653061225
User 97589 does not improve AUC. Reverting changes.
Training on augumented user 97882 29/50 current_auc = 0.6619897959183674
User 97882 AUC after training: 0.659438775510204
User 97882 does not improve AUC. Reverting changes.
Training on augumented user 48007 30/50 current_auc = 0.6619897959183674
User 48007 AUC after training: 0.6607142857142857
User 48007 does not improve AUC. Reverting changes.
Training on augumented user 75171 31/50 current_auc = 0.6619897959183674
User 75171 AUC after training: 0.6568877551020408
User 75171 does not improve AUC. Reverting changes.
Training on augumented user 13246 32/50 current_auc = 0.6619897959183674
User 13246 AUC after training: 0.6619897959183674
User 13246 does not improve AUC. Reverting changes.
Training on augumented user 85039 33/50 current_auc = 0.6619897959183674
User 85039 AUC after training: 0.653061224489796
User 85039 does not improve AUC. Reverting changes.
Training on augumented user 59415 34/50 current_auc = 0.6619897959183674
User 59415 AUC after training: 0.659438775510204
User 59415 does not improve AUC. Reverting changes.
Training on augumented user 18308 35/50 current_auc = 0.6619897959183674
User 18308 AUC after training: 0.6619897959183674
User 18308 does not improve AUC. Reverting changes.
Training on augumented user 129419 36/50 current_auc = 0.6619897959183674
User 129419 AUC after training: 0.6505102040816326
User 129419 does not improve AUC. Reverting changes.
Training on augumented user 41074 37/50 current_auc = 0.6619897959183674
User 41074 AUC after training: 0.659438775510204
User 41074 does not improve AUC. Reverting changes.
Training on augumented user 21035 38/50 current_auc = 0.6619897959183674
User 21035 AUC after training: 0.6568877551020409
User 21035 does not improve AUC. Reverting changes.
Training on augumented user 42499 39/50 current_auc = 0.6619897959183674
User 42499 AUC after training: 0.6568877551020409
User 42499 does not improve AUC. Reverting changes.
Training on augumented user 29639 40/50 current_auc = 0.6619897959183674
User 29639 AUC after training: 0.6581632653061225
User 29639 does not improve AUC. Reverting changes.
Training on augumented user 132237 41/50 current_auc = 0.6619897959183674
User 132237 AUC after training: 0.6556122448979591
User 132237 does not improve AUC. Reverting changes.
Training on augumented user 68792 42/50 current_auc = 0.6619897959183674
User 68792 AUC after training: 0.659438775510204
User 68792 does not improve AUC. Reverting changes.
Training on augumented user 92142 43/50 current_auc = 0.6619897959183674
User 92142 AUC after training: 0.6568877551020408
User 92142 does not improve AUC. Reverting changes.
Training on augumented user 94211 44/50 current_auc = 0.6619897959183674
User 94211 AUC after training: 0.6543367346938775
User 94211 does not improve AUC. Reverting changes.
Training on augumented user 129016 45/50 current_auc = 0.6619897959183674
User 129016 AUC after training: 0.6581632653061225
User 129016 does not improve AUC. Reverting changes.
Training on augumented user 37482 46/50 current_auc = 0.6619897959183674
User 37482 AUC after training: 0.6619897959183674
User 37482 does not improve AUC. Reverting changes.
Training on augumented user 102441 47/50 current_auc = 0.6619897959183674
User 102441 AUC after training: 0.6556122448979592
User 102441 does not improve AUC. Reverting changes.
Training on augumented user 2157 48/50 current_auc = 0.6619897959183674
User 2157 AUC after training: 0.6581632653061225
User 2157 does not improve AUC. Reverting changes.
Training on augumented user 111188 49/50 current_auc = 0.6619897959183674
User 111188 AUC after training: 0.6517857142857143
User 111188 does not improve AUC. Reverting changes.
[2024-12-02 18:37:54.225765] start test user 126527 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:54.691428] start test user 126527 111/567 recall augumented users by random, augumented_users = [113, 64994, 28955, 36276, 116456, 32570, 41951, 6688, 49894, 108558, 55294, 90737, 59659, 106463, 100327, 97897, 60731, 67117, 26211, 110068, 68669, 93249, 63412, 22922, 1943, 24240, 40270, 92408, 4157, 8935, 113669, 96445, 5487, 121711, 98838, 84669, 73051, 19955, 10016, 73022, 48359, 67904, 70584, 42828, 122697, 81262, 16031, 15781, 3146, 87991]
[2024-12-02 18:37:54.707796] user = 126527 Cloud 111/567
[2024-12-02 18:37:54.717959] user = 126527 Local 111/567
[2024-12-02 18:37:54.823154] user = 126527 Local+ 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:56.357925] user = 126527 MPDA- 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.734375
Training on augumented user 113 0/50 current_auc = 0.734375
User 113 AUC after training: 0.734375
User 113 does not improve AUC. Reverting changes.
Training on augumented user 64994 1/50 current_auc = 0.734375
User 64994 AUC after training: 0.734375
User 64994 does not improve AUC. Reverting changes.
Training on augumented user 28955 2/50 current_auc = 0.734375
User 28955 AUC after training: 0.734375
User 28955 does not improve AUC. Reverting changes.
Training on augumented user 36276 3/50 current_auc = 0.734375
User 36276 AUC after training: 0.734375
User 36276 does not improve AUC. Reverting changes.
Training on augumented user 116456 4/50 current_auc = 0.734375
User 116456 AUC after training: 0.734375
User 116456 does not improve AUC. Reverting changes.
Training on augumented user 32570 5/50 current_auc = 0.734375
User 32570 AUC after training: 0.734375
User 32570 does not improve AUC. Reverting changes.
Training on augumented user 41951 6/50 current_auc = 0.734375
User 41951 AUC after training: 0.734375
User 41951 does not improve AUC. Reverting changes.
Training on augumented user 6688 7/50 current_auc = 0.734375
User 6688 AUC after training: 0.734375
User 6688 does not improve AUC. Reverting changes.
Training on augumented user 49894 8/50 current_auc = 0.734375
User 49894 AUC after training: 0.734375
User 49894 does not improve AUC. Reverting changes.
Training on augumented user 108558 9/50 current_auc = 0.734375
User 108558 AUC after training: 0.734375
User 108558 does not improve AUC. Reverting changes.
Training on augumented user 55294 10/50 current_auc = 0.734375
User 55294 AUC after training: 0.734375
User 55294 does not improve AUC. Reverting changes.
Training on augumented user 90737 11/50 current_auc = 0.734375
User 90737 AUC after training: 0.734375
User 90737 does not improve AUC. Reverting changes.
Training on augumented user 59659 12/50 current_auc = 0.734375
User 59659 AUC after training: 0.734375
User 59659 does not improve AUC. Reverting changes.
Training on augumented user 106463 13/50 current_auc = 0.734375
User 106463 AUC after training: 0.734375
User 106463 does not improve AUC. Reverting changes.
Training on augumented user 100327 14/50 current_auc = 0.734375
User 100327 AUC after training: 0.734375
User 100327 does not improve AUC. Reverting changes.
Training on augumented user 97897 15/50 current_auc = 0.734375
User 97897 AUC after training: 0.734375
User 97897 does not improve AUC. Reverting changes.
Training on augumented user 60731 16/50 current_auc = 0.734375
User 60731 AUC after training: 0.734375
User 60731 does not improve AUC. Reverting changes.
Training on augumented user 67117 17/50 current_auc = 0.734375
User 67117 AUC after training: 0.734375
User 67117 does not improve AUC. Reverting changes.
Training on augumented user 26211 18/50 current_auc = 0.734375
User 26211 AUC after training: 0.734375
User 26211 does not improve AUC. Reverting changes.
Training on augumented user 110068 19/50 current_auc = 0.734375
User 110068 AUC after training: 0.734375
User 110068 does not improve AUC. Reverting changes.
Training on augumented user 68669 20/50 current_auc = 0.734375
User 68669 AUC after training: 0.734375
User 68669 does not improve AUC. Reverting changes.
Training on augumented user 93249 21/50 current_auc = 0.734375
User 93249 AUC after training: 0.734375
User 93249 does not improve AUC. Reverting changes.
Training on augumented user 63412 22/50 current_auc = 0.734375
User 63412 AUC after training: 0.734375
User 63412 does not improve AUC. Reverting changes.
Training on augumented user 22922 23/50 current_auc = 0.734375
User 22922 AUC after training: 0.734375
User 22922 does not improve AUC. Reverting changes.
Training on augumented user 1943 24/50 current_auc = 0.734375
User 1943 AUC after training: 0.734375
User 1943 does not improve AUC. Reverting changes.
Training on augumented user 24240 25/50 current_auc = 0.734375
User 24240 AUC after training: 0.734375
User 24240 does not improve AUC. Reverting changes.
Training on augumented user 40270 26/50 current_auc = 0.734375
User 40270 AUC after training: 0.734375
User 40270 does not improve AUC. Reverting changes.
Training on augumented user 92408 27/50 current_auc = 0.734375
User 92408 AUC after training: 0.734375
User 92408 does not improve AUC. Reverting changes.
Training on augumented user 4157 28/50 current_auc = 0.734375
User 4157 AUC after training: 0.734375
User 4157 does not improve AUC. Reverting changes.
Training on augumented user 8935 29/50 current_auc = 0.734375
User 8935 AUC after training: 0.734375
User 8935 does not improve AUC. Reverting changes.
Training on augumented user 113669 30/50 current_auc = 0.734375
User 113669 AUC after training: 0.734375
User 113669 does not improve AUC. Reverting changes.
Training on augumented user 96445 31/50 current_auc = 0.734375
User 96445 AUC after training: 0.734375
User 96445 does not improve AUC. Reverting changes.
Training on augumented user 5487 32/50 current_auc = 0.734375
User 5487 AUC after training: 0.734375
User 5487 does not improve AUC. Reverting changes.
Training on augumented user 121711 33/50 current_auc = 0.734375
User 121711 AUC after training: 0.734375
User 121711 does not improve AUC. Reverting changes.
Training on augumented user 98838 34/50 current_auc = 0.734375
User 98838 AUC after training: 0.734375
User 98838 does not improve AUC. Reverting changes.
Training on augumented user 84669 35/50 current_auc = 0.734375
User 84669 AUC after training: 0.734375
User 84669 does not improve AUC. Reverting changes.
Training on augumented user 73051 36/50 current_auc = 0.734375
User 73051 AUC after training: 0.734375
User 73051 does not improve AUC. Reverting changes.
Training on augumented user 19955 37/50 current_auc = 0.734375
User 19955 AUC after training: 0.734375
User 19955 does not improve AUC. Reverting changes.
Training on augumented user 10016 38/50 current_auc = 0.734375
User 10016 AUC after training: 0.734375
User 10016 does not improve AUC. Reverting changes.
Training on augumented user 73022 39/50 current_auc = 0.734375
User 73022 AUC after training: 0.734375
User 73022 does not improve AUC. Reverting changes.
Training on augumented user 48359 40/50 current_auc = 0.734375
User 48359 AUC after training: 0.734375
User 48359 does not improve AUC. Reverting changes.
Training on augumented user 67904 41/50 current_auc = 0.734375
User 67904 AUC after training: 0.734375
User 67904 does not improve AUC. Reverting changes.
Training on augumented user 70584 42/50 current_auc = 0.734375
User 70584 AUC after training: 0.734375
User 70584 does not improve AUC. Reverting changes.
Training on augumented user 42828 43/50 current_auc = 0.734375
User 42828 AUC after training: 0.734375
User 42828 does not improve AUC. Reverting changes.
Training on augumented user 122697 44/50 current_auc = 0.734375
User 122697 AUC after training: 0.734375
User 122697 does not improve AUC. Reverting changes.
Training on augumented user 81262 45/50 current_auc = 0.734375
User 81262 AUC after training: 0.734375
User 81262 does not improve AUC. Reverting changes.
Training on augumented user 16031 46/50 current_auc = 0.734375
User 16031 AUC after training: 0.734375
User 16031 does not improve AUC. Reverting changes.
Training on augumented user 15781 47/50 current_auc = 0.734375
User 15781 AUC after training: 0.734375
User 15781 does not improve AUC. Reverting changes.
Training on augumented user 3146 48/50 current_auc = 0.734375
User 3146 AUC after training: 0.734375
User 3146 does not improve AUC. Reverting changes.
Training on augumented user 87991 49/50 current_auc = 0.734375
User 87991 AUC after training: 0.734375
User 87991 does not improve AUC. Reverting changes.
[2024-12-02 18:38:21.160052] start test user 126575 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:21.570811] start test user 126575 112/567 recall augumented users by random, augumented_users = [127967, 135759, 58180, 110045, 39404, 35731, 64393, 136503, 7845, 27341, 66606, 20709, 92249, 100360, 69895, 48196, 69780, 20550, 3619, 51183, 126812, 79013, 108409, 124521, 21409, 14377, 130221, 60032, 15573, 91618, 75284, 588, 96795, 67873, 9872, 48579, 27224, 88307, 127748, 37306, 92065, 88483, 12089, 21935, 17348, 10035, 104010, 56488, 85102, 60812]
[2024-12-02 18:38:21.586590] user = 126575 Cloud 112/567
[2024-12-02 18:38:21.598216] user = 126575 Local 112/567
[2024-12-02 18:38:21.679854] user = 126575 Local+ 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:23.790161] user = 126575 MPDA- 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.34408602150537637
Training on augumented user 127967 0/50 current_auc = 0.34408602150537637
User 127967 AUC after training: 0.3763440860215054
User 127967 improves AUC. Keeping the model.
Training on augumented user 135759 1/50 current_auc = 0.3763440860215054
User 135759 AUC after training: 0.3655913978494624
User 135759 does not improve AUC. Reverting changes.
Training on augumented user 58180 2/50 current_auc = 0.3763440860215054
User 58180 AUC after training: 0.3548387096774194
User 58180 does not improve AUC. Reverting changes.
Training on augumented user 110045 3/50 current_auc = 0.3763440860215054
User 110045 AUC after training: 0.3548387096774194
User 110045 does not improve AUC. Reverting changes.
Training on augumented user 39404 4/50 current_auc = 0.3763440860215054
User 39404 AUC after training: 0.3655913978494624
User 39404 does not improve AUC. Reverting changes.
Training on augumented user 35731 5/50 current_auc = 0.3763440860215054
User 35731 AUC after training: 0.34408602150537637
User 35731 does not improve AUC. Reverting changes.
Training on augumented user 64393 6/50 current_auc = 0.3763440860215054
User 64393 AUC after training: 0.3548387096774194
User 64393 does not improve AUC. Reverting changes.
Training on augumented user 136503 7/50 current_auc = 0.3763440860215054
User 136503 AUC after training: 0.3763440860215054
User 136503 does not improve AUC. Reverting changes.
Training on augumented user 7845 8/50 current_auc = 0.3763440860215054
User 7845 AUC after training: 0.3763440860215054
User 7845 does not improve AUC. Reverting changes.
Training on augumented user 27341 9/50 current_auc = 0.3763440860215054
User 27341 AUC after training: 0.3763440860215054
User 27341 does not improve AUC. Reverting changes.
Training on augumented user 66606 10/50 current_auc = 0.3763440860215054
User 66606 AUC after training: 0.3763440860215054
User 66606 does not improve AUC. Reverting changes.
Training on augumented user 20709 11/50 current_auc = 0.3763440860215054
User 20709 AUC after training: 0.3655913978494624
User 20709 does not improve AUC. Reverting changes.
Training on augumented user 92249 12/50 current_auc = 0.3763440860215054
User 92249 AUC after training: 0.3655913978494624
User 92249 does not improve AUC. Reverting changes.
Training on augumented user 100360 13/50 current_auc = 0.3763440860215054
User 100360 AUC after training: 0.3548387096774194
User 100360 does not improve AUC. Reverting changes.
Training on augumented user 69895 14/50 current_auc = 0.3763440860215054
User 69895 AUC after training: 0.3763440860215054
User 69895 does not improve AUC. Reverting changes.
Training on augumented user 48196 15/50 current_auc = 0.3763440860215054
User 48196 AUC after training: 0.34408602150537637
User 48196 does not improve AUC. Reverting changes.
Training on augumented user 69780 16/50 current_auc = 0.3763440860215054
User 69780 AUC after training: 0.3548387096774194
User 69780 does not improve AUC. Reverting changes.
Training on augumented user 20550 17/50 current_auc = 0.3763440860215054
User 20550 AUC after training: 0.3655913978494624
User 20550 does not improve AUC. Reverting changes.
Training on augumented user 3619 18/50 current_auc = 0.3763440860215054
User 3619 AUC after training: 0.34408602150537637
User 3619 does not improve AUC. Reverting changes.
Training on augumented user 51183 19/50 current_auc = 0.3763440860215054
User 51183 AUC after training: 0.3763440860215054
User 51183 does not improve AUC. Reverting changes.
Training on augumented user 126812 20/50 current_auc = 0.3763440860215054
User 126812 AUC after training: 0.3548387096774194
User 126812 does not improve AUC. Reverting changes.
Training on augumented user 79013 21/50 current_auc = 0.3763440860215054
User 79013 AUC after training: 0.3763440860215054
User 79013 does not improve AUC. Reverting changes.
Training on augumented user 108409 22/50 current_auc = 0.3763440860215054
User 108409 AUC after training: 0.3763440860215054
User 108409 does not improve AUC. Reverting changes.
Training on augumented user 124521 23/50 current_auc = 0.3763440860215054
User 124521 AUC after training: 0.3763440860215054
User 124521 does not improve AUC. Reverting changes.
Training on augumented user 21409 24/50 current_auc = 0.3763440860215054
User 21409 AUC after training: 0.3655913978494624
User 21409 does not improve AUC. Reverting changes.
Training on augumented user 14377 25/50 current_auc = 0.3763440860215054
User 14377 AUC after training: 0.3548387096774194
User 14377 does not improve AUC. Reverting changes.
Training on augumented user 130221 26/50 current_auc = 0.3763440860215054
User 130221 AUC after training: 0.3763440860215054
User 130221 does not improve AUC. Reverting changes.
Training on augumented user 60032 27/50 current_auc = 0.3763440860215054
User 60032 AUC after training: 0.3548387096774194
User 60032 does not improve AUC. Reverting changes.
Training on augumented user 15573 28/50 current_auc = 0.3763440860215054
User 15573 AUC after training: 0.3763440860215054
User 15573 does not improve AUC. Reverting changes.
Training on augumented user 91618 29/50 current_auc = 0.3763440860215054
User 91618 AUC after training: 0.33333333333333337
User 91618 does not improve AUC. Reverting changes.
Training on augumented user 75284 30/50 current_auc = 0.3763440860215054
User 75284 AUC after training: 0.3548387096774194
User 75284 does not improve AUC. Reverting changes.
Training on augumented user 588 31/50 current_auc = 0.3763440860215054
User 588 AUC after training: 0.33333333333333337
User 588 does not improve AUC. Reverting changes.
Training on augumented user 96795 32/50 current_auc = 0.3763440860215054
User 96795 AUC after training: 0.3548387096774194
User 96795 does not improve AUC. Reverting changes.
Training on augumented user 67873 33/50 current_auc = 0.3763440860215054
User 67873 AUC after training: 0.3763440860215054
User 67873 does not improve AUC. Reverting changes.
Training on augumented user 9872 34/50 current_auc = 0.3763440860215054
User 9872 AUC after training: 0.34408602150537637
User 9872 does not improve AUC. Reverting changes.
Training on augumented user 48579 35/50 current_auc = 0.3763440860215054
User 48579 AUC after training: 0.3548387096774194
User 48579 does not improve AUC. Reverting changes.
Training on augumented user 27224 36/50 current_auc = 0.3763440860215054
User 27224 AUC after training: 0.34408602150537637
User 27224 does not improve AUC. Reverting changes.
Training on augumented user 88307 37/50 current_auc = 0.3763440860215054
User 88307 AUC after training: 0.3655913978494624
User 88307 does not improve AUC. Reverting changes.
Training on augumented user 127748 38/50 current_auc = 0.3763440860215054
User 127748 AUC after training: 0.3655913978494624
User 127748 does not improve AUC. Reverting changes.
Training on augumented user 37306 39/50 current_auc = 0.3763440860215054
User 37306 AUC after training: 0.3763440860215054
User 37306 does not improve AUC. Reverting changes.
Training on augumented user 92065 40/50 current_auc = 0.3763440860215054
User 92065 AUC after training: 0.3763440860215054
User 92065 does not improve AUC. Reverting changes.
Training on augumented user 88483 41/50 current_auc = 0.3763440860215054
User 88483 AUC after training: 0.3548387096774194
User 88483 does not improve AUC. Reverting changes.
Training on augumented user 12089 42/50 current_auc = 0.3763440860215054
User 12089 AUC after training: 0.3763440860215054
User 12089 does not improve AUC. Reverting changes.
Training on augumented user 21935 43/50 current_auc = 0.3763440860215054
User 21935 AUC after training: 0.3548387096774194
User 21935 does not improve AUC. Reverting changes.
Training on augumented user 17348 44/50 current_auc = 0.3763440860215054
User 17348 AUC after training: 0.3548387096774194
User 17348 does not improve AUC. Reverting changes.
Training on augumented user 10035 45/50 current_auc = 0.3763440860215054
User 10035 AUC after training: 0.34408602150537637
User 10035 does not improve AUC. Reverting changes.
Training on augumented user 104010 46/50 current_auc = 0.3763440860215054
User 104010 AUC after training: 0.3763440860215054
User 104010 does not improve AUC. Reverting changes.
Training on augumented user 56488 47/50 current_auc = 0.3763440860215054
User 56488 AUC after training: 0.3655913978494624
User 56488 does not improve AUC. Reverting changes.
Training on augumented user 85102 48/50 current_auc = 0.3763440860215054
User 85102 AUC after training: 0.3763440860215054
User 85102 does not improve AUC. Reverting changes.
Training on augumented user 60812 49/50 current_auc = 0.3763440860215054
User 60812 AUC after training: 0.3763440860215054
User 60812 does not improve AUC. Reverting changes.
[2024-12-02 18:38:52.752167] start test user 126611 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:53.616628] start test user 126611 113/567 recall augumented users by random, augumented_users = [5878, 99572, 54788, 65101, 120930, 12817, 60077, 46952, 5329, 17279, 8475, 89993, 98807, 101396, 93426, 100133, 104098, 56430, 23932, 18166, 136528, 439, 26353, 112627, 16078, 79620, 119386, 12516, 15810, 120410, 115627, 72466, 47046, 123068, 11646, 115023, 16522, 8247, 72292, 54802, 14105, 10181, 75829, 49005, 71429, 32173, 62295, 111554, 72607, 82993]
[2024-12-02 18:38:53.634792] user = 126611 Cloud 113/567
[2024-12-02 18:38:53.648133] user = 126611 Local 113/567
[2024-12-02 18:38:53.767857] user = 126611 Local+ 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:55.826098] user = 126611 MPDA- 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8043478260869565
Training on augumented user 5878 0/50 current_auc = 0.8043478260869565
User 5878 AUC after training: 0.8043478260869565
User 5878 does not improve AUC. Reverting changes.
Training on augumented user 99572 1/50 current_auc = 0.8043478260869565
User 99572 AUC after training: 0.8043478260869565
User 99572 does not improve AUC. Reverting changes.
Training on augumented user 54788 2/50 current_auc = 0.8043478260869565
User 54788 AUC after training: 0.8043478260869565
User 54788 does not improve AUC. Reverting changes.
Training on augumented user 65101 3/50 current_auc = 0.8043478260869565
User 65101 AUC after training: 0.8043478260869565
User 65101 does not improve AUC. Reverting changes.
Training on augumented user 120930 4/50 current_auc = 0.8043478260869565
User 120930 AUC after training: 0.8043478260869565
User 120930 does not improve AUC. Reverting changes.
Training on augumented user 12817 5/50 current_auc = 0.8043478260869565
User 12817 AUC after training: 0.8152173913043479
User 12817 improves AUC. Keeping the model.
Training on augumented user 60077 6/50 current_auc = 0.8152173913043479
User 60077 AUC after training: 0.8152173913043479
User 60077 does not improve AUC. Reverting changes.
Training on augumented user 46952 7/50 current_auc = 0.8152173913043479
User 46952 AUC after training: 0.8152173913043479
User 46952 does not improve AUC. Reverting changes.
Training on augumented user 5329 8/50 current_auc = 0.8152173913043479
User 5329 AUC after training: 0.8097826086956521
User 5329 does not improve AUC. Reverting changes.
Training on augumented user 17279 9/50 current_auc = 0.8152173913043479
User 17279 AUC after training: 0.8097826086956521
User 17279 does not improve AUC. Reverting changes.
Training on augumented user 8475 10/50 current_auc = 0.8152173913043479
User 8475 AUC after training: 0.8152173913043479
User 8475 does not improve AUC. Reverting changes.
Training on augumented user 89993 11/50 current_auc = 0.8152173913043479
User 89993 AUC after training: 0.8097826086956521
User 89993 does not improve AUC. Reverting changes.
Training on augumented user 98807 12/50 current_auc = 0.8152173913043479
User 98807 AUC after training: 0.8043478260869565
User 98807 does not improve AUC. Reverting changes.
Training on augumented user 101396 13/50 current_auc = 0.8152173913043479
User 101396 AUC after training: 0.8043478260869565
User 101396 does not improve AUC. Reverting changes.
Training on augumented user 93426 14/50 current_auc = 0.8152173913043479
User 93426 AUC after training: 0.8043478260869565
User 93426 does not improve AUC. Reverting changes.
Training on augumented user 100133 15/50 current_auc = 0.8152173913043479
User 100133 AUC after training: 0.8152173913043479
User 100133 does not improve AUC. Reverting changes.
Training on augumented user 104098 16/50 current_auc = 0.8152173913043479
User 104098 AUC after training: 0.8043478260869565
User 104098 does not improve AUC. Reverting changes.
Training on augumented user 56430 17/50 current_auc = 0.8152173913043479
User 56430 AUC after training: 0.8152173913043479
User 56430 does not improve AUC. Reverting changes.
Training on augumented user 23932 18/50 current_auc = 0.8152173913043479
User 23932 AUC after training: 0.8152173913043479
User 23932 does not improve AUC. Reverting changes.
Training on augumented user 18166 19/50 current_auc = 0.8152173913043479
User 18166 AUC after training: 0.8097826086956521
User 18166 does not improve AUC. Reverting changes.
Training on augumented user 136528 20/50 current_auc = 0.8152173913043479
User 136528 AUC after training: 0.8043478260869565
User 136528 does not improve AUC. Reverting changes.
Training on augumented user 439 21/50 current_auc = 0.8152173913043479
User 439 AUC after training: 0.8043478260869565
User 439 does not improve AUC. Reverting changes.
Training on augumented user 26353 22/50 current_auc = 0.8152173913043479
User 26353 AUC after training: 0.8152173913043479
User 26353 does not improve AUC. Reverting changes.
Training on augumented user 112627 23/50 current_auc = 0.8152173913043479
User 112627 AUC after training: 0.8152173913043479
User 112627 does not improve AUC. Reverting changes.
Training on augumented user 16078 24/50 current_auc = 0.8152173913043479
User 16078 AUC after training: 0.8043478260869565
User 16078 does not improve AUC. Reverting changes.
Training on augumented user 79620 25/50 current_auc = 0.8152173913043479
User 79620 AUC after training: 0.8043478260869565
User 79620 does not improve AUC. Reverting changes.
Training on augumented user 119386 26/50 current_auc = 0.8152173913043479
User 119386 AUC after training: 0.8152173913043479
User 119386 does not improve AUC. Reverting changes.
Training on augumented user 12516 27/50 current_auc = 0.8152173913043479
User 12516 AUC after training: 0.8043478260869565
User 12516 does not improve AUC. Reverting changes.
Training on augumented user 15810 28/50 current_auc = 0.8152173913043479
User 15810 AUC after training: 0.8097826086956521
User 15810 does not improve AUC. Reverting changes.
Training on augumented user 120410 29/50 current_auc = 0.8152173913043479
User 120410 AUC after training: 0.8097826086956521
User 120410 does not improve AUC. Reverting changes.
Training on augumented user 115627 30/50 current_auc = 0.8152173913043479
User 115627 AUC after training: 0.8097826086956521
User 115627 does not improve AUC. Reverting changes.
Training on augumented user 72466 31/50 current_auc = 0.8152173913043479
User 72466 AUC after training: 0.8152173913043479
User 72466 does not improve AUC. Reverting changes.
Training on augumented user 47046 32/50 current_auc = 0.8152173913043479
User 47046 AUC after training: 0.8152173913043479
User 47046 does not improve AUC. Reverting changes.
Training on augumented user 123068 33/50 current_auc = 0.8152173913043479
User 123068 AUC after training: 0.7934782608695652
User 123068 does not improve AUC. Reverting changes.
Training on augumented user 11646 34/50 current_auc = 0.8152173913043479
User 11646 AUC after training: 0.8152173913043479
User 11646 does not improve AUC. Reverting changes.
Training on augumented user 115023 35/50 current_auc = 0.8152173913043479
User 115023 AUC after training: 0.8097826086956521
User 115023 does not improve AUC. Reverting changes.
Training on augumented user 16522 36/50 current_auc = 0.8152173913043479
User 16522 AUC after training: 0.8152173913043479
User 16522 does not improve AUC. Reverting changes.
Training on augumented user 8247 37/50 current_auc = 0.8152173913043479
User 8247 AUC after training: 0.8043478260869565
User 8247 does not improve AUC. Reverting changes.
Training on augumented user 72292 38/50 current_auc = 0.8152173913043479
User 72292 AUC after training: 0.8097826086956521
User 72292 does not improve AUC. Reverting changes.
Training on augumented user 54802 39/50 current_auc = 0.8152173913043479
User 54802 AUC after training: 0.8043478260869565
User 54802 does not improve AUC. Reverting changes.
Training on augumented user 14105 40/50 current_auc = 0.8152173913043479
User 14105 AUC after training: 0.8152173913043479
User 14105 does not improve AUC. Reverting changes.
Training on augumented user 10181 41/50 current_auc = 0.8152173913043479
User 10181 AUC after training: 0.8152173913043479
User 10181 does not improve AUC. Reverting changes.
Training on augumented user 75829 42/50 current_auc = 0.8152173913043479
User 75829 AUC after training: 0.8043478260869565
User 75829 does not improve AUC. Reverting changes.
Training on augumented user 49005 43/50 current_auc = 0.8152173913043479
User 49005 AUC after training: 0.8097826086956521
User 49005 does not improve AUC. Reverting changes.
Training on augumented user 71429 44/50 current_auc = 0.8152173913043479
User 71429 AUC after training: 0.8043478260869565
User 71429 does not improve AUC. Reverting changes.
Training on augumented user 32173 45/50 current_auc = 0.8152173913043479
User 32173 AUC after training: 0.8152173913043479
User 32173 does not improve AUC. Reverting changes.
Training on augumented user 62295 46/50 current_auc = 0.8152173913043479
User 62295 AUC after training: 0.8152173913043479
User 62295 does not improve AUC. Reverting changes.
Training on augumented user 111554 47/50 current_auc = 0.8152173913043479
User 111554 AUC after training: 0.8043478260869565
User 111554 does not improve AUC. Reverting changes.
Training on augumented user 72607 48/50 current_auc = 0.8152173913043479
User 72607 AUC after training: 0.8043478260869565
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 82993 49/50 current_auc = 0.8152173913043479
User 82993 AUC after training: 0.8043478260869565
User 82993 does not improve AUC. Reverting changes.
[2024-12-02 18:39:25.145692] start test user 126680 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:25.551017] start test user 126680 114/567 recall augumented users by random, augumented_users = [2791, 126693, 48593, 117870, 17250, 87175, 108758, 9391, 118925, 73565, 33703, 30368, 74881, 7178, 118583, 86385, 171, 116185, 103957, 48087, 101685, 125527, 35434, 21754, 47844, 128829, 88040, 42387, 13434, 133811, 71738, 53234, 49298, 125499, 15180, 115186, 61182, 130571, 115195, 109824, 73136, 88971, 49020, 15722, 55057, 124293, 120214, 104874, 133865, 104842]
[2024-12-02 18:39:25.565398] user = 126680 Cloud 114/567
[2024-12-02 18:39:25.575112] user = 126680 Local 114/567
[2024-12-02 18:39:25.625069] user = 126680 Local+ 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:28.072701] user = 126680 MPDA- 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5130813953488372
Training on augumented user 2791 0/50 current_auc = 0.5130813953488372
User 2791 AUC after training: 0.5130813953488372
User 2791 does not improve AUC. Reverting changes.
Training on augumented user 126693 1/50 current_auc = 0.5130813953488372
User 126693 AUC after training: 0.5130813953488372
User 126693 does not improve AUC. Reverting changes.
Training on augumented user 48593 2/50 current_auc = 0.5130813953488372
User 48593 AUC after training: 0.5130813953488372
User 48593 does not improve AUC. Reverting changes.
Training on augumented user 117870 3/50 current_auc = 0.5130813953488372
User 117870 AUC after training: 0.5130813953488372
User 117870 does not improve AUC. Reverting changes.
Training on augumented user 17250 4/50 current_auc = 0.5130813953488372
User 17250 AUC after training: 0.5130813953488372
User 17250 does not improve AUC. Reverting changes.
Training on augumented user 87175 5/50 current_auc = 0.5130813953488372
User 87175 AUC after training: 0.5130813953488372
User 87175 does not improve AUC. Reverting changes.
Training on augumented user 108758 6/50 current_auc = 0.5130813953488372
User 108758 AUC after training: 0.5101744186046512
User 108758 does not improve AUC. Reverting changes.
Training on augumented user 9391 7/50 current_auc = 0.5130813953488372
User 9391 AUC after training: 0.5130813953488372
User 9391 does not improve AUC. Reverting changes.
Training on augumented user 118925 8/50 current_auc = 0.5130813953488372
User 118925 AUC after training: 0.5130813953488372
User 118925 does not improve AUC. Reverting changes.
Training on augumented user 73565 9/50 current_auc = 0.5130813953488372
User 73565 AUC after training: 0.5130813953488372
User 73565 does not improve AUC. Reverting changes.
Training on augumented user 33703 10/50 current_auc = 0.5130813953488372
User 33703 AUC after training: 0.5130813953488372
User 33703 does not improve AUC. Reverting changes.
Training on augumented user 30368 11/50 current_auc = 0.5130813953488372
User 30368 AUC after training: 0.5130813953488372
User 30368 does not improve AUC. Reverting changes.
Training on augumented user 74881 12/50 current_auc = 0.5130813953488372
User 74881 AUC after training: 0.5130813953488372
User 74881 does not improve AUC. Reverting changes.
Training on augumented user 7178 13/50 current_auc = 0.5130813953488372
User 7178 AUC after training: 0.5130813953488372
User 7178 does not improve AUC. Reverting changes.
Training on augumented user 118583 14/50 current_auc = 0.5130813953488372
User 118583 AUC after training: 0.5130813953488372
User 118583 does not improve AUC. Reverting changes.
Training on augumented user 86385 15/50 current_auc = 0.5130813953488372
User 86385 AUC after training: 0.5130813953488372
User 86385 does not improve AUC. Reverting changes.
Training on augumented user 171 16/50 current_auc = 0.5130813953488372
User 171 AUC after training: 0.5130813953488372
User 171 does not improve AUC. Reverting changes.
Training on augumented user 116185 17/50 current_auc = 0.5130813953488372
User 116185 AUC after training: 0.5130813953488372
User 116185 does not improve AUC. Reverting changes.
Training on augumented user 103957 18/50 current_auc = 0.5130813953488372
User 103957 AUC after training: 0.5130813953488372
User 103957 does not improve AUC. Reverting changes.
Training on augumented user 48087 19/50 current_auc = 0.5130813953488372
User 48087 AUC after training: 0.5130813953488372
User 48087 does not improve AUC. Reverting changes.
Training on augumented user 101685 20/50 current_auc = 0.5130813953488372
User 101685 AUC after training: 0.5130813953488372
User 101685 does not improve AUC. Reverting changes.
Training on augumented user 125527 21/50 current_auc = 0.5130813953488372
User 125527 AUC after training: 0.5130813953488372
User 125527 does not improve AUC. Reverting changes.
Training on augumented user 35434 22/50 current_auc = 0.5130813953488372
User 35434 AUC after training: 0.5130813953488372
User 35434 does not improve AUC. Reverting changes.
Training on augumented user 21754 23/50 current_auc = 0.5130813953488372
User 21754 AUC after training: 0.5130813953488372
User 21754 does not improve AUC. Reverting changes.
Training on augumented user 47844 24/50 current_auc = 0.5130813953488372
User 47844 AUC after training: 0.5116279069767442
User 47844 does not improve AUC. Reverting changes.
Training on augumented user 128829 25/50 current_auc = 0.5130813953488372
User 128829 AUC after training: 0.5130813953488372
User 128829 does not improve AUC. Reverting changes.
Training on augumented user 88040 26/50 current_auc = 0.5130813953488372
User 88040 AUC after training: 0.5101744186046512
User 88040 does not improve AUC. Reverting changes.
Training on augumented user 42387 27/50 current_auc = 0.5130813953488372
User 42387 AUC after training: 0.5130813953488372
User 42387 does not improve AUC. Reverting changes.
Training on augumented user 13434 28/50 current_auc = 0.5130813953488372
User 13434 AUC after training: 0.5130813953488372
User 13434 does not improve AUC. Reverting changes.
Training on augumented user 133811 29/50 current_auc = 0.5130813953488372
User 133811 AUC after training: 0.5130813953488372
User 133811 does not improve AUC. Reverting changes.
Training on augumented user 71738 30/50 current_auc = 0.5130813953488372
User 71738 AUC after training: 0.5130813953488372
User 71738 does not improve AUC. Reverting changes.
Training on augumented user 53234 31/50 current_auc = 0.5130813953488372
User 53234 AUC after training: 0.5130813953488372
User 53234 does not improve AUC. Reverting changes.
Training on augumented user 49298 32/50 current_auc = 0.5130813953488372
User 49298 AUC after training: 0.5130813953488372
User 49298 does not improve AUC. Reverting changes.
Training on augumented user 125499 33/50 current_auc = 0.5130813953488372
User 125499 AUC after training: 0.5130813953488372
User 125499 does not improve AUC. Reverting changes.
Training on augumented user 15180 34/50 current_auc = 0.5130813953488372
User 15180 AUC after training: 0.5130813953488372
User 15180 does not improve AUC. Reverting changes.
Training on augumented user 115186 35/50 current_auc = 0.5130813953488372
User 115186 AUC after training: 0.5130813953488372
User 115186 does not improve AUC. Reverting changes.
Training on augumented user 61182 36/50 current_auc = 0.5130813953488372
User 61182 AUC after training: 0.5130813953488372
User 61182 does not improve AUC. Reverting changes.
Training on augumented user 130571 37/50 current_auc = 0.5130813953488372
User 130571 AUC after training: 0.5130813953488372
User 130571 does not improve AUC. Reverting changes.
Training on augumented user 115195 38/50 current_auc = 0.5130813953488372
User 115195 AUC after training: 0.5130813953488372
User 115195 does not improve AUC. Reverting changes.
Training on augumented user 109824 39/50 current_auc = 0.5130813953488372
User 109824 AUC after training: 0.5130813953488372
User 109824 does not improve AUC. Reverting changes.
Training on augumented user 73136 40/50 current_auc = 0.5130813953488372
User 73136 AUC after training: 0.5130813953488372
User 73136 does not improve AUC. Reverting changes.
Training on augumented user 88971 41/50 current_auc = 0.5130813953488372
User 88971 AUC after training: 0.5130813953488372
User 88971 does not improve AUC. Reverting changes.
Training on augumented user 49020 42/50 current_auc = 0.5130813953488372
User 49020 AUC after training: 0.5130813953488372
User 49020 does not improve AUC. Reverting changes.
Training on augumented user 15722 43/50 current_auc = 0.5130813953488372
User 15722 AUC after training: 0.5130813953488372
User 15722 does not improve AUC. Reverting changes.
Training on augumented user 55057 44/50 current_auc = 0.5130813953488372
User 55057 AUC after training: 0.5130813953488372
User 55057 does not improve AUC. Reverting changes.
Training on augumented user 124293 45/50 current_auc = 0.5130813953488372
User 124293 AUC after training: 0.5130813953488372
User 124293 does not improve AUC. Reverting changes.
Training on augumented user 120214 46/50 current_auc = 0.5130813953488372
User 120214 AUC after training: 0.5130813953488372
User 120214 does not improve AUC. Reverting changes.
Training on augumented user 104874 47/50 current_auc = 0.5130813953488372
User 104874 AUC after training: 0.5130813953488372
User 104874 does not improve AUC. Reverting changes.
Training on augumented user 133865 48/50 current_auc = 0.5130813953488372
User 133865 AUC after training: 0.5130813953488372
User 133865 does not improve AUC. Reverting changes.
Training on augumented user 104842 49/50 current_auc = 0.5130813953488372
User 104842 AUC after training: 0.5130813953488372
User 104842 does not improve AUC. Reverting changes.
[2024-12-02 18:39:56.828244] start test user 126718 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:57.263258] start test user 126718 115/567 recall augumented users by random, augumented_users = [5047, 26002, 91826, 100896, 132654, 103612, 43383, 25797, 48027, 106238, 60545, 134953, 46033, 1889, 77189, 74533, 87405, 17255, 75922, 27443, 106213, 53890, 96116, 61881, 122905, 86968, 49133, 74560, 72853, 117384, 127160, 12690, 127756, 107008, 55778, 137333, 79431, 31689, 86049, 132630, 96817, 33688, 108228, 98409, 12441, 52673, 79503, 127100, 469, 105155]
[2024-12-02 18:39:57.278242] user = 126718 Cloud 115/567
[2024-12-02 18:39:57.294269] user = 126718 Local 115/567
[2024-12-02 18:39:57.351769] user = 126718 Local+ 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:59.448480] user = 126718 MPDA- 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5350221483942414
Training on augumented user 5047 0/50 current_auc = 0.5350221483942414
User 5047 AUC after training: 0.5351605758582503
User 5047 improves AUC. Keeping the model.
Training on augumented user 26002 1/50 current_auc = 0.5351605758582503
User 26002 AUC after training: 0.5350221483942414
User 26002 does not improve AUC. Reverting changes.
Training on augumented user 91826 2/50 current_auc = 0.5351605758582503
User 91826 AUC after training: 0.5350221483942414
User 91826 does not improve AUC. Reverting changes.
Training on augumented user 100896 3/50 current_auc = 0.5351605758582503
User 100896 AUC after training: 0.5354374307862679
User 100896 improves AUC. Keeping the model.
Training on augumented user 132654 4/50 current_auc = 0.5354374307862679
User 132654 AUC after training: 0.5357142857142857
User 132654 improves AUC. Keeping the model.
Training on augumented user 103612 5/50 current_auc = 0.5357142857142857
User 103612 AUC after training: 0.5368217054263567
User 103612 improves AUC. Keeping the model.
Training on augumented user 43383 6/50 current_auc = 0.5368217054263567
User 43383 AUC after training: 0.5357142857142858
User 43383 does not improve AUC. Reverting changes.
Training on augumented user 25797 7/50 current_auc = 0.5368217054263567
User 25797 AUC after training: 0.5365448504983389
User 25797 does not improve AUC. Reverting changes.
Training on augumented user 48027 8/50 current_auc = 0.5368217054263567
User 48027 AUC after training: 0.5370985603543743
User 48027 improves AUC. Keeping the model.
Training on augumented user 106238 9/50 current_auc = 0.5370985603543743
User 106238 AUC after training: 0.5370985603543743
User 106238 does not improve AUC. Reverting changes.
Training on augumented user 60545 10/50 current_auc = 0.5370985603543743
User 60545 AUC after training: 0.5370985603543743
User 60545 does not improve AUC. Reverting changes.
Training on augumented user 134953 11/50 current_auc = 0.5370985603543743
User 134953 AUC after training: 0.5370985603543743
User 134953 does not improve AUC. Reverting changes.
Training on augumented user 46033 12/50 current_auc = 0.5370985603543743
User 46033 AUC after training: 0.5365448504983389
User 46033 does not improve AUC. Reverting changes.
Training on augumented user 1889 13/50 current_auc = 0.5370985603543743
User 1889 AUC after training: 0.5370985603543743
User 1889 does not improve AUC. Reverting changes.
Training on augumented user 77189 14/50 current_auc = 0.5370985603543743
User 77189 AUC after training: 0.5362679955703211
User 77189 does not improve AUC. Reverting changes.
Training on augumented user 74533 15/50 current_auc = 0.5370985603543743
User 74533 AUC after training: 0.537375415282392
User 74533 improves AUC. Keeping the model.
Training on augumented user 87405 16/50 current_auc = 0.537375415282392
User 87405 AUC after training: 0.5382059800664452
User 87405 improves AUC. Keeping the model.
Training on augumented user 17255 17/50 current_auc = 0.5382059800664452
User 17255 AUC after training: 0.5362679955703211
User 17255 does not improve AUC. Reverting changes.
Training on augumented user 75922 18/50 current_auc = 0.5382059800664452
User 75922 AUC after training: 0.5379291251384275
User 75922 does not improve AUC. Reverting changes.
Training on augumented user 27443 19/50 current_auc = 0.5382059800664452
User 27443 AUC after training: 0.5370985603543743
User 27443 does not improve AUC. Reverting changes.
Training on augumented user 106213 20/50 current_auc = 0.5382059800664452
User 106213 AUC after training: 0.5357142857142858
User 106213 does not improve AUC. Reverting changes.
Training on augumented user 53890 21/50 current_auc = 0.5382059800664452
User 53890 AUC after training: 0.5368217054263565
User 53890 does not improve AUC. Reverting changes.
Training on augumented user 96116 22/50 current_auc = 0.5382059800664452
User 96116 AUC after training: 0.5368217054263565
User 96116 does not improve AUC. Reverting changes.
Training on augumented user 61881 23/50 current_auc = 0.5382059800664452
User 61881 AUC after training: 0.5382059800664452
User 61881 does not improve AUC. Reverting changes.
Training on augumented user 122905 24/50 current_auc = 0.5382059800664452
User 122905 AUC after training: 0.5370985603543743
User 122905 does not improve AUC. Reverting changes.
Training on augumented user 86968 25/50 current_auc = 0.5382059800664452
User 86968 AUC after training: 0.5384828349944628
User 86968 improves AUC. Keeping the model.
Training on augumented user 49133 26/50 current_auc = 0.5384828349944628
User 49133 AUC after training: 0.5359911406423035
User 49133 does not improve AUC. Reverting changes.
Training on augumented user 74560 27/50 current_auc = 0.5384828349944628
User 74560 AUC after training: 0.5382059800664452
User 74560 does not improve AUC. Reverting changes.
Training on augumented user 72853 28/50 current_auc = 0.5384828349944628
User 72853 AUC after training: 0.5370985603543743
User 72853 does not improve AUC. Reverting changes.
Training on augumented user 117384 29/50 current_auc = 0.5384828349944628
User 117384 AUC after training: 0.5359911406423035
User 117384 does not improve AUC. Reverting changes.
Training on augumented user 127160 30/50 current_auc = 0.5384828349944628
User 127160 AUC after training: 0.5387596899224807
User 127160 improves AUC. Keeping the model.
Training on augumented user 12690 31/50 current_auc = 0.5387596899224807
User 12690 AUC after training: 0.5390365448504983
User 12690 improves AUC. Keeping the model.
Training on augumented user 127756 32/50 current_auc = 0.5390365448504983
User 127756 AUC after training: 0.539313399778516
User 127756 improves AUC. Keeping the model.
Training on augumented user 107008 33/50 current_auc = 0.539313399778516
User 107008 AUC after training: 0.53640642303433
User 107008 does not improve AUC. Reverting changes.
Training on augumented user 55778 34/50 current_auc = 0.539313399778516
User 55778 AUC after training: 0.5395902547065338
User 55778 improves AUC. Keeping the model.
Training on augumented user 137333 35/50 current_auc = 0.5395902547065338
User 137333 AUC after training: 0.5387596899224807
User 137333 does not improve AUC. Reverting changes.
Training on augumented user 79431 36/50 current_auc = 0.5395902547065338
User 79431 AUC after training: 0.5376522702104098
User 79431 does not improve AUC. Reverting changes.
Training on augumented user 31689 37/50 current_auc = 0.5395902547065338
User 31689 AUC after training: 0.5390365448504983
User 31689 does not improve AUC. Reverting changes.
Training on augumented user 86049 38/50 current_auc = 0.5395902547065338
User 86049 AUC after training: 0.5382059800664452
User 86049 does not improve AUC. Reverting changes.
Training on augumented user 132630 39/50 current_auc = 0.5395902547065338
User 132630 AUC after training: 0.537375415282392
User 132630 does not improve AUC. Reverting changes.
Training on augumented user 96817 40/50 current_auc = 0.5395902547065338
User 96817 AUC after training: 0.5382059800664452
User 96817 does not improve AUC. Reverting changes.
Training on augumented user 33688 41/50 current_auc = 0.5395902547065338
User 33688 AUC after training: 0.5398671096345515
User 33688 improves AUC. Keeping the model.
Training on augumented user 108228 42/50 current_auc = 0.5398671096345515
User 108228 AUC after training: 0.5390365448504983
User 108228 does not improve AUC. Reverting changes.
Training on augumented user 98409 43/50 current_auc = 0.5398671096345515
User 98409 AUC after training: 0.539313399778516
User 98409 does not improve AUC. Reverting changes.
Training on augumented user 12441 44/50 current_auc = 0.5398671096345515
User 12441 AUC after training: 0.5365448504983389
User 12441 does not improve AUC. Reverting changes.
Training on augumented user 52673 45/50 current_auc = 0.5398671096345515
User 52673 AUC after training: 0.5395902547065338
User 52673 does not improve AUC. Reverting changes.
Training on augumented user 79503 46/50 current_auc = 0.5398671096345515
User 79503 AUC after training: 0.5401439645625692
User 79503 improves AUC. Keeping the model.
Training on augumented user 127100 47/50 current_auc = 0.5401439645625692
User 127100 AUC after training: 0.5398671096345515
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 469 48/50 current_auc = 0.5401439645625692
User 469 AUC after training: 0.538482834994463
User 469 does not improve AUC. Reverting changes.
Training on augumented user 105155 49/50 current_auc = 0.5401439645625692
User 105155 AUC after training: 0.5387596899224806
User 105155 does not improve AUC. Reverting changes.
[2024-12-02 18:40:30.923795] start test user 126751 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:31.776201] start test user 126751 116/567 recall augumented users by random, augumented_users = [136368, 136308, 3434, 21620, 34758, 19162, 59560, 42442, 114773, 76025, 13543, 92568, 92578, 41689, 8698, 28890, 109740, 44631, 89297, 33240, 63267, 88084, 64406, 83606, 48826, 29932, 75475, 51553, 116378, 136475, 10552, 135847, 77907, 32230, 123523, 130909, 26718, 33047, 47991, 102180, 76848, 115186, 50710, 121840, 95269, 95654, 103913, 62265, 123294, 25090]
[2024-12-02 18:40:31.793209] user = 126751 Cloud 116/567
[2024-12-02 18:40:31.804488] user = 126751 Local 116/567
[2024-12-02 18:40:31.841251] user = 126751 Local+ 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:34.123395] user = 126751 MPDA- 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46794871794871795
Training on augumented user 136368 0/50 current_auc = 0.46794871794871795
User 136368 AUC after training: 0.46794871794871795
User 136368 does not improve AUC. Reverting changes.
Training on augumented user 136308 1/50 current_auc = 0.46794871794871795
User 136308 AUC after training: 0.46794871794871795
User 136308 does not improve AUC. Reverting changes.
Training on augumented user 3434 2/50 current_auc = 0.46794871794871795
User 3434 AUC after training: 0.46794871794871795
User 3434 does not improve AUC. Reverting changes.
Training on augumented user 21620 3/50 current_auc = 0.46794871794871795
User 21620 AUC after training: 0.46794871794871795
User 21620 does not improve AUC. Reverting changes.
Training on augumented user 34758 4/50 current_auc = 0.46794871794871795
User 34758 AUC after training: 0.46794871794871795
User 34758 does not improve AUC. Reverting changes.
Training on augumented user 19162 5/50 current_auc = 0.46794871794871795
User 19162 AUC after training: 0.47435897435897434
User 19162 improves AUC. Keeping the model.
Training on augumented user 59560 6/50 current_auc = 0.47435897435897434
User 59560 AUC after training: 0.46794871794871795
User 59560 does not improve AUC. Reverting changes.
Training on augumented user 42442 7/50 current_auc = 0.47435897435897434
User 42442 AUC after training: 0.47435897435897434
User 42442 does not improve AUC. Reverting changes.
Training on augumented user 114773 8/50 current_auc = 0.47435897435897434
User 114773 AUC after training: 0.47435897435897434
User 114773 does not improve AUC. Reverting changes.
Training on augumented user 76025 9/50 current_auc = 0.47435897435897434
User 76025 AUC after training: 0.47435897435897434
User 76025 does not improve AUC. Reverting changes.
Training on augumented user 13543 10/50 current_auc = 0.47435897435897434
User 13543 AUC after training: 0.48076923076923084
User 13543 improves AUC. Keeping the model.
Training on augumented user 92568 11/50 current_auc = 0.48076923076923084
User 92568 AUC after training: 0.47435897435897434
User 92568 does not improve AUC. Reverting changes.
Training on augumented user 92578 12/50 current_auc = 0.48076923076923084
User 92578 AUC after training: 0.47435897435897434
User 92578 does not improve AUC. Reverting changes.
Training on augumented user 41689 13/50 current_auc = 0.48076923076923084
User 41689 AUC after training: 0.47435897435897434
User 41689 does not improve AUC. Reverting changes.
Training on augumented user 8698 14/50 current_auc = 0.48076923076923084
User 8698 AUC after training: 0.48076923076923084
User 8698 does not improve AUC. Reverting changes.
Training on augumented user 28890 15/50 current_auc = 0.48076923076923084
User 28890 AUC after training: 0.4743589743589744
User 28890 does not improve AUC. Reverting changes.
Training on augumented user 109740 16/50 current_auc = 0.48076923076923084
User 109740 AUC after training: 0.47435897435897434
User 109740 does not improve AUC. Reverting changes.
Training on augumented user 44631 17/50 current_auc = 0.48076923076923084
User 44631 AUC after training: 0.48076923076923084
User 44631 does not improve AUC. Reverting changes.
Training on augumented user 89297 18/50 current_auc = 0.48076923076923084
User 89297 AUC after training: 0.4743589743589744
User 89297 does not improve AUC. Reverting changes.
Training on augumented user 33240 19/50 current_auc = 0.48076923076923084
User 33240 AUC after training: 0.4743589743589744
User 33240 does not improve AUC. Reverting changes.
Training on augumented user 63267 20/50 current_auc = 0.48076923076923084
User 63267 AUC after training: 0.47435897435897434
User 63267 does not improve AUC. Reverting changes.
Training on augumented user 88084 21/50 current_auc = 0.48076923076923084
User 88084 AUC after training: 0.4743589743589744
User 88084 does not improve AUC. Reverting changes.
Training on augumented user 64406 22/50 current_auc = 0.48076923076923084
User 64406 AUC after training: 0.48076923076923084
User 64406 does not improve AUC. Reverting changes.
Training on augumented user 83606 23/50 current_auc = 0.48076923076923084
User 83606 AUC after training: 0.48076923076923084
User 83606 does not improve AUC. Reverting changes.
Training on augumented user 48826 24/50 current_auc = 0.48076923076923084
User 48826 AUC after training: 0.46794871794871795
User 48826 does not improve AUC. Reverting changes.
Training on augumented user 29932 25/50 current_auc = 0.48076923076923084
User 29932 AUC after training: 0.47435897435897434
User 29932 does not improve AUC. Reverting changes.
Training on augumented user 75475 26/50 current_auc = 0.48076923076923084
User 75475 AUC after training: 0.4743589743589744
User 75475 does not improve AUC. Reverting changes.
Training on augumented user 51553 27/50 current_auc = 0.48076923076923084
User 51553 AUC after training: 0.4743589743589744
User 51553 does not improve AUC. Reverting changes.
Training on augumented user 116378 28/50 current_auc = 0.48076923076923084
User 116378 AUC after training: 0.4743589743589744
User 116378 does not improve AUC. Reverting changes.
Training on augumented user 136475 29/50 current_auc = 0.48076923076923084
User 136475 AUC after training: 0.47435897435897434
User 136475 does not improve AUC. Reverting changes.
Training on augumented user 10552 30/50 current_auc = 0.48076923076923084
User 10552 AUC after training: 0.4743589743589744
User 10552 does not improve AUC. Reverting changes.
Training on augumented user 135847 31/50 current_auc = 0.48076923076923084
User 135847 AUC after training: 0.4743589743589744
User 135847 does not improve AUC. Reverting changes.
Training on augumented user 77907 32/50 current_auc = 0.48076923076923084
User 77907 AUC after training: 0.46794871794871795
User 77907 does not improve AUC. Reverting changes.
Training on augumented user 32230 33/50 current_auc = 0.48076923076923084
User 32230 AUC after training: 0.4743589743589744
User 32230 does not improve AUC. Reverting changes.
Training on augumented user 123523 34/50 current_auc = 0.48076923076923084
User 123523 AUC after training: 0.4743589743589744
User 123523 does not improve AUC. Reverting changes.
Training on augumented user 130909 35/50 current_auc = 0.48076923076923084
User 130909 AUC after training: 0.47435897435897434
User 130909 does not improve AUC. Reverting changes.
Training on augumented user 26718 36/50 current_auc = 0.48076923076923084
User 26718 AUC after training: 0.4743589743589744
User 26718 does not improve AUC. Reverting changes.
Training on augumented user 33047 37/50 current_auc = 0.48076923076923084
User 33047 AUC after training: 0.4743589743589744
User 33047 does not improve AUC. Reverting changes.
Training on augumented user 47991 38/50 current_auc = 0.48076923076923084
User 47991 AUC after training: 0.47435897435897434
User 47991 does not improve AUC. Reverting changes.
Training on augumented user 102180 39/50 current_auc = 0.48076923076923084
User 102180 AUC after training: 0.46794871794871795
User 102180 does not improve AUC. Reverting changes.
Training on augumented user 76848 40/50 current_auc = 0.48076923076923084
User 76848 AUC after training: 0.4743589743589744
User 76848 does not improve AUC. Reverting changes.
Training on augumented user 115186 41/50 current_auc = 0.48076923076923084
User 115186 AUC after training: 0.4743589743589744
User 115186 does not improve AUC. Reverting changes.
Training on augumented user 50710 42/50 current_auc = 0.48076923076923084
User 50710 AUC after training: 0.48076923076923084
User 50710 does not improve AUC. Reverting changes.
Training on augumented user 121840 43/50 current_auc = 0.48076923076923084
User 121840 AUC after training: 0.4743589743589744
User 121840 does not improve AUC. Reverting changes.
Training on augumented user 95269 44/50 current_auc = 0.48076923076923084
User 95269 AUC after training: 0.4743589743589744
User 95269 does not improve AUC. Reverting changes.
Training on augumented user 95654 45/50 current_auc = 0.48076923076923084
User 95654 AUC after training: 0.4743589743589744
User 95654 does not improve AUC. Reverting changes.
Training on augumented user 103913 46/50 current_auc = 0.48076923076923084
User 103913 AUC after training: 0.4743589743589744
User 103913 does not improve AUC. Reverting changes.
Training on augumented user 62265 47/50 current_auc = 0.48076923076923084
User 62265 AUC after training: 0.4743589743589744
User 62265 does not improve AUC. Reverting changes.
Training on augumented user 123294 48/50 current_auc = 0.48076923076923084
User 123294 AUC after training: 0.47435897435897434
User 123294 does not improve AUC. Reverting changes.
Training on augumented user 25090 49/50 current_auc = 0.48076923076923084
User 25090 AUC after training: 0.47435897435897434
User 25090 does not improve AUC. Reverting changes.
[2024-12-02 18:41:04.164938] start test user 126778 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:04.698605] start test user 126778 117/567 recall augumented users by random, augumented_users = [4823, 8436, 28946, 126091, 21443, 20568, 79871, 95540, 116196, 16198, 25818, 84555, 7995, 53641, 132835, 18045, 72239, 23471, 36814, 101954, 62835, 105442, 136776, 134758, 120086, 9986, 11873, 99301, 22252, 87614, 12378, 15348, 121872, 12274, 101363, 5320, 4211, 121193, 39285, 7731, 17027, 28467, 103200, 66512, 96353, 117331, 42421, 73326, 64197, 44902]
[2024-12-02 18:41:04.714641] user = 126778 Cloud 117/567
[2024-12-02 18:41:04.728321] user = 126778 Local 117/567
[2024-12-02 18:41:04.751507] user = 126778 Local+ 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:07.334192] user = 126778 MPDA- 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4725028058361392
Training on augumented user 4823 0/50 current_auc = 0.4725028058361392
User 4823 AUC after training: 0.47138047138047134
User 4823 does not improve AUC. Reverting changes.
Training on augumented user 8436 1/50 current_auc = 0.4725028058361392
User 8436 AUC after training: 0.47418630751964086
User 8436 improves AUC. Keeping the model.
Training on augumented user 28946 2/50 current_auc = 0.47418630751964086
User 28946 AUC after training: 0.4725028058361392
User 28946 does not improve AUC. Reverting changes.
Training on augumented user 126091 3/50 current_auc = 0.47418630751964086
User 126091 AUC after training: 0.47474747474747475
User 126091 improves AUC. Keeping the model.
Training on augumented user 21443 4/50 current_auc = 0.47474747474747475
User 21443 AUC after training: 0.4725028058361392
User 21443 does not improve AUC. Reverting changes.
Training on augumented user 20568 5/50 current_auc = 0.47474747474747475
User 20568 AUC after training: 0.473625140291807
User 20568 does not improve AUC. Reverting changes.
Training on augumented user 79871 6/50 current_auc = 0.47474747474747475
User 79871 AUC after training: 0.47530864197530864
User 79871 improves AUC. Keeping the model.
Training on augumented user 95540 7/50 current_auc = 0.47530864197530864
User 95540 AUC after training: 0.4747474747474748
User 95540 does not improve AUC. Reverting changes.
Training on augumented user 116196 8/50 current_auc = 0.47530864197530864
User 116196 AUC after training: 0.4753086419753087
User 116196 improves AUC. Keeping the model.
Training on augumented user 16198 9/50 current_auc = 0.4753086419753087
User 16198 AUC after training: 0.4753086419753087
User 16198 does not improve AUC. Reverting changes.
Training on augumented user 25818 10/50 current_auc = 0.4753086419753087
User 25818 AUC after training: 0.4747474747474748
User 25818 does not improve AUC. Reverting changes.
Training on augumented user 84555 11/50 current_auc = 0.4753086419753087
User 84555 AUC after training: 0.47474747474747475
User 84555 does not improve AUC. Reverting changes.
Training on augumented user 7995 12/50 current_auc = 0.4753086419753087
User 7995 AUC after training: 0.47418630751964086
User 7995 does not improve AUC. Reverting changes.
Training on augumented user 53641 13/50 current_auc = 0.4753086419753087
User 53641 AUC after training: 0.47418630751964086
User 53641 does not improve AUC. Reverting changes.
Training on augumented user 132835 14/50 current_auc = 0.4753086419753087
User 132835 AUC after training: 0.47418630751964086
User 132835 does not improve AUC. Reverting changes.
Training on augumented user 18045 15/50 current_auc = 0.4753086419753087
User 18045 AUC after training: 0.4741863075196408
User 18045 does not improve AUC. Reverting changes.
Training on augumented user 72239 16/50 current_auc = 0.4753086419753087
User 72239 AUC after training: 0.4753086419753087
User 72239 does not improve AUC. Reverting changes.
Training on augumented user 23471 17/50 current_auc = 0.4753086419753087
User 23471 AUC after training: 0.473625140291807
User 23471 does not improve AUC. Reverting changes.
Training on augumented user 36814 18/50 current_auc = 0.4753086419753087
User 36814 AUC after training: 0.4753086419753087
User 36814 does not improve AUC. Reverting changes.
Training on augumented user 101954 19/50 current_auc = 0.4753086419753087
User 101954 AUC after training: 0.4753086419753087
User 101954 does not improve AUC. Reverting changes.
Training on augumented user 62835 20/50 current_auc = 0.4753086419753087
User 62835 AUC after training: 0.4741863075196409
User 62835 does not improve AUC. Reverting changes.
Training on augumented user 105442 21/50 current_auc = 0.4753086419753087
User 105442 AUC after training: 0.4753086419753087
User 105442 does not improve AUC. Reverting changes.
Training on augumented user 136776 22/50 current_auc = 0.4753086419753087
User 136776 AUC after training: 0.4708193041526375
User 136776 does not improve AUC. Reverting changes.
Training on augumented user 134758 23/50 current_auc = 0.4753086419753087
User 134758 AUC after training: 0.47474747474747475
User 134758 does not improve AUC. Reverting changes.
Training on augumented user 120086 24/50 current_auc = 0.4753086419753087
User 120086 AUC after training: 0.4663299663299663
User 120086 does not improve AUC. Reverting changes.
Training on augumented user 9986 25/50 current_auc = 0.4753086419753087
User 9986 AUC after training: 0.47530864197530864
User 9986 does not improve AUC. Reverting changes.
Training on augumented user 11873 26/50 current_auc = 0.4753086419753087
User 11873 AUC after training: 0.47081930415263756
User 11873 does not improve AUC. Reverting changes.
Training on augumented user 99301 27/50 current_auc = 0.4753086419753087
User 99301 AUC after training: 0.47586980920314254
User 99301 improves AUC. Keeping the model.
Training on augumented user 22252 28/50 current_auc = 0.47586980920314254
User 22252 AUC after training: 0.47530864197530864
User 22252 does not improve AUC. Reverting changes.
Training on augumented user 87614 29/50 current_auc = 0.47586980920314254
User 87614 AUC after training: 0.4753086419753086
User 87614 does not improve AUC. Reverting changes.
Training on augumented user 12378 30/50 current_auc = 0.47586980920314254
User 12378 AUC after training: 0.47474747474747475
User 12378 does not improve AUC. Reverting changes.
Training on augumented user 15348 31/50 current_auc = 0.47586980920314254
User 15348 AUC after training: 0.4753086419753087
User 15348 does not improve AUC. Reverting changes.
Training on augumented user 121872 32/50 current_auc = 0.47586980920314254
User 121872 AUC after training: 0.47474747474747475
User 121872 does not improve AUC. Reverting changes.
Training on augumented user 12274 33/50 current_auc = 0.47586980920314254
User 12274 AUC after training: 0.4769921436588103
User 12274 improves AUC. Keeping the model.
Training on augumented user 101363 34/50 current_auc = 0.4769921436588103
User 101363 AUC after training: 0.47530864197530864
User 101363 does not improve AUC. Reverting changes.
Training on augumented user 5320 35/50 current_auc = 0.4769921436588103
User 5320 AUC after training: 0.47586980920314254
User 5320 does not improve AUC. Reverting changes.
Training on augumented user 4211 36/50 current_auc = 0.4769921436588103
User 4211 AUC after training: 0.47586980920314254
User 4211 does not improve AUC. Reverting changes.
Training on augumented user 121193 37/50 current_auc = 0.4769921436588103
User 121193 AUC after training: 0.4764309764309765
User 121193 does not improve AUC. Reverting changes.
Training on augumented user 39285 38/50 current_auc = 0.4769921436588103
User 39285 AUC after training: 0.47474747474747475
User 39285 does not improve AUC. Reverting changes.
Training on augumented user 7731 39/50 current_auc = 0.4769921436588103
User 7731 AUC after training: 0.4764309764309764
User 7731 does not improve AUC. Reverting changes.
Training on augumented user 17027 40/50 current_auc = 0.4769921436588103
User 17027 AUC after training: 0.4764309764309764
User 17027 does not improve AUC. Reverting changes.
Training on augumented user 28467 41/50 current_auc = 0.4769921436588103
User 28467 AUC after training: 0.4769921436588103
User 28467 does not improve AUC. Reverting changes.
Training on augumented user 103200 42/50 current_auc = 0.4769921436588103
User 103200 AUC after training: 0.4753086419753087
User 103200 does not improve AUC. Reverting changes.
Training on augumented user 66512 43/50 current_auc = 0.4769921436588103
User 66512 AUC after training: 0.47586980920314254
User 66512 does not improve AUC. Reverting changes.
Training on augumented user 96353 44/50 current_auc = 0.4769921436588103
User 96353 AUC after training: 0.47530864197530864
User 96353 does not improve AUC. Reverting changes.
Training on augumented user 117331 45/50 current_auc = 0.4769921436588103
User 117331 AUC after training: 0.47586980920314254
User 117331 does not improve AUC. Reverting changes.
Training on augumented user 42421 46/50 current_auc = 0.4769921436588103
User 42421 AUC after training: 0.4741863075196409
User 42421 does not improve AUC. Reverting changes.
Training on augumented user 73326 47/50 current_auc = 0.4769921436588103
User 73326 AUC after training: 0.4747474747474747
User 73326 does not improve AUC. Reverting changes.
Training on augumented user 64197 48/50 current_auc = 0.4769921436588103
User 64197 AUC after training: 0.4758698092031426
User 64197 does not improve AUC. Reverting changes.
Training on augumented user 44902 49/50 current_auc = 0.4769921436588103
User 44902 AUC after training: 0.4730639730639731
User 44902 does not improve AUC. Reverting changes.
[2024-12-02 18:41:34.867142] start test user 126797 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:35.338303] start test user 126797 118/567 recall augumented users by random, augumented_users = [104838, 130564, 93889, 123566, 46069, 84591, 113001, 28899, 106210, 54048, 35088, 90464, 121137, 121039, 19963, 126526, 93206, 63605, 31691, 48923, 114809, 55421, 121027, 54311, 51544, 49806, 24404, 19273, 56905, 84299, 100614, 60434, 133779, 118379, 17331, 87058, 99970, 134818, 2811, 45473, 17607, 50890, 50735, 121478, 17800, 71597, 55511, 19411, 4622, 50253]
[2024-12-02 18:41:35.353380] user = 126797 Cloud 118/567
[2024-12-02 18:41:35.362696] user = 126797 Local 118/567
[2024-12-02 18:41:35.401652] user = 126797 Local+ 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:37.670004] user = 126797 MPDA- 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2417582417582418
Training on augumented user 104838 0/50 current_auc = 0.2417582417582418
User 104838 AUC after training: 0.2417582417582418
User 104838 does not improve AUC. Reverting changes.
Training on augumented user 130564 1/50 current_auc = 0.2417582417582418
User 130564 AUC after training: 0.2527472527472528
User 130564 improves AUC. Keeping the model.
Training on augumented user 93889 2/50 current_auc = 0.2527472527472528
User 93889 AUC after training: 0.2527472527472528
User 93889 does not improve AUC. Reverting changes.
Training on augumented user 123566 3/50 current_auc = 0.2527472527472528
User 123566 AUC after training: 0.2527472527472528
User 123566 does not improve AUC. Reverting changes.
Training on augumented user 46069 4/50 current_auc = 0.2527472527472528
User 46069 AUC after training: 0.2527472527472528
User 46069 does not improve AUC. Reverting changes.
Training on augumented user 84591 5/50 current_auc = 0.2527472527472528
User 84591 AUC after training: 0.2527472527472528
User 84591 does not improve AUC. Reverting changes.
Training on augumented user 113001 6/50 current_auc = 0.2527472527472528
User 113001 AUC after training: 0.2527472527472528
User 113001 does not improve AUC. Reverting changes.
Training on augumented user 28899 7/50 current_auc = 0.2527472527472528
User 28899 AUC after training: 0.2527472527472528
User 28899 does not improve AUC. Reverting changes.
Training on augumented user 106210 8/50 current_auc = 0.2527472527472528
User 106210 AUC after training: 0.2527472527472528
User 106210 does not improve AUC. Reverting changes.
Training on augumented user 54048 9/50 current_auc = 0.2527472527472528
User 54048 AUC after training: 0.2527472527472528
User 54048 does not improve AUC. Reverting changes.
Training on augumented user 35088 10/50 current_auc = 0.2527472527472528
User 35088 AUC after training: 0.2527472527472528
User 35088 does not improve AUC. Reverting changes.
Training on augumented user 90464 11/50 current_auc = 0.2527472527472528
User 90464 AUC after training: 0.2527472527472528
User 90464 does not improve AUC. Reverting changes.
Training on augumented user 121137 12/50 current_auc = 0.2527472527472528
User 121137 AUC after training: 0.2527472527472528
User 121137 does not improve AUC. Reverting changes.
Training on augumented user 121039 13/50 current_auc = 0.2527472527472528
User 121039 AUC after training: 0.2527472527472528
User 121039 does not improve AUC. Reverting changes.
Training on augumented user 19963 14/50 current_auc = 0.2527472527472528
User 19963 AUC after training: 0.2527472527472528
User 19963 does not improve AUC. Reverting changes.
Training on augumented user 126526 15/50 current_auc = 0.2527472527472528
User 126526 AUC after training: 0.2527472527472528
User 126526 does not improve AUC. Reverting changes.
Training on augumented user 93206 16/50 current_auc = 0.2527472527472528
User 93206 AUC after training: 0.2527472527472528
User 93206 does not improve AUC. Reverting changes.
Training on augumented user 63605 17/50 current_auc = 0.2527472527472528
User 63605 AUC after training: 0.2527472527472528
User 63605 does not improve AUC. Reverting changes.
Training on augumented user 31691 18/50 current_auc = 0.2527472527472528
User 31691 AUC after training: 0.2527472527472528
User 31691 does not improve AUC. Reverting changes.
Training on augumented user 48923 19/50 current_auc = 0.2527472527472528
User 48923 AUC after training: 0.2527472527472528
User 48923 does not improve AUC. Reverting changes.
Training on augumented user 114809 20/50 current_auc = 0.2527472527472528
User 114809 AUC after training: 0.2527472527472528
User 114809 does not improve AUC. Reverting changes.
Training on augumented user 55421 21/50 current_auc = 0.2527472527472528
User 55421 AUC after training: 0.2527472527472528
User 55421 does not improve AUC. Reverting changes.
Training on augumented user 121027 22/50 current_auc = 0.2527472527472528
User 121027 AUC after training: 0.2527472527472528
User 121027 does not improve AUC. Reverting changes.
Training on augumented user 54311 23/50 current_auc = 0.2527472527472528
User 54311 AUC after training: 0.2527472527472528
User 54311 does not improve AUC. Reverting changes.
Training on augumented user 51544 24/50 current_auc = 0.2527472527472528
User 51544 AUC after training: 0.2527472527472528
User 51544 does not improve AUC. Reverting changes.
Training on augumented user 49806 25/50 current_auc = 0.2527472527472528
User 49806 AUC after training: 0.2527472527472528
User 49806 does not improve AUC. Reverting changes.
Training on augumented user 24404 26/50 current_auc = 0.2527472527472528
User 24404 AUC after training: 0.2527472527472528
User 24404 does not improve AUC. Reverting changes.
Training on augumented user 19273 27/50 current_auc = 0.2527472527472528
User 19273 AUC after training: 0.2527472527472528
User 19273 does not improve AUC. Reverting changes.
Training on augumented user 56905 28/50 current_auc = 0.2527472527472528
User 56905 AUC after training: 0.2527472527472528
User 56905 does not improve AUC. Reverting changes.
Training on augumented user 84299 29/50 current_auc = 0.2527472527472528
User 84299 AUC after training: 0.2527472527472528
User 84299 does not improve AUC. Reverting changes.
Training on augumented user 100614 30/50 current_auc = 0.2527472527472528
User 100614 AUC after training: 0.2527472527472528
User 100614 does not improve AUC. Reverting changes.
Training on augumented user 60434 31/50 current_auc = 0.2527472527472528
User 60434 AUC after training: 0.2527472527472528
User 60434 does not improve AUC. Reverting changes.
Training on augumented user 133779 32/50 current_auc = 0.2527472527472528
User 133779 AUC after training: 0.2527472527472528
User 133779 does not improve AUC. Reverting changes.
Training on augumented user 118379 33/50 current_auc = 0.2527472527472528
User 118379 AUC after training: 0.2527472527472528
User 118379 does not improve AUC. Reverting changes.
Training on augumented user 17331 34/50 current_auc = 0.2527472527472528
User 17331 AUC after training: 0.2527472527472528
User 17331 does not improve AUC. Reverting changes.
Training on augumented user 87058 35/50 current_auc = 0.2527472527472528
User 87058 AUC after training: 0.2527472527472528
User 87058 does not improve AUC. Reverting changes.
Training on augumented user 99970 36/50 current_auc = 0.2527472527472528
User 99970 AUC after training: 0.2527472527472528
User 99970 does not improve AUC. Reverting changes.
Training on augumented user 134818 37/50 current_auc = 0.2527472527472528
User 134818 AUC after training: 0.2527472527472528
User 134818 does not improve AUC. Reverting changes.
Training on augumented user 2811 38/50 current_auc = 0.2527472527472528
User 2811 AUC after training: 0.2527472527472528
User 2811 does not improve AUC. Reverting changes.
Training on augumented user 45473 39/50 current_auc = 0.2527472527472528
User 45473 AUC after training: 0.2527472527472528
User 45473 does not improve AUC. Reverting changes.
Training on augumented user 17607 40/50 current_auc = 0.2527472527472528
User 17607 AUC after training: 0.2527472527472528
User 17607 does not improve AUC. Reverting changes.
Training on augumented user 50890 41/50 current_auc = 0.2527472527472528
User 50890 AUC after training: 0.2527472527472528
User 50890 does not improve AUC. Reverting changes.
Training on augumented user 50735 42/50 current_auc = 0.2527472527472528
User 50735 AUC after training: 0.2527472527472528
User 50735 does not improve AUC. Reverting changes.
Training on augumented user 121478 43/50 current_auc = 0.2527472527472528
User 121478 AUC after training: 0.2527472527472528
User 121478 does not improve AUC. Reverting changes.
Training on augumented user 17800 44/50 current_auc = 0.2527472527472528
User 17800 AUC after training: 0.2527472527472528
User 17800 does not improve AUC. Reverting changes.
Training on augumented user 71597 45/50 current_auc = 0.2527472527472528
User 71597 AUC after training: 0.2527472527472528
User 71597 does not improve AUC. Reverting changes.
Training on augumented user 55511 46/50 current_auc = 0.2527472527472528
User 55511 AUC after training: 0.2527472527472528
User 55511 does not improve AUC. Reverting changes.
Training on augumented user 19411 47/50 current_auc = 0.2527472527472528
User 19411 AUC after training: 0.2527472527472528
User 19411 does not improve AUC. Reverting changes.
Training on augumented user 4622 48/50 current_auc = 0.2527472527472528
User 4622 AUC after training: 0.2527472527472528
User 4622 does not improve AUC. Reverting changes.
Training on augumented user 50253 49/50 current_auc = 0.2527472527472528
User 50253 AUC after training: 0.2417582417582418
User 50253 does not improve AUC. Reverting changes.
[2024-12-02 18:42:10.968980] start test user 126865 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:11.622736] start test user 126865 119/567 recall augumented users by random, augumented_users = [25312, 126387, 4242, 51618, 44311, 138337, 96767, 7942, 18336, 89129, 50787, 2821, 114621, 92553, 91962, 47498, 96290, 40599, 69394, 69595, 105155, 86787, 81449, 28384, 18476, 133900, 35374, 80390, 59791, 57895, 52021, 119603, 128363, 44825, 90005, 114543, 66407, 14413, 32213, 7426, 55233, 95726, 58281, 119328, 30555, 1756, 33208, 106318, 38177, 43158]
[2024-12-02 18:42:11.652513] user = 126865 Cloud 119/567
[2024-12-02 18:42:11.675657] user = 126865 Local 119/567
[2024-12-02 18:42:11.798536] user = 126865 Local+ 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:14.110118] user = 126865 MPDA- 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.1
Training on augumented user 25312 0/50 current_auc = 0.1
User 25312 AUC after training: 0.1
User 25312 does not improve AUC. Reverting changes.
Training on augumented user 126387 1/50 current_auc = 0.1
User 126387 AUC after training: 0.1
User 126387 does not improve AUC. Reverting changes.
Training on augumented user 4242 2/50 current_auc = 0.1
User 4242 AUC after training: 0.1
User 4242 does not improve AUC. Reverting changes.
Training on augumented user 51618 3/50 current_auc = 0.1
User 51618 AUC after training: 0.1
User 51618 does not improve AUC. Reverting changes.
Training on augumented user 44311 4/50 current_auc = 0.1
User 44311 AUC after training: 0.1
User 44311 does not improve AUC. Reverting changes.
Training on augumented user 138337 5/50 current_auc = 0.1
User 138337 AUC after training: 0.1
User 138337 does not improve AUC. Reverting changes.
Training on augumented user 96767 6/50 current_auc = 0.1
User 96767 AUC after training: 0.1
User 96767 does not improve AUC. Reverting changes.
Training on augumented user 7942 7/50 current_auc = 0.1
User 7942 AUC after training: 0.1
User 7942 does not improve AUC. Reverting changes.
Training on augumented user 18336 8/50 current_auc = 0.1
User 18336 AUC after training: 0.1
User 18336 does not improve AUC. Reverting changes.
Training on augumented user 89129 9/50 current_auc = 0.1
User 89129 AUC after training: 0.1
User 89129 does not improve AUC. Reverting changes.
Training on augumented user 50787 10/50 current_auc = 0.1
User 50787 AUC after training: 0.1
User 50787 does not improve AUC. Reverting changes.
Training on augumented user 2821 11/50 current_auc = 0.1
User 2821 AUC after training: 0.1
User 2821 does not improve AUC. Reverting changes.
Training on augumented user 114621 12/50 current_auc = 0.1
User 114621 AUC after training: 0.1
User 114621 does not improve AUC. Reverting changes.
Training on augumented user 92553 13/50 current_auc = 0.1
User 92553 AUC after training: 0.1
User 92553 does not improve AUC. Reverting changes.
Training on augumented user 91962 14/50 current_auc = 0.1
User 91962 AUC after training: 0.1
User 91962 does not improve AUC. Reverting changes.
Training on augumented user 47498 15/50 current_auc = 0.1
User 47498 AUC after training: 0.1
User 47498 does not improve AUC. Reverting changes.
Training on augumented user 96290 16/50 current_auc = 0.1
User 96290 AUC after training: 0.1
User 96290 does not improve AUC. Reverting changes.
Training on augumented user 40599 17/50 current_auc = 0.1
User 40599 AUC after training: 0.1
User 40599 does not improve AUC. Reverting changes.
Training on augumented user 69394 18/50 current_auc = 0.1
User 69394 AUC after training: 0.1
User 69394 does not improve AUC. Reverting changes.
Training on augumented user 69595 19/50 current_auc = 0.1
User 69595 AUC after training: 0.1
User 69595 does not improve AUC. Reverting changes.
Training on augumented user 105155 20/50 current_auc = 0.1
User 105155 AUC after training: 0.1
User 105155 does not improve AUC. Reverting changes.
Training on augumented user 86787 21/50 current_auc = 0.1
User 86787 AUC after training: 0.1
User 86787 does not improve AUC. Reverting changes.
Training on augumented user 81449 22/50 current_auc = 0.1
User 81449 AUC after training: 0.1
User 81449 does not improve AUC. Reverting changes.
Training on augumented user 28384 23/50 current_auc = 0.1
User 28384 AUC after training: 0.1
User 28384 does not improve AUC. Reverting changes.
Training on augumented user 18476 24/50 current_auc = 0.1
User 18476 AUC after training: 0.1
User 18476 does not improve AUC. Reverting changes.
Training on augumented user 133900 25/50 current_auc = 0.1
User 133900 AUC after training: 0.1
User 133900 does not improve AUC. Reverting changes.
Training on augumented user 35374 26/50 current_auc = 0.1
User 35374 AUC after training: 0.1
User 35374 does not improve AUC. Reverting changes.
Training on augumented user 80390 27/50 current_auc = 0.1
User 80390 AUC after training: 0.1
User 80390 does not improve AUC. Reverting changes.
Training on augumented user 59791 28/50 current_auc = 0.1
User 59791 AUC after training: 0.1
User 59791 does not improve AUC. Reverting changes.
Training on augumented user 57895 29/50 current_auc = 0.1
User 57895 AUC after training: 0.1
User 57895 does not improve AUC. Reverting changes.
Training on augumented user 52021 30/50 current_auc = 0.1
User 52021 AUC after training: 0.1
User 52021 does not improve AUC. Reverting changes.
Training on augumented user 119603 31/50 current_auc = 0.1
User 119603 AUC after training: 0.1
User 119603 does not improve AUC. Reverting changes.
Training on augumented user 128363 32/50 current_auc = 0.1
User 128363 AUC after training: 0.1
User 128363 does not improve AUC. Reverting changes.
Training on augumented user 44825 33/50 current_auc = 0.1
User 44825 AUC after training: 0.1
User 44825 does not improve AUC. Reverting changes.
Training on augumented user 90005 34/50 current_auc = 0.1
User 90005 AUC after training: 0.1
User 90005 does not improve AUC. Reverting changes.
Training on augumented user 114543 35/50 current_auc = 0.1
User 114543 AUC after training: 0.1
User 114543 does not improve AUC. Reverting changes.
Training on augumented user 66407 36/50 current_auc = 0.1
User 66407 AUC after training: 0.1
User 66407 does not improve AUC. Reverting changes.
Training on augumented user 14413 37/50 current_auc = 0.1
User 14413 AUC after training: 0.1
User 14413 does not improve AUC. Reverting changes.
Training on augumented user 32213 38/50 current_auc = 0.1
User 32213 AUC after training: 0.1
User 32213 does not improve AUC. Reverting changes.
Training on augumented user 7426 39/50 current_auc = 0.1
User 7426 AUC after training: 0.1
User 7426 does not improve AUC. Reverting changes.
Training on augumented user 55233 40/50 current_auc = 0.1
User 55233 AUC after training: 0.1
User 55233 does not improve AUC. Reverting changes.
Training on augumented user 95726 41/50 current_auc = 0.1
User 95726 AUC after training: 0.1
User 95726 does not improve AUC. Reverting changes.
Training on augumented user 58281 42/50 current_auc = 0.1
User 58281 AUC after training: 0.1
User 58281 does not improve AUC. Reverting changes.
Training on augumented user 119328 43/50 current_auc = 0.1
User 119328 AUC after training: 0.1
User 119328 does not improve AUC. Reverting changes.
Training on augumented user 30555 44/50 current_auc = 0.1
User 30555 AUC after training: 0.1
User 30555 does not improve AUC. Reverting changes.
Training on augumented user 1756 45/50 current_auc = 0.1
User 1756 AUC after training: 0.1
User 1756 does not improve AUC. Reverting changes.
Training on augumented user 33208 46/50 current_auc = 0.1
User 33208 AUC after training: 0.1
User 33208 does not improve AUC. Reverting changes.
Training on augumented user 106318 47/50 current_auc = 0.1
User 106318 AUC after training: 0.1
User 106318 does not improve AUC. Reverting changes.
Training on augumented user 38177 48/50 current_auc = 0.1
User 38177 AUC after training: 0.1
User 38177 does not improve AUC. Reverting changes.
Training on augumented user 43158 49/50 current_auc = 0.1
User 43158 AUC after training: 0.1
User 43158 does not improve AUC. Reverting changes.
[2024-12-02 18:42:44.267982] start test user 126887 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:44.925957] start test user 126887 120/567 recall augumented users by random, augumented_users = [137820, 66369, 128506, 75822, 80655, 131432, 21493, 50848, 69925, 85569, 13917, 57200, 32547, 131284, 128805, 137602, 23872, 55792, 7263, 117521, 123208, 61474, 51579, 461, 47134, 16836, 31158, 24372, 48935, 76722, 118384, 34443, 77670, 112324, 46027, 91930, 27027, 64736, 53010, 63012, 134110, 32012, 119443, 55993, 49659, 18481, 113118, 21560, 110762, 114821]
[2024-12-02 18:42:44.939204] user = 126887 Cloud 120/567
[2024-12-02 18:42:44.949722] user = 126887 Local 120/567
[2024-12-02 18:42:44.972475] user = 126887 Local+ 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:47.509691] user = 126887 MPDA- 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8144796380090498
Training on augumented user 137820 0/50 current_auc = 0.8144796380090498
User 137820 AUC after training: 0.8144796380090498
User 137820 does not improve AUC. Reverting changes.
Training on augumented user 66369 1/50 current_auc = 0.8144796380090498
User 66369 AUC after training: 0.8144796380090498
User 66369 does not improve AUC. Reverting changes.
Training on augumented user 128506 2/50 current_auc = 0.8144796380090498
User 128506 AUC after training: 0.8144796380090498
User 128506 does not improve AUC. Reverting changes.
Training on augumented user 75822 3/50 current_auc = 0.8144796380090498
User 75822 AUC after training: 0.8144796380090498
User 75822 does not improve AUC. Reverting changes.
Training on augumented user 80655 4/50 current_auc = 0.8144796380090498
User 80655 AUC after training: 0.8144796380090498
User 80655 does not improve AUC. Reverting changes.
Training on augumented user 131432 5/50 current_auc = 0.8144796380090498
User 131432 AUC after training: 0.8144796380090498
User 131432 does not improve AUC. Reverting changes.
Training on augumented user 21493 6/50 current_auc = 0.8144796380090498
User 21493 AUC after training: 0.8144796380090498
User 21493 does not improve AUC. Reverting changes.
Training on augumented user 50848 7/50 current_auc = 0.8144796380090498
User 50848 AUC after training: 0.8144796380090498
User 50848 does not improve AUC. Reverting changes.
Training on augumented user 69925 8/50 current_auc = 0.8144796380090498
User 69925 AUC after training: 0.8144796380090498
User 69925 does not improve AUC. Reverting changes.
Training on augumented user 85569 9/50 current_auc = 0.8144796380090498
User 85569 AUC after training: 0.8099547511312217
User 85569 does not improve AUC. Reverting changes.
Training on augumented user 13917 10/50 current_auc = 0.8144796380090498
User 13917 AUC after training: 0.8144796380090498
User 13917 does not improve AUC. Reverting changes.
Training on augumented user 57200 11/50 current_auc = 0.8144796380090498
User 57200 AUC after training: 0.8144796380090498
User 57200 does not improve AUC. Reverting changes.
Training on augumented user 32547 12/50 current_auc = 0.8144796380090498
User 32547 AUC after training: 0.8099547511312217
User 32547 does not improve AUC. Reverting changes.
Training on augumented user 131284 13/50 current_auc = 0.8144796380090498
User 131284 AUC after training: 0.8144796380090498
User 131284 does not improve AUC. Reverting changes.
Training on augumented user 128805 14/50 current_auc = 0.8144796380090498
User 128805 AUC after training: 0.8099547511312217
User 128805 does not improve AUC. Reverting changes.
Training on augumented user 137602 15/50 current_auc = 0.8144796380090498
User 137602 AUC after training: 0.8144796380090498
User 137602 does not improve AUC. Reverting changes.
Training on augumented user 23872 16/50 current_auc = 0.8144796380090498
User 23872 AUC after training: 0.8144796380090498
User 23872 does not improve AUC. Reverting changes.
Training on augumented user 55792 17/50 current_auc = 0.8144796380090498
User 55792 AUC after training: 0.8144796380090498
User 55792 does not improve AUC. Reverting changes.
Training on augumented user 7263 18/50 current_auc = 0.8144796380090498
User 7263 AUC after training: 0.8144796380090498
User 7263 does not improve AUC. Reverting changes.
Training on augumented user 117521 19/50 current_auc = 0.8144796380090498
User 117521 AUC after training: 0.8144796380090498
User 117521 does not improve AUC. Reverting changes.
Training on augumented user 123208 20/50 current_auc = 0.8144796380090498
User 123208 AUC after training: 0.8144796380090498
User 123208 does not improve AUC. Reverting changes.
Training on augumented user 61474 21/50 current_auc = 0.8144796380090498
User 61474 AUC after training: 0.8144796380090498
User 61474 does not improve AUC. Reverting changes.
Training on augumented user 51579 22/50 current_auc = 0.8144796380090498
User 51579 AUC after training: 0.8144796380090498
User 51579 does not improve AUC. Reverting changes.
Training on augumented user 461 23/50 current_auc = 0.8144796380090498
User 461 AUC after training: 0.8099547511312217
User 461 does not improve AUC. Reverting changes.
Training on augumented user 47134 24/50 current_auc = 0.8144796380090498
User 47134 AUC after training: 0.8144796380090498
User 47134 does not improve AUC. Reverting changes.
Training on augumented user 16836 25/50 current_auc = 0.8144796380090498
User 16836 AUC after training: 0.8144796380090498
User 16836 does not improve AUC. Reverting changes.
Training on augumented user 31158 26/50 current_auc = 0.8144796380090498
User 31158 AUC after training: 0.8144796380090498
User 31158 does not improve AUC. Reverting changes.
Training on augumented user 24372 27/50 current_auc = 0.8144796380090498
User 24372 AUC after training: 0.8144796380090498
User 24372 does not improve AUC. Reverting changes.
Training on augumented user 48935 28/50 current_auc = 0.8144796380090498
User 48935 AUC after training: 0.8144796380090498
User 48935 does not improve AUC. Reverting changes.
Training on augumented user 76722 29/50 current_auc = 0.8144796380090498
User 76722 AUC after training: 0.8144796380090498
User 76722 does not improve AUC. Reverting changes.
Training on augumented user 118384 30/50 current_auc = 0.8144796380090498
User 118384 AUC after training: 0.8144796380090498
User 118384 does not improve AUC. Reverting changes.
Training on augumented user 34443 31/50 current_auc = 0.8144796380090498
User 34443 AUC after training: 0.8144796380090498
User 34443 does not improve AUC. Reverting changes.
Training on augumented user 77670 32/50 current_auc = 0.8144796380090498
User 77670 AUC after training: 0.8054298642533937
User 77670 does not improve AUC. Reverting changes.
Training on augumented user 112324 33/50 current_auc = 0.8144796380090498
User 112324 AUC after training: 0.8144796380090498
User 112324 does not improve AUC. Reverting changes.
Training on augumented user 46027 34/50 current_auc = 0.8144796380090498
User 46027 AUC after training: 0.8144796380090498
User 46027 does not improve AUC. Reverting changes.
Training on augumented user 91930 35/50 current_auc = 0.8144796380090498
User 91930 AUC after training: 0.8144796380090498
User 91930 does not improve AUC. Reverting changes.
Training on augumented user 27027 36/50 current_auc = 0.8144796380090498
User 27027 AUC after training: 0.8144796380090498
User 27027 does not improve AUC. Reverting changes.
Training on augumented user 64736 37/50 current_auc = 0.8144796380090498
User 64736 AUC after training: 0.8144796380090498
User 64736 does not improve AUC. Reverting changes.
Training on augumented user 53010 38/50 current_auc = 0.8144796380090498
User 53010 AUC after training: 0.8144796380090498
User 53010 does not improve AUC. Reverting changes.
Training on augumented user 63012 39/50 current_auc = 0.8144796380090498
User 63012 AUC after training: 0.8144796380090498
User 63012 does not improve AUC. Reverting changes.
Training on augumented user 134110 40/50 current_auc = 0.8144796380090498
User 134110 AUC after training: 0.8144796380090498
User 134110 does not improve AUC. Reverting changes.
Training on augumented user 32012 41/50 current_auc = 0.8144796380090498
User 32012 AUC after training: 0.8144796380090498
User 32012 does not improve AUC. Reverting changes.
Training on augumented user 119443 42/50 current_auc = 0.8144796380090498
User 119443 AUC after training: 0.8144796380090498
User 119443 does not improve AUC. Reverting changes.
Training on augumented user 55993 43/50 current_auc = 0.8144796380090498
User 55993 AUC after training: 0.8144796380090498
User 55993 does not improve AUC. Reverting changes.
Training on augumented user 49659 44/50 current_auc = 0.8144796380090498
User 49659 AUC after training: 0.8144796380090498
User 49659 does not improve AUC. Reverting changes.
Training on augumented user 18481 45/50 current_auc = 0.8144796380090498
User 18481 AUC after training: 0.8144796380090498
User 18481 does not improve AUC. Reverting changes.
Training on augumented user 113118 46/50 current_auc = 0.8144796380090498
User 113118 AUC after training: 0.8144796380090498
User 113118 does not improve AUC. Reverting changes.
Training on augumented user 21560 47/50 current_auc = 0.8144796380090498
User 21560 AUC after training: 0.8144796380090498
User 21560 does not improve AUC. Reverting changes.
Training on augumented user 110762 48/50 current_auc = 0.8144796380090498
User 110762 AUC after training: 0.8144796380090498
User 110762 does not improve AUC. Reverting changes.
Training on augumented user 114821 49/50 current_auc = 0.8144796380090498
User 114821 AUC after training: 0.8144796380090498
User 114821 does not improve AUC. Reverting changes.
[2024-12-02 18:43:18.176257] start test user 126917 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:18.602724] start test user 126917 121/567 recall augumented users by random, augumented_users = [120589, 91821, 48686, 7361, 32207, 20666, 128279, 115540, 69155, 26764, 110404, 43429, 108666, 117712, 51374, 136304, 7963, 37567, 44273, 98839, 37832, 30079, 121452, 136929, 118372, 61581, 84151, 27703, 66289, 124036, 99761, 91150, 68194, 5634, 131410, 35781, 85610, 32399, 69212, 3120, 6892, 54376, 10544, 95846, 56113, 105617, 42682, 120306, 46165, 1485]
[2024-12-02 18:43:18.618962] user = 126917 Cloud 121/567
[2024-12-02 18:43:18.646627] user = 126917 Local 121/567
[2024-12-02 18:43:18.755133] user = 126917 Local+ 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:20.703811] user = 126917 MPDA- 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6645515592988845
Training on augumented user 120589 0/50 current_auc = 0.6645515592988845
User 120589 AUC after training: 0.6636979285226497
User 120589 does not improve AUC. Reverting changes.
Training on augumented user 91821 1/50 current_auc = 0.6645515592988845
User 91821 AUC after training: 0.6640962895515592
User 91821 does not improve AUC. Reverting changes.
Training on augumented user 48686 2/50 current_auc = 0.6645515592988845
User 48686 AUC after training: 0.6645515592988847
User 48686 improves AUC. Keeping the model.
Training on augumented user 7361 3/50 current_auc = 0.6645515592988847
User 7361 AUC after training: 0.6638828818575006
User 7361 does not improve AUC. Reverting changes.
Training on augumented user 32207 4/50 current_auc = 0.6645515592988847
User 32207 AUC after training: 0.6647791941725472
User 32207 improves AUC. Keeping the model.
Training on augumented user 20666 5/50 current_auc = 0.6647791941725472
User 20666 AUC after training: 0.6646084680173002
User 20666 does not improve AUC. Reverting changes.
Training on augumented user 128279 6/50 current_auc = 0.6647791941725472
User 128279 AUC after training: 0.664153198269975
User 128279 does not improve AUC. Reverting changes.
Training on augumented user 115540 7/50 current_auc = 0.6647791941725472
User 115540 AUC after training: 0.6646653767357159
User 115540 does not improve AUC. Reverting changes.
Training on augumented user 69155 8/50 current_auc = 0.6647791941725472
User 69155 AUC after training: 0.6649499203277942
User 69155 improves AUC. Keeping the model.
Training on augumented user 26764 9/50 current_auc = 0.6649499203277942
User 26764 AUC after training: 0.6648645572501707
User 26764 does not improve AUC. Reverting changes.
Training on augumented user 110404 10/50 current_auc = 0.6649499203277942
User 110404 AUC after training: 0.6641247439107671
User 110404 does not improve AUC. Reverting changes.
Training on augumented user 43429 11/50 current_auc = 0.6649499203277942
User 43429 AUC after training: 0.6640393808331436
User 43429 does not improve AUC. Reverting changes.
Training on augumented user 108666 12/50 current_auc = 0.6649499203277942
User 108666 AUC after training: 0.6644661962212611
User 108666 does not improve AUC. Reverting changes.
Training on augumented user 117712 13/50 current_auc = 0.6649499203277942
User 117712 AUC after training: 0.6642954700660141
User 117712 does not improve AUC. Reverting changes.
Training on augumented user 51374 14/50 current_auc = 0.6649499203277942
User 51374 AUC after training: 0.6644092875028454
User 51374 does not improve AUC. Reverting changes.
Training on augumented user 136304 15/50 current_auc = 0.6649499203277942
User 136304 AUC after training: 0.6637690644206692
User 136304 does not improve AUC. Reverting changes.
Training on augumented user 7963 16/50 current_auc = 0.6649499203277942
User 7963 AUC after training: 0.6647791941725472
User 7963 does not improve AUC. Reverting changes.
Training on augumented user 37567 17/50 current_auc = 0.6649499203277942
User 37567 AUC after training: 0.6639113362167084
User 37567 does not improve AUC. Reverting changes.
Training on augumented user 44273 18/50 current_auc = 0.6649499203277942
User 44273 AUC after training: 0.6679660824038243
User 44273 improves AUC. Keeping the model.
Training on augumented user 98839 19/50 current_auc = 0.6679660824038243
User 98839 AUC after training: 0.6687485772820397
User 98839 improves AUC. Keeping the model.
Training on augumented user 37832 20/50 current_auc = 0.6687485772820397
User 37832 AUC after training: 0.6670555429091736
User 37832 does not improve AUC. Reverting changes.
Training on augumented user 30079 21/50 current_auc = 0.6687485772820397
User 30079 AUC after training: 0.6680514454814477
User 30079 does not improve AUC. Reverting changes.
Training on augumented user 121452 22/50 current_auc = 0.6687485772820397
User 121452 AUC after training: 0.6646938310949237
User 121452 does not improve AUC. Reverting changes.
Training on augumented user 136929 23/50 current_auc = 0.6687485772820397
User 136929 AUC after training: 0.6688054860004552
User 136929 improves AUC. Keeping the model.
Training on augumented user 118372 24/50 current_auc = 0.6688054860004552
User 118372 AUC after training: 0.6671409059867971
User 118372 does not improve AUC. Reverting changes.
Training on augumented user 61581 25/50 current_auc = 0.6688054860004552
User 61581 AUC after training: 0.6694741634418393
User 61581 improves AUC. Keeping the model.
Training on augumented user 84151 26/50 current_auc = 0.6694741634418393
User 84151 AUC after training: 0.665319826997496
User 84151 does not improve AUC. Reverting changes.
Training on augumented user 27703 27/50 current_auc = 0.6694741634418393
User 27703 AUC after training: 0.6684782608695653
User 27703 does not improve AUC. Reverting changes.
Training on augumented user 66289 28/50 current_auc = 0.6694741634418393
User 66289 AUC after training: 0.6689335306168904
User 66289 does not improve AUC. Reverting changes.
Training on augumented user 124036 29/50 current_auc = 0.6694741634418393
User 124036 AUC after training: 0.6688197131800591
User 124036 does not improve AUC. Reverting changes.
Training on augumented user 99761 30/50 current_auc = 0.6694741634418393
User 99761 AUC after training: 0.6673685408604598
User 99761 does not improve AUC. Reverting changes.
Training on augumented user 91150 31/50 current_auc = 0.6694741634418393
User 91150 AUC after training: 0.6648361028909628
User 91150 does not improve AUC. Reverting changes.
Training on augumented user 68194 32/50 current_auc = 0.6694741634418393
User 68194 AUC after training: 0.668335989073526
User 68194 does not improve AUC. Reverting changes.
Training on augumented user 5634 33/50 current_auc = 0.6694741634418393
User 5634 AUC after training: 0.6678807193262007
User 5634 does not improve AUC. Reverting changes.
Training on augumented user 131410 34/50 current_auc = 0.6694741634418393
User 131410 AUC after training: 0.667169360346005
User 131410 does not improve AUC. Reverting changes.
Training on augumented user 35781 35/50 current_auc = 0.6694741634418393
User 35781 AUC after training: 0.6629581151832461
User 35781 does not improve AUC. Reverting changes.
Training on augumented user 85610 36/50 current_auc = 0.6694741634418393
User 85610 AUC after training: 0.6686205326656044
User 85610 does not improve AUC. Reverting changes.
Training on augumented user 32399 37/50 current_auc = 0.6694741634418393
User 32399 AUC after training: 0.6678238106077852
User 32399 does not improve AUC. Reverting changes.
Training on augumented user 69212 38/50 current_auc = 0.6694741634418393
User 69212 AUC after training: 0.6667425449578875
User 69212 does not improve AUC. Reverting changes.
Training on augumented user 3120 39/50 current_auc = 0.6694741634418393
User 3120 AUC after training: 0.6667140905986798
User 3120 does not improve AUC. Reverting changes.
Training on augumented user 6892 40/50 current_auc = 0.6694741634418393
User 6892 AUC after training: 0.6679945367630321
User 6892 does not improve AUC. Reverting changes.
Training on augumented user 54376 41/50 current_auc = 0.6694741634418393
User 54376 AUC after training: 0.668506715228773
User 54376 does not improve AUC. Reverting changes.
Training on augumented user 10544 42/50 current_auc = 0.6694741634418393
User 10544 AUC after training: 0.667496585476895
User 10544 does not improve AUC. Reverting changes.
Training on augumented user 95846 43/50 current_auc = 0.6694741634418393
User 95846 AUC after training: 0.6687058957432279
User 95846 does not improve AUC. Reverting changes.
Training on augumented user 56113 44/50 current_auc = 0.6694741634418393
User 56113 AUC after training: 0.6666856362394717
User 56113 does not improve AUC. Reverting changes.
Training on augumented user 105617 45/50 current_auc = 0.6694741634418393
User 105617 AUC after training: 0.6674112223992716
User 105617 does not improve AUC. Reverting changes.
Training on augumented user 42682 46/50 current_auc = 0.6694741634418393
User 42682 AUC after training: 0.667340086501252
User 42682 does not improve AUC. Reverting changes.
Training on augumented user 120306 47/50 current_auc = 0.6694741634418393
User 120306 AUC after training: 0.6680798998406555
User 120306 does not improve AUC. Reverting changes.
Training on augumented user 46165 48/50 current_auc = 0.6694741634418393
User 46165 AUC after training: 0.6682221716366947
User 46165 does not improve AUC. Reverting changes.
Training on augumented user 1485 49/50 current_auc = 0.6694741634418393
User 1485 AUC after training: 0.6664864557250171
User 1485 does not improve AUC. Reverting changes.
[2024-12-02 18:43:52.609685] start test user 126946 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:53.058304] start test user 126946 122/567 recall augumented users by random, augumented_users = [50740, 95053, 101292, 94538, 48358, 107648, 134686, 66299, 113266, 70187, 83480, 37395, 103421, 11869, 59879, 106077, 54988, 49416, 115910, 21452, 107394, 5074, 70012, 119140, 113304, 18362, 42791, 96167, 103042, 119318, 81184, 15569, 105589, 108778, 91426, 108128, 59945, 77643, 110799, 110869, 114940, 55895, 43754, 71965, 125740, 65544, 107112, 37635, 50055, 8620]
[2024-12-02 18:43:53.073494] user = 126946 Cloud 122/567
[2024-12-02 18:43:53.107202] user = 126946 Local 122/567
[2024-12-02 18:43:53.162065] user = 126946 Local+ 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:55.812242] user = 126946 MPDA- 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4430937279774489
Training on augumented user 50740 0/50 current_auc = 0.4430937279774489
User 50740 AUC after training: 0.44362226920366454
User 50740 improves AUC. Keeping the model.
Training on augumented user 95053 1/50 current_auc = 0.44362226920366454
User 95053 AUC after training: 0.44221282593375616
User 95053 does not improve AUC. Reverting changes.
Training on augumented user 101292 2/50 current_auc = 0.44362226920366454
User 101292 AUC after training: 0.44362226920366454
User 101292 does not improve AUC. Reverting changes.
Training on augumented user 94538 3/50 current_auc = 0.44362226920366454
User 94538 AUC after training: 0.4425651867512333
User 94538 does not improve AUC. Reverting changes.
Training on augumented user 48358 4/50 current_auc = 0.44362226920366454
User 48358 AUC after training: 0.44326990838618746
User 48358 does not improve AUC. Reverting changes.
Training on augumented user 107648 5/50 current_auc = 0.44362226920366454
User 107648 AUC after training: 0.44326990838618746
User 107648 does not improve AUC. Reverting changes.
Training on augumented user 134686 6/50 current_auc = 0.44362226920366454
User 134686 AUC after training: 0.441508104298802
User 134686 does not improve AUC. Reverting changes.
Training on augumented user 66299 7/50 current_auc = 0.44362226920366454
User 66299 AUC after training: 0.44432699083861876
User 66299 improves AUC. Keeping the model.
Training on augumented user 113266 8/50 current_auc = 0.44432699083861876
User 113266 AUC after training: 0.4436222692036646
User 113266 does not improve AUC. Reverting changes.
Training on augumented user 70187 9/50 current_auc = 0.44432699083861876
User 70187 AUC after training: 0.4432699083861874
User 70187 does not improve AUC. Reverting changes.
Training on augumented user 83480 10/50 current_auc = 0.44432699083861876
User 83480 AUC after training: 0.4439746300211417
User 83480 does not improve AUC. Reverting changes.
Training on augumented user 37395 11/50 current_auc = 0.44432699083861876
User 37395 AUC after training: 0.4436222692036646
User 37395 does not improve AUC. Reverting changes.
Training on augumented user 103421 12/50 current_auc = 0.44432699083861876
User 103421 AUC after training: 0.4429175475687104
User 103421 does not improve AUC. Reverting changes.
Training on augumented user 11869 13/50 current_auc = 0.44432699083861876
User 11869 AUC after training: 0.4436222692036646
User 11869 does not improve AUC. Reverting changes.
Training on augumented user 59879 14/50 current_auc = 0.44432699083861876
User 59879 AUC after training: 0.44467935165609584
User 59879 improves AUC. Keeping the model.
Training on augumented user 106077 15/50 current_auc = 0.44467935165609584
User 106077 AUC after training: 0.4450317124735729
User 106077 improves AUC. Keeping the model.
Training on augumented user 54988 16/50 current_auc = 0.4450317124735729
User 54988 AUC after training: 0.4446793516560959
User 54988 does not improve AUC. Reverting changes.
Training on augumented user 49416 17/50 current_auc = 0.4450317124735729
User 49416 AUC after training: 0.44503171247357287
User 49416 does not improve AUC. Reverting changes.
Training on augumented user 115910 18/50 current_auc = 0.4450317124735729
User 115910 AUC after training: 0.44503171247357287
User 115910 does not improve AUC. Reverting changes.
Training on augumented user 21452 19/50 current_auc = 0.4450317124735729
User 21452 AUC after training: 0.44538407329105
User 21452 improves AUC. Keeping the model.
Training on augumented user 107394 20/50 current_auc = 0.44538407329105
User 107394 AUC after training: 0.44432699083861876
User 107394 does not improve AUC. Reverting changes.
Training on augumented user 5074 21/50 current_auc = 0.44538407329105
User 5074 AUC after training: 0.44221282593375616
User 5074 does not improve AUC. Reverting changes.
Training on augumented user 70012 22/50 current_auc = 0.44538407329105
User 70012 AUC after training: 0.44467935165609584
User 70012 does not improve AUC. Reverting changes.
Training on augumented user 119140 23/50 current_auc = 0.44538407329105
User 119140 AUC after training: 0.4450317124735729
User 119140 does not improve AUC. Reverting changes.
Training on augumented user 113304 24/50 current_auc = 0.44538407329105
User 113304 AUC after training: 0.4439746300211417
User 113304 does not improve AUC. Reverting changes.
Training on augumented user 18362 25/50 current_auc = 0.44538407329105
User 18362 AUC after training: 0.44362226920366454
User 18362 does not improve AUC. Reverting changes.
Training on augumented user 42791 26/50 current_auc = 0.44538407329105
User 42791 AUC after training: 0.441508104298802
User 42791 does not improve AUC. Reverting changes.
Training on augumented user 96167 27/50 current_auc = 0.44538407329105
User 96167 AUC after training: 0.4446793516560958
User 96167 does not improve AUC. Reverting changes.
Training on augumented user 103042 28/50 current_auc = 0.44538407329105
User 103042 AUC after training: 0.44415081042988014
User 103042 does not improve AUC. Reverting changes.
Training on augumented user 119318 29/50 current_auc = 0.44538407329105
User 119318 AUC after training: 0.4443269908386187
User 119318 does not improve AUC. Reverting changes.
Training on augumented user 81184 30/50 current_auc = 0.44538407329105
User 81184 AUC after training: 0.4446793516560958
User 81184 does not improve AUC. Reverting changes.
Training on augumented user 15569 31/50 current_auc = 0.44538407329105
User 15569 AUC after training: 0.4464411557434813
User 15569 improves AUC. Keeping the model.
Training on augumented user 105589 32/50 current_auc = 0.4464411557434813
User 105589 AUC after training: 0.44714587737843553
User 105589 improves AUC. Keeping the model.
Training on augumented user 108778 33/50 current_auc = 0.44714587737843553
User 108778 AUC after training: 0.4450317124735729
User 108778 does not improve AUC. Reverting changes.
Training on augumented user 91426 34/50 current_auc = 0.44714587737843553
User 91426 AUC after training: 0.44749823819591267
User 91426 improves AUC. Keeping the model.
Training on augumented user 108128 35/50 current_auc = 0.44749823819591267
User 108128 AUC after training: 0.44415081042988014
User 108128 does not improve AUC. Reverting changes.
Training on augumented user 59945 36/50 current_auc = 0.44749823819591267
User 59945 AUC after training: 0.44679351656095845
User 59945 does not improve AUC. Reverting changes.
Training on augumented user 77643 37/50 current_auc = 0.44749823819591267
User 77643 AUC after training: 0.44538407329105
User 77643 does not improve AUC. Reverting changes.
Training on augumented user 110799 38/50 current_auc = 0.44749823819591267
User 110799 AUC after training: 0.4441508104298802
User 110799 does not improve AUC. Reverting changes.
Training on augumented user 110869 39/50 current_auc = 0.44749823819591267
User 110869 AUC after training: 0.4452078928823115
User 110869 does not improve AUC. Reverting changes.
Training on augumented user 114940 40/50 current_auc = 0.44749823819591267
User 114940 AUC after training: 0.4443269908386187
User 114940 does not improve AUC. Reverting changes.
Training on augumented user 55895 41/50 current_auc = 0.44749823819591267
User 55895 AUC after training: 0.4464411557434813
User 55895 does not improve AUC. Reverting changes.
Training on augumented user 43754 42/50 current_auc = 0.44749823819591267
User 43754 AUC after training: 0.44679351656095845
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 71965 43/50 current_auc = 0.44749823819591267
User 71965 AUC after training: 0.44679351656095845
User 71965 does not improve AUC. Reverting changes.
Training on augumented user 125740 44/50 current_auc = 0.44749823819591267
User 125740 AUC after training: 0.44644115574348137
User 125740 does not improve AUC. Reverting changes.
Training on augumented user 65544 45/50 current_auc = 0.44749823819591267
User 65544 AUC after training: 0.44573643410852715
User 65544 does not improve AUC. Reverting changes.
Training on augumented user 107112 46/50 current_auc = 0.44749823819591267
User 107112 AUC after training: 0.4457364341085271
User 107112 does not improve AUC. Reverting changes.
Training on augumented user 37635 47/50 current_auc = 0.44749823819591267
User 37635 AUC after training: 0.44573643410852715
User 37635 does not improve AUC. Reverting changes.
Training on augumented user 50055 48/50 current_auc = 0.44749823819591267
User 50055 AUC after training: 0.4474982381959126
User 50055 does not improve AUC. Reverting changes.
Training on augumented user 8620 49/50 current_auc = 0.44749823819591267
User 8620 AUC after training: 0.4450317124735729
User 8620 does not improve AUC. Reverting changes.
[2024-12-02 18:44:27.401414] start test user 127114 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:28.333539] start test user 127114 123/567 recall augumented users by random, augumented_users = [61241, 5762, 33237, 74403, 125808, 39936, 133223, 81351, 58565, 46067, 4888, 136353, 64770, 129529, 102196, 136273, 132262, 105690, 93969, 64992, 99275, 129607, 135455, 115937, 15533, 64630, 91050, 43696, 63583, 52215, 117302, 88783, 41176, 99254, 46585, 118470, 18791, 104076, 25222, 104530, 76763, 92730, 125490, 46393, 133369, 86953, 74400, 127500, 102496, 91002]
[2024-12-02 18:44:28.384146] user = 127114 Cloud 123/567
[2024-12-02 18:44:28.430816] user = 127114 Local 123/567
[2024-12-02 18:44:28.622008] user = 127114 Local+ 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:31.199559] user = 127114 MPDA- 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6204764502636843
Training on augumented user 61241 0/50 current_auc = 0.6204764502636843
User 61241 AUC after training: 0.6197490452809601
User 61241 does not improve AUC. Reverting changes.
Training on augumented user 5762 1/50 current_auc = 0.6204764502636843
User 5762 AUC after training: 0.6197490452809601
User 5762 does not improve AUC. Reverting changes.
Training on augumented user 33237 2/50 current_auc = 0.6204764502636843
User 33237 AUC after training: 0.6206583015093654
User 33237 improves AUC. Keeping the model.
Training on augumented user 74403 3/50 current_auc = 0.6206583015093654
User 74403 AUC after training: 0.619385342789598
User 74403 does not improve AUC. Reverting changes.
Training on augumented user 125808 4/50 current_auc = 0.6206583015093654
User 125808 AUC after training: 0.6210220040007274
User 125808 improves AUC. Keeping the model.
Training on augumented user 39936 5/50 current_auc = 0.6210220040007274
User 39936 AUC after training: 0.6208401527550464
User 39936 does not improve AUC. Reverting changes.
Training on augumented user 133223 6/50 current_auc = 0.6210220040007274
User 133223 AUC after training: 0.6184760865611929
User 133223 does not improve AUC. Reverting changes.
Training on augumented user 81351 7/50 current_auc = 0.6210220040007274
User 81351 AUC after training: 0.6208401527550463
User 81351 does not improve AUC. Reverting changes.
Training on augumented user 58565 8/50 current_auc = 0.6210220040007274
User 58565 AUC after training: 0.6181123840698308
User 58565 does not improve AUC. Reverting changes.
Training on augumented user 46067 9/50 current_auc = 0.6210220040007274
User 46067 AUC after training: 0.6201127477723223
User 46067 does not improve AUC. Reverting changes.
Training on augumented user 4888 10/50 current_auc = 0.6210220040007274
User 4888 AUC after training: 0.6206583015093653
User 4888 does not improve AUC. Reverting changes.
Training on augumented user 136353 11/50 current_auc = 0.6210220040007274
User 136353 AUC after training: 0.619567194035279
User 136353 does not improve AUC. Reverting changes.
Training on augumented user 64770 12/50 current_auc = 0.6210220040007274
User 64770 AUC after training: 0.618657937806874
User 64770 does not improve AUC. Reverting changes.
Training on augumented user 129529 13/50 current_auc = 0.6210220040007274
User 129529 AUC after training: 0.6212038552464084
User 129529 improves AUC. Keeping the model.
Training on augumented user 102196 14/50 current_auc = 0.6212038552464084
User 102196 AUC after training: 0.6166575741043827
User 102196 does not improve AUC. Reverting changes.
Training on augumented user 136273 15/50 current_auc = 0.6212038552464084
User 136273 AUC after training: 0.6212038552464084
User 136273 does not improve AUC. Reverting changes.
Training on augumented user 132262 16/50 current_auc = 0.6212038552464084
User 132262 AUC after training: 0.619567194035279
User 132262 does not improve AUC. Reverting changes.
Training on augumented user 105690 17/50 current_auc = 0.6212038552464084
User 105690 AUC after training: 0.6195671940352792
User 105690 does not improve AUC. Reverting changes.
Training on augumented user 93969 18/50 current_auc = 0.6212038552464084
User 93969 AUC after training: 0.619385342789598
User 93969 does not improve AUC. Reverting changes.
Training on augumented user 64992 19/50 current_auc = 0.6212038552464084
User 64992 AUC after training: 0.6202945990180032
User 64992 does not improve AUC. Reverting changes.
Training on augumented user 99275 20/50 current_auc = 0.6212038552464084
User 99275 AUC after training: 0.6213857064920895
User 99275 improves AUC. Keeping the model.
Training on augumented user 129607 21/50 current_auc = 0.6213857064920895
User 129607 AUC after training: 0.6202945990180032
User 129607 does not improve AUC. Reverting changes.
Training on augumented user 135455 22/50 current_auc = 0.6213857064920895
User 135455 AUC after training: 0.6217494089834515
User 135455 improves AUC. Keeping the model.
Training on augumented user 115937 23/50 current_auc = 0.6217494089834515
User 115937 AUC after training: 0.6195671940352792
User 115937 does not improve AUC. Reverting changes.
Training on augumented user 15533 24/50 current_auc = 0.6217494089834515
User 15533 AUC after training: 0.6215675577377706
User 15533 does not improve AUC. Reverting changes.
Training on augumented user 64630 25/50 current_auc = 0.6217494089834515
User 64630 AUC after training: 0.6199308965266411
User 64630 does not improve AUC. Reverting changes.
Training on augumented user 91050 26/50 current_auc = 0.6217494089834515
User 91050 AUC after training: 0.6213857064920895
User 91050 does not improve AUC. Reverting changes.
Training on augumented user 43696 27/50 current_auc = 0.6217494089834515
User 43696 AUC after training: 0.6222949627204946
User 43696 improves AUC. Keeping the model.
Training on augumented user 63583 28/50 current_auc = 0.6222949627204946
User 63583 AUC after training: 0.6217494089834514
User 63583 does not improve AUC. Reverting changes.
Training on augumented user 52215 29/50 current_auc = 0.6222949627204946
User 52215 AUC after training: 0.6201127477723223
User 52215 does not improve AUC. Reverting changes.
Training on augumented user 117302 30/50 current_auc = 0.6222949627204946
User 117302 AUC after training: 0.6221131114748136
User 117302 does not improve AUC. Reverting changes.
Training on augumented user 88783 31/50 current_auc = 0.6222949627204946
User 88783 AUC after training: 0.6213857064920895
User 88783 does not improve AUC. Reverting changes.
Training on augumented user 41176 32/50 current_auc = 0.6222949627204946
User 41176 AUC after training: 0.6210220040007274
User 41176 does not improve AUC. Reverting changes.
Training on augumented user 99254 33/50 current_auc = 0.6222949627204946
User 99254 AUC after training: 0.6215675577377705
User 99254 does not improve AUC. Reverting changes.
Training on augumented user 46585 34/50 current_auc = 0.6222949627204946
User 46585 AUC after training: 0.6217494089834515
User 46585 does not improve AUC. Reverting changes.
Training on augumented user 118470 35/50 current_auc = 0.6222949627204946
User 118470 AUC after training: 0.6215675577377705
User 118470 does not improve AUC. Reverting changes.
Training on augumented user 18791 36/50 current_auc = 0.6222949627204946
User 18791 AUC after training: 0.6210220040007274
User 18791 does not improve AUC. Reverting changes.
Training on augumented user 104076 37/50 current_auc = 0.6222949627204946
User 104076 AUC after training: 0.6215675577377705
User 104076 does not improve AUC. Reverting changes.
Training on augumented user 25222 38/50 current_auc = 0.6222949627204946
User 25222 AUC after training: 0.6212038552464084
User 25222 does not improve AUC. Reverting changes.
Training on augumented user 104530 39/50 current_auc = 0.6222949627204946
User 104530 AUC after training: 0.6221131114748136
User 104530 does not improve AUC. Reverting changes.
Training on augumented user 76763 40/50 current_auc = 0.6222949627204946
User 76763 AUC after training: 0.6222949627204947
User 76763 improves AUC. Keeping the model.
Training on augumented user 92730 41/50 current_auc = 0.6222949627204947
User 92730 AUC after training: 0.6217494089834515
User 92730 does not improve AUC. Reverting changes.
Training on augumented user 125490 42/50 current_auc = 0.6222949627204947
User 125490 AUC after training: 0.6219312602291326
User 125490 does not improve AUC. Reverting changes.
Training on augumented user 46393 43/50 current_auc = 0.6222949627204947
User 46393 AUC after training: 0.6217494089834515
User 46393 does not improve AUC. Reverting changes.
Training on augumented user 133369 44/50 current_auc = 0.6222949627204947
User 133369 AUC after training: 0.6219312602291326
User 133369 does not improve AUC. Reverting changes.
Training on augumented user 86953 45/50 current_auc = 0.6222949627204947
User 86953 AUC after training: 0.6212038552464084
User 86953 does not improve AUC. Reverting changes.
Training on augumented user 74400 46/50 current_auc = 0.6222949627204947
User 74400 AUC after training: 0.6215675577377705
User 74400 does not improve AUC. Reverting changes.
Training on augumented user 127500 47/50 current_auc = 0.6222949627204947
User 127500 AUC after training: 0.6221131114748136
User 127500 does not improve AUC. Reverting changes.
Training on augumented user 102496 48/50 current_auc = 0.6222949627204947
User 102496 AUC after training: 0.6219312602291326
User 102496 does not improve AUC. Reverting changes.
Training on augumented user 91002 49/50 current_auc = 0.6222949627204947
User 91002 AUC after training: 0.6221131114748136
User 91002 does not improve AUC. Reverting changes.
[2024-12-02 18:44:58.879321] start test user 127124 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:59.276497] start test user 127124 124/567 recall augumented users by random, augumented_users = [60652, 129240, 15328, 38478, 11919, 136522, 52304, 22329, 110183, 51057, 56297, 8540, 118084, 8779, 53359, 27512, 109310, 127077, 87200, 112411, 10548, 52939, 134104, 50439, 53653, 82745, 54469, 11541, 7923, 126043, 77289, 97004, 27172, 17332, 106301, 101190, 79748, 68519, 136623, 8486, 91366, 71524, 55284, 134813, 87290, 56277, 82422, 128331, 56298, 49932]
[2024-12-02 18:44:59.291124] user = 127124 Cloud 124/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:44:59.296779] user = 127124 Local 124/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:44:59.343844] user = 127124 Local+ 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:45:00.959681] user = 127124 MPDA- 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 60652 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60652 AUC after training: 0.5
User 60652 does not improve AUC. Reverting changes.
Training on augumented user 129240 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129240 AUC after training: 0.5
User 129240 does not improve AUC. Reverting changes.
Training on augumented user 15328 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15328 AUC after training: 0.5
User 15328 does not improve AUC. Reverting changes.
Training on augumented user 38478 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38478 AUC after training: 0.5
User 38478 does not improve AUC. Reverting changes.
Training on augumented user 11919 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11919 AUC after training: 0.5
User 11919 does not improve AUC. Reverting changes.
Training on augumented user 136522 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136522 AUC after training: 0.5
User 136522 does not improve AUC. Reverting changes.
Training on augumented user 52304 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52304 AUC after training: 0.5
User 52304 does not improve AUC. Reverting changes.
Training on augumented user 22329 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22329 AUC after training: 0.5
User 22329 does not improve AUC. Reverting changes.
Training on augumented user 110183 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110183 AUC after training: 0.5
User 110183 does not improve AUC. Reverting changes.
Training on augumented user 51057 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51057 AUC after training: 0.5
User 51057 does not improve AUC. Reverting changes.
Training on augumented user 56297 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56297 AUC after training: 0.5
User 56297 does not improve AUC. Reverting changes.
Training on augumented user 8540 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8540 AUC after training: 0.5
User 8540 does not improve AUC. Reverting changes.
Training on augumented user 118084 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118084 AUC after training: 0.5
User 118084 does not improve AUC. Reverting changes.
Training on augumented user 8779 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8779 AUC after training: 0.5
User 8779 does not improve AUC. Reverting changes.
Training on augumented user 53359 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53359 AUC after training: 0.5
User 53359 does not improve AUC. Reverting changes.
Training on augumented user 27512 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27512 AUC after training: 0.5
User 27512 does not improve AUC. Reverting changes.
Training on augumented user 109310 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109310 AUC after training: 0.5
User 109310 does not improve AUC. Reverting changes.
Training on augumented user 127077 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127077 AUC after training: 0.5
User 127077 does not improve AUC. Reverting changes.
Training on augumented user 87200 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87200 AUC after training: 0.5
User 87200 does not improve AUC. Reverting changes.
Training on augumented user 112411 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112411 AUC after training: 0.5
User 112411 does not improve AUC. Reverting changes.
Training on augumented user 10548 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10548 AUC after training: 0.5
User 10548 does not improve AUC. Reverting changes.
Training on augumented user 52939 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52939 AUC after training: 0.5
User 52939 does not improve AUC. Reverting changes.
Training on augumented user 134104 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134104 AUC after training: 0.5
User 134104 does not improve AUC. Reverting changes.
Training on augumented user 50439 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50439 AUC after training: 0.5
User 50439 does not improve AUC. Reverting changes.
Training on augumented user 53653 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53653 AUC after training: 0.5
User 53653 does not improve AUC. Reverting changes.
Training on augumented user 82745 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82745 AUC after training: 0.5
User 82745 does not improve AUC. Reverting changes.
Training on augumented user 54469 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54469 AUC after training: 0.5
User 54469 does not improve AUC. Reverting changes.
Training on augumented user 11541 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11541 AUC after training: 0.5
User 11541 does not improve AUC. Reverting changes.
Training on augumented user 7923 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7923 AUC after training: 0.5
User 7923 does not improve AUC. Reverting changes.
Training on augumented user 126043 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126043 AUC after training: 0.5
User 126043 does not improve AUC. Reverting changes.
Training on augumented user 77289 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77289 AUC after training: 0.5
User 77289 does not improve AUC. Reverting changes.
Training on augumented user 97004 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97004 AUC after training: 0.5
User 97004 does not improve AUC. Reverting changes.
Training on augumented user 27172 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27172 AUC after training: 0.5
User 27172 does not improve AUC. Reverting changes.
Training on augumented user 17332 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17332 AUC after training: 0.5
User 17332 does not improve AUC. Reverting changes.
Training on augumented user 106301 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106301 AUC after training: 0.5
User 106301 does not improve AUC. Reverting changes.
Training on augumented user 101190 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101190 AUC after training: 0.5
User 101190 does not improve AUC. Reverting changes.
Training on augumented user 79748 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79748 AUC after training: 0.5
User 79748 does not improve AUC. Reverting changes.
Training on augumented user 68519 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68519 AUC after training: 0.5
User 68519 does not improve AUC. Reverting changes.
Training on augumented user 136623 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136623 AUC after training: 0.5
User 136623 does not improve AUC. Reverting changes.
Training on augumented user 8486 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8486 AUC after training: 0.5
User 8486 does not improve AUC. Reverting changes.
Training on augumented user 91366 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91366 AUC after training: 0.5
User 91366 does not improve AUC. Reverting changes.
Training on augumented user 71524 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71524 AUC after training: 0.5
User 71524 does not improve AUC. Reverting changes.
Training on augumented user 55284 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55284 AUC after training: 0.5
User 55284 does not improve AUC. Reverting changes.
Training on augumented user 134813 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134813 AUC after training: 0.5
User 134813 does not improve AUC. Reverting changes.
Training on augumented user 87290 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87290 AUC after training: 0.5
User 87290 does not improve AUC. Reverting changes.
Training on augumented user 56277 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56277 AUC after training: 0.5
User 56277 does not improve AUC. Reverting changes.
Training on augumented user 82422 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82422 AUC after training: 0.5
User 82422 does not improve AUC. Reverting changes.
Training on augumented user 128331 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128331 AUC after training: 0.5
User 128331 does not improve AUC. Reverting changes.
Training on augumented user 56298 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56298 AUC after training: 0.5
User 56298 does not improve AUC. Reverting changes.
Training on augumented user 49932 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49932 AUC after training: 0.5
User 49932 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:45:30.419829] start test user 127138 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:30.876379] start test user 127138 125/567 recall augumented users by random, augumented_users = [54103, 77187, 108292, 65957, 63038, 136785, 15937, 77364, 35275, 105919, 18701, 134412, 100497, 22844, 63410, 64389, 59675, 77306, 86529, 110021, 91728, 108649, 102766, 88458, 48557, 15345, 101734, 75020, 43636, 101853, 79538, 112521, 75724, 61698, 85880, 56330, 68469, 89023, 122776, 10010, 61235, 62978, 25309, 46948, 21148, 29736, 113850, 81763, 93346, 91427]
[2024-12-02 18:45:30.895288] user = 127138 Cloud 125/567
[2024-12-02 18:45:31.081431] user = 127138 Local 125/567
[2024-12-02 18:45:31.344783] user = 127138 Local+ 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:34.293898] user = 127138 MPDA- 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5768527344956899
Training on augumented user 54103 0/50 current_auc = 0.5768527344956899
User 54103 AUC after training: 0.5768732346106369
User 54103 improves AUC. Keeping the model.
Training on augumented user 77187 1/50 current_auc = 0.5768732346106369
User 77187 AUC after training: 0.576775126917676
User 77187 does not improve AUC. Reverting changes.
Training on augumented user 108292 2/50 current_auc = 0.5768732346106369
User 108292 AUC after training: 0.5769867173898082
User 108292 improves AUC. Keeping the model.
Training on augumented user 65957 3/50 current_auc = 0.5769867173898082
User 65957 AUC after training: 0.5768834846681105
User 65957 does not improve AUC. Reverting changes.
Training on augumented user 63038 4/50 current_auc = 0.5769867173898082
User 63038 AUC after training: 0.5771265574596258
User 63038 improves AUC. Keeping the model.
Training on augumented user 136785 5/50 current_auc = 0.5771265574596258
User 136785 AUC after training: 0.5771543790441968
User 136785 improves AUC. Keeping the model.
Training on augumented user 15937 6/50 current_auc = 0.5771543790441968
User 15937 AUC after training: 0.57681612714757
User 15937 does not improve AUC. Reverting changes.
Training on augumented user 77364 7/50 current_auc = 0.5771543790441968
User 77364 AUC after training: 0.5772920226731271
User 77364 improves AUC. Keeping the model.
Training on augumented user 35275 8/50 current_auc = 0.5772920226731271
User 35275 AUC after training: 0.5772568796189321
User 35275 does not improve AUC. Reverting changes.
Training on augumented user 105919 9/50 current_auc = 0.5772920226731271
User 105919 AUC after training: 0.5772210044177748
User 105919 does not improve AUC. Reverting changes.
Training on augumented user 18701 10/50 current_auc = 0.5772920226731271
User 18701 AUC after training: 0.5772429688266466
User 18701 does not improve AUC. Reverting changes.
Training on augumented user 134412 11/50 current_auc = 0.5772920226731271
User 134412 AUC after training: 0.5772700582642553
User 134412 does not improve AUC. Reverting changes.
Training on augumented user 100497 12/50 current_auc = 0.5772920226731271
User 100497 AUC after training: 0.5773527908710059
User 100497 improves AUC. Keeping the model.
Training on augumented user 22844 13/50 current_auc = 0.5773527908710059
User 22844 AUC after training: 0.5769757351853723
User 22844 does not improve AUC. Reverting changes.
Training on augumented user 63410 14/50 current_auc = 0.5773527908710059
User 63410 AUC after training: 0.5770782357601076
User 63410 does not improve AUC. Reverting changes.
Training on augumented user 64389 15/50 current_auc = 0.5773527908710059
User 64389 AUC after training: 0.5771704862773694
User 64389 does not improve AUC. Reverting changes.
Training on augumented user 59675 16/50 current_auc = 0.5773527908710059
User 59675 AUC after training: 0.5771865935105422
User 59675 does not improve AUC. Reverting changes.
Training on augumented user 77306 17/50 current_auc = 0.5773527908710059
User 77306 AUC after training: 0.5772415045327217
User 77306 does not improve AUC. Reverting changes.
Training on augumented user 86529 18/50 current_auc = 0.5773527908710059
User 86529 AUC after training: 0.5772429688266466
User 86529 does not improve AUC. Reverting changes.
Training on augumented user 110021 19/50 current_auc = 0.5773527908710059
User 110021 AUC after training: 0.5765833044135282
User 110021 does not improve AUC. Reverting changes.
Training on augumented user 91728 20/50 current_auc = 0.5773527908710059
User 91728 AUC after training: 0.5772598082067817
User 91728 does not improve AUC. Reverting changes.
Training on augumented user 108649 21/50 current_auc = 0.5773527908710059
User 108649 AUC after training: 0.5771968435680157
User 108649 does not improve AUC. Reverting changes.
Training on augumented user 102766 22/50 current_auc = 0.5773527908710059
User 102766 AUC after training: 0.5772393080918345
User 102766 does not improve AUC. Reverting changes.
Training on augumented user 88458 23/50 current_auc = 0.5773527908710059
User 88458 AUC after training: 0.5772349152100603
User 88458 does not improve AUC. Reverting changes.
Training on augumented user 48557 24/50 current_auc = 0.5773527908710059
User 48557 AUC after training: 0.5772349152100602
User 48557 does not improve AUC. Reverting changes.
Training on augumented user 15345 25/50 current_auc = 0.5773527908710059
User 15345 AUC after training: 0.5771617005138207
User 15345 does not improve AUC. Reverting changes.
Training on augumented user 101734 26/50 current_auc = 0.5773527908710059
User 101734 AUC after training: 0.5772341830630979
User 101734 does not improve AUC. Reverting changes.
Training on augumented user 75020 27/50 current_auc = 0.5773527908710059
User 75020 AUC after training: 0.57727152255818
User 75020 does not improve AUC. Reverting changes.
Training on augumented user 43636 28/50 current_auc = 0.5773527908710059
User 43636 AUC after training: 0.5773652373693666
User 43636 improves AUC. Keeping the model.
Training on augumented user 101853 29/50 current_auc = 0.5773652373693666
User 101853 AUC after training: 0.577236379503985
User 101853 does not improve AUC. Reverting changes.
Training on augumented user 79538 30/50 current_auc = 0.5773652373693666
User 79538 AUC after training: 0.5774340591838318
User 79538 improves AUC. Keeping the model.
Training on augumented user 112521 31/50 current_auc = 0.5774340591838318
User 112521 AUC after training: 0.5774882380590491
User 112521 improves AUC. Keeping the model.
Training on augumented user 75724 32/50 current_auc = 0.5774882380590491
User 75724 AUC after training: 0.5774962916756354
User 75724 improves AUC. Keeping the model.
Training on augumented user 61698 33/50 current_auc = 0.5774962916756354
User 61698 AUC after training: 0.5778030612528792
User 61698 improves AUC. Keeping the model.
Training on augumented user 85880 34/50 current_auc = 0.5778030612528792
User 85880 AUC after training: 0.5776800605631968
User 85880 does not improve AUC. Reverting changes.
Training on augumented user 56330 35/50 current_auc = 0.5778030612528792
User 56330 AUC after training: 0.5779429013226967
User 56330 improves AUC. Keeping the model.
Training on augumented user 68469 36/50 current_auc = 0.5779429013226967
User 68469 AUC after training: 0.5782906711298346
User 68469 improves AUC. Keeping the model.
Training on augumented user 89023 37/50 current_auc = 0.5782906711298346
User 89023 AUC after training: 0.5786860304895282
User 89023 improves AUC. Keeping the model.
Training on augumented user 122776 38/50 current_auc = 0.5786860304895282
User 122776 AUC after training: 0.5785827977678304
User 122776 does not improve AUC. Reverting changes.
Training on augumented user 10010 39/50 current_auc = 0.5786860304895282
User 10010 AUC after training: 0.5786882269304153
User 10010 improves AUC. Keeping the model.
Training on augumented user 61235 40/50 current_auc = 0.5786882269304153
User 61235 AUC after training: 0.5785579047711089
User 61235 does not improve AUC. Reverting changes.
Training on augumented user 62978 41/50 current_auc = 0.5786882269304153
User 62978 AUC after training: 0.5786735839911674
User 62978 does not improve AUC. Reverting changes.
Training on augumented user 25309 42/50 current_auc = 0.5786882269304153
User 25309 AUC after training: 0.5783961002924195
User 25309 does not improve AUC. Reverting changes.
Training on augumented user 46948 43/50 current_auc = 0.5786882269304153
User 46948 AUC after training: 0.5783909752636827
User 46948 does not improve AUC. Reverting changes.
Training on augumented user 21148 44/50 current_auc = 0.5786882269304153
User 21148 AUC after training: 0.5786450302596339
User 21148 does not improve AUC. Reverting changes.
Training on augumented user 29736 45/50 current_auc = 0.5786882269304153
User 29736 AUC after training: 0.5786457624065963
User 29736 does not improve AUC. Reverting changes.
Training on augumented user 113850 46/50 current_auc = 0.5786882269304153
User 113850 AUC after training: 0.5785784048860559
User 113850 does not improve AUC. Reverting changes.
Training on augumented user 81763 47/50 current_auc = 0.5786882269304153
User 81763 AUC after training: 0.5786142800872133
User 81763 does not improve AUC. Reverting changes.
Training on augumented user 93346 48/50 current_auc = 0.5786882269304153
User 93346 AUC after training: 0.5786340480551981
User 93346 does not improve AUC. Reverting changes.
Training on augumented user 91427 49/50 current_auc = 0.5786882269304153
User 91427 AUC after training: 0.5785403332440114
User 91427 does not improve AUC. Reverting changes.
[2024-12-02 18:46:07.143979] start test user 127141 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:07.653211] start test user 127141 126/567 recall augumented users by random, augumented_users = [55026, 113924, 119993, 104115, 2668, 28520, 40641, 91731, 137889, 37255, 31521, 45636, 127137, 98567, 94967, 80697, 123163, 60280, 100128, 107937, 22313, 2930, 59909, 112712, 35838, 4636, 26475, 54609, 41113, 131284, 44956, 137721, 100467, 132041, 60880, 60954, 111875, 70287, 22537, 92808, 84426, 74864, 132293, 114489, 27479, 14700, 32277, 19934, 126129, 87176]
[2024-12-02 18:46:07.669351] user = 127141 Cloud 126/567
[2024-12-02 18:46:07.679147] user = 127141 Local 126/567
[2024-12-02 18:46:07.993870] user = 127141 Local+ 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:11.100646] user = 127141 MPDA- 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4761904761904762
Training on augumented user 55026 0/50 current_auc = 0.4761904761904762
User 55026 AUC after training: 0.4761904761904762
User 55026 does not improve AUC. Reverting changes.
Training on augumented user 113924 1/50 current_auc = 0.4761904761904762
User 113924 AUC after training: 0.4761904761904762
User 113924 does not improve AUC. Reverting changes.
Training on augumented user 119993 2/50 current_auc = 0.4761904761904762
User 119993 AUC after training: 0.4761904761904762
User 119993 does not improve AUC. Reverting changes.
Training on augumented user 104115 3/50 current_auc = 0.4761904761904762
User 104115 AUC after training: 0.4761904761904762
User 104115 does not improve AUC. Reverting changes.
Training on augumented user 2668 4/50 current_auc = 0.4761904761904762
User 2668 AUC after training: 0.4761904761904762
User 2668 does not improve AUC. Reverting changes.
Training on augumented user 28520 5/50 current_auc = 0.4761904761904762
User 28520 AUC after training: 0.4761904761904762
User 28520 does not improve AUC. Reverting changes.
Training on augumented user 40641 6/50 current_auc = 0.4761904761904762
User 40641 AUC after training: 0.4761904761904762
User 40641 does not improve AUC. Reverting changes.
Training on augumented user 91731 7/50 current_auc = 0.4761904761904762
User 91731 AUC after training: 0.4761904761904762
User 91731 does not improve AUC. Reverting changes.
Training on augumented user 137889 8/50 current_auc = 0.4761904761904762
User 137889 AUC after training: 0.4761904761904762
User 137889 does not improve AUC. Reverting changes.
Training on augumented user 37255 9/50 current_auc = 0.4761904761904762
User 37255 AUC after training: 0.4761904761904762
User 37255 does not improve AUC. Reverting changes.
Training on augumented user 31521 10/50 current_auc = 0.4761904761904762
User 31521 AUC after training: 0.4761904761904762
User 31521 does not improve AUC. Reverting changes.
Training on augumented user 45636 11/50 current_auc = 0.4761904761904762
User 45636 AUC after training: 0.4761904761904762
User 45636 does not improve AUC. Reverting changes.
Training on augumented user 127137 12/50 current_auc = 0.4761904761904762
User 127137 AUC after training: 0.4761904761904762
User 127137 does not improve AUC. Reverting changes.
Training on augumented user 98567 13/50 current_auc = 0.4761904761904762
User 98567 AUC after training: 0.4761904761904762
User 98567 does not improve AUC. Reverting changes.
Training on augumented user 94967 14/50 current_auc = 0.4761904761904762
User 94967 AUC after training: 0.4761904761904762
User 94967 does not improve AUC. Reverting changes.
Training on augumented user 80697 15/50 current_auc = 0.4761904761904762
User 80697 AUC after training: 0.4761904761904762
User 80697 does not improve AUC. Reverting changes.
Training on augumented user 123163 16/50 current_auc = 0.4761904761904762
User 123163 AUC after training: 0.4761904761904762
User 123163 does not improve AUC. Reverting changes.
Training on augumented user 60280 17/50 current_auc = 0.4761904761904762
User 60280 AUC after training: 0.4761904761904762
User 60280 does not improve AUC. Reverting changes.
Training on augumented user 100128 18/50 current_auc = 0.4761904761904762
User 100128 AUC after training: 0.4761904761904762
User 100128 does not improve AUC. Reverting changes.
Training on augumented user 107937 19/50 current_auc = 0.4761904761904762
User 107937 AUC after training: 0.4761904761904762
User 107937 does not improve AUC. Reverting changes.
Training on augumented user 22313 20/50 current_auc = 0.4761904761904762
User 22313 AUC after training: 0.4761904761904762
User 22313 does not improve AUC. Reverting changes.
Training on augumented user 2930 21/50 current_auc = 0.4761904761904762
User 2930 AUC after training: 0.4761904761904762
User 2930 does not improve AUC. Reverting changes.
Training on augumented user 59909 22/50 current_auc = 0.4761904761904762
User 59909 AUC after training: 0.4761904761904762
User 59909 does not improve AUC. Reverting changes.
Training on augumented user 112712 23/50 current_auc = 0.4761904761904762
User 112712 AUC after training: 0.4761904761904762
User 112712 does not improve AUC. Reverting changes.
Training on augumented user 35838 24/50 current_auc = 0.4761904761904762
User 35838 AUC after training: 0.4761904761904762
User 35838 does not improve AUC. Reverting changes.
Training on augumented user 4636 25/50 current_auc = 0.4761904761904762
User 4636 AUC after training: 0.4761904761904762
User 4636 does not improve AUC. Reverting changes.
Training on augumented user 26475 26/50 current_auc = 0.4761904761904762
User 26475 AUC after training: 0.4761904761904762
User 26475 does not improve AUC. Reverting changes.
Training on augumented user 54609 27/50 current_auc = 0.4761904761904762
User 54609 AUC after training: 0.4761904761904762
User 54609 does not improve AUC. Reverting changes.
Training on augumented user 41113 28/50 current_auc = 0.4761904761904762
User 41113 AUC after training: 0.4761904761904762
User 41113 does not improve AUC. Reverting changes.
Training on augumented user 131284 29/50 current_auc = 0.4761904761904762
User 131284 AUC after training: 0.4761904761904762
User 131284 does not improve AUC. Reverting changes.
Training on augumented user 44956 30/50 current_auc = 0.4761904761904762
User 44956 AUC after training: 0.4761904761904762
User 44956 does not improve AUC. Reverting changes.
Training on augumented user 137721 31/50 current_auc = 0.4761904761904762
User 137721 AUC after training: 0.4761904761904762
User 137721 does not improve AUC. Reverting changes.
Training on augumented user 100467 32/50 current_auc = 0.4761904761904762
User 100467 AUC after training: 0.4761904761904762
User 100467 does not improve AUC. Reverting changes.
Training on augumented user 132041 33/50 current_auc = 0.4761904761904762
User 132041 AUC after training: 0.4761904761904762
User 132041 does not improve AUC. Reverting changes.
Training on augumented user 60880 34/50 current_auc = 0.4761904761904762
User 60880 AUC after training: 0.4761904761904762
User 60880 does not improve AUC. Reverting changes.
Training on augumented user 60954 35/50 current_auc = 0.4761904761904762
User 60954 AUC after training: 0.4761904761904762
User 60954 does not improve AUC. Reverting changes.
Training on augumented user 111875 36/50 current_auc = 0.4761904761904762
User 111875 AUC after training: 0.4761904761904762
User 111875 does not improve AUC. Reverting changes.
Training on augumented user 70287 37/50 current_auc = 0.4761904761904762
User 70287 AUC after training: 0.4761904761904762
User 70287 does not improve AUC. Reverting changes.
Training on augumented user 22537 38/50 current_auc = 0.4761904761904762
User 22537 AUC after training: 0.4761904761904762
User 22537 does not improve AUC. Reverting changes.
Training on augumented user 92808 39/50 current_auc = 0.4761904761904762
User 92808 AUC after training: 0.4761904761904762
User 92808 does not improve AUC. Reverting changes.
Training on augumented user 84426 40/50 current_auc = 0.4761904761904762
User 84426 AUC after training: 0.5
User 84426 improves AUC. Keeping the model.
Training on augumented user 74864 41/50 current_auc = 0.5
User 74864 AUC after training: 0.4761904761904762
User 74864 does not improve AUC. Reverting changes.
Training on augumented user 132293 42/50 current_auc = 0.5
User 132293 AUC after training: 0.4523809523809524
User 132293 does not improve AUC. Reverting changes.
Training on augumented user 114489 43/50 current_auc = 0.5
User 114489 AUC after training: 0.5
User 114489 does not improve AUC. Reverting changes.
Training on augumented user 27479 44/50 current_auc = 0.5
User 27479 AUC after training: 0.5
User 27479 does not improve AUC. Reverting changes.
Training on augumented user 14700 45/50 current_auc = 0.5
User 14700 AUC after training: 0.4761904761904762
User 14700 does not improve AUC. Reverting changes.
Training on augumented user 32277 46/50 current_auc = 0.5
User 32277 AUC after training: 0.4761904761904762
User 32277 does not improve AUC. Reverting changes.
Training on augumented user 19934 47/50 current_auc = 0.5
User 19934 AUC after training: 0.4523809523809524
User 19934 does not improve AUC. Reverting changes.
Training on augumented user 126129 48/50 current_auc = 0.5
User 126129 AUC after training: 0.4761904761904762
User 126129 does not improve AUC. Reverting changes.
Training on augumented user 87176 49/50 current_auc = 0.5
User 87176 AUC after training: 0.4761904761904762
User 87176 does not improve AUC. Reverting changes.
[2024-12-02 18:46:42.482589] start test user 127154 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:43.086348] start test user 127154 127/567 recall augumented users by random, augumented_users = [22794, 42192, 130868, 134529, 46669, 19294, 98260, 15640, 35966, 129497, 56098, 98042, 126059, 95299, 23898, 77396, 73960, 32546, 120727, 54300, 95967, 52890, 114974, 89295, 79893, 94627, 38628, 73117, 138061, 66072, 99200, 104471, 92192, 74179, 125088, 97134, 108649, 77107, 71013, 113775, 117432, 123512, 100505, 7714, 115817, 80761, 6893, 83411, 108355, 99226]
[2024-12-02 18:46:43.101601] user = 127154 Cloud 127/567
[2024-12-02 18:46:43.111717] user = 127154 Local 127/567
[2024-12-02 18:46:43.218705] user = 127154 Local+ 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:45.549452] user = 127154 MPDA- 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 22794 0/50 current_auc = 0.75
User 22794 AUC after training: 0.75
User 22794 does not improve AUC. Reverting changes.
Training on augumented user 42192 1/50 current_auc = 0.75
User 42192 AUC after training: 0.75
User 42192 does not improve AUC. Reverting changes.
Training on augumented user 130868 2/50 current_auc = 0.75
User 130868 AUC after training: 0.75
User 130868 does not improve AUC. Reverting changes.
Training on augumented user 134529 3/50 current_auc = 0.75
User 134529 AUC after training: 0.75
User 134529 does not improve AUC. Reverting changes.
Training on augumented user 46669 4/50 current_auc = 0.75
User 46669 AUC after training: 0.75
User 46669 does not improve AUC. Reverting changes.
Training on augumented user 19294 5/50 current_auc = 0.75
User 19294 AUC after training: 0.75
User 19294 does not improve AUC. Reverting changes.
Training on augumented user 98260 6/50 current_auc = 0.75
User 98260 AUC after training: 0.75
User 98260 does not improve AUC. Reverting changes.
Training on augumented user 15640 7/50 current_auc = 0.75
User 15640 AUC after training: 0.75
User 15640 does not improve AUC. Reverting changes.
Training on augumented user 35966 8/50 current_auc = 0.75
User 35966 AUC after training: 0.75
User 35966 does not improve AUC. Reverting changes.
Training on augumented user 129497 9/50 current_auc = 0.75
User 129497 AUC after training: 0.75
User 129497 does not improve AUC. Reverting changes.
Training on augumented user 56098 10/50 current_auc = 0.75
User 56098 AUC after training: 0.75
User 56098 does not improve AUC. Reverting changes.
Training on augumented user 98042 11/50 current_auc = 0.75
User 98042 AUC after training: 0.75
User 98042 does not improve AUC. Reverting changes.
Training on augumented user 126059 12/50 current_auc = 0.75
User 126059 AUC after training: 0.75
User 126059 does not improve AUC. Reverting changes.
Training on augumented user 95299 13/50 current_auc = 0.75
User 95299 AUC after training: 0.75
User 95299 does not improve AUC. Reverting changes.
Training on augumented user 23898 14/50 current_auc = 0.75
User 23898 AUC after training: 0.75
User 23898 does not improve AUC. Reverting changes.
Training on augumented user 77396 15/50 current_auc = 0.75
User 77396 AUC after training: 0.75
User 77396 does not improve AUC. Reverting changes.
Training on augumented user 73960 16/50 current_auc = 0.75
User 73960 AUC after training: 0.75
User 73960 does not improve AUC. Reverting changes.
Training on augumented user 32546 17/50 current_auc = 0.75
User 32546 AUC after training: 0.75
User 32546 does not improve AUC. Reverting changes.
Training on augumented user 120727 18/50 current_auc = 0.75
User 120727 AUC after training: 0.75
User 120727 does not improve AUC. Reverting changes.
Training on augumented user 54300 19/50 current_auc = 0.75
User 54300 AUC after training: 0.75
User 54300 does not improve AUC. Reverting changes.
Training on augumented user 95967 20/50 current_auc = 0.75
User 95967 AUC after training: 0.75
User 95967 does not improve AUC. Reverting changes.
Training on augumented user 52890 21/50 current_auc = 0.75
User 52890 AUC after training: 0.75
User 52890 does not improve AUC. Reverting changes.
Training on augumented user 114974 22/50 current_auc = 0.75
User 114974 AUC after training: 0.75
User 114974 does not improve AUC. Reverting changes.
Training on augumented user 89295 23/50 current_auc = 0.75
User 89295 AUC after training: 0.75
User 89295 does not improve AUC. Reverting changes.
Training on augumented user 79893 24/50 current_auc = 0.75
User 79893 AUC after training: 0.75
User 79893 does not improve AUC. Reverting changes.
Training on augumented user 94627 25/50 current_auc = 0.75
User 94627 AUC after training: 0.75
User 94627 does not improve AUC. Reverting changes.
Training on augumented user 38628 26/50 current_auc = 0.75
User 38628 AUC after training: 0.75
User 38628 does not improve AUC. Reverting changes.
Training on augumented user 73117 27/50 current_auc = 0.75
User 73117 AUC after training: 0.75
User 73117 does not improve AUC. Reverting changes.
Training on augumented user 138061 28/50 current_auc = 0.75
User 138061 AUC after training: 0.75
User 138061 does not improve AUC. Reverting changes.
Training on augumented user 66072 29/50 current_auc = 0.75
User 66072 AUC after training: 0.75
User 66072 does not improve AUC. Reverting changes.
Training on augumented user 99200 30/50 current_auc = 0.75
User 99200 AUC after training: 0.75
User 99200 does not improve AUC. Reverting changes.
Training on augumented user 104471 31/50 current_auc = 0.75
User 104471 AUC after training: 0.75
User 104471 does not improve AUC. Reverting changes.
Training on augumented user 92192 32/50 current_auc = 0.75
User 92192 AUC after training: 0.75
User 92192 does not improve AUC. Reverting changes.
Training on augumented user 74179 33/50 current_auc = 0.75
User 74179 AUC after training: 0.75
User 74179 does not improve AUC. Reverting changes.
Training on augumented user 125088 34/50 current_auc = 0.75
User 125088 AUC after training: 0.75
User 125088 does not improve AUC. Reverting changes.
Training on augumented user 97134 35/50 current_auc = 0.75
User 97134 AUC after training: 0.75
User 97134 does not improve AUC. Reverting changes.
Training on augumented user 108649 36/50 current_auc = 0.75
User 108649 AUC after training: 0.75
User 108649 does not improve AUC. Reverting changes.
Training on augumented user 77107 37/50 current_auc = 0.75
User 77107 AUC after training: 0.75
User 77107 does not improve AUC. Reverting changes.
Training on augumented user 71013 38/50 current_auc = 0.75
User 71013 AUC after training: 0.75
User 71013 does not improve AUC. Reverting changes.
Training on augumented user 113775 39/50 current_auc = 0.75
User 113775 AUC after training: 0.75
User 113775 does not improve AUC. Reverting changes.
Training on augumented user 117432 40/50 current_auc = 0.75
User 117432 AUC after training: 0.75
User 117432 does not improve AUC. Reverting changes.
Training on augumented user 123512 41/50 current_auc = 0.75
User 123512 AUC after training: 0.75
User 123512 does not improve AUC. Reverting changes.
Training on augumented user 100505 42/50 current_auc = 0.75
User 100505 AUC after training: 0.75
User 100505 does not improve AUC. Reverting changes.
Training on augumented user 7714 43/50 current_auc = 0.75
User 7714 AUC after training: 0.75
User 7714 does not improve AUC. Reverting changes.
Training on augumented user 115817 44/50 current_auc = 0.75
User 115817 AUC after training: 0.75
User 115817 does not improve AUC. Reverting changes.
Training on augumented user 80761 45/50 current_auc = 0.75
User 80761 AUC after training: 0.75
User 80761 does not improve AUC. Reverting changes.
Training on augumented user 6893 46/50 current_auc = 0.75
User 6893 AUC after training: 0.75
User 6893 does not improve AUC. Reverting changes.
Training on augumented user 83411 47/50 current_auc = 0.75
User 83411 AUC after training: 0.75
User 83411 does not improve AUC. Reverting changes.
Training on augumented user 108355 48/50 current_auc = 0.75
User 108355 AUC after training: 0.75
User 108355 does not improve AUC. Reverting changes.
Training on augumented user 99226 49/50 current_auc = 0.75
User 99226 AUC after training: 0.75
User 99226 does not improve AUC. Reverting changes.
[2024-12-02 18:47:12.572225] start test user 127256 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:13.085035] start test user 127256 128/567 recall augumented users by random, augumented_users = [59168, 37750, 128568, 74688, 130779, 82186, 96581, 22522, 60915, 127525, 59034, 38938, 125638, 54447, 112019, 19314, 49306, 77789, 13392, 76844, 99399, 39061, 51947, 112980, 90632, 70988, 92284, 27844, 119354, 132432, 31720, 12859, 111398, 19207, 79439, 21657, 138152, 105628, 87175, 17138, 8492, 71068, 136996, 30575, 70377, 97869, 137037, 29961, 115494, 15261]
[2024-12-02 18:47:13.102365] user = 127256 Cloud 128/567
[2024-12-02 18:47:13.180035] user = 127256 Local 128/567
[2024-12-02 18:47:13.405796] user = 127256 Local+ 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:15.976995] user = 127256 MPDA- 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5452929465301479
Training on augumented user 59168 0/50 current_auc = 0.5452929465301479
User 59168 AUC after training: 0.5444009204674733
User 59168 does not improve AUC. Reverting changes.
Training on augumented user 37750 1/50 current_auc = 0.5452929465301479
User 37750 AUC after training: 0.5455773606370876
User 37750 improves AUC. Keeping the model.
Training on augumented user 128568 2/50 current_auc = 0.5455773606370876
User 128568 AUC after training: 0.5456355362498707
User 128568 improves AUC. Keeping the model.
Training on augumented user 74688 3/50 current_auc = 0.5456355362498707
User 74688 AUC after training: 0.5474195883752198
User 74688 improves AUC. Keeping the model.
Training on augumented user 130779 4/50 current_auc = 0.5474195883752198
User 130779 AUC after training: 0.5475876512565933
User 130779 improves AUC. Keeping the model.
Training on augumented user 82186 5/50 current_auc = 0.5475876512565933
User 82186 AUC after training: 0.5475747233426415
User 82186 does not improve AUC. Reverting changes.
Training on augumented user 96581 6/50 current_auc = 0.5475876512565933
User 96581 AUC after training: 0.5469800393008584
User 96581 does not improve AUC. Reverting changes.
Training on augumented user 22522 7/50 current_auc = 0.5475876512565933
User 22522 AUC after training: 0.547406660461268
User 22522 does not improve AUC. Reverting changes.
Training on augumented user 60915 8/50 current_auc = 0.5475876512565933
User 60915 AUC after training: 0.5467925845485573
User 60915 does not improve AUC. Reverting changes.
Training on augumented user 127525 9/50 current_auc = 0.5475876512565933
User 127525 AUC after training: 0.5474454442031234
User 127525 does not improve AUC. Reverting changes.
Training on augumented user 59034 10/50 current_auc = 0.5475876512565933
User 59034 AUC after training: 0.54727738132175
User 59034 does not improve AUC. Reverting changes.
Training on augumented user 38938 11/50 current_auc = 0.5475876512565933
User 38938 AUC after training: 0.5467085531078706
User 38938 does not improve AUC. Reverting changes.
Training on augumented user 125638 12/50 current_auc = 0.5475876512565933
User 125638 AUC after training: 0.5476910745682076
User 125638 improves AUC. Keeping the model.
Training on augumented user 54447 13/50 current_auc = 0.5476910745682076
User 54447 AUC after training: 0.5473678767194126
User 54447 does not improve AUC. Reverting changes.
Training on augumented user 112019 14/50 current_auc = 0.5476910745682076
User 112019 AUC after training: 0.5475230116868343
User 112019 does not improve AUC. Reverting changes.
Training on augumented user 19314 15/50 current_auc = 0.5476910745682076
User 19314 AUC after training: 0.5477169303961112
User 19314 improves AUC. Keeping the model.
Training on augumented user 49306 16/50 current_auc = 0.5477169303961112
User 49306 AUC after training: 0.5480336642879305
User 49306 improves AUC. Keeping the model.
Training on augumented user 77789 17/50 current_auc = 0.5480336642879305
User 77789 AUC after training: 0.5477944978798222
User 77789 does not improve AUC. Reverting changes.
Training on augumented user 13392 18/50 current_auc = 0.5480336642879305
User 13392 AUC after training: 0.5483503981797497
User 13392 improves AUC. Keeping the model.
Training on augumented user 76844 19/50 current_auc = 0.5483503981797497
User 76844 AUC after training: 0.5475230116868341
User 76844 does not improve AUC. Reverting changes.
Training on augumented user 99399 20/50 current_auc = 0.5483503981797497
User 99399 AUC after training: 0.5477169303961112
User 99399 does not improve AUC. Reverting changes.
Training on augumented user 39061 21/50 current_auc = 0.5483503981797497
User 39061 AUC after training: 0.5463982831730272
User 39061 does not improve AUC. Reverting changes.
Training on augumented user 51947 22/50 current_auc = 0.5483503981797497
User 51947 AUC after training: 0.5478785293205088
User 51947 does not improve AUC. Reverting changes.
Training on augumented user 112980 23/50 current_auc = 0.5483503981797497
User 112980 AUC after training: 0.5470834626124729
User 112980 does not improve AUC. Reverting changes.
Training on augumented user 90632 24/50 current_auc = 0.5483503981797497
User 90632 AUC after training: 0.5477944978798222
User 90632 does not improve AUC. Reverting changes.
Training on augumented user 70988 25/50 current_auc = 0.5483503981797497
User 70988 AUC after training: 0.5477169303961112
User 70988 does not improve AUC. Reverting changes.
Training on augumented user 92284 26/50 current_auc = 0.5483503981797497
User 92284 AUC after training: 0.5481629434274485
User 92284 does not improve AUC. Reverting changes.
Training on augumented user 27844 27/50 current_auc = 0.5483503981797497
User 27844 AUC after training: 0.5477557141379666
User 27844 does not improve AUC. Reverting changes.
Training on augumented user 119354 28/50 current_auc = 0.5483503981797497
User 119354 AUC after training: 0.5481176957286172
User 119354 does not improve AUC. Reverting changes.
Training on augumented user 132432 29/50 current_auc = 0.5483503981797497
User 132432 AUC after training: 0.5471351742682802
User 132432 does not improve AUC. Reverting changes.
Training on augumented user 31720 30/50 current_auc = 0.5483503981797497
User 31720 AUC after training: 0.5488416589099183
User 31720 improves AUC. Keeping the model.
Training on augumented user 12859 31/50 current_auc = 0.5488416589099183
User 12859 AUC after training: 0.5481564794704726
User 12859 does not improve AUC. Reverting changes.
Training on augumented user 111398 32/50 current_auc = 0.5488416589099183
User 111398 AUC after training: 0.5492036405005688
User 111398 improves AUC. Keeping the model.
Training on augumented user 19207 33/50 current_auc = 0.5492036405005688
User 19207 AUC after training: 0.5490872892750026
User 19207 does not improve AUC. Reverting changes.
Training on augumented user 79439 34/50 current_auc = 0.5492036405005688
User 79439 AUC after training: 0.5489838659633881
User 79439 does not improve AUC. Reverting changes.
Training on augumented user 21657 35/50 current_auc = 0.5492036405005688
User 21657 AUC after training: 0.5498241803702555
User 21657 improves AUC. Keeping the model.
Training on augumented user 138152 36/50 current_auc = 0.5498241803702555
User 138152 AUC after training: 0.5493070638121833
User 138152 does not improve AUC. Reverting changes.
Training on augumented user 105628 37/50 current_auc = 0.5498241803702555
User 105628 AUC after training: 0.5494880546075086
User 105628 does not improve AUC. Reverting changes.
Training on augumented user 87175 38/50 current_auc = 0.5498241803702555
User 87175 AUC after training: 0.5499534595097735
User 87175 improves AUC. Keeping the model.
Training on augumented user 17138 39/50 current_auc = 0.5499534595097735
User 17138 AUC after training: 0.5496302616609784
User 17138 does not improve AUC. Reverting changes.
Training on augumented user 8492 40/50 current_auc = 0.5499534595097735
User 8492 AUC after training: 0.5500827386492917
User 8492 improves AUC. Keeping the model.
Training on augumented user 71068 41/50 current_auc = 0.5500827386492917
User 71068 AUC after training: 0.5501603061330024
User 71068 improves AUC. Keeping the model.
Training on augumented user 136996 42/50 current_auc = 0.5501603061330024
User 136996 AUC after training: 0.5488287309959665
User 136996 does not improve AUC. Reverting changes.
Training on augumented user 30575 43/50 current_auc = 0.5501603061330024
User 30575 AUC after training: 0.5494298789947254
User 30575 does not improve AUC. Reverting changes.
Training on augumented user 70377 44/50 current_auc = 0.5501603061330024
User 70377 AUC after training: 0.550121522391147
User 70377 does not improve AUC. Reverting changes.
Training on augumented user 97869 45/50 current_auc = 0.5501603061330024
User 97869 AUC after training: 0.5495397662633157
User 97869 does not improve AUC. Reverting changes.
Training on augumented user 137037 46/50 current_auc = 0.5501603061330024
User 137037 AUC after training: 0.5468507601613404
User 137037 does not improve AUC. Reverting changes.
Training on augumented user 29961 47/50 current_auc = 0.5501603061330024
User 29961 AUC after training: 0.5497724687144483
User 29961 does not improve AUC. Reverting changes.
Training on augumented user 115494 48/50 current_auc = 0.5501603061330024
User 115494 AUC after training: 0.5496690454028338
User 115494 does not improve AUC. Reverting changes.
Training on augumented user 15261 49/50 current_auc = 0.5501603061330024
User 15261 AUC after training: 0.547600579170545
User 15261 does not improve AUC. Reverting changes.
[2024-12-02 18:47:51.951664] start test user 127301 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:52.467839] start test user 127301 129/567 recall augumented users by random, augumented_users = [100544, 7701, 69991, 22440, 67582, 57964, 31966, 78000, 108899, 42271, 11325, 20003, 58882, 115605, 130536, 67888, 79817, 115345, 111958, 97602, 42263, 51133, 54918, 14168, 61186, 96549, 7327, 89389, 117033, 117898, 32178, 71848, 108030, 132143, 32523, 57749, 111265, 124381, 73851, 16901, 47382, 135584, 82367, 31965, 1359, 69198, 50750, 101529, 122317, 76714]
[2024-12-02 18:47:52.486024] user = 127301 Cloud 129/567
[2024-12-02 18:47:52.524018] user = 127301 Local 129/567
[2024-12-02 18:47:52.683386] user = 127301 Local+ 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:55.246872] user = 127301 MPDA- 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 100544 0/50 current_auc = 0.5
User 100544 AUC after training: 0.5022556390977444
User 100544 improves AUC. Keeping the model.
Training on augumented user 7701 1/50 current_auc = 0.5022556390977444
User 7701 AUC after training: 0.49699248120300754
User 7701 does not improve AUC. Reverting changes.
Training on augumented user 69991 2/50 current_auc = 0.5022556390977444
User 69991 AUC after training: 0.49624060150375937
User 69991 does not improve AUC. Reverting changes.
Training on augumented user 22440 3/50 current_auc = 0.5022556390977444
User 22440 AUC after training: 0.5045112781954888
User 22440 improves AUC. Keeping the model.
Training on augumented user 67582 4/50 current_auc = 0.5045112781954888
User 67582 AUC after training: 0.5026315789473683
User 67582 does not improve AUC. Reverting changes.
Training on augumented user 57964 5/50 current_auc = 0.5045112781954888
User 57964 AUC after training: 0.4977443609022556
User 57964 does not improve AUC. Reverting changes.
Training on augumented user 31966 6/50 current_auc = 0.5045112781954888
User 31966 AUC after training: 0.5007518796992482
User 31966 does not improve AUC. Reverting changes.
Training on augumented user 78000 7/50 current_auc = 0.5045112781954888
User 78000 AUC after training: 0.4860902255639098
User 78000 does not improve AUC. Reverting changes.
Training on augumented user 108899 8/50 current_auc = 0.5045112781954888
User 108899 AUC after training: 0.5007518796992482
User 108899 does not improve AUC. Reverting changes.
Training on augumented user 42271 9/50 current_auc = 0.5045112781954888
User 42271 AUC after training: 0.5052631578947369
User 42271 improves AUC. Keeping the model.
Training on augumented user 11325 10/50 current_auc = 0.5052631578947369
User 11325 AUC after training: 0.49699248120300754
User 11325 does not improve AUC. Reverting changes.
Training on augumented user 20003 11/50 current_auc = 0.5052631578947369
User 20003 AUC after training: 0.5015037593984962
User 20003 does not improve AUC. Reverting changes.
Training on augumented user 58882 12/50 current_auc = 0.5052631578947369
User 58882 AUC after training: 0.5030075187969925
User 58882 does not improve AUC. Reverting changes.
Training on augumented user 115605 13/50 current_auc = 0.5052631578947369
User 115605 AUC after training: 0.5015037593984962
User 115605 does not improve AUC. Reverting changes.
Training on augumented user 130536 14/50 current_auc = 0.5052631578947369
User 130536 AUC after training: 0.5030075187969925
User 130536 does not improve AUC. Reverting changes.
Training on augumented user 67888 15/50 current_auc = 0.5052631578947369
User 67888 AUC after training: 0.5022556390977443
User 67888 does not improve AUC. Reverting changes.
Training on augumented user 79817 16/50 current_auc = 0.5052631578947369
User 79817 AUC after training: 0.5052631578947369
User 79817 does not improve AUC. Reverting changes.
Training on augumented user 115345 17/50 current_auc = 0.5052631578947369
User 115345 AUC after training: 0.4992481203007519
User 115345 does not improve AUC. Reverting changes.
Training on augumented user 111958 18/50 current_auc = 0.5052631578947369
User 111958 AUC after training: 0.5015037593984963
User 111958 does not improve AUC. Reverting changes.
Training on augumented user 97602 19/50 current_auc = 0.5052631578947369
User 97602 AUC after training: 0.4932330827067669
User 97602 does not improve AUC. Reverting changes.
Training on augumented user 42263 20/50 current_auc = 0.5052631578947369
User 42263 AUC after training: 0.5075187969924813
User 42263 improves AUC. Keeping the model.
Training on augumented user 51133 21/50 current_auc = 0.5075187969924813
User 51133 AUC after training: 0.5030075187969925
User 51133 does not improve AUC. Reverting changes.
Training on augumented user 54918 22/50 current_auc = 0.5075187969924813
User 54918 AUC after training: 0.5052631578947369
User 54918 does not improve AUC. Reverting changes.
Training on augumented user 14168 23/50 current_auc = 0.5075187969924813
User 14168 AUC after training: 0.5067669172932331
User 14168 does not improve AUC. Reverting changes.
Training on augumented user 61186 24/50 current_auc = 0.5075187969924813
User 61186 AUC after training: 0.48571428571428577
User 61186 does not improve AUC. Reverting changes.
Training on augumented user 96549 25/50 current_auc = 0.5075187969924813
User 96549 AUC after training: 0.5015037593984963
User 96549 does not improve AUC. Reverting changes.
Training on augumented user 7327 26/50 current_auc = 0.5075187969924813
User 7327 AUC after training: 0.5067669172932331
User 7327 does not improve AUC. Reverting changes.
Training on augumented user 89389 27/50 current_auc = 0.5075187969924813
User 89389 AUC after training: 0.5
User 89389 does not improve AUC. Reverting changes.
Training on augumented user 117033 28/50 current_auc = 0.5075187969924813
User 117033 AUC after training: 0.49548872180451126
User 117033 does not improve AUC. Reverting changes.
Training on augumented user 117898 29/50 current_auc = 0.5075187969924813
User 117898 AUC after training: 0.5067669172932331
User 117898 does not improve AUC. Reverting changes.
Training on augumented user 32178 30/50 current_auc = 0.5075187969924813
User 32178 AUC after training: 0.5022556390977444
User 32178 does not improve AUC. Reverting changes.
Training on augumented user 71848 31/50 current_auc = 0.5075187969924813
User 71848 AUC after training: 0.5075187969924813
User 71848 does not improve AUC. Reverting changes.
Training on augumented user 108030 32/50 current_auc = 0.5075187969924813
User 108030 AUC after training: 0.5007518796992481
User 108030 does not improve AUC. Reverting changes.
Training on augumented user 132143 33/50 current_auc = 0.5075187969924813
User 132143 AUC after training: 0.5071428571428571
User 132143 does not improve AUC. Reverting changes.
Training on augumented user 32523 34/50 current_auc = 0.5075187969924813
User 32523 AUC after training: 0.5082706766917293
User 32523 improves AUC. Keeping the model.
Training on augumented user 57749 35/50 current_auc = 0.5082706766917293
User 57749 AUC after training: 0.5045112781954888
User 57749 does not improve AUC. Reverting changes.
Training on augumented user 111265 36/50 current_auc = 0.5082706766917293
User 111265 AUC after training: 0.5060150375939849
User 111265 does not improve AUC. Reverting changes.
Training on augumented user 124381 37/50 current_auc = 0.5082706766917293
User 124381 AUC after training: 0.5037593984962405
User 124381 does not improve AUC. Reverting changes.
Training on augumented user 73851 38/50 current_auc = 0.5082706766917293
User 73851 AUC after training: 0.5060150375939849
User 73851 does not improve AUC. Reverting changes.
Training on augumented user 16901 39/50 current_auc = 0.5082706766917293
User 16901 AUC after training: 0.5045112781954888
User 16901 does not improve AUC. Reverting changes.
Training on augumented user 47382 40/50 current_auc = 0.5082706766917293
User 47382 AUC after training: 0.5037593984962406
User 47382 does not improve AUC. Reverting changes.
Training on augumented user 135584 41/50 current_auc = 0.5082706766917293
User 135584 AUC after training: 0.5075187969924813
User 135584 does not improve AUC. Reverting changes.
Training on augumented user 82367 42/50 current_auc = 0.5082706766917293
User 82367 AUC after training: 0.5112781954887218
User 82367 improves AUC. Keeping the model.
Training on augumented user 31965 43/50 current_auc = 0.5112781954887218
User 31965 AUC after training: 0.5018796992481204
User 31965 does not improve AUC. Reverting changes.
Training on augumented user 1359 44/50 current_auc = 0.5112781954887218
User 1359 AUC after training: 0.5112781954887218
User 1359 does not improve AUC. Reverting changes.
Training on augumented user 69198 45/50 current_auc = 0.5112781954887218
User 69198 AUC after training: 0.5067669172932331
User 69198 does not improve AUC. Reverting changes.
Training on augumented user 50750 46/50 current_auc = 0.5112781954887218
User 50750 AUC after training: 0.5101503759398496
User 50750 does not improve AUC. Reverting changes.
Training on augumented user 101529 47/50 current_auc = 0.5112781954887218
User 101529 AUC after training: 0.5048872180451128
User 101529 does not improve AUC. Reverting changes.
Training on augumented user 122317 48/50 current_auc = 0.5112781954887218
User 122317 AUC after training: 0.5105263157894737
User 122317 does not improve AUC. Reverting changes.
Training on augumented user 76714 49/50 current_auc = 0.5112781954887218
User 76714 AUC after training: 0.5105263157894737
User 76714 does not improve AUC. Reverting changes.
[2024-12-02 18:48:28.584092] start test user 127303 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:29.213191] start test user 127303 130/567 recall augumented users by random, augumented_users = [57831, 37225, 81999, 109526, 31437, 48702, 19867, 138244, 84028, 130239, 133395, 5598, 122109, 552, 102507, 130626, 113366, 129982, 36623, 83633, 51133, 132714, 89949, 61366, 18367, 64845, 109486, 116630, 87783, 115125, 61821, 77817, 10497, 46635, 21321, 25921, 56804, 47739, 98185, 75258, 34804, 105189, 113262, 14877, 81533, 48264, 17664, 35516, 85516, 43400]
[2024-12-02 18:48:29.227850] user = 127303 Cloud 130/567
[2024-12-02 18:48:29.247272] user = 127303 Local 130/567
[2024-12-02 18:48:29.300373] user = 127303 Local+ 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:31.706954] user = 127303 MPDA- 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5958333333333334
Training on augumented user 57831 0/50 current_auc = 0.5958333333333334
User 57831 AUC after training: 0.5959595959595959
User 57831 improves AUC. Keeping the model.
Training on augumented user 37225 1/50 current_auc = 0.5959595959595959
User 37225 AUC after training: 0.5962121212121213
User 37225 improves AUC. Keeping the model.
Training on augumented user 81999 2/50 current_auc = 0.5962121212121213
User 81999 AUC after training: 0.5965909090909092
User 81999 improves AUC. Keeping the model.
Training on augumented user 109526 3/50 current_auc = 0.5965909090909092
User 109526 AUC after training: 0.5965909090909092
User 109526 does not improve AUC. Reverting changes.
Training on augumented user 31437 4/50 current_auc = 0.5965909090909092
User 31437 AUC after training: 0.5963383838383839
User 31437 does not improve AUC. Reverting changes.
Training on augumented user 48702 5/50 current_auc = 0.5965909090909092
User 48702 AUC after training: 0.5968434343434343
User 48702 improves AUC. Keeping the model.
Training on augumented user 19867 6/50 current_auc = 0.5968434343434343
User 19867 AUC after training: 0.5970959595959596
User 19867 improves AUC. Keeping the model.
Training on augumented user 138244 7/50 current_auc = 0.5970959595959596
User 138244 AUC after training: 0.5977272727272728
User 138244 improves AUC. Keeping the model.
Training on augumented user 84028 8/50 current_auc = 0.5977272727272728
User 84028 AUC after training: 0.5977272727272728
User 84028 does not improve AUC. Reverting changes.
Training on augumented user 130239 9/50 current_auc = 0.5977272727272728
User 130239 AUC after training: 0.5979797979797981
User 130239 improves AUC. Keeping the model.
Training on augumented user 133395 10/50 current_auc = 0.5979797979797981
User 133395 AUC after training: 0.5983585858585859
User 133395 improves AUC. Keeping the model.
Training on augumented user 5598 11/50 current_auc = 0.5983585858585859
User 5598 AUC after training: 0.5983585858585859
User 5598 does not improve AUC. Reverting changes.
Training on augumented user 122109 12/50 current_auc = 0.5983585858585859
User 122109 AUC after training: 0.5974747474747475
User 122109 does not improve AUC. Reverting changes.
Training on augumented user 552 13/50 current_auc = 0.5983585858585859
User 552 AUC after training: 0.5984848484848485
User 552 improves AUC. Keeping the model.
Training on augumented user 102507 14/50 current_auc = 0.5984848484848485
User 102507 AUC after training: 0.5996212121212121
User 102507 improves AUC. Keeping the model.
Training on augumented user 130626 15/50 current_auc = 0.5996212121212121
User 130626 AUC after training: 0.5996843434343435
User 130626 improves AUC. Keeping the model.
Training on augumented user 113366 16/50 current_auc = 0.5996843434343435
User 113366 AUC after training: 0.5974747474747475
User 113366 does not improve AUC. Reverting changes.
Training on augumented user 129982 17/50 current_auc = 0.5996843434343435
User 129982 AUC after training: 0.5994949494949495
User 129982 does not improve AUC. Reverting changes.
Training on augumented user 36623 18/50 current_auc = 0.5996843434343435
User 36623 AUC after training: 0.5993055555555556
User 36623 does not improve AUC. Reverting changes.
Training on augumented user 83633 19/50 current_auc = 0.5996843434343435
User 83633 AUC after training: 0.5997474747474748
User 83633 improves AUC. Keeping the model.
Training on augumented user 51133 20/50 current_auc = 0.5997474747474748
User 51133 AUC after training: 0.5994949494949495
User 51133 does not improve AUC. Reverting changes.
Training on augumented user 132714 21/50 current_auc = 0.5997474747474748
User 132714 AUC after training: 0.5987373737373738
User 132714 does not improve AUC. Reverting changes.
Training on augumented user 89949 22/50 current_auc = 0.5997474747474748
User 89949 AUC after training: 0.5987373737373738
User 89949 does not improve AUC. Reverting changes.
Training on augumented user 61366 23/50 current_auc = 0.5997474747474748
User 61366 AUC after training: 0.5997474747474748
User 61366 does not improve AUC. Reverting changes.
Training on augumented user 18367 24/50 current_auc = 0.5997474747474748
User 18367 AUC after training: 0.5988636363636363
User 18367 does not improve AUC. Reverting changes.
Training on augumented user 64845 25/50 current_auc = 0.5997474747474748
User 64845 AUC after training: 0.5996212121212121
User 64845 does not improve AUC. Reverting changes.
Training on augumented user 109486 26/50 current_auc = 0.5997474747474748
User 109486 AUC after training: 0.5991161616161617
User 109486 does not improve AUC. Reverting changes.
Training on augumented user 116630 27/50 current_auc = 0.5997474747474748
User 116630 AUC after training: 0.5983585858585859
User 116630 does not improve AUC. Reverting changes.
Training on augumented user 87783 28/50 current_auc = 0.5997474747474748
User 87783 AUC after training: 0.5998737373737374
User 87783 improves AUC. Keeping the model.
Training on augumented user 115125 29/50 current_auc = 0.5998737373737374
User 115125 AUC after training: 0.5981060606060606
User 115125 does not improve AUC. Reverting changes.
Training on augumented user 61821 30/50 current_auc = 0.5998737373737374
User 61821 AUC after training: 0.5968434343434343
User 61821 does not improve AUC. Reverting changes.
Training on augumented user 77817 31/50 current_auc = 0.5998737373737374
User 77817 AUC after training: 0.5994949494949495
User 77817 does not improve AUC. Reverting changes.
Training on augumented user 10497 32/50 current_auc = 0.5998737373737374
User 10497 AUC after training: 0.5987373737373738
User 10497 does not improve AUC. Reverting changes.
Training on augumented user 46635 33/50 current_auc = 0.5998737373737374
User 46635 AUC after training: 0.5992424242424244
User 46635 does not improve AUC. Reverting changes.
Training on augumented user 21321 34/50 current_auc = 0.5998737373737374
User 21321 AUC after training: 0.6001262626262627
User 21321 improves AUC. Keeping the model.
Training on augumented user 25921 35/50 current_auc = 0.6001262626262627
User 25921 AUC after training: 0.6002525252525253
User 25921 improves AUC. Keeping the model.
Training on augumented user 56804 36/50 current_auc = 0.6002525252525253
User 56804 AUC after training: 0.5998737373737374
User 56804 does not improve AUC. Reverting changes.
Training on augumented user 47739 37/50 current_auc = 0.6002525252525253
User 47739 AUC after training: 0.5991161616161617
User 47739 does not improve AUC. Reverting changes.
Training on augumented user 98185 38/50 current_auc = 0.6002525252525253
User 98185 AUC after training: 0.5989898989898991
User 98185 does not improve AUC. Reverting changes.
Training on augumented user 75258 39/50 current_auc = 0.6002525252525253
User 75258 AUC after training: 0.5991161616161617
User 75258 does not improve AUC. Reverting changes.
Training on augumented user 34804 40/50 current_auc = 0.6002525252525253
User 34804 AUC after training: 0.6001262626262627
User 34804 does not improve AUC. Reverting changes.
Training on augumented user 105189 41/50 current_auc = 0.6002525252525253
User 105189 AUC after training: 0.5993686868686869
User 105189 does not improve AUC. Reverting changes.
Training on augumented user 113262 42/50 current_auc = 0.6002525252525253
User 113262 AUC after training: 0.5993686868686869
User 113262 does not improve AUC. Reverting changes.
Training on augumented user 14877 43/50 current_auc = 0.6002525252525253
User 14877 AUC after training: 0.5998737373737374
User 14877 does not improve AUC. Reverting changes.
Training on augumented user 81533 44/50 current_auc = 0.6002525252525253
User 81533 AUC after training: 0.6002525252525253
User 81533 does not improve AUC. Reverting changes.
Training on augumented user 48264 45/50 current_auc = 0.6002525252525253
User 48264 AUC after training: 0.5994949494949495
User 48264 does not improve AUC. Reverting changes.
Training on augumented user 17664 46/50 current_auc = 0.6002525252525253
User 17664 AUC after training: 0.5992424242424244
User 17664 does not improve AUC. Reverting changes.
Training on augumented user 35516 47/50 current_auc = 0.6002525252525253
User 35516 AUC after training: 0.5993686868686869
User 35516 does not improve AUC. Reverting changes.
Training on augumented user 85516 48/50 current_auc = 0.6002525252525253
User 85516 AUC after training: 0.6005050505050505
User 85516 improves AUC. Keeping the model.
Training on augumented user 43400 49/50 current_auc = 0.6005050505050505
User 43400 AUC after training: 0.5989898989898991
User 43400 does not improve AUC. Reverting changes.
[2024-12-02 18:49:01.872910] start test user 127323 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:02.319330] start test user 127323 131/567 recall augumented users by random, augumented_users = [39360, 46815, 1790, 116750, 42748, 18114, 101847, 74825, 123914, 122083, 135678, 62477, 89991, 40446, 31797, 55589, 18747, 21423, 124915, 61491, 94693, 105469, 61049, 121847, 31003, 86890, 9123, 93515, 63293, 38354, 118310, 98864, 87645, 124686, 129224, 10162, 64918, 628, 55921, 116261, 100032, 11953, 51846, 134697, 88872, 97332, 1227, 17901, 115694, 86921]
[2024-12-02 18:49:02.333660] user = 127323 Cloud 131/567
[2024-12-02 18:49:02.343975] user = 127323 Local 131/567
[2024-12-02 18:49:02.373453] user = 127323 Local+ 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:04.681598] user = 127323 MPDA- 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 39360 0/50 current_auc = 0.25
User 39360 AUC after training: 0.25
User 39360 does not improve AUC. Reverting changes.
Training on augumented user 46815 1/50 current_auc = 0.25
User 46815 AUC after training: 0.25
User 46815 does not improve AUC. Reverting changes.
Training on augumented user 1790 2/50 current_auc = 0.25
User 1790 AUC after training: 0.25
User 1790 does not improve AUC. Reverting changes.
Training on augumented user 116750 3/50 current_auc = 0.25
User 116750 AUC after training: 0.25
User 116750 does not improve AUC. Reverting changes.
Training on augumented user 42748 4/50 current_auc = 0.25
User 42748 AUC after training: 0.25
User 42748 does not improve AUC. Reverting changes.
Training on augumented user 18114 5/50 current_auc = 0.25
User 18114 AUC after training: 0.25
User 18114 does not improve AUC. Reverting changes.
Training on augumented user 101847 6/50 current_auc = 0.25
User 101847 AUC after training: 0.25
User 101847 does not improve AUC. Reverting changes.
Training on augumented user 74825 7/50 current_auc = 0.25
User 74825 AUC after training: 0.25
User 74825 does not improve AUC. Reverting changes.
Training on augumented user 123914 8/50 current_auc = 0.25
User 123914 AUC after training: 0.25
User 123914 does not improve AUC. Reverting changes.
Training on augumented user 122083 9/50 current_auc = 0.25
User 122083 AUC after training: 0.25
User 122083 does not improve AUC. Reverting changes.
Training on augumented user 135678 10/50 current_auc = 0.25
User 135678 AUC after training: 0.25
User 135678 does not improve AUC. Reverting changes.
Training on augumented user 62477 11/50 current_auc = 0.25
User 62477 AUC after training: 0.25
User 62477 does not improve AUC. Reverting changes.
Training on augumented user 89991 12/50 current_auc = 0.25
User 89991 AUC after training: 0.25
User 89991 does not improve AUC. Reverting changes.
Training on augumented user 40446 13/50 current_auc = 0.25
User 40446 AUC after training: 0.25
User 40446 does not improve AUC. Reverting changes.
Training on augumented user 31797 14/50 current_auc = 0.25
User 31797 AUC after training: 0.25
User 31797 does not improve AUC. Reverting changes.
Training on augumented user 55589 15/50 current_auc = 0.25
User 55589 AUC after training: 0.25
User 55589 does not improve AUC. Reverting changes.
Training on augumented user 18747 16/50 current_auc = 0.25
User 18747 AUC after training: 0.25
User 18747 does not improve AUC. Reverting changes.
Training on augumented user 21423 17/50 current_auc = 0.25
User 21423 AUC after training: 0.25
User 21423 does not improve AUC. Reverting changes.
Training on augumented user 124915 18/50 current_auc = 0.25
User 124915 AUC after training: 0.25
User 124915 does not improve AUC. Reverting changes.
Training on augumented user 61491 19/50 current_auc = 0.25
User 61491 AUC after training: 0.25
User 61491 does not improve AUC. Reverting changes.
Training on augumented user 94693 20/50 current_auc = 0.25
User 94693 AUC after training: 0.25
User 94693 does not improve AUC. Reverting changes.
Training on augumented user 105469 21/50 current_auc = 0.25
User 105469 AUC after training: 0.25
User 105469 does not improve AUC. Reverting changes.
Training on augumented user 61049 22/50 current_auc = 0.25
User 61049 AUC after training: 0.25
User 61049 does not improve AUC. Reverting changes.
Training on augumented user 121847 23/50 current_auc = 0.25
User 121847 AUC after training: 0.25
User 121847 does not improve AUC. Reverting changes.
Training on augumented user 31003 24/50 current_auc = 0.25
User 31003 AUC after training: 0.25
User 31003 does not improve AUC. Reverting changes.
Training on augumented user 86890 25/50 current_auc = 0.25
User 86890 AUC after training: 0.25
User 86890 does not improve AUC. Reverting changes.
Training on augumented user 9123 26/50 current_auc = 0.25
User 9123 AUC after training: 0.25
User 9123 does not improve AUC. Reverting changes.
Training on augumented user 93515 27/50 current_auc = 0.25
User 93515 AUC after training: 0.25
User 93515 does not improve AUC. Reverting changes.
Training on augumented user 63293 28/50 current_auc = 0.25
User 63293 AUC after training: 0.25
User 63293 does not improve AUC. Reverting changes.
Training on augumented user 38354 29/50 current_auc = 0.25
User 38354 AUC after training: 0.25
User 38354 does not improve AUC. Reverting changes.
Training on augumented user 118310 30/50 current_auc = 0.25
User 118310 AUC after training: 0.25
User 118310 does not improve AUC. Reverting changes.
Training on augumented user 98864 31/50 current_auc = 0.25
User 98864 AUC after training: 0.25
User 98864 does not improve AUC. Reverting changes.
Training on augumented user 87645 32/50 current_auc = 0.25
User 87645 AUC after training: 0.25
User 87645 does not improve AUC. Reverting changes.
Training on augumented user 124686 33/50 current_auc = 0.25
User 124686 AUC after training: 0.25
User 124686 does not improve AUC. Reverting changes.
Training on augumented user 129224 34/50 current_auc = 0.25
User 129224 AUC after training: 0.25
User 129224 does not improve AUC. Reverting changes.
Training on augumented user 10162 35/50 current_auc = 0.25
User 10162 AUC after training: 0.25
User 10162 does not improve AUC. Reverting changes.
Training on augumented user 64918 36/50 current_auc = 0.25
User 64918 AUC after training: 0.25
User 64918 does not improve AUC. Reverting changes.
Training on augumented user 628 37/50 current_auc = 0.25
User 628 AUC after training: 0.25
User 628 does not improve AUC. Reverting changes.
Training on augumented user 55921 38/50 current_auc = 0.25
User 55921 AUC after training: 0.25
User 55921 does not improve AUC. Reverting changes.
Training on augumented user 116261 39/50 current_auc = 0.25
User 116261 AUC after training: 0.25
User 116261 does not improve AUC. Reverting changes.
Training on augumented user 100032 40/50 current_auc = 0.25
User 100032 AUC after training: 0.25
User 100032 does not improve AUC. Reverting changes.
Training on augumented user 11953 41/50 current_auc = 0.25
User 11953 AUC after training: 0.25
User 11953 does not improve AUC. Reverting changes.
Training on augumented user 51846 42/50 current_auc = 0.25
User 51846 AUC after training: 0.25
User 51846 does not improve AUC. Reverting changes.
Training on augumented user 134697 43/50 current_auc = 0.25
User 134697 AUC after training: 0.25
User 134697 does not improve AUC. Reverting changes.
Training on augumented user 88872 44/50 current_auc = 0.25
User 88872 AUC after training: 0.25
User 88872 does not improve AUC. Reverting changes.
Training on augumented user 97332 45/50 current_auc = 0.25
User 97332 AUC after training: 0.25
User 97332 does not improve AUC. Reverting changes.
Training on augumented user 1227 46/50 current_auc = 0.25
User 1227 AUC after training: 0.25
User 1227 does not improve AUC. Reverting changes.
Training on augumented user 17901 47/50 current_auc = 0.25
User 17901 AUC after training: 0.25
User 17901 does not improve AUC. Reverting changes.
Training on augumented user 115694 48/50 current_auc = 0.25
User 115694 AUC after training: 0.25
User 115694 does not improve AUC. Reverting changes.
Training on augumented user 86921 49/50 current_auc = 0.25
User 86921 AUC after training: 0.25
User 86921 does not improve AUC. Reverting changes.
[2024-12-02 18:49:34.734111] start test user 127334 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:35.176681] start test user 127334 132/567 recall augumented users by random, augumented_users = [136418, 95771, 68053, 116207, 44136, 100456, 81657, 82151, 12389, 11212, 69453, 98684, 129690, 6158, 62488, 9090, 23564, 43817, 85569, 13151, 109907, 136413, 22944, 51033, 58926, 51301, 43255, 93712, 32654, 69585, 1050, 66808, 124073, 46484, 86549, 46033, 42984, 11534, 12097, 87642, 38986, 99557, 60916, 93498, 92547, 138278, 61076, 86730, 96212, 8089]
[2024-12-02 18:49:35.190964] user = 127334 Cloud 132/567
[2024-12-02 18:49:35.200848] user = 127334 Local 132/567
[2024-12-02 18:49:35.234537] user = 127334 Local+ 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:37.350575] user = 127334 MPDA- 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5658783783783784
Training on augumented user 136418 0/50 current_auc = 0.5658783783783784
User 136418 AUC after training: 0.5675675675675675
User 136418 improves AUC. Keeping the model.
Training on augumented user 95771 1/50 current_auc = 0.5675675675675675
User 95771 AUC after training: 0.5692567567567568
User 95771 improves AUC. Keeping the model.
Training on augumented user 68053 2/50 current_auc = 0.5692567567567568
User 68053 AUC after training: 0.5692567567567568
User 68053 does not improve AUC. Reverting changes.
Training on augumented user 116207 3/50 current_auc = 0.5692567567567568
User 116207 AUC after training: 0.5675675675675675
User 116207 does not improve AUC. Reverting changes.
Training on augumented user 44136 4/50 current_auc = 0.5692567567567568
User 44136 AUC after training: 0.5641891891891893
User 44136 does not improve AUC. Reverting changes.
Training on augumented user 100456 5/50 current_auc = 0.5692567567567568
User 100456 AUC after training: 0.5641891891891891
User 100456 does not improve AUC. Reverting changes.
Training on augumented user 81657 6/50 current_auc = 0.5692567567567568
User 81657 AUC after training: 0.5675675675675675
User 81657 does not improve AUC. Reverting changes.
Training on augumented user 82151 7/50 current_auc = 0.5692567567567568
User 82151 AUC after training: 0.5692567567567568
User 82151 does not improve AUC. Reverting changes.
Training on augumented user 12389 8/50 current_auc = 0.5692567567567568
User 12389 AUC after training: 0.5760135135135135
User 12389 improves AUC. Keeping the model.
Training on augumented user 11212 9/50 current_auc = 0.5760135135135135
User 11212 AUC after training: 0.5760135135135135
User 11212 does not improve AUC. Reverting changes.
Training on augumented user 69453 10/50 current_auc = 0.5760135135135135
User 69453 AUC after training: 0.5760135135135135
User 69453 does not improve AUC. Reverting changes.
Training on augumented user 98684 11/50 current_auc = 0.5760135135135135
User 98684 AUC after training: 0.5760135135135135
User 98684 does not improve AUC. Reverting changes.
Training on augumented user 129690 12/50 current_auc = 0.5760135135135135
User 129690 AUC after training: 0.5760135135135135
User 129690 does not improve AUC. Reverting changes.
Training on augumented user 6158 13/50 current_auc = 0.5760135135135135
User 6158 AUC after training: 0.5743243243243243
User 6158 does not improve AUC. Reverting changes.
Training on augumented user 62488 14/50 current_auc = 0.5760135135135135
User 62488 AUC after training: 0.5760135135135135
User 62488 does not improve AUC. Reverting changes.
Training on augumented user 9090 15/50 current_auc = 0.5760135135135135
User 9090 AUC after training: 0.5743243243243243
User 9090 does not improve AUC. Reverting changes.
Training on augumented user 23564 16/50 current_auc = 0.5760135135135135
User 23564 AUC after training: 0.5692567567567568
User 23564 does not improve AUC. Reverting changes.
Training on augumented user 43817 17/50 current_auc = 0.5760135135135135
User 43817 AUC after training: 0.5743243243243243
User 43817 does not improve AUC. Reverting changes.
Training on augumented user 85569 18/50 current_auc = 0.5760135135135135
User 85569 AUC after training: 0.5760135135135135
User 85569 does not improve AUC. Reverting changes.
Training on augumented user 13151 19/50 current_auc = 0.5760135135135135
User 13151 AUC after training: 0.5726351351351351
User 13151 does not improve AUC. Reverting changes.
Training on augumented user 109907 20/50 current_auc = 0.5760135135135135
User 109907 AUC after training: 0.5743243243243243
User 109907 does not improve AUC. Reverting changes.
Training on augumented user 136413 21/50 current_auc = 0.5760135135135135
User 136413 AUC after training: 0.5760135135135135
User 136413 does not improve AUC. Reverting changes.
Training on augumented user 22944 22/50 current_auc = 0.5760135135135135
User 22944 AUC after training: 0.5743243243243243
User 22944 does not improve AUC. Reverting changes.
Training on augumented user 51033 23/50 current_auc = 0.5760135135135135
User 51033 AUC after training: 0.5743243243243243
User 51033 does not improve AUC. Reverting changes.
Training on augumented user 58926 24/50 current_auc = 0.5760135135135135
User 58926 AUC after training: 0.5760135135135135
User 58926 does not improve AUC. Reverting changes.
Training on augumented user 51301 25/50 current_auc = 0.5760135135135135
User 51301 AUC after training: 0.5743243243243243
User 51301 does not improve AUC. Reverting changes.
Training on augumented user 43255 26/50 current_auc = 0.5760135135135135
User 43255 AUC after training: 0.5743243243243243
User 43255 does not improve AUC. Reverting changes.
Training on augumented user 93712 27/50 current_auc = 0.5760135135135135
User 93712 AUC after training: 0.5760135135135135
User 93712 does not improve AUC. Reverting changes.
Training on augumented user 32654 28/50 current_auc = 0.5760135135135135
User 32654 AUC after training: 0.5743243243243243
User 32654 does not improve AUC. Reverting changes.
Training on augumented user 69585 29/50 current_auc = 0.5760135135135135
User 69585 AUC after training: 0.5760135135135135
User 69585 does not improve AUC. Reverting changes.
Training on augumented user 1050 30/50 current_auc = 0.5760135135135135
User 1050 AUC after training: 0.5760135135135135
User 1050 does not improve AUC. Reverting changes.
Training on augumented user 66808 31/50 current_auc = 0.5760135135135135
User 66808 AUC after training: 0.5743243243243243
User 66808 does not improve AUC. Reverting changes.
Training on augumented user 124073 32/50 current_auc = 0.5760135135135135
User 124073 AUC after training: 0.5743243243243243
User 124073 does not improve AUC. Reverting changes.
Training on augumented user 46484 33/50 current_auc = 0.5760135135135135
User 46484 AUC after training: 0.5760135135135135
User 46484 does not improve AUC. Reverting changes.
Training on augumented user 86549 34/50 current_auc = 0.5760135135135135
User 86549 AUC after training: 0.5760135135135135
User 86549 does not improve AUC. Reverting changes.
Training on augumented user 46033 35/50 current_auc = 0.5760135135135135
User 46033 AUC after training: 0.5658783783783784
User 46033 does not improve AUC. Reverting changes.
Training on augumented user 42984 36/50 current_auc = 0.5760135135135135
User 42984 AUC after training: 0.5743243243243243
User 42984 does not improve AUC. Reverting changes.
Training on augumented user 11534 37/50 current_auc = 0.5760135135135135
User 11534 AUC after training: 0.5760135135135135
User 11534 does not improve AUC. Reverting changes.
Training on augumented user 12097 38/50 current_auc = 0.5760135135135135
User 12097 AUC after training: 0.5743243243243243
User 12097 does not improve AUC. Reverting changes.
Training on augumented user 87642 39/50 current_auc = 0.5760135135135135
User 87642 AUC after training: 0.5743243243243243
User 87642 does not improve AUC. Reverting changes.
Training on augumented user 38986 40/50 current_auc = 0.5760135135135135
User 38986 AUC after training: 0.5743243243243243
User 38986 does not improve AUC. Reverting changes.
Training on augumented user 99557 41/50 current_auc = 0.5760135135135135
User 99557 AUC after training: 0.5760135135135135
User 99557 does not improve AUC. Reverting changes.
Training on augumented user 60916 42/50 current_auc = 0.5760135135135135
User 60916 AUC after training: 0.5743243243243243
User 60916 does not improve AUC. Reverting changes.
Training on augumented user 93498 43/50 current_auc = 0.5760135135135135
User 93498 AUC after training: 0.5760135135135135
User 93498 does not improve AUC. Reverting changes.
Training on augumented user 92547 44/50 current_auc = 0.5760135135135135
User 92547 AUC after training: 0.5743243243243243
User 92547 does not improve AUC. Reverting changes.
Training on augumented user 138278 45/50 current_auc = 0.5760135135135135
User 138278 AUC after training: 0.5760135135135135
User 138278 does not improve AUC. Reverting changes.
Training on augumented user 61076 46/50 current_auc = 0.5760135135135135
User 61076 AUC after training: 0.5743243243243243
User 61076 does not improve AUC. Reverting changes.
Training on augumented user 86730 47/50 current_auc = 0.5760135135135135
User 86730 AUC after training: 0.5760135135135135
User 86730 does not improve AUC. Reverting changes.
Training on augumented user 96212 48/50 current_auc = 0.5760135135135135
User 96212 AUC after training: 0.5743243243243243
User 96212 does not improve AUC. Reverting changes.
Training on augumented user 8089 49/50 current_auc = 0.5760135135135135
User 8089 AUC after training: 0.5760135135135135
User 8089 does not improve AUC. Reverting changes.
[2024-12-02 18:50:08.639699] start test user 127361 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:09.277651] start test user 127361 133/567 recall augumented users by random, augumented_users = [106434, 9674, 56203, 46500, 114588, 21693, 105893, 7591, 102782, 45067, 93185, 70870, 43008, 134363, 96232, 89915, 72347, 2397, 12768, 51178, 117157, 124432, 115308, 85185, 133681, 131839, 127914, 72489, 24799, 4703, 26863, 4928, 87928, 119951, 9440, 25769, 44198, 90563, 65399, 68494, 81230, 97683, 22241, 84256, 68171, 121173, 6550, 84535, 53658, 115085]
[2024-12-02 18:50:09.346075] user = 127361 Cloud 133/567
[2024-12-02 18:50:09.356449] user = 127361 Local 133/567
[2024-12-02 18:50:09.560910] user = 127361 Local+ 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:12.031946] user = 127361 MPDA- 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6578947368421053
Training on augumented user 106434 0/50 current_auc = 0.6578947368421053
User 106434 AUC after training: 0.6447368421052632
User 106434 does not improve AUC. Reverting changes.
Training on augumented user 9674 1/50 current_auc = 0.6578947368421053
User 9674 AUC after training: 0.7236842105263157
User 9674 improves AUC. Keeping the model.
Training on augumented user 56203 2/50 current_auc = 0.7236842105263157
User 56203 AUC after training: 0.7236842105263157
User 56203 does not improve AUC. Reverting changes.
Training on augumented user 46500 3/50 current_auc = 0.7236842105263157
User 46500 AUC after training: 0.6710526315789473
User 46500 does not improve AUC. Reverting changes.
Training on augumented user 114588 4/50 current_auc = 0.7236842105263157
User 114588 AUC after training: 0.7105263157894737
User 114588 does not improve AUC. Reverting changes.
Training on augumented user 21693 5/50 current_auc = 0.7236842105263157
User 21693 AUC after training: 0.7105263157894736
User 21693 does not improve AUC. Reverting changes.
Training on augumented user 105893 6/50 current_auc = 0.7236842105263157
User 105893 AUC after training: 0.6973684210526315
User 105893 does not improve AUC. Reverting changes.
Training on augumented user 7591 7/50 current_auc = 0.7236842105263157
User 7591 AUC after training: 0.6578947368421052
User 7591 does not improve AUC. Reverting changes.
Training on augumented user 102782 8/50 current_auc = 0.7236842105263157
User 102782 AUC after training: 0.7105263157894737
User 102782 does not improve AUC. Reverting changes.
Training on augumented user 45067 9/50 current_auc = 0.7236842105263157
User 45067 AUC after training: 0.7236842105263157
User 45067 does not improve AUC. Reverting changes.
Training on augumented user 93185 10/50 current_auc = 0.7236842105263157
User 93185 AUC after training: 0.75
User 93185 improves AUC. Keeping the model.
Training on augumented user 70870 11/50 current_auc = 0.75
User 70870 AUC after training: 0.75
User 70870 does not improve AUC. Reverting changes.
Training on augumented user 43008 12/50 current_auc = 0.75
User 43008 AUC after training: 0.7894736842105263
User 43008 improves AUC. Keeping the model.
Training on augumented user 134363 13/50 current_auc = 0.7894736842105263
User 134363 AUC after training: 0.7763157894736842
User 134363 does not improve AUC. Reverting changes.
Training on augumented user 96232 14/50 current_auc = 0.7894736842105263
User 96232 AUC after training: 0.7763157894736842
User 96232 does not improve AUC. Reverting changes.
Training on augumented user 89915 15/50 current_auc = 0.7894736842105263
User 89915 AUC after training: 0.7894736842105263
User 89915 does not improve AUC. Reverting changes.
Training on augumented user 72347 16/50 current_auc = 0.7894736842105263
User 72347 AUC after training: 0.7894736842105263
User 72347 does not improve AUC. Reverting changes.
Training on augumented user 2397 17/50 current_auc = 0.7894736842105263
User 2397 AUC after training: 0.6447368421052632
User 2397 does not improve AUC. Reverting changes.
Training on augumented user 12768 18/50 current_auc = 0.7894736842105263
User 12768 AUC after training: 0.7894736842105263
User 12768 does not improve AUC. Reverting changes.
Training on augumented user 51178 19/50 current_auc = 0.7894736842105263
User 51178 AUC after training: 0.7894736842105263
User 51178 does not improve AUC. Reverting changes.
Training on augumented user 117157 20/50 current_auc = 0.7894736842105263
User 117157 AUC after training: 0.7894736842105263
User 117157 does not improve AUC. Reverting changes.
Training on augumented user 124432 21/50 current_auc = 0.7894736842105263
User 124432 AUC after training: 0.7894736842105263
User 124432 does not improve AUC. Reverting changes.
Training on augumented user 115308 22/50 current_auc = 0.7894736842105263
User 115308 AUC after training: 0.7894736842105263
User 115308 does not improve AUC. Reverting changes.
Training on augumented user 85185 23/50 current_auc = 0.7894736842105263
User 85185 AUC after training: 0.7894736842105263
User 85185 does not improve AUC. Reverting changes.
Training on augumented user 133681 24/50 current_auc = 0.7894736842105263
User 133681 AUC after training: 0.7894736842105262
User 133681 does not improve AUC. Reverting changes.
Training on augumented user 131839 25/50 current_auc = 0.7894736842105263
User 131839 AUC after training: 0.7763157894736842
User 131839 does not improve AUC. Reverting changes.
Training on augumented user 127914 26/50 current_auc = 0.7894736842105263
User 127914 AUC after training: 0.7894736842105263
User 127914 does not improve AUC. Reverting changes.
Training on augumented user 72489 27/50 current_auc = 0.7894736842105263
User 72489 AUC after training: 0.7894736842105263
User 72489 does not improve AUC. Reverting changes.
Training on augumented user 24799 28/50 current_auc = 0.7894736842105263
User 24799 AUC after training: 0.7894736842105263
User 24799 does not improve AUC. Reverting changes.
Training on augumented user 4703 29/50 current_auc = 0.7894736842105263
User 4703 AUC after training: 0.7894736842105263
User 4703 does not improve AUC. Reverting changes.
Training on augumented user 26863 30/50 current_auc = 0.7894736842105263
User 26863 AUC after training: 0.7894736842105263
User 26863 does not improve AUC. Reverting changes.
Training on augumented user 4928 31/50 current_auc = 0.7894736842105263
User 4928 AUC after training: 0.7894736842105263
User 4928 does not improve AUC. Reverting changes.
Training on augumented user 87928 32/50 current_auc = 0.7894736842105263
User 87928 AUC after training: 0.7763157894736842
User 87928 does not improve AUC. Reverting changes.
Training on augumented user 119951 33/50 current_auc = 0.7894736842105263
User 119951 AUC after training: 0.7894736842105263
User 119951 does not improve AUC. Reverting changes.
Training on augumented user 9440 34/50 current_auc = 0.7894736842105263
User 9440 AUC after training: 0.7894736842105263
User 9440 does not improve AUC. Reverting changes.
Training on augumented user 25769 35/50 current_auc = 0.7894736842105263
User 25769 AUC after training: 0.7894736842105263
User 25769 does not improve AUC. Reverting changes.
Training on augumented user 44198 36/50 current_auc = 0.7894736842105263
User 44198 AUC after training: 0.7894736842105263
User 44198 does not improve AUC. Reverting changes.
Training on augumented user 90563 37/50 current_auc = 0.7894736842105263
User 90563 AUC after training: 0.7894736842105263
User 90563 does not improve AUC. Reverting changes.
Training on augumented user 65399 38/50 current_auc = 0.7894736842105263
User 65399 AUC after training: 0.7894736842105263
User 65399 does not improve AUC. Reverting changes.
Training on augumented user 68494 39/50 current_auc = 0.7894736842105263
User 68494 AUC after training: 0.7894736842105263
User 68494 does not improve AUC. Reverting changes.
Training on augumented user 81230 40/50 current_auc = 0.7894736842105263
User 81230 AUC after training: 0.7894736842105263
User 81230 does not improve AUC. Reverting changes.
Training on augumented user 97683 41/50 current_auc = 0.7894736842105263
User 97683 AUC after training: 0.7894736842105263
User 97683 does not improve AUC. Reverting changes.
Training on augumented user 22241 42/50 current_auc = 0.7894736842105263
User 22241 AUC after training: 0.7763157894736842
User 22241 does not improve AUC. Reverting changes.
Training on augumented user 84256 43/50 current_auc = 0.7894736842105263
User 84256 AUC after training: 0.7894736842105263
User 84256 does not improve AUC. Reverting changes.
Training on augumented user 68171 44/50 current_auc = 0.7894736842105263
User 68171 AUC after training: 0.7763157894736842
User 68171 does not improve AUC. Reverting changes.
Training on augumented user 121173 45/50 current_auc = 0.7894736842105263
User 121173 AUC after training: 0.7894736842105263
User 121173 does not improve AUC. Reverting changes.
Training on augumented user 6550 46/50 current_auc = 0.7894736842105263
User 6550 AUC after training: 0.7894736842105263
User 6550 does not improve AUC. Reverting changes.
Training on augumented user 84535 47/50 current_auc = 0.7894736842105263
User 84535 AUC after training: 0.7894736842105263
User 84535 does not improve AUC. Reverting changes.
Training on augumented user 53658 48/50 current_auc = 0.7894736842105263
User 53658 AUC after training: 0.7894736842105263
User 53658 does not improve AUC. Reverting changes.
Training on augumented user 115085 49/50 current_auc = 0.7894736842105263
User 115085 AUC after training: 0.7763157894736842
User 115085 does not improve AUC. Reverting changes.
[2024-12-02 18:50:41.008047] start test user 127374 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:41.438198] start test user 127374 134/567 recall augumented users by random, augumented_users = [4330, 60279, 37429, 36745, 65211, 129419, 85897, 56457, 50202, 7008, 45224, 110543, 134079, 87830, 120130, 108186, 29697, 4024, 62779, 121455, 123498, 23554, 51931, 74519, 129547, 117655, 113453, 32197, 16242, 86655, 91679, 17061, 30286, 64130, 124836, 38277, 26626, 25908, 49037, 112, 16986, 19952, 118321, 42333, 103797, 90820, 26237, 20986, 19143, 118330]
[2024-12-02 18:50:41.452400] user = 127374 Cloud 134/567
[2024-12-02 18:50:41.463623] user = 127374 Local 134/567
[2024-12-02 18:50:41.484546] user = 127374 Local+ 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:44.422438] user = 127374 MPDA- 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4833333333333333
Training on augumented user 4330 0/50 current_auc = 0.4833333333333333
User 4330 AUC after training: 0.47777777777777775
User 4330 does not improve AUC. Reverting changes.
Training on augumented user 60279 1/50 current_auc = 0.4833333333333333
User 60279 AUC after training: 0.4888888888888889
User 60279 improves AUC. Keeping the model.
Training on augumented user 37429 2/50 current_auc = 0.4888888888888889
User 37429 AUC after training: 0.4888888888888888
User 37429 does not improve AUC. Reverting changes.
Training on augumented user 36745 3/50 current_auc = 0.4888888888888889
User 36745 AUC after training: 0.4833333333333333
User 36745 does not improve AUC. Reverting changes.
Training on augumented user 65211 4/50 current_auc = 0.4888888888888889
User 65211 AUC after training: 0.4944444444444444
User 65211 improves AUC. Keeping the model.
Training on augumented user 129419 5/50 current_auc = 0.4944444444444444
User 129419 AUC after training: 0.4944444444444444
User 129419 does not improve AUC. Reverting changes.
Training on augumented user 85897 6/50 current_auc = 0.4944444444444444
User 85897 AUC after training: 0.4944444444444444
User 85897 does not improve AUC. Reverting changes.
Training on augumented user 56457 7/50 current_auc = 0.4944444444444444
User 56457 AUC after training: 0.4944444444444444
User 56457 does not improve AUC. Reverting changes.
Training on augumented user 50202 8/50 current_auc = 0.4944444444444444
User 50202 AUC after training: 0.4833333333333333
User 50202 does not improve AUC. Reverting changes.
Training on augumented user 7008 9/50 current_auc = 0.4944444444444444
User 7008 AUC after training: 0.4833333333333333
User 7008 does not improve AUC. Reverting changes.
Training on augumented user 45224 10/50 current_auc = 0.4944444444444444
User 45224 AUC after training: 0.4888888888888889
User 45224 does not improve AUC. Reverting changes.
Training on augumented user 110543 11/50 current_auc = 0.4944444444444444
User 110543 AUC after training: 0.4944444444444444
User 110543 does not improve AUC. Reverting changes.
Training on augumented user 134079 12/50 current_auc = 0.4944444444444444
User 134079 AUC after training: 0.4888888888888888
User 134079 does not improve AUC. Reverting changes.
Training on augumented user 87830 13/50 current_auc = 0.4944444444444444
User 87830 AUC after training: 0.4944444444444444
User 87830 does not improve AUC. Reverting changes.
Training on augumented user 120130 14/50 current_auc = 0.4944444444444444
User 120130 AUC after training: 0.47777777777777775
User 120130 does not improve AUC. Reverting changes.
Training on augumented user 108186 15/50 current_auc = 0.4944444444444444
User 108186 AUC after training: 0.4888888888888888
User 108186 does not improve AUC. Reverting changes.
Training on augumented user 29697 16/50 current_auc = 0.4944444444444444
User 29697 AUC after training: 0.4888888888888889
User 29697 does not improve AUC. Reverting changes.
Training on augumented user 4024 17/50 current_auc = 0.4944444444444444
User 4024 AUC after training: 0.4888888888888888
User 4024 does not improve AUC. Reverting changes.
Training on augumented user 62779 18/50 current_auc = 0.4944444444444444
User 62779 AUC after training: 0.47777777777777775
User 62779 does not improve AUC. Reverting changes.
Training on augumented user 121455 19/50 current_auc = 0.4944444444444444
User 121455 AUC after training: 0.4944444444444444
User 121455 does not improve AUC. Reverting changes.
Training on augumented user 123498 20/50 current_auc = 0.4944444444444444
User 123498 AUC after training: 0.4944444444444444
User 123498 does not improve AUC. Reverting changes.
Training on augumented user 23554 21/50 current_auc = 0.4944444444444444
User 23554 AUC after training: 0.4944444444444444
User 23554 does not improve AUC. Reverting changes.
Training on augumented user 51931 22/50 current_auc = 0.4944444444444444
User 51931 AUC after training: 0.4888888888888889
User 51931 does not improve AUC. Reverting changes.
Training on augumented user 74519 23/50 current_auc = 0.4944444444444444
User 74519 AUC after training: 0.4944444444444444
User 74519 does not improve AUC. Reverting changes.
Training on augumented user 129547 24/50 current_auc = 0.4944444444444444
User 129547 AUC after training: 0.4944444444444444
User 129547 does not improve AUC. Reverting changes.
Training on augumented user 117655 25/50 current_auc = 0.4944444444444444
User 117655 AUC after training: 0.4833333333333333
User 117655 does not improve AUC. Reverting changes.
Training on augumented user 113453 26/50 current_auc = 0.4944444444444444
User 113453 AUC after training: 0.4888888888888889
User 113453 does not improve AUC. Reverting changes.
Training on augumented user 32197 27/50 current_auc = 0.4944444444444444
User 32197 AUC after training: 0.4944444444444444
User 32197 does not improve AUC. Reverting changes.
Training on augumented user 16242 28/50 current_auc = 0.4944444444444444
User 16242 AUC after training: 0.4944444444444444
User 16242 does not improve AUC. Reverting changes.
Training on augumented user 86655 29/50 current_auc = 0.4944444444444444
User 86655 AUC after training: 0.4888888888888888
User 86655 does not improve AUC. Reverting changes.
Training on augumented user 91679 30/50 current_auc = 0.4944444444444444
User 91679 AUC after training: 0.4888888888888889
User 91679 does not improve AUC. Reverting changes.
Training on augumented user 17061 31/50 current_auc = 0.4944444444444444
User 17061 AUC after training: 0.4888888888888889
User 17061 does not improve AUC. Reverting changes.
Training on augumented user 30286 32/50 current_auc = 0.4944444444444444
User 30286 AUC after training: 0.4944444444444444
User 30286 does not improve AUC. Reverting changes.
Training on augumented user 64130 33/50 current_auc = 0.4944444444444444
User 64130 AUC after training: 0.4833333333333333
User 64130 does not improve AUC. Reverting changes.
Training on augumented user 124836 34/50 current_auc = 0.4944444444444444
User 124836 AUC after training: 0.4833333333333333
User 124836 does not improve AUC. Reverting changes.
Training on augumented user 38277 35/50 current_auc = 0.4944444444444444
User 38277 AUC after training: 0.4944444444444444
User 38277 does not improve AUC. Reverting changes.
Training on augumented user 26626 36/50 current_auc = 0.4944444444444444
User 26626 AUC after training: 0.4944444444444444
User 26626 does not improve AUC. Reverting changes.
Training on augumented user 25908 37/50 current_auc = 0.4944444444444444
User 25908 AUC after training: 0.47777777777777775
User 25908 does not improve AUC. Reverting changes.
Training on augumented user 49037 38/50 current_auc = 0.4944444444444444
User 49037 AUC after training: 0.4833333333333333
User 49037 does not improve AUC. Reverting changes.
Training on augumented user 112 39/50 current_auc = 0.4944444444444444
User 112 AUC after training: 0.4944444444444444
User 112 does not improve AUC. Reverting changes.
Training on augumented user 16986 40/50 current_auc = 0.4944444444444444
User 16986 AUC after training: 0.4944444444444444
User 16986 does not improve AUC. Reverting changes.
Training on augumented user 19952 41/50 current_auc = 0.4944444444444444
User 19952 AUC after training: 0.4888888888888889
User 19952 does not improve AUC. Reverting changes.
Training on augumented user 118321 42/50 current_auc = 0.4944444444444444
User 118321 AUC after training: 0.4944444444444444
User 118321 does not improve AUC. Reverting changes.
Training on augumented user 42333 43/50 current_auc = 0.4944444444444444
User 42333 AUC after training: 0.4888888888888889
User 42333 does not improve AUC. Reverting changes.
Training on augumented user 103797 44/50 current_auc = 0.4944444444444444
User 103797 AUC after training: 0.4944444444444444
User 103797 does not improve AUC. Reverting changes.
Training on augumented user 90820 45/50 current_auc = 0.4944444444444444
User 90820 AUC after training: 0.4944444444444444
User 90820 does not improve AUC. Reverting changes.
Training on augumented user 26237 46/50 current_auc = 0.4944444444444444
User 26237 AUC after training: 0.4944444444444444
User 26237 does not improve AUC. Reverting changes.
Training on augumented user 20986 47/50 current_auc = 0.4944444444444444
User 20986 AUC after training: 0.4888888888888889
User 20986 does not improve AUC. Reverting changes.
Training on augumented user 19143 48/50 current_auc = 0.4944444444444444
User 19143 AUC after training: 0.4833333333333333
User 19143 does not improve AUC. Reverting changes.
Training on augumented user 118330 49/50 current_auc = 0.4944444444444444
User 118330 AUC after training: 0.4888888888888888
User 118330 does not improve AUC. Reverting changes.
[2024-12-02 18:51:13.553914] start test user 127379 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:14.000215] start test user 127379 135/567 recall augumented users by random, augumented_users = [122247, 8511, 64422, 137256, 26311, 118279, 10719, 49478, 60506, 47262, 23235, 67263, 121260, 51066, 597, 63052, 21717, 3223, 26988, 51423, 4561, 24906, 2191, 118075, 81877, 75547, 14209, 53171, 125033, 114827, 126536, 68169, 44950, 24569, 50119, 74710, 53436, 108267, 91720, 70736, 22574, 121340, 125689, 121569, 62304, 99535, 59882, 43599, 31596, 134579]
[2024-12-02 18:51:14.017514] user = 127379 Cloud 135/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:14.025099] user = 127379 Local 135/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:14.071732] user = 127379 Local+ 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:16.692723] user = 127379 MPDA- 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 122247 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122247 AUC after training: 0.5
User 122247 does not improve AUC. Reverting changes.
Training on augumented user 8511 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8511 AUC after training: 0.5
User 8511 does not improve AUC. Reverting changes.
Training on augumented user 64422 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64422 AUC after training: 0.5
User 64422 does not improve AUC. Reverting changes.
Training on augumented user 137256 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137256 AUC after training: 0.5
User 137256 does not improve AUC. Reverting changes.
Training on augumented user 26311 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26311 AUC after training: 0.5
User 26311 does not improve AUC. Reverting changes.
Training on augumented user 118279 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118279 AUC after training: 0.5
User 118279 does not improve AUC. Reverting changes.
Training on augumented user 10719 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10719 AUC after training: 0.5
User 10719 does not improve AUC. Reverting changes.
Training on augumented user 49478 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49478 AUC after training: 0.5
User 49478 does not improve AUC. Reverting changes.
Training on augumented user 60506 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60506 AUC after training: 0.5
User 60506 does not improve AUC. Reverting changes.
Training on augumented user 47262 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47262 AUC after training: 0.5
User 47262 does not improve AUC. Reverting changes.
Training on augumented user 23235 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23235 AUC after training: 0.5
User 23235 does not improve AUC. Reverting changes.
Training on augumented user 67263 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67263 AUC after training: 0.5
User 67263 does not improve AUC. Reverting changes.
Training on augumented user 121260 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121260 AUC after training: 0.5
User 121260 does not improve AUC. Reverting changes.
Training on augumented user 51066 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51066 AUC after training: 0.5
User 51066 does not improve AUC. Reverting changes.
Training on augumented user 597 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 597 AUC after training: 0.5
User 597 does not improve AUC. Reverting changes.
Training on augumented user 63052 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63052 AUC after training: 0.5
User 63052 does not improve AUC. Reverting changes.
Training on augumented user 21717 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21717 AUC after training: 0.5
User 21717 does not improve AUC. Reverting changes.
Training on augumented user 3223 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3223 AUC after training: 0.5
User 3223 does not improve AUC. Reverting changes.
Training on augumented user 26988 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26988 AUC after training: 0.5
User 26988 does not improve AUC. Reverting changes.
Training on augumented user 51423 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51423 AUC after training: 0.5
User 51423 does not improve AUC. Reverting changes.
Training on augumented user 4561 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4561 AUC after training: 0.5
User 4561 does not improve AUC. Reverting changes.
Training on augumented user 24906 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24906 AUC after training: 0.5
User 24906 does not improve AUC. Reverting changes.
Training on augumented user 2191 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2191 AUC after training: 0.5
User 2191 does not improve AUC. Reverting changes.
Training on augumented user 118075 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118075 AUC after training: 0.5
User 118075 does not improve AUC. Reverting changes.
Training on augumented user 81877 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81877 AUC after training: 0.5
User 81877 does not improve AUC. Reverting changes.
Training on augumented user 75547 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75547 AUC after training: 0.5
User 75547 does not improve AUC. Reverting changes.
Training on augumented user 14209 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14209 AUC after training: 0.5
User 14209 does not improve AUC. Reverting changes.
Training on augumented user 53171 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53171 AUC after training: 0.5
User 53171 does not improve AUC. Reverting changes.
Training on augumented user 125033 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125033 AUC after training: 0.5
User 125033 does not improve AUC. Reverting changes.
Training on augumented user 114827 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114827 AUC after training: 0.5
User 114827 does not improve AUC. Reverting changes.
Training on augumented user 126536 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126536 AUC after training: 0.5
User 126536 does not improve AUC. Reverting changes.
Training on augumented user 68169 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68169 AUC after training: 0.5
User 68169 does not improve AUC. Reverting changes.
Training on augumented user 44950 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44950 AUC after training: 0.5
User 44950 does not improve AUC. Reverting changes.
Training on augumented user 24569 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24569 AUC after training: 0.5
User 24569 does not improve AUC. Reverting changes.
Training on augumented user 50119 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50119 AUC after training: 0.5
User 50119 does not improve AUC. Reverting changes.
Training on augumented user 74710 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74710 AUC after training: 0.5
User 74710 does not improve AUC. Reverting changes.
Training on augumented user 53436 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53436 AUC after training: 0.5
User 53436 does not improve AUC. Reverting changes.
Training on augumented user 108267 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108267 AUC after training: 0.5
User 108267 does not improve AUC. Reverting changes.
Training on augumented user 91720 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91720 AUC after training: 0.5
User 91720 does not improve AUC. Reverting changes.
Training on augumented user 70736 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70736 AUC after training: 0.5
User 70736 does not improve AUC. Reverting changes.
Training on augumented user 22574 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22574 AUC after training: 0.5
User 22574 does not improve AUC. Reverting changes.
Training on augumented user 121340 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121340 AUC after training: 0.5
User 121340 does not improve AUC. Reverting changes.
Training on augumented user 125689 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125689 AUC after training: 0.5
User 125689 does not improve AUC. Reverting changes.
Training on augumented user 121569 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121569 AUC after training: 0.5
User 121569 does not improve AUC. Reverting changes.
Training on augumented user 62304 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62304 AUC after training: 0.5
User 62304 does not improve AUC. Reverting changes.
Training on augumented user 99535 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99535 AUC after training: 0.5
User 99535 does not improve AUC. Reverting changes.
Training on augumented user 59882 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59882 AUC after training: 0.5
User 59882 does not improve AUC. Reverting changes.
Training on augumented user 43599 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43599 AUC after training: 0.5
User 43599 does not improve AUC. Reverting changes.
Training on augumented user 31596 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31596 AUC after training: 0.5
User 31596 does not improve AUC. Reverting changes.
Training on augumented user 134579 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134579 AUC after training: 0.5
User 134579 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:44.617995] start test user 127389 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:45.395051] start test user 127389 136/567 recall augumented users by random, augumented_users = [4558, 85892, 3145, 119203, 135699, 35437, 31315, 111581, 19000, 96846, 34959, 60337, 17574, 92704, 95593, 138119, 90662, 54988, 103033, 50077, 7289, 81083, 124907, 86426, 44259, 106086, 44610, 46266, 81230, 115263, 136085, 3402, 136376, 74065, 9412, 106764, 108903, 108600, 40791, 14717, 76254, 3414, 9924, 132708, 26593, 55420, 44622, 127465, 59826, 43278]
[2024-12-02 18:51:45.413908] user = 127389 Cloud 136/567
[2024-12-02 18:51:45.454590] user = 127389 Local 136/567
[2024-12-02 18:51:45.653387] user = 127389 Local+ 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:49.155005] user = 127389 MPDA- 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7440862708719852
Training on augumented user 4558 0/50 current_auc = 0.7440862708719852
User 4558 AUC after training: 0.7450139146567718
User 4558 improves AUC. Keeping the model.
Training on augumented user 85892 1/50 current_auc = 0.7450139146567718
User 85892 AUC after training: 0.7440862708719851
User 85892 does not improve AUC. Reverting changes.
Training on augumented user 3145 2/50 current_auc = 0.7450139146567718
User 3145 AUC after training: 0.7440862708719851
User 3145 does not improve AUC. Reverting changes.
Training on augumented user 119203 3/50 current_auc = 0.7450139146567718
User 119203 AUC after training: 0.7450139146567718
User 119203 does not improve AUC. Reverting changes.
Training on augumented user 135699 4/50 current_auc = 0.7450139146567718
User 135699 AUC after training: 0.7454777365491652
User 135699 improves AUC. Keeping the model.
Training on augumented user 35437 5/50 current_auc = 0.7454777365491652
User 35437 AUC after training: 0.7447820037105752
User 35437 does not improve AUC. Reverting changes.
Training on augumented user 31315 6/50 current_auc = 0.7454777365491652
User 31315 AUC after training: 0.7450139146567718
User 31315 does not improve AUC. Reverting changes.
Training on augumented user 111581 7/50 current_auc = 0.7454777365491652
User 111581 AUC after training: 0.7454777365491652
User 111581 does not improve AUC. Reverting changes.
Training on augumented user 19000 8/50 current_auc = 0.7454777365491652
User 19000 AUC after training: 0.7440862708719852
User 19000 does not improve AUC. Reverting changes.
Training on augumented user 96846 9/50 current_auc = 0.7454777365491652
User 96846 AUC after training: 0.7452458256029684
User 96846 does not improve AUC. Reverting changes.
Training on augumented user 34959 10/50 current_auc = 0.7454777365491652
User 34959 AUC after training: 0.7457096474953617
User 34959 improves AUC. Keeping the model.
Training on augumented user 60337 11/50 current_auc = 0.7457096474953617
User 60337 AUC after training: 0.7450139146567718
User 60337 does not improve AUC. Reverting changes.
Training on augumented user 17574 12/50 current_auc = 0.7457096474953617
User 17574 AUC after training: 0.7443181818181818
User 17574 does not improve AUC. Reverting changes.
Training on augumented user 92704 13/50 current_auc = 0.7457096474953617
User 92704 AUC after training: 0.7454777365491652
User 92704 does not improve AUC. Reverting changes.
Training on augumented user 95593 14/50 current_auc = 0.7457096474953617
User 95593 AUC after training: 0.7452458256029685
User 95593 does not improve AUC. Reverting changes.
Training on augumented user 138119 15/50 current_auc = 0.7457096474953617
User 138119 AUC after training: 0.7454777365491652
User 138119 does not improve AUC. Reverting changes.
Training on augumented user 90662 16/50 current_auc = 0.7457096474953617
User 90662 AUC after training: 0.7457096474953617
User 90662 does not improve AUC. Reverting changes.
Training on augumented user 54988 17/50 current_auc = 0.7457096474953617
User 54988 AUC after training: 0.7454777365491652
User 54988 does not improve AUC. Reverting changes.
Training on augumented user 103033 18/50 current_auc = 0.7457096474953617
User 103033 AUC after training: 0.7450139146567718
User 103033 does not improve AUC. Reverting changes.
Training on augumented user 50077 19/50 current_auc = 0.7457096474953617
User 50077 AUC after training: 0.7454777365491652
User 50077 does not improve AUC. Reverting changes.
Training on augumented user 7289 20/50 current_auc = 0.7457096474953617
User 7289 AUC after training: 0.7440862708719851
User 7289 does not improve AUC. Reverting changes.
Training on augumented user 81083 21/50 current_auc = 0.7457096474953617
User 81083 AUC after training: 0.7459415584415585
User 81083 improves AUC. Keeping the model.
Training on augumented user 124907 22/50 current_auc = 0.7459415584415585
User 124907 AUC after training: 0.7457096474953617
User 124907 does not improve AUC. Reverting changes.
Training on augumented user 86426 23/50 current_auc = 0.7459415584415585
User 86426 AUC after training: 0.7457096474953617
User 86426 does not improve AUC. Reverting changes.
Training on augumented user 44259 24/50 current_auc = 0.7459415584415585
User 44259 AUC after training: 0.7457096474953618
User 44259 does not improve AUC. Reverting changes.
Training on augumented user 106086 25/50 current_auc = 0.7459415584415585
User 106086 AUC after training: 0.7454777365491652
User 106086 does not improve AUC. Reverting changes.
Training on augumented user 44610 26/50 current_auc = 0.7459415584415585
User 44610 AUC after training: 0.7447820037105751
User 44610 does not improve AUC. Reverting changes.
Training on augumented user 46266 27/50 current_auc = 0.7459415584415585
User 46266 AUC after training: 0.7450139146567718
User 46266 does not improve AUC. Reverting changes.
Training on augumented user 81230 28/50 current_auc = 0.7459415584415585
User 81230 AUC after training: 0.7459415584415585
User 81230 does not improve AUC. Reverting changes.
Training on augumented user 115263 29/50 current_auc = 0.7459415584415585
User 115263 AUC after training: 0.7452458256029685
User 115263 does not improve AUC. Reverting changes.
Training on augumented user 136085 30/50 current_auc = 0.7459415584415585
User 136085 AUC after training: 0.7454777365491652
User 136085 does not improve AUC. Reverting changes.
Training on augumented user 3402 31/50 current_auc = 0.7459415584415585
User 3402 AUC after training: 0.7454777365491652
User 3402 does not improve AUC. Reverting changes.
Training on augumented user 136376 32/50 current_auc = 0.7459415584415585
User 136376 AUC after training: 0.7457096474953617
User 136376 does not improve AUC. Reverting changes.
Training on augumented user 74065 33/50 current_auc = 0.7459415584415585
User 74065 AUC after training: 0.7454777365491652
User 74065 does not improve AUC. Reverting changes.
Training on augumented user 9412 34/50 current_auc = 0.7459415584415585
User 9412 AUC after training: 0.7459415584415584
User 9412 does not improve AUC. Reverting changes.
Training on augumented user 106764 35/50 current_auc = 0.7459415584415585
User 106764 AUC after training: 0.7466372912801484
User 106764 improves AUC. Keeping the model.
Training on augumented user 108903 36/50 current_auc = 0.7466372912801484
User 108903 AUC after training: 0.7454777365491652
User 108903 does not improve AUC. Reverting changes.
Training on augumented user 108600 37/50 current_auc = 0.7466372912801484
User 108600 AUC after training: 0.7457096474953617
User 108600 does not improve AUC. Reverting changes.
Training on augumented user 40791 38/50 current_auc = 0.7466372912801484
User 40791 AUC after training: 0.7459415584415585
User 40791 does not improve AUC. Reverting changes.
Training on augumented user 14717 39/50 current_auc = 0.7466372912801484
User 14717 AUC after training: 0.7457096474953618
User 14717 does not improve AUC. Reverting changes.
Training on augumented user 76254 40/50 current_auc = 0.7466372912801484
User 76254 AUC after training: 0.7459415584415585
User 76254 does not improve AUC. Reverting changes.
Training on augumented user 3414 41/50 current_auc = 0.7466372912801484
User 3414 AUC after training: 0.7454777365491652
User 3414 does not improve AUC. Reverting changes.
Training on augumented user 9924 42/50 current_auc = 0.7466372912801484
User 9924 AUC after training: 0.7457096474953618
User 9924 does not improve AUC. Reverting changes.
Training on augumented user 132708 43/50 current_auc = 0.7466372912801484
User 132708 AUC after training: 0.7457096474953617
User 132708 does not improve AUC. Reverting changes.
Training on augumented user 26593 44/50 current_auc = 0.7466372912801484
User 26593 AUC after training: 0.7457096474953617
User 26593 does not improve AUC. Reverting changes.
Training on augumented user 55420 45/50 current_auc = 0.7466372912801484
User 55420 AUC after training: 0.7464053803339518
User 55420 does not improve AUC. Reverting changes.
Training on augumented user 44622 46/50 current_auc = 0.7466372912801484
User 44622 AUC after training: 0.7443181818181818
User 44622 does not improve AUC. Reverting changes.
Training on augumented user 127465 47/50 current_auc = 0.7466372912801484
User 127465 AUC after training: 0.7447820037105751
User 127465 does not improve AUC. Reverting changes.
Training on augumented user 59826 48/50 current_auc = 0.7466372912801484
User 59826 AUC after training: 0.7454777365491652
User 59826 does not improve AUC. Reverting changes.
Training on augumented user 43278 49/50 current_auc = 0.7466372912801484
User 43278 AUC after training: 0.7459415584415584
User 43278 does not improve AUC. Reverting changes.
[2024-12-02 18:52:17.505655] start test user 127424 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:18.153117] start test user 127424 137/567 recall augumented users by random, augumented_users = [71672, 108356, 130545, 82375, 126557, 6475, 92782, 86963, 7504, 121163, 24427, 15189, 39144, 113795, 128175, 81448, 48332, 102836, 11003, 22268, 25196, 106688, 1932, 69101, 69671, 95558, 101099, 96288, 119797, 51083, 135716, 103037, 69914, 105956, 108522, 54289, 103671, 2313, 81797, 46814, 32789, 90130, 126570, 96436, 80118, 125674, 104703, 33656, 10068, 58543]
[2024-12-02 18:52:18.170227] user = 127424 Cloud 137/567
[2024-12-02 18:52:18.183383] user = 127424 Local 137/567
[2024-12-02 18:52:18.236511] user = 127424 Local+ 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:20.510988] user = 127424 MPDA- 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5690690690690691
Training on augumented user 71672 0/50 current_auc = 0.5690690690690691
User 71672 AUC after training: 0.5690690690690691
User 71672 does not improve AUC. Reverting changes.
Training on augumented user 108356 1/50 current_auc = 0.5690690690690691
User 108356 AUC after training: 0.5698198198198199
User 108356 improves AUC. Keeping the model.
Training on augumented user 130545 2/50 current_auc = 0.5698198198198199
User 130545 AUC after training: 0.5690690690690691
User 130545 does not improve AUC. Reverting changes.
Training on augumented user 82375 3/50 current_auc = 0.5698198198198199
User 82375 AUC after training: 0.5615615615615616
User 82375 does not improve AUC. Reverting changes.
Training on augumented user 126557 4/50 current_auc = 0.5698198198198199
User 126557 AUC after training: 0.5675675675675675
User 126557 does not improve AUC. Reverting changes.
Training on augumented user 6475 5/50 current_auc = 0.5698198198198199
User 6475 AUC after training: 0.5645645645645647
User 6475 does not improve AUC. Reverting changes.
Training on augumented user 92782 6/50 current_auc = 0.5698198198198199
User 92782 AUC after training: 0.5698198198198199
User 92782 does not improve AUC. Reverting changes.
Training on augumented user 86963 7/50 current_auc = 0.5698198198198199
User 86963 AUC after training: 0.5720720720720721
User 86963 improves AUC. Keeping the model.
Training on augumented user 7504 8/50 current_auc = 0.5720720720720721
User 7504 AUC after training: 0.5690690690690691
User 7504 does not improve AUC. Reverting changes.
Training on augumented user 121163 9/50 current_auc = 0.5720720720720721
User 121163 AUC after training: 0.5765765765765766
User 121163 improves AUC. Keeping the model.
Training on augumented user 24427 10/50 current_auc = 0.5765765765765766
User 24427 AUC after training: 0.5720720720720721
User 24427 does not improve AUC. Reverting changes.
Training on augumented user 15189 11/50 current_auc = 0.5765765765765766
User 15189 AUC after training: 0.5645645645645646
User 15189 does not improve AUC. Reverting changes.
Training on augumented user 39144 12/50 current_auc = 0.5765765765765766
User 39144 AUC after training: 0.5765765765765766
User 39144 does not improve AUC. Reverting changes.
Training on augumented user 113795 13/50 current_auc = 0.5765765765765766
User 113795 AUC after training: 0.575075075075075
User 113795 does not improve AUC. Reverting changes.
Training on augumented user 128175 14/50 current_auc = 0.5765765765765766
User 128175 AUC after training: 0.5720720720720721
User 128175 does not improve AUC. Reverting changes.
Training on augumented user 81448 15/50 current_auc = 0.5765765765765766
User 81448 AUC after training: 0.5720720720720721
User 81448 does not improve AUC. Reverting changes.
Training on augumented user 48332 16/50 current_auc = 0.5765765765765766
User 48332 AUC after training: 0.5765765765765766
User 48332 does not improve AUC. Reverting changes.
Training on augumented user 102836 17/50 current_auc = 0.5765765765765766
User 102836 AUC after training: 0.575075075075075
User 102836 does not improve AUC. Reverting changes.
Training on augumented user 11003 18/50 current_auc = 0.5765765765765766
User 11003 AUC after training: 0.5735735735735736
User 11003 does not improve AUC. Reverting changes.
Training on augumented user 22268 19/50 current_auc = 0.5765765765765766
User 22268 AUC after training: 0.575075075075075
User 22268 does not improve AUC. Reverting changes.
Training on augumented user 25196 20/50 current_auc = 0.5765765765765766
User 25196 AUC after training: 0.575075075075075
User 25196 does not improve AUC. Reverting changes.
Training on augumented user 106688 21/50 current_auc = 0.5765765765765766
User 106688 AUC after training: 0.5720720720720721
User 106688 does not improve AUC. Reverting changes.
Training on augumented user 1932 22/50 current_auc = 0.5765765765765766
User 1932 AUC after training: 0.5630630630630631
User 1932 does not improve AUC. Reverting changes.
Training on augumented user 69101 23/50 current_auc = 0.5765765765765766
User 69101 AUC after training: 0.5765765765765766
User 69101 does not improve AUC. Reverting changes.
Training on augumented user 69671 24/50 current_auc = 0.5765765765765766
User 69671 AUC after training: 0.5765765765765766
User 69671 does not improve AUC. Reverting changes.
Training on augumented user 95558 25/50 current_auc = 0.5765765765765766
User 95558 AUC after training: 0.5735735735735736
User 95558 does not improve AUC. Reverting changes.
Training on augumented user 101099 26/50 current_auc = 0.5765765765765766
User 101099 AUC after training: 0.575075075075075
User 101099 does not improve AUC. Reverting changes.
Training on augumented user 96288 27/50 current_auc = 0.5765765765765766
User 96288 AUC after training: 0.5780780780780781
User 96288 improves AUC. Keeping the model.
Training on augumented user 119797 28/50 current_auc = 0.5780780780780781
User 119797 AUC after training: 0.5765765765765766
User 119797 does not improve AUC. Reverting changes.
Training on augumented user 51083 29/50 current_auc = 0.5780780780780781
User 51083 AUC after training: 0.5780780780780781
User 51083 does not improve AUC. Reverting changes.
Training on augumented user 135716 30/50 current_auc = 0.5780780780780781
User 135716 AUC after training: 0.575075075075075
User 135716 does not improve AUC. Reverting changes.
Training on augumented user 103037 31/50 current_auc = 0.5780780780780781
User 103037 AUC after training: 0.5795795795795796
User 103037 improves AUC. Keeping the model.
Training on augumented user 69914 32/50 current_auc = 0.5795795795795796
User 69914 AUC after training: 0.5795795795795796
User 69914 does not improve AUC. Reverting changes.
Training on augumented user 105956 33/50 current_auc = 0.5795795795795796
User 105956 AUC after training: 0.5810810810810811
User 105956 improves AUC. Keeping the model.
Training on augumented user 108522 34/50 current_auc = 0.5810810810810811
User 108522 AUC after training: 0.575075075075075
User 108522 does not improve AUC. Reverting changes.
Training on augumented user 54289 35/50 current_auc = 0.5810810810810811
User 54289 AUC after training: 0.5810810810810811
User 54289 does not improve AUC. Reverting changes.
Training on augumented user 103671 36/50 current_auc = 0.5810810810810811
User 103671 AUC after training: 0.5810810810810811
User 103671 does not improve AUC. Reverting changes.
Training on augumented user 2313 37/50 current_auc = 0.5810810810810811
User 2313 AUC after training: 0.5810810810810811
User 2313 does not improve AUC. Reverting changes.
Training on augumented user 81797 38/50 current_auc = 0.5810810810810811
User 81797 AUC after training: 0.5810810810810811
User 81797 does not improve AUC. Reverting changes.
Training on augumented user 46814 39/50 current_auc = 0.5810810810810811
User 46814 AUC after training: 0.5795795795795796
User 46814 does not improve AUC. Reverting changes.
Training on augumented user 32789 40/50 current_auc = 0.5810810810810811
User 32789 AUC after training: 0.5810810810810811
User 32789 does not improve AUC. Reverting changes.
Training on augumented user 90130 41/50 current_auc = 0.5810810810810811
User 90130 AUC after training: 0.5795795795795796
User 90130 does not improve AUC. Reverting changes.
Training on augumented user 126570 42/50 current_auc = 0.5810810810810811
User 126570 AUC after training: 0.5795795795795796
User 126570 does not improve AUC. Reverting changes.
Training on augumented user 96436 43/50 current_auc = 0.5810810810810811
User 96436 AUC after training: 0.5810810810810811
User 96436 does not improve AUC. Reverting changes.
Training on augumented user 80118 44/50 current_auc = 0.5810810810810811
User 80118 AUC after training: 0.5810810810810811
User 80118 does not improve AUC. Reverting changes.
Training on augumented user 125674 45/50 current_auc = 0.5810810810810811
User 125674 AUC after training: 0.5795795795795796
User 125674 does not improve AUC. Reverting changes.
Training on augumented user 104703 46/50 current_auc = 0.5810810810810811
User 104703 AUC after training: 0.5795795795795796
User 104703 does not improve AUC. Reverting changes.
Training on augumented user 33656 47/50 current_auc = 0.5810810810810811
User 33656 AUC after training: 0.5810810810810811
User 33656 does not improve AUC. Reverting changes.
Training on augumented user 10068 48/50 current_auc = 0.5810810810810811
User 10068 AUC after training: 0.5810810810810811
User 10068 does not improve AUC. Reverting changes.
Training on augumented user 58543 49/50 current_auc = 0.5810810810810811
User 58543 AUC after training: 0.5780780780780781
User 58543 does not improve AUC. Reverting changes.
[2024-12-02 18:52:46.359453] start test user 127425 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:46.905682] start test user 127425 138/567 recall augumented users by random, augumented_users = [112104, 26694, 50689, 33109, 132893, 44988, 45120, 113279, 127652, 107264, 122343, 3340, 131585, 52754, 94694, 123480, 28375, 112423, 54824, 66405, 25933, 906, 105310, 30886, 31775, 31264, 133496, 35387, 1555, 64783, 130381, 78281, 60082, 1242, 19504, 122076, 86855, 126380, 94433, 11956, 79613, 19233, 53193, 60087, 100297, 71517, 78156, 33573, 21225, 124177]
[2024-12-02 18:52:46.920930] user = 127425 Cloud 138/567
[2024-12-02 18:52:46.935503] user = 127425 Local 138/567
[2024-12-02 18:52:46.965987] user = 127425 Local+ 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:48.913890] user = 127425 MPDA- 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6872873492112589
Training on augumented user 112104 0/50 current_auc = 0.6872873492112589
User 112104 AUC after training: 0.6872873492112589
User 112104 does not improve AUC. Reverting changes.
Training on augumented user 26694 1/50 current_auc = 0.6872873492112589
User 26694 AUC after training: 0.6863594184967522
User 26694 does not improve AUC. Reverting changes.
Training on augumented user 50689 2/50 current_auc = 0.6872873492112589
User 50689 AUC after training: 0.6879059696875965
User 50689 improves AUC. Keeping the model.
Training on augumented user 33109 3/50 current_auc = 0.6879059696875965
User 33109 AUC after training: 0.68697803897309
User 33109 does not improve AUC. Reverting changes.
Training on augumented user 132893 4/50 current_auc = 0.6879059696875965
User 132893 AUC after training: 0.6879059696875967
User 132893 improves AUC. Keeping the model.
Training on augumented user 44988 5/50 current_auc = 0.6879059696875967
User 44988 AUC after training: 0.6872873492112589
User 44988 does not improve AUC. Reverting changes.
Training on augumented user 45120 6/50 current_auc = 0.6879059696875967
User 45120 AUC after training: 0.6875966594494277
User 45120 does not improve AUC. Reverting changes.
Training on augumented user 113279 7/50 current_auc = 0.6879059696875967
User 113279 AUC after training: 0.6872873492112588
User 113279 does not improve AUC. Reverting changes.
Training on augumented user 127652 8/50 current_auc = 0.6879059696875967
User 127652 AUC after training: 0.6863594184967523
User 127652 does not improve AUC. Reverting changes.
Training on augumented user 107264 9/50 current_auc = 0.6879059696875967
User 107264 AUC after training: 0.6879059696875967
User 107264 does not improve AUC. Reverting changes.
Training on augumented user 122343 10/50 current_auc = 0.6879059696875967
User 122343 AUC after training: 0.6872873492112588
User 122343 does not improve AUC. Reverting changes.
Training on augumented user 3340 11/50 current_auc = 0.6879059696875967
User 3340 AUC after training: 0.6872873492112588
User 3340 does not improve AUC. Reverting changes.
Training on augumented user 131585 12/50 current_auc = 0.6879059696875967
User 131585 AUC after training: 0.6879059696875967
User 131585 does not improve AUC. Reverting changes.
Training on augumented user 52754 13/50 current_auc = 0.6879059696875967
User 52754 AUC after training: 0.6882152799257655
User 52754 improves AUC. Keeping the model.
Training on augumented user 94694 14/50 current_auc = 0.6882152799257655
User 94694 AUC after training: 0.6882152799257655
User 94694 does not improve AUC. Reverting changes.
Training on augumented user 123480 15/50 current_auc = 0.6882152799257655
User 123480 AUC after training: 0.6882152799257656
User 123480 improves AUC. Keeping the model.
Training on augumented user 28375 16/50 current_auc = 0.6882152799257656
User 28375 AUC after training: 0.6882152799257656
User 28375 does not improve AUC. Reverting changes.
Training on augumented user 112423 17/50 current_auc = 0.6882152799257656
User 112423 AUC after training: 0.6888339004021032
User 112423 improves AUC. Keeping the model.
Training on augumented user 54824 18/50 current_auc = 0.6888339004021032
User 54824 AUC after training: 0.6900711413547788
User 54824 improves AUC. Keeping the model.
Training on augumented user 66405 19/50 current_auc = 0.6900711413547788
User 66405 AUC after training: 0.6882152799257656
User 66405 does not improve AUC. Reverting changes.
Training on augumented user 25933 20/50 current_auc = 0.6900711413547788
User 25933 AUC after training: 0.6888339004021033
User 25933 does not improve AUC. Reverting changes.
Training on augumented user 906 21/50 current_auc = 0.6900711413547788
User 906 AUC after training: 0.68697803897309
User 906 does not improve AUC. Reverting changes.
Training on augumented user 105310 22/50 current_auc = 0.6900711413547788
User 105310 AUC after training: 0.6885245901639344
User 105310 does not improve AUC. Reverting changes.
Training on augumented user 30886 23/50 current_auc = 0.6900711413547788
User 30886 AUC after training: 0.6891432106402722
User 30886 does not improve AUC. Reverting changes.
Training on augumented user 31775 24/50 current_auc = 0.6900711413547788
User 31775 AUC after training: 0.6879059696875967
User 31775 does not improve AUC. Reverting changes.
Training on augumented user 31264 25/50 current_auc = 0.6900711413547788
User 31264 AUC after training: 0.6897618311166099
User 31264 does not improve AUC. Reverting changes.
Training on augumented user 133496 26/50 current_auc = 0.6900711413547788
User 133496 AUC after training: 0.6900711413547789
User 133496 improves AUC. Keeping the model.
Training on augumented user 35387 27/50 current_auc = 0.6900711413547789
User 35387 AUC after training: 0.6897618311166099
User 35387 does not improve AUC. Reverting changes.
Training on augumented user 1555 28/50 current_auc = 0.6900711413547789
User 1555 AUC after training: 0.6897618311166099
User 1555 does not improve AUC. Reverting changes.
Training on augumented user 64783 29/50 current_auc = 0.6900711413547789
User 64783 AUC after training: 0.6897618311166099
User 64783 does not improve AUC. Reverting changes.
Training on augumented user 130381 30/50 current_auc = 0.6900711413547789
User 130381 AUC after training: 0.68976183111661
User 130381 does not improve AUC. Reverting changes.
Training on augumented user 78281 31/50 current_auc = 0.6900711413547789
User 78281 AUC after training: 0.6885245901639344
User 78281 does not improve AUC. Reverting changes.
Training on augumented user 60082 32/50 current_auc = 0.6900711413547789
User 60082 AUC after training: 0.6906897618311166
User 60082 improves AUC. Keeping the model.
Training on augumented user 1242 33/50 current_auc = 0.6906897618311166
User 1242 AUC after training: 0.6897618311166099
User 1242 does not improve AUC. Reverting changes.
Training on augumented user 19504 34/50 current_auc = 0.6906897618311166
User 19504 AUC after training: 0.6888339004021032
User 19504 does not improve AUC. Reverting changes.
Training on augumented user 122076 35/50 current_auc = 0.6906897618311166
User 122076 AUC after training: 0.6900711413547788
User 122076 does not improve AUC. Reverting changes.
Training on augumented user 86855 36/50 current_auc = 0.6906897618311166
User 86855 AUC after training: 0.6913083823074544
User 86855 improves AUC. Keeping the model.
Training on augumented user 126380 37/50 current_auc = 0.6913083823074544
User 126380 AUC after training: 0.6909990720692855
User 126380 does not improve AUC. Reverting changes.
Training on augumented user 94433 38/50 current_auc = 0.6913083823074544
User 94433 AUC after training: 0.6906897618311165
User 94433 does not improve AUC. Reverting changes.
Training on augumented user 11956 39/50 current_auc = 0.6913083823074544
User 11956 AUC after training: 0.6903804515929478
User 11956 does not improve AUC. Reverting changes.
Training on augumented user 79613 40/50 current_auc = 0.6913083823074544
User 79613 AUC after training: 0.6897618311166099
User 79613 does not improve AUC. Reverting changes.
Training on augumented user 19233 41/50 current_auc = 0.6913083823074544
User 19233 AUC after training: 0.6900711413547788
User 19233 does not improve AUC. Reverting changes.
Training on augumented user 53193 42/50 current_auc = 0.6913083823074544
User 53193 AUC after training: 0.6906897618311166
User 53193 does not improve AUC. Reverting changes.
Training on augumented user 60087 43/50 current_auc = 0.6913083823074544
User 60087 AUC after training: 0.6900711413547788
User 60087 does not improve AUC. Reverting changes.
Training on augumented user 100297 44/50 current_auc = 0.6913083823074544
User 100297 AUC after training: 0.6900711413547788
User 100297 does not improve AUC. Reverting changes.
Training on augumented user 71517 45/50 current_auc = 0.6913083823074544
User 71517 AUC after training: 0.6885245901639344
User 71517 does not improve AUC. Reverting changes.
Training on augumented user 78156 46/50 current_auc = 0.6913083823074544
User 78156 AUC after training: 0.6913083823074543
User 78156 does not improve AUC. Reverting changes.
Training on augumented user 33573 47/50 current_auc = 0.6913083823074544
User 33573 AUC after training: 0.6891432106402722
User 33573 does not improve AUC. Reverting changes.
Training on augumented user 21225 48/50 current_auc = 0.6913083823074544
User 21225 AUC after training: 0.6916176925456232
User 21225 improves AUC. Keeping the model.
Training on augumented user 124177 49/50 current_auc = 0.6916176925456232
User 124177 AUC after training: 0.6906897618311166
User 124177 does not improve AUC. Reverting changes.
[2024-12-02 18:53:18.834969] start test user 127453 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:19.373281] start test user 127453 139/567 recall augumented users by random, augumented_users = [36407, 14428, 68434, 12918, 29233, 3410, 73600, 54268, 2172, 77407, 135526, 9906, 26981, 104591, 107762, 120800, 17968, 85888, 110549, 97412, 83019, 101193, 30867, 131540, 94071, 104300, 1866, 92449, 67786, 75136, 78111, 86766, 134752, 70777, 120047, 78469, 44997, 100962, 85563, 120564, 17544, 119933, 98337, 16400, 68253, 70632, 49416, 35382, 15042, 34263]
[2024-12-02 18:53:19.389538] user = 127453 Cloud 139/567
[2024-12-02 18:53:19.467742] user = 127453 Local 139/567
[2024-12-02 18:53:19.825698] user = 127453 Local+ 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:21.878817] user = 127453 MPDA- 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6761226839736209
Training on augumented user 36407 0/50 current_auc = 0.6761226839736209
User 36407 AUC after training: 0.675860986077672
User 36407 does not improve AUC. Reverting changes.
Training on augumented user 14428 1/50 current_auc = 0.6761226839736209
User 14428 AUC after training: 0.6761226839736209
User 14428 does not improve AUC. Reverting changes.
Training on augumented user 68434 2/50 current_auc = 0.6761226839736209
User 68434 AUC after training: 0.6759133256568618
User 68434 does not improve AUC. Reverting changes.
Training on augumented user 12918 3/50 current_auc = 0.6761226839736209
User 12918 AUC after training: 0.6765414006071392
User 12918 improves AUC. Keeping the model.
Training on augumented user 29233 4/50 current_auc = 0.6765414006071392
User 29233 AUC after training: 0.6762797027111902
User 29233 does not improve AUC. Reverting changes.
Training on augumented user 3410 5/50 current_auc = 0.6765414006071392
User 3410 AUC after training: 0.6764890610279493
User 3410 does not improve AUC. Reverting changes.
Training on augumented user 73600 6/50 current_auc = 0.6765414006071392
User 73600 AUC after training: 0.6763843818695698
User 73600 does not improve AUC. Reverting changes.
Training on augumented user 54268 7/50 current_auc = 0.6765414006071392
User 54268 AUC after training: 0.6765414006071392
User 54268 does not improve AUC. Reverting changes.
Training on augumented user 2172 8/50 current_auc = 0.6765414006071392
User 2172 AUC after training: 0.6764367214487595
User 2172 does not improve AUC. Reverting changes.
Training on augumented user 77407 9/50 current_auc = 0.6765414006071392
User 77407 AUC after training: 0.6761226839736209
User 77407 does not improve AUC. Reverting changes.
Training on augumented user 135526 10/50 current_auc = 0.6765414006071392
User 135526 AUC after training: 0.67633204229038
User 135526 does not improve AUC. Reverting changes.
Training on augumented user 9906 11/50 current_auc = 0.6765414006071392
User 9906 AUC after training: 0.6762797027111902
User 9906 does not improve AUC. Reverting changes.
Training on augumented user 26981 12/50 current_auc = 0.6765414006071392
User 26981 AUC after training: 0.676070344394431
User 26981 does not improve AUC. Reverting changes.
Training on augumented user 104591 13/50 current_auc = 0.6765414006071392
User 104591 AUC after training: 0.6757039673401026
User 104591 does not improve AUC. Reverting changes.
Training on augumented user 107762 14/50 current_auc = 0.6765414006071392
User 107762 AUC after training: 0.6759656652360515
User 107762 does not improve AUC. Reverting changes.
Training on augumented user 120800 15/50 current_auc = 0.6765414006071392
User 120800 AUC after training: 0.6771171359782268
User 120800 improves AUC. Keeping the model.
Training on augumented user 17968 16/50 current_auc = 0.6771171359782268
User 17968 AUC after training: 0.6765937401863289
User 17968 does not improve AUC. Reverting changes.
Training on augumented user 85888 17/50 current_auc = 0.6771171359782268
User 85888 AUC after training: 0.6759133256568617
User 85888 does not improve AUC. Reverting changes.
Training on augumented user 110549 18/50 current_auc = 0.6771171359782268
User 110549 AUC after training: 0.6773264942949858
User 110549 improves AUC. Keeping the model.
Training on augumented user 97412 19/50 current_auc = 0.6773264942949858
User 97412 AUC after training: 0.6773264942949859
User 97412 improves AUC. Keeping the model.
Training on augumented user 83019 20/50 current_auc = 0.6773264942949859
User 83019 AUC after training: 0.6739767612268397
User 83019 does not improve AUC. Reverting changes.
Training on augumented user 101193 21/50 current_auc = 0.6773264942949859
User 101193 AUC after training: 0.6760180048152412
User 101193 does not improve AUC. Reverting changes.
Training on augumented user 30867 22/50 current_auc = 0.6773264942949859
User 30867 AUC after training: 0.6777452109285041
User 30867 improves AUC. Keeping the model.
Training on augumented user 131540 23/50 current_auc = 0.6777452109285041
User 131540 AUC after training: 0.678059248403643
User 131540 improves AUC. Keeping the model.
Training on augumented user 94071 24/50 current_auc = 0.678059248403643
User 94071 AUC after training: 0.6786873233539202
User 94071 improves AUC. Keeping the model.
Training on augumented user 104300 25/50 current_auc = 0.6786873233539202
User 104300 AUC after training: 0.6772741547157961
User 104300 does not improve AUC. Reverting changes.
Training on augumented user 1866 26/50 current_auc = 0.6786873233539202
User 1866 AUC after training: 0.6786873233539202
User 1866 does not improve AUC. Reverting changes.
Training on augumented user 92449 27/50 current_auc = 0.6786873233539202
User 92449 AUC after training: 0.6776405317701246
User 92449 does not improve AUC. Reverting changes.
Training on augumented user 67786 28/50 current_auc = 0.6786873233539202
User 67786 AUC after training: 0.6774835130325552
User 67786 does not improve AUC. Reverting changes.
Training on augumented user 75136 29/50 current_auc = 0.6786873233539202
User 75136 AUC after training: 0.6781115879828327
User 75136 does not improve AUC. Reverting changes.
Training on augumented user 78111 30/50 current_auc = 0.6786873233539202
User 78111 AUC after training: 0.6788966816706794
User 78111 improves AUC. Keeping the model.
Training on augumented user 86766 31/50 current_auc = 0.6788966816706794
User 86766 AUC after training: 0.679001360829059
User 86766 improves AUC. Keeping the model.
Training on augumented user 134752 32/50 current_auc = 0.679001360829059
User 134752 AUC after training: 0.6796817753585263
User 134752 improves AUC. Keeping the model.
Training on augumented user 70777 33/50 current_auc = 0.6796817753585263
User 70777 AUC after training: 0.6804668690463728
User 70777 improves AUC. Keeping the model.
Training on augumented user 120047 34/50 current_auc = 0.6804668690463728
User 120047 AUC after training: 0.6787920025122998
User 120047 does not improve AUC. Reverting changes.
Training on augumented user 78469 35/50 current_auc = 0.6804668690463728
User 78469 AUC after training: 0.679734114937716
User 78469 does not improve AUC. Reverting changes.
Training on augumented user 44997 36/50 current_auc = 0.6804668690463728
User 44997 AUC after training: 0.679943473254475
User 44997 does not improve AUC. Reverting changes.
Training on augumented user 100962 37/50 current_auc = 0.6804668690463728
User 100962 AUC after training: 0.6800481524128547
User 100962 does not improve AUC. Reverting changes.
Training on augumented user 85563 38/50 current_auc = 0.6804668690463728
User 85563 AUC after training: 0.6799434732544751
User 85563 does not improve AUC. Reverting changes.
Training on augumented user 120564 39/50 current_auc = 0.6804668690463728
User 120564 AUC after training: 0.6794200774625772
User 120564 does not improve AUC. Reverting changes.
Training on augumented user 17544 40/50 current_auc = 0.6804668690463728
User 17544 AUC after training: 0.6798387940960956
User 17544 does not improve AUC. Reverting changes.
Training on augumented user 119933 41/50 current_auc = 0.6804668690463728
User 119933 AUC after training: 0.6794200774625772
User 119933 does not improve AUC. Reverting changes.
Training on augumented user 98337 42/50 current_auc = 0.6804668690463728
User 98337 AUC after training: 0.679995812833665
User 98337 does not improve AUC. Reverting changes.
Training on augumented user 16400 43/50 current_auc = 0.6804668690463728
User 16400 AUC after training: 0.6795770962001466
User 16400 does not improve AUC. Reverting changes.
Training on augumented user 68253 44/50 current_auc = 0.6804668690463728
User 68253 AUC after training: 0.6800481524128547
User 68253 does not improve AUC. Reverting changes.
Training on augumented user 70632 45/50 current_auc = 0.6804668690463728
User 70632 AUC after training: 0.6807285669423219
User 70632 improves AUC. Keeping the model.
Training on augumented user 49416 46/50 current_auc = 0.6807285669423219
User 49416 AUC after training: 0.6811996231550299
User 49416 improves AUC. Keeping the model.
Training on augumented user 35382 47/50 current_auc = 0.6811996231550299
User 35382 AUC after training: 0.680466869046373
User 35382 does not improve AUC. Reverting changes.
Training on augumented user 15042 48/50 current_auc = 0.6811996231550299
User 15042 AUC after training: 0.6796817753585263
User 15042 does not improve AUC. Reverting changes.
Training on augumented user 34263 49/50 current_auc = 0.6811996231550299
User 34263 AUC after training: 0.6805192086255628
User 34263 does not improve AUC. Reverting changes.
[2024-12-02 18:53:50.280355] start test user 127478 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:50.761252] start test user 127478 140/567 recall augumented users by random, augumented_users = [17653, 2917, 32658, 52917, 29243, 22305, 138310, 103243, 95356, 23225, 131306, 26689, 36284, 116854, 115933, 21964, 102955, 2245, 103654, 97941, 74579, 58758, 80380, 67704, 4404, 81728, 27791, 104479, 83511, 125523, 107802, 138116, 133243, 2819, 67744, 101594, 71687, 89351, 50931, 119167, 18925, 56300, 10552, 57044, 91469, 37113, 28980, 122034, 17353, 107750]
[2024-12-02 18:53:50.788408] user = 127478 Cloud 140/567
[2024-12-02 18:53:50.820163] user = 127478 Local 140/567
[2024-12-02 18:53:50.902703] user = 127478 Local+ 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:53.362985] user = 127478 MPDA- 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6291208791208791
Training on augumented user 17653 0/50 current_auc = 0.6291208791208791
User 17653 AUC after training: 0.6277472527472527
User 17653 does not improve AUC. Reverting changes.
Training on augumented user 2917 1/50 current_auc = 0.6291208791208791
User 2917 AUC after training: 0.6332417582417582
User 2917 improves AUC. Keeping the model.
Training on augumented user 32658 2/50 current_auc = 0.6332417582417582
User 32658 AUC after training: 0.6291208791208791
User 32658 does not improve AUC. Reverting changes.
Training on augumented user 52917 3/50 current_auc = 0.6332417582417582
User 52917 AUC after training: 0.6304945054945055
User 52917 does not improve AUC. Reverting changes.
Training on augumented user 29243 4/50 current_auc = 0.6332417582417582
User 29243 AUC after training: 0.6332417582417582
User 29243 does not improve AUC. Reverting changes.
Training on augumented user 22305 5/50 current_auc = 0.6332417582417582
User 22305 AUC after training: 0.6318681318681318
User 22305 does not improve AUC. Reverting changes.
Training on augumented user 138310 6/50 current_auc = 0.6332417582417582
User 138310 AUC after training: 0.6304945054945055
User 138310 does not improve AUC. Reverting changes.
Training on augumented user 103243 7/50 current_auc = 0.6332417582417582
User 103243 AUC after training: 0.6304945054945055
User 103243 does not improve AUC. Reverting changes.
Training on augumented user 95356 8/50 current_auc = 0.6332417582417582
User 95356 AUC after training: 0.6304945054945055
User 95356 does not improve AUC. Reverting changes.
Training on augumented user 23225 9/50 current_auc = 0.6332417582417582
User 23225 AUC after training: 0.6304945054945055
User 23225 does not improve AUC. Reverting changes.
Training on augumented user 131306 10/50 current_auc = 0.6332417582417582
User 131306 AUC after training: 0.6304945054945055
User 131306 does not improve AUC. Reverting changes.
Training on augumented user 26689 11/50 current_auc = 0.6332417582417582
User 26689 AUC after training: 0.6332417582417582
User 26689 does not improve AUC. Reverting changes.
Training on augumented user 36284 12/50 current_auc = 0.6332417582417582
User 36284 AUC after training: 0.6291208791208791
User 36284 does not improve AUC. Reverting changes.
Training on augumented user 116854 13/50 current_auc = 0.6332417582417582
User 116854 AUC after training: 0.6291208791208791
User 116854 does not improve AUC. Reverting changes.
Training on augumented user 115933 14/50 current_auc = 0.6332417582417582
User 115933 AUC after training: 0.6373626373626373
User 115933 improves AUC. Keeping the model.
Training on augumented user 21964 15/50 current_auc = 0.6373626373626373
User 21964 AUC after training: 0.6373626373626373
User 21964 does not improve AUC. Reverting changes.
Training on augumented user 102955 16/50 current_auc = 0.6373626373626373
User 102955 AUC after training: 0.6346153846153846
User 102955 does not improve AUC. Reverting changes.
Training on augumented user 2245 17/50 current_auc = 0.6373626373626373
User 2245 AUC after training: 0.635989010989011
User 2245 does not improve AUC. Reverting changes.
Training on augumented user 103654 18/50 current_auc = 0.6373626373626373
User 103654 AUC after training: 0.6332417582417582
User 103654 does not improve AUC. Reverting changes.
Training on augumented user 97941 19/50 current_auc = 0.6373626373626373
User 97941 AUC after training: 0.6373626373626373
User 97941 does not improve AUC. Reverting changes.
Training on augumented user 74579 20/50 current_auc = 0.6373626373626373
User 74579 AUC after training: 0.6346153846153846
User 74579 does not improve AUC. Reverting changes.
Training on augumented user 58758 21/50 current_auc = 0.6373626373626373
User 58758 AUC after training: 0.6414835164835164
User 58758 improves AUC. Keeping the model.
Training on augumented user 80380 22/50 current_auc = 0.6414835164835164
User 80380 AUC after training: 0.6401098901098901
User 80380 does not improve AUC. Reverting changes.
Training on augumented user 67704 23/50 current_auc = 0.6414835164835164
User 67704 AUC after training: 0.6401098901098901
User 67704 does not improve AUC. Reverting changes.
Training on augumented user 4404 24/50 current_auc = 0.6414835164835164
User 4404 AUC after training: 0.6414835164835164
User 4404 does not improve AUC. Reverting changes.
Training on augumented user 81728 25/50 current_auc = 0.6414835164835164
User 81728 AUC after training: 0.6497252747252746
User 81728 improves AUC. Keeping the model.
Training on augumented user 27791 26/50 current_auc = 0.6497252747252746
User 27791 AUC after training: 0.6387362637362637
User 27791 does not improve AUC. Reverting changes.
Training on augumented user 104479 27/50 current_auc = 0.6497252747252746
User 104479 AUC after training: 0.6263736263736264
User 104479 does not improve AUC. Reverting changes.
Training on augumented user 83511 28/50 current_auc = 0.6497252747252746
User 83511 AUC after training: 0.6497252747252747
User 83511 improves AUC. Keeping the model.
Training on augumented user 125523 29/50 current_auc = 0.6497252747252747
User 125523 AUC after training: 0.6497252747252746
User 125523 does not improve AUC. Reverting changes.
Training on augumented user 107802 30/50 current_auc = 0.6497252747252747
User 107802 AUC after training: 0.6469780219780219
User 107802 does not improve AUC. Reverting changes.
Training on augumented user 138116 31/50 current_auc = 0.6497252747252747
User 138116 AUC after training: 0.6497252747252747
User 138116 does not improve AUC. Reverting changes.
Training on augumented user 133243 32/50 current_auc = 0.6497252747252747
User 133243 AUC after training: 0.6524725274725275
User 133243 improves AUC. Keeping the model.
Training on augumented user 2819 33/50 current_auc = 0.6524725274725275
User 2819 AUC after training: 0.6483516483516483
User 2819 does not improve AUC. Reverting changes.
Training on augumented user 67744 34/50 current_auc = 0.6524725274725275
User 67744 AUC after training: 0.6524725274725275
User 67744 does not improve AUC. Reverting changes.
Training on augumented user 101594 35/50 current_auc = 0.6524725274725275
User 101594 AUC after training: 0.6497252747252747
User 101594 does not improve AUC. Reverting changes.
Training on augumented user 71687 36/50 current_auc = 0.6524725274725275
User 71687 AUC after training: 0.6483516483516483
User 71687 does not improve AUC. Reverting changes.
Training on augumented user 89351 37/50 current_auc = 0.6524725274725275
User 89351 AUC after training: 0.6524725274725275
User 89351 does not improve AUC. Reverting changes.
Training on augumented user 50931 38/50 current_auc = 0.6524725274725275
User 50931 AUC after training: 0.6524725274725275
User 50931 does not improve AUC. Reverting changes.
Training on augumented user 119167 39/50 current_auc = 0.6524725274725275
User 119167 AUC after training: 0.6483516483516483
User 119167 does not improve AUC. Reverting changes.
Training on augumented user 18925 40/50 current_auc = 0.6524725274725275
User 18925 AUC after training: 0.6524725274725274
User 18925 does not improve AUC. Reverting changes.
Training on augumented user 56300 41/50 current_auc = 0.6524725274725275
User 56300 AUC after training: 0.6497252747252747
User 56300 does not improve AUC. Reverting changes.
Training on augumented user 10552 42/50 current_auc = 0.6524725274725275
User 10552 AUC after training: 0.6524725274725275
User 10552 does not improve AUC. Reverting changes.
Training on augumented user 57044 43/50 current_auc = 0.6524725274725275
User 57044 AUC after training: 0.6497252747252747
User 57044 does not improve AUC. Reverting changes.
Training on augumented user 91469 44/50 current_auc = 0.6524725274725275
User 91469 AUC after training: 0.6552197802197802
User 91469 improves AUC. Keeping the model.
Training on augumented user 37113 45/50 current_auc = 0.6552197802197802
User 37113 AUC after training: 0.6538461538461539
User 37113 does not improve AUC. Reverting changes.
Training on augumented user 28980 46/50 current_auc = 0.6552197802197802
User 28980 AUC after training: 0.6565934065934066
User 28980 improves AUC. Keeping the model.
Training on augumented user 122034 47/50 current_auc = 0.6565934065934066
User 122034 AUC after training: 0.657967032967033
User 122034 improves AUC. Keeping the model.
Training on augumented user 17353 48/50 current_auc = 0.657967032967033
User 17353 AUC after training: 0.6565934065934066
User 17353 does not improve AUC. Reverting changes.
Training on augumented user 107750 49/50 current_auc = 0.657967032967033
User 107750 AUC after training: 0.6593406593406593
User 107750 improves AUC. Keeping the model.
[2024-12-02 18:54:24.446263] start test user 127513 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:24.859641] start test user 127513 141/567 recall augumented users by random, augumented_users = [43681, 98021, 13558, 82342, 88630, 119788, 55372, 111480, 16446, 111943, 113848, 112801, 90690, 50462, 27299, 82577, 51956, 21367, 127209, 10606, 21718, 64143, 4203, 99244, 128987, 92689, 61528, 30685, 33250, 89624, 78292, 187, 118263, 111536, 116344, 37825, 111645, 10455, 21148, 127423, 117849, 133362, 136949, 31029, 51901, 93755, 114224, 66792, 73360, 83919]
[2024-12-02 18:54:24.874991] user = 127513 Cloud 141/567
[2024-12-02 18:54:24.888600] user = 127513 Local 141/567
[2024-12-02 18:54:24.960022] user = 127513 Local+ 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:27.146009] user = 127513 MPDA- 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6866666666666668
Training on augumented user 43681 0/50 current_auc = 0.6866666666666668
User 43681 AUC after training: 0.6866666666666668
User 43681 does not improve AUC. Reverting changes.
Training on augumented user 98021 1/50 current_auc = 0.6866666666666668
User 98021 AUC after training: 0.6866666666666668
User 98021 does not improve AUC. Reverting changes.
Training on augumented user 13558 2/50 current_auc = 0.6866666666666668
User 13558 AUC after training: 0.6866666666666668
User 13558 does not improve AUC. Reverting changes.
Training on augumented user 82342 3/50 current_auc = 0.6866666666666668
User 82342 AUC after training: 0.6866666666666668
User 82342 does not improve AUC. Reverting changes.
Training on augumented user 88630 4/50 current_auc = 0.6866666666666668
User 88630 AUC after training: 0.6866666666666668
User 88630 does not improve AUC. Reverting changes.
Training on augumented user 119788 5/50 current_auc = 0.6866666666666668
User 119788 AUC after training: 0.6866666666666668
User 119788 does not improve AUC. Reverting changes.
Training on augumented user 55372 6/50 current_auc = 0.6866666666666668
User 55372 AUC after training: 0.6866666666666668
User 55372 does not improve AUC. Reverting changes.
Training on augumented user 111480 7/50 current_auc = 0.6866666666666668
User 111480 AUC after training: 0.6866666666666668
User 111480 does not improve AUC. Reverting changes.
Training on augumented user 16446 8/50 current_auc = 0.6866666666666668
User 16446 AUC after training: 0.6866666666666668
User 16446 does not improve AUC. Reverting changes.
Training on augumented user 111943 9/50 current_auc = 0.6866666666666668
User 111943 AUC after training: 0.6866666666666668
User 111943 does not improve AUC. Reverting changes.
Training on augumented user 113848 10/50 current_auc = 0.6866666666666668
User 113848 AUC after training: 0.6866666666666668
User 113848 does not improve AUC. Reverting changes.
Training on augumented user 112801 11/50 current_auc = 0.6866666666666668
User 112801 AUC after training: 0.6866666666666668
User 112801 does not improve AUC. Reverting changes.
Training on augumented user 90690 12/50 current_auc = 0.6866666666666668
User 90690 AUC after training: 0.6866666666666668
User 90690 does not improve AUC. Reverting changes.
Training on augumented user 50462 13/50 current_auc = 0.6866666666666668
User 50462 AUC after training: 0.6866666666666668
User 50462 does not improve AUC. Reverting changes.
Training on augumented user 27299 14/50 current_auc = 0.6866666666666668
User 27299 AUC after training: 0.6866666666666668
User 27299 does not improve AUC. Reverting changes.
Training on augumented user 82577 15/50 current_auc = 0.6866666666666668
User 82577 AUC after training: 0.6866666666666668
User 82577 does not improve AUC. Reverting changes.
Training on augumented user 51956 16/50 current_auc = 0.6866666666666668
User 51956 AUC after training: 0.6866666666666668
User 51956 does not improve AUC. Reverting changes.
Training on augumented user 21367 17/50 current_auc = 0.6866666666666668
User 21367 AUC after training: 0.6866666666666668
User 21367 does not improve AUC. Reverting changes.
Training on augumented user 127209 18/50 current_auc = 0.6866666666666668
User 127209 AUC after training: 0.6866666666666668
User 127209 does not improve AUC. Reverting changes.
Training on augumented user 10606 19/50 current_auc = 0.6866666666666668
User 10606 AUC after training: 0.6866666666666668
User 10606 does not improve AUC. Reverting changes.
Training on augumented user 21718 20/50 current_auc = 0.6866666666666668
User 21718 AUC after training: 0.6866666666666668
User 21718 does not improve AUC. Reverting changes.
Training on augumented user 64143 21/50 current_auc = 0.6866666666666668
User 64143 AUC after training: 0.6866666666666668
User 64143 does not improve AUC. Reverting changes.
Training on augumented user 4203 22/50 current_auc = 0.6866666666666668
User 4203 AUC after training: 0.6866666666666668
User 4203 does not improve AUC. Reverting changes.
Training on augumented user 99244 23/50 current_auc = 0.6866666666666668
User 99244 AUC after training: 0.6866666666666668
User 99244 does not improve AUC. Reverting changes.
Training on augumented user 128987 24/50 current_auc = 0.6866666666666668
User 128987 AUC after training: 0.6866666666666668
User 128987 does not improve AUC. Reverting changes.
Training on augumented user 92689 25/50 current_auc = 0.6866666666666668
User 92689 AUC after training: 0.6866666666666668
User 92689 does not improve AUC. Reverting changes.
Training on augumented user 61528 26/50 current_auc = 0.6866666666666668
User 61528 AUC after training: 0.6866666666666668
User 61528 does not improve AUC. Reverting changes.
Training on augumented user 30685 27/50 current_auc = 0.6866666666666668
User 30685 AUC after training: 0.6866666666666668
User 30685 does not improve AUC. Reverting changes.
Training on augumented user 33250 28/50 current_auc = 0.6866666666666668
User 33250 AUC after training: 0.6866666666666668
User 33250 does not improve AUC. Reverting changes.
Training on augumented user 89624 29/50 current_auc = 0.6866666666666668
User 89624 AUC after training: 0.6866666666666668
User 89624 does not improve AUC. Reverting changes.
Training on augumented user 78292 30/50 current_auc = 0.6866666666666668
User 78292 AUC after training: 0.6866666666666668
User 78292 does not improve AUC. Reverting changes.
Training on augumented user 187 31/50 current_auc = 0.6866666666666668
User 187 AUC after training: 0.6866666666666668
User 187 does not improve AUC. Reverting changes.
Training on augumented user 118263 32/50 current_auc = 0.6866666666666668
User 118263 AUC after training: 0.6866666666666668
User 118263 does not improve AUC. Reverting changes.
Training on augumented user 111536 33/50 current_auc = 0.6866666666666668
User 111536 AUC after training: 0.6866666666666668
User 111536 does not improve AUC. Reverting changes.
Training on augumented user 116344 34/50 current_auc = 0.6866666666666668
User 116344 AUC after training: 0.6866666666666668
User 116344 does not improve AUC. Reverting changes.
Training on augumented user 37825 35/50 current_auc = 0.6866666666666668
User 37825 AUC after training: 0.6866666666666668
User 37825 does not improve AUC. Reverting changes.
Training on augumented user 111645 36/50 current_auc = 0.6866666666666668
User 111645 AUC after training: 0.6866666666666668
User 111645 does not improve AUC. Reverting changes.
Training on augumented user 10455 37/50 current_auc = 0.6866666666666668
User 10455 AUC after training: 0.6866666666666668
User 10455 does not improve AUC. Reverting changes.
Training on augumented user 21148 38/50 current_auc = 0.6866666666666668
User 21148 AUC after training: 0.6866666666666668
User 21148 does not improve AUC. Reverting changes.
Training on augumented user 127423 39/50 current_auc = 0.6866666666666668
User 127423 AUC after training: 0.6866666666666668
User 127423 does not improve AUC. Reverting changes.
Training on augumented user 117849 40/50 current_auc = 0.6866666666666668
User 117849 AUC after training: 0.6866666666666668
User 117849 does not improve AUC. Reverting changes.
Training on augumented user 133362 41/50 current_auc = 0.6866666666666668
User 133362 AUC after training: 0.6866666666666668
User 133362 does not improve AUC. Reverting changes.
Training on augumented user 136949 42/50 current_auc = 0.6866666666666668
User 136949 AUC after training: 0.6866666666666668
User 136949 does not improve AUC. Reverting changes.
Training on augumented user 31029 43/50 current_auc = 0.6866666666666668
User 31029 AUC after training: 0.6866666666666668
User 31029 does not improve AUC. Reverting changes.
Training on augumented user 51901 44/50 current_auc = 0.6866666666666668
User 51901 AUC after training: 0.6866666666666668
User 51901 does not improve AUC. Reverting changes.
Training on augumented user 93755 45/50 current_auc = 0.6866666666666668
User 93755 AUC after training: 0.6866666666666668
User 93755 does not improve AUC. Reverting changes.
Training on augumented user 114224 46/50 current_auc = 0.6866666666666668
User 114224 AUC after training: 0.6866666666666668
User 114224 does not improve AUC. Reverting changes.
Training on augumented user 66792 47/50 current_auc = 0.6866666666666668
User 66792 AUC after training: 0.6866666666666668
User 66792 does not improve AUC. Reverting changes.
Training on augumented user 73360 48/50 current_auc = 0.6866666666666668
User 73360 AUC after training: 0.6866666666666668
User 73360 does not improve AUC. Reverting changes.
Training on augumented user 83919 49/50 current_auc = 0.6866666666666668
User 83919 AUC after training: 0.6866666666666668
User 83919 does not improve AUC. Reverting changes.
[2024-12-02 18:54:57.612210] start test user 127555 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:58.054404] start test user 127555 142/567 recall augumented users by random, augumented_users = [71447, 12238, 34942, 61402, 135560, 16629, 18278, 108406, 73555, 27169, 41037, 63854, 25336, 27313, 90784, 40160, 23341, 54049, 76753, 15804, 47204, 122383, 120599, 29094, 112513, 110726, 100822, 127020, 104127, 103199, 55813, 44633, 28203, 2985, 47718, 44809, 112715, 26708, 37051, 51713, 12501, 88099, 87687, 114485, 99371, 123523, 104421, 55447, 91971, 59958]
[2024-12-02 18:54:58.069721] user = 127555 Cloud 142/567
[2024-12-02 18:54:58.081420] user = 127555 Local 142/567
[2024-12-02 18:54:58.126322] user = 127555 Local+ 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:00.813078] user = 127555 MPDA- 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6725
Training on augumented user 71447 0/50 current_auc = 0.6725
User 71447 AUC after training: 0.6725
User 71447 does not improve AUC. Reverting changes.
Training on augumented user 12238 1/50 current_auc = 0.6725
User 12238 AUC after training: 0.67125
User 12238 does not improve AUC. Reverting changes.
Training on augumented user 34942 2/50 current_auc = 0.6725
User 34942 AUC after training: 0.67375
User 34942 improves AUC. Keeping the model.
Training on augumented user 61402 3/50 current_auc = 0.67375
User 61402 AUC after training: 0.67375
User 61402 does not improve AUC. Reverting changes.
Training on augumented user 135560 4/50 current_auc = 0.67375
User 135560 AUC after training: 0.6712499999999999
User 135560 does not improve AUC. Reverting changes.
Training on augumented user 16629 5/50 current_auc = 0.67375
User 16629 AUC after training: 0.6725
User 16629 does not improve AUC. Reverting changes.
Training on augumented user 18278 6/50 current_auc = 0.67375
User 18278 AUC after training: 0.669375
User 18278 does not improve AUC. Reverting changes.
Training on augumented user 108406 7/50 current_auc = 0.67375
User 108406 AUC after training: 0.6712499999999999
User 108406 does not improve AUC. Reverting changes.
Training on augumented user 73555 8/50 current_auc = 0.67375
User 73555 AUC after training: 0.6712499999999999
User 73555 does not improve AUC. Reverting changes.
Training on augumented user 27169 9/50 current_auc = 0.67375
User 27169 AUC after training: 0.6725
User 27169 does not improve AUC. Reverting changes.
Training on augumented user 41037 10/50 current_auc = 0.67375
User 41037 AUC after training: 0.6725
User 41037 does not improve AUC. Reverting changes.
Training on augumented user 63854 11/50 current_auc = 0.67375
User 63854 AUC after training: 0.6725
User 63854 does not improve AUC. Reverting changes.
Training on augumented user 25336 12/50 current_auc = 0.67375
User 25336 AUC after training: 0.6712499999999999
User 25336 does not improve AUC. Reverting changes.
Training on augumented user 27313 13/50 current_auc = 0.67375
User 27313 AUC after training: 0.67375
User 27313 does not improve AUC. Reverting changes.
Training on augumented user 90784 14/50 current_auc = 0.67375
User 90784 AUC after training: 0.6712499999999999
User 90784 does not improve AUC. Reverting changes.
Training on augumented user 40160 15/50 current_auc = 0.67375
User 40160 AUC after training: 0.6725
User 40160 does not improve AUC. Reverting changes.
Training on augumented user 23341 16/50 current_auc = 0.67375
User 23341 AUC after training: 0.67375
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 54049 17/50 current_auc = 0.67375
User 54049 AUC after training: 0.6725
User 54049 does not improve AUC. Reverting changes.
Training on augumented user 76753 18/50 current_auc = 0.67375
User 76753 AUC after training: 0.67125
User 76753 does not improve AUC. Reverting changes.
Training on augumented user 15804 19/50 current_auc = 0.67375
User 15804 AUC after training: 0.6725
User 15804 does not improve AUC. Reverting changes.
Training on augumented user 47204 20/50 current_auc = 0.67375
User 47204 AUC after training: 0.67375
User 47204 does not improve AUC. Reverting changes.
Training on augumented user 122383 21/50 current_auc = 0.67375
User 122383 AUC after training: 0.6725
User 122383 does not improve AUC. Reverting changes.
Training on augumented user 120599 22/50 current_auc = 0.67375
User 120599 AUC after training: 0.6725
User 120599 does not improve AUC. Reverting changes.
Training on augumented user 29094 23/50 current_auc = 0.67375
User 29094 AUC after training: 0.6725
User 29094 does not improve AUC. Reverting changes.
Training on augumented user 112513 24/50 current_auc = 0.67375
User 112513 AUC after training: 0.67375
User 112513 does not improve AUC. Reverting changes.
Training on augumented user 110726 25/50 current_auc = 0.67375
User 110726 AUC after training: 0.6712499999999999
User 110726 does not improve AUC. Reverting changes.
Training on augumented user 100822 26/50 current_auc = 0.67375
User 100822 AUC after training: 0.6712499999999999
User 100822 does not improve AUC. Reverting changes.
Training on augumented user 127020 27/50 current_auc = 0.67375
User 127020 AUC after training: 0.6725
User 127020 does not improve AUC. Reverting changes.
Training on augumented user 104127 28/50 current_auc = 0.67375
User 104127 AUC after training: 0.6725
User 104127 does not improve AUC. Reverting changes.
Training on augumented user 103199 29/50 current_auc = 0.67375
User 103199 AUC after training: 0.6675
User 103199 does not improve AUC. Reverting changes.
Training on augumented user 55813 30/50 current_auc = 0.67375
User 55813 AUC after training: 0.6712499999999999
User 55813 does not improve AUC. Reverting changes.
Training on augumented user 44633 31/50 current_auc = 0.67375
User 44633 AUC after training: 0.6725
User 44633 does not improve AUC. Reverting changes.
Training on augumented user 28203 32/50 current_auc = 0.67375
User 28203 AUC after training: 0.67375
User 28203 does not improve AUC. Reverting changes.
Training on augumented user 2985 33/50 current_auc = 0.67375
User 2985 AUC after training: 0.67375
User 2985 does not improve AUC. Reverting changes.
Training on augumented user 47718 34/50 current_auc = 0.67375
User 47718 AUC after training: 0.6712499999999999
User 47718 does not improve AUC. Reverting changes.
Training on augumented user 44809 35/50 current_auc = 0.67375
User 44809 AUC after training: 0.67375
User 44809 does not improve AUC. Reverting changes.
Training on augumented user 112715 36/50 current_auc = 0.67375
User 112715 AUC after training: 0.6712499999999999
User 112715 does not improve AUC. Reverting changes.
Training on augumented user 26708 37/50 current_auc = 0.67375
User 26708 AUC after training: 0.66375
User 26708 does not improve AUC. Reverting changes.
Training on augumented user 37051 38/50 current_auc = 0.67375
User 37051 AUC after training: 0.67375
User 37051 does not improve AUC. Reverting changes.
Training on augumented user 51713 39/50 current_auc = 0.67375
User 51713 AUC after training: 0.6725
User 51713 does not improve AUC. Reverting changes.
Training on augumented user 12501 40/50 current_auc = 0.67375
User 12501 AUC after training: 0.6725
User 12501 does not improve AUC. Reverting changes.
Training on augumented user 88099 41/50 current_auc = 0.67375
User 88099 AUC after training: 0.6725
User 88099 does not improve AUC. Reverting changes.
Training on augumented user 87687 42/50 current_auc = 0.67375
User 87687 AUC after training: 0.67375
User 87687 does not improve AUC. Reverting changes.
Training on augumented user 114485 43/50 current_auc = 0.67375
User 114485 AUC after training: 0.6712499999999999
User 114485 does not improve AUC. Reverting changes.
Training on augumented user 99371 44/50 current_auc = 0.67375
User 99371 AUC after training: 0.6725
User 99371 does not improve AUC. Reverting changes.
Training on augumented user 123523 45/50 current_auc = 0.67375
User 123523 AUC after training: 0.6712499999999999
User 123523 does not improve AUC. Reverting changes.
Training on augumented user 104421 46/50 current_auc = 0.67375
User 104421 AUC after training: 0.6725
User 104421 does not improve AUC. Reverting changes.
Training on augumented user 55447 47/50 current_auc = 0.67375
User 55447 AUC after training: 0.6725
User 55447 does not improve AUC. Reverting changes.
Training on augumented user 91971 48/50 current_auc = 0.67375
User 91971 AUC after training: 0.6712499999999999
User 91971 does not improve AUC. Reverting changes.
Training on augumented user 59958 49/50 current_auc = 0.67375
User 59958 AUC after training: 0.6725
User 59958 does not improve AUC. Reverting changes.
[2024-12-02 18:55:34.979867] start test user 127559 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:35.625150] start test user 127559 143/567 recall augumented users by random, augumented_users = [93259, 72529, 86429, 96329, 19957, 113989, 37976, 89080, 17010, 81279, 75288, 54154, 126198, 118211, 109455, 92190, 62553, 20108, 36438, 2094, 131325, 100013, 30290, 86321, 40681, 100399, 52165, 24242, 105854, 60026, 122509, 101492, 61476, 13172, 128710, 104646, 105752, 117337, 7089, 101452, 8779, 5564, 83520, 129369, 7668, 45308, 25052, 19790, 8900, 3060]
[2024-12-02 18:55:35.659829] user = 127559 Cloud 143/567
[2024-12-02 18:55:35.670437] user = 127559 Local 143/567
[2024-12-02 18:55:35.730105] user = 127559 Local+ 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:39.100347] user = 127559 MPDA- 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 93259 0/50 current_auc = 0.75
User 93259 AUC after training: 0.75
User 93259 does not improve AUC. Reverting changes.
Training on augumented user 72529 1/50 current_auc = 0.75
User 72529 AUC after training: 0.75
User 72529 does not improve AUC. Reverting changes.
Training on augumented user 86429 2/50 current_auc = 0.75
User 86429 AUC after training: 0.75
User 86429 does not improve AUC. Reverting changes.
Training on augumented user 96329 3/50 current_auc = 0.75
User 96329 AUC after training: 0.75
User 96329 does not improve AUC. Reverting changes.
Training on augumented user 19957 4/50 current_auc = 0.75
User 19957 AUC after training: 0.75
User 19957 does not improve AUC. Reverting changes.
Training on augumented user 113989 5/50 current_auc = 0.75
User 113989 AUC after training: 0.75
User 113989 does not improve AUC. Reverting changes.
Training on augumented user 37976 6/50 current_auc = 0.75
User 37976 AUC after training: 0.75
User 37976 does not improve AUC. Reverting changes.
Training on augumented user 89080 7/50 current_auc = 0.75
User 89080 AUC after training: 0.75
User 89080 does not improve AUC. Reverting changes.
Training on augumented user 17010 8/50 current_auc = 0.75
User 17010 AUC after training: 0.75
User 17010 does not improve AUC. Reverting changes.
Training on augumented user 81279 9/50 current_auc = 0.75
User 81279 AUC after training: 0.75
User 81279 does not improve AUC. Reverting changes.
Training on augumented user 75288 10/50 current_auc = 0.75
User 75288 AUC after training: 0.75
User 75288 does not improve AUC. Reverting changes.
Training on augumented user 54154 11/50 current_auc = 0.75
User 54154 AUC after training: 0.75
User 54154 does not improve AUC. Reverting changes.
Training on augumented user 126198 12/50 current_auc = 0.75
User 126198 AUC after training: 0.75
User 126198 does not improve AUC. Reverting changes.
Training on augumented user 118211 13/50 current_auc = 0.75
User 118211 AUC after training: 0.75
User 118211 does not improve AUC. Reverting changes.
Training on augumented user 109455 14/50 current_auc = 0.75
User 109455 AUC after training: 0.75
User 109455 does not improve AUC. Reverting changes.
Training on augumented user 92190 15/50 current_auc = 0.75
User 92190 AUC after training: 0.75
User 92190 does not improve AUC. Reverting changes.
Training on augumented user 62553 16/50 current_auc = 0.75
User 62553 AUC after training: 0.75
User 62553 does not improve AUC. Reverting changes.
Training on augumented user 20108 17/50 current_auc = 0.75
User 20108 AUC after training: 0.75
User 20108 does not improve AUC. Reverting changes.
Training on augumented user 36438 18/50 current_auc = 0.75
User 36438 AUC after training: 0.75
User 36438 does not improve AUC. Reverting changes.
Training on augumented user 2094 19/50 current_auc = 0.75
User 2094 AUC after training: 0.75
User 2094 does not improve AUC. Reverting changes.
Training on augumented user 131325 20/50 current_auc = 0.75
User 131325 AUC after training: 0.75
User 131325 does not improve AUC. Reverting changes.
Training on augumented user 100013 21/50 current_auc = 0.75
User 100013 AUC after training: 0.75
User 100013 does not improve AUC. Reverting changes.
Training on augumented user 30290 22/50 current_auc = 0.75
User 30290 AUC after training: 0.75
User 30290 does not improve AUC. Reverting changes.
Training on augumented user 86321 23/50 current_auc = 0.75
User 86321 AUC after training: 0.75
User 86321 does not improve AUC. Reverting changes.
Training on augumented user 40681 24/50 current_auc = 0.75
User 40681 AUC after training: 0.75
User 40681 does not improve AUC. Reverting changes.
Training on augumented user 100399 25/50 current_auc = 0.75
User 100399 AUC after training: 0.75
User 100399 does not improve AUC. Reverting changes.
Training on augumented user 52165 26/50 current_auc = 0.75
User 52165 AUC after training: 0.75
User 52165 does not improve AUC. Reverting changes.
Training on augumented user 24242 27/50 current_auc = 0.75
User 24242 AUC after training: 0.75
User 24242 does not improve AUC. Reverting changes.
Training on augumented user 105854 28/50 current_auc = 0.75
User 105854 AUC after training: 0.75
User 105854 does not improve AUC. Reverting changes.
Training on augumented user 60026 29/50 current_auc = 0.75
User 60026 AUC after training: 0.75
User 60026 does not improve AUC. Reverting changes.
Training on augumented user 122509 30/50 current_auc = 0.75
User 122509 AUC after training: 0.75
User 122509 does not improve AUC. Reverting changes.
Training on augumented user 101492 31/50 current_auc = 0.75
User 101492 AUC after training: 0.75
User 101492 does not improve AUC. Reverting changes.
Training on augumented user 61476 32/50 current_auc = 0.75
User 61476 AUC after training: 0.75
User 61476 does not improve AUC. Reverting changes.
Training on augumented user 13172 33/50 current_auc = 0.75
User 13172 AUC after training: 0.75
User 13172 does not improve AUC. Reverting changes.
Training on augumented user 128710 34/50 current_auc = 0.75
User 128710 AUC after training: 0.75
User 128710 does not improve AUC. Reverting changes.
Training on augumented user 104646 35/50 current_auc = 0.75
User 104646 AUC after training: 0.75
User 104646 does not improve AUC. Reverting changes.
Training on augumented user 105752 36/50 current_auc = 0.75
User 105752 AUC after training: 0.75
User 105752 does not improve AUC. Reverting changes.
Training on augumented user 117337 37/50 current_auc = 0.75
User 117337 AUC after training: 0.75
User 117337 does not improve AUC. Reverting changes.
Training on augumented user 7089 38/50 current_auc = 0.75
User 7089 AUC after training: 0.75
User 7089 does not improve AUC. Reverting changes.
Training on augumented user 101452 39/50 current_auc = 0.75
User 101452 AUC after training: 0.75
User 101452 does not improve AUC. Reverting changes.
Training on augumented user 8779 40/50 current_auc = 0.75
User 8779 AUC after training: 0.75
User 8779 does not improve AUC. Reverting changes.
Training on augumented user 5564 41/50 current_auc = 0.75
User 5564 AUC after training: 0.75
User 5564 does not improve AUC. Reverting changes.
Training on augumented user 83520 42/50 current_auc = 0.75
User 83520 AUC after training: 0.75
User 83520 does not improve AUC. Reverting changes.
Training on augumented user 129369 43/50 current_auc = 0.75
User 129369 AUC after training: 0.75
User 129369 does not improve AUC. Reverting changes.
Training on augumented user 7668 44/50 current_auc = 0.75
User 7668 AUC after training: 0.75
User 7668 does not improve AUC. Reverting changes.
Training on augumented user 45308 45/50 current_auc = 0.75
User 45308 AUC after training: 0.75
User 45308 does not improve AUC. Reverting changes.
Training on augumented user 25052 46/50 current_auc = 0.75
User 25052 AUC after training: 0.75
User 25052 does not improve AUC. Reverting changes.
Training on augumented user 19790 47/50 current_auc = 0.75
User 19790 AUC after training: 0.75
User 19790 does not improve AUC. Reverting changes.
Training on augumented user 8900 48/50 current_auc = 0.75
User 8900 AUC after training: 0.75
User 8900 does not improve AUC. Reverting changes.
Training on augumented user 3060 49/50 current_auc = 0.75
User 3060 AUC after training: 0.75
User 3060 does not improve AUC. Reverting changes.
[2024-12-02 18:56:06.065462] start test user 127596 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:06.510891] start test user 127596 144/567 recall augumented users by random, augumented_users = [95548, 72494, 87610, 84247, 15757, 106005, 89014, 129468, 31100, 60196, 25243, 99716, 37049, 39147, 48392, 20691, 10893, 40276, 107407, 124427, 135127, 101933, 85132, 12467, 117276, 100556, 73999, 78948, 93404, 46200, 751, 130991, 81841, 106488, 86319, 130245, 13983, 135696, 107681, 94860, 60850, 74152, 30794, 117411, 40255, 129876, 136551, 132606, 16510, 14244]
[2024-12-02 18:56:06.526825] user = 127596 Cloud 144/567
[2024-12-02 18:56:06.537679] user = 127596 Local 144/567
[2024-12-02 18:56:06.565084] user = 127596 Local+ 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:08.792707] user = 127596 MPDA- 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5784615384615385
Training on augumented user 95548 0/50 current_auc = 0.5784615384615385
User 95548 AUC after training: 0.5815384615384614
User 95548 improves AUC. Keeping the model.
Training on augumented user 72494 1/50 current_auc = 0.5815384615384614
User 72494 AUC after training: 0.5815384615384614
User 72494 does not improve AUC. Reverting changes.
Training on augumented user 87610 2/50 current_auc = 0.5815384615384614
User 87610 AUC after training: 0.5815384615384614
User 87610 does not improve AUC. Reverting changes.
Training on augumented user 84247 3/50 current_auc = 0.5815384615384614
User 84247 AUC after training: 0.5784615384615385
User 84247 does not improve AUC. Reverting changes.
Training on augumented user 15757 4/50 current_auc = 0.5815384615384614
User 15757 AUC after training: 0.5815384615384614
User 15757 does not improve AUC. Reverting changes.
Training on augumented user 106005 5/50 current_auc = 0.5815384615384614
User 106005 AUC after training: 0.5753846153846153
User 106005 does not improve AUC. Reverting changes.
Training on augumented user 89014 6/50 current_auc = 0.5815384615384614
User 89014 AUC after training: 0.5815384615384614
User 89014 does not improve AUC. Reverting changes.
Training on augumented user 129468 7/50 current_auc = 0.5815384615384614
User 129468 AUC after training: 0.5815384615384614
User 129468 does not improve AUC. Reverting changes.
Training on augumented user 31100 8/50 current_auc = 0.5815384615384614
User 31100 AUC after training: 0.5815384615384614
User 31100 does not improve AUC. Reverting changes.
Training on augumented user 60196 9/50 current_auc = 0.5815384615384614
User 60196 AUC after training: 0.5815384615384614
User 60196 does not improve AUC. Reverting changes.
Training on augumented user 25243 10/50 current_auc = 0.5815384615384614
User 25243 AUC after training: 0.5815384615384614
User 25243 does not improve AUC. Reverting changes.
Training on augumented user 99716 11/50 current_auc = 0.5815384615384614
User 99716 AUC after training: 0.5753846153846154
User 99716 does not improve AUC. Reverting changes.
Training on augumented user 37049 12/50 current_auc = 0.5815384615384614
User 37049 AUC after training: 0.5784615384615385
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 39147 13/50 current_auc = 0.5815384615384614
User 39147 AUC after training: 0.5846153846153846
User 39147 improves AUC. Keeping the model.
Training on augumented user 48392 14/50 current_auc = 0.5846153846153846
User 48392 AUC after training: 0.5846153846153845
User 48392 does not improve AUC. Reverting changes.
Training on augumented user 20691 15/50 current_auc = 0.5846153846153846
User 20691 AUC after training: 0.5846153846153846
User 20691 does not improve AUC. Reverting changes.
Training on augumented user 10893 16/50 current_auc = 0.5846153846153846
User 10893 AUC after training: 0.5846153846153846
User 10893 does not improve AUC. Reverting changes.
Training on augumented user 40276 17/50 current_auc = 0.5846153846153846
User 40276 AUC after training: 0.5815384615384614
User 40276 does not improve AUC. Reverting changes.
Training on augumented user 107407 18/50 current_auc = 0.5846153846153846
User 107407 AUC after training: 0.5846153846153846
User 107407 does not improve AUC. Reverting changes.
Training on augumented user 124427 19/50 current_auc = 0.5846153846153846
User 124427 AUC after training: 0.5846153846153846
User 124427 does not improve AUC. Reverting changes.
Training on augumented user 135127 20/50 current_auc = 0.5846153846153846
User 135127 AUC after training: 0.5846153846153846
User 135127 does not improve AUC. Reverting changes.
Training on augumented user 101933 21/50 current_auc = 0.5846153846153846
User 101933 AUC after training: 0.5815384615384614
User 101933 does not improve AUC. Reverting changes.
Training on augumented user 85132 22/50 current_auc = 0.5846153846153846
User 85132 AUC after training: 0.5815384615384616
User 85132 does not improve AUC. Reverting changes.
Training on augumented user 12467 23/50 current_auc = 0.5846153846153846
User 12467 AUC after training: 0.5846153846153846
User 12467 does not improve AUC. Reverting changes.
Training on augumented user 117276 24/50 current_auc = 0.5846153846153846
User 117276 AUC after training: 0.5753846153846153
User 117276 does not improve AUC. Reverting changes.
Training on augumented user 100556 25/50 current_auc = 0.5846153846153846
User 100556 AUC after training: 0.5538461538461538
User 100556 does not improve AUC. Reverting changes.
Training on augumented user 73999 26/50 current_auc = 0.5846153846153846
User 73999 AUC after training: 0.5846153846153846
User 73999 does not improve AUC. Reverting changes.
Training on augumented user 78948 27/50 current_auc = 0.5846153846153846
User 78948 AUC after training: 0.5784615384615385
User 78948 does not improve AUC. Reverting changes.
Training on augumented user 93404 28/50 current_auc = 0.5846153846153846
User 93404 AUC after training: 0.5692307692307692
User 93404 does not improve AUC. Reverting changes.
Training on augumented user 46200 29/50 current_auc = 0.5846153846153846
User 46200 AUC after training: 0.5846153846153846
User 46200 does not improve AUC. Reverting changes.
Training on augumented user 751 30/50 current_auc = 0.5846153846153846
User 751 AUC after training: 0.5846153846153846
User 751 does not improve AUC. Reverting changes.
Training on augumented user 130991 31/50 current_auc = 0.5846153846153846
User 130991 AUC after training: 0.5815384615384614
User 130991 does not improve AUC. Reverting changes.
Training on augumented user 81841 32/50 current_auc = 0.5846153846153846
User 81841 AUC after training: 0.5846153846153846
User 81841 does not improve AUC. Reverting changes.
Training on augumented user 106488 33/50 current_auc = 0.5846153846153846
User 106488 AUC after training: 0.5846153846153846
User 106488 does not improve AUC. Reverting changes.
Training on augumented user 86319 34/50 current_auc = 0.5846153846153846
User 86319 AUC after training: 0.5815384615384614
User 86319 does not improve AUC. Reverting changes.
Training on augumented user 130245 35/50 current_auc = 0.5846153846153846
User 130245 AUC after training: 0.5784615384615385
User 130245 does not improve AUC. Reverting changes.
Training on augumented user 13983 36/50 current_auc = 0.5846153846153846
User 13983 AUC after training: 0.5846153846153846
User 13983 does not improve AUC. Reverting changes.
Training on augumented user 135696 37/50 current_auc = 0.5846153846153846
User 135696 AUC after training: 0.5815384615384616
User 135696 does not improve AUC. Reverting changes.
Training on augumented user 107681 38/50 current_auc = 0.5846153846153846
User 107681 AUC after training: 0.5815384615384614
User 107681 does not improve AUC. Reverting changes.
Training on augumented user 94860 39/50 current_auc = 0.5846153846153846
User 94860 AUC after training: 0.5846153846153846
User 94860 does not improve AUC. Reverting changes.
Training on augumented user 60850 40/50 current_auc = 0.5846153846153846
User 60850 AUC after training: 0.5815384615384614
User 60850 does not improve AUC. Reverting changes.
Training on augumented user 74152 41/50 current_auc = 0.5846153846153846
User 74152 AUC after training: 0.5815384615384614
User 74152 does not improve AUC. Reverting changes.
Training on augumented user 30794 42/50 current_auc = 0.5846153846153846
User 30794 AUC after training: 0.5815384615384614
User 30794 does not improve AUC. Reverting changes.
Training on augumented user 117411 43/50 current_auc = 0.5846153846153846
User 117411 AUC after training: 0.5876923076923077
User 117411 improves AUC. Keeping the model.
Training on augumented user 40255 44/50 current_auc = 0.5876923076923077
User 40255 AUC after training: 0.5876923076923077
User 40255 does not improve AUC. Reverting changes.
Training on augumented user 129876 45/50 current_auc = 0.5876923076923077
User 129876 AUC after training: 0.5876923076923077
User 129876 does not improve AUC. Reverting changes.
Training on augumented user 136551 46/50 current_auc = 0.5876923076923077
User 136551 AUC after training: 0.5846153846153845
User 136551 does not improve AUC. Reverting changes.
Training on augumented user 132606 47/50 current_auc = 0.5876923076923077
User 132606 AUC after training: 0.5846153846153846
User 132606 does not improve AUC. Reverting changes.
Training on augumented user 16510 48/50 current_auc = 0.5876923076923077
User 16510 AUC after training: 0.5907692307692307
User 16510 improves AUC. Keeping the model.
Training on augumented user 14244 49/50 current_auc = 0.5907692307692307
User 14244 AUC after training: 0.5876923076923076
User 14244 does not improve AUC. Reverting changes.
[2024-12-02 18:56:38.962627] start test user 127601 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:39.646344] start test user 127601 145/567 recall augumented users by random, augumented_users = [46611, 9363, 10683, 32585, 106322, 61554, 66860, 53745, 32170, 44435, 29243, 79891, 77423, 27318, 42079, 21681, 130633, 16234, 71363, 132450, 67914, 76690, 9834, 5295, 85676, 113047, 48451, 51615, 65590, 66399, 84361, 118361, 33880, 85017, 104262, 114208, 112185, 67990, 17844, 134116, 29312, 5960, 89534, 79996, 23344, 80420, 117494, 133068, 129065, 85814]
[2024-12-02 18:56:39.661097] user = 127601 Cloud 145/567
[2024-12-02 18:56:39.693762] user = 127601 Local 145/567
[2024-12-02 18:56:39.740169] user = 127601 Local+ 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:41.636289] user = 127601 MPDA- 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5395955395955396
Training on augumented user 46611 0/50 current_auc = 0.5395955395955396
User 46611 AUC after training: 0.54002754002754
User 46611 improves AUC. Keeping the model.
Training on augumented user 9363 1/50 current_auc = 0.54002754002754
User 9363 AUC after training: 0.5397305397305397
User 9363 does not improve AUC. Reverting changes.
Training on augumented user 10683 2/50 current_auc = 0.54002754002754
User 10683 AUC after training: 0.5394335394335394
User 10683 does not improve AUC. Reverting changes.
Training on augumented user 32585 3/50 current_auc = 0.54002754002754
User 32585 AUC after training: 0.5405135405135405
User 32585 improves AUC. Keeping the model.
Training on augumented user 106322 4/50 current_auc = 0.5405135405135405
User 106322 AUC after training: 0.5408105408105408
User 106322 improves AUC. Keeping the model.
Training on augumented user 61554 5/50 current_auc = 0.5408105408105408
User 61554 AUC after training: 0.5405945405945405
User 61554 does not improve AUC. Reverting changes.
Training on augumented user 66860 6/50 current_auc = 0.5408105408105408
User 66860 AUC after training: 0.5409455409455409
User 66860 improves AUC. Keeping the model.
Training on augumented user 53745 7/50 current_auc = 0.5409455409455409
User 53745 AUC after training: 0.5412965412965413
User 53745 improves AUC. Keeping the model.
Training on augumented user 32170 8/50 current_auc = 0.5412965412965413
User 32170 AUC after training: 0.541053541053541
User 32170 does not improve AUC. Reverting changes.
Training on augumented user 44435 9/50 current_auc = 0.5412965412965413
User 44435 AUC after training: 0.5414315414315414
User 44435 improves AUC. Keeping the model.
Training on augumented user 29243 10/50 current_auc = 0.5414315414315414
User 29243 AUC after training: 0.5411885411885413
User 29243 does not improve AUC. Reverting changes.
Training on augumented user 79891 11/50 current_auc = 0.5414315414315414
User 79891 AUC after training: 0.541107541107541
User 79891 does not improve AUC. Reverting changes.
Training on augumented user 77423 12/50 current_auc = 0.5414315414315414
User 77423 AUC after training: 0.5416745416745417
User 77423 improves AUC. Keeping the model.
Training on augumented user 27318 13/50 current_auc = 0.5416745416745417
User 27318 AUC after training: 0.5414045414045413
User 27318 does not improve AUC. Reverting changes.
Training on augumented user 42079 14/50 current_auc = 0.5416745416745417
User 42079 AUC after training: 0.5413775413775413
User 42079 does not improve AUC. Reverting changes.
Training on augumented user 21681 15/50 current_auc = 0.5416745416745417
User 21681 AUC after training: 0.5415665415665415
User 21681 does not improve AUC. Reverting changes.
Training on augumented user 130633 16/50 current_auc = 0.5416745416745417
User 130633 AUC after training: 0.5419445419445419
User 130633 improves AUC. Keeping the model.
Training on augumented user 16234 17/50 current_auc = 0.5419445419445419
User 16234 AUC after training: 0.5419445419445419
User 16234 does not improve AUC. Reverting changes.
Training on augumented user 71363 18/50 current_auc = 0.5419445419445419
User 71363 AUC after training: 0.542052542052542
User 71363 improves AUC. Keeping the model.
Training on augumented user 132450 19/50 current_auc = 0.542052542052542
User 132450 AUC after training: 0.5414855414855415
User 132450 does not improve AUC. Reverting changes.
Training on augumented user 67914 20/50 current_auc = 0.542052542052542
User 67914 AUC after training: 0.542039042039042
User 67914 does not improve AUC. Reverting changes.
Training on augumented user 76690 21/50 current_auc = 0.542052542052542
User 76690 AUC after training: 0.5415125415125415
User 76690 does not improve AUC. Reverting changes.
Training on augumented user 9834 22/50 current_auc = 0.542052542052542
User 9834 AUC after training: 0.5423900423900424
User 9834 improves AUC. Keeping the model.
Training on augumented user 5295 23/50 current_auc = 0.5423900423900424
User 5295 AUC after training: 0.5424170424170424
User 5295 improves AUC. Keeping the model.
Training on augumented user 85676 24/50 current_auc = 0.5424170424170424
User 85676 AUC after training: 0.5444285444285444
User 85676 improves AUC. Keeping the model.
Training on augumented user 113047 25/50 current_auc = 0.5444285444285444
User 113047 AUC after training: 0.5441990441990441
User 113047 does not improve AUC. Reverting changes.
Training on augumented user 48451 26/50 current_auc = 0.5444285444285444
User 48451 AUC after training: 0.5437670437670437
User 48451 does not improve AUC. Reverting changes.
Training on augumented user 51615 27/50 current_auc = 0.5444285444285444
User 51615 AUC after training: 0.543996543996544
User 51615 does not improve AUC. Reverting changes.
Training on augumented user 65590 28/50 current_auc = 0.5444285444285444
User 65590 AUC after training: 0.5439695439695439
User 65590 does not improve AUC. Reverting changes.
Training on augumented user 66399 29/50 current_auc = 0.5444285444285444
User 66399 AUC after training: 0.5436185436185437
User 66399 does not improve AUC. Reverting changes.
Training on augumented user 84361 30/50 current_auc = 0.5444285444285444
User 84361 AUC after training: 0.5429975429975429
User 84361 does not improve AUC. Reverting changes.
Training on augumented user 118361 31/50 current_auc = 0.5444285444285444
User 118361 AUC after training: 0.5444150444150443
User 118361 does not improve AUC. Reverting changes.
Training on augumented user 33880 32/50 current_auc = 0.5444285444285444
User 33880 AUC after training: 0.5442800442800443
User 33880 does not improve AUC. Reverting changes.
Training on augumented user 85017 33/50 current_auc = 0.5444285444285444
User 85017 AUC after training: 0.544077544077544
User 85017 does not improve AUC. Reverting changes.
Training on augumented user 104262 34/50 current_auc = 0.5444285444285444
User 104262 AUC after training: 0.5443745443745444
User 104262 does not improve AUC. Reverting changes.
Training on augumented user 114208 35/50 current_auc = 0.5444285444285444
User 114208 AUC after training: 0.5438345438345438
User 114208 does not improve AUC. Reverting changes.
Training on augumented user 112185 36/50 current_auc = 0.5444285444285444
User 112185 AUC after training: 0.5446445446445446
User 112185 improves AUC. Keeping the model.
Training on augumented user 67990 37/50 current_auc = 0.5446445446445446
User 67990 AUC after training: 0.5436050436050436
User 67990 does not improve AUC. Reverting changes.
Training on augumented user 17844 38/50 current_auc = 0.5446445446445446
User 17844 AUC after training: 0.5442665442665443
User 17844 does not improve AUC. Reverting changes.
Training on augumented user 134116 39/50 current_auc = 0.5446445446445446
User 134116 AUC after training: 0.5443340443340443
User 134116 does not improve AUC. Reverting changes.
Training on augumented user 29312 40/50 current_auc = 0.5446445446445446
User 29312 AUC after training: 0.5443880443880444
User 29312 does not improve AUC. Reverting changes.
Training on augumented user 5960 41/50 current_auc = 0.5446445446445446
User 5960 AUC after training: 0.5436455436455436
User 5960 does not improve AUC. Reverting changes.
Training on augumented user 89534 42/50 current_auc = 0.5446445446445446
User 89534 AUC after training: 0.5441990441990442
User 89534 does not improve AUC. Reverting changes.
Training on augumented user 79996 43/50 current_auc = 0.5446445446445446
User 79996 AUC after training: 0.5446040446040445
User 79996 does not improve AUC. Reverting changes.
Training on augumented user 23344 44/50 current_auc = 0.5446445446445446
User 23344 AUC after training: 0.5444285444285445
User 23344 does not improve AUC. Reverting changes.
Training on augumented user 80420 45/50 current_auc = 0.5446445446445446
User 80420 AUC after training: 0.5452385452385452
User 80420 improves AUC. Keeping the model.
Training on augumented user 117494 46/50 current_auc = 0.5452385452385452
User 117494 AUC after training: 0.5454545454545454
User 117494 improves AUC. Keeping the model.
Training on augumented user 133068 47/50 current_auc = 0.5454545454545454
User 133068 AUC after training: 0.545130545130545
User 133068 does not improve AUC. Reverting changes.
Training on augumented user 129065 48/50 current_auc = 0.5454545454545454
User 129065 AUC after training: 0.5457920457920458
User 129065 improves AUC. Keeping the model.
Training on augumented user 85814 49/50 current_auc = 0.5457920457920458
User 85814 AUC after training: 0.545144045144045
User 85814 does not improve AUC. Reverting changes.
[2024-12-02 18:57:13.380822] start test user 127624 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:13.865111] start test user 127624 146/567 recall augumented users by random, augumented_users = [102292, 108196, 80576, 120300, 104384, 116163, 88988, 72966, 43634, 136154, 47146, 91709, 53034, 86069, 136964, 109398, 130824, 84566, 25115, 13209, 42852, 80843, 84383, 9630, 114233, 70859, 111059, 36175, 111595, 126793, 89608, 68616, 99912, 55188, 102358, 77931, 116240, 41802, 91146, 136209, 135460, 31987, 127932, 104504, 87547, 58085, 68050, 74262, 8919, 14184]
[2024-12-02 18:57:13.880289] user = 127624 Cloud 146/567
[2024-12-02 18:57:13.890421] user = 127624 Local 146/567
[2024-12-02 18:57:13.916382] user = 127624 Local+ 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:15.650636] user = 127624 MPDA- 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5962962962962963
Training on augumented user 102292 0/50 current_auc = 0.5962962962962963
User 102292 AUC after training: 0.5962962962962963
User 102292 does not improve AUC. Reverting changes.
Training on augumented user 108196 1/50 current_auc = 0.5962962962962963
User 108196 AUC after training: 0.5962962962962963
User 108196 does not improve AUC. Reverting changes.
Training on augumented user 80576 2/50 current_auc = 0.5962962962962963
User 80576 AUC after training: 0.5962962962962963
User 80576 does not improve AUC. Reverting changes.
Training on augumented user 120300 3/50 current_auc = 0.5962962962962963
User 120300 AUC after training: 0.5962962962962963
User 120300 does not improve AUC. Reverting changes.
Training on augumented user 104384 4/50 current_auc = 0.5962962962962963
User 104384 AUC after training: 0.5962962962962963
User 104384 does not improve AUC. Reverting changes.
Training on augumented user 116163 5/50 current_auc = 0.5962962962962963
User 116163 AUC after training: 0.5962962962962963
User 116163 does not improve AUC. Reverting changes.
Training on augumented user 88988 6/50 current_auc = 0.5962962962962963
User 88988 AUC after training: 0.6037037037037037
User 88988 improves AUC. Keeping the model.
Training on augumented user 72966 7/50 current_auc = 0.6037037037037037
User 72966 AUC after training: 0.5962962962962963
User 72966 does not improve AUC. Reverting changes.
Training on augumented user 43634 8/50 current_auc = 0.6037037037037037
User 43634 AUC after training: 0.5962962962962963
User 43634 does not improve AUC. Reverting changes.
Training on augumented user 136154 9/50 current_auc = 0.6037037037037037
User 136154 AUC after training: 0.6037037037037037
User 136154 does not improve AUC. Reverting changes.
Training on augumented user 47146 10/50 current_auc = 0.6037037037037037
User 47146 AUC after training: 0.5962962962962963
User 47146 does not improve AUC. Reverting changes.
Training on augumented user 91709 11/50 current_auc = 0.6037037037037037
User 91709 AUC after training: 0.6
User 91709 does not improve AUC. Reverting changes.
Training on augumented user 53034 12/50 current_auc = 0.6037037037037037
User 53034 AUC after training: 0.5962962962962963
User 53034 does not improve AUC. Reverting changes.
Training on augumented user 86069 13/50 current_auc = 0.6037037037037037
User 86069 AUC after training: 0.6037037037037037
User 86069 does not improve AUC. Reverting changes.
Training on augumented user 136964 14/50 current_auc = 0.6037037037037037
User 136964 AUC after training: 0.5962962962962963
User 136964 does not improve AUC. Reverting changes.
Training on augumented user 109398 15/50 current_auc = 0.6037037037037037
User 109398 AUC after training: 0.6037037037037037
User 109398 does not improve AUC. Reverting changes.
Training on augumented user 130824 16/50 current_auc = 0.6037037037037037
User 130824 AUC after training: 0.6037037037037037
User 130824 does not improve AUC. Reverting changes.
Training on augumented user 84566 17/50 current_auc = 0.6037037037037037
User 84566 AUC after training: 0.5962962962962963
User 84566 does not improve AUC. Reverting changes.
Training on augumented user 25115 18/50 current_auc = 0.6037037037037037
User 25115 AUC after training: 0.5962962962962963
User 25115 does not improve AUC. Reverting changes.
Training on augumented user 13209 19/50 current_auc = 0.6037037037037037
User 13209 AUC after training: 0.5962962962962963
User 13209 does not improve AUC. Reverting changes.
Training on augumented user 42852 20/50 current_auc = 0.6037037037037037
User 42852 AUC after training: 0.5962962962962963
User 42852 does not improve AUC. Reverting changes.
Training on augumented user 80843 21/50 current_auc = 0.6037037037037037
User 80843 AUC after training: 0.6037037037037037
User 80843 does not improve AUC. Reverting changes.
Training on augumented user 84383 22/50 current_auc = 0.6037037037037037
User 84383 AUC after training: 0.6037037037037037
User 84383 does not improve AUC. Reverting changes.
Training on augumented user 9630 23/50 current_auc = 0.6037037037037037
User 9630 AUC after training: 0.5962962962962963
User 9630 does not improve AUC. Reverting changes.
Training on augumented user 114233 24/50 current_auc = 0.6037037037037037
User 114233 AUC after training: 0.6037037037037037
User 114233 does not improve AUC. Reverting changes.
Training on augumented user 70859 25/50 current_auc = 0.6037037037037037
User 70859 AUC after training: 0.6037037037037037
User 70859 does not improve AUC. Reverting changes.
Training on augumented user 111059 26/50 current_auc = 0.6037037037037037
User 111059 AUC after training: 0.5962962962962963
User 111059 does not improve AUC. Reverting changes.
Training on augumented user 36175 27/50 current_auc = 0.6037037037037037
User 36175 AUC after training: 0.6037037037037037
User 36175 does not improve AUC. Reverting changes.
Training on augumented user 111595 28/50 current_auc = 0.6037037037037037
User 111595 AUC after training: 0.6037037037037037
User 111595 does not improve AUC. Reverting changes.
Training on augumented user 126793 29/50 current_auc = 0.6037037037037037
User 126793 AUC after training: 0.6037037037037037
User 126793 does not improve AUC. Reverting changes.
Training on augumented user 89608 30/50 current_auc = 0.6037037037037037
User 89608 AUC after training: 0.5962962962962963
User 89608 does not improve AUC. Reverting changes.
Training on augumented user 68616 31/50 current_auc = 0.6037037037037037
User 68616 AUC after training: 0.6037037037037037
User 68616 does not improve AUC. Reverting changes.
Training on augumented user 99912 32/50 current_auc = 0.6037037037037037
User 99912 AUC after training: 0.6037037037037037
User 99912 does not improve AUC. Reverting changes.
Training on augumented user 55188 33/50 current_auc = 0.6037037037037037
User 55188 AUC after training: 0.5962962962962963
User 55188 does not improve AUC. Reverting changes.
Training on augumented user 102358 34/50 current_auc = 0.6037037037037037
User 102358 AUC after training: 0.6037037037037037
User 102358 does not improve AUC. Reverting changes.
Training on augumented user 77931 35/50 current_auc = 0.6037037037037037
User 77931 AUC after training: 0.5962962962962963
User 77931 does not improve AUC. Reverting changes.
Training on augumented user 116240 36/50 current_auc = 0.6037037037037037
User 116240 AUC after training: 0.5962962962962963
User 116240 does not improve AUC. Reverting changes.
Training on augumented user 41802 37/50 current_auc = 0.6037037037037037
User 41802 AUC after training: 0.5962962962962963
User 41802 does not improve AUC. Reverting changes.
Training on augumented user 91146 38/50 current_auc = 0.6037037037037037
User 91146 AUC after training: 0.5925925925925926
User 91146 does not improve AUC. Reverting changes.
Training on augumented user 136209 39/50 current_auc = 0.6037037037037037
User 136209 AUC after training: 0.6037037037037037
User 136209 does not improve AUC. Reverting changes.
Training on augumented user 135460 40/50 current_auc = 0.6037037037037037
User 135460 AUC after training: 0.5962962962962963
User 135460 does not improve AUC. Reverting changes.
Training on augumented user 31987 41/50 current_auc = 0.6037037037037037
User 31987 AUC after training: 0.6037037037037037
User 31987 does not improve AUC. Reverting changes.
Training on augumented user 127932 42/50 current_auc = 0.6037037037037037
User 127932 AUC after training: 0.5962962962962963
User 127932 does not improve AUC. Reverting changes.
Training on augumented user 104504 43/50 current_auc = 0.6037037037037037
User 104504 AUC after training: 0.6037037037037037
User 104504 does not improve AUC. Reverting changes.
Training on augumented user 87547 44/50 current_auc = 0.6037037037037037
User 87547 AUC after training: 0.5962962962962963
User 87547 does not improve AUC. Reverting changes.
Training on augumented user 58085 45/50 current_auc = 0.6037037037037037
User 58085 AUC after training: 0.5962962962962963
User 58085 does not improve AUC. Reverting changes.
Training on augumented user 68050 46/50 current_auc = 0.6037037037037037
User 68050 AUC after training: 0.6037037037037037
User 68050 does not improve AUC. Reverting changes.
Training on augumented user 74262 47/50 current_auc = 0.6037037037037037
User 74262 AUC after training: 0.5962962962962963
User 74262 does not improve AUC. Reverting changes.
Training on augumented user 8919 48/50 current_auc = 0.6037037037037037
User 8919 AUC after training: 0.5962962962962963
User 8919 does not improve AUC. Reverting changes.
Training on augumented user 14184 49/50 current_auc = 0.6037037037037037
User 14184 AUC after training: 0.6037037037037037
User 14184 does not improve AUC. Reverting changes.
[2024-12-02 18:57:38.631193] start test user 127689 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:39.065063] start test user 127689 147/567 recall augumented users by random, augumented_users = [118339, 122367, 56307, 120020, 63663, 59905, 86283, 25535, 102698, 131832, 115171, 113057, 82929, 3978, 73489, 45766, 29198, 26957, 23145, 90179, 25863, 93411, 90440, 12631, 59658, 75128, 49931, 1601, 113662, 26182, 73608, 35187, 99637, 102259, 115745, 127416, 96064, 71619, 92433, 113254, 98357, 26786, 8564, 22914, 65631, 48047, 91853, 106328, 34342, 19107]
[2024-12-02 18:57:39.081851] user = 127689 Cloud 147/567
[2024-12-02 18:57:39.116651] user = 127689 Local 147/567
[2024-12-02 18:57:39.256283] user = 127689 Local+ 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:42.346948] user = 127689 MPDA- 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5225474683544304
Training on augumented user 118339 0/50 current_auc = 0.5225474683544304
User 118339 AUC after training: 0.521756329113924
User 118339 does not improve AUC. Reverting changes.
Training on augumented user 122367 1/50 current_auc = 0.5225474683544304
User 122367 AUC after training: 0.5224683544303798
User 122367 does not improve AUC. Reverting changes.
Training on augumented user 56307 2/50 current_auc = 0.5225474683544304
User 56307 AUC after training: 0.522626582278481
User 56307 improves AUC. Keeping the model.
Training on augumented user 120020 3/50 current_auc = 0.522626582278481
User 120020 AUC after training: 0.5235759493670886
User 120020 improves AUC. Keeping the model.
Training on augumented user 63663 4/50 current_auc = 0.5235759493670886
User 63663 AUC after training: 0.5234177215189874
User 63663 does not improve AUC. Reverting changes.
Training on augumented user 59905 5/50 current_auc = 0.5235759493670886
User 59905 AUC after training: 0.5232594936708861
User 59905 does not improve AUC. Reverting changes.
Training on augumented user 86283 6/50 current_auc = 0.5235759493670886
User 86283 AUC after training: 0.5237341772151899
User 86283 improves AUC. Keeping the model.
Training on augumented user 25535 7/50 current_auc = 0.5237341772151899
User 25535 AUC after training: 0.524367088607595
User 25535 improves AUC. Keeping the model.
Training on augumented user 102698 8/50 current_auc = 0.524367088607595
User 102698 AUC after training: 0.5225474683544303
User 102698 does not improve AUC. Reverting changes.
Training on augumented user 131832 9/50 current_auc = 0.524367088607595
User 131832 AUC after training: 0.5242088607594937
User 131832 does not improve AUC. Reverting changes.
Training on augumented user 115171 10/50 current_auc = 0.524367088607595
User 115171 AUC after training: 0.5246044303797468
User 115171 improves AUC. Keeping the model.
Training on augumented user 113057 11/50 current_auc = 0.5246044303797468
User 113057 AUC after training: 0.5239715189873417
User 113057 does not improve AUC. Reverting changes.
Training on augumented user 82929 12/50 current_auc = 0.5246044303797468
User 82929 AUC after training: 0.5251582278481013
User 82929 improves AUC. Keeping the model.
Training on augumented user 3978 13/50 current_auc = 0.5251582278481013
User 3978 AUC after training: 0.5276898734177214
User 3978 improves AUC. Keeping the model.
Training on augumented user 73489 14/50 current_auc = 0.5276898734177214
User 73489 AUC after training: 0.5251582278481013
User 73489 does not improve AUC. Reverting changes.
Training on augumented user 45766 15/50 current_auc = 0.5276898734177214
User 45766 AUC after training: 0.5268987341772152
User 45766 does not improve AUC. Reverting changes.
Training on augumented user 29198 16/50 current_auc = 0.5276898734177214
User 29198 AUC after training: 0.527373417721519
User 29198 does not improve AUC. Reverting changes.
Training on augumented user 26957 17/50 current_auc = 0.5276898734177214
User 26957 AUC after training: 0.5275316455696203
User 26957 does not improve AUC. Reverting changes.
Training on augumented user 23145 18/50 current_auc = 0.5276898734177214
User 23145 AUC after training: 0.52626582278481
User 23145 does not improve AUC. Reverting changes.
Training on augumented user 90179 19/50 current_auc = 0.5276898734177214
User 90179 AUC after training: 0.528006329113924
User 90179 improves AUC. Keeping the model.
Training on augumented user 25863 20/50 current_auc = 0.528006329113924
User 25863 AUC after training: 0.5280063291139241
User 25863 improves AUC. Keeping the model.
Training on augumented user 93411 21/50 current_auc = 0.5280063291139241
User 93411 AUC after training: 0.5278481012658227
User 93411 does not improve AUC. Reverting changes.
Training on augumented user 90440 22/50 current_auc = 0.5280063291139241
User 90440 AUC after training: 0.5284810126582279
User 90440 improves AUC. Keeping the model.
Training on augumented user 12631 23/50 current_auc = 0.5284810126582279
User 12631 AUC after training: 0.529113924050633
User 12631 improves AUC. Keeping the model.
Training on augumented user 59658 24/50 current_auc = 0.529113924050633
User 59658 AUC after training: 0.525
User 59658 does not improve AUC. Reverting changes.
Training on augumented user 75128 25/50 current_auc = 0.529113924050633
User 75128 AUC after training: 0.5299050632911392
User 75128 improves AUC. Keeping the model.
Training on augumented user 49931 26/50 current_auc = 0.5299050632911392
User 49931 AUC after training: 0.5297468354430379
User 49931 does not improve AUC. Reverting changes.
Training on augumented user 1601 27/50 current_auc = 0.5299050632911392
User 1601 AUC after training: 0.5282436708860759
User 1601 does not improve AUC. Reverting changes.
Training on augumented user 113662 28/50 current_auc = 0.5299050632911392
User 113662 AUC after training: 0.5287974683544304
User 113662 does not improve AUC. Reverting changes.
Training on augumented user 26182 29/50 current_auc = 0.5299050632911392
User 26182 AUC after training: 0.5294303797468355
User 26182 does not improve AUC. Reverting changes.
Training on augumented user 73608 30/50 current_auc = 0.5299050632911392
User 73608 AUC after training: 0.529113924050633
User 73608 does not improve AUC. Reverting changes.
Training on augumented user 35187 31/50 current_auc = 0.5299050632911392
User 35187 AUC after training: 0.5297468354430379
User 35187 does not improve AUC. Reverting changes.
Training on augumented user 99637 32/50 current_auc = 0.5299050632911392
User 99637 AUC after training: 0.5291139240506328
User 99637 does not improve AUC. Reverting changes.
Training on augumented user 102259 33/50 current_auc = 0.5299050632911392
User 102259 AUC after training: 0.5284810126582278
User 102259 does not improve AUC. Reverting changes.
Training on augumented user 115745 34/50 current_auc = 0.5299050632911392
User 115745 AUC after training: 0.5283227848101266
User 115745 does not improve AUC. Reverting changes.
Training on augumented user 127416 35/50 current_auc = 0.5299050632911392
User 127416 AUC after training: 0.5292721518987342
User 127416 does not improve AUC. Reverting changes.
Training on augumented user 96064 36/50 current_auc = 0.5299050632911392
User 96064 AUC after training: 0.5281645569620254
User 96064 does not improve AUC. Reverting changes.
Training on augumented user 71619 37/50 current_auc = 0.5299050632911392
User 71619 AUC after training: 0.5292721518987342
User 71619 does not improve AUC. Reverting changes.
Training on augumented user 92433 38/50 current_auc = 0.5299050632911392
User 92433 AUC after training: 0.5272151898734178
User 92433 does not improve AUC. Reverting changes.
Training on augumented user 113254 39/50 current_auc = 0.5299050632911392
User 113254 AUC after training: 0.5302215189873418
User 113254 improves AUC. Keeping the model.
Training on augumented user 98357 40/50 current_auc = 0.5302215189873418
User 98357 AUC after training: 0.5302215189873417
User 98357 does not improve AUC. Reverting changes.
Training on augumented user 26786 41/50 current_auc = 0.5302215189873418
User 26786 AUC after training: 0.5303797468354431
User 26786 improves AUC. Keeping the model.
Training on augumented user 8564 42/50 current_auc = 0.5303797468354431
User 8564 AUC after training: 0.5308544303797469
User 8564 improves AUC. Keeping the model.
Training on augumented user 22914 43/50 current_auc = 0.5308544303797469
User 22914 AUC after training: 0.5303797468354431
User 22914 does not improve AUC. Reverting changes.
Training on augumented user 65631 44/50 current_auc = 0.5308544303797469
User 65631 AUC after training: 0.5313291139240507
User 65631 improves AUC. Keeping the model.
Training on augumented user 48047 45/50 current_auc = 0.5313291139240507
User 48047 AUC after training: 0.5316455696202531
User 48047 improves AUC. Keeping the model.
Training on augumented user 91853 46/50 current_auc = 0.5316455696202531
User 91853 AUC after training: 0.5318037974683545
User 91853 improves AUC. Keeping the model.
Training on augumented user 106328 47/50 current_auc = 0.5318037974683545
User 106328 AUC after training: 0.5316455696202532
User 106328 does not improve AUC. Reverting changes.
Training on augumented user 34342 48/50 current_auc = 0.5318037974683545
User 34342 AUC after training: 0.5303797468354431
User 34342 does not improve AUC. Reverting changes.
Training on augumented user 19107 49/50 current_auc = 0.5318037974683545
User 19107 AUC after training: 0.5282436708860759
User 19107 does not improve AUC. Reverting changes.
[2024-12-02 18:58:12.770357] start test user 127713 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:13.814645] start test user 127713 148/567 recall augumented users by random, augumented_users = [76763, 41501, 127606, 138466, 104551, 2840, 38586, 92577, 44003, 95686, 5613, 133663, 64116, 128552, 42731, 122360, 99242, 80206, 135030, 19848, 35771, 126820, 83483, 70621, 132587, 14038, 98857, 96495, 134654, 109556, 17563, 175, 40112, 97510, 123297, 97338, 32702, 38151, 103468, 112281, 67486, 82878, 80191, 9168, 100109, 124170, 99389, 27500, 96223, 124559]
[2024-12-02 18:58:13.833723] user = 127713 Cloud 148/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:13.842127] user = 127713 Local 148/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:14.145731] user = 127713 Local+ 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:17.213855] user = 127713 MPDA- 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 76763 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76763 AUC after training: 0.5
User 76763 does not improve AUC. Reverting changes.
Training on augumented user 41501 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41501 AUC after training: 0.5
User 41501 does not improve AUC. Reverting changes.
Training on augumented user 127606 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127606 AUC after training: 0.5
User 127606 does not improve AUC. Reverting changes.
Training on augumented user 138466 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138466 AUC after training: 0.5
User 138466 does not improve AUC. Reverting changes.
Training on augumented user 104551 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104551 AUC after training: 0.5
User 104551 does not improve AUC. Reverting changes.
Training on augumented user 2840 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2840 AUC after training: 0.5
User 2840 does not improve AUC. Reverting changes.
Training on augumented user 38586 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38586 AUC after training: 0.5
User 38586 does not improve AUC. Reverting changes.
Training on augumented user 92577 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92577 AUC after training: 0.5
User 92577 does not improve AUC. Reverting changes.
Training on augumented user 44003 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44003 AUC after training: 0.5
User 44003 does not improve AUC. Reverting changes.
Training on augumented user 95686 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95686 AUC after training: 0.5
User 95686 does not improve AUC. Reverting changes.
Training on augumented user 5613 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5613 AUC after training: 0.5
User 5613 does not improve AUC. Reverting changes.
Training on augumented user 133663 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133663 AUC after training: 0.5
User 133663 does not improve AUC. Reverting changes.
Training on augumented user 64116 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64116 AUC after training: 0.5
User 64116 does not improve AUC. Reverting changes.
Training on augumented user 128552 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128552 AUC after training: 0.5
User 128552 does not improve AUC. Reverting changes.
Training on augumented user 42731 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42731 AUC after training: 0.5
User 42731 does not improve AUC. Reverting changes.
Training on augumented user 122360 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122360 AUC after training: 0.5
User 122360 does not improve AUC. Reverting changes.
Training on augumented user 99242 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99242 AUC after training: 0.5
User 99242 does not improve AUC. Reverting changes.
Training on augumented user 80206 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80206 AUC after training: 0.5
User 80206 does not improve AUC. Reverting changes.
Training on augumented user 135030 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135030 AUC after training: 0.5
User 135030 does not improve AUC. Reverting changes.
Training on augumented user 19848 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19848 AUC after training: 0.5
User 19848 does not improve AUC. Reverting changes.
Training on augumented user 35771 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35771 AUC after training: 0.5
User 35771 does not improve AUC. Reverting changes.
Training on augumented user 126820 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126820 AUC after training: 0.5
User 126820 does not improve AUC. Reverting changes.
Training on augumented user 83483 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83483 AUC after training: 0.5
User 83483 does not improve AUC. Reverting changes.
Training on augumented user 70621 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70621 AUC after training: 0.5
User 70621 does not improve AUC. Reverting changes.
Training on augumented user 132587 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132587 AUC after training: 0.5
User 132587 does not improve AUC. Reverting changes.
Training on augumented user 14038 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14038 AUC after training: 0.5
User 14038 does not improve AUC. Reverting changes.
Training on augumented user 98857 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98857 AUC after training: 0.5
User 98857 does not improve AUC. Reverting changes.
Training on augumented user 96495 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96495 AUC after training: 0.5
User 96495 does not improve AUC. Reverting changes.
Training on augumented user 134654 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134654 AUC after training: 0.5
User 134654 does not improve AUC. Reverting changes.
Training on augumented user 109556 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109556 AUC after training: 0.5
User 109556 does not improve AUC. Reverting changes.
Training on augumented user 17563 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17563 AUC after training: 0.5
User 17563 does not improve AUC. Reverting changes.
Training on augumented user 175 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 175 AUC after training: 0.5
User 175 does not improve AUC. Reverting changes.
Training on augumented user 40112 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40112 AUC after training: 0.5
User 40112 does not improve AUC. Reverting changes.
Training on augumented user 97510 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97510 AUC after training: 0.5
User 97510 does not improve AUC. Reverting changes.
Training on augumented user 123297 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123297 AUC after training: 0.5
User 123297 does not improve AUC. Reverting changes.
Training on augumented user 97338 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97338 AUC after training: 0.5
User 97338 does not improve AUC. Reverting changes.
Training on augumented user 32702 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32702 AUC after training: 0.5
User 32702 does not improve AUC. Reverting changes.
Training on augumented user 38151 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38151 AUC after training: 0.5
User 38151 does not improve AUC. Reverting changes.
Training on augumented user 103468 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103468 AUC after training: 0.5
User 103468 does not improve AUC. Reverting changes.
Training on augumented user 112281 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112281 AUC after training: 0.5
User 112281 does not improve AUC. Reverting changes.
Training on augumented user 67486 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67486 AUC after training: 0.5
User 67486 does not improve AUC. Reverting changes.
Training on augumented user 82878 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82878 AUC after training: 0.5
User 82878 does not improve AUC. Reverting changes.
Training on augumented user 80191 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80191 AUC after training: 0.5
User 80191 does not improve AUC. Reverting changes.
Training on augumented user 9168 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9168 AUC after training: 0.5
User 9168 does not improve AUC. Reverting changes.
Training on augumented user 100109 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100109 AUC after training: 0.5
User 100109 does not improve AUC. Reverting changes.
Training on augumented user 124170 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124170 AUC after training: 0.5
User 124170 does not improve AUC. Reverting changes.
Training on augumented user 99389 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99389 AUC after training: 0.5
User 99389 does not improve AUC. Reverting changes.
Training on augumented user 27500 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27500 AUC after training: 0.5
User 27500 does not improve AUC. Reverting changes.
Training on augumented user 96223 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96223 AUC after training: 0.5
User 96223 does not improve AUC. Reverting changes.
Training on augumented user 124559 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124559 AUC after training: 0.5
User 124559 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:58:44.777864] start test user 127719 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:45.196880] start test user 127719 149/567 recall augumented users by random, augumented_users = [21483, 65085, 25552, 13447, 55064, 125662, 37652, 36228, 102229, 106854, 57953, 47771, 30253, 111984, 68840, 74400, 122268, 86475, 118969, 12034, 58693, 60477, 126773, 115889, 88152, 49730, 123401, 59332, 118853, 42747, 107553, 111513, 33479, 73125, 102720, 81836, 75775, 118375, 111080, 117778, 107496, 101388, 95947, 55549, 62767, 83032, 54321, 55731, 129935, 26416]
[2024-12-02 18:58:45.213433] user = 127719 Cloud 149/567
[2024-12-02 18:58:45.253947] user = 127719 Local 149/567
[2024-12-02 18:58:45.412908] user = 127719 Local+ 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:48.638294] user = 127719 MPDA- 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6930555555555555
Training on augumented user 21483 0/50 current_auc = 0.6930555555555555
User 21483 AUC after training: 0.6932760141093475
User 21483 improves AUC. Keeping the model.
Training on augumented user 65085 1/50 current_auc = 0.6932760141093475
User 65085 AUC after training: 0.6931437389770723
User 65085 does not improve AUC. Reverting changes.
Training on augumented user 25552 2/50 current_auc = 0.6932760141093475
User 25552 AUC after training: 0.6929894179894179
User 25552 does not improve AUC. Reverting changes.
Training on augumented user 13447 3/50 current_auc = 0.6932760141093475
User 13447 AUC after training: 0.6933201058201058
User 13447 improves AUC. Keeping the model.
Training on augumented user 55064 4/50 current_auc = 0.6933201058201058
User 55064 AUC after training: 0.692989417989418
User 55064 does not improve AUC. Reverting changes.
Training on augumented user 125662 5/50 current_auc = 0.6933201058201058
User 125662 AUC after training: 0.6931657848324514
User 125662 does not improve AUC. Reverting changes.
Training on augumented user 37652 6/50 current_auc = 0.6933201058201058
User 37652 AUC after training: 0.6929673721340388
User 37652 does not improve AUC. Reverting changes.
Training on augumented user 36228 7/50 current_auc = 0.6933201058201058
User 36228 AUC after training: 0.6932760141093475
User 36228 does not improve AUC. Reverting changes.
Training on augumented user 102229 8/50 current_auc = 0.6933201058201058
User 102229 AUC after training: 0.6929673721340388
User 102229 does not improve AUC. Reverting changes.
Training on augumented user 106854 9/50 current_auc = 0.6933201058201058
User 106854 AUC after training: 0.6925705467372134
User 106854 does not improve AUC. Reverting changes.
Training on augumented user 57953 10/50 current_auc = 0.6933201058201058
User 57953 AUC after training: 0.693342151675485
User 57953 improves AUC. Keeping the model.
Training on augumented user 47771 11/50 current_auc = 0.693342151675485
User 47771 AUC after training: 0.6930776014109348
User 47771 does not improve AUC. Reverting changes.
Training on augumented user 30253 12/50 current_auc = 0.693342151675485
User 30253 AUC after training: 0.6932098765432098
User 30253 does not improve AUC. Reverting changes.
Training on augumented user 111984 13/50 current_auc = 0.693342151675485
User 111984 AUC after training: 0.693231922398589
User 111984 does not improve AUC. Reverting changes.
Training on augumented user 68840 14/50 current_auc = 0.693342151675485
User 68840 AUC after training: 0.6933862433862434
User 68840 improves AUC. Keeping the model.
Training on augumented user 74400 15/50 current_auc = 0.6933862433862434
User 74400 AUC after training: 0.6931657848324514
User 74400 does not improve AUC. Reverting changes.
Training on augumented user 122268 16/50 current_auc = 0.6933862433862434
User 122268 AUC after training: 0.6934082892416226
User 122268 improves AUC. Keeping the model.
Training on augumented user 86475 17/50 current_auc = 0.6934082892416226
User 86475 AUC after training: 0.6932539682539682
User 86475 does not improve AUC. Reverting changes.
Training on augumented user 118969 18/50 current_auc = 0.6934082892416226
User 118969 AUC after training: 0.6929232804232803
User 118969 does not improve AUC. Reverting changes.
Training on augumented user 12034 19/50 current_auc = 0.6934082892416226
User 12034 AUC after training: 0.6929012345679012
User 12034 does not improve AUC. Reverting changes.
Training on augumented user 58693 20/50 current_auc = 0.6934082892416226
User 58693 AUC after training: 0.6929673721340388
User 58693 does not improve AUC. Reverting changes.
Training on augumented user 60477 21/50 current_auc = 0.6934082892416226
User 60477 AUC after training: 0.6932760141093475
User 60477 does not improve AUC. Reverting changes.
Training on augumented user 126773 22/50 current_auc = 0.6934082892416226
User 126773 AUC after training: 0.6933421516754851
User 126773 does not improve AUC. Reverting changes.
Training on augumented user 115889 23/50 current_auc = 0.6934082892416226
User 115889 AUC after training: 0.6928130511463845
User 115889 does not improve AUC. Reverting changes.
Training on augumented user 88152 24/50 current_auc = 0.6934082892416226
User 88152 AUC after training: 0.6932319223985891
User 88152 does not improve AUC. Reverting changes.
Training on augumented user 49730 25/50 current_auc = 0.6934082892416226
User 49730 AUC after training: 0.6932319223985891
User 49730 does not improve AUC. Reverting changes.
Training on augumented user 123401 26/50 current_auc = 0.6934082892416226
User 123401 AUC after training: 0.6932980599647266
User 123401 does not improve AUC. Reverting changes.
Training on augumented user 59332 27/50 current_auc = 0.6934082892416226
User 59332 AUC after training: 0.6925705467372134
User 59332 does not improve AUC. Reverting changes.
Training on augumented user 118853 28/50 current_auc = 0.6934082892416226
User 118853 AUC after training: 0.6931216931216931
User 118853 does not improve AUC. Reverting changes.
Training on augumented user 42747 29/50 current_auc = 0.6934082892416226
User 42747 AUC after training: 0.6927469135802469
User 42747 does not improve AUC. Reverting changes.
Training on augumented user 107553 30/50 current_auc = 0.6934082892416226
User 107553 AUC after training: 0.6931657848324515
User 107553 does not improve AUC. Reverting changes.
Training on augumented user 111513 31/50 current_auc = 0.6934082892416226
User 111513 AUC after training: 0.693342151675485
User 111513 does not improve AUC. Reverting changes.
Training on augumented user 33479 32/50 current_auc = 0.6934082892416226
User 33479 AUC after training: 0.6930555555555555
User 33479 does not improve AUC. Reverting changes.
Training on augumented user 73125 33/50 current_auc = 0.6934082892416226
User 73125 AUC after training: 0.6932098765432099
User 73125 does not improve AUC. Reverting changes.
Training on augumented user 102720 34/50 current_auc = 0.6934082892416226
User 102720 AUC after training: 0.6930996472663139
User 102720 does not improve AUC. Reverting changes.
Training on augumented user 81836 35/50 current_auc = 0.6934082892416226
User 81836 AUC after training: 0.6931878306878307
User 81836 does not improve AUC. Reverting changes.
Training on augumented user 75775 36/50 current_auc = 0.6934082892416226
User 75775 AUC after training: 0.6932980599647266
User 75775 does not improve AUC. Reverting changes.
Training on augumented user 118375 37/50 current_auc = 0.6934082892416226
User 118375 AUC after training: 0.693342151675485
User 118375 does not improve AUC. Reverting changes.
Training on augumented user 111080 38/50 current_auc = 0.6934082892416226
User 111080 AUC after training: 0.6929673721340388
User 111080 does not improve AUC. Reverting changes.
Training on augumented user 117778 39/50 current_auc = 0.6934082892416226
User 117778 AUC after training: 0.6933862433862434
User 117778 does not improve AUC. Reverting changes.
Training on augumented user 107496 40/50 current_auc = 0.6934082892416226
User 107496 AUC after training: 0.693342151675485
User 107496 does not improve AUC. Reverting changes.
Training on augumented user 101388 41/50 current_auc = 0.6934082892416226
User 101388 AUC after training: 0.6931437389770723
User 101388 does not improve AUC. Reverting changes.
Training on augumented user 95947 42/50 current_auc = 0.6934082892416226
User 95947 AUC after training: 0.6929673721340388
User 95947 does not improve AUC. Reverting changes.
Training on augumented user 55549 43/50 current_auc = 0.6934082892416226
User 55549 AUC after training: 0.6936507936507936
User 55549 improves AUC. Keeping the model.
Training on augumented user 62767 44/50 current_auc = 0.6936507936507936
User 62767 AUC after training: 0.6932098765432098
User 62767 does not improve AUC. Reverting changes.
Training on augumented user 83032 45/50 current_auc = 0.6936507936507936
User 83032 AUC after training: 0.6934082892416226
User 83032 does not improve AUC. Reverting changes.
Training on augumented user 54321 46/50 current_auc = 0.6936507936507936
User 54321 AUC after training: 0.693805114638448
User 54321 improves AUC. Keeping the model.
Training on augumented user 55731 47/50 current_auc = 0.693805114638448
User 55731 AUC after training: 0.69320987654321
User 55731 does not improve AUC. Reverting changes.
Training on augumented user 129935 48/50 current_auc = 0.693805114638448
User 129935 AUC after training: 0.6937389770723105
User 129935 does not improve AUC. Reverting changes.
Training on augumented user 26416 49/50 current_auc = 0.693805114638448
User 26416 AUC after training: 0.6932539682539681
User 26416 does not improve AUC. Reverting changes.
[2024-12-02 18:59:25.912545] start test user 127757 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:26.459012] start test user 127757 150/567 recall augumented users by random, augumented_users = [96724, 39740, 13601, 111832, 103229, 7536, 133603, 12444, 91869, 10988, 57889, 37104, 80863, 100932, 58571, 26402, 56214, 120033, 82571, 53499, 64408, 82489, 17527, 34151, 30939, 36200, 92113, 102190, 133115, 75673, 24715, 56914, 65400, 61685, 136543, 115204, 118299, 91454, 129832, 46891, 68237, 76209, 35650, 14881, 135827, 24666, 347, 108194, 82698, 62819]
[2024-12-02 18:59:26.474275] user = 127757 Cloud 150/567
[2024-12-02 18:59:26.488818] user = 127757 Local 150/567
[2024-12-02 18:59:26.685341] user = 127757 Local+ 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:29.629922] user = 127757 MPDA- 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7991869918699187
Training on augumented user 96724 0/50 current_auc = 0.7991869918699187
User 96724 AUC after training: 0.7983739837398374
User 96724 does not improve AUC. Reverting changes.
Training on augumented user 39740 1/50 current_auc = 0.7991869918699187
User 39740 AUC after training: 0.7983739837398374
User 39740 does not improve AUC. Reverting changes.
Training on augumented user 13601 2/50 current_auc = 0.7991869918699187
User 13601 AUC after training: 0.8
User 13601 improves AUC. Keeping the model.
Training on augumented user 111832 3/50 current_auc = 0.8
User 111832 AUC after training: 0.8
User 111832 does not improve AUC. Reverting changes.
Training on augumented user 103229 4/50 current_auc = 0.8
User 103229 AUC after training: 0.7975609756097561
User 103229 does not improve AUC. Reverting changes.
Training on augumented user 7536 5/50 current_auc = 0.8
User 7536 AUC after training: 0.7991869918699187
User 7536 does not improve AUC. Reverting changes.
Training on augumented user 133603 6/50 current_auc = 0.8
User 133603 AUC after training: 0.7991869918699187
User 133603 does not improve AUC. Reverting changes.
Training on augumented user 12444 7/50 current_auc = 0.8
User 12444 AUC after training: 0.8008130081300813
User 12444 improves AUC. Keeping the model.
Training on augumented user 91869 8/50 current_auc = 0.8008130081300813
User 91869 AUC after training: 0.7983739837398374
User 91869 does not improve AUC. Reverting changes.
Training on augumented user 10988 9/50 current_auc = 0.8008130081300813
User 10988 AUC after training: 0.8016260162601626
User 10988 improves AUC. Keeping the model.
Training on augumented user 57889 10/50 current_auc = 0.8016260162601626
User 57889 AUC after training: 0.802439024390244
User 57889 improves AUC. Keeping the model.
Training on augumented user 37104 11/50 current_auc = 0.802439024390244
User 37104 AUC after training: 0.8016260162601626
User 37104 does not improve AUC. Reverting changes.
Training on augumented user 80863 12/50 current_auc = 0.802439024390244
User 80863 AUC after training: 0.8016260162601626
User 80863 does not improve AUC. Reverting changes.
Training on augumented user 100932 13/50 current_auc = 0.802439024390244
User 100932 AUC after training: 0.8032520325203252
User 100932 improves AUC. Keeping the model.
Training on augumented user 58571 14/50 current_auc = 0.8032520325203252
User 58571 AUC after training: 0.8032520325203252
User 58571 does not improve AUC. Reverting changes.
Training on augumented user 26402 15/50 current_auc = 0.8032520325203252
User 26402 AUC after training: 0.8008130081300813
User 26402 does not improve AUC. Reverting changes.
Training on augumented user 56214 16/50 current_auc = 0.8032520325203252
User 56214 AUC after training: 0.8032520325203252
User 56214 does not improve AUC. Reverting changes.
Training on augumented user 120033 17/50 current_auc = 0.8032520325203252
User 120033 AUC after training: 0.8016260162601626
User 120033 does not improve AUC. Reverting changes.
Training on augumented user 82571 18/50 current_auc = 0.8032520325203252
User 82571 AUC after training: 0.8016260162601626
User 82571 does not improve AUC. Reverting changes.
Training on augumented user 53499 19/50 current_auc = 0.8032520325203252
User 53499 AUC after training: 0.8016260162601626
User 53499 does not improve AUC. Reverting changes.
Training on augumented user 64408 20/50 current_auc = 0.8032520325203252
User 64408 AUC after training: 0.8008130081300813
User 64408 does not improve AUC. Reverting changes.
Training on augumented user 82489 21/50 current_auc = 0.8032520325203252
User 82489 AUC after training: 0.8008130081300813
User 82489 does not improve AUC. Reverting changes.
Training on augumented user 17527 22/50 current_auc = 0.8032520325203252
User 17527 AUC after training: 0.802439024390244
User 17527 does not improve AUC. Reverting changes.
Training on augumented user 34151 23/50 current_auc = 0.8032520325203252
User 34151 AUC after training: 0.8040650406504065
User 34151 improves AUC. Keeping the model.
Training on augumented user 30939 24/50 current_auc = 0.8040650406504065
User 30939 AUC after training: 0.802439024390244
User 30939 does not improve AUC. Reverting changes.
Training on augumented user 36200 25/50 current_auc = 0.8040650406504065
User 36200 AUC after training: 0.8040650406504065
User 36200 does not improve AUC. Reverting changes.
Training on augumented user 92113 26/50 current_auc = 0.8040650406504065
User 92113 AUC after training: 0.8048780487804877
User 92113 improves AUC. Keeping the model.
Training on augumented user 102190 27/50 current_auc = 0.8048780487804877
User 102190 AUC after training: 0.8040650406504065
User 102190 does not improve AUC. Reverting changes.
Training on augumented user 133115 28/50 current_auc = 0.8048780487804877
User 133115 AUC after training: 0.8032520325203252
User 133115 does not improve AUC. Reverting changes.
Training on augumented user 75673 29/50 current_auc = 0.8048780487804877
User 75673 AUC after training: 0.802439024390244
User 75673 does not improve AUC. Reverting changes.
Training on augumented user 24715 30/50 current_auc = 0.8048780487804877
User 24715 AUC after training: 0.8056910569105691
User 24715 improves AUC. Keeping the model.
Training on augumented user 56914 31/50 current_auc = 0.8056910569105691
User 56914 AUC after training: 0.8060975609756098
User 56914 improves AUC. Keeping the model.
Training on augumented user 65400 32/50 current_auc = 0.8060975609756098
User 65400 AUC after training: 0.8060975609756098
User 65400 does not improve AUC. Reverting changes.
Training on augumented user 61685 33/50 current_auc = 0.8060975609756098
User 61685 AUC after training: 0.8060975609756098
User 61685 does not improve AUC. Reverting changes.
Training on augumented user 136543 34/50 current_auc = 0.8060975609756098
User 136543 AUC after training: 0.8044715447154471
User 136543 does not improve AUC. Reverting changes.
Training on augumented user 115204 35/50 current_auc = 0.8060975609756098
User 115204 AUC after training: 0.806910569105691
User 115204 improves AUC. Keeping the model.
Training on augumented user 118299 36/50 current_auc = 0.806910569105691
User 118299 AUC after training: 0.806910569105691
User 118299 does not improve AUC. Reverting changes.
Training on augumented user 91454 37/50 current_auc = 0.806910569105691
User 91454 AUC after training: 0.806910569105691
User 91454 does not improve AUC. Reverting changes.
Training on augumented user 129832 38/50 current_auc = 0.806910569105691
User 129832 AUC after training: 0.8056910569105691
User 129832 does not improve AUC. Reverting changes.
Training on augumented user 46891 39/50 current_auc = 0.806910569105691
User 46891 AUC after training: 0.8060975609756098
User 46891 does not improve AUC. Reverting changes.
Training on augumented user 68237 40/50 current_auc = 0.806910569105691
User 68237 AUC after training: 0.8052845528455285
User 68237 does not improve AUC. Reverting changes.
Training on augumented user 76209 41/50 current_auc = 0.806910569105691
User 76209 AUC after training: 0.806910569105691
User 76209 does not improve AUC. Reverting changes.
Training on augumented user 35650 42/50 current_auc = 0.806910569105691
User 35650 AUC after training: 0.806910569105691
User 35650 does not improve AUC. Reverting changes.
Training on augumented user 14881 43/50 current_auc = 0.806910569105691
User 14881 AUC after training: 0.8060975609756098
User 14881 does not improve AUC. Reverting changes.
Training on augumented user 135827 44/50 current_auc = 0.806910569105691
User 135827 AUC after training: 0.8077235772357724
User 135827 improves AUC. Keeping the model.
Training on augumented user 24666 45/50 current_auc = 0.8077235772357724
User 24666 AUC after training: 0.8077235772357724
User 24666 does not improve AUC. Reverting changes.
Training on augumented user 347 46/50 current_auc = 0.8077235772357724
User 347 AUC after training: 0.8
User 347 does not improve AUC. Reverting changes.
Training on augumented user 108194 47/50 current_auc = 0.8077235772357724
User 108194 AUC after training: 0.8048780487804879
User 108194 does not improve AUC. Reverting changes.
Training on augumented user 82698 48/50 current_auc = 0.8077235772357724
User 82698 AUC after training: 0.8052845528455285
User 82698 does not improve AUC. Reverting changes.
Training on augumented user 62819 49/50 current_auc = 0.8077235772357724
User 62819 AUC after training: 0.8077235772357724
User 62819 does not improve AUC. Reverting changes.
[2024-12-02 18:59:59.549471] start test user 127759 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:00.395458] start test user 127759 151/567 recall augumented users by random, augumented_users = [118466, 21242, 29295, 119637, 55446, 5415, 75950, 41445, 7281, 99608, 116408, 38503, 69304, 107686, 31825, 43279, 48970, 130725, 81388, 119192, 124718, 108577, 97173, 82216, 5132, 101782, 136508, 115908, 128243, 73112, 41570, 10185, 3923, 67826, 100223, 138045, 44545, 70373, 64705, 62158, 50266, 90431, 59123, 119683, 78215, 81595, 16007, 111589, 94719, 48326]
[2024-12-02 19:00:00.427097] user = 127759 Cloud 151/567
[2024-12-02 19:00:00.599892] user = 127759 Local 151/567
[2024-12-02 19:00:00.843437] user = 127759 Local+ 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:05.351441] user = 127759 MPDA- 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6186440677966101
Training on augumented user 118466 0/50 current_auc = 0.6186440677966101
User 118466 AUC after training: 0.618220338983051
User 118466 does not improve AUC. Reverting changes.
Training on augumented user 21242 1/50 current_auc = 0.6186440677966101
User 21242 AUC after training: 0.6186440677966102
User 21242 improves AUC. Keeping the model.
Training on augumented user 29295 2/50 current_auc = 0.6186440677966102
User 29295 AUC after training: 0.6186440677966101
User 29295 does not improve AUC. Reverting changes.
Training on augumented user 119637 3/50 current_auc = 0.6186440677966102
User 119637 AUC after training: 0.6188559322033897
User 119637 improves AUC. Keeping the model.
Training on augumented user 55446 4/50 current_auc = 0.6188559322033897
User 55446 AUC after training: 0.6180084745762713
User 55446 does not improve AUC. Reverting changes.
Training on augumented user 5415 5/50 current_auc = 0.6188559322033897
User 5415 AUC after training: 0.6207627118644068
User 5415 improves AUC. Keeping the model.
Training on augumented user 75950 6/50 current_auc = 0.6207627118644068
User 75950 AUC after training: 0.6201271186440678
User 75950 does not improve AUC. Reverting changes.
Training on augumented user 41445 7/50 current_auc = 0.6207627118644068
User 41445 AUC after training: 0.6203389830508474
User 41445 does not improve AUC. Reverting changes.
Training on augumented user 7281 8/50 current_auc = 0.6207627118644068
User 7281 AUC after training: 0.6204449152542372
User 7281 does not improve AUC. Reverting changes.
Training on augumented user 99608 9/50 current_auc = 0.6207627118644068
User 99608 AUC after training: 0.6205508474576271
User 99608 does not improve AUC. Reverting changes.
Training on augumented user 116408 10/50 current_auc = 0.6207627118644068
User 116408 AUC after training: 0.6209745762711865
User 116408 improves AUC. Keeping the model.
Training on augumented user 38503 11/50 current_auc = 0.6209745762711865
User 38503 AUC after training: 0.6205508474576271
User 38503 does not improve AUC. Reverting changes.
Training on augumented user 69304 12/50 current_auc = 0.6209745762711865
User 69304 AUC after training: 0.623093220338983
User 69304 improves AUC. Keeping the model.
Training on augumented user 107686 13/50 current_auc = 0.623093220338983
User 107686 AUC after training: 0.6228813559322034
User 107686 does not improve AUC. Reverting changes.
Training on augumented user 31825 14/50 current_auc = 0.623093220338983
User 31825 AUC after training: 0.623728813559322
User 31825 improves AUC. Keeping the model.
Training on augumented user 43279 15/50 current_auc = 0.623728813559322
User 43279 AUC after training: 0.622457627118644
User 43279 does not improve AUC. Reverting changes.
Training on augumented user 48970 16/50 current_auc = 0.623728813559322
User 48970 AUC after training: 0.6216101694915254
User 48970 does not improve AUC. Reverting changes.
Training on augumented user 130725 17/50 current_auc = 0.623728813559322
User 130725 AUC after training: 0.623093220338983
User 130725 does not improve AUC. Reverting changes.
Training on augumented user 81388 18/50 current_auc = 0.623728813559322
User 81388 AUC after training: 0.6228813559322035
User 81388 does not improve AUC. Reverting changes.
Training on augumented user 119192 19/50 current_auc = 0.623728813559322
User 119192 AUC after training: 0.6226694915254236
User 119192 does not improve AUC. Reverting changes.
Training on augumented user 124718 20/50 current_auc = 0.623728813559322
User 124718 AUC after training: 0.6233050847457628
User 124718 does not improve AUC. Reverting changes.
Training on augumented user 108577 21/50 current_auc = 0.623728813559322
User 108577 AUC after training: 0.6239406779661016
User 108577 improves AUC. Keeping the model.
Training on augumented user 97173 22/50 current_auc = 0.6239406779661016
User 97173 AUC after training: 0.623728813559322
User 97173 does not improve AUC. Reverting changes.
Training on augumented user 82216 23/50 current_auc = 0.6239406779661016
User 82216 AUC after training: 0.6224576271186442
User 82216 does not improve AUC. Reverting changes.
Training on augumented user 5132 24/50 current_auc = 0.6239406779661016
User 5132 AUC after training: 0.6239406779661016
User 5132 does not improve AUC. Reverting changes.
Training on augumented user 101782 25/50 current_auc = 0.6239406779661016
User 101782 AUC after training: 0.6228813559322033
User 101782 does not improve AUC. Reverting changes.
Training on augumented user 136508 26/50 current_auc = 0.6239406779661016
User 136508 AUC after training: 0.623093220338983
User 136508 does not improve AUC. Reverting changes.
Training on augumented user 115908 27/50 current_auc = 0.6239406779661016
User 115908 AUC after training: 0.6233050847457626
User 115908 does not improve AUC. Reverting changes.
Training on augumented user 128243 28/50 current_auc = 0.6239406779661016
User 128243 AUC after training: 0.623728813559322
User 128243 does not improve AUC. Reverting changes.
Training on augumented user 73112 29/50 current_auc = 0.6239406779661016
User 73112 AUC after training: 0.6239406779661016
User 73112 does not improve AUC. Reverting changes.
Training on augumented user 41570 30/50 current_auc = 0.6239406779661016
User 41570 AUC after training: 0.6235169491525423
User 41570 does not improve AUC. Reverting changes.
Training on augumented user 10185 31/50 current_auc = 0.6239406779661016
User 10185 AUC after training: 0.6233050847457626
User 10185 does not improve AUC. Reverting changes.
Training on augumented user 3923 32/50 current_auc = 0.6239406779661016
User 3923 AUC after training: 0.6239406779661016
User 3923 does not improve AUC. Reverting changes.
Training on augumented user 67826 33/50 current_auc = 0.6239406779661016
User 67826 AUC after training: 0.6241525423728813
User 67826 improves AUC. Keeping the model.
Training on augumented user 100223 34/50 current_auc = 0.6241525423728813
User 100223 AUC after training: 0.623728813559322
User 100223 does not improve AUC. Reverting changes.
Training on augumented user 138045 35/50 current_auc = 0.6241525423728813
User 138045 AUC after training: 0.6233050847457628
User 138045 does not improve AUC. Reverting changes.
Training on augumented user 44545 36/50 current_auc = 0.6241525423728813
User 44545 AUC after training: 0.6235169491525424
User 44545 does not improve AUC. Reverting changes.
Training on augumented user 70373 37/50 current_auc = 0.6241525423728813
User 70373 AUC after training: 0.624364406779661
User 70373 improves AUC. Keeping the model.
Training on augumented user 64705 38/50 current_auc = 0.624364406779661
User 64705 AUC after training: 0.6228813559322033
User 64705 does not improve AUC. Reverting changes.
Training on augumented user 62158 39/50 current_auc = 0.624364406779661
User 62158 AUC after training: 0.6235169491525425
User 62158 does not improve AUC. Reverting changes.
Training on augumented user 50266 40/50 current_auc = 0.624364406779661
User 50266 AUC after training: 0.6235169491525423
User 50266 does not improve AUC. Reverting changes.
Training on augumented user 90431 41/50 current_auc = 0.624364406779661
User 90431 AUC after training: 0.6239406779661016
User 90431 does not improve AUC. Reverting changes.
Training on augumented user 59123 42/50 current_auc = 0.624364406779661
User 59123 AUC after training: 0.6228813559322034
User 59123 does not improve AUC. Reverting changes.
Training on augumented user 119683 43/50 current_auc = 0.624364406779661
User 119683 AUC after training: 0.6224576271186442
User 119683 does not improve AUC. Reverting changes.
Training on augumented user 78215 44/50 current_auc = 0.624364406779661
User 78215 AUC after training: 0.6235169491525423
User 78215 does not improve AUC. Reverting changes.
Training on augumented user 81595 45/50 current_auc = 0.624364406779661
User 81595 AUC after training: 0.624364406779661
User 81595 does not improve AUC. Reverting changes.
Training on augumented user 16007 46/50 current_auc = 0.624364406779661
User 16007 AUC after training: 0.6239406779661016
User 16007 does not improve AUC. Reverting changes.
Training on augumented user 111589 47/50 current_auc = 0.624364406779661
User 111589 AUC after training: 0.6239406779661016
User 111589 does not improve AUC. Reverting changes.
Training on augumented user 94719 48/50 current_auc = 0.624364406779661
User 94719 AUC after training: 0.6230932203389831
User 94719 does not improve AUC. Reverting changes.
Training on augumented user 48326 49/50 current_auc = 0.624364406779661
User 48326 AUC after training: 0.6230932203389832
User 48326 does not improve AUC. Reverting changes.
[2024-12-02 19:00:40.544602] start test user 127766 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:40.976962] start test user 127766 152/567 recall augumented users by random, augumented_users = [7431, 117268, 71153, 89711, 57807, 11525, 40337, 111064, 44682, 37801, 89354, 90331, 59069, 106761, 111725, 34804, 137038, 4448, 66852, 2252, 9007, 135868, 51871, 30185, 80456, 106459, 129592, 43178, 88374, 106495, 15837, 53484, 128489, 41838, 137219, 125112, 106331, 114005, 31018, 10412, 19373, 38364, 88833, 3581, 33074, 43593, 92354, 64780, 5261, 54026]
[2024-12-02 19:00:40.991861] user = 127766 Cloud 152/567
[2024-12-02 19:00:41.006808] user = 127766 Local 152/567
[2024-12-02 19:00:41.038043] user = 127766 Local+ 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:42.983301] user = 127766 MPDA- 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5535077288941737
Training on augumented user 7431 0/50 current_auc = 0.5535077288941737
User 7431 AUC after training: 0.5523186682520808
User 7431 does not improve AUC. Reverting changes.
Training on augumented user 117268 1/50 current_auc = 0.5535077288941737
User 117268 AUC after training: 0.5517241379310346
User 117268 does not improve AUC. Reverting changes.
Training on augumented user 71153 2/50 current_auc = 0.5535077288941737
User 71153 AUC after training: 0.5541022592152199
User 71153 improves AUC. Keeping the model.
Training on augumented user 89711 3/50 current_auc = 0.5541022592152199
User 89711 AUC after training: 0.5541022592152199
User 89711 does not improve AUC. Reverting changes.
Training on augumented user 57807 4/50 current_auc = 0.5541022592152199
User 57807 AUC after training: 0.5529131985731272
User 57807 does not improve AUC. Reverting changes.
Training on augumented user 11525 5/50 current_auc = 0.5541022592152199
User 11525 AUC after training: 0.5520214030915577
User 11525 does not improve AUC. Reverting changes.
Training on augumented user 40337 6/50 current_auc = 0.5541022592152199
User 40337 AUC after training: 0.5523186682520808
User 40337 does not improve AUC. Reverting changes.
Training on augumented user 111064 7/50 current_auc = 0.5541022592152199
User 111064 AUC after training: 0.5538049940546969
User 111064 does not improve AUC. Reverting changes.
Training on augumented user 44682 8/50 current_auc = 0.5541022592152199
User 44682 AUC after training: 0.5564803804994055
User 44682 improves AUC. Keeping the model.
Training on augumented user 37801 9/50 current_auc = 0.5564803804994055
User 37801 AUC after training: 0.5579667063020214
User 37801 improves AUC. Keeping the model.
Training on augumented user 89354 10/50 current_auc = 0.5579667063020214
User 89354 AUC after training: 0.5567776456599286
User 89354 does not improve AUC. Reverting changes.
Training on augumented user 90331 11/50 current_auc = 0.5579667063020214
User 90331 AUC after training: 0.5576694411414982
User 90331 does not improve AUC. Reverting changes.
Training on augumented user 59069 12/50 current_auc = 0.5579667063020214
User 59069 AUC after training: 0.5521700356718192
User 59069 does not improve AUC. Reverting changes.
Training on augumented user 106761 13/50 current_auc = 0.5579667063020214
User 106761 AUC after training: 0.5585612366230678
User 106761 improves AUC. Keeping the model.
Training on augumented user 111725 14/50 current_auc = 0.5585612366230678
User 111725 AUC after training: 0.557372175980975
User 111725 does not improve AUC. Reverting changes.
Training on augumented user 34804 15/50 current_auc = 0.5585612366230678
User 34804 AUC after training: 0.5567776456599286
User 34804 does not improve AUC. Reverting changes.
Training on augumented user 137038 16/50 current_auc = 0.5585612366230678
User 137038 AUC after training: 0.5573721759809749
User 137038 does not improve AUC. Reverting changes.
Training on augumented user 4448 17/50 current_auc = 0.5585612366230678
User 4448 AUC after training: 0.5555885850178358
User 4448 does not improve AUC. Reverting changes.
Training on augumented user 66852 18/50 current_auc = 0.5585612366230678
User 66852 AUC after training: 0.5600475624256837
User 66852 improves AUC. Keeping the model.
Training on augumented user 2252 19/50 current_auc = 0.5600475624256837
User 2252 AUC after training: 0.56064209274673
User 2252 improves AUC. Keeping the model.
Training on augumented user 9007 20/50 current_auc = 0.56064209274673
User 9007 AUC after training: 0.5606420927467302
User 9007 improves AUC. Keeping the model.
Training on augumented user 135868 21/50 current_auc = 0.5606420927467302
User 135868 AUC after training: 0.5609393579072532
User 135868 improves AUC. Keeping the model.
Training on augumented user 51871 22/50 current_auc = 0.5609393579072532
User 51871 AUC after training: 0.5597502972651605
User 51871 does not improve AUC. Reverting changes.
Training on augumented user 30185 23/50 current_auc = 0.5609393579072532
User 30185 AUC after training: 0.5603448275862069
User 30185 does not improve AUC. Reverting changes.
Training on augumented user 80456 24/50 current_auc = 0.5609393579072532
User 80456 AUC after training: 0.5609393579072532
User 80456 does not improve AUC. Reverting changes.
Training on augumented user 106459 25/50 current_auc = 0.5609393579072532
User 106459 AUC after training: 0.5624256837098692
User 106459 improves AUC. Keeping the model.
Training on augumented user 129592 26/50 current_auc = 0.5624256837098692
User 129592 AUC after training: 0.5597502972651606
User 129592 does not improve AUC. Reverting changes.
Training on augumented user 43178 27/50 current_auc = 0.5624256837098692
User 43178 AUC after training: 0.5624256837098692
User 43178 does not improve AUC. Reverting changes.
Training on augumented user 88374 28/50 current_auc = 0.5624256837098692
User 88374 AUC after training: 0.563614744351962
User 88374 improves AUC. Keeping the model.
Training on augumented user 106495 29/50 current_auc = 0.563614744351962
User 106495 AUC after training: 0.5615338882282996
User 106495 does not improve AUC. Reverting changes.
Training on augumented user 15837 30/50 current_auc = 0.563614744351962
User 15837 AUC after training: 0.5618311533888228
User 15837 does not improve AUC. Reverting changes.
Training on augumented user 53484 31/50 current_auc = 0.563614744351962
User 53484 AUC after training: 0.5627229488703924
User 53484 does not improve AUC. Reverting changes.
Training on augumented user 128489 32/50 current_auc = 0.563614744351962
User 128489 AUC after training: 0.5630202140309155
User 128489 does not improve AUC. Reverting changes.
Training on augumented user 41838 33/50 current_auc = 0.563614744351962
User 41838 AUC after training: 0.5630202140309156
User 41838 does not improve AUC. Reverting changes.
Training on augumented user 137219 34/50 current_auc = 0.563614744351962
User 137219 AUC after training: 0.5630202140309156
User 137219 does not improve AUC. Reverting changes.
Training on augumented user 125112 35/50 current_auc = 0.563614744351962
User 125112 AUC after training: 0.5618311533888228
User 125112 does not improve AUC. Reverting changes.
Training on augumented user 106331 36/50 current_auc = 0.563614744351962
User 106331 AUC after training: 0.5624256837098692
User 106331 does not improve AUC. Reverting changes.
Training on augumented user 114005 37/50 current_auc = 0.563614744351962
User 114005 AUC after training: 0.5639120095124851
User 114005 improves AUC. Keeping the model.
Training on augumented user 31018 38/50 current_auc = 0.5639120095124851
User 31018 AUC after training: 0.5636147443519619
User 31018 does not improve AUC. Reverting changes.
Training on augumented user 10412 39/50 current_auc = 0.5639120095124851
User 10412 AUC after training: 0.563614744351962
User 10412 does not improve AUC. Reverting changes.
Training on augumented user 19373 40/50 current_auc = 0.5639120095124851
User 19373 AUC after training: 0.5627229488703923
User 19373 does not improve AUC. Reverting changes.
Training on augumented user 38364 41/50 current_auc = 0.5639120095124851
User 38364 AUC after training: 0.5639120095124851
User 38364 does not improve AUC. Reverting changes.
Training on augumented user 88833 42/50 current_auc = 0.5639120095124851
User 88833 AUC after training: 0.5618311533888227
User 88833 does not improve AUC. Reverting changes.
Training on augumented user 3581 43/50 current_auc = 0.5639120095124851
User 3581 AUC after training: 0.5630202140309155
User 3581 does not improve AUC. Reverting changes.
Training on augumented user 33074 44/50 current_auc = 0.5639120095124851
User 33074 AUC after training: 0.5612366230677764
User 33074 does not improve AUC. Reverting changes.
Training on augumented user 43593 45/50 current_auc = 0.5639120095124851
User 43593 AUC after training: 0.5624256837098691
User 43593 does not improve AUC. Reverting changes.
Training on augumented user 92354 46/50 current_auc = 0.5639120095124851
User 92354 AUC after training: 0.560344827586207
User 92354 does not improve AUC. Reverting changes.
Training on augumented user 64780 47/50 current_auc = 0.5639120095124851
User 64780 AUC after training: 0.5630202140309156
User 64780 does not improve AUC. Reverting changes.
Training on augumented user 5261 48/50 current_auc = 0.5639120095124851
User 5261 AUC after training: 0.560344827586207
User 5261 does not improve AUC. Reverting changes.
Training on augumented user 54026 49/50 current_auc = 0.5639120095124851
User 54026 AUC after training: 0.5642092746730084
User 54026 improves AUC. Keeping the model.
[2024-12-02 19:01:14.081009] start test user 127776 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:14.660741] start test user 127776 153/567 recall augumented users by random, augumented_users = [129218, 94765, 27074, 109649, 25797, 124348, 65573, 62301, 102150, 39350, 75954, 68717, 79497, 102443, 64500, 88439, 802, 138149, 13769, 90547, 105615, 45881, 13126, 72894, 72231, 110435, 75048, 68730, 19735, 62149, 12134, 113682, 117978, 24044, 28967, 38500, 48457, 124728, 94190, 44325, 77334, 30893, 4918, 5725, 66341, 13573, 119132, 118153, 14306, 16904]
[2024-12-02 19:01:14.676165] user = 127776 Cloud 153/567
[2024-12-02 19:01:14.712377] user = 127776 Local 153/567
[2024-12-02 19:01:14.870426] user = 127776 Local+ 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:19.037631] user = 127776 MPDA- 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6965174129353233
Training on augumented user 129218 0/50 current_auc = 0.6965174129353233
User 129218 AUC after training: 0.6965174129353233
User 129218 does not improve AUC. Reverting changes.
Training on augumented user 94765 1/50 current_auc = 0.6965174129353233
User 94765 AUC after training: 0.691542288557214
User 94765 does not improve AUC. Reverting changes.
Training on augumented user 27074 2/50 current_auc = 0.6965174129353233
User 27074 AUC after training: 0.7014925373134329
User 27074 improves AUC. Keeping the model.
Training on augumented user 109649 3/50 current_auc = 0.7014925373134329
User 109649 AUC after training: 0.7064676616915422
User 109649 improves AUC. Keeping the model.
Training on augumented user 25797 4/50 current_auc = 0.7064676616915422
User 25797 AUC after training: 0.7064676616915422
User 25797 does not improve AUC. Reverting changes.
Training on augumented user 124348 5/50 current_auc = 0.7064676616915422
User 124348 AUC after training: 0.7064676616915422
User 124348 does not improve AUC. Reverting changes.
Training on augumented user 65573 6/50 current_auc = 0.7064676616915422
User 65573 AUC after training: 0.7064676616915422
User 65573 does not improve AUC. Reverting changes.
Training on augumented user 62301 7/50 current_auc = 0.7064676616915422
User 62301 AUC after training: 0.7064676616915422
User 62301 does not improve AUC. Reverting changes.
Training on augumented user 102150 8/50 current_auc = 0.7064676616915422
User 102150 AUC after training: 0.7064676616915422
User 102150 does not improve AUC. Reverting changes.
Training on augumented user 39350 9/50 current_auc = 0.7064676616915422
User 39350 AUC after training: 0.7014925373134329
User 39350 does not improve AUC. Reverting changes.
Training on augumented user 75954 10/50 current_auc = 0.7064676616915422
User 75954 AUC after training: 0.7064676616915422
User 75954 does not improve AUC. Reverting changes.
Training on augumented user 68717 11/50 current_auc = 0.7064676616915422
User 68717 AUC after training: 0.7014925373134329
User 68717 does not improve AUC. Reverting changes.
Training on augumented user 79497 12/50 current_auc = 0.7064676616915422
User 79497 AUC after training: 0.7014925373134329
User 79497 does not improve AUC. Reverting changes.
Training on augumented user 102443 13/50 current_auc = 0.7064676616915422
User 102443 AUC after training: 0.7014925373134329
User 102443 does not improve AUC. Reverting changes.
Training on augumented user 64500 14/50 current_auc = 0.7064676616915422
User 64500 AUC after training: 0.7064676616915422
User 64500 does not improve AUC. Reverting changes.
Training on augumented user 88439 15/50 current_auc = 0.7064676616915422
User 88439 AUC after training: 0.7064676616915422
User 88439 does not improve AUC. Reverting changes.
Training on augumented user 802 16/50 current_auc = 0.7064676616915422
User 802 AUC after training: 0.7064676616915423
User 802 improves AUC. Keeping the model.
Training on augumented user 138149 17/50 current_auc = 0.7064676616915423
User 138149 AUC after training: 0.7064676616915423
User 138149 does not improve AUC. Reverting changes.
Training on augumented user 13769 18/50 current_auc = 0.7064676616915423
User 13769 AUC after training: 0.7014925373134329
User 13769 does not improve AUC. Reverting changes.
Training on augumented user 90547 19/50 current_auc = 0.7064676616915423
User 90547 AUC after training: 0.7064676616915423
User 90547 does not improve AUC. Reverting changes.
Training on augumented user 105615 20/50 current_auc = 0.7064676616915423
User 105615 AUC after training: 0.7064676616915423
User 105615 does not improve AUC. Reverting changes.
Training on augumented user 45881 21/50 current_auc = 0.7064676616915423
User 45881 AUC after training: 0.7064676616915423
User 45881 does not improve AUC. Reverting changes.
Training on augumented user 13126 22/50 current_auc = 0.7064676616915423
User 13126 AUC after training: 0.7014925373134329
User 13126 does not improve AUC. Reverting changes.
Training on augumented user 72894 23/50 current_auc = 0.7064676616915423
User 72894 AUC after training: 0.7064676616915423
User 72894 does not improve AUC. Reverting changes.
Training on augumented user 72231 24/50 current_auc = 0.7064676616915423
User 72231 AUC after training: 0.7014925373134329
User 72231 does not improve AUC. Reverting changes.
Training on augumented user 110435 25/50 current_auc = 0.7064676616915423
User 110435 AUC after training: 0.7064676616915423
User 110435 does not improve AUC. Reverting changes.
Training on augumented user 75048 26/50 current_auc = 0.7064676616915423
User 75048 AUC after training: 0.7064676616915423
User 75048 does not improve AUC. Reverting changes.
Training on augumented user 68730 27/50 current_auc = 0.7064676616915423
User 68730 AUC after training: 0.7014925373134329
User 68730 does not improve AUC. Reverting changes.
Training on augumented user 19735 28/50 current_auc = 0.7064676616915423
User 19735 AUC after training: 0.691542288557214
User 19735 does not improve AUC. Reverting changes.
Training on augumented user 62149 29/50 current_auc = 0.7064676616915423
User 62149 AUC after training: 0.7014925373134329
User 62149 does not improve AUC. Reverting changes.
Training on augumented user 12134 30/50 current_auc = 0.7064676616915423
User 12134 AUC after training: 0.7064676616915423
User 12134 does not improve AUC. Reverting changes.
Training on augumented user 113682 31/50 current_auc = 0.7064676616915423
User 113682 AUC after training: 0.7064676616915423
User 113682 does not improve AUC. Reverting changes.
Training on augumented user 117978 32/50 current_auc = 0.7064676616915423
User 117978 AUC after training: 0.7064676616915423
User 117978 does not improve AUC. Reverting changes.
Training on augumented user 24044 33/50 current_auc = 0.7064676616915423
User 24044 AUC after training: 0.7064676616915423
User 24044 does not improve AUC. Reverting changes.
Training on augumented user 28967 34/50 current_auc = 0.7064676616915423
User 28967 AUC after training: 0.7064676616915423
User 28967 does not improve AUC. Reverting changes.
Training on augumented user 38500 35/50 current_auc = 0.7064676616915423
User 38500 AUC after training: 0.7064676616915423
User 38500 does not improve AUC. Reverting changes.
Training on augumented user 48457 36/50 current_auc = 0.7064676616915423
User 48457 AUC after training: 0.7064676616915423
User 48457 does not improve AUC. Reverting changes.
Training on augumented user 124728 37/50 current_auc = 0.7064676616915423
User 124728 AUC after training: 0.7064676616915423
User 124728 does not improve AUC. Reverting changes.
Training on augumented user 94190 38/50 current_auc = 0.7064676616915423
User 94190 AUC after training: 0.7064676616915423
User 94190 does not improve AUC. Reverting changes.
Training on augumented user 44325 39/50 current_auc = 0.7064676616915423
User 44325 AUC after training: 0.7064676616915423
User 44325 does not improve AUC. Reverting changes.
Training on augumented user 77334 40/50 current_auc = 0.7064676616915423
User 77334 AUC after training: 0.7064676616915423
User 77334 does not improve AUC. Reverting changes.
Training on augumented user 30893 41/50 current_auc = 0.7064676616915423
User 30893 AUC after training: 0.7064676616915423
User 30893 does not improve AUC. Reverting changes.
Training on augumented user 4918 42/50 current_auc = 0.7064676616915423
User 4918 AUC after training: 0.7064676616915423
User 4918 does not improve AUC. Reverting changes.
Training on augumented user 5725 43/50 current_auc = 0.7064676616915423
User 5725 AUC after training: 0.7114427860696517
User 5725 improves AUC. Keeping the model.
Training on augumented user 66341 44/50 current_auc = 0.7114427860696517
User 66341 AUC after training: 0.7114427860696517
User 66341 does not improve AUC. Reverting changes.
Training on augumented user 13573 45/50 current_auc = 0.7114427860696517
User 13573 AUC after training: 0.7114427860696517
User 13573 does not improve AUC. Reverting changes.
Training on augumented user 119132 46/50 current_auc = 0.7114427860696517
User 119132 AUC after training: 0.7064676616915423
User 119132 does not improve AUC. Reverting changes.
Training on augumented user 118153 47/50 current_auc = 0.7114427860696517
User 118153 AUC after training: 0.7114427860696517
User 118153 does not improve AUC. Reverting changes.
Training on augumented user 14306 48/50 current_auc = 0.7114427860696517
User 14306 AUC after training: 0.7114427860696517
User 14306 does not improve AUC. Reverting changes.
Training on augumented user 16904 49/50 current_auc = 0.7114427860696517
User 16904 AUC after training: 0.7114427860696517
User 16904 does not improve AUC. Reverting changes.
[2024-12-02 19:01:46.924043] start test user 127783 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:47.716989] start test user 127783 154/567 recall augumented users by random, augumented_users = [114665, 115418, 22029, 95327, 10155, 110587, 53225, 115005, 30758, 61530, 73727, 124732, 100782, 7764, 78050, 85112, 34806, 38794, 2099, 3382, 130722, 127135, 40737, 87958, 93064, 55587, 101489, 79271, 24645, 129103, 132024, 27832, 8290, 60964, 6274, 87391, 73025, 44777, 41130, 101392, 61973, 137796, 21452, 88251, 89443, 16123, 10062, 69919, 13366, 58939]
[2024-12-02 19:01:47.770243] user = 127783 Cloud 154/567
[2024-12-02 19:01:47.812269] user = 127783 Local 154/567
[2024-12-02 19:01:47.845199] user = 127783 Local+ 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:50.293017] user = 127783 MPDA- 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8814102564102564
Training on augumented user 114665 0/50 current_auc = 0.8814102564102564
User 114665 AUC after training: 0.881993006993007
User 114665 improves AUC. Keeping the model.
Training on augumented user 115418 1/50 current_auc = 0.881993006993007
User 115418 AUC after training: 0.8817016317016317
User 115418 does not improve AUC. Reverting changes.
Training on augumented user 22029 2/50 current_auc = 0.881993006993007
User 22029 AUC after training: 0.8843240093240093
User 22029 improves AUC. Keeping the model.
Training on augumented user 95327 3/50 current_auc = 0.8843240093240093
User 95327 AUC after training: 0.8828671328671328
User 95327 does not improve AUC. Reverting changes.
Training on augumented user 10155 4/50 current_auc = 0.8843240093240093
User 10155 AUC after training: 0.8837412587412588
User 10155 does not improve AUC. Reverting changes.
Training on augumented user 110587 5/50 current_auc = 0.8843240093240093
User 110587 AUC after training: 0.8843240093240093
User 110587 does not improve AUC. Reverting changes.
Training on augumented user 53225 6/50 current_auc = 0.8843240093240093
User 53225 AUC after training: 0.881993006993007
User 53225 does not improve AUC. Reverting changes.
Training on augumented user 115005 7/50 current_auc = 0.8843240093240093
User 115005 AUC after training: 0.8802447552447551
User 115005 does not improve AUC. Reverting changes.
Training on augumented user 30758 8/50 current_auc = 0.8843240093240093
User 30758 AUC after training: 0.8837412587412588
User 30758 does not improve AUC. Reverting changes.
Training on augumented user 61530 9/50 current_auc = 0.8843240093240093
User 61530 AUC after training: 0.8843240093240093
User 61530 does not improve AUC. Reverting changes.
Training on augumented user 73727 10/50 current_auc = 0.8843240093240093
User 73727 AUC after training: 0.8857808857808859
User 73727 improves AUC. Keeping the model.
Training on augumented user 124732 11/50 current_auc = 0.8857808857808859
User 124732 AUC after training: 0.8822843822843822
User 124732 does not improve AUC. Reverting changes.
Training on augumented user 100782 12/50 current_auc = 0.8857808857808859
User 100782 AUC after training: 0.8846153846153846
User 100782 does not improve AUC. Reverting changes.
Training on augumented user 7764 13/50 current_auc = 0.8857808857808859
User 7764 AUC after training: 0.8857808857808859
User 7764 does not improve AUC. Reverting changes.
Training on augumented user 78050 14/50 current_auc = 0.8857808857808859
User 78050 AUC after training: 0.8857808857808859
User 78050 does not improve AUC. Reverting changes.
Training on augumented user 85112 15/50 current_auc = 0.8857808857808859
User 85112 AUC after training: 0.8863636363636364
User 85112 improves AUC. Keeping the model.
Training on augumented user 34806 16/50 current_auc = 0.8863636363636364
User 34806 AUC after training: 0.8834498834498834
User 34806 does not improve AUC. Reverting changes.
Training on augumented user 38794 17/50 current_auc = 0.8863636363636364
User 38794 AUC after training: 0.8851981351981352
User 38794 does not improve AUC. Reverting changes.
Training on augumented user 2099 18/50 current_auc = 0.8863636363636364
User 2099 AUC after training: 0.8834498834498834
User 2099 does not improve AUC. Reverting changes.
Training on augumented user 3382 19/50 current_auc = 0.8863636363636364
User 3382 AUC after training: 0.8851981351981352
User 3382 does not improve AUC. Reverting changes.
Training on augumented user 130722 20/50 current_auc = 0.8863636363636364
User 130722 AUC after training: 0.8851981351981353
User 130722 does not improve AUC. Reverting changes.
Training on augumented user 127135 21/50 current_auc = 0.8863636363636364
User 127135 AUC after training: 0.8863636363636364
User 127135 does not improve AUC. Reverting changes.
Training on augumented user 40737 22/50 current_auc = 0.8863636363636364
User 40737 AUC after training: 0.8869463869463869
User 40737 improves AUC. Keeping the model.
Training on augumented user 87958 23/50 current_auc = 0.8869463869463869
User 87958 AUC after training: 0.8869463869463869
User 87958 does not improve AUC. Reverting changes.
Training on augumented user 93064 24/50 current_auc = 0.8869463869463869
User 93064 AUC after training: 0.8863636363636364
User 93064 does not improve AUC. Reverting changes.
Training on augumented user 55587 25/50 current_auc = 0.8869463869463869
User 55587 AUC after training: 0.8875291375291375
User 55587 improves AUC. Keeping the model.
Training on augumented user 101489 26/50 current_auc = 0.8875291375291375
User 101489 AUC after training: 0.8851981351981352
User 101489 does not improve AUC. Reverting changes.
Training on augumented user 79271 27/50 current_auc = 0.8875291375291375
User 79271 AUC after training: 0.8857808857808858
User 79271 does not improve AUC. Reverting changes.
Training on augumented user 24645 28/50 current_auc = 0.8875291375291375
User 24645 AUC after training: 0.8834498834498835
User 24645 does not improve AUC. Reverting changes.
Training on augumented user 129103 29/50 current_auc = 0.8875291375291375
User 129103 AUC after training: 0.8857808857808858
User 129103 does not improve AUC. Reverting changes.
Training on augumented user 132024 30/50 current_auc = 0.8875291375291375
User 132024 AUC after training: 0.8846153846153847
User 132024 does not improve AUC. Reverting changes.
Training on augumented user 27832 31/50 current_auc = 0.8875291375291375
User 27832 AUC after training: 0.881993006993007
User 27832 does not improve AUC. Reverting changes.
Training on augumented user 8290 32/50 current_auc = 0.8875291375291375
User 8290 AUC after training: 0.8851981351981352
User 8290 does not improve AUC. Reverting changes.
Training on augumented user 60964 33/50 current_auc = 0.8875291375291375
User 60964 AUC after training: 0.8863636363636364
User 60964 does not improve AUC. Reverting changes.
Training on augumented user 6274 34/50 current_auc = 0.8875291375291375
User 6274 AUC after training: 0.8863636363636364
User 6274 does not improve AUC. Reverting changes.
Training on augumented user 87391 35/50 current_auc = 0.8875291375291375
User 87391 AUC after training: 0.8863636363636364
User 87391 does not improve AUC. Reverting changes.
Training on augumented user 73025 36/50 current_auc = 0.8875291375291375
User 73025 AUC after training: 0.8875291375291375
User 73025 does not improve AUC. Reverting changes.
Training on augumented user 44777 37/50 current_auc = 0.8875291375291375
User 44777 AUC after training: 0.8851981351981352
User 44777 does not improve AUC. Reverting changes.
Training on augumented user 41130 38/50 current_auc = 0.8875291375291375
User 41130 AUC after training: 0.8863636363636364
User 41130 does not improve AUC. Reverting changes.
Training on augumented user 101392 39/50 current_auc = 0.8875291375291375
User 101392 AUC after training: 0.8863636363636364
User 101392 does not improve AUC. Reverting changes.
Training on augumented user 61973 40/50 current_auc = 0.8875291375291375
User 61973 AUC after training: 0.8869463869463869
User 61973 does not improve AUC. Reverting changes.
Training on augumented user 137796 41/50 current_auc = 0.8875291375291375
User 137796 AUC after training: 0.8846153846153846
User 137796 does not improve AUC. Reverting changes.
Training on augumented user 21452 42/50 current_auc = 0.8875291375291375
User 21452 AUC after training: 0.8863636363636364
User 21452 does not improve AUC. Reverting changes.
Training on augumented user 88251 43/50 current_auc = 0.8875291375291375
User 88251 AUC after training: 0.8869463869463869
User 88251 does not improve AUC. Reverting changes.
Training on augumented user 89443 44/50 current_auc = 0.8875291375291375
User 89443 AUC after training: 0.8875291375291375
User 89443 does not improve AUC. Reverting changes.
Training on augumented user 16123 45/50 current_auc = 0.8875291375291375
User 16123 AUC after training: 0.8869463869463869
User 16123 does not improve AUC. Reverting changes.
Training on augumented user 10062 46/50 current_auc = 0.8875291375291375
User 10062 AUC after training: 0.8875291375291375
User 10062 does not improve AUC. Reverting changes.
Training on augumented user 69919 47/50 current_auc = 0.8875291375291375
User 69919 AUC after training: 0.8857808857808858
User 69919 does not improve AUC. Reverting changes.
Training on augumented user 13366 48/50 current_auc = 0.8875291375291375
User 13366 AUC after training: 0.8863636363636364
User 13366 does not improve AUC. Reverting changes.
Training on augumented user 58939 49/50 current_auc = 0.8875291375291375
User 58939 AUC after training: 0.8863636363636364
User 58939 does not improve AUC. Reverting changes.
[2024-12-02 19:02:23.750699] start test user 127793 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:24.246692] start test user 127793 155/567 recall augumented users by random, augumented_users = [105808, 72988, 43044, 4918, 66422, 13502, 128769, 84216, 9834, 90932, 18074, 27833, 116060, 110586, 53533, 114001, 29148, 34843, 58916, 137207, 123071, 38376, 23442, 92115, 45610, 127775, 94227, 44989, 86605, 85921, 64864, 82720, 63012, 49318, 75444, 134388, 2880, 93610, 19316, 96796, 11415, 28411, 52146, 36371, 137505, 39629, 91751, 133010, 121181, 115589]
[2024-12-02 19:02:24.262932] user = 127793 Cloud 155/567
[2024-12-02 19:02:24.284608] user = 127793 Local 155/567
[2024-12-02 19:02:24.356070] user = 127793 Local+ 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:26.590506] user = 127793 MPDA- 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.67375
Training on augumented user 105808 0/50 current_auc = 0.67375
User 105808 AUC after training: 0.674375
User 105808 improves AUC. Keeping the model.
Training on augumented user 72988 1/50 current_auc = 0.674375
User 72988 AUC after training: 0.6725
User 72988 does not improve AUC. Reverting changes.
Training on augumented user 43044 2/50 current_auc = 0.674375
User 43044 AUC after training: 0.675
User 43044 improves AUC. Keeping the model.
Training on augumented user 4918 3/50 current_auc = 0.675
User 4918 AUC after training: 0.6737500000000001
User 4918 does not improve AUC. Reverting changes.
Training on augumented user 66422 4/50 current_auc = 0.675
User 66422 AUC after training: 0.6749999999999999
User 66422 does not improve AUC. Reverting changes.
Training on augumented user 13502 5/50 current_auc = 0.675
User 13502 AUC after training: 0.675
User 13502 does not improve AUC. Reverting changes.
Training on augumented user 128769 6/50 current_auc = 0.675
User 128769 AUC after training: 0.6718749999999999
User 128769 does not improve AUC. Reverting changes.
Training on augumented user 84216 7/50 current_auc = 0.675
User 84216 AUC after training: 0.6743750000000001
User 84216 does not improve AUC. Reverting changes.
Training on augumented user 9834 8/50 current_auc = 0.675
User 9834 AUC after training: 0.671875
User 9834 does not improve AUC. Reverting changes.
Training on augumented user 90932 9/50 current_auc = 0.675
User 90932 AUC after training: 0.6756249999999999
User 90932 improves AUC. Keeping the model.
Training on augumented user 18074 10/50 current_auc = 0.6756249999999999
User 18074 AUC after training: 0.6725000000000001
User 18074 does not improve AUC. Reverting changes.
Training on augumented user 27833 11/50 current_auc = 0.6756249999999999
User 27833 AUC after training: 0.671875
User 27833 does not improve AUC. Reverting changes.
Training on augumented user 116060 12/50 current_auc = 0.6756249999999999
User 116060 AUC after training: 0.6737500000000001
User 116060 does not improve AUC. Reverting changes.
Training on augumented user 110586 13/50 current_auc = 0.6756249999999999
User 110586 AUC after training: 0.6743750000000001
User 110586 does not improve AUC. Reverting changes.
Training on augumented user 53533 14/50 current_auc = 0.6756249999999999
User 53533 AUC after training: 0.6762499999999999
User 53533 improves AUC. Keeping the model.
Training on augumented user 114001 15/50 current_auc = 0.6762499999999999
User 114001 AUC after training: 0.6762499999999999
User 114001 does not improve AUC. Reverting changes.
Training on augumented user 29148 16/50 current_auc = 0.6762499999999999
User 29148 AUC after training: 0.675625
User 29148 does not improve AUC. Reverting changes.
Training on augumented user 34843 17/50 current_auc = 0.6762499999999999
User 34843 AUC after training: 0.6775
User 34843 improves AUC. Keeping the model.
Training on augumented user 58916 18/50 current_auc = 0.6775
User 58916 AUC after training: 0.6775
User 58916 does not improve AUC. Reverting changes.
Training on augumented user 137207 19/50 current_auc = 0.6775
User 137207 AUC after training: 0.676875
User 137207 does not improve AUC. Reverting changes.
Training on augumented user 123071 20/50 current_auc = 0.6775
User 123071 AUC after training: 0.6775
User 123071 does not improve AUC. Reverting changes.
Training on augumented user 38376 21/50 current_auc = 0.6775
User 38376 AUC after training: 0.6775
User 38376 does not improve AUC. Reverting changes.
Training on augumented user 23442 22/50 current_auc = 0.6775
User 23442 AUC after training: 0.6775
User 23442 does not improve AUC. Reverting changes.
Training on augumented user 92115 23/50 current_auc = 0.6775
User 92115 AUC after training: 0.676875
User 92115 does not improve AUC. Reverting changes.
Training on augumented user 45610 24/50 current_auc = 0.6775
User 45610 AUC after training: 0.676875
User 45610 does not improve AUC. Reverting changes.
Training on augumented user 127775 25/50 current_auc = 0.6775
User 127775 AUC after training: 0.675625
User 127775 does not improve AUC. Reverting changes.
Training on augumented user 94227 26/50 current_auc = 0.6775
User 94227 AUC after training: 0.6775
User 94227 does not improve AUC. Reverting changes.
Training on augumented user 44989 27/50 current_auc = 0.6775
User 44989 AUC after training: 0.675625
User 44989 does not improve AUC. Reverting changes.
Training on augumented user 86605 28/50 current_auc = 0.6775
User 86605 AUC after training: 0.678125
User 86605 improves AUC. Keeping the model.
Training on augumented user 85921 29/50 current_auc = 0.678125
User 85921 AUC after training: 0.6775
User 85921 does not improve AUC. Reverting changes.
Training on augumented user 64864 30/50 current_auc = 0.678125
User 64864 AUC after training: 0.6762500000000001
User 64864 does not improve AUC. Reverting changes.
Training on augumented user 82720 31/50 current_auc = 0.678125
User 82720 AUC after training: 0.6787500000000001
User 82720 improves AUC. Keeping the model.
Training on augumented user 63012 32/50 current_auc = 0.6787500000000001
User 63012 AUC after training: 0.676875
User 63012 does not improve AUC. Reverting changes.
Training on augumented user 49318 33/50 current_auc = 0.6787500000000001
User 49318 AUC after training: 0.6775
User 49318 does not improve AUC. Reverting changes.
Training on augumented user 75444 34/50 current_auc = 0.6787500000000001
User 75444 AUC after training: 0.6793750000000001
User 75444 improves AUC. Keeping the model.
Training on augumented user 134388 35/50 current_auc = 0.6793750000000001
User 134388 AUC after training: 0.67625
User 134388 does not improve AUC. Reverting changes.
Training on augumented user 2880 36/50 current_auc = 0.6793750000000001
User 2880 AUC after training: 0.679375
User 2880 does not improve AUC. Reverting changes.
Training on augumented user 93610 37/50 current_auc = 0.6793750000000001
User 93610 AUC after training: 0.6768750000000001
User 93610 does not improve AUC. Reverting changes.
Training on augumented user 19316 38/50 current_auc = 0.6793750000000001
User 19316 AUC after training: 0.68125
User 19316 improves AUC. Keeping the model.
Training on augumented user 96796 39/50 current_auc = 0.68125
User 96796 AUC after training: 0.674375
User 96796 does not improve AUC. Reverting changes.
Training on augumented user 11415 40/50 current_auc = 0.68125
User 11415 AUC after training: 0.6799999999999998
User 11415 does not improve AUC. Reverting changes.
Training on augumented user 28411 41/50 current_auc = 0.68125
User 28411 AUC after training: 0.678125
User 28411 does not improve AUC. Reverting changes.
Training on augumented user 52146 42/50 current_auc = 0.68125
User 52146 AUC after training: 0.6725
User 52146 does not improve AUC. Reverting changes.
Training on augumented user 36371 43/50 current_auc = 0.68125
User 36371 AUC after training: 0.6806249999999999
User 36371 does not improve AUC. Reverting changes.
Training on augumented user 137505 44/50 current_auc = 0.68125
User 137505 AUC after training: 0.6787500000000001
User 137505 does not improve AUC. Reverting changes.
Training on augumented user 39629 45/50 current_auc = 0.68125
User 39629 AUC after training: 0.679375
User 39629 does not improve AUC. Reverting changes.
Training on augumented user 91751 46/50 current_auc = 0.68125
User 91751 AUC after training: 0.6818750000000001
User 91751 improves AUC. Keeping the model.
Training on augumented user 133010 47/50 current_auc = 0.6818750000000001
User 133010 AUC after training: 0.6793750000000001
User 133010 does not improve AUC. Reverting changes.
Training on augumented user 121181 48/50 current_auc = 0.6818750000000001
User 121181 AUC after training: 0.67875
User 121181 does not improve AUC. Reverting changes.
Training on augumented user 115589 49/50 current_auc = 0.6818750000000001
User 115589 AUC after training: 0.680625
User 115589 does not improve AUC. Reverting changes.
[2024-12-02 19:02:58.085139] start test user 127809 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:58.839420] start test user 127809 156/567 recall augumented users by random, augumented_users = [39125, 53129, 46228, 78812, 78583, 48153, 45863, 72370, 24344, 92498, 116703, 126341, 135394, 4112, 52318, 116547, 64964, 42589, 37672, 48332, 25713, 90677, 59117, 16104, 108765, 25425, 32822, 65042, 136440, 43316, 111393, 70727, 22789, 25922, 96129, 11534, 11345, 4292, 112386, 86383, 129177, 18233, 73466, 7442, 106400, 9648, 1813, 114629, 130071, 34906]
[2024-12-02 19:02:58.867318] user = 127809 Cloud 156/567
[2024-12-02 19:02:58.914507] user = 127809 Local 156/567
[2024-12-02 19:02:59.189666] user = 127809 Local+ 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:02.422597] user = 127809 MPDA- 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6463903743315508
Training on augumented user 39125 0/50 current_auc = 0.6463903743315508
User 39125 AUC after training: 0.6477272727272728
User 39125 improves AUC. Keeping the model.
Training on augumented user 53129 1/50 current_auc = 0.6477272727272728
User 53129 AUC after training: 0.6526292335115864
User 53129 improves AUC. Keeping the model.
Training on augumented user 46228 2/50 current_auc = 0.6526292335115864
User 46228 AUC after training: 0.6517379679144385
User 46228 does not improve AUC. Reverting changes.
Training on augumented user 78812 3/50 current_auc = 0.6526292335115864
User 78812 AUC after training: 0.6526292335115865
User 78812 improves AUC. Keeping the model.
Training on augumented user 78583 4/50 current_auc = 0.6526292335115865
User 78583 AUC after training: 0.6526292335115865
User 78583 does not improve AUC. Reverting changes.
Training on augumented user 48153 5/50 current_auc = 0.6526292335115865
User 48153 AUC after training: 0.6517379679144386
User 48153 does not improve AUC. Reverting changes.
Training on augumented user 45863 6/50 current_auc = 0.6526292335115865
User 45863 AUC after training: 0.6521836007130126
User 45863 does not improve AUC. Reverting changes.
Training on augumented user 72370 7/50 current_auc = 0.6526292335115865
User 72370 AUC after training: 0.6530748663101604
User 72370 improves AUC. Keeping the model.
Training on augumented user 24344 8/50 current_auc = 0.6530748663101604
User 24344 AUC after training: 0.6530748663101604
User 24344 does not improve AUC. Reverting changes.
Training on augumented user 92498 9/50 current_auc = 0.6530748663101604
User 92498 AUC after training: 0.6535204991087346
User 92498 improves AUC. Keeping the model.
Training on augumented user 116703 10/50 current_auc = 0.6535204991087346
User 116703 AUC after training: 0.6526292335115864
User 116703 does not improve AUC. Reverting changes.
Training on augumented user 126341 11/50 current_auc = 0.6535204991087346
User 126341 AUC after training: 0.6530748663101604
User 126341 does not improve AUC. Reverting changes.
Training on augumented user 135394 12/50 current_auc = 0.6535204991087346
User 135394 AUC after training: 0.6530748663101604
User 135394 does not improve AUC. Reverting changes.
Training on augumented user 4112 13/50 current_auc = 0.6535204991087346
User 4112 AUC after training: 0.6535204991087344
User 4112 does not improve AUC. Reverting changes.
Training on augumented user 52318 14/50 current_auc = 0.6535204991087346
User 52318 AUC after training: 0.6532976827094475
User 52318 does not improve AUC. Reverting changes.
Training on augumented user 116547 15/50 current_auc = 0.6535204991087346
User 116547 AUC after training: 0.6535204991087344
User 116547 does not improve AUC. Reverting changes.
Training on augumented user 64964 16/50 current_auc = 0.6535204991087346
User 64964 AUC after training: 0.6521836007130126
User 64964 does not improve AUC. Reverting changes.
Training on augumented user 42589 17/50 current_auc = 0.6535204991087346
User 42589 AUC after training: 0.6530748663101604
User 42589 does not improve AUC. Reverting changes.
Training on augumented user 37672 18/50 current_auc = 0.6535204991087346
User 37672 AUC after training: 0.6544117647058824
User 37672 improves AUC. Keeping the model.
Training on augumented user 48332 19/50 current_auc = 0.6544117647058824
User 48332 AUC after training: 0.6530748663101604
User 48332 does not improve AUC. Reverting changes.
Training on augumented user 25713 20/50 current_auc = 0.6544117647058824
User 25713 AUC after training: 0.6539661319073083
User 25713 does not improve AUC. Reverting changes.
Training on augumented user 90677 21/50 current_auc = 0.6544117647058824
User 90677 AUC after training: 0.6541889483065955
User 90677 does not improve AUC. Reverting changes.
Training on augumented user 59117 22/50 current_auc = 0.6544117647058824
User 59117 AUC after training: 0.6521836007130125
User 59117 does not improve AUC. Reverting changes.
Training on augumented user 16104 23/50 current_auc = 0.6544117647058824
User 16104 AUC after training: 0.6526292335115864
User 16104 does not improve AUC. Reverting changes.
Training on augumented user 108765 24/50 current_auc = 0.6544117647058824
User 108765 AUC after training: 0.6535204991087344
User 108765 does not improve AUC. Reverting changes.
Training on augumented user 25425 25/50 current_auc = 0.6544117647058824
User 25425 AUC after training: 0.6530748663101604
User 25425 does not improve AUC. Reverting changes.
Training on augumented user 32822 26/50 current_auc = 0.6544117647058824
User 32822 AUC after training: 0.6548573975044564
User 32822 improves AUC. Keeping the model.
Training on augumented user 65042 27/50 current_auc = 0.6548573975044564
User 65042 AUC after training: 0.6539661319073085
User 65042 does not improve AUC. Reverting changes.
Training on augumented user 136440 28/50 current_auc = 0.6548573975044564
User 136440 AUC after training: 0.6526292335115864
User 136440 does not improve AUC. Reverting changes.
Training on augumented user 43316 29/50 current_auc = 0.6548573975044564
User 43316 AUC after training: 0.6526292335115865
User 43316 does not improve AUC. Reverting changes.
Training on augumented user 111393 30/50 current_auc = 0.6548573975044564
User 111393 AUC after training: 0.6539661319073085
User 111393 does not improve AUC. Reverting changes.
Training on augumented user 70727 31/50 current_auc = 0.6548573975044564
User 70727 AUC after training: 0.6535204991087344
User 70727 does not improve AUC. Reverting changes.
Training on augumented user 22789 32/50 current_auc = 0.6548573975044564
User 22789 AUC after training: 0.6535204991087344
User 22789 does not improve AUC. Reverting changes.
Training on augumented user 25922 33/50 current_auc = 0.6548573975044564
User 25922 AUC after training: 0.6530748663101604
User 25922 does not improve AUC. Reverting changes.
Training on augumented user 96129 34/50 current_auc = 0.6548573975044564
User 96129 AUC after training: 0.6544117647058824
User 96129 does not improve AUC. Reverting changes.
Training on augumented user 11534 35/50 current_auc = 0.6548573975044564
User 11534 AUC after training: 0.6526292335115864
User 11534 does not improve AUC. Reverting changes.
Training on augumented user 11345 36/50 current_auc = 0.6548573975044564
User 11345 AUC after training: 0.6532976827094475
User 11345 does not improve AUC. Reverting changes.
Training on augumented user 4292 37/50 current_auc = 0.6548573975044564
User 4292 AUC after training: 0.6535204991087344
User 4292 does not improve AUC. Reverting changes.
Training on augumented user 112386 38/50 current_auc = 0.6548573975044564
User 112386 AUC after training: 0.6539661319073085
User 112386 does not improve AUC. Reverting changes.
Training on augumented user 86383 39/50 current_auc = 0.6548573975044564
User 86383 AUC after training: 0.6526292335115865
User 86383 does not improve AUC. Reverting changes.
Training on augumented user 129177 40/50 current_auc = 0.6548573975044564
User 129177 AUC after training: 0.6539661319073085
User 129177 does not improve AUC. Reverting changes.
Training on augumented user 18233 41/50 current_auc = 0.6548573975044564
User 18233 AUC after training: 0.6544117647058824
User 18233 does not improve AUC. Reverting changes.
Training on augumented user 73466 42/50 current_auc = 0.6548573975044564
User 73466 AUC after training: 0.6526292335115865
User 73466 does not improve AUC. Reverting changes.
Training on augumented user 7442 43/50 current_auc = 0.6548573975044564
User 7442 AUC after training: 0.6530748663101604
User 7442 does not improve AUC. Reverting changes.
Training on augumented user 106400 44/50 current_auc = 0.6548573975044564
User 106400 AUC after training: 0.6530748663101604
User 106400 does not improve AUC. Reverting changes.
Training on augumented user 9648 45/50 current_auc = 0.6548573975044564
User 9648 AUC after training: 0.6548573975044564
User 9648 does not improve AUC. Reverting changes.
Training on augumented user 1813 46/50 current_auc = 0.6548573975044564
User 1813 AUC after training: 0.6530748663101604
User 1813 does not improve AUC. Reverting changes.
Training on augumented user 114629 47/50 current_auc = 0.6548573975044564
User 114629 AUC after training: 0.6532976827094475
User 114629 does not improve AUC. Reverting changes.
Training on augumented user 130071 48/50 current_auc = 0.6548573975044564
User 130071 AUC after training: 0.6530748663101604
User 130071 does not improve AUC. Reverting changes.
Training on augumented user 34906 49/50 current_auc = 0.6548573975044564
User 34906 AUC after training: 0.6521836007130125
User 34906 does not improve AUC. Reverting changes.
[2024-12-02 19:03:28.699358] start test user 127836 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:29.117508] start test user 127836 157/567 recall augumented users by random, augumented_users = [71347, 55069, 56945, 10727, 32390, 112750, 97630, 11215, 93936, 115271, 19338, 97909, 107889, 127598, 24475, 48496, 48211, 30854, 98551, 66388, 2910, 67504, 122752, 18206, 100725, 113669, 110650, 84144, 5599, 31299, 9414, 39196, 91360, 110424, 110055, 69798, 62643, 34218, 121120, 9057, 132590, 12304, 65658, 7732, 44521, 9369, 43193, 45734, 48067, 88485]
[2024-12-02 19:03:29.133029] user = 127836 Cloud 157/567
[2024-12-02 19:03:29.144208] user = 127836 Local 157/567
[2024-12-02 19:03:29.236128] user = 127836 Local+ 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:30.626521] user = 127836 MPDA- 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4285714285714286
Training on augumented user 71347 0/50 current_auc = 0.4285714285714286
User 71347 AUC after training: 0.4285714285714286
User 71347 does not improve AUC. Reverting changes.
Training on augumented user 55069 1/50 current_auc = 0.4285714285714286
User 55069 AUC after training: 0.4285714285714286
User 55069 does not improve AUC. Reverting changes.
Training on augumented user 56945 2/50 current_auc = 0.4285714285714286
User 56945 AUC after training: 0.4285714285714286
User 56945 does not improve AUC. Reverting changes.
Training on augumented user 10727 3/50 current_auc = 0.4285714285714286
User 10727 AUC after training: 0.4285714285714286
User 10727 does not improve AUC. Reverting changes.
Training on augumented user 32390 4/50 current_auc = 0.4285714285714286
User 32390 AUC after training: 0.4285714285714286
User 32390 does not improve AUC. Reverting changes.
Training on augumented user 112750 5/50 current_auc = 0.4285714285714286
User 112750 AUC after training: 0.4285714285714286
User 112750 does not improve AUC. Reverting changes.
Training on augumented user 97630 6/50 current_auc = 0.4285714285714286
User 97630 AUC after training: 0.4285714285714286
User 97630 does not improve AUC. Reverting changes.
Training on augumented user 11215 7/50 current_auc = 0.4285714285714286
User 11215 AUC after training: 0.4285714285714286
User 11215 does not improve AUC. Reverting changes.
Training on augumented user 93936 8/50 current_auc = 0.4285714285714286
User 93936 AUC after training: 0.4285714285714286
User 93936 does not improve AUC. Reverting changes.
Training on augumented user 115271 9/50 current_auc = 0.4285714285714286
User 115271 AUC after training: 0.4285714285714286
User 115271 does not improve AUC. Reverting changes.
Training on augumented user 19338 10/50 current_auc = 0.4285714285714286
User 19338 AUC after training: 0.4285714285714286
User 19338 does not improve AUC. Reverting changes.
Training on augumented user 97909 11/50 current_auc = 0.4285714285714286
User 97909 AUC after training: 0.4285714285714286
User 97909 does not improve AUC. Reverting changes.
Training on augumented user 107889 12/50 current_auc = 0.4285714285714286
User 107889 AUC after training: 0.4285714285714286
User 107889 does not improve AUC. Reverting changes.
Training on augumented user 127598 13/50 current_auc = 0.4285714285714286
User 127598 AUC after training: 0.4285714285714286
User 127598 does not improve AUC. Reverting changes.
Training on augumented user 24475 14/50 current_auc = 0.4285714285714286
User 24475 AUC after training: 0.4285714285714286
User 24475 does not improve AUC. Reverting changes.
Training on augumented user 48496 15/50 current_auc = 0.4285714285714286
User 48496 AUC after training: 0.4285714285714286
User 48496 does not improve AUC. Reverting changes.
Training on augumented user 48211 16/50 current_auc = 0.4285714285714286
User 48211 AUC after training: 0.4285714285714286
User 48211 does not improve AUC. Reverting changes.
Training on augumented user 30854 17/50 current_auc = 0.4285714285714286
User 30854 AUC after training: 0.4285714285714286
User 30854 does not improve AUC. Reverting changes.
Training on augumented user 98551 18/50 current_auc = 0.4285714285714286
User 98551 AUC after training: 0.4285714285714286
User 98551 does not improve AUC. Reverting changes.
Training on augumented user 66388 19/50 current_auc = 0.4285714285714286
User 66388 AUC after training: 0.4285714285714286
User 66388 does not improve AUC. Reverting changes.
Training on augumented user 2910 20/50 current_auc = 0.4285714285714286
User 2910 AUC after training: 0.4285714285714286
User 2910 does not improve AUC. Reverting changes.
Training on augumented user 67504 21/50 current_auc = 0.4285714285714286
User 67504 AUC after training: 0.4285714285714286
User 67504 does not improve AUC. Reverting changes.
Training on augumented user 122752 22/50 current_auc = 0.4285714285714286
User 122752 AUC after training: 0.4285714285714286
User 122752 does not improve AUC. Reverting changes.
Training on augumented user 18206 23/50 current_auc = 0.4285714285714286
User 18206 AUC after training: 0.4285714285714286
User 18206 does not improve AUC. Reverting changes.
Training on augumented user 100725 24/50 current_auc = 0.4285714285714286
User 100725 AUC after training: 0.4285714285714286
User 100725 does not improve AUC. Reverting changes.
Training on augumented user 113669 25/50 current_auc = 0.4285714285714286
User 113669 AUC after training: 0.4285714285714286
User 113669 does not improve AUC. Reverting changes.
Training on augumented user 110650 26/50 current_auc = 0.4285714285714286
User 110650 AUC after training: 0.4285714285714286
User 110650 does not improve AUC. Reverting changes.
Training on augumented user 84144 27/50 current_auc = 0.4285714285714286
User 84144 AUC after training: 0.4285714285714286
User 84144 does not improve AUC. Reverting changes.
Training on augumented user 5599 28/50 current_auc = 0.4285714285714286
User 5599 AUC after training: 0.4285714285714286
User 5599 does not improve AUC. Reverting changes.
Training on augumented user 31299 29/50 current_auc = 0.4285714285714286
User 31299 AUC after training: 0.4285714285714286
User 31299 does not improve AUC. Reverting changes.
Training on augumented user 9414 30/50 current_auc = 0.4285714285714286
User 9414 AUC after training: 0.4285714285714286
User 9414 does not improve AUC. Reverting changes.
Training on augumented user 39196 31/50 current_auc = 0.4285714285714286
User 39196 AUC after training: 0.4285714285714286
User 39196 does not improve AUC. Reverting changes.
Training on augumented user 91360 32/50 current_auc = 0.4285714285714286
User 91360 AUC after training: 0.4285714285714286
User 91360 does not improve AUC. Reverting changes.
Training on augumented user 110424 33/50 current_auc = 0.4285714285714286
User 110424 AUC after training: 0.4285714285714286
User 110424 does not improve AUC. Reverting changes.
Training on augumented user 110055 34/50 current_auc = 0.4285714285714286
User 110055 AUC after training: 0.4285714285714286
User 110055 does not improve AUC. Reverting changes.
Training on augumented user 69798 35/50 current_auc = 0.4285714285714286
User 69798 AUC after training: 0.4285714285714286
User 69798 does not improve AUC. Reverting changes.
Training on augumented user 62643 36/50 current_auc = 0.4285714285714286
User 62643 AUC after training: 0.4285714285714286
User 62643 does not improve AUC. Reverting changes.
Training on augumented user 34218 37/50 current_auc = 0.4285714285714286
User 34218 AUC after training: 0.4285714285714286
User 34218 does not improve AUC. Reverting changes.
Training on augumented user 121120 38/50 current_auc = 0.4285714285714286
User 121120 AUC after training: 0.4285714285714286
User 121120 does not improve AUC. Reverting changes.
Training on augumented user 9057 39/50 current_auc = 0.4285714285714286
User 9057 AUC after training: 0.4285714285714286
User 9057 does not improve AUC. Reverting changes.
Training on augumented user 132590 40/50 current_auc = 0.4285714285714286
User 132590 AUC after training: 0.4285714285714286
User 132590 does not improve AUC. Reverting changes.
Training on augumented user 12304 41/50 current_auc = 0.4285714285714286
User 12304 AUC after training: 0.4285714285714286
User 12304 does not improve AUC. Reverting changes.
Training on augumented user 65658 42/50 current_auc = 0.4285714285714286
User 65658 AUC after training: 0.4285714285714286
User 65658 does not improve AUC. Reverting changes.
Training on augumented user 7732 43/50 current_auc = 0.4285714285714286
User 7732 AUC after training: 0.4285714285714286
User 7732 does not improve AUC. Reverting changes.
Training on augumented user 44521 44/50 current_auc = 0.4285714285714286
User 44521 AUC after training: 0.4285714285714286
User 44521 does not improve AUC. Reverting changes.
Training on augumented user 9369 45/50 current_auc = 0.4285714285714286
User 9369 AUC after training: 0.4285714285714286
User 9369 does not improve AUC. Reverting changes.
Training on augumented user 43193 46/50 current_auc = 0.4285714285714286
User 43193 AUC after training: 0.4285714285714286
User 43193 does not improve AUC. Reverting changes.
Training on augumented user 45734 47/50 current_auc = 0.4285714285714286
User 45734 AUC after training: 0.4285714285714286
User 45734 does not improve AUC. Reverting changes.
Training on augumented user 48067 48/50 current_auc = 0.4285714285714286
User 48067 AUC after training: 0.4285714285714286
User 48067 does not improve AUC. Reverting changes.
Training on augumented user 88485 49/50 current_auc = 0.4285714285714286
User 88485 AUC after training: 0.4285714285714286
User 88485 does not improve AUC. Reverting changes.
[2024-12-02 19:03:57.568425] start test user 127871 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:58.012793] start test user 127871 158/567 recall augumented users by random, augumented_users = [132258, 119739, 112863, 7774, 18292, 38506, 94100, 89373, 26881, 40661, 6211, 134956, 65365, 207, 16421, 31179, 31953, 84397, 132253, 17975, 81098, 10625, 23228, 76169, 23641, 28134, 47131, 110882, 63753, 39262, 41729, 19036, 33455, 125629, 60317, 42033, 110859, 59782, 53557, 29946, 6410, 118134, 18212, 65551, 31491, 2144, 28870, 72368, 64794, 129618]
[2024-12-02 19:03:58.028854] user = 127871 Cloud 158/567
[2024-12-02 19:03:58.041777] user = 127871 Local 158/567
[2024-12-02 19:03:58.182580] user = 127871 Local+ 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:00.423285] user = 127871 MPDA- 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5183823529411764
Training on augumented user 132258 0/50 current_auc = 0.5183823529411764
User 132258 AUC after training: 0.5183823529411764
User 132258 does not improve AUC. Reverting changes.
Training on augumented user 119739 1/50 current_auc = 0.5183823529411764
User 119739 AUC after training: 0.5183823529411764
User 119739 does not improve AUC. Reverting changes.
Training on augumented user 112863 2/50 current_auc = 0.5183823529411764
User 112863 AUC after training: 0.5191176470588235
User 112863 improves AUC. Keeping the model.
Training on augumented user 7774 3/50 current_auc = 0.5191176470588235
User 7774 AUC after training: 0.5191176470588235
User 7774 does not improve AUC. Reverting changes.
Training on augumented user 18292 4/50 current_auc = 0.5191176470588235
User 18292 AUC after training: 0.5191176470588236
User 18292 improves AUC. Keeping the model.
Training on augumented user 38506 5/50 current_auc = 0.5191176470588236
User 38506 AUC after training: 0.5183823529411764
User 38506 does not improve AUC. Reverting changes.
Training on augumented user 94100 6/50 current_auc = 0.5191176470588236
User 94100 AUC after training: 0.5191176470588235
User 94100 does not improve AUC. Reverting changes.
Training on augumented user 89373 7/50 current_auc = 0.5191176470588236
User 89373 AUC after training: 0.5183823529411764
User 89373 does not improve AUC. Reverting changes.
Training on augumented user 26881 8/50 current_auc = 0.5191176470588236
User 26881 AUC after training: 0.5198529411764705
User 26881 improves AUC. Keeping the model.
Training on augumented user 40661 9/50 current_auc = 0.5198529411764705
User 40661 AUC after training: 0.5169117647058823
User 40661 does not improve AUC. Reverting changes.
Training on augumented user 6211 10/50 current_auc = 0.5198529411764705
User 6211 AUC after training: 0.5191176470588235
User 6211 does not improve AUC. Reverting changes.
Training on augumented user 134956 11/50 current_auc = 0.5198529411764705
User 134956 AUC after training: 0.5213235294117647
User 134956 improves AUC. Keeping the model.
Training on augumented user 65365 12/50 current_auc = 0.5213235294117647
User 65365 AUC after training: 0.5169117647058823
User 65365 does not improve AUC. Reverting changes.
Training on augumented user 207 13/50 current_auc = 0.5213235294117647
User 207 AUC after training: 0.5213235294117647
User 207 does not improve AUC. Reverting changes.
Training on augumented user 16421 14/50 current_auc = 0.5213235294117647
User 16421 AUC after training: 0.5213235294117646
User 16421 does not improve AUC. Reverting changes.
Training on augumented user 31179 15/50 current_auc = 0.5213235294117647
User 31179 AUC after training: 0.5191176470588235
User 31179 does not improve AUC. Reverting changes.
Training on augumented user 31953 16/50 current_auc = 0.5213235294117647
User 31953 AUC after training: 0.5183823529411764
User 31953 does not improve AUC. Reverting changes.
Training on augumented user 84397 17/50 current_auc = 0.5213235294117647
User 84397 AUC after training: 0.5213235294117647
User 84397 does not improve AUC. Reverting changes.
Training on augumented user 132253 18/50 current_auc = 0.5213235294117647
User 132253 AUC after training: 0.5191176470588235
User 132253 does not improve AUC. Reverting changes.
Training on augumented user 17975 19/50 current_auc = 0.5213235294117647
User 17975 AUC after training: 0.5213235294117647
User 17975 does not improve AUC. Reverting changes.
Training on augumented user 81098 20/50 current_auc = 0.5213235294117647
User 81098 AUC after training: 0.5227941176470589
User 81098 improves AUC. Keeping the model.
Training on augumented user 10625 21/50 current_auc = 0.5227941176470589
User 10625 AUC after training: 0.5205882352941176
User 10625 does not improve AUC. Reverting changes.
Training on augumented user 23228 22/50 current_auc = 0.5227941176470589
User 23228 AUC after training: 0.5205882352941177
User 23228 does not improve AUC. Reverting changes.
Training on augumented user 76169 23/50 current_auc = 0.5227941176470589
User 76169 AUC after training: 0.5220588235294117
User 76169 does not improve AUC. Reverting changes.
Training on augumented user 23641 24/50 current_auc = 0.5227941176470589
User 23641 AUC after training: 0.5183823529411764
User 23641 does not improve AUC. Reverting changes.
Training on augumented user 28134 25/50 current_auc = 0.5227941176470589
User 28134 AUC after training: 0.5220588235294117
User 28134 does not improve AUC. Reverting changes.
Training on augumented user 47131 26/50 current_auc = 0.5227941176470589
User 47131 AUC after training: 0.5220588235294118
User 47131 does not improve AUC. Reverting changes.
Training on augumented user 110882 27/50 current_auc = 0.5227941176470589
User 110882 AUC after training: 0.5205882352941177
User 110882 does not improve AUC. Reverting changes.
Training on augumented user 63753 28/50 current_auc = 0.5227941176470589
User 63753 AUC after training: 0.5220588235294118
User 63753 does not improve AUC. Reverting changes.
Training on augumented user 39262 29/50 current_auc = 0.5227941176470589
User 39262 AUC after training: 0.5213235294117647
User 39262 does not improve AUC. Reverting changes.
Training on augumented user 41729 30/50 current_auc = 0.5227941176470589
User 41729 AUC after training: 0.5213235294117647
User 41729 does not improve AUC. Reverting changes.
Training on augumented user 19036 31/50 current_auc = 0.5227941176470589
User 19036 AUC after training: 0.5227941176470589
User 19036 does not improve AUC. Reverting changes.
Training on augumented user 33455 32/50 current_auc = 0.5227941176470589
User 33455 AUC after training: 0.5220588235294117
User 33455 does not improve AUC. Reverting changes.
Training on augumented user 125629 33/50 current_auc = 0.5227941176470589
User 125629 AUC after training: 0.5183823529411765
User 125629 does not improve AUC. Reverting changes.
Training on augumented user 60317 34/50 current_auc = 0.5227941176470589
User 60317 AUC after training: 0.524264705882353
User 60317 improves AUC. Keeping the model.
Training on augumented user 42033 35/50 current_auc = 0.524264705882353
User 42033 AUC after training: 0.5220588235294118
User 42033 does not improve AUC. Reverting changes.
Training on augumented user 110859 36/50 current_auc = 0.524264705882353
User 110859 AUC after training: 0.5213235294117647
User 110859 does not improve AUC. Reverting changes.
Training on augumented user 59782 37/50 current_auc = 0.524264705882353
User 59782 AUC after training: 0.5213235294117647
User 59782 does not improve AUC. Reverting changes.
Training on augumented user 53557 38/50 current_auc = 0.524264705882353
User 53557 AUC after training: 0.5227941176470587
User 53557 does not improve AUC. Reverting changes.
Training on augumented user 29946 39/50 current_auc = 0.524264705882353
User 29946 AUC after training: 0.5220588235294118
User 29946 does not improve AUC. Reverting changes.
Training on augumented user 6410 40/50 current_auc = 0.524264705882353
User 6410 AUC after training: 0.5227941176470587
User 6410 does not improve AUC. Reverting changes.
Training on augumented user 118134 41/50 current_auc = 0.524264705882353
User 118134 AUC after training: 0.5147058823529411
User 118134 does not improve AUC. Reverting changes.
Training on augumented user 18212 42/50 current_auc = 0.524264705882353
User 18212 AUC after training: 0.5205882352941176
User 18212 does not improve AUC. Reverting changes.
Training on augumented user 65551 43/50 current_auc = 0.524264705882353
User 65551 AUC after training: 0.5235294117647059
User 65551 does not improve AUC. Reverting changes.
Training on augumented user 31491 44/50 current_auc = 0.524264705882353
User 31491 AUC after training: 0.5227941176470587
User 31491 does not improve AUC. Reverting changes.
Training on augumented user 2144 45/50 current_auc = 0.524264705882353
User 2144 AUC after training: 0.5198529411764705
User 2144 does not improve AUC. Reverting changes.
Training on augumented user 28870 46/50 current_auc = 0.524264705882353
User 28870 AUC after training: 0.5176470588235293
User 28870 does not improve AUC. Reverting changes.
Training on augumented user 72368 47/50 current_auc = 0.524264705882353
User 72368 AUC after training: 0.5176470588235293
User 72368 does not improve AUC. Reverting changes.
Training on augumented user 64794 48/50 current_auc = 0.524264705882353
User 64794 AUC after training: 0.5213235294117647
User 64794 does not improve AUC. Reverting changes.
Training on augumented user 129618 49/50 current_auc = 0.524264705882353
User 129618 AUC after training: 0.5227941176470587
User 129618 does not improve AUC. Reverting changes.
[2024-12-02 19:04:29.736752] start test user 127883 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:30.345733] start test user 127883 159/567 recall augumented users by random, augumented_users = [100519, 29477, 92816, 73618, 47443, 125192, 88885, 129056, 123277, 97129, 71258, 37960, 30986, 23675, 20967, 60853, 27928, 45168, 68960, 122075, 19313, 115245, 88692, 89557, 38536, 55671, 38772, 122447, 95034, 80339, 29878, 80597, 54352, 34402, 87050, 43835, 28985, 110424, 43438, 33052, 94982, 50969, 53051, 115085, 16735, 56839, 7399, 94201, 33950, 56122]
[2024-12-02 19:04:30.363784] user = 127883 Cloud 159/567
[2024-12-02 19:04:30.375746] user = 127883 Local 159/567
[2024-12-02 19:04:30.433980] user = 127883 Local+ 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:32.980842] user = 127883 MPDA- 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7128205128205128
Training on augumented user 100519 0/50 current_auc = 0.7128205128205128
User 100519 AUC after training: 0.7153846153846155
User 100519 improves AUC. Keeping the model.
Training on augumented user 29477 1/50 current_auc = 0.7153846153846155
User 29477 AUC after training: 0.7102564102564103
User 29477 does not improve AUC. Reverting changes.
Training on augumented user 92816 2/50 current_auc = 0.7153846153846155
User 92816 AUC after training: 0.7128205128205128
User 92816 does not improve AUC. Reverting changes.
Training on augumented user 73618 3/50 current_auc = 0.7153846153846155
User 73618 AUC after training: 0.7205128205128205
User 73618 improves AUC. Keeping the model.
Training on augumented user 47443 4/50 current_auc = 0.7205128205128205
User 47443 AUC after training: 0.717948717948718
User 47443 does not improve AUC. Reverting changes.
Training on augumented user 125192 5/50 current_auc = 0.7205128205128205
User 125192 AUC after training: 0.7205128205128205
User 125192 does not improve AUC. Reverting changes.
Training on augumented user 88885 6/50 current_auc = 0.7205128205128205
User 88885 AUC after training: 0.7179487179487181
User 88885 does not improve AUC. Reverting changes.
Training on augumented user 129056 7/50 current_auc = 0.7205128205128205
User 129056 AUC after training: 0.7179487179487181
User 129056 does not improve AUC. Reverting changes.
Training on augumented user 123277 8/50 current_auc = 0.7205128205128205
User 123277 AUC after training: 0.7179487179487181
User 123277 does not improve AUC. Reverting changes.
Training on augumented user 97129 9/50 current_auc = 0.7205128205128205
User 97129 AUC after training: 0.7102564102564103
User 97129 does not improve AUC. Reverting changes.
Training on augumented user 71258 10/50 current_auc = 0.7205128205128205
User 71258 AUC after training: 0.7205128205128205
User 71258 does not improve AUC. Reverting changes.
Training on augumented user 37960 11/50 current_auc = 0.7205128205128205
User 37960 AUC after training: 0.7153846153846154
User 37960 does not improve AUC. Reverting changes.
Training on augumented user 30986 12/50 current_auc = 0.7205128205128205
User 30986 AUC after training: 0.7179487179487181
User 30986 does not improve AUC. Reverting changes.
Training on augumented user 23675 13/50 current_auc = 0.7205128205128205
User 23675 AUC after training: 0.717948717948718
User 23675 does not improve AUC. Reverting changes.
Training on augumented user 20967 14/50 current_auc = 0.7205128205128205
User 20967 AUC after training: 0.717948717948718
User 20967 does not improve AUC. Reverting changes.
Training on augumented user 60853 15/50 current_auc = 0.7205128205128205
User 60853 AUC after training: 0.717948717948718
User 60853 does not improve AUC. Reverting changes.
Training on augumented user 27928 16/50 current_auc = 0.7205128205128205
User 27928 AUC after training: 0.717948717948718
User 27928 does not improve AUC. Reverting changes.
Training on augumented user 45168 17/50 current_auc = 0.7205128205128205
User 45168 AUC after training: 0.717948717948718
User 45168 does not improve AUC. Reverting changes.
Training on augumented user 68960 18/50 current_auc = 0.7205128205128205
User 68960 AUC after training: 0.7153846153846155
User 68960 does not improve AUC. Reverting changes.
Training on augumented user 122075 19/50 current_auc = 0.7205128205128205
User 122075 AUC after training: 0.717948717948718
User 122075 does not improve AUC. Reverting changes.
Training on augumented user 19313 20/50 current_auc = 0.7205128205128205
User 19313 AUC after training: 0.7153846153846154
User 19313 does not improve AUC. Reverting changes.
Training on augumented user 115245 21/50 current_auc = 0.7205128205128205
User 115245 AUC after training: 0.7179487179487181
User 115245 does not improve AUC. Reverting changes.
Training on augumented user 88692 22/50 current_auc = 0.7205128205128205
User 88692 AUC after training: 0.7128205128205128
User 88692 does not improve AUC. Reverting changes.
Training on augumented user 89557 23/50 current_auc = 0.7205128205128205
User 89557 AUC after training: 0.717948717948718
User 89557 does not improve AUC. Reverting changes.
Training on augumented user 38536 24/50 current_auc = 0.7205128205128205
User 38536 AUC after training: 0.7153846153846154
User 38536 does not improve AUC. Reverting changes.
Training on augumented user 55671 25/50 current_auc = 0.7205128205128205
User 55671 AUC after training: 0.717948717948718
User 55671 does not improve AUC. Reverting changes.
Training on augumented user 38772 26/50 current_auc = 0.7205128205128205
User 38772 AUC after training: 0.717948717948718
User 38772 does not improve AUC. Reverting changes.
Training on augumented user 122447 27/50 current_auc = 0.7205128205128205
User 122447 AUC after training: 0.7205128205128205
User 122447 does not improve AUC. Reverting changes.
Training on augumented user 95034 28/50 current_auc = 0.7205128205128205
User 95034 AUC after training: 0.7153846153846154
User 95034 does not improve AUC. Reverting changes.
Training on augumented user 80339 29/50 current_auc = 0.7205128205128205
User 80339 AUC after training: 0.7230769230769232
User 80339 improves AUC. Keeping the model.
Training on augumented user 29878 30/50 current_auc = 0.7230769230769232
User 29878 AUC after training: 0.717948717948718
User 29878 does not improve AUC. Reverting changes.
Training on augumented user 80597 31/50 current_auc = 0.7230769230769232
User 80597 AUC after training: 0.7205128205128205
User 80597 does not improve AUC. Reverting changes.
Training on augumented user 54352 32/50 current_auc = 0.7230769230769232
User 54352 AUC after training: 0.717948717948718
User 54352 does not improve AUC. Reverting changes.
Training on augumented user 34402 33/50 current_auc = 0.7230769230769232
User 34402 AUC after training: 0.7282051282051283
User 34402 improves AUC. Keeping the model.
Training on augumented user 87050 34/50 current_auc = 0.7282051282051283
User 87050 AUC after training: 0.7256410256410256
User 87050 does not improve AUC. Reverting changes.
Training on augumented user 43835 35/50 current_auc = 0.7282051282051283
User 43835 AUC after training: 0.7256410256410257
User 43835 does not improve AUC. Reverting changes.
Training on augumented user 28985 36/50 current_auc = 0.7282051282051283
User 28985 AUC after training: 0.7230769230769232
User 28985 does not improve AUC. Reverting changes.
Training on augumented user 110424 37/50 current_auc = 0.7282051282051283
User 110424 AUC after training: 0.7256410256410257
User 110424 does not improve AUC. Reverting changes.
Training on augumented user 43438 38/50 current_auc = 0.7282051282051283
User 43438 AUC after training: 0.7282051282051283
User 43438 does not improve AUC. Reverting changes.
Training on augumented user 33052 39/50 current_auc = 0.7282051282051283
User 33052 AUC after training: 0.7230769230769231
User 33052 does not improve AUC. Reverting changes.
Training on augumented user 94982 40/50 current_auc = 0.7282051282051283
User 94982 AUC after training: 0.7230769230769232
User 94982 does not improve AUC. Reverting changes.
Training on augumented user 50969 41/50 current_auc = 0.7282051282051283
User 50969 AUC after training: 0.7256410256410257
User 50969 does not improve AUC. Reverting changes.
Training on augumented user 53051 42/50 current_auc = 0.7282051282051283
User 53051 AUC after training: 0.7230769230769231
User 53051 does not improve AUC. Reverting changes.
Training on augumented user 115085 43/50 current_auc = 0.7282051282051283
User 115085 AUC after training: 0.7230769230769232
User 115085 does not improve AUC. Reverting changes.
Training on augumented user 16735 44/50 current_auc = 0.7282051282051283
User 16735 AUC after training: 0.7282051282051283
User 16735 does not improve AUC. Reverting changes.
Training on augumented user 56839 45/50 current_auc = 0.7282051282051283
User 56839 AUC after training: 0.7282051282051283
User 56839 does not improve AUC. Reverting changes.
Training on augumented user 7399 46/50 current_auc = 0.7282051282051283
User 7399 AUC after training: 0.7282051282051283
User 7399 does not improve AUC. Reverting changes.
Training on augumented user 94201 47/50 current_auc = 0.7282051282051283
User 94201 AUC after training: 0.7282051282051283
User 94201 does not improve AUC. Reverting changes.
Training on augumented user 33950 48/50 current_auc = 0.7282051282051283
User 33950 AUC after training: 0.7230769230769232
User 33950 does not improve AUC. Reverting changes.
Training on augumented user 56122 49/50 current_auc = 0.7282051282051283
User 56122 AUC after training: 0.7230769230769232
User 56122 does not improve AUC. Reverting changes.
[2024-12-02 19:05:03.946432] start test user 127890 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:04.389801] start test user 127890 160/567 recall augumented users by random, augumented_users = [134434, 42018, 83322, 123989, 103382, 65599, 31404, 109971, 103148, 411, 55846, 47408, 79310, 29185, 43368, 22935, 105597, 80402, 95784, 120009, 53716, 20530, 31791, 60905, 52033, 99367, 35603, 106698, 91264, 49758, 122281, 37830, 80941, 116225, 105216, 58188, 99188, 84104, 53646, 121602, 79383, 24308, 94511, 73497, 63575, 103785, 80039, 82616, 12504, 118372]
[2024-12-02 19:05:04.408477] user = 127890 Cloud 160/567
[2024-12-02 19:05:04.427291] user = 127890 Local 160/567
[2024-12-02 19:05:04.467855] user = 127890 Local+ 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:07.385021] user = 127890 MPDA- 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.506066411238825
Training on augumented user 134434 0/50 current_auc = 0.506066411238825
User 134434 AUC after training: 0.5047892720306514
User 134434 does not improve AUC. Reverting changes.
Training on augumented user 42018 1/50 current_auc = 0.506066411238825
User 42018 AUC after training: 0.506066411238825
User 42018 does not improve AUC. Reverting changes.
Training on augumented user 83322 2/50 current_auc = 0.506066411238825
User 83322 AUC after training: 0.5073435504469987
User 83322 improves AUC. Keeping the model.
Training on augumented user 123989 3/50 current_auc = 0.5073435504469987
User 123989 AUC after training: 0.5070242656449553
User 123989 does not improve AUC. Reverting changes.
Training on augumented user 103382 4/50 current_auc = 0.5073435504469987
User 103382 AUC after training: 0.5057471264367815
User 103382 does not improve AUC. Reverting changes.
Training on augumented user 65599 5/50 current_auc = 0.5073435504469987
User 65599 AUC after training: 0.5044699872286079
User 65599 does not improve AUC. Reverting changes.
Training on augumented user 31404 6/50 current_auc = 0.5073435504469987
User 31404 AUC after training: 0.5047892720306513
User 31404 does not improve AUC. Reverting changes.
Training on augumented user 109971 7/50 current_auc = 0.5073435504469987
User 109971 AUC after training: 0.5092592592592592
User 109971 improves AUC. Keeping the model.
Training on augumented user 103148 8/50 current_auc = 0.5092592592592592
User 103148 AUC after training: 0.5086206896551724
User 103148 does not improve AUC. Reverting changes.
Training on augumented user 411 9/50 current_auc = 0.5092592592592592
User 411 AUC after training: 0.5063856960408685
User 411 does not improve AUC. Reverting changes.
Training on augumented user 55846 10/50 current_auc = 0.5092592592592592
User 55846 AUC after training: 0.5044699872286078
User 55846 does not improve AUC. Reverting changes.
Training on augumented user 47408 11/50 current_auc = 0.5092592592592592
User 47408 AUC after training: 0.5079821200510856
User 47408 does not improve AUC. Reverting changes.
Training on augumented user 79310 12/50 current_auc = 0.5092592592592592
User 79310 AUC after training: 0.5089399744572158
User 79310 does not improve AUC. Reverting changes.
Training on augumented user 29185 13/50 current_auc = 0.5092592592592592
User 29185 AUC after training: 0.5076628352490422
User 29185 does not improve AUC. Reverting changes.
Training on augumented user 43368 14/50 current_auc = 0.5092592592592592
User 43368 AUC after training: 0.5051085568326947
User 43368 does not improve AUC. Reverting changes.
Training on augumented user 22935 15/50 current_auc = 0.5092592592592592
User 22935 AUC after training: 0.5067049808429119
User 22935 does not improve AUC. Reverting changes.
Training on augumented user 105597 16/50 current_auc = 0.5092592592592592
User 105597 AUC after training: 0.5076628352490422
User 105597 does not improve AUC. Reverting changes.
Training on augumented user 80402 17/50 current_auc = 0.5092592592592592
User 80402 AUC after training: 0.5076628352490422
User 80402 does not improve AUC. Reverting changes.
Training on augumented user 95784 18/50 current_auc = 0.5092592592592592
User 95784 AUC after training: 0.5070242656449553
User 95784 does not improve AUC. Reverting changes.
Training on augumented user 120009 19/50 current_auc = 0.5092592592592592
User 120009 AUC after training: 0.5089399744572158
User 120009 does not improve AUC. Reverting changes.
Training on augumented user 53716 20/50 current_auc = 0.5092592592592592
User 53716 AUC after training: 0.5073435504469987
User 53716 does not improve AUC. Reverting changes.
Training on augumented user 20530 21/50 current_auc = 0.5092592592592592
User 20530 AUC after training: 0.5079821200510856
User 20530 does not improve AUC. Reverting changes.
Training on augumented user 31791 22/50 current_auc = 0.5092592592592592
User 31791 AUC after training: 0.5063856960408685
User 31791 does not improve AUC. Reverting changes.
Training on augumented user 60905 23/50 current_auc = 0.5092592592592592
User 60905 AUC after training: 0.5070242656449553
User 60905 does not improve AUC. Reverting changes.
Training on augumented user 52033 24/50 current_auc = 0.5092592592592592
User 52033 AUC after training: 0.5073435504469987
User 52033 does not improve AUC. Reverting changes.
Training on augumented user 99367 25/50 current_auc = 0.5092592592592592
User 99367 AUC after training: 0.5073435504469987
User 99367 does not improve AUC. Reverting changes.
Training on augumented user 35603 26/50 current_auc = 0.5092592592592592
User 35603 AUC after training: 0.5089399744572158
User 35603 does not improve AUC. Reverting changes.
Training on augumented user 106698 27/50 current_auc = 0.5092592592592592
User 106698 AUC after training: 0.5076628352490422
User 106698 does not improve AUC. Reverting changes.
Training on augumented user 91264 28/50 current_auc = 0.5092592592592592
User 91264 AUC after training: 0.508301404853129
User 91264 does not improve AUC. Reverting changes.
Training on augumented user 49758 29/50 current_auc = 0.5092592592592592
User 49758 AUC after training: 0.5073435504469987
User 49758 does not improve AUC. Reverting changes.
Training on augumented user 122281 30/50 current_auc = 0.5092592592592592
User 122281 AUC after training: 0.5073435504469987
User 122281 does not improve AUC. Reverting changes.
Training on augumented user 37830 31/50 current_auc = 0.5092592592592592
User 37830 AUC after training: 0.5089399744572158
User 37830 does not improve AUC. Reverting changes.
Training on augumented user 80941 32/50 current_auc = 0.5092592592592592
User 80941 AUC after training: 0.5063856960408684
User 80941 does not improve AUC. Reverting changes.
Training on augumented user 116225 33/50 current_auc = 0.5092592592592592
User 116225 AUC after training: 0.508301404853129
User 116225 does not improve AUC. Reverting changes.
Training on augumented user 105216 34/50 current_auc = 0.5092592592592592
User 105216 AUC after training: 0.5095785440613027
User 105216 improves AUC. Keeping the model.
Training on augumented user 58188 35/50 current_auc = 0.5095785440613027
User 58188 AUC after training: 0.5089399744572158
User 58188 does not improve AUC. Reverting changes.
Training on augumented user 99188 36/50 current_auc = 0.5095785440613027
User 99188 AUC after training: 0.5086206896551724
User 99188 does not improve AUC. Reverting changes.
Training on augumented user 84104 37/50 current_auc = 0.5095785440613027
User 84104 AUC after training: 0.5095785440613025
User 84104 does not improve AUC. Reverting changes.
Training on augumented user 53646 38/50 current_auc = 0.5095785440613027
User 53646 AUC after training: 0.5102171136653895
User 53646 improves AUC. Keeping the model.
Training on augumented user 121602 39/50 current_auc = 0.5102171136653895
User 121602 AUC after training: 0.5108556832694764
User 121602 improves AUC. Keeping the model.
Training on augumented user 79383 40/50 current_auc = 0.5108556832694764
User 79383 AUC after training: 0.5102171136653895
User 79383 does not improve AUC. Reverting changes.
Training on augumented user 24308 41/50 current_auc = 0.5108556832694764
User 24308 AUC after training: 0.51213282247765
User 24308 improves AUC. Keeping the model.
Training on augumented user 94511 42/50 current_auc = 0.51213282247765
User 94511 AUC after training: 0.5095785440613027
User 94511 does not improve AUC. Reverting changes.
Training on augumented user 73497 43/50 current_auc = 0.51213282247765
User 73497 AUC after training: 0.5111749680715199
User 73497 does not improve AUC. Reverting changes.
Training on augumented user 63575 44/50 current_auc = 0.51213282247765
User 63575 AUC after training: 0.5111749680715197
User 63575 does not improve AUC. Reverting changes.
Training on augumented user 103785 45/50 current_auc = 0.51213282247765
User 103785 AUC after training: 0.51213282247765
User 103785 does not improve AUC. Reverting changes.
Training on augumented user 80039 46/50 current_auc = 0.51213282247765
User 80039 AUC after training: 0.51213282247765
User 80039 does not improve AUC. Reverting changes.
Training on augumented user 82616 47/50 current_auc = 0.51213282247765
User 82616 AUC after training: 0.5111749680715197
User 82616 does not improve AUC. Reverting changes.
Training on augumented user 12504 48/50 current_auc = 0.51213282247765
User 12504 AUC after training: 0.5102171136653895
User 12504 does not improve AUC. Reverting changes.
Training on augumented user 118372 49/50 current_auc = 0.51213282247765
User 118372 AUC after training: 0.5114942528735632
User 118372 does not improve AUC. Reverting changes.
[2024-12-02 19:05:35.523195] start test user 127901 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:35.939507] start test user 127901 161/567 recall augumented users by random, augumented_users = [17410, 54758, 14186, 45626, 132425, 89272, 124893, 45761, 127162, 67483, 135493, 30595, 87030, 23807, 80466, 99002, 17615, 107341, 132805, 89145, 14917, 99979, 93583, 108073, 45035, 40124, 136249, 135302, 122311, 14237, 46848, 105559, 33848, 76135, 106580, 103443, 37039, 107811, 111753, 8250, 113365, 75193, 98717, 54351, 120539, 80319, 120991, 53551, 9005, 53087]
[2024-12-02 19:05:35.954450] user = 127901 Cloud 161/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:05:35.960710] user = 127901 Local 161/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:05:36.047601] user = 127901 Local+ 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:05:37.928933] user = 127901 MPDA- 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 17410 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17410 AUC after training: 0.5
User 17410 does not improve AUC. Reverting changes.
Training on augumented user 54758 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54758 AUC after training: 0.5
User 54758 does not improve AUC. Reverting changes.
Training on augumented user 14186 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14186 AUC after training: 0.5
User 14186 does not improve AUC. Reverting changes.
Training on augumented user 45626 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45626 AUC after training: 0.5
User 45626 does not improve AUC. Reverting changes.
Training on augumented user 132425 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132425 AUC after training: 0.5
User 132425 does not improve AUC. Reverting changes.
Training on augumented user 89272 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89272 AUC after training: 0.5
User 89272 does not improve AUC. Reverting changes.
Training on augumented user 124893 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124893 AUC after training: 0.5
User 124893 does not improve AUC. Reverting changes.
Training on augumented user 45761 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45761 AUC after training: 0.5
User 45761 does not improve AUC. Reverting changes.
Training on augumented user 127162 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127162 AUC after training: 0.5
User 127162 does not improve AUC. Reverting changes.
Training on augumented user 67483 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67483 AUC after training: 0.5
User 67483 does not improve AUC. Reverting changes.
Training on augumented user 135493 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135493 AUC after training: 0.5
User 135493 does not improve AUC. Reverting changes.
Training on augumented user 30595 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30595 AUC after training: 0.5
User 30595 does not improve AUC. Reverting changes.
Training on augumented user 87030 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87030 AUC after training: 0.5
User 87030 does not improve AUC. Reverting changes.
Training on augumented user 23807 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23807 AUC after training: 0.5
User 23807 does not improve AUC. Reverting changes.
Training on augumented user 80466 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80466 AUC after training: 0.5
User 80466 does not improve AUC. Reverting changes.
Training on augumented user 99002 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99002 AUC after training: 0.5
User 99002 does not improve AUC. Reverting changes.
Training on augumented user 17615 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17615 AUC after training: 0.5
User 17615 does not improve AUC. Reverting changes.
Training on augumented user 107341 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107341 AUC after training: 0.5
User 107341 does not improve AUC. Reverting changes.
Training on augumented user 132805 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132805 AUC after training: 0.5
User 132805 does not improve AUC. Reverting changes.
Training on augumented user 89145 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89145 AUC after training: 0.5
User 89145 does not improve AUC. Reverting changes.
Training on augumented user 14917 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14917 AUC after training: 0.5
User 14917 does not improve AUC. Reverting changes.
Training on augumented user 99979 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99979 AUC after training: 0.5
User 99979 does not improve AUC. Reverting changes.
Training on augumented user 93583 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93583 AUC after training: 0.5
User 93583 does not improve AUC. Reverting changes.
Training on augumented user 108073 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108073 AUC after training: 0.5
User 108073 does not improve AUC. Reverting changes.
Training on augumented user 45035 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45035 AUC after training: 0.5
User 45035 does not improve AUC. Reverting changes.
Training on augumented user 40124 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40124 AUC after training: 0.5
User 40124 does not improve AUC. Reverting changes.
Training on augumented user 136249 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136249 AUC after training: 0.5
User 136249 does not improve AUC. Reverting changes.
Training on augumented user 135302 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135302 AUC after training: 0.5
User 135302 does not improve AUC. Reverting changes.
Training on augumented user 122311 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122311 AUC after training: 0.5
User 122311 does not improve AUC. Reverting changes.
Training on augumented user 14237 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14237 AUC after training: 0.5
User 14237 does not improve AUC. Reverting changes.
Training on augumented user 46848 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46848 AUC after training: 0.5
User 46848 does not improve AUC. Reverting changes.
Training on augumented user 105559 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105559 AUC after training: 0.5
User 105559 does not improve AUC. Reverting changes.
Training on augumented user 33848 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33848 AUC after training: 0.5
User 33848 does not improve AUC. Reverting changes.
Training on augumented user 76135 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76135 AUC after training: 0.5
User 76135 does not improve AUC. Reverting changes.
Training on augumented user 106580 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106580 AUC after training: 0.5
User 106580 does not improve AUC. Reverting changes.
Training on augumented user 103443 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103443 AUC after training: 0.5
User 103443 does not improve AUC. Reverting changes.
Training on augumented user 37039 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37039 AUC after training: 0.5
User 37039 does not improve AUC. Reverting changes.
Training on augumented user 107811 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107811 AUC after training: 0.5
User 107811 does not improve AUC. Reverting changes.
Training on augumented user 111753 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111753 AUC after training: 0.5
User 111753 does not improve AUC. Reverting changes.
Training on augumented user 8250 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8250 AUC after training: 0.5
User 8250 does not improve AUC. Reverting changes.
Training on augumented user 113365 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113365 AUC after training: 0.5
User 113365 does not improve AUC. Reverting changes.
Training on augumented user 75193 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75193 AUC after training: 0.5
User 75193 does not improve AUC. Reverting changes.
Training on augumented user 98717 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98717 AUC after training: 0.5
User 98717 does not improve AUC. Reverting changes.
Training on augumented user 54351 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54351 AUC after training: 0.5
User 54351 does not improve AUC. Reverting changes.
Training on augumented user 120539 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120539 AUC after training: 0.5
User 120539 does not improve AUC. Reverting changes.
Training on augumented user 80319 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80319 AUC after training: 0.5
User 80319 does not improve AUC. Reverting changes.
Training on augumented user 120991 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120991 AUC after training: 0.5
User 120991 does not improve AUC. Reverting changes.
Training on augumented user 53551 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53551 AUC after training: 0.5
User 53551 does not improve AUC. Reverting changes.
Training on augumented user 9005 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9005 AUC after training: 0.5
User 9005 does not improve AUC. Reverting changes.
Training on augumented user 53087 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53087 AUC after training: 0.5
User 53087 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:00.681927] start test user 127944 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:01.466211] start test user 127944 162/567 recall augumented users by random, augumented_users = [119314, 103241, 57963, 56658, 78769, 32940, 67810, 13539, 121059, 76716, 30178, 86116, 50861, 46098, 689, 35734, 99907, 124980, 89540, 102192, 13555, 28755, 18063, 134092, 111613, 71178, 90041, 102940, 55686, 125498, 96841, 64628, 65693, 4004, 113702, 91016, 4765, 79881, 40132, 72992, 33164, 108397, 63374, 75883, 86778, 14423, 33753, 83243, 91261, 97611]
[2024-12-02 19:06:01.494690] user = 127944 Cloud 162/567
[2024-12-02 19:06:01.518091] user = 127944 Local 162/567
[2024-12-02 19:06:01.697566] user = 127944 Local+ 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:03.625314] user = 127944 MPDA- 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3076923076923077
Training on augumented user 119314 0/50 current_auc = 0.3076923076923077
User 119314 AUC after training: 0.3076923076923077
User 119314 does not improve AUC. Reverting changes.
Training on augumented user 103241 1/50 current_auc = 0.3076923076923077
User 103241 AUC after training: 0.3076923076923077
User 103241 does not improve AUC. Reverting changes.
Training on augumented user 57963 2/50 current_auc = 0.3076923076923077
User 57963 AUC after training: 0.3076923076923077
User 57963 does not improve AUC. Reverting changes.
Training on augumented user 56658 3/50 current_auc = 0.3076923076923077
User 56658 AUC after training: 0.3076923076923077
User 56658 does not improve AUC. Reverting changes.
Training on augumented user 78769 4/50 current_auc = 0.3076923076923077
User 78769 AUC after training: 0.3076923076923077
User 78769 does not improve AUC. Reverting changes.
Training on augumented user 32940 5/50 current_auc = 0.3076923076923077
User 32940 AUC after training: 0.3076923076923077
User 32940 does not improve AUC. Reverting changes.
Training on augumented user 67810 6/50 current_auc = 0.3076923076923077
User 67810 AUC after training: 0.3076923076923077
User 67810 does not improve AUC. Reverting changes.
Training on augumented user 13539 7/50 current_auc = 0.3076923076923077
User 13539 AUC after training: 0.3076923076923077
User 13539 does not improve AUC. Reverting changes.
Training on augumented user 121059 8/50 current_auc = 0.3076923076923077
User 121059 AUC after training: 0.3076923076923077
User 121059 does not improve AUC. Reverting changes.
Training on augumented user 76716 9/50 current_auc = 0.3076923076923077
User 76716 AUC after training: 0.3076923076923077
User 76716 does not improve AUC. Reverting changes.
Training on augumented user 30178 10/50 current_auc = 0.3076923076923077
User 30178 AUC after training: 0.3076923076923077
User 30178 does not improve AUC. Reverting changes.
Training on augumented user 86116 11/50 current_auc = 0.3076923076923077
User 86116 AUC after training: 0.3076923076923077
User 86116 does not improve AUC. Reverting changes.
Training on augumented user 50861 12/50 current_auc = 0.3076923076923077
User 50861 AUC after training: 0.3076923076923077
User 50861 does not improve AUC. Reverting changes.
Training on augumented user 46098 13/50 current_auc = 0.3076923076923077
User 46098 AUC after training: 0.3076923076923077
User 46098 does not improve AUC. Reverting changes.
Training on augumented user 689 14/50 current_auc = 0.3076923076923077
User 689 AUC after training: 0.3076923076923077
User 689 does not improve AUC. Reverting changes.
Training on augumented user 35734 15/50 current_auc = 0.3076923076923077
User 35734 AUC after training: 0.3076923076923077
User 35734 does not improve AUC. Reverting changes.
Training on augumented user 99907 16/50 current_auc = 0.3076923076923077
User 99907 AUC after training: 0.3076923076923077
User 99907 does not improve AUC. Reverting changes.
Training on augumented user 124980 17/50 current_auc = 0.3076923076923077
User 124980 AUC after training: 0.3076923076923077
User 124980 does not improve AUC. Reverting changes.
Training on augumented user 89540 18/50 current_auc = 0.3076923076923077
User 89540 AUC after training: 0.3076923076923077
User 89540 does not improve AUC. Reverting changes.
Training on augumented user 102192 19/50 current_auc = 0.3076923076923077
User 102192 AUC after training: 0.3076923076923077
User 102192 does not improve AUC. Reverting changes.
Training on augumented user 13555 20/50 current_auc = 0.3076923076923077
User 13555 AUC after training: 0.3076923076923077
User 13555 does not improve AUC. Reverting changes.
Training on augumented user 28755 21/50 current_auc = 0.3076923076923077
User 28755 AUC after training: 0.3076923076923077
User 28755 does not improve AUC. Reverting changes.
Training on augumented user 18063 22/50 current_auc = 0.3076923076923077
User 18063 AUC after training: 0.3076923076923077
User 18063 does not improve AUC. Reverting changes.
Training on augumented user 134092 23/50 current_auc = 0.3076923076923077
User 134092 AUC after training: 0.3076923076923077
User 134092 does not improve AUC. Reverting changes.
Training on augumented user 111613 24/50 current_auc = 0.3076923076923077
User 111613 AUC after training: 0.3076923076923077
User 111613 does not improve AUC. Reverting changes.
Training on augumented user 71178 25/50 current_auc = 0.3076923076923077
User 71178 AUC after training: 0.3076923076923077
User 71178 does not improve AUC. Reverting changes.
Training on augumented user 90041 26/50 current_auc = 0.3076923076923077
User 90041 AUC after training: 0.3076923076923077
User 90041 does not improve AUC. Reverting changes.
Training on augumented user 102940 27/50 current_auc = 0.3076923076923077
User 102940 AUC after training: 0.3076923076923077
User 102940 does not improve AUC. Reverting changes.
Training on augumented user 55686 28/50 current_auc = 0.3076923076923077
User 55686 AUC after training: 0.3076923076923077
User 55686 does not improve AUC. Reverting changes.
Training on augumented user 125498 29/50 current_auc = 0.3076923076923077
User 125498 AUC after training: 0.3076923076923077
User 125498 does not improve AUC. Reverting changes.
Training on augumented user 96841 30/50 current_auc = 0.3076923076923077
User 96841 AUC after training: 0.3076923076923077
User 96841 does not improve AUC. Reverting changes.
Training on augumented user 64628 31/50 current_auc = 0.3076923076923077
User 64628 AUC after training: 0.3076923076923077
User 64628 does not improve AUC. Reverting changes.
Training on augumented user 65693 32/50 current_auc = 0.3076923076923077
User 65693 AUC after training: 0.3076923076923077
User 65693 does not improve AUC. Reverting changes.
Training on augumented user 4004 33/50 current_auc = 0.3076923076923077
User 4004 AUC after training: 0.3076923076923077
User 4004 does not improve AUC. Reverting changes.
Training on augumented user 113702 34/50 current_auc = 0.3076923076923077
User 113702 AUC after training: 0.3076923076923077
User 113702 does not improve AUC. Reverting changes.
Training on augumented user 91016 35/50 current_auc = 0.3076923076923077
User 91016 AUC after training: 0.3076923076923077
User 91016 does not improve AUC. Reverting changes.
Training on augumented user 4765 36/50 current_auc = 0.3076923076923077
User 4765 AUC after training: 0.3076923076923077
User 4765 does not improve AUC. Reverting changes.
Training on augumented user 79881 37/50 current_auc = 0.3076923076923077
User 79881 AUC after training: 0.3076923076923077
User 79881 does not improve AUC. Reverting changes.
Training on augumented user 40132 38/50 current_auc = 0.3076923076923077
User 40132 AUC after training: 0.3076923076923077
User 40132 does not improve AUC. Reverting changes.
Training on augumented user 72992 39/50 current_auc = 0.3076923076923077
User 72992 AUC after training: 0.3076923076923077
User 72992 does not improve AUC. Reverting changes.
Training on augumented user 33164 40/50 current_auc = 0.3076923076923077
User 33164 AUC after training: 0.3076923076923077
User 33164 does not improve AUC. Reverting changes.
Training on augumented user 108397 41/50 current_auc = 0.3076923076923077
User 108397 AUC after training: 0.3076923076923077
User 108397 does not improve AUC. Reverting changes.
Training on augumented user 63374 42/50 current_auc = 0.3076923076923077
User 63374 AUC after training: 0.3076923076923077
User 63374 does not improve AUC. Reverting changes.
Training on augumented user 75883 43/50 current_auc = 0.3076923076923077
User 75883 AUC after training: 0.3076923076923077
User 75883 does not improve AUC. Reverting changes.
Training on augumented user 86778 44/50 current_auc = 0.3076923076923077
User 86778 AUC after training: 0.3076923076923077
User 86778 does not improve AUC. Reverting changes.
Training on augumented user 14423 45/50 current_auc = 0.3076923076923077
User 14423 AUC after training: 0.3076923076923077
User 14423 does not improve AUC. Reverting changes.
Training on augumented user 33753 46/50 current_auc = 0.3076923076923077
User 33753 AUC after training: 0.3076923076923077
User 33753 does not improve AUC. Reverting changes.
Training on augumented user 83243 47/50 current_auc = 0.3076923076923077
User 83243 AUC after training: 0.3076923076923077
User 83243 does not improve AUC. Reverting changes.
Training on augumented user 91261 48/50 current_auc = 0.3076923076923077
User 91261 AUC after training: 0.3076923076923077
User 91261 does not improve AUC. Reverting changes.
Training on augumented user 97611 49/50 current_auc = 0.3076923076923077
User 97611 AUC after training: 0.3076923076923077
User 97611 does not improve AUC. Reverting changes.
[2024-12-02 19:06:28.413420] start test user 127948 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:29.140717] start test user 127948 163/567 recall augumented users by random, augumented_users = [78979, 52073, 55077, 103922, 37605, 56602, 112667, 24762, 9601, 115904, 78111, 81047, 75196, 89873, 89575, 48295, 93994, 8147, 7582, 107743, 45756, 33837, 39685, 98168, 36753, 106578, 135533, 59673, 106879, 126926, 40875, 35067, 133502, 110476, 1236, 71097, 70371, 97566, 110517, 43283, 67596, 19570, 57903, 91783, 50145, 97128, 4034, 17812, 137712, 62711]
[2024-12-02 19:06:29.179583] user = 127948 Cloud 163/567
[2024-12-02 19:06:29.234134] user = 127948 Local 163/567
[2024-12-02 19:06:29.381865] user = 127948 Local+ 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:32.387375] user = 127948 MPDA- 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6364845100385588
Training on augumented user 78979 0/50 current_auc = 0.6364845100385588
User 78979 AUC after training: 0.6368169126445951
User 78979 improves AUC. Keeping the model.
Training on augumented user 52073 1/50 current_auc = 0.6368169126445951
User 52073 AUC after training: 0.6364180295173514
User 52073 does not improve AUC. Reverting changes.
Training on augumented user 55077 2/50 current_auc = 0.6368169126445951
User 55077 AUC after training: 0.6366839516021807
User 55077 does not improve AUC. Reverting changes.
Training on augumented user 103922 3/50 current_auc = 0.6368169126445951
User 103922 AUC after training: 0.6369498736870096
User 103922 improves AUC. Keeping the model.
Training on augumented user 37605 4/50 current_auc = 0.6369498736870096
User 37605 AUC after training: 0.6368833931658024
User 37605 does not improve AUC. Reverting changes.
Training on augumented user 56602 5/50 current_auc = 0.6369498736870096
User 56602 AUC after training: 0.6361521074325223
User 56602 does not improve AUC. Reverting changes.
Training on augumented user 112667 6/50 current_auc = 0.6369498736870096
User 112667 AUC after training: 0.6367171918627843
User 112667 does not improve AUC. Reverting changes.
Training on augumented user 24762 7/50 current_auc = 0.6369498736870096
User 24762 AUC after training: 0.637016354208217
User 24762 improves AUC. Keeping the model.
Training on augumented user 9601 8/50 current_auc = 0.637016354208217
User 9601 AUC after training: 0.6373819970748571
User 9601 improves AUC. Keeping the model.
Training on augumented user 115904 9/50 current_auc = 0.6373819970748571
User 115904 AUC after training: 0.6367836723839915
User 115904 does not improve AUC. Reverting changes.
Training on augumented user 78111 10/50 current_auc = 0.6373819970748571
User 78111 AUC after training: 0.6372490360324425
User 78111 does not improve AUC. Reverting changes.
Training on augumented user 81047 11/50 current_auc = 0.6373819970748571
User 81047 AUC after training: 0.637215795771839
User 81047 does not improve AUC. Reverting changes.
Training on augumented user 75196 12/50 current_auc = 0.6373819970748571
User 75196 AUC after training: 0.6372490360324425
User 75196 does not improve AUC. Reverting changes.
Training on augumented user 89873 13/50 current_auc = 0.6373819970748571
User 89873 AUC after training: 0.6371160749900281
User 89873 does not improve AUC. Reverting changes.
Training on augumented user 89575 14/50 current_auc = 0.6373819970748571
User 89575 AUC after training: 0.6362850684749368
User 89575 does not improve AUC. Reverting changes.
Training on augumented user 48295 15/50 current_auc = 0.6373819970748571
User 48295 AUC after training: 0.637947081505119
User 48295 improves AUC. Keeping the model.
Training on augumented user 93994 16/50 current_auc = 0.637947081505119
User 93994 AUC after training: 0.6380135620263264
User 93994 improves AUC. Keeping the model.
Training on augumented user 8147 17/50 current_auc = 0.6380135620263264
User 8147 AUC after training: 0.6376479191596863
User 8147 does not improve AUC. Reverting changes.
Training on augumented user 7582 18/50 current_auc = 0.6380135620263264
User 7582 AUC after training: 0.6362850684749369
User 7582 does not improve AUC. Reverting changes.
Training on augumented user 107743 19/50 current_auc = 0.6380135620263264
User 107743 AUC after training: 0.637947081505119
User 107743 does not improve AUC. Reverting changes.
Training on augumented user 45756 20/50 current_auc = 0.6380135620263264
User 45756 AUC after training: 0.637481717856668
User 45756 does not improve AUC. Reverting changes.
Training on augumented user 33837 21/50 current_auc = 0.6380135620263264
User 33837 AUC after training: 0.6367836723839915
User 33837 does not improve AUC. Reverting changes.
Training on augumented user 39685 22/50 current_auc = 0.6380135620263264
User 39685 AUC after training: 0.637116074990028
User 39685 does not improve AUC. Reverting changes.
Training on augumented user 98168 23/50 current_auc = 0.6380135620263264
User 98168 AUC after training: 0.6387116074990028
User 98168 improves AUC. Keeping the model.
Training on augumented user 36753 24/50 current_auc = 0.6387116074990028
User 36753 AUC after training: 0.6386783672383991
User 36753 does not improve AUC. Reverting changes.
Training on augumented user 106578 25/50 current_auc = 0.6387116074990028
User 106578 AUC after training: 0.6383792048929664
User 106578 does not improve AUC. Reverting changes.
Training on augumented user 135533 26/50 current_auc = 0.6387116074990028
User 135533 AUC after training: 0.63841244515357
User 135533 does not improve AUC. Reverting changes.
Training on augumented user 59673 27/50 current_auc = 0.6387116074990028
User 59673 AUC after training: 0.6387116074990028
User 59673 does not improve AUC. Reverting changes.
Training on augumented user 106879 28/50 current_auc = 0.6387116074990028
User 106879 AUC after training: 0.6389442893232283
User 106879 improves AUC. Keeping the model.
Training on augumented user 126926 29/50 current_auc = 0.6389442893232283
User 126926 AUC after training: 0.6403403802685813
User 126926 improves AUC. Keeping the model.
Training on augumented user 40875 30/50 current_auc = 0.6403403802685813
User 40875 AUC after training: 0.6405398218322031
User 40875 improves AUC. Keeping the model.
Training on augumented user 35067 31/50 current_auc = 0.6405398218322031
User 35067 AUC after training: 0.6403736205291849
User 35067 does not improve AUC. Reverting changes.
Training on augumented user 133502 32/50 current_auc = 0.6405398218322031
User 133502 AUC after training: 0.6402074192261668
User 133502 does not improve AUC. Reverting changes.
Training on augumented user 110476 33/50 current_auc = 0.6405398218322031
User 110476 AUC after training: 0.6400412179231485
User 110476 does not improve AUC. Reverting changes.
Training on augumented user 1236 34/50 current_auc = 0.6405398218322031
User 1236 AUC after training: 0.6405065815715995
User 1236 does not improve AUC. Reverting changes.
Training on augumented user 71097 35/50 current_auc = 0.6405398218322031
User 71097 AUC after training: 0.6399747374019413
User 71097 does not improve AUC. Reverting changes.
Training on augumented user 70371 36/50 current_auc = 0.6405398218322031
User 70371 AUC after training: 0.6402738997473739
User 70371 does not improve AUC. Reverting changes.
Training on augumented user 97566 37/50 current_auc = 0.6405398218322031
User 97566 AUC after training: 0.6399414971413375
User 97566 does not improve AUC. Reverting changes.
Training on augumented user 110517 38/50 current_auc = 0.6405398218322031
User 110517 AUC after training: 0.6405398218322031
User 110517 does not improve AUC. Reverting changes.
Training on augumented user 43283 39/50 current_auc = 0.6405398218322031
User 43283 AUC after training: 0.6406727828746177
User 43283 improves AUC. Keeping the model.
Training on augumented user 67596 40/50 current_auc = 0.6406727828746177
User 67596 AUC after training: 0.6408722244382397
User 67596 improves AUC. Keeping the model.
Training on augumented user 19570 41/50 current_auc = 0.6408722244382397
User 19570 AUC after training: 0.6400744581837521
User 19570 does not improve AUC. Reverting changes.
Training on augumented user 57903 42/50 current_auc = 0.6408722244382397
User 57903 AUC after training: 0.6381465230687409
User 57903 does not improve AUC. Reverting changes.
Training on augumented user 91783 43/50 current_auc = 0.6408722244382397
User 91783 AUC after training: 0.6404733413109959
User 91783 does not improve AUC. Reverting changes.
Training on augumented user 50145 44/50 current_auc = 0.6408722244382397
User 50145 AUC after training: 0.6405398218322031
User 50145 does not improve AUC. Reverting changes.
Training on augumented user 97128 45/50 current_auc = 0.6408722244382397
User 97128 AUC after training: 0.6406727828746177
User 97128 does not improve AUC. Reverting changes.
Training on augumented user 4034 46/50 current_auc = 0.6408722244382397
User 4034 AUC after training: 0.640473341310996
User 4034 does not improve AUC. Reverting changes.
Training on augumented user 17812 47/50 current_auc = 0.6408722244382397
User 17812 AUC after training: 0.6408057439170323
User 17812 does not improve AUC. Reverting changes.
Training on augumented user 137712 48/50 current_auc = 0.6408722244382397
User 137712 AUC after training: 0.6407392633958251
User 137712 does not improve AUC. Reverting changes.
Training on augumented user 62711 49/50 current_auc = 0.6408722244382397
User 62711 AUC after training: 0.640473341310996
User 62711 does not improve AUC. Reverting changes.
[2024-12-02 19:06:59.134321] start test user 128034 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:59.541683] start test user 128034 164/567 recall augumented users by random, augumented_users = [98283, 91446, 115383, 92936, 79959, 110459, 79339, 38485, 126722, 102515, 134379, 69206, 100490, 129668, 123785, 111014, 65081, 111071, 25592, 111144, 16404, 102193, 90298, 8996, 55157, 84714, 22124, 4943, 126564, 31516, 7205, 94516, 1082, 19409, 121332, 84747, 12583, 102855, 77407, 105167, 7644, 25142, 47471, 129285, 121796, 20062, 23664, 106932, 52703, 131254]
[2024-12-02 19:06:59.556102] user = 128034 Cloud 164/567
[2024-12-02 19:06:59.576688] user = 128034 Local 164/567
[2024-12-02 19:06:59.614822] user = 128034 Local+ 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:01.474817] user = 128034 MPDA- 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6928940568475452
Training on augumented user 98283 0/50 current_auc = 0.6928940568475452
User 98283 AUC after training: 0.6928940568475452
User 98283 does not improve AUC. Reverting changes.
Training on augumented user 91446 1/50 current_auc = 0.6928940568475452
User 91446 AUC after training: 0.6914728682170542
User 91446 does not improve AUC. Reverting changes.
Training on augumented user 115383 2/50 current_auc = 0.6928940568475452
User 115383 AUC after training: 0.6903100775193798
User 115383 does not improve AUC. Reverting changes.
Training on augumented user 92936 3/50 current_auc = 0.6928940568475452
User 92936 AUC after training: 0.6918604651162791
User 92936 does not improve AUC. Reverting changes.
Training on augumented user 79959 4/50 current_auc = 0.6928940568475452
User 79959 AUC after training: 0.6918604651162791
User 79959 does not improve AUC. Reverting changes.
Training on augumented user 110459 5/50 current_auc = 0.6928940568475452
User 110459 AUC after training: 0.6910852713178295
User 110459 does not improve AUC. Reverting changes.
Training on augumented user 79339 6/50 current_auc = 0.6928940568475452
User 79339 AUC after training: 0.6928940568475452
User 79339 does not improve AUC. Reverting changes.
Training on augumented user 38485 7/50 current_auc = 0.6928940568475452
User 38485 AUC after training: 0.6901808785529716
User 38485 does not improve AUC. Reverting changes.
Training on augumented user 126722 8/50 current_auc = 0.6928940568475452
User 126722 AUC after training: 0.6923772609819121
User 126722 does not improve AUC. Reverting changes.
Training on augumented user 102515 9/50 current_auc = 0.6928940568475452
User 102515 AUC after training: 0.6921188630490956
User 102515 does not improve AUC. Reverting changes.
Training on augumented user 134379 10/50 current_auc = 0.6928940568475452
User 134379 AUC after training: 0.6921188630490956
User 134379 does not improve AUC. Reverting changes.
Training on augumented user 69206 11/50 current_auc = 0.6928940568475452
User 69206 AUC after training: 0.6919896640826874
User 69206 does not improve AUC. Reverting changes.
Training on augumented user 100490 12/50 current_auc = 0.6928940568475452
User 100490 AUC after training: 0.6918604651162791
User 100490 does not improve AUC. Reverting changes.
Training on augumented user 129668 13/50 current_auc = 0.6928940568475452
User 129668 AUC after training: 0.6918604651162791
User 129668 does not improve AUC. Reverting changes.
Training on augumented user 123785 14/50 current_auc = 0.6928940568475452
User 123785 AUC after training: 0.6913436692506459
User 123785 does not improve AUC. Reverting changes.
Training on augumented user 111014 15/50 current_auc = 0.6928940568475452
User 111014 AUC after training: 0.6910852713178294
User 111014 does not improve AUC. Reverting changes.
Training on augumented user 65081 16/50 current_auc = 0.6928940568475452
User 65081 AUC after training: 0.6921188630490956
User 65081 does not improve AUC. Reverting changes.
Training on augumented user 111071 17/50 current_auc = 0.6928940568475452
User 111071 AUC after training: 0.6912144702842378
User 111071 does not improve AUC. Reverting changes.
Training on augumented user 25592 18/50 current_auc = 0.6928940568475452
User 25592 AUC after training: 0.6948320413436692
User 25592 improves AUC. Keeping the model.
Training on augumented user 111144 19/50 current_auc = 0.6948320413436692
User 111144 AUC after training: 0.6936692506459948
User 111144 does not improve AUC. Reverting changes.
Training on augumented user 16404 20/50 current_auc = 0.6948320413436692
User 16404 AUC after training: 0.6944444444444445
User 16404 does not improve AUC. Reverting changes.
Training on augumented user 102193 21/50 current_auc = 0.6948320413436692
User 102193 AUC after training: 0.6956072351421189
User 102193 improves AUC. Keeping the model.
Training on augumented user 90298 22/50 current_auc = 0.6956072351421189
User 90298 AUC after training: 0.6970284237726098
User 90298 improves AUC. Keeping the model.
Training on augumented user 8996 23/50 current_auc = 0.6970284237726098
User 8996 AUC after training: 0.6917312661498708
User 8996 does not improve AUC. Reverting changes.
Training on augumented user 55157 24/50 current_auc = 0.6970284237726098
User 55157 AUC after training: 0.6974160206718346
User 55157 improves AUC. Keeping the model.
Training on augumented user 84714 25/50 current_auc = 0.6974160206718346
User 84714 AUC after training: 0.6910852713178295
User 84714 does not improve AUC. Reverting changes.
Training on augumented user 22124 26/50 current_auc = 0.6974160206718346
User 22124 AUC after training: 0.696640826873385
User 22124 does not improve AUC. Reverting changes.
Training on augumented user 4943 27/50 current_auc = 0.6974160206718346
User 4943 AUC after training: 0.6959948320413437
User 4943 does not improve AUC. Reverting changes.
Training on augumented user 126564 28/50 current_auc = 0.6974160206718346
User 126564 AUC after training: 0.6958656330749354
User 126564 does not improve AUC. Reverting changes.
Training on augumented user 31516 29/50 current_auc = 0.6974160206718346
User 31516 AUC after training: 0.6989664082687339
User 31516 improves AUC. Keeping the model.
Training on augumented user 7205 30/50 current_auc = 0.6989664082687339
User 7205 AUC after training: 0.6961240310077519
User 7205 does not improve AUC. Reverting changes.
Training on augumented user 94516 31/50 current_auc = 0.6989664082687339
User 94516 AUC after training: 0.697157622739018
User 94516 does not improve AUC. Reverting changes.
Training on augumented user 1082 32/50 current_auc = 0.6989664082687339
User 1082 AUC after training: 0.6987080103359173
User 1082 does not improve AUC. Reverting changes.
Training on augumented user 19409 33/50 current_auc = 0.6989664082687339
User 19409 AUC after training: 0.6978036175710594
User 19409 does not improve AUC. Reverting changes.
Training on augumented user 121332 34/50 current_auc = 0.6989664082687339
User 121332 AUC after training: 0.6979328165374676
User 121332 does not improve AUC. Reverting changes.
Training on augumented user 84747 35/50 current_auc = 0.6989664082687339
User 84747 AUC after training: 0.6965116279069767
User 84747 does not improve AUC. Reverting changes.
Training on augumented user 12583 36/50 current_auc = 0.6989664082687339
User 12583 AUC after training: 0.6984496124031007
User 12583 does not improve AUC. Reverting changes.
Training on augumented user 102855 37/50 current_auc = 0.6989664082687339
User 102855 AUC after training: 0.7007751937984497
User 102855 improves AUC. Keeping the model.
Training on augumented user 77407 38/50 current_auc = 0.7007751937984497
User 77407 AUC after training: 0.6992248062015505
User 77407 does not improve AUC. Reverting changes.
Training on augumented user 105167 39/50 current_auc = 0.7007751937984497
User 105167 AUC after training: 0.7001291989664082
User 105167 does not improve AUC. Reverting changes.
Training on augumented user 7644 40/50 current_auc = 0.7007751937984497
User 7644 AUC after training: 0.6984496124031008
User 7644 does not improve AUC. Reverting changes.
Training on augumented user 25142 41/50 current_auc = 0.7007751937984497
User 25142 AUC after training: 0.6994832041343669
User 25142 does not improve AUC. Reverting changes.
Training on augumented user 47471 42/50 current_auc = 0.7007751937984497
User 47471 AUC after training: 0.6993540051679588
User 47471 does not improve AUC. Reverting changes.
Training on augumented user 129285 43/50 current_auc = 0.7007751937984497
User 129285 AUC after training: 0.6987080103359173
User 129285 does not improve AUC. Reverting changes.
Training on augumented user 121796 44/50 current_auc = 0.7007751937984497
User 121796 AUC after training: 0.7012919896640827
User 121796 improves AUC. Keeping the model.
Training on augumented user 20062 45/50 current_auc = 0.7012919896640827
User 20062 AUC after training: 0.7005167958656331
User 20062 does not improve AUC. Reverting changes.
Training on augumented user 23664 46/50 current_auc = 0.7012919896640827
User 23664 AUC after training: 0.6989664082687339
User 23664 does not improve AUC. Reverting changes.
Training on augumented user 106932 47/50 current_auc = 0.7012919896640827
User 106932 AUC after training: 0.7005167958656331
User 106932 does not improve AUC. Reverting changes.
Training on augumented user 52703 48/50 current_auc = 0.7012919896640827
User 52703 AUC after training: 0.7002583979328165
User 52703 does not improve AUC. Reverting changes.
Training on augumented user 131254 49/50 current_auc = 0.7012919896640827
User 131254 AUC after training: 0.6989664082687338
User 131254 does not improve AUC. Reverting changes.
[2024-12-02 19:07:29.905205] start test user 128050 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:30.568879] start test user 128050 165/567 recall augumented users by random, augumented_users = [19764, 23109, 122964, 66432, 54247, 81298, 106315, 24589, 119594, 40021, 91406, 91355, 21082, 135183, 36669, 51058, 137648, 26546, 34161, 33943, 53082, 33442, 47895, 19492, 17709, 18020, 124056, 62748, 46136, 131662, 55188, 66483, 53830, 75866, 103995, 90916, 14882, 128049, 97175, 137250, 103985, 91103, 18941, 3635, 72196, 7655, 12794, 136929, 23030, 9690]
[2024-12-02 19:07:30.597262] user = 128050 Cloud 165/567
[2024-12-02 19:07:30.635992] user = 128050 Local 165/567
[2024-12-02 19:07:30.886440] user = 128050 Local+ 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:34.057882] user = 128050 MPDA- 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.787636669470143
Training on augumented user 19764 0/50 current_auc = 0.787636669470143
User 19764 AUC after training: 0.7888982338099243
User 19764 improves AUC. Keeping the model.
Training on augumented user 23109 1/50 current_auc = 0.7888982338099243
User 23109 AUC after training: 0.7867956265769555
User 23109 does not improve AUC. Reverting changes.
Training on augumented user 122964 2/50 current_auc = 0.7888982338099243
User 122964 AUC after training: 0.787636669470143
User 122964 does not improve AUC. Reverting changes.
Training on augumented user 66432 3/50 current_auc = 0.7888982338099243
User 66432 AUC after training: 0.7888982338099243
User 66432 does not improve AUC. Reverting changes.
Training on augumented user 54247 4/50 current_auc = 0.7888982338099243
User 54247 AUC after training: 0.7872161480235492
User 54247 does not improve AUC. Reverting changes.
Training on augumented user 81298 5/50 current_auc = 0.7888982338099243
User 81298 AUC after training: 0.7888982338099243
User 81298 does not improve AUC. Reverting changes.
Training on augumented user 106315 6/50 current_auc = 0.7888982338099243
User 106315 AUC after training: 0.787636669470143
User 106315 does not improve AUC. Reverting changes.
Training on augumented user 24589 7/50 current_auc = 0.7888982338099243
User 24589 AUC after training: 0.787636669470143
User 24589 does not improve AUC. Reverting changes.
Training on augumented user 119594 8/50 current_auc = 0.7888982338099243
User 119594 AUC after training: 0.787636669470143
User 119594 does not improve AUC. Reverting changes.
Training on augumented user 40021 9/50 current_auc = 0.7888982338099243
User 40021 AUC after training: 0.7872161480235492
User 40021 does not improve AUC. Reverting changes.
Training on augumented user 91406 10/50 current_auc = 0.7888982338099243
User 91406 AUC after training: 0.7884777123633305
User 91406 does not improve AUC. Reverting changes.
Training on augumented user 91355 11/50 current_auc = 0.7888982338099243
User 91355 AUC after training: 0.787636669470143
User 91355 does not improve AUC. Reverting changes.
Training on augumented user 21082 12/50 current_auc = 0.7888982338099243
User 21082 AUC after training: 0.7888982338099243
User 21082 does not improve AUC. Reverting changes.
Training on augumented user 135183 13/50 current_auc = 0.7888982338099243
User 135183 AUC after training: 0.7872161480235491
User 135183 does not improve AUC. Reverting changes.
Training on augumented user 36669 14/50 current_auc = 0.7888982338099243
User 36669 AUC after training: 0.7880571909167368
User 36669 does not improve AUC. Reverting changes.
Training on augumented user 51058 15/50 current_auc = 0.7888982338099243
User 51058 AUC after training: 0.7880571909167368
User 51058 does not improve AUC. Reverting changes.
Training on augumented user 137648 16/50 current_auc = 0.7888982338099243
User 137648 AUC after training: 0.7867956265769555
User 137648 does not improve AUC. Reverting changes.
Training on augumented user 26546 17/50 current_auc = 0.7888982338099243
User 26546 AUC after training: 0.787636669470143
User 26546 does not improve AUC. Reverting changes.
Training on augumented user 34161 18/50 current_auc = 0.7888982338099243
User 34161 AUC after training: 0.7872161480235492
User 34161 does not improve AUC. Reverting changes.
Training on augumented user 33943 19/50 current_auc = 0.7888982338099243
User 33943 AUC after training: 0.7872161480235492
User 33943 does not improve AUC. Reverting changes.
Training on augumented user 53082 20/50 current_auc = 0.7888982338099243
User 53082 AUC after training: 0.7888982338099243
User 53082 does not improve AUC. Reverting changes.
Training on augumented user 33442 21/50 current_auc = 0.7888982338099243
User 33442 AUC after training: 0.7880571909167368
User 33442 does not improve AUC. Reverting changes.
Training on augumented user 47895 22/50 current_auc = 0.7888982338099243
User 47895 AUC after training: 0.7880571909167368
User 47895 does not improve AUC. Reverting changes.
Training on augumented user 19492 23/50 current_auc = 0.7888982338099243
User 19492 AUC after training: 0.7884777123633305
User 19492 does not improve AUC. Reverting changes.
Training on augumented user 17709 24/50 current_auc = 0.7888982338099243
User 17709 AUC after training: 0.7872161480235492
User 17709 does not improve AUC. Reverting changes.
Training on augumented user 18020 25/50 current_auc = 0.7888982338099243
User 18020 AUC after training: 0.787636669470143
User 18020 does not improve AUC. Reverting changes.
Training on augumented user 124056 26/50 current_auc = 0.7888982338099243
User 124056 AUC after training: 0.7884777123633305
User 124056 does not improve AUC. Reverting changes.
Training on augumented user 62748 27/50 current_auc = 0.7888982338099243
User 62748 AUC after training: 0.7884777123633305
User 62748 does not improve AUC. Reverting changes.
Training on augumented user 46136 28/50 current_auc = 0.7888982338099243
User 46136 AUC after training: 0.7872161480235492
User 46136 does not improve AUC. Reverting changes.
Training on augumented user 131662 29/50 current_auc = 0.7888982338099243
User 131662 AUC after training: 0.7880571909167368
User 131662 does not improve AUC. Reverting changes.
Training on augumented user 55188 30/50 current_auc = 0.7888982338099243
User 55188 AUC after training: 0.7884777123633305
User 55188 does not improve AUC. Reverting changes.
Training on augumented user 66483 31/50 current_auc = 0.7888982338099243
User 66483 AUC after training: 0.7884777123633305
User 66483 does not improve AUC. Reverting changes.
Training on augumented user 53830 32/50 current_auc = 0.7888982338099243
User 53830 AUC after training: 0.7880571909167368
User 53830 does not improve AUC. Reverting changes.
Training on augumented user 75866 33/50 current_auc = 0.7888982338099243
User 75866 AUC after training: 0.7884777123633305
User 75866 does not improve AUC. Reverting changes.
Training on augumented user 103995 34/50 current_auc = 0.7888982338099243
User 103995 AUC after training: 0.787426408746846
User 103995 does not improve AUC. Reverting changes.
Training on augumented user 90916 35/50 current_auc = 0.7888982338099243
User 90916 AUC after training: 0.7888982338099243
User 90916 does not improve AUC. Reverting changes.
Training on augumented user 14882 36/50 current_auc = 0.7888982338099243
User 14882 AUC after training: 0.7884777123633305
User 14882 does not improve AUC. Reverting changes.
Training on augumented user 128049 37/50 current_auc = 0.7888982338099243
User 128049 AUC after training: 0.7880571909167368
User 128049 does not improve AUC. Reverting changes.
Training on augumented user 97175 38/50 current_auc = 0.7888982338099243
User 97175 AUC after training: 0.7884777123633305
User 97175 does not improve AUC. Reverting changes.
Training on augumented user 137250 39/50 current_auc = 0.7888982338099243
User 137250 AUC after training: 0.7893187552565181
User 137250 improves AUC. Keeping the model.
Training on augumented user 103985 40/50 current_auc = 0.7893187552565181
User 103985 AUC after training: 0.7893187552565181
User 103985 does not improve AUC. Reverting changes.
Training on augumented user 91103 41/50 current_auc = 0.7893187552565181
User 91103 AUC after training: 0.789529015979815
User 91103 improves AUC. Keeping the model.
Training on augumented user 18941 42/50 current_auc = 0.789529015979815
User 18941 AUC after training: 0.789529015979815
User 18941 does not improve AUC. Reverting changes.
Training on augumented user 3635 43/50 current_auc = 0.789529015979815
User 3635 AUC after training: 0.7899495374264088
User 3635 improves AUC. Keeping the model.
Training on augumented user 72196 44/50 current_auc = 0.7899495374264088
User 72196 AUC after training: 0.7899495374264088
User 72196 does not improve AUC. Reverting changes.
Training on augumented user 7655 45/50 current_auc = 0.7899495374264088
User 7655 AUC after training: 0.7880571909167368
User 7655 does not improve AUC. Reverting changes.
Training on augumented user 12794 46/50 current_auc = 0.7899495374264088
User 12794 AUC after training: 0.7899495374264087
User 12794 does not improve AUC. Reverting changes.
Training on augumented user 136929 47/50 current_auc = 0.7899495374264088
User 136929 AUC after training: 0.7903700588730026
User 136929 improves AUC. Keeping the model.
Training on augumented user 23030 48/50 current_auc = 0.7903700588730026
User 23030 AUC after training: 0.7886879730866274
User 23030 does not improve AUC. Reverting changes.
Training on augumented user 9690 49/50 current_auc = 0.7903700588730026
User 9690 AUC after training: 0.7882674516400336
User 9690 does not improve AUC. Reverting changes.
[2024-12-02 19:08:03.662665] start test user 128077 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:04.229004] start test user 128077 166/567 recall augumented users by random, augumented_users = [57167, 77503, 73231, 91068, 70331, 113527, 51725, 61020, 5105, 11630, 93933, 41841, 45201, 37991, 1628, 108836, 45569, 106443, 6910, 46446, 72515, 84528, 64407, 126741, 109127, 97807, 67151, 113946, 3371, 52509, 114676, 5399, 127825, 13419, 68708, 26607, 16482, 12665, 73057, 37712, 41574, 86604, 53132, 26779, 35378, 92983, 91891, 83998, 77437, 18217]
[2024-12-02 19:08:04.245804] user = 128077 Cloud 166/567
[2024-12-02 19:08:04.270481] user = 128077 Local 166/567
[2024-12-02 19:08:04.731049] user = 128077 Local+ 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:07.746879] user = 128077 MPDA- 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6963946869070209
Training on augumented user 57167 0/50 current_auc = 0.6963946869070209
User 57167 AUC after training: 0.6969217794644739
User 57167 improves AUC. Keeping the model.
Training on augumented user 77503 1/50 current_auc = 0.6969217794644739
User 77503 AUC after training: 0.6972380349989458
User 77503 improves AUC. Keeping the model.
Training on augumented user 73231 2/50 current_auc = 0.6972380349989458
User 73231 AUC after training: 0.6959730128610584
User 73231 does not improve AUC. Reverting changes.
Training on augumented user 91068 3/50 current_auc = 0.6972380349989458
User 91068 AUC after training: 0.6967109424414927
User 91068 does not improve AUC. Reverting changes.
Training on augumented user 70331 4/50 current_auc = 0.6972380349989458
User 70331 AUC after training: 0.6967109424414927
User 70331 does not improve AUC. Reverting changes.
Training on augumented user 113527 5/50 current_auc = 0.6972380349989458
User 113527 AUC after training: 0.6969217794644739
User 113527 does not improve AUC. Reverting changes.
Training on augumented user 51725 6/50 current_auc = 0.6972380349989458
User 51725 AUC after training: 0.6968163609529834
User 51725 does not improve AUC. Reverting changes.
Training on augumented user 61020 7/50 current_auc = 0.6972380349989458
User 61020 AUC after training: 0.6972380349989459
User 61020 improves AUC. Keeping the model.
Training on augumented user 5105 8/50 current_auc = 0.6972380349989459
User 5105 AUC after training: 0.6971326164874552
User 5105 does not improve AUC. Reverting changes.
Training on augumented user 11630 9/50 current_auc = 0.6972380349989459
User 11630 AUC after training: 0.6970271979759646
User 11630 does not improve AUC. Reverting changes.
Training on augumented user 93933 10/50 current_auc = 0.6972380349989459
User 93933 AUC after training: 0.6972380349989459
User 93933 does not improve AUC. Reverting changes.
Training on augumented user 41841 11/50 current_auc = 0.6972380349989459
User 41841 AUC after training: 0.6971326164874552
User 41841 does not improve AUC. Reverting changes.
Training on augumented user 45201 12/50 current_auc = 0.6972380349989459
User 45201 AUC after training: 0.6972380349989458
User 45201 does not improve AUC. Reverting changes.
Training on augumented user 37991 13/50 current_auc = 0.6972380349989459
User 37991 AUC after training: 0.6955513388150959
User 37991 does not improve AUC. Reverting changes.
Training on augumented user 1628 14/50 current_auc = 0.6972380349989459
User 1628 AUC after training: 0.696921779464474
User 1628 does not improve AUC. Reverting changes.
Training on augumented user 108836 15/50 current_auc = 0.6972380349989459
User 108836 AUC after training: 0.696921779464474
User 108836 does not improve AUC. Reverting changes.
Training on augumented user 45569 16/50 current_auc = 0.6972380349989459
User 45569 AUC after training: 0.6968163609529833
User 45569 does not improve AUC. Reverting changes.
Training on augumented user 106443 17/50 current_auc = 0.6972380349989459
User 106443 AUC after training: 0.6971326164874552
User 106443 does not improve AUC. Reverting changes.
Training on augumented user 6910 18/50 current_auc = 0.6972380349989459
User 6910 AUC after training: 0.6961838498840397
User 6910 does not improve AUC. Reverting changes.
Training on augumented user 46446 19/50 current_auc = 0.6972380349989459
User 46446 AUC after training: 0.6972380349989459
User 46446 does not improve AUC. Reverting changes.
Training on augumented user 72515 20/50 current_auc = 0.6972380349989459
User 72515 AUC after training: 0.696921779464474
User 72515 does not improve AUC. Reverting changes.
Training on augumented user 84528 21/50 current_auc = 0.6972380349989459
User 84528 AUC after training: 0.6971326164874553
User 84528 does not improve AUC. Reverting changes.
Training on augumented user 64407 22/50 current_auc = 0.6972380349989459
User 64407 AUC after training: 0.6969217794644739
User 64407 does not improve AUC. Reverting changes.
Training on augumented user 126741 23/50 current_auc = 0.6972380349989459
User 126741 AUC after training: 0.6967109424414927
User 126741 does not improve AUC. Reverting changes.
Training on augumented user 109127 24/50 current_auc = 0.6972380349989459
User 109127 AUC after training: 0.6963946869070208
User 109127 does not improve AUC. Reverting changes.
Training on augumented user 97807 25/50 current_auc = 0.6972380349989459
User 97807 AUC after training: 0.6949188277461522
User 97807 does not improve AUC. Reverting changes.
Training on augumented user 67151 26/50 current_auc = 0.6972380349989459
User 67151 AUC after training: 0.696921779464474
User 67151 does not improve AUC. Reverting changes.
Training on augumented user 113946 27/50 current_auc = 0.6972380349989459
User 113946 AUC after training: 0.6955513388150959
User 113946 does not improve AUC. Reverting changes.
Training on augumented user 3371 28/50 current_auc = 0.6972380349989459
User 3371 AUC after training: 0.696921779464474
User 3371 does not improve AUC. Reverting changes.
Training on augumented user 52509 29/50 current_auc = 0.6972380349989459
User 52509 AUC after training: 0.6968163609529834
User 52509 does not improve AUC. Reverting changes.
Training on augumented user 114676 30/50 current_auc = 0.6972380349989459
User 114676 AUC after training: 0.6965001054185115
User 114676 does not improve AUC. Reverting changes.
Training on augumented user 5399 31/50 current_auc = 0.6972380349989459
User 5399 AUC after training: 0.6968163609529833
User 5399 does not improve AUC. Reverting changes.
Training on augumented user 127825 32/50 current_auc = 0.6972380349989459
User 127825 AUC after training: 0.6966055239300022
User 127825 does not improve AUC. Reverting changes.
Training on augumented user 13419 33/50 current_auc = 0.6972380349989459
User 13419 AUC after training: 0.6959730128610584
User 13419 does not improve AUC. Reverting changes.
Training on augumented user 68708 34/50 current_auc = 0.6972380349989459
User 68708 AUC after training: 0.6970271979759646
User 68708 does not improve AUC. Reverting changes.
Training on augumented user 26607 35/50 current_auc = 0.6972380349989459
User 26607 AUC after training: 0.6973434535104365
User 26607 improves AUC. Keeping the model.
Training on augumented user 16482 36/50 current_auc = 0.6973434535104365
User 16482 AUC after training: 0.6975542905334177
User 16482 improves AUC. Keeping the model.
Training on augumented user 12665 37/50 current_auc = 0.6975542905334177
User 12665 AUC after training: 0.697448872021927
User 12665 does not improve AUC. Reverting changes.
Training on augumented user 73057 38/50 current_auc = 0.6975542905334177
User 73057 AUC after training: 0.6970271979759646
User 73057 does not improve AUC. Reverting changes.
Training on augumented user 37712 39/50 current_auc = 0.6975542905334177
User 37712 AUC after training: 0.696921779464474
User 37712 does not improve AUC. Reverting changes.
Training on augumented user 41574 40/50 current_auc = 0.6975542905334177
User 41574 AUC after training: 0.6966055239300021
User 41574 does not improve AUC. Reverting changes.
Training on augumented user 86604 41/50 current_auc = 0.6975542905334177
User 86604 AUC after training: 0.696921779464474
User 86604 does not improve AUC. Reverting changes.
Training on augumented user 53132 42/50 current_auc = 0.6975542905334177
User 53132 AUC after training: 0.6971326164874552
User 53132 does not improve AUC. Reverting changes.
Training on augumented user 26779 43/50 current_auc = 0.6975542905334177
User 26779 AUC after training: 0.6971326164874552
User 26779 does not improve AUC. Reverting changes.
Training on augumented user 35378 44/50 current_auc = 0.6975542905334177
User 35378 AUC after training: 0.6968163609529833
User 35378 does not improve AUC. Reverting changes.
Training on augumented user 92983 45/50 current_auc = 0.6975542905334177
User 92983 AUC after training: 0.696921779464474
User 92983 does not improve AUC. Reverting changes.
Training on augumented user 91891 46/50 current_auc = 0.6975542905334177
User 91891 AUC after training: 0.6966055239300021
User 91891 does not improve AUC. Reverting changes.
Training on augumented user 83998 47/50 current_auc = 0.6975542905334177
User 83998 AUC after training: 0.6970271979759647
User 83998 does not improve AUC. Reverting changes.
Training on augumented user 77437 48/50 current_auc = 0.6975542905334177
User 77437 AUC after training: 0.6971326164874552
User 77437 does not improve AUC. Reverting changes.
Training on augumented user 18217 49/50 current_auc = 0.6975542905334177
User 18217 AUC after training: 0.6968163609529833
User 18217 does not improve AUC. Reverting changes.
[2024-12-02 19:08:37.784334] start test user 128095 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:38.256566] start test user 128095 167/567 recall augumented users by random, augumented_users = [68564, 77060, 32187, 19610, 114131, 77602, 44022, 134388, 11828, 17871, 55924, 68950, 46484, 93304, 103622, 110037, 40372, 101822, 51829, 138245, 68203, 36240, 101207, 84965, 18545, 66714, 101046, 35414, 126736, 94643, 25612, 103649, 92805, 128542, 32181, 492, 28087, 115406, 102481, 102033, 5060, 74990, 132920, 54623, 96412, 85714, 126527, 66235, 96212, 83715]
[2024-12-02 19:08:38.272500] user = 128095 Cloud 167/567
[2024-12-02 19:08:38.313831] user = 128095 Local 167/567
[2024-12-02 19:08:38.462961] user = 128095 Local+ 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:41.519855] user = 128095 MPDA- 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7137269061804177
Training on augumented user 68564 0/50 current_auc = 0.7137269061804177
User 68564 AUC after training: 0.7142384305229584
User 68564 improves AUC. Keeping the model.
Training on augumented user 77060 1/50 current_auc = 0.7142384305229584
User 77060 AUC after training: 0.7149605825359571
User 77060 improves AUC. Keeping the model.
Training on augumented user 32187 2/50 current_auc = 0.7149605825359571
User 32187 AUC after training: 0.7148101341999158
User 32187 does not improve AUC. Reverting changes.
Training on augumented user 19610 3/50 current_auc = 0.7149605825359571
User 19610 AUC after training: 0.7150207618703737
User 19610 improves AUC. Keeping the model.
Training on augumented user 114131 4/50 current_auc = 0.7150207618703737
User 114131 AUC after training: 0.7146596858638743
User 114131 does not improve AUC. Reverting changes.
Training on augumented user 77602 5/50 current_auc = 0.7150207618703737
User 77602 AUC after training: 0.7149906722031654
User 77602 does not improve AUC. Reverting changes.
Training on augumented user 44022 6/50 current_auc = 0.7150207618703737
User 44022 AUC after training: 0.7150207618703737
User 44022 does not improve AUC. Reverting changes.
Training on augumented user 134388 7/50 current_auc = 0.7150207618703737
User 134388 AUC after training: 0.7148703135343323
User 134388 does not improve AUC. Reverting changes.
Training on augumented user 11828 8/50 current_auc = 0.7150207618703737
User 11828 AUC after training: 0.7150809412047903
User 11828 improves AUC. Keeping the model.
Training on augumented user 17871 9/50 current_auc = 0.7150809412047903
User 17871 AUC after training: 0.7148703135343324
User 17871 does not improve AUC. Reverting changes.
Training on augumented user 55924 10/50 current_auc = 0.7150809412047903
User 55924 AUC after training: 0.7149004032015406
User 55924 does not improve AUC. Reverting changes.
Training on augumented user 68950 11/50 current_auc = 0.7150809412047903
User 68950 AUC after training: 0.7150207618703737
User 68950 does not improve AUC. Reverting changes.
Training on augumented user 46484 12/50 current_auc = 0.7150809412047903
User 46484 AUC after training: 0.7150809412047903
User 46484 does not improve AUC. Reverting changes.
Training on augumented user 93304 13/50 current_auc = 0.7150809412047903
User 93304 AUC after training: 0.7148101341999157
User 93304 does not improve AUC. Reverting changes.
Training on augumented user 103622 14/50 current_auc = 0.7150809412047903
User 103622 AUC after training: 0.7149304928687489
User 103622 does not improve AUC. Reverting changes.
Training on augumented user 110037 15/50 current_auc = 0.7150809412047903
User 110037 AUC after training: 0.7149605825359572
User 110037 does not improve AUC. Reverting changes.
Training on augumented user 40372 16/50 current_auc = 0.7150809412047903
User 40372 AUC after training: 0.7150207618703737
User 40372 does not improve AUC. Reverting changes.
Training on augumented user 101822 17/50 current_auc = 0.7150809412047903
User 101822 AUC after training: 0.7152313895408318
User 101822 improves AUC. Keeping the model.
Training on augumented user 51829 18/50 current_auc = 0.7152313895408318
User 51829 AUC after training: 0.7147800445327074
User 51829 does not improve AUC. Reverting changes.
Training on augumented user 138245 19/50 current_auc = 0.7152313895408318
User 138245 AUC after training: 0.7152012998736232
User 138245 does not improve AUC. Reverting changes.
Training on augumented user 68203 20/50 current_auc = 0.7152313895408318
User 68203 AUC after training: 0.7148402238671241
User 68203 does not improve AUC. Reverting changes.
Training on augumented user 36240 21/50 current_auc = 0.7152313895408318
User 36240 AUC after training: 0.7150508515375821
User 36240 does not improve AUC. Reverting changes.
Training on augumented user 101207 22/50 current_auc = 0.7152313895408318
User 101207 AUC after training: 0.7155322862129144
User 101207 improves AUC. Keeping the model.
Training on augumented user 84965 23/50 current_auc = 0.7155322862129144
User 84965 AUC after training: 0.7153517482096647
User 84965 does not improve AUC. Reverting changes.
Training on augumented user 18545 24/50 current_auc = 0.7155322862129144
User 18545 AUC after training: 0.7155021965457062
User 18545 does not improve AUC. Reverting changes.
Training on augumented user 66714 25/50 current_auc = 0.7155322862129144
User 66714 AUC after training: 0.7153517482096647
User 66714 does not improve AUC. Reverting changes.
Training on augumented user 101046 26/50 current_auc = 0.7155322862129144
User 101046 AUC after training: 0.7154420172112896
User 101046 does not improve AUC. Reverting changes.
Training on augumented user 35414 27/50 current_auc = 0.7155322862129144
User 35414 AUC after training: 0.7155322862129144
User 35414 does not improve AUC. Reverting changes.
Training on augumented user 126736 28/50 current_auc = 0.7155322862129144
User 126736 AUC after training: 0.714629596196666
User 126736 does not improve AUC. Reverting changes.
Training on augumented user 94643 29/50 current_auc = 0.7155322862129144
User 94643 AUC after training: 0.7152614792080398
User 94643 does not improve AUC. Reverting changes.
Training on augumented user 25612 30/50 current_auc = 0.7155322862129144
User 25612 AUC after training: 0.7155021965457062
User 25612 does not improve AUC. Reverting changes.
Training on augumented user 103649 31/50 current_auc = 0.7155322862129144
User 103649 AUC after training: 0.7146596858638743
User 103649 does not improve AUC. Reverting changes.
Training on augumented user 92805 32/50 current_auc = 0.7155322862129144
User 92805 AUC after training: 0.7154119275440813
User 92805 does not improve AUC. Reverting changes.
Training on augumented user 128542 33/50 current_auc = 0.7155322862129144
User 128542 AUC after training: 0.7157429138833724
User 128542 improves AUC. Keeping the model.
Training on augumented user 32181 34/50 current_auc = 0.7157429138833724
User 32181 AUC after training: 0.7139074441836674
User 32181 does not improve AUC. Reverting changes.
Training on augumented user 492 35/50 current_auc = 0.7157429138833724
User 492 AUC after training: 0.714930492868749
User 492 does not improve AUC. Reverting changes.
Training on augumented user 28087 36/50 current_auc = 0.7157429138833724
User 28087 AUC after training: 0.7161340795570801
User 28087 improves AUC. Keeping the model.
Training on augumented user 115406 37/50 current_auc = 0.7161340795570801
User 115406 AUC after training: 0.7161942588914965
User 115406 improves AUC. Keeping the model.
Training on augumented user 102481 38/50 current_auc = 0.7161942588914965
User 102481 AUC after training: 0.7163447072275381
User 102481 improves AUC. Keeping the model.
Training on augumented user 102033 39/50 current_auc = 0.7163447072275381
User 102033 AUC after training: 0.7164048865619546
User 102033 improves AUC. Keeping the model.
Training on augumented user 5060 40/50 current_auc = 0.7164048865619546
User 5060 AUC after training: 0.7152012998736235
User 5060 does not improve AUC. Reverting changes.
Training on augumented user 74990 41/50 current_auc = 0.7164048865619546
User 74990 AUC after training: 0.7161039898898718
User 74990 does not improve AUC. Reverting changes.
Training on augumented user 132920 42/50 current_auc = 0.7164048865619546
User 132920 AUC after training: 0.7161641692242885
User 132920 does not improve AUC. Reverting changes.
Training on augumented user 54623 43/50 current_auc = 0.7164048865619546
User 54623 AUC after training: 0.7163146175603299
User 54623 does not improve AUC. Reverting changes.
Training on augumented user 96412 44/50 current_auc = 0.7164048865619546
User 96412 AUC after training: 0.7161641692242884
User 96412 does not improve AUC. Reverting changes.
Training on augumented user 85714 45/50 current_auc = 0.7164048865619546
User 85714 AUC after training: 0.7160739002226636
User 85714 does not improve AUC. Reverting changes.
Training on augumented user 126527 46/50 current_auc = 0.7164048865619546
User 126527 AUC after training: 0.7151110308719986
User 126527 does not improve AUC. Reverting changes.
Training on augumented user 66235 47/50 current_auc = 0.7164048865619546
User 66235 AUC after training: 0.7161641692242884
User 66235 does not improve AUC. Reverting changes.
Training on augumented user 96212 48/50 current_auc = 0.7164048865619546
User 96212 AUC after training: 0.7164951555635795
User 96212 improves AUC. Keeping the model.
Training on augumented user 83715 49/50 current_auc = 0.7164951555635795
User 83715 AUC after training: 0.7164951555635795
User 83715 does not improve AUC. Reverting changes.
[2024-12-02 19:09:14.387257] start test user 128116 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:15.081055] start test user 128116 168/567 recall augumented users by random, augumented_users = [105785, 54894, 43808, 55416, 46515, 13339, 49783, 100534, 113888, 33217, 64415, 87511, 47696, 58828, 32639, 30044, 70137, 14341, 35826, 25985, 94486, 135449, 48263, 43464, 49067, 51082, 104412, 87652, 99221, 34584, 67743, 21223, 54520, 10388, 118739, 6962, 6221, 68170, 136470, 47264, 5228, 26777, 65271, 17271, 72797, 55830, 53857, 3749, 37447, 54167]
[2024-12-02 19:09:15.098825] user = 128116 Cloud 168/567
[2024-12-02 19:09:15.110395] user = 128116 Local 168/567
[2024-12-02 19:09:15.202925] user = 128116 Local+ 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:17.380108] user = 128116 MPDA- 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5688888888888889
Training on augumented user 105785 0/50 current_auc = 0.5688888888888889
User 105785 AUC after training: 0.5777777777777778
User 105785 improves AUC. Keeping the model.
Training on augumented user 54894 1/50 current_auc = 0.5777777777777778
User 54894 AUC after training: 0.5733333333333334
User 54894 does not improve AUC. Reverting changes.
Training on augumented user 43808 2/50 current_auc = 0.5777777777777778
User 43808 AUC after training: 0.5733333333333334
User 43808 does not improve AUC. Reverting changes.
Training on augumented user 55416 3/50 current_auc = 0.5777777777777778
User 55416 AUC after training: 0.5777777777777778
User 55416 does not improve AUC. Reverting changes.
Training on augumented user 46515 4/50 current_auc = 0.5777777777777778
User 46515 AUC after training: 0.5777777777777778
User 46515 does not improve AUC. Reverting changes.
Training on augumented user 13339 5/50 current_auc = 0.5777777777777778
User 13339 AUC after training: 0.5733333333333334
User 13339 does not improve AUC. Reverting changes.
Training on augumented user 49783 6/50 current_auc = 0.5777777777777778
User 49783 AUC after training: 0.5777777777777778
User 49783 does not improve AUC. Reverting changes.
Training on augumented user 100534 7/50 current_auc = 0.5777777777777778
User 100534 AUC after training: 0.5688888888888889
User 100534 does not improve AUC. Reverting changes.
Training on augumented user 113888 8/50 current_auc = 0.5777777777777778
User 113888 AUC after training: 0.5777777777777778
User 113888 does not improve AUC. Reverting changes.
Training on augumented user 33217 9/50 current_auc = 0.5777777777777778
User 33217 AUC after training: 0.5777777777777778
User 33217 does not improve AUC. Reverting changes.
Training on augumented user 64415 10/50 current_auc = 0.5777777777777778
User 64415 AUC after training: 0.5777777777777778
User 64415 does not improve AUC. Reverting changes.
Training on augumented user 87511 11/50 current_auc = 0.5777777777777778
User 87511 AUC after training: 0.5733333333333334
User 87511 does not improve AUC. Reverting changes.
Training on augumented user 47696 12/50 current_auc = 0.5777777777777778
User 47696 AUC after training: 0.5777777777777778
User 47696 does not improve AUC. Reverting changes.
Training on augumented user 58828 13/50 current_auc = 0.5777777777777778
User 58828 AUC after training: 0.5733333333333334
User 58828 does not improve AUC. Reverting changes.
Training on augumented user 32639 14/50 current_auc = 0.5777777777777778
User 32639 AUC after training: 0.5777777777777778
User 32639 does not improve AUC. Reverting changes.
Training on augumented user 30044 15/50 current_auc = 0.5777777777777778
User 30044 AUC after training: 0.5688888888888889
User 30044 does not improve AUC. Reverting changes.
Training on augumented user 70137 16/50 current_auc = 0.5777777777777778
User 70137 AUC after training: 0.5777777777777778
User 70137 does not improve AUC. Reverting changes.
Training on augumented user 14341 17/50 current_auc = 0.5777777777777778
User 14341 AUC after training: 0.5733333333333334
User 14341 does not improve AUC. Reverting changes.
Training on augumented user 35826 18/50 current_auc = 0.5777777777777778
User 35826 AUC after training: 0.5777777777777778
User 35826 does not improve AUC. Reverting changes.
Training on augumented user 25985 19/50 current_auc = 0.5777777777777778
User 25985 AUC after training: 0.5688888888888889
User 25985 does not improve AUC. Reverting changes.
Training on augumented user 94486 20/50 current_auc = 0.5777777777777778
User 94486 AUC after training: 0.5688888888888889
User 94486 does not improve AUC. Reverting changes.
Training on augumented user 135449 21/50 current_auc = 0.5777777777777778
User 135449 AUC after training: 0.5777777777777778
User 135449 does not improve AUC. Reverting changes.
Training on augumented user 48263 22/50 current_auc = 0.5777777777777778
User 48263 AUC after training: 0.5733333333333334
User 48263 does not improve AUC. Reverting changes.
Training on augumented user 43464 23/50 current_auc = 0.5777777777777778
User 43464 AUC after training: 0.5777777777777778
User 43464 does not improve AUC. Reverting changes.
Training on augumented user 49067 24/50 current_auc = 0.5777777777777778
User 49067 AUC after training: 0.5733333333333334
User 49067 does not improve AUC. Reverting changes.
Training on augumented user 51082 25/50 current_auc = 0.5777777777777778
User 51082 AUC after training: 0.5688888888888889
User 51082 does not improve AUC. Reverting changes.
Training on augumented user 104412 26/50 current_auc = 0.5777777777777778
User 104412 AUC after training: 0.5733333333333334
User 104412 does not improve AUC. Reverting changes.
Training on augumented user 87652 27/50 current_auc = 0.5777777777777778
User 87652 AUC after training: 0.5688888888888889
User 87652 does not improve AUC. Reverting changes.
Training on augumented user 99221 28/50 current_auc = 0.5777777777777778
User 99221 AUC after training: 0.5688888888888889
User 99221 does not improve AUC. Reverting changes.
Training on augumented user 34584 29/50 current_auc = 0.5777777777777778
User 34584 AUC after training: 0.5733333333333334
User 34584 does not improve AUC. Reverting changes.
Training on augumented user 67743 30/50 current_auc = 0.5777777777777778
User 67743 AUC after training: 0.5733333333333334
User 67743 does not improve AUC. Reverting changes.
Training on augumented user 21223 31/50 current_auc = 0.5777777777777778
User 21223 AUC after training: 0.5644444444444444
User 21223 does not improve AUC. Reverting changes.
Training on augumented user 54520 32/50 current_auc = 0.5777777777777778
User 54520 AUC after training: 0.5777777777777778
User 54520 does not improve AUC. Reverting changes.
Training on augumented user 10388 33/50 current_auc = 0.5777777777777778
User 10388 AUC after training: 0.5733333333333334
User 10388 does not improve AUC. Reverting changes.
Training on augumented user 118739 34/50 current_auc = 0.5777777777777778
User 118739 AUC after training: 0.5733333333333334
User 118739 does not improve AUC. Reverting changes.
Training on augumented user 6962 35/50 current_auc = 0.5777777777777778
User 6962 AUC after training: 0.5688888888888889
User 6962 does not improve AUC. Reverting changes.
Training on augumented user 6221 36/50 current_auc = 0.5777777777777778
User 6221 AUC after training: 0.5733333333333334
User 6221 does not improve AUC. Reverting changes.
Training on augumented user 68170 37/50 current_auc = 0.5777777777777778
User 68170 AUC after training: 0.5777777777777778
User 68170 does not improve AUC. Reverting changes.
Training on augumented user 136470 38/50 current_auc = 0.5777777777777778
User 136470 AUC after training: 0.5733333333333334
User 136470 does not improve AUC. Reverting changes.
Training on augumented user 47264 39/50 current_auc = 0.5777777777777778
User 47264 AUC after training: 0.5777777777777778
User 47264 does not improve AUC. Reverting changes.
Training on augumented user 5228 40/50 current_auc = 0.5777777777777778
User 5228 AUC after training: 0.5688888888888889
User 5228 does not improve AUC. Reverting changes.
Training on augumented user 26777 41/50 current_auc = 0.5777777777777778
User 26777 AUC after training: 0.5733333333333334
User 26777 does not improve AUC. Reverting changes.
Training on augumented user 65271 42/50 current_auc = 0.5777777777777778
User 65271 AUC after training: 0.5688888888888889
User 65271 does not improve AUC. Reverting changes.
Training on augumented user 17271 43/50 current_auc = 0.5777777777777778
User 17271 AUC after training: 0.5777777777777778
User 17271 does not improve AUC. Reverting changes.
Training on augumented user 72797 44/50 current_auc = 0.5777777777777778
User 72797 AUC after training: 0.5777777777777778
User 72797 does not improve AUC. Reverting changes.
Training on augumented user 55830 45/50 current_auc = 0.5777777777777778
User 55830 AUC after training: 0.5688888888888889
User 55830 does not improve AUC. Reverting changes.
Training on augumented user 53857 46/50 current_auc = 0.5777777777777778
User 53857 AUC after training: 0.5733333333333334
User 53857 does not improve AUC. Reverting changes.
Training on augumented user 3749 47/50 current_auc = 0.5777777777777778
User 3749 AUC after training: 0.5777777777777778
User 3749 does not improve AUC. Reverting changes.
Training on augumented user 37447 48/50 current_auc = 0.5777777777777778
User 37447 AUC after training: 0.5733333333333334
User 37447 does not improve AUC. Reverting changes.
Training on augumented user 54167 49/50 current_auc = 0.5777777777777778
User 54167 AUC after training: 0.5733333333333334
User 54167 does not improve AUC. Reverting changes.
[2024-12-02 19:09:46.427668] start test user 128146 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:46.920415] start test user 128146 169/567 recall augumented users by random, augumented_users = [128312, 90438, 79692, 101015, 20793, 23791, 62560, 100459, 77958, 114684, 72681, 80424, 69078, 43885, 54857, 134609, 15656, 13957, 5822, 125117, 56537, 13311, 75167, 61528, 78205, 74495, 103030, 84005, 25254, 111193, 21385, 11663, 12514, 118306, 6562, 28314, 21215, 66060, 135114, 7438, 70505, 1014, 98140, 42723, 129990, 118249, 131047, 120521, 11628, 73936]
[2024-12-02 19:09:46.948536] user = 128146 Cloud 169/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:09:46.962199] user = 128146 Local 169/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:09:46.992647] user = 128146 Local+ 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:09:49.275677] user = 128146 MPDA- 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 128312 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128312 AUC after training: 0.5
User 128312 does not improve AUC. Reverting changes.
Training on augumented user 90438 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90438 AUC after training: 0.5
User 90438 does not improve AUC. Reverting changes.
Training on augumented user 79692 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79692 AUC after training: 0.5
User 79692 does not improve AUC. Reverting changes.
Training on augumented user 101015 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101015 AUC after training: 0.5
User 101015 does not improve AUC. Reverting changes.
Training on augumented user 20793 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20793 AUC after training: 0.5
User 20793 does not improve AUC. Reverting changes.
Training on augumented user 23791 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23791 AUC after training: 0.5
User 23791 does not improve AUC. Reverting changes.
Training on augumented user 62560 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62560 AUC after training: 0.5
User 62560 does not improve AUC. Reverting changes.
Training on augumented user 100459 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100459 AUC after training: 0.5
User 100459 does not improve AUC. Reverting changes.
Training on augumented user 77958 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77958 AUC after training: 0.5
User 77958 does not improve AUC. Reverting changes.
Training on augumented user 114684 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114684 AUC after training: 0.5
User 114684 does not improve AUC. Reverting changes.
Training on augumented user 72681 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72681 AUC after training: 0.5
User 72681 does not improve AUC. Reverting changes.
Training on augumented user 80424 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80424 AUC after training: 0.5
User 80424 does not improve AUC. Reverting changes.
Training on augumented user 69078 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69078 AUC after training: 0.5
User 69078 does not improve AUC. Reverting changes.
Training on augumented user 43885 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43885 AUC after training: 0.5
User 43885 does not improve AUC. Reverting changes.
Training on augumented user 54857 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54857 AUC after training: 0.5
User 54857 does not improve AUC. Reverting changes.
Training on augumented user 134609 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134609 AUC after training: 0.5
User 134609 does not improve AUC. Reverting changes.
Training on augumented user 15656 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15656 AUC after training: 0.5
User 15656 does not improve AUC. Reverting changes.
Training on augumented user 13957 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13957 AUC after training: 0.5
User 13957 does not improve AUC. Reverting changes.
Training on augumented user 5822 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5822 AUC after training: 0.5
User 5822 does not improve AUC. Reverting changes.
Training on augumented user 125117 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125117 AUC after training: 0.5
User 125117 does not improve AUC. Reverting changes.
Training on augumented user 56537 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56537 AUC after training: 0.5
User 56537 does not improve AUC. Reverting changes.
Training on augumented user 13311 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13311 AUC after training: 0.5
User 13311 does not improve AUC. Reverting changes.
Training on augumented user 75167 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75167 AUC after training: 0.5
User 75167 does not improve AUC. Reverting changes.
Training on augumented user 61528 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61528 AUC after training: 0.5
User 61528 does not improve AUC. Reverting changes.
Training on augumented user 78205 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78205 AUC after training: 0.5
User 78205 does not improve AUC. Reverting changes.
Training on augumented user 74495 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74495 AUC after training: 0.5
User 74495 does not improve AUC. Reverting changes.
Training on augumented user 103030 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103030 AUC after training: 0.5
User 103030 does not improve AUC. Reverting changes.
Training on augumented user 84005 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84005 AUC after training: 0.5
User 84005 does not improve AUC. Reverting changes.
Training on augumented user 25254 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25254 AUC after training: 0.5
User 25254 does not improve AUC. Reverting changes.
Training on augumented user 111193 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111193 AUC after training: 0.5
User 111193 does not improve AUC. Reverting changes.
Training on augumented user 21385 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21385 AUC after training: 0.5
User 21385 does not improve AUC. Reverting changes.
Training on augumented user 11663 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11663 AUC after training: 0.5
User 11663 does not improve AUC. Reverting changes.
Training on augumented user 12514 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12514 AUC after training: 0.5
User 12514 does not improve AUC. Reverting changes.
Training on augumented user 118306 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118306 AUC after training: 0.5
User 118306 does not improve AUC. Reverting changes.
Training on augumented user 6562 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6562 AUC after training: 0.5
User 6562 does not improve AUC. Reverting changes.
Training on augumented user 28314 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28314 AUC after training: 0.5
User 28314 does not improve AUC. Reverting changes.
Training on augumented user 21215 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21215 AUC after training: 0.5
User 21215 does not improve AUC. Reverting changes.
Training on augumented user 66060 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66060 AUC after training: 0.5
User 66060 does not improve AUC. Reverting changes.
Training on augumented user 135114 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135114 AUC after training: 0.5
User 135114 does not improve AUC. Reverting changes.
Training on augumented user 7438 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7438 AUC after training: 0.5
User 7438 does not improve AUC. Reverting changes.
Training on augumented user 70505 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70505 AUC after training: 0.5
User 70505 does not improve AUC. Reverting changes.
Training on augumented user 1014 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1014 AUC after training: 0.5
User 1014 does not improve AUC. Reverting changes.
Training on augumented user 98140 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98140 AUC after training: 0.5
User 98140 does not improve AUC. Reverting changes.
Training on augumented user 42723 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42723 AUC after training: 0.5
User 42723 does not improve AUC. Reverting changes.
Training on augumented user 129990 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129990 AUC after training: 0.5
User 129990 does not improve AUC. Reverting changes.
Training on augumented user 118249 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118249 AUC after training: 0.5
User 118249 does not improve AUC. Reverting changes.
Training on augumented user 131047 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131047 AUC after training: 0.5
User 131047 does not improve AUC. Reverting changes.
Training on augumented user 120521 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120521 AUC after training: 0.5
User 120521 does not improve AUC. Reverting changes.
Training on augumented user 11628 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11628 AUC after training: 0.5
User 11628 does not improve AUC. Reverting changes.
Training on augumented user 73936 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73936 AUC after training: 0.5
User 73936 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:14.937626] start test user 128175 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:15.345486] start test user 128175 170/567 recall augumented users by random, augumented_users = [119332, 90948, 33560, 12104, 20331, 54213, 20789, 4023, 118604, 122539, 124610, 60323, 28585, 99699, 41413, 72418, 1896, 92027, 1711, 39295, 61729, 29963, 55301, 65029, 78235, 40871, 33546, 89540, 130775, 70664, 29632, 89907, 80018, 83868, 110718, 54678, 29639, 58731, 5329, 66, 18101, 3541, 112011, 115581, 65431, 121441, 86003, 76325, 117569, 33230]
[2024-12-02 19:10:15.360276] user = 128175 Cloud 170/567
[2024-12-02 19:10:15.369580] user = 128175 Local 170/567
[2024-12-02 19:10:15.427896] user = 128175 Local+ 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:18.012273] user = 128175 MPDA- 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9333333333333333
Training on augumented user 119332 0/50 current_auc = 0.9333333333333333
User 119332 AUC after training: 0.9333333333333333
User 119332 does not improve AUC. Reverting changes.
Training on augumented user 90948 1/50 current_auc = 0.9333333333333333
User 90948 AUC after training: 0.9333333333333333
User 90948 does not improve AUC. Reverting changes.
Training on augumented user 33560 2/50 current_auc = 0.9333333333333333
User 33560 AUC after training: 0.9333333333333333
User 33560 does not improve AUC. Reverting changes.
Training on augumented user 12104 3/50 current_auc = 0.9333333333333333
User 12104 AUC after training: 0.9333333333333333
User 12104 does not improve AUC. Reverting changes.
Training on augumented user 20331 4/50 current_auc = 0.9333333333333333
User 20331 AUC after training: 0.9333333333333333
User 20331 does not improve AUC. Reverting changes.
Training on augumented user 54213 5/50 current_auc = 0.9333333333333333
User 54213 AUC after training: 0.9333333333333333
User 54213 does not improve AUC. Reverting changes.
Training on augumented user 20789 6/50 current_auc = 0.9333333333333333
User 20789 AUC after training: 0.9333333333333333
User 20789 does not improve AUC. Reverting changes.
Training on augumented user 4023 7/50 current_auc = 0.9333333333333333
User 4023 AUC after training: 0.9333333333333333
User 4023 does not improve AUC. Reverting changes.
Training on augumented user 118604 8/50 current_auc = 0.9333333333333333
User 118604 AUC after training: 0.9333333333333333
User 118604 does not improve AUC. Reverting changes.
Training on augumented user 122539 9/50 current_auc = 0.9333333333333333
User 122539 AUC after training: 0.9333333333333333
User 122539 does not improve AUC. Reverting changes.
Training on augumented user 124610 10/50 current_auc = 0.9333333333333333
User 124610 AUC after training: 0.9333333333333333
User 124610 does not improve AUC. Reverting changes.
Training on augumented user 60323 11/50 current_auc = 0.9333333333333333
User 60323 AUC after training: 0.9333333333333333
User 60323 does not improve AUC. Reverting changes.
Training on augumented user 28585 12/50 current_auc = 0.9333333333333333
User 28585 AUC after training: 0.9333333333333333
User 28585 does not improve AUC. Reverting changes.
Training on augumented user 99699 13/50 current_auc = 0.9333333333333333
User 99699 AUC after training: 0.9333333333333333
User 99699 does not improve AUC. Reverting changes.
Training on augumented user 41413 14/50 current_auc = 0.9333333333333333
User 41413 AUC after training: 0.9333333333333333
User 41413 does not improve AUC. Reverting changes.
Training on augumented user 72418 15/50 current_auc = 0.9333333333333333
User 72418 AUC after training: 0.9333333333333333
User 72418 does not improve AUC. Reverting changes.
Training on augumented user 1896 16/50 current_auc = 0.9333333333333333
User 1896 AUC after training: 0.9333333333333333
User 1896 does not improve AUC. Reverting changes.
Training on augumented user 92027 17/50 current_auc = 0.9333333333333333
User 92027 AUC after training: 0.9333333333333333
User 92027 does not improve AUC. Reverting changes.
Training on augumented user 1711 18/50 current_auc = 0.9333333333333333
User 1711 AUC after training: 0.9333333333333333
User 1711 does not improve AUC. Reverting changes.
Training on augumented user 39295 19/50 current_auc = 0.9333333333333333
User 39295 AUC after training: 0.9333333333333333
User 39295 does not improve AUC. Reverting changes.
Training on augumented user 61729 20/50 current_auc = 0.9333333333333333
User 61729 AUC after training: 0.9333333333333333
User 61729 does not improve AUC. Reverting changes.
Training on augumented user 29963 21/50 current_auc = 0.9333333333333333
User 29963 AUC after training: 0.9333333333333333
User 29963 does not improve AUC. Reverting changes.
Training on augumented user 55301 22/50 current_auc = 0.9333333333333333
User 55301 AUC after training: 0.9333333333333333
User 55301 does not improve AUC. Reverting changes.
Training on augumented user 65029 23/50 current_auc = 0.9333333333333333
User 65029 AUC after training: 0.9333333333333333
User 65029 does not improve AUC. Reverting changes.
Training on augumented user 78235 24/50 current_auc = 0.9333333333333333
User 78235 AUC after training: 0.9333333333333333
User 78235 does not improve AUC. Reverting changes.
Training on augumented user 40871 25/50 current_auc = 0.9333333333333333
User 40871 AUC after training: 0.9333333333333333
User 40871 does not improve AUC. Reverting changes.
Training on augumented user 33546 26/50 current_auc = 0.9333333333333333
User 33546 AUC after training: 0.9333333333333333
User 33546 does not improve AUC. Reverting changes.
Training on augumented user 89540 27/50 current_auc = 0.9333333333333333
User 89540 AUC after training: 0.9333333333333333
User 89540 does not improve AUC. Reverting changes.
Training on augumented user 130775 28/50 current_auc = 0.9333333333333333
User 130775 AUC after training: 0.9333333333333333
User 130775 does not improve AUC. Reverting changes.
Training on augumented user 70664 29/50 current_auc = 0.9333333333333333
User 70664 AUC after training: 0.9333333333333333
User 70664 does not improve AUC. Reverting changes.
Training on augumented user 29632 30/50 current_auc = 0.9333333333333333
User 29632 AUC after training: 0.9333333333333333
User 29632 does not improve AUC. Reverting changes.
Training on augumented user 89907 31/50 current_auc = 0.9333333333333333
User 89907 AUC after training: 0.9333333333333333
User 89907 does not improve AUC. Reverting changes.
Training on augumented user 80018 32/50 current_auc = 0.9333333333333333
User 80018 AUC after training: 0.9333333333333333
User 80018 does not improve AUC. Reverting changes.
Training on augumented user 83868 33/50 current_auc = 0.9333333333333333
User 83868 AUC after training: 0.9333333333333333
User 83868 does not improve AUC. Reverting changes.
Training on augumented user 110718 34/50 current_auc = 0.9333333333333333
User 110718 AUC after training: 0.9333333333333333
User 110718 does not improve AUC. Reverting changes.
Training on augumented user 54678 35/50 current_auc = 0.9333333333333333
User 54678 AUC after training: 0.9333333333333333
User 54678 does not improve AUC. Reverting changes.
Training on augumented user 29639 36/50 current_auc = 0.9333333333333333
User 29639 AUC after training: 0.9333333333333333
User 29639 does not improve AUC. Reverting changes.
Training on augumented user 58731 37/50 current_auc = 0.9333333333333333
User 58731 AUC after training: 0.9333333333333333
User 58731 does not improve AUC. Reverting changes.
Training on augumented user 5329 38/50 current_auc = 0.9333333333333333
User 5329 AUC after training: 0.9333333333333333
User 5329 does not improve AUC. Reverting changes.
Training on augumented user 66 39/50 current_auc = 0.9333333333333333
User 66 AUC after training: 0.9333333333333333
User 66 does not improve AUC. Reverting changes.
Training on augumented user 18101 40/50 current_auc = 0.9333333333333333
User 18101 AUC after training: 0.9333333333333333
User 18101 does not improve AUC. Reverting changes.
Training on augumented user 3541 41/50 current_auc = 0.9333333333333333
User 3541 AUC after training: 0.9333333333333333
User 3541 does not improve AUC. Reverting changes.
Training on augumented user 112011 42/50 current_auc = 0.9333333333333333
User 112011 AUC after training: 0.9333333333333333
User 112011 does not improve AUC. Reverting changes.
Training on augumented user 115581 43/50 current_auc = 0.9333333333333333
User 115581 AUC after training: 0.9333333333333333
User 115581 does not improve AUC. Reverting changes.
Training on augumented user 65431 44/50 current_auc = 0.9333333333333333
User 65431 AUC after training: 0.9333333333333333
User 65431 does not improve AUC. Reverting changes.
Training on augumented user 121441 45/50 current_auc = 0.9333333333333333
User 121441 AUC after training: 0.9333333333333333
User 121441 does not improve AUC. Reverting changes.
Training on augumented user 86003 46/50 current_auc = 0.9333333333333333
User 86003 AUC after training: 0.9333333333333333
User 86003 does not improve AUC. Reverting changes.
Training on augumented user 76325 47/50 current_auc = 0.9333333333333333
User 76325 AUC after training: 0.9333333333333333
User 76325 does not improve AUC. Reverting changes.
Training on augumented user 117569 48/50 current_auc = 0.9333333333333333
User 117569 AUC after training: 0.9333333333333333
User 117569 does not improve AUC. Reverting changes.
Training on augumented user 33230 49/50 current_auc = 0.9333333333333333
User 33230 AUC after training: 0.9333333333333333
User 33230 does not improve AUC. Reverting changes.
[2024-12-02 19:10:50.654834] start test user 128216 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:51.370146] start test user 128216 171/567 recall augumented users by random, augumented_users = [102848, 73319, 39866, 121682, 2312, 81261, 22866, 5742, 125001, 103425, 72870, 50950, 103775, 100600, 28147, 4577, 35970, 19639, 93371, 30454, 2002, 93126, 92005, 18361, 115661, 57568, 40217, 125085, 34010, 18314, 101624, 27722, 94085, 104076, 3444, 76962, 100378, 54812, 108721, 30675, 47482, 105183, 82541, 96993, 82445, 46815, 32502, 111410, 59993, 35734]
[2024-12-02 19:10:51.384937] user = 128216 Cloud 171/567
[2024-12-02 19:10:51.394851] user = 128216 Local 171/567
[2024-12-02 19:10:51.422514] user = 128216 Local+ 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:54.030607] user = 128216 MPDA- 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5449999999999999
Training on augumented user 102848 0/50 current_auc = 0.5449999999999999
User 102848 AUC after training: 0.5449999999999999
User 102848 does not improve AUC. Reverting changes.
Training on augumented user 73319 1/50 current_auc = 0.5449999999999999
User 73319 AUC after training: 0.5449999999999999
User 73319 does not improve AUC. Reverting changes.
Training on augumented user 39866 2/50 current_auc = 0.5449999999999999
User 39866 AUC after training: 0.5449999999999999
User 39866 does not improve AUC. Reverting changes.
Training on augumented user 121682 3/50 current_auc = 0.5449999999999999
User 121682 AUC after training: 0.5449999999999999
User 121682 does not improve AUC. Reverting changes.
Training on augumented user 2312 4/50 current_auc = 0.5449999999999999
User 2312 AUC after training: 0.5449999999999999
User 2312 does not improve AUC. Reverting changes.
Training on augumented user 81261 5/50 current_auc = 0.5449999999999999
User 81261 AUC after training: 0.5449999999999999
User 81261 does not improve AUC. Reverting changes.
Training on augumented user 22866 6/50 current_auc = 0.5449999999999999
User 22866 AUC after training: 0.5449999999999999
User 22866 does not improve AUC. Reverting changes.
Training on augumented user 5742 7/50 current_auc = 0.5449999999999999
User 5742 AUC after training: 0.5449999999999999
User 5742 does not improve AUC. Reverting changes.
Training on augumented user 125001 8/50 current_auc = 0.5449999999999999
User 125001 AUC after training: 0.5449999999999999
User 125001 does not improve AUC. Reverting changes.
Training on augumented user 103425 9/50 current_auc = 0.5449999999999999
User 103425 AUC after training: 0.5449999999999999
User 103425 does not improve AUC. Reverting changes.
Training on augumented user 72870 10/50 current_auc = 0.5449999999999999
User 72870 AUC after training: 0.5449999999999999
User 72870 does not improve AUC. Reverting changes.
Training on augumented user 50950 11/50 current_auc = 0.5449999999999999
User 50950 AUC after training: 0.5449999999999999
User 50950 does not improve AUC. Reverting changes.
Training on augumented user 103775 12/50 current_auc = 0.5449999999999999
User 103775 AUC after training: 0.5449999999999999
User 103775 does not improve AUC. Reverting changes.
Training on augumented user 100600 13/50 current_auc = 0.5449999999999999
User 100600 AUC after training: 0.54
User 100600 does not improve AUC. Reverting changes.
Training on augumented user 28147 14/50 current_auc = 0.5449999999999999
User 28147 AUC after training: 0.5449999999999999
User 28147 does not improve AUC. Reverting changes.
Training on augumented user 4577 15/50 current_auc = 0.5449999999999999
User 4577 AUC after training: 0.5449999999999999
User 4577 does not improve AUC. Reverting changes.
Training on augumented user 35970 16/50 current_auc = 0.5449999999999999
User 35970 AUC after training: 0.54
User 35970 does not improve AUC. Reverting changes.
Training on augumented user 19639 17/50 current_auc = 0.5449999999999999
User 19639 AUC after training: 0.5449999999999999
User 19639 does not improve AUC. Reverting changes.
Training on augumented user 93371 18/50 current_auc = 0.5449999999999999
User 93371 AUC after training: 0.5449999999999999
User 93371 does not improve AUC. Reverting changes.
Training on augumented user 30454 19/50 current_auc = 0.5449999999999999
User 30454 AUC after training: 0.5449999999999999
User 30454 does not improve AUC. Reverting changes.
Training on augumented user 2002 20/50 current_auc = 0.5449999999999999
User 2002 AUC after training: 0.5449999999999999
User 2002 does not improve AUC. Reverting changes.
Training on augumented user 93126 21/50 current_auc = 0.5449999999999999
User 93126 AUC after training: 0.54
User 93126 does not improve AUC. Reverting changes.
Training on augumented user 92005 22/50 current_auc = 0.5449999999999999
User 92005 AUC after training: 0.5449999999999999
User 92005 does not improve AUC. Reverting changes.
Training on augumented user 18361 23/50 current_auc = 0.5449999999999999
User 18361 AUC after training: 0.5449999999999999
User 18361 does not improve AUC. Reverting changes.
Training on augumented user 115661 24/50 current_auc = 0.5449999999999999
User 115661 AUC after training: 0.5449999999999999
User 115661 does not improve AUC. Reverting changes.
Training on augumented user 57568 25/50 current_auc = 0.5449999999999999
User 57568 AUC after training: 0.5449999999999999
User 57568 does not improve AUC. Reverting changes.
Training on augumented user 40217 26/50 current_auc = 0.5449999999999999
User 40217 AUC after training: 0.5449999999999999
User 40217 does not improve AUC. Reverting changes.
Training on augumented user 125085 27/50 current_auc = 0.5449999999999999
User 125085 AUC after training: 0.5449999999999999
User 125085 does not improve AUC. Reverting changes.
Training on augumented user 34010 28/50 current_auc = 0.5449999999999999
User 34010 AUC after training: 0.5449999999999999
User 34010 does not improve AUC. Reverting changes.
Training on augumented user 18314 29/50 current_auc = 0.5449999999999999
User 18314 AUC after training: 0.5449999999999999
User 18314 does not improve AUC. Reverting changes.
Training on augumented user 101624 30/50 current_auc = 0.5449999999999999
User 101624 AUC after training: 0.5449999999999999
User 101624 does not improve AUC. Reverting changes.
Training on augumented user 27722 31/50 current_auc = 0.5449999999999999
User 27722 AUC after training: 0.5449999999999999
User 27722 does not improve AUC. Reverting changes.
Training on augumented user 94085 32/50 current_auc = 0.5449999999999999
User 94085 AUC after training: 0.5449999999999999
User 94085 does not improve AUC. Reverting changes.
Training on augumented user 104076 33/50 current_auc = 0.5449999999999999
User 104076 AUC after training: 0.5449999999999999
User 104076 does not improve AUC. Reverting changes.
Training on augumented user 3444 34/50 current_auc = 0.5449999999999999
User 3444 AUC after training: 0.5449999999999999
User 3444 does not improve AUC. Reverting changes.
Training on augumented user 76962 35/50 current_auc = 0.5449999999999999
User 76962 AUC after training: 0.5449999999999999
User 76962 does not improve AUC. Reverting changes.
Training on augumented user 100378 36/50 current_auc = 0.5449999999999999
User 100378 AUC after training: 0.5449999999999999
User 100378 does not improve AUC. Reverting changes.
Training on augumented user 54812 37/50 current_auc = 0.5449999999999999
User 54812 AUC after training: 0.54
User 54812 does not improve AUC. Reverting changes.
Training on augumented user 108721 38/50 current_auc = 0.5449999999999999
User 108721 AUC after training: 0.5449999999999999
User 108721 does not improve AUC. Reverting changes.
Training on augumented user 30675 39/50 current_auc = 0.5449999999999999
User 30675 AUC after training: 0.5449999999999999
User 30675 does not improve AUC. Reverting changes.
Training on augumented user 47482 40/50 current_auc = 0.5449999999999999
User 47482 AUC after training: 0.5449999999999999
User 47482 does not improve AUC. Reverting changes.
Training on augumented user 105183 41/50 current_auc = 0.5449999999999999
User 105183 AUC after training: 0.5449999999999999
User 105183 does not improve AUC. Reverting changes.
Training on augumented user 82541 42/50 current_auc = 0.5449999999999999
User 82541 AUC after training: 0.5449999999999999
User 82541 does not improve AUC. Reverting changes.
Training on augumented user 96993 43/50 current_auc = 0.5449999999999999
User 96993 AUC after training: 0.5449999999999999
User 96993 does not improve AUC. Reverting changes.
Training on augumented user 82445 44/50 current_auc = 0.5449999999999999
User 82445 AUC after training: 0.5449999999999999
User 82445 does not improve AUC. Reverting changes.
Training on augumented user 46815 45/50 current_auc = 0.5449999999999999
User 46815 AUC after training: 0.535
User 46815 does not improve AUC. Reverting changes.
Training on augumented user 32502 46/50 current_auc = 0.5449999999999999
User 32502 AUC after training: 0.5449999999999999
User 32502 does not improve AUC. Reverting changes.
Training on augumented user 111410 47/50 current_auc = 0.5449999999999999
User 111410 AUC after training: 0.5449999999999999
User 111410 does not improve AUC. Reverting changes.
Training on augumented user 59993 48/50 current_auc = 0.5449999999999999
User 59993 AUC after training: 0.5449999999999999
User 59993 does not improve AUC. Reverting changes.
Training on augumented user 35734 49/50 current_auc = 0.5449999999999999
User 35734 AUC after training: 0.5449999999999999
User 35734 does not improve AUC. Reverting changes.
[2024-12-02 19:11:21.849602] start test user 128224 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:22.684044] start test user 128224 172/567 recall augumented users by random, augumented_users = [87930, 111777, 134172, 130339, 97592, 24142, 25536, 105507, 127721, 58811, 2987, 85034, 44532, 23007, 87985, 134514, 16343, 103171, 115808, 32235, 62652, 15582, 38517, 70771, 65793, 60363, 95415, 30885, 73074, 120529, 70276, 7498, 2871, 63025, 114552, 41727, 54314, 115938, 44062, 83032, 78927, 79316, 19169, 24326, 104152, 101276, 89747, 9207, 47542, 32344]
[2024-12-02 19:11:22.735169] user = 128224 Cloud 172/567
[2024-12-02 19:11:22.750242] user = 128224 Local 172/567
[2024-12-02 19:11:22.927272] user = 128224 Local+ 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:26.450104] user = 128224 MPDA- 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 87930 0/50 current_auc = 0.5555555555555556
User 87930 AUC after training: 0.5555555555555556
User 87930 does not improve AUC. Reverting changes.
Training on augumented user 111777 1/50 current_auc = 0.5555555555555556
User 111777 AUC after training: 0.5555555555555556
User 111777 does not improve AUC. Reverting changes.
Training on augumented user 134172 2/50 current_auc = 0.5555555555555556
User 134172 AUC after training: 0.5555555555555556
User 134172 does not improve AUC. Reverting changes.
Training on augumented user 130339 3/50 current_auc = 0.5555555555555556
User 130339 AUC after training: 0.5555555555555556
User 130339 does not improve AUC. Reverting changes.
Training on augumented user 97592 4/50 current_auc = 0.5555555555555556
User 97592 AUC after training: 0.5555555555555556
User 97592 does not improve AUC. Reverting changes.
Training on augumented user 24142 5/50 current_auc = 0.5555555555555556
User 24142 AUC after training: 0.5555555555555556
User 24142 does not improve AUC. Reverting changes.
Training on augumented user 25536 6/50 current_auc = 0.5555555555555556
User 25536 AUC after training: 0.5555555555555556
User 25536 does not improve AUC. Reverting changes.
Training on augumented user 105507 7/50 current_auc = 0.5555555555555556
User 105507 AUC after training: 0.5555555555555556
User 105507 does not improve AUC. Reverting changes.
Training on augumented user 127721 8/50 current_auc = 0.5555555555555556
User 127721 AUC after training: 0.5555555555555556
User 127721 does not improve AUC. Reverting changes.
Training on augumented user 58811 9/50 current_auc = 0.5555555555555556
User 58811 AUC after training: 0.5555555555555556
User 58811 does not improve AUC. Reverting changes.
Training on augumented user 2987 10/50 current_auc = 0.5555555555555556
User 2987 AUC after training: 0.5555555555555556
User 2987 does not improve AUC. Reverting changes.
Training on augumented user 85034 11/50 current_auc = 0.5555555555555556
User 85034 AUC after training: 0.5555555555555556
User 85034 does not improve AUC. Reverting changes.
Training on augumented user 44532 12/50 current_auc = 0.5555555555555556
User 44532 AUC after training: 0.5555555555555556
User 44532 does not improve AUC. Reverting changes.
Training on augumented user 23007 13/50 current_auc = 0.5555555555555556
User 23007 AUC after training: 0.5555555555555556
User 23007 does not improve AUC. Reverting changes.
Training on augumented user 87985 14/50 current_auc = 0.5555555555555556
User 87985 AUC after training: 0.5555555555555556
User 87985 does not improve AUC. Reverting changes.
Training on augumented user 134514 15/50 current_auc = 0.5555555555555556
User 134514 AUC after training: 0.5555555555555556
User 134514 does not improve AUC. Reverting changes.
Training on augumented user 16343 16/50 current_auc = 0.5555555555555556
User 16343 AUC after training: 0.5555555555555556
User 16343 does not improve AUC. Reverting changes.
Training on augumented user 103171 17/50 current_auc = 0.5555555555555556
User 103171 AUC after training: 0.5555555555555556
User 103171 does not improve AUC. Reverting changes.
Training on augumented user 115808 18/50 current_auc = 0.5555555555555556
User 115808 AUC after training: 0.5555555555555556
User 115808 does not improve AUC. Reverting changes.
Training on augumented user 32235 19/50 current_auc = 0.5555555555555556
User 32235 AUC after training: 0.5555555555555556
User 32235 does not improve AUC. Reverting changes.
Training on augumented user 62652 20/50 current_auc = 0.5555555555555556
User 62652 AUC after training: 0.5555555555555556
User 62652 does not improve AUC. Reverting changes.
Training on augumented user 15582 21/50 current_auc = 0.5555555555555556
User 15582 AUC after training: 0.5555555555555556
User 15582 does not improve AUC. Reverting changes.
Training on augumented user 38517 22/50 current_auc = 0.5555555555555556
User 38517 AUC after training: 0.5555555555555556
User 38517 does not improve AUC. Reverting changes.
Training on augumented user 70771 23/50 current_auc = 0.5555555555555556
User 70771 AUC after training: 0.5555555555555556
User 70771 does not improve AUC. Reverting changes.
Training on augumented user 65793 24/50 current_auc = 0.5555555555555556
User 65793 AUC after training: 0.5555555555555556
User 65793 does not improve AUC. Reverting changes.
Training on augumented user 60363 25/50 current_auc = 0.5555555555555556
User 60363 AUC after training: 0.5555555555555556
User 60363 does not improve AUC. Reverting changes.
Training on augumented user 95415 26/50 current_auc = 0.5555555555555556
User 95415 AUC after training: 0.5555555555555556
User 95415 does not improve AUC. Reverting changes.
Training on augumented user 30885 27/50 current_auc = 0.5555555555555556
User 30885 AUC after training: 0.5555555555555556
User 30885 does not improve AUC. Reverting changes.
Training on augumented user 73074 28/50 current_auc = 0.5555555555555556
User 73074 AUC after training: 0.5555555555555556
User 73074 does not improve AUC. Reverting changes.
Training on augumented user 120529 29/50 current_auc = 0.5555555555555556
User 120529 AUC after training: 0.5555555555555556
User 120529 does not improve AUC. Reverting changes.
Training on augumented user 70276 30/50 current_auc = 0.5555555555555556
User 70276 AUC after training: 0.5555555555555556
User 70276 does not improve AUC. Reverting changes.
Training on augumented user 7498 31/50 current_auc = 0.5555555555555556
User 7498 AUC after training: 0.5555555555555556
User 7498 does not improve AUC. Reverting changes.
Training on augumented user 2871 32/50 current_auc = 0.5555555555555556
User 2871 AUC after training: 0.5555555555555556
User 2871 does not improve AUC. Reverting changes.
Training on augumented user 63025 33/50 current_auc = 0.5555555555555556
User 63025 AUC after training: 0.5555555555555556
User 63025 does not improve AUC. Reverting changes.
Training on augumented user 114552 34/50 current_auc = 0.5555555555555556
User 114552 AUC after training: 0.5555555555555556
User 114552 does not improve AUC. Reverting changes.
Training on augumented user 41727 35/50 current_auc = 0.5555555555555556
User 41727 AUC after training: 0.5555555555555556
User 41727 does not improve AUC. Reverting changes.
Training on augumented user 54314 36/50 current_auc = 0.5555555555555556
User 54314 AUC after training: 0.5555555555555556
User 54314 does not improve AUC. Reverting changes.
Training on augumented user 115938 37/50 current_auc = 0.5555555555555556
User 115938 AUC after training: 0.5555555555555556
User 115938 does not improve AUC. Reverting changes.
Training on augumented user 44062 38/50 current_auc = 0.5555555555555556
User 44062 AUC after training: 0.5555555555555556
User 44062 does not improve AUC. Reverting changes.
Training on augumented user 83032 39/50 current_auc = 0.5555555555555556
User 83032 AUC after training: 0.5555555555555556
User 83032 does not improve AUC. Reverting changes.
Training on augumented user 78927 40/50 current_auc = 0.5555555555555556
User 78927 AUC after training: 0.5555555555555556
User 78927 does not improve AUC. Reverting changes.
Training on augumented user 79316 41/50 current_auc = 0.5555555555555556
User 79316 AUC after training: 0.5555555555555556
User 79316 does not improve AUC. Reverting changes.
Training on augumented user 19169 42/50 current_auc = 0.5555555555555556
User 19169 AUC after training: 0.5555555555555556
User 19169 does not improve AUC. Reverting changes.
Training on augumented user 24326 43/50 current_auc = 0.5555555555555556
User 24326 AUC after training: 0.5555555555555556
User 24326 does not improve AUC. Reverting changes.
Training on augumented user 104152 44/50 current_auc = 0.5555555555555556
User 104152 AUC after training: 0.5555555555555556
User 104152 does not improve AUC. Reverting changes.
Training on augumented user 101276 45/50 current_auc = 0.5555555555555556
User 101276 AUC after training: 0.5555555555555556
User 101276 does not improve AUC. Reverting changes.
Training on augumented user 89747 46/50 current_auc = 0.5555555555555556
User 89747 AUC after training: 0.5555555555555556
User 89747 does not improve AUC. Reverting changes.
Training on augumented user 9207 47/50 current_auc = 0.5555555555555556
User 9207 AUC after training: 0.5555555555555556
User 9207 does not improve AUC. Reverting changes.
Training on augumented user 47542 48/50 current_auc = 0.5555555555555556
User 47542 AUC after training: 0.5555555555555556
User 47542 does not improve AUC. Reverting changes.
Training on augumented user 32344 49/50 current_auc = 0.5555555555555556
User 32344 AUC after training: 0.5555555555555556
User 32344 does not improve AUC. Reverting changes.
[2024-12-02 19:11:53.862484] start test user 128233 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:54.451071] start test user 128233 173/567 recall augumented users by random, augumented_users = [125451, 90450, 96211, 43439, 35497, 133277, 86468, 52276, 29749, 90062, 121179, 83137, 33015, 119665, 10461, 121076, 126178, 58411, 121755, 87096, 31945, 27513, 19707, 48162, 67531, 121572, 11157, 54424, 90836, 78844, 133820, 13292, 133621, 64728, 81037, 96676, 50231, 107179, 116787, 64304, 26579, 53640, 110983, 38590, 122796, 68192, 91663, 689, 41735, 57660]
[2024-12-02 19:11:54.466787] user = 128233 Cloud 173/567
[2024-12-02 19:11:54.530043] user = 128233 Local 173/567
[2024-12-02 19:11:54.679022] user = 128233 Local+ 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:57.822780] user = 128233 MPDA- 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7204098957070094
Training on augumented user 125451 0/50 current_auc = 0.7204098957070094
User 125451 AUC after training: 0.7204584040747029
User 125451 improves AUC. Keeping the model.
Training on augumented user 90450 1/50 current_auc = 0.7204584040747029
User 90450 AUC after training: 0.720227989328159
User 90450 does not improve AUC. Reverting changes.
Training on augumented user 96211 2/50 current_auc = 0.7204584040747029
User 96211 AUC after training: 0.7204462769827795
User 96211 does not improve AUC. Reverting changes.
Training on augumented user 43439 3/50 current_auc = 0.7204584040747029
User 43439 AUC after training: 0.720361387339316
User 43439 does not improve AUC. Reverting changes.
Training on augumented user 35497 4/50 current_auc = 0.7204584040747029
User 35497 AUC after training: 0.7203371331554693
User 35497 does not improve AUC. Reverting changes.
Training on augumented user 133277 5/50 current_auc = 0.7204584040747029
User 133277 AUC after training: 0.7203735144312393
User 133277 does not improve AUC. Reverting changes.
Training on augumented user 86468 6/50 current_auc = 0.7204584040747029
User 86468 AUC after training: 0.7206160562697065
User 86468 improves AUC. Keeping the model.
Training on augumented user 52276 7/50 current_auc = 0.7206160562697065
User 52276 AUC after training: 0.7209434877516372
User 52276 improves AUC. Keeping the model.
Training on augumented user 29749 8/50 current_auc = 0.7209434877516372
User 29749 AUC after training: 0.7208646616541354
User 29749 does not improve AUC. Reverting changes.
Training on augumented user 90062 9/50 current_auc = 0.7209434877516372
User 90062 AUC after training: 0.7211739024981809
User 90062 improves AUC. Keeping the model.
Training on augumented user 121179 10/50 current_auc = 0.7211739024981809
User 121179 AUC after training: 0.7211375212224109
User 121179 does not improve AUC. Reverting changes.
Training on augumented user 83137 11/50 current_auc = 0.7211739024981809
User 83137 AUC after training: 0.7209738054814456
User 83137 does not improve AUC. Reverting changes.
Training on augumented user 33015 12/50 current_auc = 0.7211739024981809
User 33015 AUC after training: 0.7212345379577978
User 33015 improves AUC. Keeping the model.
Training on augumented user 119665 13/50 current_auc = 0.7212345379577978
User 119665 AUC after training: 0.721246665049721
User 119665 improves AUC. Keeping the model.
Training on augumented user 10461 14/50 current_auc = 0.721246665049721
User 10461 AUC after training: 0.7212587921416445
User 10461 improves AUC. Keeping the model.
Training on augumented user 121076 15/50 current_auc = 0.7212587921416445
User 121076 AUC after training: 0.7209859325733688
User 121076 does not improve AUC. Reverting changes.
Training on augumented user 126178 16/50 current_auc = 0.7212587921416445
User 126178 AUC after training: 0.7212587921416445
User 126178 does not improve AUC. Reverting changes.
Training on augumented user 58411 17/50 current_auc = 0.7212587921416445
User 58411 AUC after training: 0.7213497453310694
User 58411 improves AUC. Keeping the model.
Training on augumented user 121755 18/50 current_auc = 0.7213497453310694
User 121755 AUC after training: 0.7214285714285714
User 121755 improves AUC. Keeping the model.
Training on augumented user 87096 19/50 current_auc = 0.7214285714285714
User 87096 AUC after training: 0.7216104778074217
User 87096 improves AUC. Keeping the model.
Training on augumented user 31945 20/50 current_auc = 0.7216104778074217
User 31945 AUC after training: 0.7216589861751151
User 31945 improves AUC. Keeping the model.
Training on augumented user 27513 21/50 current_auc = 0.7216589861751151
User 27513 AUC after training: 0.721549842347805
User 27513 does not improve AUC. Reverting changes.
Training on augumented user 19707 22/50 current_auc = 0.7216589861751151
User 19707 AUC after training: 0.7215740965316516
User 19707 does not improve AUC. Reverting changes.
Training on augumented user 48162 23/50 current_auc = 0.7216589861751151
User 48162 AUC after training: 0.7208464710162502
User 48162 does not improve AUC. Reverting changes.
Training on augumented user 67531 24/50 current_auc = 0.7216589861751151
User 67531 AUC after training: 0.7212709192335677
User 67531 does not improve AUC. Reverting changes.
Training on augumented user 121572 25/50 current_auc = 0.7216589861751151
User 121572 AUC after training: 0.721622604899345
User 121572 does not improve AUC. Reverting changes.
Training on augumented user 11157 26/50 current_auc = 0.7216589861751151
User 11157 AUC after training: 0.7214406985204949
User 11157 does not improve AUC. Reverting changes.
Training on augumented user 54424 27/50 current_auc = 0.7216589861751151
User 54424 AUC after training: 0.7212587921416445
User 54424 does not improve AUC. Reverting changes.
Training on augumented user 90836 28/50 current_auc = 0.7216589861751151
User 90836 AUC after training: 0.7216711132670385
User 90836 improves AUC. Keeping the model.
Training on augumented user 78844 29/50 current_auc = 0.7216711132670385
User 78844 AUC after training: 0.7214406985204946
User 78844 does not improve AUC. Reverting changes.
Training on augumented user 133820 30/50 current_auc = 0.7216711132670385
User 133820 AUC after training: 0.7219742905651224
User 133820 improves AUC. Keeping the model.
Training on augumented user 13292 31/50 current_auc = 0.7219742905651224
User 13292 AUC after training: 0.7218045112781954
User 13292 does not improve AUC. Reverting changes.
Training on augumented user 133621 32/50 current_auc = 0.7219742905651224
User 133621 AUC after training: 0.7216711132670385
User 133621 does not improve AUC. Reverting changes.
Training on augumented user 64728 33/50 current_auc = 0.7219742905651224
User 64728 AUC after training: 0.7214649527043414
User 64728 does not improve AUC. Reverting changes.
Training on augumented user 81037 34/50 current_auc = 0.7219742905651224
User 81037 AUC after training: 0.7214649527043414
User 81037 does not improve AUC. Reverting changes.
Training on augumented user 96676 35/50 current_auc = 0.7219742905651224
User 96676 AUC after training: 0.7216589861751153
User 96676 does not improve AUC. Reverting changes.
Training on augumented user 50231 36/50 current_auc = 0.7219742905651224
User 50231 AUC after training: 0.7212951734174144
User 50231 does not improve AUC. Reverting changes.
Training on augumented user 107179 37/50 current_auc = 0.7219742905651224
User 107179 AUC after training: 0.7218772738297357
User 107179 does not improve AUC. Reverting changes.
Training on augumented user 116787 38/50 current_auc = 0.7219742905651224
User 116787 AUC after training: 0.7215377152558816
User 116787 does not improve AUC. Reverting changes.
Training on augumented user 64304 39/50 current_auc = 0.7219742905651224
User 64304 AUC after training: 0.7208828522920203
User 64304 does not improve AUC. Reverting changes.
Training on augumented user 26579 40/50 current_auc = 0.7219742905651224
User 26579 AUC after training: 0.7216104778074218
User 26579 does not improve AUC. Reverting changes.
Training on augumented user 53640 41/50 current_auc = 0.7219742905651224
User 53640 AUC after training: 0.7209919961193305
User 53640 does not improve AUC. Reverting changes.
Training on augumented user 110983 42/50 current_auc = 0.7219742905651224
User 110983 AUC after training: 0.7218651467378123
User 110983 does not improve AUC. Reverting changes.
Training on augumented user 38590 43/50 current_auc = 0.7219742905651224
User 38590 AUC after training: 0.7220470531166626
User 38590 improves AUC. Keeping the model.
Training on augumented user 122796 44/50 current_auc = 0.7220470531166626
User 122796 AUC after training: 0.7219742905651225
User 122796 does not improve AUC. Reverting changes.
Training on augumented user 68192 45/50 current_auc = 0.7220470531166626
User 68192 AUC after training: 0.7216711132670386
User 68192 does not improve AUC. Reverting changes.
Training on augumented user 91663 46/50 current_auc = 0.7220470531166626
User 91663 AUC after training: 0.7219136551055056
User 91663 does not improve AUC. Reverting changes.
Training on augumented user 689 47/50 current_auc = 0.7220470531166626
User 689 AUC after training: 0.7214225078826098
User 689 does not improve AUC. Reverting changes.
Training on augumented user 41735 48/50 current_auc = 0.7220470531166626
User 41735 AUC after training: 0.721889400921659
User 41735 does not improve AUC. Reverting changes.
Training on augumented user 57660 49/50 current_auc = 0.7220470531166626
User 57660 AUC after training: 0.7217074945428086
User 57660 does not improve AUC. Reverting changes.
[2024-12-02 19:12:28.389313] start test user 128248 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:28.819606] start test user 128248 174/567 recall augumented users by random, augumented_users = [70604, 98169, 40231, 100641, 107799, 22631, 14583, 127012, 62284, 103846, 104581, 42172, 47696, 65528, 19328, 69751, 101123, 62290, 135936, 112963, 2204, 135322, 54801, 45264, 45721, 123531, 29754, 8800, 18160, 88807, 1297, 91395, 106434, 16822, 4990, 109521, 88812, 17279, 119909, 4243, 10121, 45226, 3252, 124440, 116460, 129851, 32350, 93684, 126006, 22443]
[2024-12-02 19:12:28.834407] user = 128248 Cloud 174/567
[2024-12-02 19:12:28.868400] user = 128248 Local 174/567
[2024-12-02 19:12:28.930095] user = 128248 Local+ 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:31.733749] user = 128248 MPDA- 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7730622552051124
Training on augumented user 70604 0/50 current_auc = 0.7730622552051124
User 70604 AUC after training: 0.7731910946196661
User 70604 improves AUC. Keeping the model.
Training on augumented user 98169 1/50 current_auc = 0.7731910946196661
User 98169 AUC after training: 0.7731137909709338
User 98169 does not improve AUC. Reverting changes.
Training on augumented user 40231 2/50 current_auc = 0.7731910946196661
User 40231 AUC after training: 0.7730107194392909
User 40231 does not improve AUC. Reverting changes.
Training on augumented user 100641 3/50 current_auc = 0.7731910946196661
User 100641 AUC after training: 0.7731653267367553
User 100641 does not improve AUC. Reverting changes.
Training on augumented user 107799 4/50 current_auc = 0.7731910946196661
User 107799 AUC after training: 0.7728818800247371
User 107799 does not improve AUC. Reverting changes.
Training on augumented user 22631 5/50 current_auc = 0.7731910946196661
User 22631 AUC after training: 0.7731653267367553
User 22631 does not improve AUC. Reverting changes.
Training on augumented user 14583 6/50 current_auc = 0.7731910946196661
User 14583 AUC after training: 0.7732683982683982
User 14583 improves AUC. Keeping the model.
Training on augumented user 127012 7/50 current_auc = 0.7732683982683982
User 127012 AUC after training: 0.7732812822098536
User 127012 improves AUC. Keeping the model.
Training on augumented user 62284 8/50 current_auc = 0.7732812822098536
User 62284 AUC after training: 0.773191094619666
User 62284 does not improve AUC. Reverting changes.
Training on augumented user 103846 9/50 current_auc = 0.7732812822098536
User 103846 AUC after training: 0.7731524427953
User 103846 does not improve AUC. Reverting changes.
Training on augumented user 104581 10/50 current_auc = 0.7732812822098536
User 104581 AUC after training: 0.7728303442589157
User 104581 does not improve AUC. Reverting changes.
Training on augumented user 42172 11/50 current_auc = 0.7732812822098536
User 42172 AUC after training: 0.7731137909709338
User 42172 does not improve AUC. Reverting changes.
Training on augumented user 47696 12/50 current_auc = 0.7732812822098536
User 47696 AUC after training: 0.7730751391465677
User 47696 does not improve AUC. Reverting changes.
Training on augumented user 65528 13/50 current_auc = 0.7732812822098536
User 65528 AUC after training: 0.7729849515563801
User 65528 does not improve AUC. Reverting changes.
Training on augumented user 19328 14/50 current_auc = 0.7732812822098536
User 19328 AUC after training: 0.7729720676149248
User 19328 does not improve AUC. Reverting changes.
Training on augumented user 69751 15/50 current_auc = 0.7732812822098536
User 69751 AUC after training: 0.773397237682952
User 69751 improves AUC. Keeping the model.
Training on augumented user 101123 16/50 current_auc = 0.773397237682952
User 101123 AUC after training: 0.7733199340342198
User 101123 does not improve AUC. Reverting changes.
Training on augumented user 62290 17/50 current_auc = 0.773397237682952
User 62290 AUC after training: 0.7727015048443621
User 62290 does not improve AUC. Reverting changes.
Training on augumented user 135936 18/50 current_auc = 0.773397237682952
User 135936 AUC after training: 0.7732426303854875
User 135936 does not improve AUC. Reverting changes.
Training on augumented user 112963 19/50 current_auc = 0.773397237682952
User 112963 AUC after training: 0.7730880230880232
User 112963 does not improve AUC. Reverting changes.
Training on augumented user 2204 20/50 current_auc = 0.773397237682952
User 2204 AUC after training: 0.7725726654298083
User 2204 does not improve AUC. Reverting changes.
Training on augumented user 135322 21/50 current_auc = 0.773397237682952
User 135322 AUC after training: 0.7731910946196661
User 135322 does not improve AUC. Reverting changes.
Training on augumented user 54801 22/50 current_auc = 0.773397237682952
User 54801 AUC after training: 0.7731137909709339
User 54801 does not improve AUC. Reverting changes.
Training on augumented user 45264 23/50 current_auc = 0.773397237682952
User 45264 AUC after training: 0.7729205318491033
User 45264 does not improve AUC. Reverting changes.
Training on augumented user 45721 24/50 current_auc = 0.773397237682952
User 45721 AUC after training: 0.7727272727272727
User 45721 does not improve AUC. Reverting changes.
Training on augumented user 123531 25/50 current_auc = 0.773397237682952
User 123531 AUC after training: 0.7730107194392909
User 123531 does not improve AUC. Reverting changes.
Training on augumented user 29754 26/50 current_auc = 0.773397237682952
User 29754 AUC after training: 0.7731395588538446
User 29754 does not improve AUC. Reverting changes.
Training on augumented user 8800 27/50 current_auc = 0.773397237682952
User 8800 AUC after training: 0.7730880230880232
User 8800 does not improve AUC. Reverting changes.
Training on augumented user 18160 28/50 current_auc = 0.773397237682952
User 18160 AUC after training: 0.7731910946196661
User 18160 does not improve AUC. Reverting changes.
Training on augumented user 88807 29/50 current_auc = 0.773397237682952
User 88807 AUC after training: 0.7731137909709338
User 88807 does not improve AUC. Reverting changes.
Training on augumented user 1297 30/50 current_auc = 0.773397237682952
User 1297 AUC after training: 0.7729978354978355
User 1297 does not improve AUC. Reverting changes.
Training on augumented user 91395 31/50 current_auc = 0.773397237682952
User 91395 AUC after training: 0.7730364873222016
User 91395 does not improve AUC. Reverting changes.
Training on augumented user 106434 32/50 current_auc = 0.773397237682952
User 106434 AUC after training: 0.773049371263657
User 106434 does not improve AUC. Reverting changes.
Training on augumented user 16822 33/50 current_auc = 0.773397237682952
User 16822 AUC after training: 0.7730622552051124
User 16822 does not improve AUC. Reverting changes.
Training on augumented user 4990 34/50 current_auc = 0.773397237682952
User 4990 AUC after training: 0.7732426303854876
User 4990 does not improve AUC. Reverting changes.
Training on augumented user 109521 35/50 current_auc = 0.773397237682952
User 109521 AUC after training: 0.7729720676149248
User 109521 does not improve AUC. Reverting changes.
Training on augumented user 88812 36/50 current_auc = 0.773397237682952
User 88812 AUC after training: 0.772804576376005
User 88812 does not improve AUC. Reverting changes.
Training on augumented user 17279 37/50 current_auc = 0.773397237682952
User 17279 AUC after training: 0.7734487734487735
User 17279 improves AUC. Keeping the model.
Training on augumented user 119909 38/50 current_auc = 0.7734487734487735
User 119909 AUC after training: 0.7732683982683983
User 119909 does not improve AUC. Reverting changes.
Training on augumented user 4243 39/50 current_auc = 0.7734487734487735
User 4243 AUC after training: 0.772804576376005
User 4243 does not improve AUC. Reverting changes.
Training on augumented user 10121 40/50 current_auc = 0.7734487734487735
User 10121 AUC after training: 0.7734616573902289
User 10121 improves AUC. Keeping the model.
Training on augumented user 45226 41/50 current_auc = 0.7734616573902289
User 45226 AUC after training: 0.7734616573902289
User 45226 does not improve AUC. Reverting changes.
Training on augumented user 3252 42/50 current_auc = 0.7734616573902289
User 3252 AUC after training: 0.7737064522778808
User 3252 improves AUC. Keeping the model.
Training on augumented user 124440 43/50 current_auc = 0.7737064522778808
User 124440 AUC after training: 0.7733457019171306
User 124440 does not improve AUC. Reverting changes.
Training on augumented user 116460 44/50 current_auc = 0.7737064522778808
User 116460 AUC after training: 0.7731653267367554
User 116460 does not improve AUC. Reverting changes.
Training on augumented user 129851 45/50 current_auc = 0.7737064522778808
User 129851 AUC after training: 0.773049371263657
User 129851 does not improve AUC. Reverting changes.
Training on augumented user 32350 46/50 current_auc = 0.7737064522778808
User 32350 AUC after training: 0.7738868274582561
User 32350 improves AUC. Keeping the model.
Training on augumented user 93684 47/50 current_auc = 0.7738868274582561
User 93684 AUC after training: 0.7737322201607916
User 93684 does not improve AUC. Reverting changes.
Training on augumented user 126006 48/50 current_auc = 0.7738868274582561
User 126006 AUC after training: 0.773989898989899
User 126006 improves AUC. Keeping the model.
Training on augumented user 22443 49/50 current_auc = 0.773989898989899
User 22443 AUC after training: 0.7733972376829519
User 22443 does not improve AUC. Reverting changes.
[2024-12-02 19:13:08.146239] start test user 128258 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:08.620953] start test user 128258 175/567 recall augumented users by random, augumented_users = [60408, 101126, 46654, 4937, 71938, 16962, 126966, 39977, 128109, 110323, 37491, 70769, 102511, 122397, 33150, 89002, 109666, 55660, 98455, 50802, 67303, 91996, 103935, 87188, 59803, 19538, 28821, 46413, 44906, 63506, 126396, 44970, 20620, 63224, 120544, 117518, 127859, 77282, 60234, 46137, 46307, 85436, 136253, 131127, 29493, 43717, 135151, 91541, 71303, 129182]
[2024-12-02 19:13:08.641791] user = 128258 Cloud 175/567
[2024-12-02 19:13:08.701909] user = 128258 Local 175/567
[2024-12-02 19:13:09.175144] user = 128258 Local+ 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:11.839207] user = 128258 MPDA- 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5502996022521824
Training on augumented user 60408 0/50 current_auc = 0.5502996022521824
User 60408 AUC after training: 0.5499638411074952
User 60408 does not improve AUC. Reverting changes.
Training on augumented user 101126 1/50 current_auc = 0.5502996022521824
User 101126 AUC after training: 0.550325430032543
User 101126 improves AUC. Keeping the model.
Training on augumented user 46654 2/50 current_auc = 0.550325430032543
User 46654 AUC after training: 0.5508355286946639
User 46654 improves AUC. Keeping the model.
Training on augumented user 4937 3/50 current_auc = 0.5508355286946639
User 4937 AUC after training: 0.5504158272638049
User 4937 does not improve AUC. Reverting changes.
Training on augumented user 71938 4/50 current_auc = 0.5508355286946639
User 71938 AUC after training: 0.550557880055788
User 71938 does not improve AUC. Reverting changes.
Training on augumented user 16962 5/50 current_auc = 0.5508355286946639
User 16962 AUC after training: 0.5506870189575908
User 16962 does not improve AUC. Reverting changes.
Training on augumented user 126966 6/50 current_auc = 0.5508355286946639
User 126966 AUC after training: 0.5515264218193088
User 126966 improves AUC. Keeping the model.
Training on augumented user 39977 7/50 current_auc = 0.5515264218193088
User 39977 AUC after training: 0.5511648328942611
User 39977 does not improve AUC. Reverting changes.
Training on augumented user 128109 8/50 current_auc = 0.5515264218193088
User 128109 AUC after training: 0.5517459579523736
User 128109 improves AUC. Keeping the model.
Training on augumented user 110323 9/50 current_auc = 0.5517459579523736
User 110323 AUC after training: 0.5532697969936464
User 110323 improves AUC. Keeping the model.
Training on augumented user 37491 10/50 current_auc = 0.5532697969936464
User 37491 AUC after training: 0.5533343664445478
User 37491 improves AUC. Keeping the model.
Training on augumented user 70769 11/50 current_auc = 0.5533343664445478
User 70769 AUC after training: 0.5535151609070716
User 70769 improves AUC. Keeping the model.
Training on augumented user 102511 12/50 current_auc = 0.5535151609070716
User 102511 AUC after training: 0.553528074797252
User 102511 improves AUC. Keeping the model.
Training on augumented user 122397 13/50 current_auc = 0.553528074797252
User 122397 AUC after training: 0.5536313859186941
User 122397 improves AUC. Keeping the model.
Training on augumented user 33150 14/50 current_auc = 0.5536313859186941
User 33150 AUC after training: 0.55390257761248
User 33150 improves AUC. Keeping the model.
Training on augumented user 89002 15/50 current_auc = 0.55390257761248
User 89002 AUC after training: 0.5537476109303167
User 89002 does not improve AUC. Reverting changes.
Training on augumented user 109666 16/50 current_auc = 0.55390257761248
User 109666 AUC after training: 0.5540188026241024
User 109666 improves AUC. Keeping the model.
Training on augumented user 55660 17/50 current_auc = 0.5540188026241024
User 55660 AUC after training: 0.5543416498786095
User 55660 improves AUC. Keeping the model.
Training on augumented user 98455 18/50 current_auc = 0.5543416498786095
User 98455 AUC after training: 0.5545482721214938
User 98455 improves AUC. Keeping the model.
Training on augumented user 50802 19/50 current_auc = 0.5545482721214938
User 50802 AUC after training: 0.5537863526008575
User 50802 does not improve AUC. Reverting changes.
Training on augumented user 67303 20/50 current_auc = 0.5545482721214938
User 67303 AUC after training: 0.552094632987241
User 67303 does not improve AUC. Reverting changes.
Training on augumented user 91996 21/50 current_auc = 0.5545482721214938
User 91996 AUC after training: 0.5548840332661811
User 91996 improves AUC. Keeping the model.
Training on augumented user 103935 22/50 current_auc = 0.5548840332661811
User 103935 AUC after training: 0.5549873443876233
User 103935 improves AUC. Keeping the model.
Training on augumented user 87188 23/50 current_auc = 0.5549873443876233
User 87188 AUC after training: 0.5544966165607728
User 87188 does not improve AUC. Reverting changes.
Training on augumented user 59803 24/50 current_auc = 0.5549873443876233
User 59803 AUC after training: 0.5553747610930316
User 59803 improves AUC. Keeping the model.
Training on augumented user 19538 25/50 current_auc = 0.5553747610930316
User 19538 AUC after training: 0.5549744304974431
User 19538 does not improve AUC. Reverting changes.
Training on augumented user 28821 26/50 current_auc = 0.5553747610930316
User 28821 AUC after training: 0.5548711193760009
User 28821 does not improve AUC. Reverting changes.
Training on augumented user 46413 27/50 current_auc = 0.5553747610930316
User 46413 AUC after training: 0.5552197944108683
User 46413 does not improve AUC. Reverting changes.
Training on augumented user 44906 28/50 current_auc = 0.5553747610930316
User 44906 AUC after training: 0.5549873443876233
User 44906 does not improve AUC. Reverting changes.
Training on augumented user 63506 29/50 current_auc = 0.5553747610930316
User 63506 AUC after training: 0.5552327083010486
User 63506 does not improve AUC. Reverting changes.
Training on augumented user 126396 30/50 current_auc = 0.5553747610930316
User 126396 AUC after training: 0.554741980474198
User 126396 does not improve AUC. Reverting changes.
Training on augumented user 44970 31/50 current_auc = 0.5553747610930316
User 44970 AUC after training: 0.5525337052533705
User 44970 does not improve AUC. Reverting changes.
Training on augumented user 20620 32/50 current_auc = 0.5553747610930316
User 20620 AUC after training: 0.5543933054393306
User 20620 does not improve AUC. Reverting changes.
Training on augumented user 63224 33/50 current_auc = 0.5553747610930316
User 63224 AUC after training: 0.5532181414329252
User 63224 does not improve AUC. Reverting changes.
Training on augumented user 120544 34/50 current_auc = 0.5553747610930316
User 120544 AUC after training: 0.5545482721214938
User 120544 does not improve AUC. Reverting changes.
Training on augumented user 117518 35/50 current_auc = 0.5553747610930316
User 117518 AUC after training: 0.5556007541711866
User 117518 improves AUC. Keeping the model.
Training on augumented user 127859 36/50 current_auc = 0.5556007541711866
User 127859 AUC after training: 0.555710522237719
User 127859 improves AUC. Keeping the model.
Training on augumented user 77282 37/50 current_auc = 0.555710522237719
User 77282 AUC after training: 0.555439330543933
User 77282 does not improve AUC. Reverting changes.
Training on augumented user 60234 38/50 current_auc = 0.555710522237719
User 60234 AUC after training: 0.5553101916421302
User 60234 does not improve AUC. Reverting changes.
Training on augumented user 46137 39/50 current_auc = 0.555710522237719
User 46137 AUC after training: 0.5535603595227025
User 46137 does not improve AUC. Reverting changes.
Training on augumented user 46307 40/50 current_auc = 0.555710522237719
User 46307 AUC after training: 0.5542899943178883
User 46307 does not improve AUC. Reverting changes.
Training on augumented user 85436 41/50 current_auc = 0.555710522237719
User 85436 AUC after training: 0.5537605248204969
User 85436 does not improve AUC. Reverting changes.
Training on augumented user 136253 42/50 current_auc = 0.555710522237719
User 136253 AUC after training: 0.5557621777984401
User 136253 improves AUC. Keeping the model.
Training on augumented user 131127 43/50 current_auc = 0.5557621777984401
User 131127 AUC after training: 0.556085025052947
User 131127 improves AUC. Keeping the model.
Training on augumented user 29493 44/50 current_auc = 0.556085025052947
User 29493 AUC after training: 0.555529727775195
User 29493 does not improve AUC. Reverting changes.
Training on augumented user 43717 45/50 current_auc = 0.556085025052947
User 43717 AUC after training: 0.555529727775195
User 43717 does not improve AUC. Reverting changes.
Training on augumented user 135151 46/50 current_auc = 0.556085025052947
User 135151 AUC after training: 0.5555168138850147
User 135151 does not improve AUC. Reverting changes.
Training on augumented user 91541 47/50 current_auc = 0.556085025052947
User 91541 AUC after training: 0.5558913167002427
User 91541 does not improve AUC. Reverting changes.
Training on augumented user 71303 48/50 current_auc = 0.556085025052947
User 71303 AUC after training: 0.5560591972725863
User 71303 does not improve AUC. Reverting changes.
Training on augumented user 129182 49/50 current_auc = 0.556085025052947
User 129182 AUC after training: 0.5556717805671781
User 129182 does not improve AUC. Reverting changes.
[2024-12-02 19:13:40.962748] start test user 128263 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:41.670721] start test user 128263 176/567 recall augumented users by random, augumented_users = [37054, 60595, 107318, 94505, 116755, 38828, 113578, 5953, 119650, 82737, 115937, 45188, 7052, 57869, 18207, 136118, 30836, 42068, 136882, 79719, 88813, 51949, 97812, 12752, 8809, 112250, 56551, 68728, 13019, 137991, 85375, 38051, 46839, 35879, 87212, 4377, 38804, 53871, 123036, 69251, 20429, 48305, 125452, 72838, 27245, 9849, 95022, 59992, 39988, 28675]
[2024-12-02 19:13:41.689432] user = 128263 Cloud 176/567
[2024-12-02 19:13:41.718620] user = 128263 Local 176/567
[2024-12-02 19:13:41.858834] user = 128263 Local+ 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:44.606426] user = 128263 MPDA- 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6710758377425045
Training on augumented user 37054 0/50 current_auc = 0.6710758377425045
User 37054 AUC after training: 0.6719576719576719
User 37054 improves AUC. Keeping the model.
Training on augumented user 60595 1/50 current_auc = 0.6719576719576719
User 60595 AUC after training: 0.6721340388007055
User 60595 improves AUC. Keeping the model.
Training on augumented user 107318 2/50 current_auc = 0.6721340388007055
User 107318 AUC after training: 0.6717813051146384
User 107318 does not improve AUC. Reverting changes.
Training on augumented user 94505 3/50 current_auc = 0.6721340388007055
User 94505 AUC after training: 0.672310405643739
User 94505 improves AUC. Keeping the model.
Training on augumented user 116755 4/50 current_auc = 0.672310405643739
User 116755 AUC after training: 0.6721340388007055
User 116755 does not improve AUC. Reverting changes.
Training on augumented user 38828 5/50 current_auc = 0.672310405643739
User 38828 AUC after training: 0.6724867724867725
User 38828 improves AUC. Keeping the model.
Training on augumented user 113578 6/50 current_auc = 0.6724867724867725
User 113578 AUC after training: 0.6724867724867725
User 113578 does not improve AUC. Reverting changes.
Training on augumented user 5953 7/50 current_auc = 0.6724867724867725
User 5953 AUC after training: 0.6726631393298059
User 5953 improves AUC. Keeping the model.
Training on augumented user 119650 8/50 current_auc = 0.6726631393298059
User 119650 AUC after training: 0.672310405643739
User 119650 does not improve AUC. Reverting changes.
Training on augumented user 82737 9/50 current_auc = 0.6726631393298059
User 82737 AUC after training: 0.6724867724867725
User 82737 does not improve AUC. Reverting changes.
Training on augumented user 115937 10/50 current_auc = 0.6726631393298059
User 115937 AUC after training: 0.672310405643739
User 115937 does not improve AUC. Reverting changes.
Training on augumented user 45188 11/50 current_auc = 0.6726631393298059
User 45188 AUC after training: 0.6726631393298059
User 45188 does not improve AUC. Reverting changes.
Training on augumented user 7052 12/50 current_auc = 0.6726631393298059
User 7052 AUC after training: 0.6719576719576719
User 7052 does not improve AUC. Reverting changes.
Training on augumented user 57869 13/50 current_auc = 0.6726631393298059
User 57869 AUC after training: 0.6728395061728396
User 57869 improves AUC. Keeping the model.
Training on augumented user 18207 14/50 current_auc = 0.6728395061728396
User 18207 AUC after training: 0.672663139329806
User 18207 does not improve AUC. Reverting changes.
Training on augumented user 136118 15/50 current_auc = 0.6728395061728396
User 136118 AUC after training: 0.6726631393298059
User 136118 does not improve AUC. Reverting changes.
Training on augumented user 30836 16/50 current_auc = 0.6728395061728396
User 30836 AUC after training: 0.6726631393298059
User 30836 does not improve AUC. Reverting changes.
Training on augumented user 42068 17/50 current_auc = 0.6728395061728396
User 42068 AUC after training: 0.672310405643739
User 42068 does not improve AUC. Reverting changes.
Training on augumented user 136882 18/50 current_auc = 0.6728395061728396
User 136882 AUC after training: 0.6728395061728395
User 136882 does not improve AUC. Reverting changes.
Training on augumented user 79719 19/50 current_auc = 0.6728395061728396
User 79719 AUC after training: 0.672310405643739
User 79719 does not improve AUC. Reverting changes.
Training on augumented user 88813 20/50 current_auc = 0.6728395061728396
User 88813 AUC after training: 0.6714285714285714
User 88813 does not improve AUC. Reverting changes.
Training on augumented user 51949 21/50 current_auc = 0.6728395061728396
User 51949 AUC after training: 0.6717813051146384
User 51949 does not improve AUC. Reverting changes.
Training on augumented user 97812 22/50 current_auc = 0.6728395061728396
User 97812 AUC after training: 0.6726631393298059
User 97812 does not improve AUC. Reverting changes.
Training on augumented user 12752 23/50 current_auc = 0.6728395061728396
User 12752 AUC after training: 0.6714285714285715
User 12752 does not improve AUC. Reverting changes.
Training on augumented user 8809 24/50 current_auc = 0.6728395061728396
User 8809 AUC after training: 0.672310405643739
User 8809 does not improve AUC. Reverting changes.
Training on augumented user 112250 25/50 current_auc = 0.6728395061728396
User 112250 AUC after training: 0.672310405643739
User 112250 does not improve AUC. Reverting changes.
Training on augumented user 56551 26/50 current_auc = 0.6728395061728396
User 56551 AUC after training: 0.6726631393298059
User 56551 does not improve AUC. Reverting changes.
Training on augumented user 68728 27/50 current_auc = 0.6728395061728396
User 68728 AUC after training: 0.6724867724867725
User 68728 does not improve AUC. Reverting changes.
Training on augumented user 13019 28/50 current_auc = 0.6728395061728396
User 13019 AUC after training: 0.6724867724867725
User 13019 does not improve AUC. Reverting changes.
Training on augumented user 137991 29/50 current_auc = 0.6728395061728396
User 137991 AUC after training: 0.6721340388007054
User 137991 does not improve AUC. Reverting changes.
Training on augumented user 85375 30/50 current_auc = 0.6728395061728396
User 85375 AUC after training: 0.672310405643739
User 85375 does not improve AUC. Reverting changes.
Training on augumented user 38051 31/50 current_auc = 0.6728395061728396
User 38051 AUC after training: 0.6726631393298059
User 38051 does not improve AUC. Reverting changes.
Training on augumented user 46839 32/50 current_auc = 0.6728395061728396
User 46839 AUC after training: 0.6726631393298059
User 46839 does not improve AUC. Reverting changes.
Training on augumented user 35879 33/50 current_auc = 0.6728395061728396
User 35879 AUC after training: 0.6724867724867725
User 35879 does not improve AUC. Reverting changes.
Training on augumented user 87212 34/50 current_auc = 0.6728395061728396
User 87212 AUC after training: 0.672310405643739
User 87212 does not improve AUC. Reverting changes.
Training on augumented user 4377 35/50 current_auc = 0.6728395061728396
User 4377 AUC after training: 0.6730158730158731
User 4377 improves AUC. Keeping the model.
Training on augumented user 38804 36/50 current_auc = 0.6730158730158731
User 38804 AUC after training: 0.6731922398589065
User 38804 improves AUC. Keeping the model.
Training on augumented user 53871 37/50 current_auc = 0.6731922398589065
User 53871 AUC after training: 0.6728395061728395
User 53871 does not improve AUC. Reverting changes.
Training on augumented user 123036 38/50 current_auc = 0.6731922398589065
User 123036 AUC after training: 0.67336860670194
User 123036 improves AUC. Keeping the model.
Training on augumented user 69251 39/50 current_auc = 0.67336860670194
User 69251 AUC after training: 0.67336860670194
User 69251 does not improve AUC. Reverting changes.
Training on augumented user 20429 40/50 current_auc = 0.67336860670194
User 20429 AUC after training: 0.67336860670194
User 20429 does not improve AUC. Reverting changes.
Training on augumented user 48305 41/50 current_auc = 0.67336860670194
User 48305 AUC after training: 0.6735449735449736
User 48305 improves AUC. Keeping the model.
Training on augumented user 125452 42/50 current_auc = 0.6735449735449736
User 125452 AUC after training: 0.6731922398589065
User 125452 does not improve AUC. Reverting changes.
Training on augumented user 72838 43/50 current_auc = 0.6735449735449736
User 72838 AUC after training: 0.6791887125220458
User 72838 improves AUC. Keeping the model.
Training on augumented user 27245 44/50 current_auc = 0.6791887125220458
User 27245 AUC after training: 0.6788359788359788
User 27245 does not improve AUC. Reverting changes.
Training on augumented user 9849 45/50 current_auc = 0.6791887125220458
User 9849 AUC after training: 0.6804232804232804
User 9849 improves AUC. Keeping the model.
Training on augumented user 95022 46/50 current_auc = 0.6804232804232804
User 95022 AUC after training: 0.6798941798941799
User 95022 does not improve AUC. Reverting changes.
Training on augumented user 59992 47/50 current_auc = 0.6804232804232804
User 59992 AUC after training: 0.680599647266314
User 59992 improves AUC. Keeping the model.
Training on augumented user 39988 48/50 current_auc = 0.680599647266314
User 39988 AUC after training: 0.6816578483245149
User 39988 improves AUC. Keeping the model.
Training on augumented user 28675 49/50 current_auc = 0.6816578483245149
User 28675 AUC after training: 0.681657848324515
User 28675 improves AUC. Keeping the model.
[2024-12-02 19:14:10.905085] start test user 128277 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:11.363935] start test user 128277 177/567 recall augumented users by random, augumented_users = [93995, 41550, 92538, 96829, 65389, 108515, 1863, 20962, 51203, 122267, 72328, 81992, 123212, 59874, 20089, 16530, 24982, 568, 14011, 32295, 116025, 121853, 60414, 135550, 112599, 51205, 108427, 114954, 12246, 76184, 134988, 54456, 43531, 7967, 6682, 84388, 70138, 100511, 11596, 52295, 60050, 102927, 27039, 55138, 8720, 7368, 101228, 60649, 115909, 95210]
[2024-12-02 19:14:11.379174] user = 128277 Cloud 177/567
[2024-12-02 19:14:11.409058] user = 128277 Local 177/567
[2024-12-02 19:14:11.441712] user = 128277 Local+ 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:13.294993] user = 128277 MPDA- 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.544
Training on augumented user 93995 0/50 current_auc = 0.544
User 93995 AUC after training: 0.5422857142857143
User 93995 does not improve AUC. Reverting changes.
Training on augumented user 41550 1/50 current_auc = 0.544
User 41550 AUC after training: 0.55
User 41550 improves AUC. Keeping the model.
Training on augumented user 92538 2/50 current_auc = 0.55
User 92538 AUC after training: 0.5519999999999999
User 92538 improves AUC. Keeping the model.
Training on augumented user 96829 3/50 current_auc = 0.5519999999999999
User 96829 AUC after training: 0.5534285714285714
User 96829 improves AUC. Keeping the model.
Training on augumented user 65389 4/50 current_auc = 0.5534285714285714
User 65389 AUC after training: 0.5539999999999999
User 65389 improves AUC. Keeping the model.
Training on augumented user 108515 5/50 current_auc = 0.5539999999999999
User 108515 AUC after training: 0.5528571428571429
User 108515 does not improve AUC. Reverting changes.
Training on augumented user 1863 6/50 current_auc = 0.5539999999999999
User 1863 AUC after training: 0.552
User 1863 does not improve AUC. Reverting changes.
Training on augumented user 20962 7/50 current_auc = 0.5539999999999999
User 20962 AUC after training: 0.5539999999999999
User 20962 does not improve AUC. Reverting changes.
Training on augumented user 51203 8/50 current_auc = 0.5539999999999999
User 51203 AUC after training: 0.5542857142857143
User 51203 improves AUC. Keeping the model.
Training on augumented user 122267 9/50 current_auc = 0.5542857142857143
User 122267 AUC after training: 0.546
User 122267 does not improve AUC. Reverting changes.
Training on augumented user 72328 10/50 current_auc = 0.5542857142857143
User 72328 AUC after training: 0.5525714285714286
User 72328 does not improve AUC. Reverting changes.
Training on augumented user 81992 11/50 current_auc = 0.5542857142857143
User 81992 AUC after training: 0.5531428571428572
User 81992 does not improve AUC. Reverting changes.
Training on augumented user 123212 12/50 current_auc = 0.5542857142857143
User 123212 AUC after training: 0.554
User 123212 does not improve AUC. Reverting changes.
Training on augumented user 59874 13/50 current_auc = 0.5542857142857143
User 59874 AUC after training: 0.5534285714285715
User 59874 does not improve AUC. Reverting changes.
Training on augumented user 20089 14/50 current_auc = 0.5542857142857143
User 20089 AUC after training: 0.5531428571428572
User 20089 does not improve AUC. Reverting changes.
Training on augumented user 16530 15/50 current_auc = 0.5542857142857143
User 16530 AUC after training: 0.554
User 16530 does not improve AUC. Reverting changes.
Training on augumented user 24982 16/50 current_auc = 0.5542857142857143
User 24982 AUC after training: 0.5522857142857143
User 24982 does not improve AUC. Reverting changes.
Training on augumented user 568 17/50 current_auc = 0.5542857142857143
User 568 AUC after training: 0.5522857142857143
User 568 does not improve AUC. Reverting changes.
Training on augumented user 14011 18/50 current_auc = 0.5542857142857143
User 14011 AUC after training: 0.5525714285714285
User 14011 does not improve AUC. Reverting changes.
Training on augumented user 32295 19/50 current_auc = 0.5542857142857143
User 32295 AUC after training: 0.5517142857142858
User 32295 does not improve AUC. Reverting changes.
Training on augumented user 116025 20/50 current_auc = 0.5542857142857143
User 116025 AUC after training: 0.5528571428571428
User 116025 does not improve AUC. Reverting changes.
Training on augumented user 121853 21/50 current_auc = 0.5542857142857143
User 121853 AUC after training: 0.5491428571428572
User 121853 does not improve AUC. Reverting changes.
Training on augumented user 60414 22/50 current_auc = 0.5542857142857143
User 60414 AUC after training: 0.5514285714285714
User 60414 does not improve AUC. Reverting changes.
Training on augumented user 135550 23/50 current_auc = 0.5542857142857143
User 135550 AUC after training: 0.56
User 135550 improves AUC. Keeping the model.
Training on augumented user 112599 24/50 current_auc = 0.56
User 112599 AUC after training: 0.5591428571428572
User 112599 does not improve AUC. Reverting changes.
Training on augumented user 51205 25/50 current_auc = 0.56
User 51205 AUC after training: 0.5571428571428572
User 51205 does not improve AUC. Reverting changes.
Training on augumented user 108427 26/50 current_auc = 0.56
User 108427 AUC after training: 0.5557142857142857
User 108427 does not improve AUC. Reverting changes.
Training on augumented user 114954 27/50 current_auc = 0.56
User 114954 AUC after training: 0.56
User 114954 does not improve AUC. Reverting changes.
Training on augumented user 12246 28/50 current_auc = 0.56
User 12246 AUC after training: 0.558
User 12246 does not improve AUC. Reverting changes.
Training on augumented user 76184 29/50 current_auc = 0.56
User 76184 AUC after training: 0.5608571428571429
User 76184 improves AUC. Keeping the model.
Training on augumented user 134988 30/50 current_auc = 0.5608571428571429
User 134988 AUC after training: 0.5591428571428572
User 134988 does not improve AUC. Reverting changes.
Training on augumented user 54456 31/50 current_auc = 0.5608571428571429
User 54456 AUC after training: 0.5508571428571429
User 54456 does not improve AUC. Reverting changes.
Training on augumented user 43531 32/50 current_auc = 0.5608571428571429
User 43531 AUC after training: 0.556
User 43531 does not improve AUC. Reverting changes.
Training on augumented user 7967 33/50 current_auc = 0.5608571428571429
User 7967 AUC after training: 0.56
User 7967 does not improve AUC. Reverting changes.
Training on augumented user 6682 34/50 current_auc = 0.5608571428571429
User 6682 AUC after training: 0.5591428571428572
User 6682 does not improve AUC. Reverting changes.
Training on augumented user 84388 35/50 current_auc = 0.5608571428571429
User 84388 AUC after training: 0.5564285714285715
User 84388 does not improve AUC. Reverting changes.
Training on augumented user 70138 36/50 current_auc = 0.5608571428571429
User 70138 AUC after training: 0.5611428571428572
User 70138 improves AUC. Keeping the model.
Training on augumented user 100511 37/50 current_auc = 0.5611428571428572
User 100511 AUC after training: 0.5608571428571428
User 100511 does not improve AUC. Reverting changes.
Training on augumented user 11596 38/50 current_auc = 0.5611428571428572
User 11596 AUC after training: 0.5640000000000001
User 11596 improves AUC. Keeping the model.
Training on augumented user 52295 39/50 current_auc = 0.5640000000000001
User 52295 AUC after training: 0.562
User 52295 does not improve AUC. Reverting changes.
Training on augumented user 60050 40/50 current_auc = 0.5640000000000001
User 60050 AUC after training: 0.5657142857142856
User 60050 improves AUC. Keeping the model.
Training on augumented user 102927 41/50 current_auc = 0.5657142857142856
User 102927 AUC after training: 0.56
User 102927 does not improve AUC. Reverting changes.
Training on augumented user 27039 42/50 current_auc = 0.5657142857142856
User 27039 AUC after training: 0.5660000000000001
User 27039 improves AUC. Keeping the model.
Training on augumented user 55138 43/50 current_auc = 0.5660000000000001
User 55138 AUC after training: 0.5657142857142856
User 55138 does not improve AUC. Reverting changes.
Training on augumented user 8720 44/50 current_auc = 0.5660000000000001
User 8720 AUC after training: 0.5657142857142856
User 8720 does not improve AUC. Reverting changes.
Training on augumented user 7368 45/50 current_auc = 0.5660000000000001
User 7368 AUC after training: 0.5654285714285714
User 7368 does not improve AUC. Reverting changes.
Training on augumented user 101228 46/50 current_auc = 0.5660000000000001
User 101228 AUC after training: 0.5660000000000001
User 101228 does not improve AUC. Reverting changes.
Training on augumented user 60649 47/50 current_auc = 0.5660000000000001
User 60649 AUC after training: 0.5654285714285714
User 60649 does not improve AUC. Reverting changes.
Training on augumented user 115909 48/50 current_auc = 0.5660000000000001
User 115909 AUC after training: 0.5645714285714285
User 115909 does not improve AUC. Reverting changes.
Training on augumented user 95210 49/50 current_auc = 0.5660000000000001
User 95210 AUC after training: 0.5671428571428572
User 95210 improves AUC. Keeping the model.
[2024-12-02 19:14:45.571675] start test user 128285 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:46.193142] start test user 128285 178/567 recall augumented users by random, augumented_users = [120850, 119575, 110338, 68940, 103286, 84346, 88454, 80301, 90136, 122178, 76305, 26462, 73251, 116359, 123879, 109599, 124326, 54792, 17283, 46580, 8409, 51095, 63335, 91112, 137370, 42945, 66799, 109704, 120895, 13221, 48913, 126155, 40881, 23282, 76525, 134474, 40868, 6700, 113280, 83869, 118366, 45702, 103966, 66265, 73186, 4172, 90867, 120771, 83904, 20179]
[2024-12-02 19:14:46.209048] user = 128285 Cloud 178/567
[2024-12-02 19:14:46.232485] user = 128285 Local 178/567
[2024-12-02 19:14:46.338400] user = 128285 Local+ 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:49.117541] user = 128285 MPDA- 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6351851851851853
Training on augumented user 120850 0/50 current_auc = 0.6351851851851853
User 120850 AUC after training: 0.6349537037037036
User 120850 does not improve AUC. Reverting changes.
Training on augumented user 119575 1/50 current_auc = 0.6351851851851853
User 119575 AUC after training: 0.6355902777777778
User 119575 improves AUC. Keeping the model.
Training on augumented user 110338 2/50 current_auc = 0.6355902777777778
User 110338 AUC after training: 0.6351851851851851
User 110338 does not improve AUC. Reverting changes.
Training on augumented user 68940 3/50 current_auc = 0.6355902777777778
User 68940 AUC after training: 0.6359953703703703
User 68940 improves AUC. Keeping the model.
Training on augumented user 103286 4/50 current_auc = 0.6359953703703703
User 103286 AUC after training: 0.6357638888888888
User 103286 does not improve AUC. Reverting changes.
Training on augumented user 84346 5/50 current_auc = 0.6359953703703703
User 84346 AUC after training: 0.6358217592592592
User 84346 does not improve AUC. Reverting changes.
Training on augumented user 88454 6/50 current_auc = 0.6359953703703703
User 88454 AUC after training: 0.6360532407407407
User 88454 improves AUC. Keeping the model.
Training on augumented user 80301 7/50 current_auc = 0.6360532407407407
User 80301 AUC after training: 0.6361111111111111
User 80301 improves AUC. Keeping the model.
Training on augumented user 90136 8/50 current_auc = 0.6361111111111111
User 90136 AUC after training: 0.6359375
User 90136 does not improve AUC. Reverting changes.
Training on augumented user 122178 9/50 current_auc = 0.6361111111111111
User 122178 AUC after training: 0.6365162037037037
User 122178 improves AUC. Keeping the model.
Training on augumented user 76305 10/50 current_auc = 0.6365162037037037
User 76305 AUC after training: 0.6363425925925926
User 76305 does not improve AUC. Reverting changes.
Training on augumented user 26462 11/50 current_auc = 0.6365162037037037
User 26462 AUC after training: 0.6354166666666667
User 26462 does not improve AUC. Reverting changes.
Training on augumented user 73251 12/50 current_auc = 0.6365162037037037
User 73251 AUC after training: 0.6367766203703703
User 73251 improves AUC. Keeping the model.
Training on augumented user 116359 13/50 current_auc = 0.6367766203703703
User 116359 AUC after training: 0.63671875
User 116359 does not improve AUC. Reverting changes.
Training on augumented user 123879 14/50 current_auc = 0.6367766203703703
User 123879 AUC after training: 0.636255787037037
User 123879 does not improve AUC. Reverting changes.
Training on augumented user 109599 15/50 current_auc = 0.6367766203703703
User 109599 AUC after training: 0.6371527777777779
User 109599 improves AUC. Keeping the model.
Training on augumented user 124326 16/50 current_auc = 0.6371527777777779
User 124326 AUC after training: 0.6359375
User 124326 does not improve AUC. Reverting changes.
Training on augumented user 54792 17/50 current_auc = 0.6371527777777779
User 54792 AUC after training: 0.6371527777777778
User 54792 does not improve AUC. Reverting changes.
Training on augumented user 17283 18/50 current_auc = 0.6371527777777779
User 17283 AUC after training: 0.6369212962962962
User 17283 does not improve AUC. Reverting changes.
Training on augumented user 46580 19/50 current_auc = 0.6371527777777779
User 46580 AUC after training: 0.6368923611111111
User 46580 does not improve AUC. Reverting changes.
Training on augumented user 8409 20/50 current_auc = 0.6371527777777779
User 8409 AUC after training: 0.6372974537037038
User 8409 improves AUC. Keeping the model.
Training on augumented user 51095 21/50 current_auc = 0.6372974537037038
User 51095 AUC after training: 0.6373842592592593
User 51095 improves AUC. Keeping the model.
Training on augumented user 63335 22/50 current_auc = 0.6373842592592593
User 63335 AUC after training: 0.637326388888889
User 63335 does not improve AUC. Reverting changes.
Training on augumented user 91112 23/50 current_auc = 0.6373842592592593
User 91112 AUC after training: 0.6371817129629629
User 91112 does not improve AUC. Reverting changes.
Training on augumented user 137370 24/50 current_auc = 0.6373842592592593
User 137370 AUC after training: 0.6371527777777778
User 137370 does not improve AUC. Reverting changes.
Training on augumented user 42945 25/50 current_auc = 0.6373842592592593
User 42945 AUC after training: 0.636892361111111
User 42945 does not improve AUC. Reverting changes.
Training on augumented user 66799 26/50 current_auc = 0.6373842592592593
User 66799 AUC after training: 0.6375868055555556
User 66799 improves AUC. Keeping the model.
Training on augumented user 109704 27/50 current_auc = 0.6375868055555556
User 109704 AUC after training: 0.6357060185185185
User 109704 does not improve AUC. Reverting changes.
Training on augumented user 120895 28/50 current_auc = 0.6375868055555556
User 120895 AUC after training: 0.6375
User 120895 does not improve AUC. Reverting changes.
Training on augumented user 13221 29/50 current_auc = 0.6375868055555556
User 13221 AUC after training: 0.6378472222222222
User 13221 improves AUC. Keeping the model.
Training on augumented user 48913 30/50 current_auc = 0.6378472222222222
User 48913 AUC after training: 0.6375000000000001
User 48913 does not improve AUC. Reverting changes.
Training on augumented user 126155 31/50 current_auc = 0.6378472222222222
User 126155 AUC after training: 0.6373842592592592
User 126155 does not improve AUC. Reverting changes.
Training on augumented user 40881 32/50 current_auc = 0.6378472222222222
User 40881 AUC after training: 0.637934027777778
User 40881 improves AUC. Keeping the model.
Training on augumented user 23282 33/50 current_auc = 0.637934027777778
User 23282 AUC after training: 0.6379629629629631
User 23282 improves AUC. Keeping the model.
Training on augumented user 76525 34/50 current_auc = 0.6379629629629631
User 76525 AUC after training: 0.6383391203703703
User 76525 improves AUC. Keeping the model.
Training on augumented user 134474 35/50 current_auc = 0.6383391203703703
User 134474 AUC after training: 0.63828125
User 134474 does not improve AUC. Reverting changes.
Training on augumented user 40868 36/50 current_auc = 0.6383391203703703
User 40868 AUC after training: 0.6388020833333334
User 40868 improves AUC. Keeping the model.
Training on augumented user 6700 37/50 current_auc = 0.6388020833333334
User 6700 AUC after training: 0.6388599537037036
User 6700 improves AUC. Keeping the model.
Training on augumented user 113280 38/50 current_auc = 0.6388599537037036
User 113280 AUC after training: 0.6362268518518519
User 113280 does not improve AUC. Reverting changes.
Training on augumented user 83869 39/50 current_auc = 0.6388599537037036
User 83869 AUC after training: 0.6381944444444445
User 83869 does not improve AUC. Reverting changes.
Training on augumented user 118366 40/50 current_auc = 0.6388599537037036
User 118366 AUC after training: 0.6377314814814815
User 118366 does not improve AUC. Reverting changes.
Training on augumented user 45702 41/50 current_auc = 0.6388599537037036
User 45702 AUC after training: 0.637991898148148
User 45702 does not improve AUC. Reverting changes.
Training on augumented user 103966 42/50 current_auc = 0.6388599537037036
User 103966 AUC after training: 0.6381944444444444
User 103966 does not improve AUC. Reverting changes.
Training on augumented user 66265 43/50 current_auc = 0.6388599537037036
User 66265 AUC after training: 0.6383101851851851
User 66265 does not improve AUC. Reverting changes.
Training on augumented user 73186 44/50 current_auc = 0.6388599537037036
User 73186 AUC after training: 0.638744212962963
User 73186 does not improve AUC. Reverting changes.
Training on augumented user 4172 45/50 current_auc = 0.6388599537037036
User 4172 AUC after training: 0.6376157407407407
User 4172 does not improve AUC. Reverting changes.
Training on augumented user 90867 46/50 current_auc = 0.6388599537037036
User 90867 AUC after training: 0.6379050925925926
User 90867 does not improve AUC. Reverting changes.
Training on augumented user 120771 47/50 current_auc = 0.6388599537037036
User 120771 AUC after training: 0.6383680555555556
User 120771 does not improve AUC. Reverting changes.
Training on augumented user 83904 48/50 current_auc = 0.6388599537037036
User 83904 AUC after training: 0.6383969907407409
User 83904 does not improve AUC. Reverting changes.
Training on augumented user 20179 49/50 current_auc = 0.6388599537037036
User 20179 AUC after training: 0.6377893518518518
User 20179 does not improve AUC. Reverting changes.
[2024-12-02 19:15:14.588216] start test user 128309 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:14.987719] start test user 128309 179/567 recall augumented users by random, augumented_users = [94251, 98061, 128630, 96668, 108436, 114885, 17174, 55228, 94519, 51666, 110290, 123078, 51635, 41549, 101305, 62771, 5794, 99171, 108829, 101922, 55384, 29754, 77480, 101872, 99081, 42860, 104027, 93280, 67899, 50765, 43998, 35500, 95787, 115046, 99329, 129298, 129444, 45258, 46207, 28714, 124844, 9611, 110106, 65972, 89710, 44271, 20732, 137027, 2611, 107749]
[2024-12-02 19:15:15.006356] user = 128309 Cloud 179/567
[2024-12-02 19:15:15.108103] user = 128309 Local 179/567
[2024-12-02 19:15:15.386061] user = 128309 Local+ 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:18.831776] user = 128309 MPDA- 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5963069648631756
Training on augumented user 94251 0/50 current_auc = 0.5963069648631756
User 94251 AUC after training: 0.5963431977318224
User 94251 improves AUC. Keeping the model.
Training on augumented user 98061 1/50 current_auc = 0.5963431977318224
User 98061 AUC after training: 0.5964111343605352
User 98061 improves AUC. Keeping the model.
Training on augumented user 128630 2/50 current_auc = 0.5964111343605352
User 128630 AUC after training: 0.5962209118001395
User 128630 does not improve AUC. Reverting changes.
Training on augumented user 96668 3/50 current_auc = 0.5964111343605352
User 96668 AUC after training: 0.5964337799034394
User 96668 improves AUC. Keeping the model.
Training on augumented user 108436 4/50 current_auc = 0.5964337799034394
User 108436 AUC after training: 0.5963749014918884
User 108436 does not improve AUC. Reverting changes.
Training on augumented user 114885 5/50 current_auc = 0.5964337799034394
User 114885 AUC after training: 0.5963296104060798
User 114885 does not improve AUC. Reverting changes.
Training on augumented user 17174 6/50 current_auc = 0.5964337799034394
User 17174 AUC after training: 0.5960035145882588
User 17174 does not improve AUC. Reverting changes.
Training on augumented user 55228 7/50 current_auc = 0.5964337799034394
User 55228 AUC after training: 0.5964247216862777
User 55228 does not improve AUC. Reverting changes.
Training on augumented user 94519 8/50 current_auc = 0.5964337799034394
User 94519 AUC after training: 0.5961529751714268
User 94519 does not improve AUC. Reverting changes.
Training on augumented user 51666 9/50 current_auc = 0.5964337799034394
User 51666 AUC after training: 0.5963522559489841
User 51666 does not improve AUC. Reverting changes.
Training on augumented user 110290 10/50 current_auc = 0.5964337799034394
User 110290 AUC after training: 0.5964383090120203
User 110290 improves AUC. Keeping the model.
Training on augumented user 123078 11/50 current_auc = 0.5964383090120203
User 123078 AUC after training: 0.596415663469116
User 123078 does not improve AUC. Reverting changes.
Training on augumented user 51635 12/50 current_auc = 0.5964383090120203
User 51635 AUC after training: 0.5963749014918884
User 51635 does not improve AUC. Reverting changes.
Training on augumented user 41549 13/50 current_auc = 0.5964383090120203
User 41549 AUC after training: 0.5962843193202714
User 41549 does not improve AUC. Reverting changes.
Training on augumented user 101305 14/50 current_auc = 0.5964383090120203
User 101305 AUC after training: 0.5963771660461787
User 101305 does not improve AUC. Reverting changes.
Training on augumented user 62771 15/50 current_auc = 0.5964383090120203
User 62771 AUC after training: 0.5964383090120202
User 62771 does not improve AUC. Reverting changes.
Training on augumented user 5794 16/50 current_auc = 0.5964383090120203
User 5794 AUC after training: 0.596356785057565
User 5794 does not improve AUC. Reverting changes.
Training on augumented user 99171 17/50 current_auc = 0.5964383090120203
User 99171 AUC after training: 0.5957181807476652
User 99171 does not improve AUC. Reverting changes.
Training on augumented user 108829 18/50 current_auc = 0.5964383090120203
User 108829 AUC after training: 0.5963431977318224
User 108829 does not improve AUC. Reverting changes.
Training on augumented user 101922 19/50 current_auc = 0.5964383090120203
User 101922 AUC after training: 0.5963749014918883
User 101922 does not improve AUC. Reverting changes.
Training on augumented user 55384 20/50 current_auc = 0.5964383090120203
User 55384 AUC after training: 0.5963703723833075
User 55384 does not improve AUC. Reverting changes.
Training on augumented user 29754 21/50 current_auc = 0.5964383090120203
User 29754 AUC after training: 0.595962752611031
User 29754 does not improve AUC. Reverting changes.
Training on augumented user 77480 22/50 current_auc = 0.5964383090120203
User 77480 AUC after training: 0.5965198329664756
User 77480 improves AUC. Keeping the model.
Training on augumented user 101872 23/50 current_auc = 0.5965198329664756
User 101872 AUC after training: 0.596565124052284
User 101872 improves AUC. Keeping the model.
Training on augumented user 99081 24/50 current_auc = 0.596565124052284
User 99081 AUC after training: 0.5962480864516245
User 99081 does not improve AUC. Reverting changes.
Training on augumented user 42860 25/50 current_auc = 0.596565124052284
User 42860 AUC after training: 0.5967553466126797
User 42860 improves AUC. Keeping the model.
Training on augumented user 104027 26/50 current_auc = 0.5967553466126797
User 104027 AUC after training: 0.5967191137440329
User 104027 does not improve AUC. Reverting changes.
Training on augumented user 93280 27/50 current_auc = 0.5967553466126797
User 93280 AUC after training: 0.5955868365988206
User 93280 does not improve AUC. Reverting changes.
Training on augumented user 67899 28/50 current_auc = 0.5967553466126797
User 67899 AUC after training: 0.5961710916057501
User 67899 does not improve AUC. Reverting changes.
Training on augumented user 50765 29/50 current_auc = 0.5967553466126797
User 50765 AUC after training: 0.5966330606809966
User 50765 does not improve AUC. Reverting changes.
Training on augumented user 43998 30/50 current_auc = 0.5967553466126797
User 43998 AUC after training: 0.5969002780872669
User 43998 improves AUC. Keeping the model.
Training on augumented user 35500 31/50 current_auc = 0.5969002780872669
User 35500 AUC after training: 0.5969002780872669
User 35500 does not improve AUC. Reverting changes.
Training on augumented user 95787 32/50 current_auc = 0.5969002780872669
User 95787 AUC after training: 0.596868574327201
User 95787 does not improve AUC. Reverting changes.
Training on augumented user 115046 33/50 current_auc = 0.5969002780872669
User 115046 AUC after training: 0.5967508175040989
User 115046 does not improve AUC. Reverting changes.
Training on augumented user 99329 34/50 current_auc = 0.5969002780872669
User 99329 AUC after training: 0.5967915794813266
User 99329 does not improve AUC. Reverting changes.
Training on augumented user 129298 35/50 current_auc = 0.5969002780872669
User 129298 AUC after training: 0.5969682147159796
User 129298 improves AUC. Keeping the model.
Training on augumented user 129444 36/50 current_auc = 0.5969682147159796
User 129444 AUC after training: 0.5969682147159795
User 129444 does not improve AUC. Reverting changes.
Training on augumented user 45258 37/50 current_auc = 0.5969682147159796
User 45258 AUC after training: 0.5969410400644944
User 45258 does not improve AUC. Reverting changes.
Training on augumented user 46207 38/50 current_auc = 0.5969682147159796
User 46207 AUC after training: 0.5955007835357844
User 46207 does not improve AUC. Reverting changes.
Training on augumented user 28714 39/50 current_auc = 0.5969682147159796
User 28714 AUC after training: 0.5969682147159795
User 28714 does not improve AUC. Reverting changes.
Training on augumented user 124844 40/50 current_auc = 0.5969682147159796
User 124844 AUC after training: 0.5969818020417221
User 124844 improves AUC. Keeping the model.
Training on augumented user 9611 41/50 current_auc = 0.5969818020417221
User 9611 AUC after training: 0.5968232832413924
User 9611 does not improve AUC. Reverting changes.
Training on augumented user 110106 42/50 current_auc = 0.5969818020417221
User 110106 AUC after training: 0.5969274527387519
User 110106 does not improve AUC. Reverting changes.
Training on augumented user 65972 43/50 current_auc = 0.5969818020417221
User 65972 AUC after training: 0.5968549870014583
User 65972 does not improve AUC. Reverting changes.
Training on augumented user 89710 44/50 current_auc = 0.5969818020417221
User 89710 AUC after training: 0.5968731034357818
User 89710 does not improve AUC. Reverting changes.
Training on augumented user 44271 45/50 current_auc = 0.5969818020417221
User 44271 AUC after training: 0.5968278123499733
User 44271 does not improve AUC. Reverting changes.
Training on augumented user 20732 46/50 current_auc = 0.5969818020417221
User 20732 AUC after training: 0.5969183945215902
User 20732 does not improve AUC. Reverting changes.
Training on augumented user 137027 47/50 current_auc = 0.5969818020417221
User 137027 AUC after training: 0.5968459287842967
User 137027 does not improve AUC. Reverting changes.
Training on augumented user 2611 48/50 current_auc = 0.5969818020417221
User 2611 AUC after training: 0.5960759803255523
User 2611 does not improve AUC. Reverting changes.
Training on augumented user 107749 49/50 current_auc = 0.5969818020417221
User 107749 AUC after training: 0.5970044475846263
User 107749 improves AUC. Keeping the model.
[2024-12-02 19:15:57.824851] start test user 128323 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:58.360193] start test user 128323 180/567 recall augumented users by random, augumented_users = [110805, 64484, 43412, 54636, 44172, 115321, 121813, 116270, 73620, 79954, 6082, 77658, 18894, 14754, 30128, 59632, 77040, 42459, 71572, 109326, 78200, 121915, 62917, 39753, 70418, 37162, 81713, 49287, 24314, 120698, 104918, 19621, 82439, 12202, 20863, 52361, 76833, 136258, 76903, 48061, 56130, 71444, 106276, 55929, 60265, 47771, 16405, 15024, 82490, 84766]
[2024-12-02 19:15:58.390023] user = 128323 Cloud 180/567
[2024-12-02 19:15:58.495998] user = 128323 Local 180/567
[2024-12-02 19:15:58.722342] user = 128323 Local+ 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:01.464453] user = 128323 MPDA- 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7419433490864213
Training on augumented user 110805 0/50 current_auc = 0.7419433490864213
User 110805 AUC after training: 0.742018602691069
User 110805 improves AUC. Keeping the model.
Training on augumented user 64484 1/50 current_auc = 0.742018602691069
User 64484 AUC after training: 0.7420667649980435
User 64484 improves AUC. Keeping the model.
Training on augumented user 43412 2/50 current_auc = 0.7420667649980435
User 43412 AUC after training: 0.7421992113422232
User 43412 improves AUC. Keeping the model.
Training on augumented user 54636 3/50 current_auc = 0.7421992113422232
User 54636 AUC after training: 0.7421269678817616
User 54636 does not improve AUC. Reverting changes.
Training on augumented user 44172 4/50 current_auc = 0.7421992113422232
User 44172 AUC after training: 0.7421992113422233
User 44172 improves AUC. Keeping the model.
Training on augumented user 115321 5/50 current_auc = 0.7421992113422233
User 115321 AUC after training: 0.7423075765329159
User 115321 improves AUC. Keeping the model.
Training on augumented user 121813 6/50 current_auc = 0.7423075765329159
User 121813 AUC after training: 0.7421811504771079
User 121813 does not improve AUC. Reverting changes.
Training on augumented user 116270 7/50 current_auc = 0.7423075765329159
User 116270 AUC after training: 0.7420456939887421
User 116270 does not improve AUC. Reverting changes.
Training on augumented user 73620 8/50 current_auc = 0.7423075765329159
User 73620 AUC after training: 0.7424159417236085
User 73620 improves AUC. Keeping the model.
Training on augumented user 79954 9/50 current_auc = 0.7424159417236085
User 79954 AUC after training: 0.7424821648956984
User 79954 improves AUC. Keeping the model.
Training on augumented user 6082 10/50 current_auc = 0.7424821648956984
User 6082 AUC after training: 0.7419614099515367
User 6082 does not improve AUC. Reverting changes.
Training on augumented user 77658 11/50 current_auc = 0.7424821648956984
User 77658 AUC after training: 0.7425363474910449
User 77658 improves AUC. Keeping the model.
Training on augumented user 18894 12/50 current_auc = 0.7425363474910449
User 18894 AUC after training: 0.7421992113422233
User 18894 does not improve AUC. Reverting changes.
Training on augumented user 14754 13/50 current_auc = 0.7425363474910449
User 14754 AUC after training: 0.7422744649468709
User 14754 does not improve AUC. Reverting changes.
Training on augumented user 30128 14/50 current_auc = 0.7425363474910449
User 30128 AUC after training: 0.7422594142259413
User 30128 does not improve AUC. Reverting changes.
Training on augumented user 59632 15/50 current_auc = 0.7425363474910449
User 59632 AUC after training: 0.7427711387375455
User 59632 improves AUC. Keeping the model.
Training on augumented user 77040 16/50 current_auc = 0.7427711387375455
User 77040 AUC after training: 0.7425182866259294
User 77040 does not improve AUC. Reverting changes.
Training on augumented user 42459 17/50 current_auc = 0.7427711387375455
User 42459 AUC after training: 0.7425062460491857
User 42459 does not improve AUC. Reverting changes.
Training on augumented user 71572 18/50 current_auc = 0.7427711387375455
User 71572 AUC after training: 0.7430480720026489
User 71572 improves AUC. Keeping the model.
Training on augumented user 109326 19/50 current_auc = 0.7430480720026489
User 109326 AUC after training: 0.7432467415189186
User 109326 improves AUC. Keeping the model.
Training on augumented user 78200 20/50 current_auc = 0.7432467415189186
User 78200 AUC after training: 0.7430841937328797
User 78200 does not improve AUC. Reverting changes.
Training on augumented user 121915 21/50 current_auc = 0.7432467415189186
User 121915 AUC after training: 0.7433641371421691
User 121915 improves AUC. Keeping the model.
Training on augumented user 62917 22/50 current_auc = 0.7433641371421691
User 62917 AUC after training: 0.7432196502212456
User 62917 does not improve AUC. Reverting changes.
Training on augumented user 39753 23/50 current_auc = 0.7433641371421691
User 39753 AUC after training: 0.7431805183468287
User 39753 does not improve AUC. Reverting changes.
Training on augumented user 70418 24/50 current_auc = 0.7433641371421691
User 70418 AUC after training: 0.7433280154119382
User 70418 does not improve AUC. Reverting changes.
Training on augumented user 37162 25/50 current_auc = 0.7433641371421691
User 37162 AUC after training: 0.743240721230547
User 37162 does not improve AUC. Reverting changes.
Training on augumented user 81713 26/50 current_auc = 0.7433641371421691
User 81713 AUC after training: 0.7431955690677583
User 81713 does not improve AUC. Reverting changes.
Training on augumented user 49287 27/50 current_auc = 0.7433641371421691
User 49287 AUC after training: 0.743493573342163
User 49287 improves AUC. Keeping the model.
Training on augumented user 24314 28/50 current_auc = 0.743493573342163
User 24314 AUC after training: 0.7423888504259355
User 24314 does not improve AUC. Reverting changes.
Training on augumented user 120698 29/50 current_auc = 0.743493573342163
User 120698 AUC after training: 0.7429818488305591
User 120698 does not improve AUC. Reverting changes.
Training on augumented user 104918 30/50 current_auc = 0.743493573342163
User 104918 AUC after training: 0.7421209475933898
User 104918 does not improve AUC. Reverting changes.
Training on augumented user 19621 31/50 current_auc = 0.743493573342163
User 19621 AUC after training: 0.7424159417236086
User 19621 does not improve AUC. Reverting changes.
Training on augumented user 82439 32/50 current_auc = 0.743493573342163
User 82439 AUC after training: 0.7430962343096235
User 82439 does not improve AUC. Reverting changes.
Training on augumented user 12202 33/50 current_auc = 0.743493573342163
User 12202 AUC after training: 0.7432949038258934
User 12202 does not improve AUC. Reverting changes.
Training on augumented user 20863 34/50 current_auc = 0.743493573342163
User 20863 AUC after training: 0.7433069444026369
User 20863 does not improve AUC. Reverting changes.
Training on augumented user 52361 35/50 current_auc = 0.743493573342163
User 52361 AUC after training: 0.7434273501700732
User 52361 does not improve AUC. Reverting changes.
Training on augumented user 76833 36/50 current_auc = 0.743493573342163
User 76833 AUC after training: 0.7428614430631229
User 76833 does not improve AUC. Reverting changes.
Training on augumented user 136258 37/50 current_auc = 0.743493573342163
User 136258 AUC after training: 0.7431323560398543
User 136258 does not improve AUC. Reverting changes.
Training on augumented user 76903 38/50 current_auc = 0.743493573342163
User 76903 AUC after training: 0.7436440805514584
User 76903 improves AUC. Keeping the model.
Training on augumented user 48061 39/50 current_auc = 0.7436440805514584
User 48061 AUC after training: 0.7428193010445199
User 48061 does not improve AUC. Reverting changes.
Training on augumented user 56130 40/50 current_auc = 0.7436440805514584
User 56130 AUC after training: 0.7431684777700853
User 56130 does not improve AUC. Reverting changes.
Training on augumented user 71444 41/50 current_auc = 0.7436440805514584
User 71444 AUC after training: 0.7429457271003281
User 71444 does not improve AUC. Reverting changes.
Training on augumented user 106276 42/50 current_auc = 0.7436440805514584
User 106276 AUC after training: 0.743204599500316
User 106276 does not improve AUC. Reverting changes.
Training on augumented user 55929 43/50 current_auc = 0.7436440805514584
User 55929 AUC after training: 0.7432828632491496
User 55929 does not improve AUC. Reverting changes.
Training on augumented user 60265 44/50 current_auc = 0.7436440805514584
User 60265 AUC after training: 0.7435537762258813
User 60265 does not improve AUC. Reverting changes.
Training on augumented user 47771 45/50 current_auc = 0.7436440805514584
User 47771 AUC after training: 0.7434002588724
User 47771 does not improve AUC. Reverting changes.
Training on augumented user 16405 46/50 current_auc = 0.7436440805514584
User 16405 AUC after training: 0.7430119502724181
User 16405 does not improve AUC. Reverting changes.
Training on augumented user 15024 47/50 current_auc = 0.7436440805514584
User 15024 AUC after training: 0.7422895156678004
User 15024 does not improve AUC. Reverting changes.
Training on augumented user 82490 48/50 current_auc = 0.7436440805514584
User 82490 AUC after training: 0.7432678125282202
User 82490 does not improve AUC. Reverting changes.
Training on augumented user 84766 49/50 current_auc = 0.7436440805514584
User 84766 AUC after training: 0.743337045844496
User 84766 does not improve AUC. Reverting changes.
[2024-12-02 19:16:34.409237] start test user 128384 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:34.953758] start test user 128384 181/567 recall augumented users by random, augumented_users = [22584, 118844, 88052, 66743, 81514, 9548, 46311, 3988, 10141, 16199, 109994, 66330, 122174, 118613, 119119, 98327, 44890, 42309, 16991, 115017, 134360, 47279, 68436, 7253, 11024, 37767, 87614, 112128, 2756, 63704, 52325, 134658, 34126, 53319, 68344, 21583, 3800, 18868, 45541, 83899, 104191, 6912, 121821, 646, 125969, 110925, 54506, 131318, 89787, 8586]
[2024-12-02 19:16:34.982395] user = 128384 Cloud 181/567
[2024-12-02 19:16:35.019949] user = 128384 Local 181/567
[2024-12-02 19:16:35.099101] user = 128384 Local+ 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:37.499914] user = 128384 MPDA- 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7294041028980788
Training on augumented user 22584 0/50 current_auc = 0.7294041028980788
User 22584 AUC after training: 0.7298111364376425
User 22584 improves AUC. Keeping the model.
Training on augumented user 118844 1/50 current_auc = 0.7298111364376425
User 118844 AUC after training: 0.7280201888635623
User 118844 does not improve AUC. Reverting changes.
Training on augumented user 88052 2/50 current_auc = 0.7298111364376425
User 88052 AUC after training: 0.7289156626506024
User 88052 does not improve AUC. Reverting changes.
Training on augumented user 66743 3/50 current_auc = 0.7298111364376425
User 66743 AUC after training: 0.7298111364376425
User 66743 does not improve AUC. Reverting changes.
Training on augumented user 81514 4/50 current_auc = 0.7298111364376425
User 81514 AUC after training: 0.7298111364376424
User 81514 does not improve AUC. Reverting changes.
Training on augumented user 9548 5/50 current_auc = 0.7298111364376425
User 9548 AUC after training: 0.729973949853468
User 9548 improves AUC. Keeping the model.
Training on augumented user 46311 6/50 current_auc = 0.729973949853468
User 46311 AUC after training: 0.7303809833930316
User 46311 improves AUC. Keeping the model.
Training on augumented user 3988 7/50 current_auc = 0.7303809833930316
User 3988 AUC after training: 0.7300553565613807
User 3988 does not improve AUC. Reverting changes.
Training on augumented user 10141 8/50 current_auc = 0.7303809833930316
User 10141 AUC after training: 0.728752849234777
User 10141 does not improve AUC. Reverting changes.
Training on augumented user 16199 9/50 current_auc = 0.7303809833930316
User 16199 AUC after training: 0.7292412894822534
User 16199 does not improve AUC. Reverting changes.
Training on augumented user 109994 10/50 current_auc = 0.7303809833930316
User 109994 AUC after training: 0.7297297297297297
User 109994 does not improve AUC. Reverting changes.
Training on augumented user 66330 11/50 current_auc = 0.7303809833930316
User 66330 AUC after training: 0.730869423640508
User 66330 improves AUC. Keeping the model.
Training on augumented user 122174 12/50 current_auc = 0.730869423640508
User 122174 AUC after training: 0.7288342559426897
User 122174 does not improve AUC. Reverting changes.
Training on augumented user 118613 13/50 current_auc = 0.730869423640508
User 118613 AUC after training: 0.7287528492347769
User 118613 does not improve AUC. Reverting changes.
Training on augumented user 119119 14/50 current_auc = 0.730869423640508
User 119119 AUC after training: 0.7299739498534681
User 119119 does not improve AUC. Reverting changes.
Training on augumented user 98327 15/50 current_auc = 0.730869423640508
User 98327 AUC after training: 0.7311950504721589
User 98327 improves AUC. Keeping the model.
Training on augumented user 44890 16/50 current_auc = 0.7311950504721589
User 44890 AUC after training: 0.7286714425268642
User 44890 does not improve AUC. Reverting changes.
Training on augumented user 42309 17/50 current_auc = 0.7311950504721589
User 42309 AUC after training: 0.7294855096059916
User 42309 does not improve AUC. Reverting changes.
Training on augumented user 16991 18/50 current_auc = 0.7311950504721589
User 16991 AUC after training: 0.7289156626506024
User 16991 does not improve AUC. Reverting changes.
Training on augumented user 115017 19/50 current_auc = 0.7311950504721589
User 115017 AUC after training: 0.7311950504721589
User 115017 does not improve AUC. Reverting changes.
Training on augumented user 134360 20/50 current_auc = 0.7311950504721589
User 134360 AUC after training: 0.7302181699772061
User 134360 does not improve AUC. Reverting changes.
Training on augumented user 47279 21/50 current_auc = 0.7311950504721589
User 47279 AUC after training: 0.7302181699772061
User 47279 does not improve AUC. Reverting changes.
Training on augumented user 68436 22/50 current_auc = 0.7311950504721589
User 68436 AUC after training: 0.730869423640508
User 68436 does not improve AUC. Reverting changes.
Training on augumented user 7253 23/50 current_auc = 0.7311950504721589
User 7253 AUC after training: 0.7282644089873005
User 7253 does not improve AUC. Reverting changes.
Training on augumented user 11024 24/50 current_auc = 0.7311950504721589
User 11024 AUC after training: 0.7293226961901661
User 11024 does not improve AUC. Reverting changes.
Training on augumented user 37767 25/50 current_auc = 0.7311950504721589
User 37767 AUC after training: 0.7273689352002605
User 37767 does not improve AUC. Reverting changes.
Training on augumented user 87614 26/50 current_auc = 0.7311950504721589
User 87614 AUC after training: 0.7298925431455552
User 87614 does not improve AUC. Reverting changes.
Training on augumented user 112128 27/50 current_auc = 0.7311950504721589
User 112128 AUC after training: 0.729973949853468
User 112128 does not improve AUC. Reverting changes.
Training on augumented user 2756 28/50 current_auc = 0.7311950504721589
User 2756 AUC after training: 0.7290784760664278
User 2756 does not improve AUC. Reverting changes.
Training on augumented user 63704 29/50 current_auc = 0.7311950504721589
User 63704 AUC after training: 0.7307066102246824
User 63704 does not improve AUC. Reverting changes.
Training on augumented user 52325 30/50 current_auc = 0.7311950504721589
User 52325 AUC after training: 0.7285086291110388
User 52325 does not improve AUC. Reverting changes.
Training on augumented user 134658 31/50 current_auc = 0.7311950504721589
User 134658 AUC after training: 0.7305437968088571
User 134658 does not improve AUC. Reverting changes.
Training on augumented user 34126 32/50 current_auc = 0.7311950504721589
User 34126 AUC after training: 0.7303809833930316
User 34126 does not improve AUC. Reverting changes.
Training on augumented user 53319 33/50 current_auc = 0.7311950504721589
User 53319 AUC after training: 0.7300553565613807
User 53319 does not improve AUC. Reverting changes.
Training on augumented user 68344 34/50 current_auc = 0.7311950504721589
User 68344 AUC after training: 0.7294041028980788
User 68344 does not improve AUC. Reverting changes.
Training on augumented user 21583 35/50 current_auc = 0.7311950504721589
User 21583 AUC after training: 0.7298925431455552
User 21583 does not improve AUC. Reverting changes.
Training on augumented user 3800 36/50 current_auc = 0.7311950504721589
User 3800 AUC after training: 0.730869423640508
User 3800 does not improve AUC. Reverting changes.
Training on augumented user 18868 37/50 current_auc = 0.7311950504721589
User 18868 AUC after training: 0.7300553565613807
User 18868 does not improve AUC. Reverting changes.
Training on augumented user 45541 38/50 current_auc = 0.7311950504721589
User 45541 AUC after training: 0.7303809833930316
User 45541 does not improve AUC. Reverting changes.
Training on augumented user 83899 39/50 current_auc = 0.7311950504721589
User 83899 AUC after training: 0.7290784760664278
User 83899 does not improve AUC. Reverting changes.
Training on augumented user 104191 40/50 current_auc = 0.7311950504721589
User 104191 AUC after training: 0.7307066102246824
User 104191 does not improve AUC. Reverting changes.
Training on augumented user 6912 41/50 current_auc = 0.7311950504721589
User 6912 AUC after training: 0.7294041028980789
User 6912 does not improve AUC. Reverting changes.
Training on augumented user 121821 42/50 current_auc = 0.7311950504721589
User 121821 AUC after training: 0.7298111364376425
User 121821 does not improve AUC. Reverting changes.
Training on augumented user 646 43/50 current_auc = 0.7311950504721589
User 646 AUC after training: 0.7285086291110388
User 646 does not improve AUC. Reverting changes.
Training on augumented user 125969 44/50 current_auc = 0.7311950504721589
User 125969 AUC after training: 0.7287528492347769
User 125969 does not improve AUC. Reverting changes.
Training on augumented user 110925 45/50 current_auc = 0.7311950504721589
User 110925 AUC after training: 0.7294855096059916
User 110925 does not improve AUC. Reverting changes.
Training on augumented user 54506 46/50 current_auc = 0.7311950504721589
User 54506 AUC after training: 0.729973949853468
User 54506 does not improve AUC. Reverting changes.
Training on augumented user 131318 47/50 current_auc = 0.7311950504721589
User 131318 AUC after training: 0.7305437968088571
User 131318 does not improve AUC. Reverting changes.
Training on augumented user 89787 48/50 current_auc = 0.7311950504721589
User 89787 AUC after training: 0.7305437968088571
User 89787 does not improve AUC. Reverting changes.
Training on augumented user 8586 49/50 current_auc = 0.7311950504721589
User 8586 AUC after training: 0.7285900358189514
User 8586 does not improve AUC. Reverting changes.
[2024-12-02 19:17:06.414669] start test user 128401 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:06.818689] start test user 128401 182/567 recall augumented users by random, augumented_users = [68376, 1915, 93844, 96853, 86323, 682, 93583, 23111, 13317, 31052, 71669, 132732, 58770, 113205, 51406, 25372, 33921, 118580, 77652, 67929, 75919, 131313, 102835, 55620, 94044, 16930, 39772, 81991, 115502, 93587, 39359, 58103, 31238, 66050, 32062, 39249, 107506, 8997, 113606, 76506, 91753, 69262, 23168, 77174, 42656, 132315, 7834, 35499, 13663, 41087]
[2024-12-02 19:17:06.834007] user = 128401 Cloud 182/567
[2024-12-02 19:17:06.849076] user = 128401 Local 182/567
[2024-12-02 19:17:06.896015] user = 128401 Local+ 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:08.979944] user = 128401 MPDA- 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7629419191919192
Training on augumented user 68376 0/50 current_auc = 0.7629419191919192
User 68376 AUC after training: 0.7635732323232323
User 68376 improves AUC. Keeping the model.
Training on augumented user 1915 1/50 current_auc = 0.7635732323232323
User 1915 AUC after training: 0.764520202020202
User 1915 improves AUC. Keeping the model.
Training on augumented user 93844 2/50 current_auc = 0.764520202020202
User 93844 AUC after training: 0.7651515151515151
User 93844 improves AUC. Keeping the model.
Training on augumented user 96853 3/50 current_auc = 0.7651515151515151
User 96853 AUC after training: 0.7642045454545454
User 96853 does not improve AUC. Reverting changes.
Training on augumented user 86323 4/50 current_auc = 0.7651515151515151
User 86323 AUC after training: 0.7632575757575757
User 86323 does not improve AUC. Reverting changes.
Training on augumented user 682 5/50 current_auc = 0.7651515151515151
User 682 AUC after training: 0.7645202020202021
User 682 does not improve AUC. Reverting changes.
Training on augumented user 93583 6/50 current_auc = 0.7651515151515151
User 93583 AUC after training: 0.7642045454545454
User 93583 does not improve AUC. Reverting changes.
Training on augumented user 23111 7/50 current_auc = 0.7651515151515151
User 23111 AUC after training: 0.7635732323232323
User 23111 does not improve AUC. Reverting changes.
Training on augumented user 13317 8/50 current_auc = 0.7651515151515151
User 13317 AUC after training: 0.7632575757575757
User 13317 does not improve AUC. Reverting changes.
Training on augumented user 31052 9/50 current_auc = 0.7651515151515151
User 31052 AUC after training: 0.764520202020202
User 31052 does not improve AUC. Reverting changes.
Training on augumented user 71669 10/50 current_auc = 0.7651515151515151
User 71669 AUC after training: 0.764520202020202
User 71669 does not improve AUC. Reverting changes.
Training on augumented user 132732 11/50 current_auc = 0.7651515151515151
User 132732 AUC after training: 0.7648358585858586
User 132732 does not improve AUC. Reverting changes.
Training on augumented user 58770 12/50 current_auc = 0.7651515151515151
User 58770 AUC after training: 0.7642045454545454
User 58770 does not improve AUC. Reverting changes.
Training on augumented user 113205 13/50 current_auc = 0.7651515151515151
User 113205 AUC after training: 0.764520202020202
User 113205 does not improve AUC. Reverting changes.
Training on augumented user 51406 14/50 current_auc = 0.7651515151515151
User 51406 AUC after training: 0.763888888888889
User 51406 does not improve AUC. Reverting changes.
Training on augumented user 25372 15/50 current_auc = 0.7651515151515151
User 25372 AUC after training: 0.7642045454545454
User 25372 does not improve AUC. Reverting changes.
Training on augumented user 33921 16/50 current_auc = 0.7651515151515151
User 33921 AUC after training: 0.7648358585858586
User 33921 does not improve AUC. Reverting changes.
Training on augumented user 118580 17/50 current_auc = 0.7651515151515151
User 118580 AUC after training: 0.7648358585858586
User 118580 does not improve AUC. Reverting changes.
Training on augumented user 77652 18/50 current_auc = 0.7651515151515151
User 77652 AUC after training: 0.7651515151515151
User 77652 does not improve AUC. Reverting changes.
Training on augumented user 67929 19/50 current_auc = 0.7651515151515151
User 67929 AUC after training: 0.7635732323232323
User 67929 does not improve AUC. Reverting changes.
Training on augumented user 75919 20/50 current_auc = 0.7651515151515151
User 75919 AUC after training: 0.7635732323232323
User 75919 does not improve AUC. Reverting changes.
Training on augumented user 131313 21/50 current_auc = 0.7651515151515151
User 131313 AUC after training: 0.7651515151515151
User 131313 does not improve AUC. Reverting changes.
Training on augumented user 102835 22/50 current_auc = 0.7651515151515151
User 102835 AUC after training: 0.7664141414141414
User 102835 improves AUC. Keeping the model.
Training on augumented user 55620 23/50 current_auc = 0.7664141414141414
User 55620 AUC after training: 0.7664141414141414
User 55620 does not improve AUC. Reverting changes.
Training on augumented user 94044 24/50 current_auc = 0.7664141414141414
User 94044 AUC after training: 0.7664141414141414
User 94044 does not improve AUC. Reverting changes.
Training on augumented user 16930 25/50 current_auc = 0.7664141414141414
User 16930 AUC after training: 0.7657828282828283
User 16930 does not improve AUC. Reverting changes.
Training on augumented user 39772 26/50 current_auc = 0.7664141414141414
User 39772 AUC after training: 0.7651515151515151
User 39772 does not improve AUC. Reverting changes.
Training on augumented user 81991 27/50 current_auc = 0.7664141414141414
User 81991 AUC after training: 0.7660984848484849
User 81991 does not improve AUC. Reverting changes.
Training on augumented user 115502 28/50 current_auc = 0.7664141414141414
User 115502 AUC after training: 0.7660984848484849
User 115502 does not improve AUC. Reverting changes.
Training on augumented user 93587 29/50 current_auc = 0.7664141414141414
User 93587 AUC after training: 0.7648358585858586
User 93587 does not improve AUC. Reverting changes.
Training on augumented user 39359 30/50 current_auc = 0.7664141414141414
User 39359 AUC after training: 0.7638888888888888
User 39359 does not improve AUC. Reverting changes.
Training on augumented user 58103 31/50 current_auc = 0.7664141414141414
User 58103 AUC after training: 0.766729797979798
User 58103 improves AUC. Keeping the model.
Training on augumented user 31238 32/50 current_auc = 0.766729797979798
User 31238 AUC after training: 0.7670454545454546
User 31238 improves AUC. Keeping the model.
Training on augumented user 66050 33/50 current_auc = 0.7670454545454546
User 66050 AUC after training: 0.766729797979798
User 66050 does not improve AUC. Reverting changes.
Training on augumented user 32062 34/50 current_auc = 0.7670454545454546
User 32062 AUC after training: 0.7660984848484849
User 32062 does not improve AUC. Reverting changes.
Training on augumented user 39249 35/50 current_auc = 0.7670454545454546
User 39249 AUC after training: 0.7676767676767677
User 39249 improves AUC. Keeping the model.
Training on augumented user 107506 36/50 current_auc = 0.7676767676767677
User 107506 AUC after training: 0.7676767676767677
User 107506 does not improve AUC. Reverting changes.
Training on augumented user 8997 37/50 current_auc = 0.7676767676767677
User 8997 AUC after training: 0.7676767676767677
User 8997 does not improve AUC. Reverting changes.
Training on augumented user 113606 38/50 current_auc = 0.7676767676767677
User 113606 AUC after training: 0.7673611111111112
User 113606 does not improve AUC. Reverting changes.
Training on augumented user 76506 39/50 current_auc = 0.7676767676767677
User 76506 AUC after training: 0.7670454545454546
User 76506 does not improve AUC. Reverting changes.
Training on augumented user 91753 40/50 current_auc = 0.7676767676767677
User 91753 AUC after training: 0.7660984848484849
User 91753 does not improve AUC. Reverting changes.
Training on augumented user 69262 41/50 current_auc = 0.7676767676767677
User 69262 AUC after training: 0.766729797979798
User 69262 does not improve AUC. Reverting changes.
Training on augumented user 23168 42/50 current_auc = 0.7676767676767677
User 23168 AUC after training: 0.7679924242424242
User 23168 improves AUC. Keeping the model.
Training on augumented user 77174 43/50 current_auc = 0.7679924242424242
User 77174 AUC after training: 0.7673611111111112
User 77174 does not improve AUC. Reverting changes.
Training on augumented user 42656 44/50 current_auc = 0.7679924242424242
User 42656 AUC after training: 0.7686237373737375
User 42656 improves AUC. Keeping the model.
Training on augumented user 132315 45/50 current_auc = 0.7686237373737375
User 132315 AUC after training: 0.7689393939393939
User 132315 improves AUC. Keeping the model.
Training on augumented user 7834 46/50 current_auc = 0.7689393939393939
User 7834 AUC after training: 0.7686237373737373
User 7834 does not improve AUC. Reverting changes.
Training on augumented user 35499 47/50 current_auc = 0.7689393939393939
User 35499 AUC after training: 0.7679924242424243
User 35499 does not improve AUC. Reverting changes.
Training on augumented user 13663 48/50 current_auc = 0.7689393939393939
User 13663 AUC after training: 0.7686237373737373
User 13663 does not improve AUC. Reverting changes.
Training on augumented user 41087 49/50 current_auc = 0.7689393939393939
User 41087 AUC after training: 0.7679924242424243
User 41087 does not improve AUC. Reverting changes.
[2024-12-02 19:17:40.057502] start test user 128426 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:40.459939] start test user 128426 183/567 recall augumented users by random, augumented_users = [104383, 23417, 68827, 43568, 93589, 19286, 14395, 81998, 17586, 87623, 119351, 35265, 80789, 83687, 16004, 14116, 35696, 83950, 80960, 100788, 74461, 94078, 4322, 1104, 9785, 25854, 55200, 41136, 67731, 103572, 84328, 59698, 54215, 28086, 739, 75745, 134973, 58547, 13749, 48253, 75772, 22508, 106600, 111300, 45265, 98496, 47066, 125917, 125902, 133096]
[2024-12-02 19:17:40.474324] user = 128426 Cloud 183/567
[2024-12-02 19:17:40.488646] user = 128426 Local 183/567
[2024-12-02 19:17:40.540605] user = 128426 Local+ 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:42.844239] user = 128426 MPDA- 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5477687930518118
Training on augumented user 104383 0/50 current_auc = 0.5477687930518118
User 104383 AUC after training: 0.5480682839173405
User 104383 improves AUC. Keeping the model.
Training on augumented user 23417 1/50 current_auc = 0.5480682839173405
User 23417 AUC after training: 0.5480682839173405
User 23417 does not improve AUC. Reverting changes.
Training on augumented user 68827 2/50 current_auc = 0.5480682839173405
User 68827 AUC after training: 0.5492662473794548
User 68827 improves AUC. Keeping the model.
Training on augumented user 43568 3/50 current_auc = 0.5492662473794548
User 43568 AUC after training: 0.549865229110512
User 43568 improves AUC. Keeping the model.
Training on augumented user 93589 4/50 current_auc = 0.549865229110512
User 93589 AUC after training: 0.5495657382449834
User 93589 does not improve AUC. Reverting changes.
Training on augumented user 19286 5/50 current_auc = 0.549865229110512
User 19286 AUC after training: 0.5495657382449836
User 19286 does not improve AUC. Reverting changes.
Training on augumented user 14395 6/50 current_auc = 0.549865229110512
User 14395 AUC after training: 0.5495657382449834
User 14395 does not improve AUC. Reverting changes.
Training on augumented user 81998 7/50 current_auc = 0.549865229110512
User 81998 AUC after training: 0.5504642108415694
User 81998 improves AUC. Keeping the model.
Training on augumented user 17586 8/50 current_auc = 0.5504642108415694
User 17586 AUC after training: 0.549865229110512
User 17586 does not improve AUC. Reverting changes.
Training on augumented user 87623 9/50 current_auc = 0.5504642108415694
User 87623 AUC after training: 0.5501647199760407
User 87623 does not improve AUC. Reverting changes.
Training on augumented user 119351 10/50 current_auc = 0.5504642108415694
User 119351 AUC after training: 0.548367774782869
User 119351 does not improve AUC. Reverting changes.
Training on augumented user 35265 11/50 current_auc = 0.5504642108415694
User 35265 AUC after training: 0.5483677747828691
User 35265 does not improve AUC. Reverting changes.
Training on augumented user 80789 12/50 current_auc = 0.5504642108415694
User 80789 AUC after training: 0.549865229110512
User 80789 does not improve AUC. Reverting changes.
Training on augumented user 83687 13/50 current_auc = 0.5504642108415694
User 83687 AUC after training: 0.549865229110512
User 83687 does not improve AUC. Reverting changes.
Training on augumented user 16004 14/50 current_auc = 0.5504642108415694
User 16004 AUC after training: 0.5504642108415694
User 16004 does not improve AUC. Reverting changes.
Training on augumented user 14116 15/50 current_auc = 0.5504642108415694
User 14116 AUC after training: 0.5513626834381551
User 14116 improves AUC. Keeping the model.
Training on augumented user 35696 16/50 current_auc = 0.5513626834381551
User 35696 AUC after training: 0.5510631925726265
User 35696 does not improve AUC. Reverting changes.
Training on augumented user 83950 17/50 current_auc = 0.5513626834381551
User 83950 AUC after training: 0.548367774782869
User 83950 does not improve AUC. Reverting changes.
Training on augumented user 80960 18/50 current_auc = 0.5513626834381551
User 80960 AUC after training: 0.549865229110512
User 80960 does not improve AUC. Reverting changes.
Training on augumented user 100788 19/50 current_auc = 0.5513626834381551
User 100788 AUC after training: 0.5486672656483977
User 100788 does not improve AUC. Reverting changes.
Training on augumented user 74461 20/50 current_auc = 0.5513626834381551
User 74461 AUC after training: 0.5516621743036837
User 74461 improves AUC. Keeping the model.
Training on augumented user 94078 21/50 current_auc = 0.5516621743036837
User 94078 AUC after training: 0.5495657382449834
User 94078 does not improve AUC. Reverting changes.
Training on augumented user 4322 22/50 current_auc = 0.5516621743036837
User 4322 AUC after training: 0.5516621743036837
User 4322 does not improve AUC. Reverting changes.
Training on augumented user 1104 23/50 current_auc = 0.5516621743036837
User 1104 AUC after training: 0.5504642108415694
User 1104 does not improve AUC. Reverting changes.
Training on augumented user 9785 24/50 current_auc = 0.5516621743036837
User 9785 AUC after training: 0.5513626834381551
User 9785 does not improve AUC. Reverting changes.
Training on augumented user 25854 25/50 current_auc = 0.5516621743036837
User 25854 AUC after training: 0.5504642108415694
User 25854 does not improve AUC. Reverting changes.
Training on augumented user 55200 26/50 current_auc = 0.5516621743036837
User 55200 AUC after training: 0.5486672656483976
User 55200 does not improve AUC. Reverting changes.
Training on augumented user 41136 27/50 current_auc = 0.5516621743036837
User 41136 AUC after training: 0.5495657382449834
User 41136 does not improve AUC. Reverting changes.
Training on augumented user 67731 28/50 current_auc = 0.5516621743036837
User 67731 AUC after training: 0.5486672656483977
User 67731 does not improve AUC. Reverting changes.
Training on augumented user 103572 29/50 current_auc = 0.5516621743036837
User 103572 AUC after training: 0.5501647199760407
User 103572 does not improve AUC. Reverting changes.
Training on augumented user 84328 30/50 current_auc = 0.5516621743036837
User 84328 AUC after training: 0.5501647199760407
User 84328 does not improve AUC. Reverting changes.
Training on augumented user 59698 31/50 current_auc = 0.5516621743036837
User 59698 AUC after training: 0.549865229110512
User 59698 does not improve AUC. Reverting changes.
Training on augumented user 54215 32/50 current_auc = 0.5516621743036837
User 54215 AUC after training: 0.5510631925726265
User 54215 does not improve AUC. Reverting changes.
Training on augumented user 28086 33/50 current_auc = 0.5516621743036837
User 28086 AUC after training: 0.5462713387241689
User 28086 does not improve AUC. Reverting changes.
Training on augumented user 739 34/50 current_auc = 0.5516621743036837
User 739 AUC after training: 0.5477687930518118
User 739 does not improve AUC. Reverting changes.
Training on augumented user 75745 35/50 current_auc = 0.5516621743036837
User 75745 AUC after training: 0.549865229110512
User 75745 does not improve AUC. Reverting changes.
Training on augumented user 134973 36/50 current_auc = 0.5516621743036837
User 134973 AUC after training: 0.5513626834381551
User 134973 does not improve AUC. Reverting changes.
Training on augumented user 58547 37/50 current_auc = 0.5516621743036837
User 58547 AUC after training: 0.5507637017070979
User 58547 does not improve AUC. Reverting changes.
Training on augumented user 13749 38/50 current_auc = 0.5516621743036837
User 13749 AUC after training: 0.5501647199760407
User 13749 does not improve AUC. Reverting changes.
Training on augumented user 48253 39/50 current_auc = 0.5516621743036837
User 48253 AUC after training: 0.5480682839173404
User 48253 does not improve AUC. Reverting changes.
Training on augumented user 75772 40/50 current_auc = 0.5516621743036837
User 75772 AUC after training: 0.5495657382449834
User 75772 does not improve AUC. Reverting changes.
Training on augumented user 22508 41/50 current_auc = 0.5516621743036837
User 22508 AUC after training: 0.5501647199760407
User 22508 does not improve AUC. Reverting changes.
Training on augumented user 106600 42/50 current_auc = 0.5516621743036837
User 106600 AUC after training: 0.5504642108415693
User 106600 does not improve AUC. Reverting changes.
Training on augumented user 111300 43/50 current_auc = 0.5516621743036837
User 111300 AUC after training: 0.549865229110512
User 111300 does not improve AUC. Reverting changes.
Training on augumented user 45265 44/50 current_auc = 0.5516621743036837
User 45265 AUC after training: 0.5501647199760407
User 45265 does not improve AUC. Reverting changes.
Training on augumented user 98496 45/50 current_auc = 0.5516621743036837
User 98496 AUC after training: 0.5504642108415693
User 98496 does not improve AUC. Reverting changes.
Training on augumented user 47066 46/50 current_auc = 0.5516621743036837
User 47066 AUC after training: 0.5504642108415693
User 47066 does not improve AUC. Reverting changes.
Training on augumented user 125917 47/50 current_auc = 0.5516621743036837
User 125917 AUC after training: 0.5516621743036837
User 125917 does not improve AUC. Reverting changes.
Training on augumented user 125902 48/50 current_auc = 0.5516621743036837
User 125902 AUC after training: 0.550314465408805
User 125902 does not improve AUC. Reverting changes.
Training on augumented user 133096 49/50 current_auc = 0.5516621743036837
User 133096 AUC after training: 0.5498652291105122
User 133096 does not improve AUC. Reverting changes.
[2024-12-02 19:18:10.408058] start test user 128460 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:11.083192] start test user 128460 184/567 recall augumented users by random, augumented_users = [136544, 5021, 26976, 42533, 14527, 25025, 511, 27756, 78077, 17701, 71621, 112927, 14291, 12399, 132466, 111762, 88819, 9953, 128284, 80167, 5379, 37932, 123078, 44669, 74855, 36179, 40614, 6098, 72049, 43650, 123948, 24245, 27310, 126819, 101122, 85777, 110033, 37681, 29973, 98572, 73330, 27357, 70825, 101611, 11058, 115762, 10291, 134810, 37306, 19144]
[2024-12-02 19:18:11.097982] user = 128460 Cloud 184/567
[2024-12-02 19:18:11.107781] user = 128460 Local 184/567
[2024-12-02 19:18:11.185808] user = 128460 Local+ 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:13.432433] user = 128460 MPDA- 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 136544 0/50 current_auc = 0.625
User 136544 AUC after training: 0.625
User 136544 does not improve AUC. Reverting changes.
Training on augumented user 5021 1/50 current_auc = 0.625
User 5021 AUC after training: 0.625
User 5021 does not improve AUC. Reverting changes.
Training on augumented user 26976 2/50 current_auc = 0.625
User 26976 AUC after training: 0.625
User 26976 does not improve AUC. Reverting changes.
Training on augumented user 42533 3/50 current_auc = 0.625
User 42533 AUC after training: 0.625
User 42533 does not improve AUC. Reverting changes.
Training on augumented user 14527 4/50 current_auc = 0.625
User 14527 AUC after training: 0.625
User 14527 does not improve AUC. Reverting changes.
Training on augumented user 25025 5/50 current_auc = 0.625
User 25025 AUC after training: 0.625
User 25025 does not improve AUC. Reverting changes.
Training on augumented user 511 6/50 current_auc = 0.625
User 511 AUC after training: 0.625
User 511 does not improve AUC. Reverting changes.
Training on augumented user 27756 7/50 current_auc = 0.625
User 27756 AUC after training: 0.625
User 27756 does not improve AUC. Reverting changes.
Training on augumented user 78077 8/50 current_auc = 0.625
User 78077 AUC after training: 0.625
User 78077 does not improve AUC. Reverting changes.
Training on augumented user 17701 9/50 current_auc = 0.625
User 17701 AUC after training: 0.625
User 17701 does not improve AUC. Reverting changes.
Training on augumented user 71621 10/50 current_auc = 0.625
User 71621 AUC after training: 0.625
User 71621 does not improve AUC. Reverting changes.
Training on augumented user 112927 11/50 current_auc = 0.625
User 112927 AUC after training: 0.625
User 112927 does not improve AUC. Reverting changes.
Training on augumented user 14291 12/50 current_auc = 0.625
User 14291 AUC after training: 0.625
User 14291 does not improve AUC. Reverting changes.
Training on augumented user 12399 13/50 current_auc = 0.625
User 12399 AUC after training: 0.625
User 12399 does not improve AUC. Reverting changes.
Training on augumented user 132466 14/50 current_auc = 0.625
User 132466 AUC after training: 0.625
User 132466 does not improve AUC. Reverting changes.
Training on augumented user 111762 15/50 current_auc = 0.625
User 111762 AUC after training: 0.625
User 111762 does not improve AUC. Reverting changes.
Training on augumented user 88819 16/50 current_auc = 0.625
User 88819 AUC after training: 0.625
User 88819 does not improve AUC. Reverting changes.
Training on augumented user 9953 17/50 current_auc = 0.625
User 9953 AUC after training: 0.625
User 9953 does not improve AUC. Reverting changes.
Training on augumented user 128284 18/50 current_auc = 0.625
User 128284 AUC after training: 0.625
User 128284 does not improve AUC. Reverting changes.
Training on augumented user 80167 19/50 current_auc = 0.625
User 80167 AUC after training: 0.625
User 80167 does not improve AUC. Reverting changes.
Training on augumented user 5379 20/50 current_auc = 0.625
User 5379 AUC after training: 0.625
User 5379 does not improve AUC. Reverting changes.
Training on augumented user 37932 21/50 current_auc = 0.625
User 37932 AUC after training: 0.625
User 37932 does not improve AUC. Reverting changes.
Training on augumented user 123078 22/50 current_auc = 0.625
User 123078 AUC after training: 0.625
User 123078 does not improve AUC. Reverting changes.
Training on augumented user 44669 23/50 current_auc = 0.625
User 44669 AUC after training: 0.625
User 44669 does not improve AUC. Reverting changes.
Training on augumented user 74855 24/50 current_auc = 0.625
User 74855 AUC after training: 0.625
User 74855 does not improve AUC. Reverting changes.
Training on augumented user 36179 25/50 current_auc = 0.625
User 36179 AUC after training: 0.625
User 36179 does not improve AUC. Reverting changes.
Training on augumented user 40614 26/50 current_auc = 0.625
User 40614 AUC after training: 0.625
User 40614 does not improve AUC. Reverting changes.
Training on augumented user 6098 27/50 current_auc = 0.625
User 6098 AUC after training: 0.625
User 6098 does not improve AUC. Reverting changes.
Training on augumented user 72049 28/50 current_auc = 0.625
User 72049 AUC after training: 0.625
User 72049 does not improve AUC. Reverting changes.
Training on augumented user 43650 29/50 current_auc = 0.625
User 43650 AUC after training: 0.625
User 43650 does not improve AUC. Reverting changes.
Training on augumented user 123948 30/50 current_auc = 0.625
User 123948 AUC after training: 0.625
User 123948 does not improve AUC. Reverting changes.
Training on augumented user 24245 31/50 current_auc = 0.625
User 24245 AUC after training: 0.625
User 24245 does not improve AUC. Reverting changes.
Training on augumented user 27310 32/50 current_auc = 0.625
User 27310 AUC after training: 0.625
User 27310 does not improve AUC. Reverting changes.
Training on augumented user 126819 33/50 current_auc = 0.625
User 126819 AUC after training: 0.625
User 126819 does not improve AUC. Reverting changes.
Training on augumented user 101122 34/50 current_auc = 0.625
User 101122 AUC after training: 0.625
User 101122 does not improve AUC. Reverting changes.
Training on augumented user 85777 35/50 current_auc = 0.625
User 85777 AUC after training: 0.625
User 85777 does not improve AUC. Reverting changes.
Training on augumented user 110033 36/50 current_auc = 0.625
User 110033 AUC after training: 0.625
User 110033 does not improve AUC. Reverting changes.
Training on augumented user 37681 37/50 current_auc = 0.625
User 37681 AUC after training: 0.625
User 37681 does not improve AUC. Reverting changes.
Training on augumented user 29973 38/50 current_auc = 0.625
User 29973 AUC after training: 0.625
User 29973 does not improve AUC. Reverting changes.
Training on augumented user 98572 39/50 current_auc = 0.625
User 98572 AUC after training: 0.625
User 98572 does not improve AUC. Reverting changes.
Training on augumented user 73330 40/50 current_auc = 0.625
User 73330 AUC after training: 0.625
User 73330 does not improve AUC. Reverting changes.
Training on augumented user 27357 41/50 current_auc = 0.625
User 27357 AUC after training: 0.625
User 27357 does not improve AUC. Reverting changes.
Training on augumented user 70825 42/50 current_auc = 0.625
User 70825 AUC after training: 0.625
User 70825 does not improve AUC. Reverting changes.
Training on augumented user 101611 43/50 current_auc = 0.625
User 101611 AUC after training: 0.625
User 101611 does not improve AUC. Reverting changes.
Training on augumented user 11058 44/50 current_auc = 0.625
User 11058 AUC after training: 0.625
User 11058 does not improve AUC. Reverting changes.
Training on augumented user 115762 45/50 current_auc = 0.625
User 115762 AUC after training: 0.625
User 115762 does not improve AUC. Reverting changes.
Training on augumented user 10291 46/50 current_auc = 0.625
User 10291 AUC after training: 0.625
User 10291 does not improve AUC. Reverting changes.
Training on augumented user 134810 47/50 current_auc = 0.625
User 134810 AUC after training: 0.625
User 134810 does not improve AUC. Reverting changes.
Training on augumented user 37306 48/50 current_auc = 0.625
User 37306 AUC after training: 0.625
User 37306 does not improve AUC. Reverting changes.
Training on augumented user 19144 49/50 current_auc = 0.625
User 19144 AUC after training: 0.625
User 19144 does not improve AUC. Reverting changes.
[2024-12-02 19:18:40.461920] start test user 128503 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:40.869806] start test user 128503 185/567 recall augumented users by random, augumented_users = [19832, 126151, 767, 47855, 15928, 50972, 100244, 1473, 7947, 102578, 49257, 65150, 72160, 124044, 105742, 116392, 97666, 96918, 8327, 25532, 100544, 32133, 17384, 74224, 86603, 27972, 123397, 79920, 90580, 73280, 31588, 70344, 128219, 79490, 75689, 122643, 110232, 133913, 121980, 77050, 130864, 76876, 26982, 54363, 111988, 46367, 137351, 116995, 80706, 64110]
[2024-12-02 19:18:40.886368] user = 128503 Cloud 185/567
[2024-12-02 19:18:40.904458] user = 128503 Local 185/567
[2024-12-02 19:18:41.110698] user = 128503 Local+ 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:43.366157] user = 128503 MPDA- 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6103395061728396
Training on augumented user 19832 0/50 current_auc = 0.6103395061728396
User 19832 AUC after training: 0.6095679012345679
User 19832 does not improve AUC. Reverting changes.
Training on augumented user 126151 1/50 current_auc = 0.6103395061728396
User 126151 AUC after training: 0.6111111111111112
User 126151 improves AUC. Keeping the model.
Training on augumented user 767 2/50 current_auc = 0.6111111111111112
User 767 AUC after training: 0.6111111111111112
User 767 does not improve AUC. Reverting changes.
Training on augumented user 47855 3/50 current_auc = 0.6111111111111112
User 47855 AUC after training: 0.6118827160493827
User 47855 improves AUC. Keeping the model.
Training on augumented user 15928 4/50 current_auc = 0.6118827160493827
User 15928 AUC after training: 0.6126543209876544
User 15928 improves AUC. Keeping the model.
Training on augumented user 50972 5/50 current_auc = 0.6126543209876544
User 50972 AUC after training: 0.6134259259259259
User 50972 improves AUC. Keeping the model.
Training on augumented user 100244 6/50 current_auc = 0.6134259259259259
User 100244 AUC after training: 0.6134259259259259
User 100244 does not improve AUC. Reverting changes.
Training on augumented user 1473 7/50 current_auc = 0.6134259259259259
User 1473 AUC after training: 0.6126543209876544
User 1473 does not improve AUC. Reverting changes.
Training on augumented user 7947 8/50 current_auc = 0.6134259259259259
User 7947 AUC after training: 0.6118827160493827
User 7947 does not improve AUC. Reverting changes.
Training on augumented user 102578 9/50 current_auc = 0.6134259259259259
User 102578 AUC after training: 0.6126543209876543
User 102578 does not improve AUC. Reverting changes.
Training on augumented user 49257 10/50 current_auc = 0.6134259259259259
User 49257 AUC after training: 0.6134259259259259
User 49257 does not improve AUC. Reverting changes.
Training on augumented user 65150 11/50 current_auc = 0.6134259259259259
User 65150 AUC after training: 0.6118827160493827
User 65150 does not improve AUC. Reverting changes.
Training on augumented user 72160 12/50 current_auc = 0.6134259259259259
User 72160 AUC after training: 0.6134259259259259
User 72160 does not improve AUC. Reverting changes.
Training on augumented user 124044 13/50 current_auc = 0.6134259259259259
User 124044 AUC after training: 0.6126543209876543
User 124044 does not improve AUC. Reverting changes.
Training on augumented user 105742 14/50 current_auc = 0.6134259259259259
User 105742 AUC after training: 0.6126543209876543
User 105742 does not improve AUC. Reverting changes.
Training on augumented user 116392 15/50 current_auc = 0.6134259259259259
User 116392 AUC after training: 0.6111111111111112
User 116392 does not improve AUC. Reverting changes.
Training on augumented user 97666 16/50 current_auc = 0.6134259259259259
User 97666 AUC after training: 0.6103395061728395
User 97666 does not improve AUC. Reverting changes.
Training on augumented user 96918 17/50 current_auc = 0.6134259259259259
User 96918 AUC after training: 0.6118827160493827
User 96918 does not improve AUC. Reverting changes.
Training on augumented user 8327 18/50 current_auc = 0.6134259259259259
User 8327 AUC after training: 0.6126543209876544
User 8327 does not improve AUC. Reverting changes.
Training on augumented user 25532 19/50 current_auc = 0.6134259259259259
User 25532 AUC after training: 0.6126543209876544
User 25532 does not improve AUC. Reverting changes.
Training on augumented user 100544 20/50 current_auc = 0.6134259259259259
User 100544 AUC after training: 0.6126543209876544
User 100544 does not improve AUC. Reverting changes.
Training on augumented user 32133 21/50 current_auc = 0.6134259259259259
User 32133 AUC after training: 0.6118827160493828
User 32133 does not improve AUC. Reverting changes.
Training on augumented user 17384 22/50 current_auc = 0.6134259259259259
User 17384 AUC after training: 0.6134259259259259
User 17384 does not improve AUC. Reverting changes.
Training on augumented user 74224 23/50 current_auc = 0.6134259259259259
User 74224 AUC after training: 0.6134259259259259
User 74224 does not improve AUC. Reverting changes.
Training on augumented user 86603 24/50 current_auc = 0.6134259259259259
User 86603 AUC after training: 0.6118827160493827
User 86603 does not improve AUC. Reverting changes.
Training on augumented user 27972 25/50 current_auc = 0.6134259259259259
User 27972 AUC after training: 0.6126543209876543
User 27972 does not improve AUC. Reverting changes.
Training on augumented user 123397 26/50 current_auc = 0.6134259259259259
User 123397 AUC after training: 0.6126543209876544
User 123397 does not improve AUC. Reverting changes.
Training on augumented user 79920 27/50 current_auc = 0.6134259259259259
User 79920 AUC after training: 0.6126543209876543
User 79920 does not improve AUC. Reverting changes.
Training on augumented user 90580 28/50 current_auc = 0.6134259259259259
User 90580 AUC after training: 0.611111111111111
User 90580 does not improve AUC. Reverting changes.
Training on augumented user 73280 29/50 current_auc = 0.6134259259259259
User 73280 AUC after training: 0.6126543209876543
User 73280 does not improve AUC. Reverting changes.
Training on augumented user 31588 30/50 current_auc = 0.6134259259259259
User 31588 AUC after training: 0.6126543209876543
User 31588 does not improve AUC. Reverting changes.
Training on augumented user 70344 31/50 current_auc = 0.6134259259259259
User 70344 AUC after training: 0.6126543209876544
User 70344 does not improve AUC. Reverting changes.
Training on augumented user 128219 32/50 current_auc = 0.6134259259259259
User 128219 AUC after training: 0.6126543209876543
User 128219 does not improve AUC. Reverting changes.
Training on augumented user 79490 33/50 current_auc = 0.6134259259259259
User 79490 AUC after training: 0.6126543209876544
User 79490 does not improve AUC. Reverting changes.
Training on augumented user 75689 34/50 current_auc = 0.6134259259259259
User 75689 AUC after training: 0.6134259259259259
User 75689 does not improve AUC. Reverting changes.
Training on augumented user 122643 35/50 current_auc = 0.6134259259259259
User 122643 AUC after training: 0.6126543209876544
User 122643 does not improve AUC. Reverting changes.
Training on augumented user 110232 36/50 current_auc = 0.6134259259259259
User 110232 AUC after training: 0.6126543209876544
User 110232 does not improve AUC. Reverting changes.
Training on augumented user 133913 37/50 current_auc = 0.6134259259259259
User 133913 AUC after training: 0.6126543209876544
User 133913 does not improve AUC. Reverting changes.
Training on augumented user 121980 38/50 current_auc = 0.6134259259259259
User 121980 AUC after training: 0.6126543209876544
User 121980 does not improve AUC. Reverting changes.
Training on augumented user 77050 39/50 current_auc = 0.6134259259259259
User 77050 AUC after training: 0.6134259259259259
User 77050 does not improve AUC. Reverting changes.
Training on augumented user 130864 40/50 current_auc = 0.6134259259259259
User 130864 AUC after training: 0.6126543209876544
User 130864 does not improve AUC. Reverting changes.
Training on augumented user 76876 41/50 current_auc = 0.6134259259259259
User 76876 AUC after training: 0.6126543209876543
User 76876 does not improve AUC. Reverting changes.
Training on augumented user 26982 42/50 current_auc = 0.6134259259259259
User 26982 AUC after training: 0.6134259259259259
User 26982 does not improve AUC. Reverting changes.
Training on augumented user 54363 43/50 current_auc = 0.6134259259259259
User 54363 AUC after training: 0.6118827160493827
User 54363 does not improve AUC. Reverting changes.
Training on augumented user 111988 44/50 current_auc = 0.6134259259259259
User 111988 AUC after training: 0.611111111111111
User 111988 does not improve AUC. Reverting changes.
Training on augumented user 46367 45/50 current_auc = 0.6134259259259259
User 46367 AUC after training: 0.6095679012345679
User 46367 does not improve AUC. Reverting changes.
Training on augumented user 137351 46/50 current_auc = 0.6134259259259259
User 137351 AUC after training: 0.6126543209876544
User 137351 does not improve AUC. Reverting changes.
Training on augumented user 116995 47/50 current_auc = 0.6134259259259259
User 116995 AUC after training: 0.6126543209876544
User 116995 does not improve AUC. Reverting changes.
Training on augumented user 80706 48/50 current_auc = 0.6134259259259259
User 80706 AUC after training: 0.6118827160493827
User 80706 does not improve AUC. Reverting changes.
Training on augumented user 64110 49/50 current_auc = 0.6134259259259259
User 64110 AUC after training: 0.6126543209876543
User 64110 does not improve AUC. Reverting changes.
[2024-12-02 19:19:14.761253] start test user 128540 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:15.300149] start test user 128540 186/567 recall augumented users by random, augumented_users = [133477, 119859, 90074, 119198, 117836, 83754, 130931, 67367, 14375, 82487, 59224, 121759, 93249, 81051, 31103, 113296, 105145, 130850, 9958, 25945, 37502, 68550, 136985, 32062, 128899, 70118, 44425, 47571, 108169, 51060, 59544, 122163, 83861, 6709, 89250, 31680, 94893, 122146, 47537, 91189, 24587, 77074, 57186, 24892, 33880, 43407, 99806, 96134, 31375, 80554]
[2024-12-02 19:19:15.314421] user = 128540 Cloud 186/567
[2024-12-02 19:19:15.327637] user = 128540 Local 186/567
[2024-12-02 19:19:15.369825] user = 128540 Local+ 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:17.137978] user = 128540 MPDA- 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5902777777777778
Training on augumented user 133477 0/50 current_auc = 0.5902777777777778
User 133477 AUC after training: 0.5892857142857143
User 133477 does not improve AUC. Reverting changes.
Training on augumented user 119859 1/50 current_auc = 0.5902777777777778
User 119859 AUC after training: 0.5882936507936508
User 119859 does not improve AUC. Reverting changes.
Training on augumented user 90074 2/50 current_auc = 0.5902777777777778
User 90074 AUC after training: 0.5892857142857143
User 90074 does not improve AUC. Reverting changes.
Training on augumented user 119198 3/50 current_auc = 0.5902777777777778
User 119198 AUC after training: 0.5873015873015873
User 119198 does not improve AUC. Reverting changes.
Training on augumented user 117836 4/50 current_auc = 0.5902777777777778
User 117836 AUC after training: 0.5892857142857143
User 117836 does not improve AUC. Reverting changes.
Training on augumented user 83754 5/50 current_auc = 0.5902777777777778
User 83754 AUC after training: 0.5902777777777778
User 83754 does not improve AUC. Reverting changes.
Training on augumented user 130931 6/50 current_auc = 0.5902777777777778
User 130931 AUC after training: 0.5892857142857143
User 130931 does not improve AUC. Reverting changes.
Training on augumented user 67367 7/50 current_auc = 0.5902777777777778
User 67367 AUC after training: 0.5902777777777778
User 67367 does not improve AUC. Reverting changes.
Training on augumented user 14375 8/50 current_auc = 0.5902777777777778
User 14375 AUC after training: 0.5932539682539683
User 14375 improves AUC. Keeping the model.
Training on augumented user 82487 9/50 current_auc = 0.5932539682539683
User 82487 AUC after training: 0.5892857142857143
User 82487 does not improve AUC. Reverting changes.
Training on augumented user 59224 10/50 current_auc = 0.5932539682539683
User 59224 AUC after training: 0.5912698412698413
User 59224 does not improve AUC. Reverting changes.
Training on augumented user 121759 11/50 current_auc = 0.5932539682539683
User 121759 AUC after training: 0.5902777777777778
User 121759 does not improve AUC. Reverting changes.
Training on augumented user 93249 12/50 current_auc = 0.5932539682539683
User 93249 AUC after training: 0.5873015873015873
User 93249 does not improve AUC. Reverting changes.
Training on augumented user 81051 13/50 current_auc = 0.5932539682539683
User 81051 AUC after training: 0.5892857142857143
User 81051 does not improve AUC. Reverting changes.
Training on augumented user 31103 14/50 current_auc = 0.5932539682539683
User 31103 AUC after training: 0.5942460317460317
User 31103 improves AUC. Keeping the model.
Training on augumented user 113296 15/50 current_auc = 0.5942460317460317
User 113296 AUC after training: 0.5932539682539683
User 113296 does not improve AUC. Reverting changes.
Training on augumented user 105145 16/50 current_auc = 0.5942460317460317
User 105145 AUC after training: 0.5922619047619047
User 105145 does not improve AUC. Reverting changes.
Training on augumented user 130850 17/50 current_auc = 0.5942460317460317
User 130850 AUC after training: 0.5922619047619048
User 130850 does not improve AUC. Reverting changes.
Training on augumented user 9958 18/50 current_auc = 0.5942460317460317
User 9958 AUC after training: 0.5932539682539683
User 9958 does not improve AUC. Reverting changes.
Training on augumented user 25945 19/50 current_auc = 0.5942460317460317
User 25945 AUC after training: 0.5902777777777779
User 25945 does not improve AUC. Reverting changes.
Training on augumented user 37502 20/50 current_auc = 0.5942460317460317
User 37502 AUC after training: 0.5932539682539683
User 37502 does not improve AUC. Reverting changes.
Training on augumented user 68550 21/50 current_auc = 0.5942460317460317
User 68550 AUC after training: 0.5912698412698413
User 68550 does not improve AUC. Reverting changes.
Training on augumented user 136985 22/50 current_auc = 0.5942460317460317
User 136985 AUC after training: 0.5932539682539683
User 136985 does not improve AUC. Reverting changes.
Training on augumented user 32062 23/50 current_auc = 0.5942460317460317
User 32062 AUC after training: 0.5932539682539683
User 32062 does not improve AUC. Reverting changes.
Training on augumented user 128899 24/50 current_auc = 0.5942460317460317
User 128899 AUC after training: 0.5932539682539683
User 128899 does not improve AUC. Reverting changes.
Training on augumented user 70118 25/50 current_auc = 0.5942460317460317
User 70118 AUC after training: 0.5972222222222222
User 70118 improves AUC. Keeping the model.
Training on augumented user 44425 26/50 current_auc = 0.5972222222222222
User 44425 AUC after training: 0.5982142857142857
User 44425 improves AUC. Keeping the model.
Training on augumented user 47571 27/50 current_auc = 0.5982142857142857
User 47571 AUC after training: 0.5962301587301587
User 47571 does not improve AUC. Reverting changes.
Training on augumented user 108169 28/50 current_auc = 0.5982142857142857
User 108169 AUC after training: 0.5952380952380952
User 108169 does not improve AUC. Reverting changes.
Training on augumented user 51060 29/50 current_auc = 0.5982142857142857
User 51060 AUC after training: 0.5962301587301587
User 51060 does not improve AUC. Reverting changes.
Training on augumented user 59544 30/50 current_auc = 0.5982142857142857
User 59544 AUC after training: 0.5982142857142857
User 59544 does not improve AUC. Reverting changes.
Training on augumented user 122163 31/50 current_auc = 0.5982142857142857
User 122163 AUC after training: 0.5972222222222222
User 122163 does not improve AUC. Reverting changes.
Training on augumented user 83861 32/50 current_auc = 0.5982142857142857
User 83861 AUC after training: 0.5992063492063492
User 83861 improves AUC. Keeping the model.
Training on augumented user 6709 33/50 current_auc = 0.5992063492063492
User 6709 AUC after training: 0.5982142857142857
User 6709 does not improve AUC. Reverting changes.
Training on augumented user 89250 34/50 current_auc = 0.5992063492063492
User 89250 AUC after training: 0.5972222222222222
User 89250 does not improve AUC. Reverting changes.
Training on augumented user 31680 35/50 current_auc = 0.5992063492063492
User 31680 AUC after training: 0.597718253968254
User 31680 does not improve AUC. Reverting changes.
Training on augumented user 94893 36/50 current_auc = 0.5992063492063492
User 94893 AUC after training: 0.5962301587301587
User 94893 does not improve AUC. Reverting changes.
Training on augumented user 122146 37/50 current_auc = 0.5992063492063492
User 122146 AUC after training: 0.5992063492063492
User 122146 does not improve AUC. Reverting changes.
Training on augumented user 47537 38/50 current_auc = 0.5992063492063492
User 47537 AUC after training: 0.5932539682539683
User 47537 does not improve AUC. Reverting changes.
Training on augumented user 91189 39/50 current_auc = 0.5992063492063492
User 91189 AUC after training: 0.5992063492063492
User 91189 does not improve AUC. Reverting changes.
Training on augumented user 24587 40/50 current_auc = 0.5992063492063492
User 24587 AUC after training: 0.6011904761904763
User 24587 improves AUC. Keeping the model.
Training on augumented user 77074 41/50 current_auc = 0.6011904761904763
User 77074 AUC after training: 0.5942460317460317
User 77074 does not improve AUC. Reverting changes.
Training on augumented user 57186 42/50 current_auc = 0.6011904761904763
User 57186 AUC after training: 0.5992063492063492
User 57186 does not improve AUC. Reverting changes.
Training on augumented user 24892 43/50 current_auc = 0.6011904761904763
User 24892 AUC after training: 0.5992063492063492
User 24892 does not improve AUC. Reverting changes.
Training on augumented user 33880 44/50 current_auc = 0.6011904761904763
User 33880 AUC after training: 0.5992063492063493
User 33880 does not improve AUC. Reverting changes.
Training on augumented user 43407 45/50 current_auc = 0.6011904761904763
User 43407 AUC after training: 0.5962301587301587
User 43407 does not improve AUC. Reverting changes.
Training on augumented user 99806 46/50 current_auc = 0.6011904761904763
User 99806 AUC after training: 0.6011904761904763
User 99806 does not improve AUC. Reverting changes.
Training on augumented user 96134 47/50 current_auc = 0.6011904761904763
User 96134 AUC after training: 0.6001984126984127
User 96134 does not improve AUC. Reverting changes.
Training on augumented user 31375 48/50 current_auc = 0.6011904761904763
User 31375 AUC after training: 0.5962301587301587
User 31375 does not improve AUC. Reverting changes.
Training on augumented user 80554 49/50 current_auc = 0.6011904761904763
User 80554 AUC after training: 0.5982142857142858
User 80554 does not improve AUC. Reverting changes.
[2024-12-02 19:19:48.707579] start test user 128542 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:49.329260] start test user 128542 187/567 recall augumented users by random, augumented_users = [73209, 71050, 69032, 8449, 13170, 55191, 117382, 133824, 71153, 71876, 77211, 110187, 27338, 87740, 101257, 131302, 108799, 711, 113862, 18211, 58639, 91110, 93473, 35414, 130536, 833, 102806, 124982, 54430, 8809, 60444, 26915, 16273, 13916, 29775, 93970, 8884, 66429, 39651, 133257, 85647, 91825, 80887, 82318, 27957, 68761, 50710, 70151, 21172, 66309]
[2024-12-02 19:19:49.346902] user = 128542 Cloud 187/567
[2024-12-02 19:19:49.368728] user = 128542 Local 187/567
[2024-12-02 19:19:49.622564] user = 128542 Local+ 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:52.572750] user = 128542 MPDA- 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6551473640514737
Training on augumented user 73209 0/50 current_auc = 0.6551473640514737
User 73209 AUC after training: 0.6552511415525114
User 73209 improves AUC. Keeping the model.
Training on augumented user 71050 1/50 current_auc = 0.6552511415525114
User 71050 AUC after training: 0.6554068078040681
User 71050 improves AUC. Keeping the model.
Training on augumented user 69032 2/50 current_auc = 0.6554068078040681
User 69032 AUC after training: 0.6553549190535491
User 69032 does not improve AUC. Reverting changes.
Training on augumented user 8449 3/50 current_auc = 0.6554068078040681
User 8449 AUC after training: 0.6550435865504358
User 8449 does not improve AUC. Reverting changes.
Training on augumented user 13170 4/50 current_auc = 0.6554068078040681
User 13170 AUC after training: 0.656392694063927
User 13170 improves AUC. Keeping the model.
Training on augumented user 55191 5/50 current_auc = 0.656392694063927
User 55191 AUC after training: 0.6565483603154836
User 55191 improves AUC. Keeping the model.
Training on augumented user 117382 6/50 current_auc = 0.6565483603154836
User 117382 AUC after training: 0.6566521378165214
User 117382 improves AUC. Keeping the model.
Training on augumented user 133824 7/50 current_auc = 0.6566521378165214
User 133824 AUC after training: 0.6564445828144458
User 133824 does not improve AUC. Reverting changes.
Training on augumented user 71153 8/50 current_auc = 0.6566521378165214
User 71153 AUC after training: 0.6566002490660025
User 71153 does not improve AUC. Reverting changes.
Training on augumented user 71876 9/50 current_auc = 0.6566521378165214
User 71876 AUC after training: 0.6562889165628892
User 71876 does not improve AUC. Reverting changes.
Training on augumented user 77211 10/50 current_auc = 0.6566521378165214
User 77211 AUC after training: 0.6567559153175592
User 77211 improves AUC. Keeping the model.
Training on augumented user 110187 11/50 current_auc = 0.6567559153175592
User 110187 AUC after training: 0.6564445828144457
User 110187 does not improve AUC. Reverting changes.
Training on augumented user 27338 12/50 current_auc = 0.6567559153175592
User 27338 AUC after training: 0.6558738065587381
User 27338 does not improve AUC. Reverting changes.
Training on augumented user 87740 13/50 current_auc = 0.6567559153175592
User 87740 AUC after training: 0.6571191365711914
User 87740 improves AUC. Keeping the model.
Training on augumented user 101257 14/50 current_auc = 0.6571191365711914
User 101257 AUC after training: 0.656392694063927
User 101257 does not improve AUC. Reverting changes.
Training on augumented user 131302 15/50 current_auc = 0.6571191365711914
User 131302 AUC after training: 0.656340805313408
User 131302 does not improve AUC. Reverting changes.
Training on augumented user 108799 16/50 current_auc = 0.6571191365711914
User 108799 AUC after training: 0.6566521378165214
User 108799 does not improve AUC. Reverting changes.
Training on augumented user 711 17/50 current_auc = 0.6571191365711914
User 711 AUC after training: 0.6555105853051059
User 711 does not improve AUC. Reverting changes.
Training on augumented user 113862 18/50 current_auc = 0.6571191365711914
User 113862 AUC after training: 0.657326691573267
User 113862 improves AUC. Keeping the model.
Training on augumented user 18211 19/50 current_auc = 0.657326691573267
User 18211 AUC after training: 0.6570672478206725
User 18211 does not improve AUC. Reverting changes.
Training on augumented user 58639 20/50 current_auc = 0.657326691573267
User 58639 AUC after training: 0.6566521378165214
User 58639 does not improve AUC. Reverting changes.
Training on augumented user 91110 21/50 current_auc = 0.657326691573267
User 91110 AUC after training: 0.6570153590701536
User 91110 does not improve AUC. Reverting changes.
Training on augumented user 93473 22/50 current_auc = 0.657326691573267
User 93473 AUC after training: 0.6572229140722291
User 93473 does not improve AUC. Reverting changes.
Training on augumented user 35414 23/50 current_auc = 0.657326691573267
User 35414 AUC after training: 0.6569634703196348
User 35414 does not improve AUC. Reverting changes.
Training on augumented user 130536 24/50 current_auc = 0.657326691573267
User 130536 AUC after training: 0.657326691573267
User 130536 does not improve AUC. Reverting changes.
Training on augumented user 833 25/50 current_auc = 0.657326691573267
User 833 AUC after training: 0.6572229140722291
User 833 does not improve AUC. Reverting changes.
Training on augumented user 102806 26/50 current_auc = 0.657326691573267
User 102806 AUC after training: 0.657326691573267
User 102806 does not improve AUC. Reverting changes.
Training on augumented user 124982 27/50 current_auc = 0.657326691573267
User 124982 AUC after training: 0.6570153590701536
User 124982 does not improve AUC. Reverting changes.
Training on augumented user 54430 28/50 current_auc = 0.657326691573267
User 54430 AUC after training: 0.6569115815691159
User 54430 does not improve AUC. Reverting changes.
Training on augumented user 8809 29/50 current_auc = 0.657326691573267
User 8809 AUC after training: 0.6571191365711914
User 8809 does not improve AUC. Reverting changes.
Training on augumented user 60444 30/50 current_auc = 0.657326691573267
User 60444 AUC after training: 0.6564964715649647
User 60444 does not improve AUC. Reverting changes.
Training on augumented user 26915 31/50 current_auc = 0.657326691573267
User 26915 AUC after training: 0.6564445828144458
User 26915 does not improve AUC. Reverting changes.
Training on augumented user 16273 32/50 current_auc = 0.657326691573267
User 16273 AUC after training: 0.6570153590701535
User 16273 does not improve AUC. Reverting changes.
Training on augumented user 13916 33/50 current_auc = 0.657326691573267
User 13916 AUC after training: 0.654057700290577
User 13916 does not improve AUC. Reverting changes.
Training on augumented user 29775 34/50 current_auc = 0.657326691573267
User 29775 AUC after training: 0.6574304690743047
User 29775 improves AUC. Keeping the model.
Training on augumented user 93970 35/50 current_auc = 0.6574304690743047
User 93970 AUC after training: 0.6566002490660025
User 93970 does not improve AUC. Reverting changes.
Training on augumented user 8884 36/50 current_auc = 0.6574304690743047
User 8884 AUC after training: 0.6569115815691158
User 8884 does not improve AUC. Reverting changes.
Training on augumented user 66429 37/50 current_auc = 0.6574304690743047
User 66429 AUC after training: 0.6569115815691158
User 66429 does not improve AUC. Reverting changes.
Training on augumented user 39651 38/50 current_auc = 0.6574304690743047
User 39651 AUC after training: 0.6567559153175592
User 39651 does not improve AUC. Reverting changes.
Training on augumented user 133257 39/50 current_auc = 0.6574304690743047
User 133257 AUC after training: 0.6567040265670403
User 133257 does not improve AUC. Reverting changes.
Training on augumented user 85647 40/50 current_auc = 0.6574304690743047
User 85647 AUC after training: 0.6570153590701536
User 85647 does not improve AUC. Reverting changes.
Training on augumented user 91825 41/50 current_auc = 0.6574304690743047
User 91825 AUC after training: 0.6550435865504358
User 91825 does not improve AUC. Reverting changes.
Training on augumented user 80887 42/50 current_auc = 0.6574304690743047
User 80887 AUC after training: 0.6571191365711914
User 80887 does not improve AUC. Reverting changes.
Training on augumented user 82318 43/50 current_auc = 0.6574304690743047
User 82318 AUC after training: 0.6572229140722291
User 82318 does not improve AUC. Reverting changes.
Training on augumented user 27957 44/50 current_auc = 0.6574304690743047
User 27957 AUC after training: 0.6569634703196346
User 27957 does not improve AUC. Reverting changes.
Training on augumented user 68761 45/50 current_auc = 0.6574304690743047
User 68761 AUC after training: 0.6566521378165214
User 68761 does not improve AUC. Reverting changes.
Training on augumented user 50710 46/50 current_auc = 0.6574304690743047
User 50710 AUC after training: 0.6570153590701536
User 50710 does not improve AUC. Reverting changes.
Training on augumented user 70151 47/50 current_auc = 0.6574304690743047
User 70151 AUC after training: 0.6573266915732668
User 70151 does not improve AUC. Reverting changes.
Training on augumented user 21172 48/50 current_auc = 0.6574304690743047
User 21172 AUC after training: 0.657326691573267
User 21172 does not improve AUC. Reverting changes.
Training on augumented user 66309 49/50 current_auc = 0.6574304690743047
User 66309 AUC after training: 0.6569115815691158
User 66309 does not improve AUC. Reverting changes.
[2024-12-02 19:20:21.481010] start test user 128543 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:22.307435] start test user 128543 188/567 recall augumented users by random, augumented_users = [99309, 4610, 54449, 10474, 114653, 48080, 17616, 30607, 36485, 63371, 105313, 61391, 117893, 28660, 36609, 62270, 127350, 60525, 27926, 134335, 6115, 34535, 129434, 123442, 125248, 22120, 36404, 74650, 125340, 20481, 131925, 99028, 131960, 72516, 68271, 12131, 87661, 61939, 38867, 74869, 97221, 5154, 40803, 1610, 131055, 16021, 134324, 53648, 15586, 44062]
[2024-12-02 19:20:22.338229] user = 128543 Cloud 188/567
[2024-12-02 19:20:22.364637] user = 128543 Local 188/567
[2024-12-02 19:20:22.406527] user = 128543 Local+ 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:25.873669] user = 128543 MPDA- 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7581632653061224
Training on augumented user 99309 0/50 current_auc = 0.7581632653061224
User 99309 AUC after training: 0.7561224489795918
User 99309 does not improve AUC. Reverting changes.
Training on augumented user 4610 1/50 current_auc = 0.7581632653061224
User 4610 AUC after training: 0.7551020408163265
User 4610 does not improve AUC. Reverting changes.
Training on augumented user 54449 2/50 current_auc = 0.7581632653061224
User 54449 AUC after training: 0.7540816326530613
User 54449 does not improve AUC. Reverting changes.
Training on augumented user 10474 3/50 current_auc = 0.7581632653061224
User 10474 AUC after training: 0.7561224489795918
User 10474 does not improve AUC. Reverting changes.
Training on augumented user 114653 4/50 current_auc = 0.7581632653061224
User 114653 AUC after training: 0.7540816326530613
User 114653 does not improve AUC. Reverting changes.
Training on augumented user 48080 5/50 current_auc = 0.7581632653061224
User 48080 AUC after training: 0.7561224489795918
User 48080 does not improve AUC. Reverting changes.
Training on augumented user 17616 6/50 current_auc = 0.7581632653061224
User 17616 AUC after training: 0.7540816326530613
User 17616 does not improve AUC. Reverting changes.
Training on augumented user 30607 7/50 current_auc = 0.7581632653061224
User 30607 AUC after training: 0.753061224489796
User 30607 does not improve AUC. Reverting changes.
Training on augumented user 36485 8/50 current_auc = 0.7581632653061224
User 36485 AUC after training: 0.7581632653061224
User 36485 does not improve AUC. Reverting changes.
Training on augumented user 63371 9/50 current_auc = 0.7581632653061224
User 63371 AUC after training: 0.7551020408163265
User 63371 does not improve AUC. Reverting changes.
Training on augumented user 105313 10/50 current_auc = 0.7581632653061224
User 105313 AUC after training: 0.7551020408163266
User 105313 does not improve AUC. Reverting changes.
Training on augumented user 61391 11/50 current_auc = 0.7581632653061224
User 61391 AUC after training: 0.7571428571428571
User 61391 does not improve AUC. Reverting changes.
Training on augumented user 117893 12/50 current_auc = 0.7581632653061224
User 117893 AUC after training: 0.7581632653061224
User 117893 does not improve AUC. Reverting changes.
Training on augumented user 28660 13/50 current_auc = 0.7581632653061224
User 28660 AUC after training: 0.7581632653061225
User 28660 improves AUC. Keeping the model.
Training on augumented user 36609 14/50 current_auc = 0.7581632653061225
User 36609 AUC after training: 0.760204081632653
User 36609 improves AUC. Keeping the model.
Training on augumented user 62270 15/50 current_auc = 0.760204081632653
User 62270 AUC after training: 0.760204081632653
User 62270 does not improve AUC. Reverting changes.
Training on augumented user 127350 16/50 current_auc = 0.760204081632653
User 127350 AUC after training: 0.760204081632653
User 127350 does not improve AUC. Reverting changes.
Training on augumented user 60525 17/50 current_auc = 0.760204081632653
User 60525 AUC after training: 0.7612244897959184
User 60525 improves AUC. Keeping the model.
Training on augumented user 27926 18/50 current_auc = 0.7612244897959184
User 27926 AUC after training: 0.7612244897959184
User 27926 does not improve AUC. Reverting changes.
Training on augumented user 134335 19/50 current_auc = 0.7612244897959184
User 134335 AUC after training: 0.7612244897959184
User 134335 does not improve AUC. Reverting changes.
Training on augumented user 6115 20/50 current_auc = 0.7612244897959184
User 6115 AUC after training: 0.760204081632653
User 6115 does not improve AUC. Reverting changes.
Training on augumented user 34535 21/50 current_auc = 0.7612244897959184
User 34535 AUC after training: 0.7591836734693878
User 34535 does not improve AUC. Reverting changes.
Training on augumented user 129434 22/50 current_auc = 0.7612244897959184
User 129434 AUC after training: 0.760204081632653
User 129434 does not improve AUC. Reverting changes.
Training on augumented user 123442 23/50 current_auc = 0.7612244897959184
User 123442 AUC after training: 0.7591836734693878
User 123442 does not improve AUC. Reverting changes.
Training on augumented user 125248 24/50 current_auc = 0.7612244897959184
User 125248 AUC after training: 0.7612244897959183
User 125248 does not improve AUC. Reverting changes.
Training on augumented user 22120 25/50 current_auc = 0.7612244897959184
User 22120 AUC after training: 0.7612244897959183
User 22120 does not improve AUC. Reverting changes.
Training on augumented user 36404 26/50 current_auc = 0.7612244897959184
User 36404 AUC after training: 0.760204081632653
User 36404 does not improve AUC. Reverting changes.
Training on augumented user 74650 27/50 current_auc = 0.7612244897959184
User 74650 AUC after training: 0.7612244897959184
User 74650 does not improve AUC. Reverting changes.
Training on augumented user 125340 28/50 current_auc = 0.7612244897959184
User 125340 AUC after training: 0.7591836734693878
User 125340 does not improve AUC. Reverting changes.
Training on augumented user 20481 29/50 current_auc = 0.7612244897959184
User 20481 AUC after training: 0.7591836734693878
User 20481 does not improve AUC. Reverting changes.
Training on augumented user 131925 30/50 current_auc = 0.7612244897959184
User 131925 AUC after training: 0.7612244897959184
User 131925 does not improve AUC. Reverting changes.
Training on augumented user 99028 31/50 current_auc = 0.7612244897959184
User 99028 AUC after training: 0.760204081632653
User 99028 does not improve AUC. Reverting changes.
Training on augumented user 131960 32/50 current_auc = 0.7612244897959184
User 131960 AUC after training: 0.760204081632653
User 131960 does not improve AUC. Reverting changes.
Training on augumented user 72516 33/50 current_auc = 0.7612244897959184
User 72516 AUC after training: 0.7612244897959184
User 72516 does not improve AUC. Reverting changes.
Training on augumented user 68271 34/50 current_auc = 0.7612244897959184
User 68271 AUC after training: 0.7581632653061225
User 68271 does not improve AUC. Reverting changes.
Training on augumented user 12131 35/50 current_auc = 0.7612244897959184
User 12131 AUC after training: 0.7581632653061224
User 12131 does not improve AUC. Reverting changes.
Training on augumented user 87661 36/50 current_auc = 0.7612244897959184
User 87661 AUC after training: 0.7612244897959184
User 87661 does not improve AUC. Reverting changes.
Training on augumented user 61939 37/50 current_auc = 0.7612244897959184
User 61939 AUC after training: 0.7581632653061225
User 61939 does not improve AUC. Reverting changes.
Training on augumented user 38867 38/50 current_auc = 0.7612244897959184
User 38867 AUC after training: 0.760204081632653
User 38867 does not improve AUC. Reverting changes.
Training on augumented user 74869 39/50 current_auc = 0.7612244897959184
User 74869 AUC after training: 0.7591836734693878
User 74869 does not improve AUC. Reverting changes.
Training on augumented user 97221 40/50 current_auc = 0.7612244897959184
User 97221 AUC after training: 0.7612244897959184
User 97221 does not improve AUC. Reverting changes.
Training on augumented user 5154 41/50 current_auc = 0.7612244897959184
User 5154 AUC after training: 0.7612244897959184
User 5154 does not improve AUC. Reverting changes.
Training on augumented user 40803 42/50 current_auc = 0.7612244897959184
User 40803 AUC after training: 0.7602040816326531
User 40803 does not improve AUC. Reverting changes.
Training on augumented user 1610 43/50 current_auc = 0.7612244897959184
User 1610 AUC after training: 0.7591836734693878
User 1610 does not improve AUC. Reverting changes.
Training on augumented user 131055 44/50 current_auc = 0.7612244897959184
User 131055 AUC after training: 0.7591836734693878
User 131055 does not improve AUC. Reverting changes.
Training on augumented user 16021 45/50 current_auc = 0.7612244897959184
User 16021 AUC after training: 0.7591836734693878
User 16021 does not improve AUC. Reverting changes.
Training on augumented user 134324 46/50 current_auc = 0.7612244897959184
User 134324 AUC after training: 0.760204081632653
User 134324 does not improve AUC. Reverting changes.
Training on augumented user 53648 47/50 current_auc = 0.7612244897959184
User 53648 AUC after training: 0.7591836734693878
User 53648 does not improve AUC. Reverting changes.
Training on augumented user 15586 48/50 current_auc = 0.7612244897959184
User 15586 AUC after training: 0.7571428571428571
User 15586 does not improve AUC. Reverting changes.
Training on augumented user 44062 49/50 current_auc = 0.7612244897959184
User 44062 AUC after training: 0.7602040816326531
User 44062 does not improve AUC. Reverting changes.
[2024-12-02 19:20:55.338751] start test user 128546 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:55.939512] start test user 128546 189/567 recall augumented users by random, augumented_users = [94405, 66885, 51446, 93457, 9811, 87441, 138001, 112950, 24262, 90055, 110445, 75011, 52222, 81640, 80894, 120338, 119822, 125473, 109603, 87094, 97285, 106212, 52235, 113033, 98748, 49018, 44306, 1716, 29553, 19123, 27004, 121847, 49899, 97601, 870, 37520, 28106, 136750, 37012, 14408, 106844, 84811, 72759, 57122, 88180, 36180, 102613, 108883, 67991, 87041]
[2024-12-02 19:20:55.956071] user = 128546 Cloud 189/567
[2024-12-02 19:20:55.968057] user = 128546 Local 189/567
[2024-12-02 19:20:55.995589] user = 128546 Local+ 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:58.901175] user = 128546 MPDA- 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3870967741935484
Training on augumented user 94405 0/50 current_auc = 0.3870967741935484
User 94405 AUC after training: 0.3870967741935484
User 94405 does not improve AUC. Reverting changes.
Training on augumented user 66885 1/50 current_auc = 0.3870967741935484
User 66885 AUC after training: 0.3844086021505376
User 66885 does not improve AUC. Reverting changes.
Training on augumented user 51446 2/50 current_auc = 0.3870967741935484
User 51446 AUC after training: 0.3897849462365591
User 51446 improves AUC. Keeping the model.
Training on augumented user 93457 3/50 current_auc = 0.3897849462365591
User 93457 AUC after training: 0.3870967741935484
User 93457 does not improve AUC. Reverting changes.
Training on augumented user 9811 4/50 current_auc = 0.3897849462365591
User 9811 AUC after training: 0.3897849462365591
User 9811 does not improve AUC. Reverting changes.
Training on augumented user 87441 5/50 current_auc = 0.3897849462365591
User 87441 AUC after training: 0.3790322580645162
User 87441 does not improve AUC. Reverting changes.
Training on augumented user 138001 6/50 current_auc = 0.3897849462365591
User 138001 AUC after training: 0.3870967741935484
User 138001 does not improve AUC. Reverting changes.
Training on augumented user 112950 7/50 current_auc = 0.3897849462365591
User 112950 AUC after training: 0.3897849462365591
User 112950 does not improve AUC. Reverting changes.
Training on augumented user 24262 8/50 current_auc = 0.3897849462365591
User 24262 AUC after training: 0.3844086021505376
User 24262 does not improve AUC. Reverting changes.
Training on augumented user 90055 9/50 current_auc = 0.3897849462365591
User 90055 AUC after training: 0.3897849462365591
User 90055 does not improve AUC. Reverting changes.
Training on augumented user 110445 10/50 current_auc = 0.3897849462365591
User 110445 AUC after training: 0.3817204301075269
User 110445 does not improve AUC. Reverting changes.
Training on augumented user 75011 11/50 current_auc = 0.3897849462365591
User 75011 AUC after training: 0.38709677419354843
User 75011 does not improve AUC. Reverting changes.
Training on augumented user 52222 12/50 current_auc = 0.3897849462365591
User 52222 AUC after training: 0.3844086021505376
User 52222 does not improve AUC. Reverting changes.
Training on augumented user 81640 13/50 current_auc = 0.3897849462365591
User 81640 AUC after training: 0.3817204301075269
User 81640 does not improve AUC. Reverting changes.
Training on augumented user 80894 14/50 current_auc = 0.3897849462365591
User 80894 AUC after training: 0.3817204301075269
User 80894 does not improve AUC. Reverting changes.
Training on augumented user 120338 15/50 current_auc = 0.3897849462365591
User 120338 AUC after training: 0.3844086021505376
User 120338 does not improve AUC. Reverting changes.
Training on augumented user 119822 16/50 current_auc = 0.3897849462365591
User 119822 AUC after training: 0.3844086021505377
User 119822 does not improve AUC. Reverting changes.
Training on augumented user 125473 17/50 current_auc = 0.3897849462365591
User 125473 AUC after training: 0.3844086021505376
User 125473 does not improve AUC. Reverting changes.
Training on augumented user 109603 18/50 current_auc = 0.3897849462365591
User 109603 AUC after training: 0.3870967741935484
User 109603 does not improve AUC. Reverting changes.
Training on augumented user 87094 19/50 current_auc = 0.3897849462365591
User 87094 AUC after training: 0.3844086021505376
User 87094 does not improve AUC. Reverting changes.
Training on augumented user 97285 20/50 current_auc = 0.3897849462365591
User 97285 AUC after training: 0.3763440860215054
User 97285 does not improve AUC. Reverting changes.
Training on augumented user 106212 21/50 current_auc = 0.3897849462365591
User 106212 AUC after training: 0.3870967741935484
User 106212 does not improve AUC. Reverting changes.
Training on augumented user 52235 22/50 current_auc = 0.3897849462365591
User 52235 AUC after training: 0.3844086021505376
User 52235 does not improve AUC. Reverting changes.
Training on augumented user 113033 23/50 current_auc = 0.3897849462365591
User 113033 AUC after training: 0.3870967741935484
User 113033 does not improve AUC. Reverting changes.
Training on augumented user 98748 24/50 current_auc = 0.3897849462365591
User 98748 AUC after training: 0.3924731182795699
User 98748 improves AUC. Keeping the model.
Training on augumented user 49018 25/50 current_auc = 0.3924731182795699
User 49018 AUC after training: 0.3924731182795699
User 49018 does not improve AUC. Reverting changes.
Training on augumented user 44306 26/50 current_auc = 0.3924731182795699
User 44306 AUC after training: 0.3924731182795699
User 44306 does not improve AUC. Reverting changes.
Training on augumented user 1716 27/50 current_auc = 0.3924731182795699
User 1716 AUC after training: 0.3924731182795699
User 1716 does not improve AUC. Reverting changes.
Training on augumented user 29553 28/50 current_auc = 0.3924731182795699
User 29553 AUC after training: 0.3924731182795699
User 29553 does not improve AUC. Reverting changes.
Training on augumented user 19123 29/50 current_auc = 0.3924731182795699
User 19123 AUC after training: 0.3978494623655914
User 19123 improves AUC. Keeping the model.
Training on augumented user 27004 30/50 current_auc = 0.3978494623655914
User 27004 AUC after training: 0.3951612903225806
User 27004 does not improve AUC. Reverting changes.
Training on augumented user 121847 31/50 current_auc = 0.3978494623655914
User 121847 AUC after training: 0.3978494623655914
User 121847 does not improve AUC. Reverting changes.
Training on augumented user 49899 32/50 current_auc = 0.3978494623655914
User 49899 AUC after training: 0.3978494623655914
User 49899 does not improve AUC. Reverting changes.
Training on augumented user 97601 33/50 current_auc = 0.3978494623655914
User 97601 AUC after training: 0.3978494623655914
User 97601 does not improve AUC. Reverting changes.
Training on augumented user 870 34/50 current_auc = 0.3978494623655914
User 870 AUC after training: 0.3897849462365591
User 870 does not improve AUC. Reverting changes.
Training on augumented user 37520 35/50 current_auc = 0.3978494623655914
User 37520 AUC after training: 0.3951612903225806
User 37520 does not improve AUC. Reverting changes.
Training on augumented user 28106 36/50 current_auc = 0.3978494623655914
User 28106 AUC after training: 0.3978494623655914
User 28106 does not improve AUC. Reverting changes.
Training on augumented user 136750 37/50 current_auc = 0.3978494623655914
User 136750 AUC after training: 0.3951612903225806
User 136750 does not improve AUC. Reverting changes.
Training on augumented user 37012 38/50 current_auc = 0.3978494623655914
User 37012 AUC after training: 0.40053763440860213
User 37012 improves AUC. Keeping the model.
Training on augumented user 14408 39/50 current_auc = 0.40053763440860213
User 14408 AUC after training: 0.3951612903225806
User 14408 does not improve AUC. Reverting changes.
Training on augumented user 106844 40/50 current_auc = 0.40053763440860213
User 106844 AUC after training: 0.3978494623655914
User 106844 does not improve AUC. Reverting changes.
Training on augumented user 84811 41/50 current_auc = 0.40053763440860213
User 84811 AUC after training: 0.3951612903225806
User 84811 does not improve AUC. Reverting changes.
Training on augumented user 72759 42/50 current_auc = 0.40053763440860213
User 72759 AUC after training: 0.3951612903225806
User 72759 does not improve AUC. Reverting changes.
Training on augumented user 57122 43/50 current_auc = 0.40053763440860213
User 57122 AUC after training: 0.3978494623655914
User 57122 does not improve AUC. Reverting changes.
Training on augumented user 88180 44/50 current_auc = 0.40053763440860213
User 88180 AUC after training: 0.3951612903225806
User 88180 does not improve AUC. Reverting changes.
Training on augumented user 36180 45/50 current_auc = 0.40053763440860213
User 36180 AUC after training: 0.3978494623655914
User 36180 does not improve AUC. Reverting changes.
Training on augumented user 102613 46/50 current_auc = 0.40053763440860213
User 102613 AUC after training: 0.3951612903225806
User 102613 does not improve AUC. Reverting changes.
Training on augumented user 108883 47/50 current_auc = 0.40053763440860213
User 108883 AUC after training: 0.3951612903225806
User 108883 does not improve AUC. Reverting changes.
Training on augumented user 67991 48/50 current_auc = 0.40053763440860213
User 67991 AUC after training: 0.3978494623655914
User 67991 does not improve AUC. Reverting changes.
Training on augumented user 87041 49/50 current_auc = 0.40053763440860213
User 87041 AUC after training: 0.3978494623655914
User 87041 does not improve AUC. Reverting changes.
[2024-12-02 19:21:27.590590] start test user 128596 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:28.042215] start test user 128596 190/567 recall augumented users by random, augumented_users = [90787, 107849, 118743, 137949, 64811, 84715, 82798, 82945, 9176, 131944, 62807, 40010, 67189, 57587, 132651, 111299, 46410, 18708, 79289, 92068, 97305, 44856, 87585, 100429, 104260, 109685, 71816, 52419, 137253, 52915, 77809, 43792, 72110, 65552, 56342, 106253, 45799, 112425, 86198, 77108, 92767, 2064, 42402, 49590, 51812, 80141, 117273, 138201, 44033, 27463]
[2024-12-02 19:21:28.056924] user = 128596 Cloud 190/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:28.072885] user = 128596 Local 190/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:28.088707] user = 128596 Local+ 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:30.142833] user = 128596 MPDA- 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 90787 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90787 AUC after training: 0.5
User 90787 does not improve AUC. Reverting changes.
Training on augumented user 107849 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107849 AUC after training: 0.5
User 107849 does not improve AUC. Reverting changes.
Training on augumented user 118743 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118743 AUC after training: 0.5
User 118743 does not improve AUC. Reverting changes.
Training on augumented user 137949 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137949 AUC after training: 0.5
User 137949 does not improve AUC. Reverting changes.
Training on augumented user 64811 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64811 AUC after training: 0.5
User 64811 does not improve AUC. Reverting changes.
Training on augumented user 84715 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84715 AUC after training: 0.5
User 84715 does not improve AUC. Reverting changes.
Training on augumented user 82798 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82798 AUC after training: 0.5
User 82798 does not improve AUC. Reverting changes.
Training on augumented user 82945 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82945 AUC after training: 0.5
User 82945 does not improve AUC. Reverting changes.
Training on augumented user 9176 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9176 AUC after training: 0.5
User 9176 does not improve AUC. Reverting changes.
Training on augumented user 131944 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131944 AUC after training: 0.5
User 131944 does not improve AUC. Reverting changes.
Training on augumented user 62807 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62807 AUC after training: 0.5
User 62807 does not improve AUC. Reverting changes.
Training on augumented user 40010 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40010 AUC after training: 0.5
User 40010 does not improve AUC. Reverting changes.
Training on augumented user 67189 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67189 AUC after training: 0.5
User 67189 does not improve AUC. Reverting changes.
Training on augumented user 57587 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57587 AUC after training: 0.5
User 57587 does not improve AUC. Reverting changes.
Training on augumented user 132651 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132651 AUC after training: 0.5
User 132651 does not improve AUC. Reverting changes.
Training on augumented user 111299 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111299 AUC after training: 0.5
User 111299 does not improve AUC. Reverting changes.
Training on augumented user 46410 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46410 AUC after training: 0.5
User 46410 does not improve AUC. Reverting changes.
Training on augumented user 18708 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18708 AUC after training: 0.5
User 18708 does not improve AUC. Reverting changes.
Training on augumented user 79289 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79289 AUC after training: 0.5
User 79289 does not improve AUC. Reverting changes.
Training on augumented user 92068 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92068 AUC after training: 0.5
User 92068 does not improve AUC. Reverting changes.
Training on augumented user 97305 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97305 AUC after training: 0.5
User 97305 does not improve AUC. Reverting changes.
Training on augumented user 44856 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44856 AUC after training: 0.5
User 44856 does not improve AUC. Reverting changes.
Training on augumented user 87585 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87585 AUC after training: 0.5
User 87585 does not improve AUC. Reverting changes.
Training on augumented user 100429 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100429 AUC after training: 0.5
User 100429 does not improve AUC. Reverting changes.
Training on augumented user 104260 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104260 AUC after training: 0.5
User 104260 does not improve AUC. Reverting changes.
Training on augumented user 109685 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109685 AUC after training: 0.5
User 109685 does not improve AUC. Reverting changes.
Training on augumented user 71816 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71816 AUC after training: 0.5
User 71816 does not improve AUC. Reverting changes.
Training on augumented user 52419 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52419 AUC after training: 0.5
User 52419 does not improve AUC. Reverting changes.
Training on augumented user 137253 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137253 AUC after training: 0.5
User 137253 does not improve AUC. Reverting changes.
Training on augumented user 52915 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52915 AUC after training: 0.5
User 52915 does not improve AUC. Reverting changes.
Training on augumented user 77809 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77809 AUC after training: 0.5
User 77809 does not improve AUC. Reverting changes.
Training on augumented user 43792 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43792 AUC after training: 0.5
User 43792 does not improve AUC. Reverting changes.
Training on augumented user 72110 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72110 AUC after training: 0.5
User 72110 does not improve AUC. Reverting changes.
Training on augumented user 65552 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65552 AUC after training: 0.5
User 65552 does not improve AUC. Reverting changes.
Training on augumented user 56342 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56342 AUC after training: 0.5
User 56342 does not improve AUC. Reverting changes.
Training on augumented user 106253 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106253 AUC after training: 0.5
User 106253 does not improve AUC. Reverting changes.
Training on augumented user 45799 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45799 AUC after training: 0.5
User 45799 does not improve AUC. Reverting changes.
Training on augumented user 112425 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112425 AUC after training: 0.5
User 112425 does not improve AUC. Reverting changes.
Training on augumented user 86198 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86198 AUC after training: 0.5
User 86198 does not improve AUC. Reverting changes.
Training on augumented user 77108 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77108 AUC after training: 0.5
User 77108 does not improve AUC. Reverting changes.
Training on augumented user 92767 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92767 AUC after training: 0.5
User 92767 does not improve AUC. Reverting changes.
Training on augumented user 2064 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2064 AUC after training: 0.5
User 2064 does not improve AUC. Reverting changes.
Training on augumented user 42402 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42402 AUC after training: 0.5
User 42402 does not improve AUC. Reverting changes.
Training on augumented user 49590 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49590 AUC after training: 0.5
User 49590 does not improve AUC. Reverting changes.
Training on augumented user 51812 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51812 AUC after training: 0.5
User 51812 does not improve AUC. Reverting changes.
Training on augumented user 80141 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80141 AUC after training: 0.5
User 80141 does not improve AUC. Reverting changes.
Training on augumented user 117273 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117273 AUC after training: 0.5
User 117273 does not improve AUC. Reverting changes.
Training on augumented user 138201 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138201 AUC after training: 0.5
User 138201 does not improve AUC. Reverting changes.
Training on augumented user 44033 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44033 AUC after training: 0.5
User 44033 does not improve AUC. Reverting changes.
Training on augumented user 27463 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27463 AUC after training: 0.5
User 27463 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:57.274009] start test user 128630 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:57.720283] start test user 128630 191/567 recall augumented users by random, augumented_users = [95184, 44075, 50978, 6895, 46372, 62856, 29538, 84671, 97619, 137368, 22868, 42706, 84337, 102541, 7662, 809, 96024, 11467, 2186, 76390, 58762, 115191, 24692, 113961, 92262, 6602, 135415, 14520, 30712, 58066, 22531, 114668, 71992, 98454, 60164, 127617, 29428, 83245, 63475, 138019, 98566, 102479, 6237, 18069, 91436, 119066, 89872, 46062, 64321, 47246]
[2024-12-02 19:21:57.735782] user = 128630 Cloud 191/567
[2024-12-02 19:21:57.747207] user = 128630 Local 191/567
[2024-12-02 19:21:57.852358] user = 128630 Local+ 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:00.241089] user = 128630 MPDA- 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4856770833333333
Training on augumented user 95184 0/50 current_auc = 0.4856770833333333
User 95184 AUC after training: 0.4856770833333333
User 95184 does not improve AUC. Reverting changes.
Training on augumented user 44075 1/50 current_auc = 0.4856770833333333
User 44075 AUC after training: 0.484375
User 44075 does not improve AUC. Reverting changes.
Training on augumented user 50978 2/50 current_auc = 0.4856770833333333
User 50978 AUC after training: 0.4869791666666667
User 50978 improves AUC. Keeping the model.
Training on augumented user 6895 3/50 current_auc = 0.4869791666666667
User 6895 AUC after training: 0.48697916666666674
User 6895 improves AUC. Keeping the model.
Training on augumented user 46372 4/50 current_auc = 0.48697916666666674
User 46372 AUC after training: 0.48697916666666674
User 46372 does not improve AUC. Reverting changes.
Training on augumented user 62856 5/50 current_auc = 0.48697916666666674
User 62856 AUC after training: 0.49088541666666674
User 62856 improves AUC. Keeping the model.
Training on augumented user 29538 6/50 current_auc = 0.49088541666666674
User 29538 AUC after training: 0.48958333333333337
User 29538 does not improve AUC. Reverting changes.
Training on augumented user 84671 7/50 current_auc = 0.49088541666666674
User 84671 AUC after training: 0.49088541666666674
User 84671 does not improve AUC. Reverting changes.
Training on augumented user 97619 8/50 current_auc = 0.49088541666666674
User 97619 AUC after training: 0.48828125
User 97619 does not improve AUC. Reverting changes.
Training on augumented user 137368 9/50 current_auc = 0.49088541666666674
User 137368 AUC after training: 0.48958333333333337
User 137368 does not improve AUC. Reverting changes.
Training on augumented user 22868 10/50 current_auc = 0.49088541666666674
User 22868 AUC after training: 0.49088541666666674
User 22868 does not improve AUC. Reverting changes.
Training on augumented user 42706 11/50 current_auc = 0.49088541666666674
User 42706 AUC after training: 0.48697916666666663
User 42706 does not improve AUC. Reverting changes.
Training on augumented user 84337 12/50 current_auc = 0.49088541666666674
User 84337 AUC after training: 0.48958333333333337
User 84337 does not improve AUC. Reverting changes.
Training on augumented user 102541 13/50 current_auc = 0.49088541666666674
User 102541 AUC after training: 0.48958333333333337
User 102541 does not improve AUC. Reverting changes.
Training on augumented user 7662 14/50 current_auc = 0.49088541666666674
User 7662 AUC after training: 0.484375
User 7662 does not improve AUC. Reverting changes.
Training on augumented user 809 15/50 current_auc = 0.49088541666666674
User 809 AUC after training: 0.48958333333333337
User 809 does not improve AUC. Reverting changes.
Training on augumented user 96024 16/50 current_auc = 0.49088541666666674
User 96024 AUC after training: 0.48893229166666674
User 96024 does not improve AUC. Reverting changes.
Training on augumented user 11467 17/50 current_auc = 0.49088541666666674
User 11467 AUC after training: 0.48958333333333337
User 11467 does not improve AUC. Reverting changes.
Training on augumented user 2186 18/50 current_auc = 0.49088541666666674
User 2186 AUC after training: 0.48958333333333337
User 2186 does not improve AUC. Reverting changes.
Training on augumented user 76390 19/50 current_auc = 0.49088541666666674
User 76390 AUC after training: 0.48958333333333337
User 76390 does not improve AUC. Reverting changes.
Training on augumented user 58762 20/50 current_auc = 0.49088541666666674
User 58762 AUC after training: 0.48958333333333337
User 58762 does not improve AUC. Reverting changes.
Training on augumented user 115191 21/50 current_auc = 0.49088541666666674
User 115191 AUC after training: 0.48958333333333337
User 115191 does not improve AUC. Reverting changes.
Training on augumented user 24692 22/50 current_auc = 0.49088541666666674
User 24692 AUC after training: 0.4869791666666667
User 24692 does not improve AUC. Reverting changes.
Training on augumented user 113961 23/50 current_auc = 0.49088541666666674
User 113961 AUC after training: 0.48828125
User 113961 does not improve AUC. Reverting changes.
Training on augumented user 92262 24/50 current_auc = 0.49088541666666674
User 92262 AUC after training: 0.4869791666666667
User 92262 does not improve AUC. Reverting changes.
Training on augumented user 6602 25/50 current_auc = 0.49088541666666674
User 6602 AUC after training: 0.484375
User 6602 does not improve AUC. Reverting changes.
Training on augumented user 135415 26/50 current_auc = 0.49088541666666674
User 135415 AUC after training: 0.49088541666666674
User 135415 does not improve AUC. Reverting changes.
Training on augumented user 14520 27/50 current_auc = 0.49088541666666674
User 14520 AUC after training: 0.48958333333333337
User 14520 does not improve AUC. Reverting changes.
Training on augumented user 30712 28/50 current_auc = 0.49088541666666674
User 30712 AUC after training: 0.48958333333333337
User 30712 does not improve AUC. Reverting changes.
Training on augumented user 58066 29/50 current_auc = 0.49088541666666674
User 58066 AUC after training: 0.48828125
User 58066 does not improve AUC. Reverting changes.
Training on augumented user 22531 30/50 current_auc = 0.49088541666666674
User 22531 AUC after training: 0.48828125
User 22531 does not improve AUC. Reverting changes.
Training on augumented user 114668 31/50 current_auc = 0.49088541666666674
User 114668 AUC after training: 0.48567708333333337
User 114668 does not improve AUC. Reverting changes.
Training on augumented user 71992 32/50 current_auc = 0.49088541666666674
User 71992 AUC after training: 0.4856770833333333
User 71992 does not improve AUC. Reverting changes.
Training on augumented user 98454 33/50 current_auc = 0.49088541666666674
User 98454 AUC after training: 0.48958333333333337
User 98454 does not improve AUC. Reverting changes.
Training on augumented user 60164 34/50 current_auc = 0.49088541666666674
User 60164 AUC after training: 0.49088541666666674
User 60164 does not improve AUC. Reverting changes.
Training on augumented user 127617 35/50 current_auc = 0.49088541666666674
User 127617 AUC after training: 0.48958333333333337
User 127617 does not improve AUC. Reverting changes.
Training on augumented user 29428 36/50 current_auc = 0.49088541666666674
User 29428 AUC after training: 0.4869791666666667
User 29428 does not improve AUC. Reverting changes.
Training on augumented user 83245 37/50 current_auc = 0.49088541666666674
User 83245 AUC after training: 0.48828125
User 83245 does not improve AUC. Reverting changes.
Training on augumented user 63475 38/50 current_auc = 0.49088541666666674
User 63475 AUC after training: 0.48958333333333337
User 63475 does not improve AUC. Reverting changes.
Training on augumented user 138019 39/50 current_auc = 0.49088541666666674
User 138019 AUC after training: 0.4895833333333333
User 138019 does not improve AUC. Reverting changes.
Training on augumented user 98566 40/50 current_auc = 0.49088541666666674
User 98566 AUC after training: 0.49088541666666674
User 98566 does not improve AUC. Reverting changes.
Training on augumented user 102479 41/50 current_auc = 0.49088541666666674
User 102479 AUC after training: 0.48958333333333337
User 102479 does not improve AUC. Reverting changes.
Training on augumented user 6237 42/50 current_auc = 0.49088541666666674
User 6237 AUC after training: 0.4869791666666667
User 6237 does not improve AUC. Reverting changes.
Training on augumented user 18069 43/50 current_auc = 0.49088541666666674
User 18069 AUC after training: 0.484375
User 18069 does not improve AUC. Reverting changes.
Training on augumented user 91436 44/50 current_auc = 0.49088541666666674
User 91436 AUC after training: 0.48958333333333337
User 91436 does not improve AUC. Reverting changes.
Training on augumented user 119066 45/50 current_auc = 0.49088541666666674
User 119066 AUC after training: 0.48958333333333337
User 119066 does not improve AUC. Reverting changes.
Training on augumented user 89872 46/50 current_auc = 0.49088541666666674
User 89872 AUC after training: 0.49088541666666674
User 89872 does not improve AUC. Reverting changes.
Training on augumented user 46062 47/50 current_auc = 0.49088541666666674
User 46062 AUC after training: 0.48958333333333337
User 46062 does not improve AUC. Reverting changes.
Training on augumented user 64321 48/50 current_auc = 0.49088541666666674
User 64321 AUC after training: 0.4869791666666667
User 64321 does not improve AUC. Reverting changes.
Training on augumented user 47246 49/50 current_auc = 0.49088541666666674
User 47246 AUC after training: 0.48958333333333337
User 47246 does not improve AUC. Reverting changes.
[2024-12-02 19:22:27.697022] start test user 128666 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:28.226239] start test user 128666 192/567 recall augumented users by random, augumented_users = [66384, 38745, 114743, 107029, 133263, 123118, 63655, 78831, 133086, 103278, 75593, 121049, 38610, 97863, 136058, 102742, 94330, 47210, 112015, 110883, 91459, 91988, 118518, 112392, 43740, 6113, 95634, 14666, 99637, 33262, 121137, 35852, 38623, 136705, 135445, 78346, 108378, 83742, 54443, 45115, 117414, 6793, 70865, 67854, 126079, 54125, 126804, 133593, 100345, 133752]
[2024-12-02 19:22:28.242497] user = 128666 Cloud 192/567
[2024-12-02 19:22:28.256759] user = 128666 Local 192/567
[2024-12-02 19:22:28.288052] user = 128666 Local+ 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:30.656739] user = 128666 MPDA- 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8255991840897501
Training on augumented user 66384 0/50 current_auc = 0.8255991840897501
User 66384 AUC after training: 0.8255991840897501
User 66384 does not improve AUC. Reverting changes.
Training on augumented user 38745 1/50 current_auc = 0.8255991840897501
User 38745 AUC after training: 0.8245792962774094
User 38745 does not improve AUC. Reverting changes.
Training on augumented user 114743 2/50 current_auc = 0.8255991840897501
User 114743 AUC after training: 0.8255991840897501
User 114743 does not improve AUC. Reverting changes.
Training on augumented user 107029 3/50 current_auc = 0.8255991840897501
User 107029 AUC after training: 0.8250892401835798
User 107029 does not improve AUC. Reverting changes.
Training on augumented user 133263 4/50 current_auc = 0.8255991840897501
User 133263 AUC after training: 0.8245792962774094
User 133263 does not improve AUC. Reverting changes.
Training on augumented user 123118 5/50 current_auc = 0.8255991840897501
User 123118 AUC after training: 0.8245792962774094
User 123118 does not improve AUC. Reverting changes.
Training on augumented user 63655 6/50 current_auc = 0.8255991840897501
User 63655 AUC after training: 0.8255991840897501
User 63655 does not improve AUC. Reverting changes.
Training on augumented user 78831 7/50 current_auc = 0.8255991840897501
User 78831 AUC after training: 0.8250892401835798
User 78831 does not improve AUC. Reverting changes.
Training on augumented user 133086 8/50 current_auc = 0.8255991840897501
User 133086 AUC after training: 0.8255991840897501
User 133086 does not improve AUC. Reverting changes.
Training on augumented user 103278 9/50 current_auc = 0.8255991840897501
User 103278 AUC after training: 0.8240693523712391
User 103278 does not improve AUC. Reverting changes.
Training on augumented user 75593 10/50 current_auc = 0.8255991840897501
User 75593 AUC after training: 0.8255991840897501
User 75593 does not improve AUC. Reverting changes.
Training on augumented user 121049 11/50 current_auc = 0.8255991840897501
User 121049 AUC after training: 0.8245792962774094
User 121049 does not improve AUC. Reverting changes.
Training on augumented user 38610 12/50 current_auc = 0.8255991840897501
User 38610 AUC after training: 0.8245792962774094
User 38610 does not improve AUC. Reverting changes.
Training on augumented user 97863 13/50 current_auc = 0.8255991840897501
User 97863 AUC after training: 0.8255991840897501
User 97863 does not improve AUC. Reverting changes.
Training on augumented user 136058 14/50 current_auc = 0.8255991840897501
User 136058 AUC after training: 0.8255991840897501
User 136058 does not improve AUC. Reverting changes.
Training on augumented user 102742 15/50 current_auc = 0.8255991840897501
User 102742 AUC after training: 0.8245792962774094
User 102742 does not improve AUC. Reverting changes.
Training on augumented user 94330 16/50 current_auc = 0.8255991840897501
User 94330 AUC after training: 0.8255991840897502
User 94330 improves AUC. Keeping the model.
Training on augumented user 47210 17/50 current_auc = 0.8255991840897502
User 47210 AUC after training: 0.8255991840897502
User 47210 does not improve AUC. Reverting changes.
Training on augumented user 112015 18/50 current_auc = 0.8255991840897502
User 112015 AUC after training: 0.8255991840897502
User 112015 does not improve AUC. Reverting changes.
Training on augumented user 110883 19/50 current_auc = 0.8255991840897502
User 110883 AUC after training: 0.8255991840897502
User 110883 does not improve AUC. Reverting changes.
Training on augumented user 91459 20/50 current_auc = 0.8255991840897502
User 91459 AUC after training: 0.8255991840897502
User 91459 does not improve AUC. Reverting changes.
Training on augumented user 91988 21/50 current_auc = 0.8255991840897502
User 91988 AUC after training: 0.8261091279959204
User 91988 improves AUC. Keeping the model.
Training on augumented user 118518 22/50 current_auc = 0.8261091279959204
User 118518 AUC after training: 0.8261091279959204
User 118518 does not improve AUC. Reverting changes.
Training on augumented user 112392 23/50 current_auc = 0.8261091279959204
User 112392 AUC after training: 0.8266190719020908
User 112392 improves AUC. Keeping the model.
Training on augumented user 43740 24/50 current_auc = 0.8266190719020908
User 43740 AUC after training: 0.8271290158082611
User 43740 improves AUC. Keeping the model.
Training on augumented user 6113 25/50 current_auc = 0.8271290158082611
User 6113 AUC after training: 0.8271290158082611
User 6113 does not improve AUC. Reverting changes.
Training on augumented user 95634 26/50 current_auc = 0.8271290158082611
User 95634 AUC after training: 0.8266190719020907
User 95634 does not improve AUC. Reverting changes.
Training on augumented user 14666 27/50 current_auc = 0.8271290158082611
User 14666 AUC after training: 0.8266190719020908
User 14666 does not improve AUC. Reverting changes.
Training on augumented user 99637 28/50 current_auc = 0.8271290158082611
User 99637 AUC after training: 0.8266190719020908
User 99637 does not improve AUC. Reverting changes.
Training on augumented user 33262 29/50 current_auc = 0.8271290158082611
User 33262 AUC after training: 0.8271290158082611
User 33262 does not improve AUC. Reverting changes.
Training on augumented user 121137 30/50 current_auc = 0.8271290158082611
User 121137 AUC after training: 0.8266190719020908
User 121137 does not improve AUC. Reverting changes.
Training on augumented user 35852 31/50 current_auc = 0.8271290158082611
User 35852 AUC after training: 0.827129015808261
User 35852 does not improve AUC. Reverting changes.
Training on augumented user 38623 32/50 current_auc = 0.8271290158082611
User 38623 AUC after training: 0.8266190719020908
User 38623 does not improve AUC. Reverting changes.
Training on augumented user 136705 33/50 current_auc = 0.8271290158082611
User 136705 AUC after training: 0.8261091279959204
User 136705 does not improve AUC. Reverting changes.
Training on augumented user 135445 34/50 current_auc = 0.8271290158082611
User 135445 AUC after training: 0.8271290158082611
User 135445 does not improve AUC. Reverting changes.
Training on augumented user 78346 35/50 current_auc = 0.8271290158082611
User 78346 AUC after training: 0.8261091279959204
User 78346 does not improve AUC. Reverting changes.
Training on augumented user 108378 36/50 current_auc = 0.8271290158082611
User 108378 AUC after training: 0.8271290158082611
User 108378 does not improve AUC. Reverting changes.
Training on augumented user 83742 37/50 current_auc = 0.8271290158082611
User 83742 AUC after training: 0.8261091279959204
User 83742 does not improve AUC. Reverting changes.
Training on augumented user 54443 38/50 current_auc = 0.8271290158082611
User 54443 AUC after training: 0.8266190719020907
User 54443 does not improve AUC. Reverting changes.
Training on augumented user 45115 39/50 current_auc = 0.8271290158082611
User 45115 AUC after training: 0.8261091279959204
User 45115 does not improve AUC. Reverting changes.
Training on augumented user 117414 40/50 current_auc = 0.8271290158082611
User 117414 AUC after training: 0.8271290158082611
User 117414 does not improve AUC. Reverting changes.
Training on augumented user 6793 41/50 current_auc = 0.8271290158082611
User 6793 AUC after training: 0.8261091279959204
User 6793 does not improve AUC. Reverting changes.
Training on augumented user 70865 42/50 current_auc = 0.8271290158082611
User 70865 AUC after training: 0.8261091279959205
User 70865 does not improve AUC. Reverting changes.
Training on augumented user 67854 43/50 current_auc = 0.8271290158082611
User 67854 AUC after training: 0.8271290158082611
User 67854 does not improve AUC. Reverting changes.
Training on augumented user 126079 44/50 current_auc = 0.8271290158082611
User 126079 AUC after training: 0.8271290158082611
User 126079 does not improve AUC. Reverting changes.
Training on augumented user 54125 45/50 current_auc = 0.8271290158082611
User 54125 AUC after training: 0.8271290158082611
User 54125 does not improve AUC. Reverting changes.
Training on augumented user 126804 46/50 current_auc = 0.8271290158082611
User 126804 AUC after training: 0.8266190719020908
User 126804 does not improve AUC. Reverting changes.
Training on augumented user 133593 47/50 current_auc = 0.8271290158082611
User 133593 AUC after training: 0.8261091279959204
User 133593 does not improve AUC. Reverting changes.
Training on augumented user 100345 48/50 current_auc = 0.8271290158082611
User 100345 AUC after training: 0.8261091279959204
User 100345 does not improve AUC. Reverting changes.
Training on augumented user 133752 49/50 current_auc = 0.8271290158082611
User 133752 AUC after training: 0.827129015808261
User 133752 does not improve AUC. Reverting changes.
[2024-12-02 19:23:01.554095] start test user 128721 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:01.982118] start test user 128721 193/567 recall augumented users by random, augumented_users = [113604, 101679, 78200, 104524, 101799, 21142, 97752, 53419, 68762, 8077, 39694, 14427, 21133, 124260, 59752, 26966, 19764, 91549, 131341, 7359, 137366, 20853, 70664, 113330, 82305, 137797, 34636, 123257, 65224, 136914, 41860, 80149, 37357, 107833, 4421, 51750, 42167, 122310, 67413, 56964, 100113, 90286, 100911, 79612, 135151, 52875, 19416, 30402, 110133, 108388]
[2024-12-02 19:23:01.996231] user = 128721 Cloud 193/567
[2024-12-02 19:23:02.005236] user = 128721 Local 193/567
[2024-12-02 19:23:02.023328] user = 128721 Local+ 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:04.869751] user = 128721 MPDA- 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 113604 0/50 current_auc = 0.0
User 113604 AUC after training: 0.0
User 113604 does not improve AUC. Reverting changes.
Training on augumented user 101679 1/50 current_auc = 0.0
User 101679 AUC after training: 0.0
User 101679 does not improve AUC. Reverting changes.
Training on augumented user 78200 2/50 current_auc = 0.0
User 78200 AUC after training: 0.0
User 78200 does not improve AUC. Reverting changes.
Training on augumented user 104524 3/50 current_auc = 0.0
User 104524 AUC after training: 0.0
User 104524 does not improve AUC. Reverting changes.
Training on augumented user 101799 4/50 current_auc = 0.0
User 101799 AUC after training: 0.0
User 101799 does not improve AUC. Reverting changes.
Training on augumented user 21142 5/50 current_auc = 0.0
User 21142 AUC after training: 0.0
User 21142 does not improve AUC. Reverting changes.
Training on augumented user 97752 6/50 current_auc = 0.0
User 97752 AUC after training: 0.0
User 97752 does not improve AUC. Reverting changes.
Training on augumented user 53419 7/50 current_auc = 0.0
User 53419 AUC after training: 0.0
User 53419 does not improve AUC. Reverting changes.
Training on augumented user 68762 8/50 current_auc = 0.0
User 68762 AUC after training: 0.0
User 68762 does not improve AUC. Reverting changes.
Training on augumented user 8077 9/50 current_auc = 0.0
User 8077 AUC after training: 0.0
User 8077 does not improve AUC. Reverting changes.
Training on augumented user 39694 10/50 current_auc = 0.0
User 39694 AUC after training: 0.0
User 39694 does not improve AUC. Reverting changes.
Training on augumented user 14427 11/50 current_auc = 0.0
User 14427 AUC after training: 0.0
User 14427 does not improve AUC. Reverting changes.
Training on augumented user 21133 12/50 current_auc = 0.0
User 21133 AUC after training: 0.0
User 21133 does not improve AUC. Reverting changes.
Training on augumented user 124260 13/50 current_auc = 0.0
User 124260 AUC after training: 0.0
User 124260 does not improve AUC. Reverting changes.
Training on augumented user 59752 14/50 current_auc = 0.0
User 59752 AUC after training: 0.0
User 59752 does not improve AUC. Reverting changes.
Training on augumented user 26966 15/50 current_auc = 0.0
User 26966 AUC after training: 0.0
User 26966 does not improve AUC. Reverting changes.
Training on augumented user 19764 16/50 current_auc = 0.0
User 19764 AUC after training: 0.0
User 19764 does not improve AUC. Reverting changes.
Training on augumented user 91549 17/50 current_auc = 0.0
User 91549 AUC after training: 0.0
User 91549 does not improve AUC. Reverting changes.
Training on augumented user 131341 18/50 current_auc = 0.0
User 131341 AUC after training: 0.0
User 131341 does not improve AUC. Reverting changes.
Training on augumented user 7359 19/50 current_auc = 0.0
User 7359 AUC after training: 0.0
User 7359 does not improve AUC. Reverting changes.
Training on augumented user 137366 20/50 current_auc = 0.0
User 137366 AUC after training: 0.0
User 137366 does not improve AUC. Reverting changes.
Training on augumented user 20853 21/50 current_auc = 0.0
User 20853 AUC after training: 0.0
User 20853 does not improve AUC. Reverting changes.
Training on augumented user 70664 22/50 current_auc = 0.0
User 70664 AUC after training: 0.0
User 70664 does not improve AUC. Reverting changes.
Training on augumented user 113330 23/50 current_auc = 0.0
User 113330 AUC after training: 0.0
User 113330 does not improve AUC. Reverting changes.
Training on augumented user 82305 24/50 current_auc = 0.0
User 82305 AUC after training: 0.0
User 82305 does not improve AUC. Reverting changes.
Training on augumented user 137797 25/50 current_auc = 0.0
User 137797 AUC after training: 0.0
User 137797 does not improve AUC. Reverting changes.
Training on augumented user 34636 26/50 current_auc = 0.0
User 34636 AUC after training: 0.0
User 34636 does not improve AUC. Reverting changes.
Training on augumented user 123257 27/50 current_auc = 0.0
User 123257 AUC after training: 0.0
User 123257 does not improve AUC. Reverting changes.
Training on augumented user 65224 28/50 current_auc = 0.0
User 65224 AUC after training: 0.0
User 65224 does not improve AUC. Reverting changes.
Training on augumented user 136914 29/50 current_auc = 0.0
User 136914 AUC after training: 0.0
User 136914 does not improve AUC. Reverting changes.
Training on augumented user 41860 30/50 current_auc = 0.0
User 41860 AUC after training: 0.0
User 41860 does not improve AUC. Reverting changes.
Training on augumented user 80149 31/50 current_auc = 0.0
User 80149 AUC after training: 0.0
User 80149 does not improve AUC. Reverting changes.
Training on augumented user 37357 32/50 current_auc = 0.0
User 37357 AUC after training: 0.0
User 37357 does not improve AUC. Reverting changes.
Training on augumented user 107833 33/50 current_auc = 0.0
User 107833 AUC after training: 0.0
User 107833 does not improve AUC. Reverting changes.
Training on augumented user 4421 34/50 current_auc = 0.0
User 4421 AUC after training: 0.0
User 4421 does not improve AUC. Reverting changes.
Training on augumented user 51750 35/50 current_auc = 0.0
User 51750 AUC after training: 0.0
User 51750 does not improve AUC. Reverting changes.
Training on augumented user 42167 36/50 current_auc = 0.0
User 42167 AUC after training: 0.0
User 42167 does not improve AUC. Reverting changes.
Training on augumented user 122310 37/50 current_auc = 0.0
User 122310 AUC after training: 0.0
User 122310 does not improve AUC. Reverting changes.
Training on augumented user 67413 38/50 current_auc = 0.0
User 67413 AUC after training: 0.0
User 67413 does not improve AUC. Reverting changes.
Training on augumented user 56964 39/50 current_auc = 0.0
User 56964 AUC after training: 0.0
User 56964 does not improve AUC. Reverting changes.
Training on augumented user 100113 40/50 current_auc = 0.0
User 100113 AUC after training: 0.0
User 100113 does not improve AUC. Reverting changes.
Training on augumented user 90286 41/50 current_auc = 0.0
User 90286 AUC after training: 0.0
User 90286 does not improve AUC. Reverting changes.
Training on augumented user 100911 42/50 current_auc = 0.0
User 100911 AUC after training: 0.0
User 100911 does not improve AUC. Reverting changes.
Training on augumented user 79612 43/50 current_auc = 0.0
User 79612 AUC after training: 0.0
User 79612 does not improve AUC. Reverting changes.
Training on augumented user 135151 44/50 current_auc = 0.0
User 135151 AUC after training: 0.0
User 135151 does not improve AUC. Reverting changes.
Training on augumented user 52875 45/50 current_auc = 0.0
User 52875 AUC after training: 0.0
User 52875 does not improve AUC. Reverting changes.
Training on augumented user 19416 46/50 current_auc = 0.0
User 19416 AUC after training: 0.0
User 19416 does not improve AUC. Reverting changes.
Training on augumented user 30402 47/50 current_auc = 0.0
User 30402 AUC after training: 0.0
User 30402 does not improve AUC. Reverting changes.
Training on augumented user 110133 48/50 current_auc = 0.0
User 110133 AUC after training: 0.0
User 110133 does not improve AUC. Reverting changes.
Training on augumented user 108388 49/50 current_auc = 0.0
User 108388 AUC after training: 0.0
User 108388 does not improve AUC. Reverting changes.
[2024-12-02 19:23:35.531238] start test user 128762 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:36.153496] start test user 128762 194/567 recall augumented users by random, augumented_users = [79908, 6682, 16517, 129550, 22360, 89547, 53187, 126808, 133857, 107613, 7228, 16777, 113655, 21309, 113732, 130832, 104785, 86986, 115184, 69092, 84815, 77685, 129549, 47726, 36098, 45259, 132162, 87909, 116337, 67574, 3828, 58413, 41064, 134278, 44463, 65510, 122443, 119561, 12714, 40069, 87046, 114383, 98866, 110906, 51611, 116205, 124203, 66754, 28330, 66921]
[2024-12-02 19:23:36.176632] user = 128762 Cloud 194/567
[2024-12-02 19:23:36.258506] user = 128762 Local 194/567
[2024-12-02 19:23:36.377725] user = 128762 Local+ 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:38.692391] user = 128762 MPDA- 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7650381056069679
Training on augumented user 79908 0/50 current_auc = 0.7650381056069679
User 79908 AUC after training: 0.7653783342406097
User 79908 improves AUC. Keeping the model.
Training on augumented user 6682 1/50 current_auc = 0.7653783342406097
User 6682 AUC after training: 0.7651741970604247
User 6682 does not improve AUC. Reverting changes.
Training on augumented user 16517 2/50 current_auc = 0.7653783342406097
User 16517 AUC after training: 0.7651741970604247
User 16517 does not improve AUC. Reverting changes.
Training on augumented user 129550 3/50 current_auc = 0.7653783342406097
User 129550 AUC after training: 0.76619488296135
User 129550 improves AUC. Keeping the model.
Training on augumented user 22360 4/50 current_auc = 0.76619488296135
User 22360 AUC after training: 0.765990745781165
User 22360 does not improve AUC. Reverting changes.
Training on augumented user 89547 5/50 current_auc = 0.76619488296135
User 89547 AUC after training: 0.7664670658682635
User 89547 improves AUC. Keeping the model.
Training on augumented user 53187 6/50 current_auc = 0.7664670658682635
User 53187 AUC after training: 0.7666712030484486
User 53187 improves AUC. Keeping the model.
Training on augumented user 126808 7/50 current_auc = 0.7666712030484486
User 126808 AUC after training: 0.7670114316820904
User 126808 improves AUC. Keeping the model.
Training on augumented user 133857 8/50 current_auc = 0.7670114316820904
User 133857 AUC after training: 0.766739248775177
User 133857 does not improve AUC. Reverting changes.
Training on augumented user 107613 9/50 current_auc = 0.7670114316820904
User 107613 AUC after training: 0.7668072945019053
User 107613 does not improve AUC. Reverting changes.
Training on augumented user 7228 10/50 current_auc = 0.7670114316820904
User 7228 AUC after training: 0.7672155688622754
User 7228 improves AUC. Keeping the model.
Training on augumented user 16777 11/50 current_auc = 0.7672155688622754
User 16777 AUC after training: 0.7671475231355471
User 16777 does not improve AUC. Reverting changes.
Training on augumented user 113655 12/50 current_auc = 0.7672155688622754
User 113655 AUC after training: 0.7658546543277083
User 113655 does not improve AUC. Reverting changes.
Training on augumented user 21309 13/50 current_auc = 0.7672155688622754
User 21309 AUC after training: 0.7664670658682635
User 21309 does not improve AUC. Reverting changes.
Training on augumented user 113732 14/50 current_auc = 0.7672155688622754
User 113732 AUC after training: 0.7672155688622755
User 113732 improves AUC. Keeping the model.
Training on augumented user 130832 15/50 current_auc = 0.7672155688622755
User 130832 AUC after training: 0.7670114316820904
User 130832 does not improve AUC. Reverting changes.
Training on augumented user 104785 16/50 current_auc = 0.7672155688622755
User 104785 AUC after training: 0.7672836145890038
User 104785 improves AUC. Keeping the model.
Training on augumented user 86986 17/50 current_auc = 0.7672836145890038
User 86986 AUC after training: 0.7673516603157322
User 86986 improves AUC. Keeping the model.
Training on augumented user 115184 18/50 current_auc = 0.7673516603157322
User 115184 AUC after training: 0.7675217746325531
User 115184 improves AUC. Keeping the model.
Training on augumented user 69092 19/50 current_auc = 0.7675217746325531
User 69092 AUC after training: 0.7673856831790964
User 69092 does not improve AUC. Reverting changes.
Training on augumented user 84815 20/50 current_auc = 0.7675217746325531
User 84815 AUC after training: 0.7661948829613501
User 84815 does not improve AUC. Reverting changes.
Training on augumented user 77685 21/50 current_auc = 0.7675217746325531
User 77685 AUC after training: 0.7669774088187262
User 77685 does not improve AUC. Reverting changes.
Training on augumented user 129549 22/50 current_auc = 0.7675217746325531
User 129549 AUC after training: 0.7674537289058248
User 129549 does not improve AUC. Reverting changes.
Training on augumented user 47726 23/50 current_auc = 0.7675217746325531
User 47726 AUC after training: 0.7674877517691889
User 47726 does not improve AUC. Reverting changes.
Training on augumented user 36098 24/50 current_auc = 0.7675217746325531
User 36098 AUC after training: 0.7662629286880784
User 36098 does not improve AUC. Reverting changes.
Training on augumented user 45259 25/50 current_auc = 0.7675217746325531
User 45259 AUC after training: 0.7676578660860098
User 45259 improves AUC. Keeping the model.
Training on augumented user 132162 26/50 current_auc = 0.7676578660860098
User 132162 AUC after training: 0.7675217746325531
User 132162 does not improve AUC. Reverting changes.
Training on augumented user 87909 27/50 current_auc = 0.7676578660860098
User 87909 AUC after training: 0.7675217746325531
User 87909 does not improve AUC. Reverting changes.
Training on augumented user 116337 28/50 current_auc = 0.7676578660860098
User 116337 AUC after training: 0.7675217746325531
User 116337 does not improve AUC. Reverting changes.
Training on augumented user 67574 29/50 current_auc = 0.7676578660860098
User 67574 AUC after training: 0.7669093630919979
User 67574 does not improve AUC. Reverting changes.
Training on augumented user 3828 30/50 current_auc = 0.7676578660860098
User 3828 AUC after training: 0.7677259118127382
User 3828 improves AUC. Keeping the model.
Training on augumented user 58413 31/50 current_auc = 0.7677259118127382
User 58413 AUC after training: 0.7675557974959173
User 58413 does not improve AUC. Reverting changes.
Training on augumented user 41064 32/50 current_auc = 0.7677259118127382
User 41064 AUC after training: 0.7672495917256397
User 41064 does not improve AUC. Reverting changes.
Training on augumented user 134278 33/50 current_auc = 0.7677259118127382
User 134278 AUC after training: 0.7681682090364725
User 134278 improves AUC. Keeping the model.
Training on augumented user 44463 34/50 current_auc = 0.7681682090364725
User 44463 AUC after training: 0.768440391943386
User 44463 improves AUC. Keeping the model.
Training on augumented user 65510 35/50 current_auc = 0.768440391943386
User 65510 AUC after training: 0.7678620032661949
User 65510 does not improve AUC. Reverting changes.
Training on augumented user 122443 36/50 current_auc = 0.768440391943386
User 122443 AUC after training: 0.7677939575394666
User 122443 does not improve AUC. Reverting changes.
Training on augumented user 119561 37/50 current_auc = 0.768440391943386
User 119561 AUC after training: 0.7674197060424606
User 119561 does not improve AUC. Reverting changes.
Training on augumented user 12714 38/50 current_auc = 0.768440391943386
User 12714 AUC after training: 0.7679640718562875
User 12714 does not improve AUC. Reverting changes.
Training on augumented user 40069 39/50 current_auc = 0.768440391943386
User 40069 AUC after training: 0.7668753402286337
User 40069 does not improve AUC. Reverting changes.
Training on augumented user 87046 40/50 current_auc = 0.768440391943386
User 87046 AUC after training: 0.7683383233532934
User 87046 does not improve AUC. Reverting changes.
Training on augumented user 114383 41/50 current_auc = 0.768440391943386
User 114383 AUC after training: 0.7675898203592815
User 114383 does not improve AUC. Reverting changes.
Training on augumented user 98866 42/50 current_auc = 0.768440391943386
User 98866 AUC after training: 0.7678960261295591
User 98866 does not improve AUC. Reverting changes.
Training on augumented user 110906 43/50 current_auc = 0.768440391943386
User 110906 AUC after training: 0.7682362547632009
User 110906 does not improve AUC. Reverting changes.
Training on augumented user 51611 44/50 current_auc = 0.768440391943386
User 51611 AUC after training: 0.7676238432226457
User 51611 does not improve AUC. Reverting changes.
Training on augumented user 116205 45/50 current_auc = 0.768440391943386
User 116205 AUC after training: 0.7681001633097442
User 116205 does not improve AUC. Reverting changes.
Training on augumented user 124203 46/50 current_auc = 0.768440391943386
User 124203 AUC after training: 0.7682362547632009
User 124203 does not improve AUC. Reverting changes.
Training on augumented user 66754 47/50 current_auc = 0.768440391943386
User 66754 AUC after training: 0.7676578660860098
User 66754 does not improve AUC. Reverting changes.
Training on augumented user 28330 48/50 current_auc = 0.768440391943386
User 28330 AUC after training: 0.7679300489929233
User 28330 does not improve AUC. Reverting changes.
Training on augumented user 66921 49/50 current_auc = 0.768440391943386
User 66921 AUC after training: 0.7681341861731084
User 66921 does not improve AUC. Reverting changes.
[2024-12-02 19:24:07.339924] start test user 128840 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:07.776501] start test user 128840 195/567 recall augumented users by random, augumented_users = [76136, 132048, 25149, 65723, 58942, 47395, 29151, 50592, 36456, 71540, 125621, 12635, 10158, 94711, 33936, 95740, 89798, 33576, 3778, 64957, 101541, 108540, 81145, 3728, 133520, 104668, 129398, 83545, 45854, 63610, 102557, 33107, 7189, 85438, 28883, 80121, 105829, 78718, 85483, 133676, 117433, 135959, 467, 34337, 133561, 44677, 53570, 102941, 56904, 104808]
[2024-12-02 19:24:07.792126] user = 128840 Cloud 195/567
[2024-12-02 19:24:07.819552] user = 128840 Local 195/567
[2024-12-02 19:24:07.855757] user = 128840 Local+ 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:09.503151] user = 128840 MPDA- 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.605489417989418
Training on augumented user 76136 0/50 current_auc = 0.605489417989418
User 76136 AUC after training: 0.605489417989418
User 76136 does not improve AUC. Reverting changes.
Training on augumented user 132048 1/50 current_auc = 0.605489417989418
User 132048 AUC after training: 0.6051587301587301
User 132048 does not improve AUC. Reverting changes.
Training on augumented user 25149 2/50 current_auc = 0.605489417989418
User 25149 AUC after training: 0.6051587301587301
User 25149 does not improve AUC. Reverting changes.
Training on augumented user 65723 3/50 current_auc = 0.605489417989418
User 65723 AUC after training: 0.6051587301587302
User 65723 does not improve AUC. Reverting changes.
Training on augumented user 58942 4/50 current_auc = 0.605489417989418
User 58942 AUC after training: 0.6058201058201058
User 58942 improves AUC. Keeping the model.
Training on augumented user 47395 5/50 current_auc = 0.6058201058201058
User 47395 AUC after training: 0.6054894179894179
User 47395 does not improve AUC. Reverting changes.
Training on augumented user 29151 6/50 current_auc = 0.6058201058201058
User 29151 AUC after training: 0.6058201058201058
User 29151 does not improve AUC. Reverting changes.
Training on augumented user 50592 7/50 current_auc = 0.6058201058201058
User 50592 AUC after training: 0.6051587301587301
User 50592 does not improve AUC. Reverting changes.
Training on augumented user 36456 8/50 current_auc = 0.6058201058201058
User 36456 AUC after training: 0.6064814814814815
User 36456 improves AUC. Keeping the model.
Training on augumented user 71540 9/50 current_auc = 0.6064814814814815
User 71540 AUC after training: 0.6044973544973544
User 71540 does not improve AUC. Reverting changes.
Training on augumented user 125621 10/50 current_auc = 0.6064814814814815
User 125621 AUC after training: 0.6064814814814815
User 125621 does not improve AUC. Reverting changes.
Training on augumented user 12635 11/50 current_auc = 0.6064814814814815
User 12635 AUC after training: 0.6064814814814815
User 12635 does not improve AUC. Reverting changes.
Training on augumented user 10158 12/50 current_auc = 0.6064814814814815
User 10158 AUC after training: 0.6058201058201057
User 10158 does not improve AUC. Reverting changes.
Training on augumented user 94711 13/50 current_auc = 0.6064814814814815
User 94711 AUC after training: 0.6058201058201058
User 94711 does not improve AUC. Reverting changes.
Training on augumented user 33936 14/50 current_auc = 0.6064814814814815
User 33936 AUC after training: 0.6058201058201058
User 33936 does not improve AUC. Reverting changes.
Training on augumented user 95740 15/50 current_auc = 0.6064814814814815
User 95740 AUC after training: 0.6058201058201058
User 95740 does not improve AUC. Reverting changes.
Training on augumented user 89798 16/50 current_auc = 0.6064814814814815
User 89798 AUC after training: 0.6051587301587301
User 89798 does not improve AUC. Reverting changes.
Training on augumented user 33576 17/50 current_auc = 0.6064814814814815
User 33576 AUC after training: 0.6051587301587301
User 33576 does not improve AUC. Reverting changes.
Training on augumented user 3778 18/50 current_auc = 0.6064814814814815
User 3778 AUC after training: 0.6051587301587301
User 3778 does not improve AUC. Reverting changes.
Training on augumented user 64957 19/50 current_auc = 0.6064814814814815
User 64957 AUC after training: 0.6078042328042328
User 64957 improves AUC. Keeping the model.
Training on augumented user 101541 20/50 current_auc = 0.6078042328042328
User 101541 AUC after training: 0.6071428571428571
User 101541 does not improve AUC. Reverting changes.
Training on augumented user 108540 21/50 current_auc = 0.6078042328042328
User 108540 AUC after training: 0.6051587301587301
User 108540 does not improve AUC. Reverting changes.
Training on augumented user 81145 22/50 current_auc = 0.6078042328042328
User 81145 AUC after training: 0.6078042328042328
User 81145 does not improve AUC. Reverting changes.
Training on augumented user 3728 23/50 current_auc = 0.6078042328042328
User 3728 AUC after training: 0.605489417989418
User 3728 does not improve AUC. Reverting changes.
Training on augumented user 133520 24/50 current_auc = 0.6078042328042328
User 133520 AUC after training: 0.6058201058201058
User 133520 does not improve AUC. Reverting changes.
Training on augumented user 104668 25/50 current_auc = 0.6078042328042328
User 104668 AUC after training: 0.6071428571428572
User 104668 does not improve AUC. Reverting changes.
Training on augumented user 129398 26/50 current_auc = 0.6078042328042328
User 129398 AUC after training: 0.6064814814814814
User 129398 does not improve AUC. Reverting changes.
Training on augumented user 83545 27/50 current_auc = 0.6078042328042328
User 83545 AUC after training: 0.605489417989418
User 83545 does not improve AUC. Reverting changes.
Training on augumented user 45854 28/50 current_auc = 0.6078042328042328
User 45854 AUC after training: 0.6058201058201058
User 45854 does not improve AUC. Reverting changes.
Training on augumented user 63610 29/50 current_auc = 0.6078042328042328
User 63610 AUC after training: 0.6058201058201058
User 63610 does not improve AUC. Reverting changes.
Training on augumented user 102557 30/50 current_auc = 0.6078042328042328
User 102557 AUC after training: 0.6071428571428572
User 102557 does not improve AUC. Reverting changes.
Training on augumented user 33107 31/50 current_auc = 0.6078042328042328
User 33107 AUC after training: 0.6078042328042328
User 33107 does not improve AUC. Reverting changes.
Training on augumented user 7189 32/50 current_auc = 0.6078042328042328
User 7189 AUC after training: 0.6064814814814815
User 7189 does not improve AUC. Reverting changes.
Training on augumented user 85438 33/50 current_auc = 0.6078042328042328
User 85438 AUC after training: 0.6084656084656085
User 85438 improves AUC. Keeping the model.
Training on augumented user 28883 34/50 current_auc = 0.6084656084656085
User 28883 AUC after training: 0.6084656084656085
User 28883 does not improve AUC. Reverting changes.
Training on augumented user 80121 35/50 current_auc = 0.6084656084656085
User 80121 AUC after training: 0.6084656084656085
User 80121 does not improve AUC. Reverting changes.
Training on augumented user 105829 36/50 current_auc = 0.6084656084656085
User 105829 AUC after training: 0.6078042328042328
User 105829 does not improve AUC. Reverting changes.
Training on augumented user 78718 37/50 current_auc = 0.6084656084656085
User 78718 AUC after training: 0.6091269841269842
User 78718 improves AUC. Keeping the model.
Training on augumented user 85483 38/50 current_auc = 0.6091269841269842
User 85483 AUC after training: 0.6084656084656085
User 85483 does not improve AUC. Reverting changes.
Training on augumented user 133676 39/50 current_auc = 0.6091269841269842
User 133676 AUC after training: 0.6091269841269842
User 133676 does not improve AUC. Reverting changes.
Training on augumented user 117433 40/50 current_auc = 0.6091269841269842
User 117433 AUC after training: 0.6084656084656085
User 117433 does not improve AUC. Reverting changes.
Training on augumented user 135959 41/50 current_auc = 0.6091269841269842
User 135959 AUC after training: 0.6087962962962963
User 135959 does not improve AUC. Reverting changes.
Training on augumented user 467 42/50 current_auc = 0.6091269841269842
User 467 AUC after training: 0.6097883597883598
User 467 improves AUC. Keeping the model.
Training on augumented user 34337 43/50 current_auc = 0.6097883597883598
User 34337 AUC after training: 0.6104497354497355
User 34337 improves AUC. Keeping the model.
Training on augumented user 133561 44/50 current_auc = 0.6104497354497355
User 133561 AUC after training: 0.6097883597883598
User 133561 does not improve AUC. Reverting changes.
Training on augumented user 44677 45/50 current_auc = 0.6104497354497355
User 44677 AUC after training: 0.6104497354497355
User 44677 does not improve AUC. Reverting changes.
Training on augumented user 53570 46/50 current_auc = 0.6104497354497355
User 53570 AUC after training: 0.6091269841269842
User 53570 does not improve AUC. Reverting changes.
Training on augumented user 102941 47/50 current_auc = 0.6104497354497355
User 102941 AUC after training: 0.6104497354497355
User 102941 does not improve AUC. Reverting changes.
Training on augumented user 56904 48/50 current_auc = 0.6104497354497355
User 56904 AUC after training: 0.6111111111111112
User 56904 improves AUC. Keeping the model.
Training on augumented user 104808 49/50 current_auc = 0.6111111111111112
User 104808 AUC after training: 0.6091269841269842
User 104808 does not improve AUC. Reverting changes.
[2024-12-02 19:24:37.919863] start test user 128908 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:38.366056] start test user 128908 196/567 recall augumented users by random, augumented_users = [106831, 136699, 27467, 96939, 115175, 71748, 108948, 82544, 2936, 52652, 116922, 93274, 56232, 58303, 69473, 43735, 49709, 87621, 84385, 49369, 94786, 54043, 127977, 69816, 10184, 9274, 128132, 3209, 5542, 128988, 65235, 82634, 4448, 125710, 42848, 13537, 114157, 114505, 7143, 52554, 121771, 52176, 33256, 131780, 32652, 5740, 137811, 46321, 97588, 37437]
[2024-12-02 19:24:38.380431] user = 128908 Cloud 196/567
[2024-12-02 19:24:38.397619] user = 128908 Local 196/567
[2024-12-02 19:24:38.416834] user = 128908 Local+ 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:40.635867] user = 128908 MPDA- 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8413461538461539
Training on augumented user 106831 0/50 current_auc = 0.8413461538461539
User 106831 AUC after training: 0.8413461538461539
User 106831 does not improve AUC. Reverting changes.
Training on augumented user 136699 1/50 current_auc = 0.8413461538461539
User 136699 AUC after training: 0.8413461538461539
User 136699 does not improve AUC. Reverting changes.
Training on augumented user 27467 2/50 current_auc = 0.8413461538461539
User 27467 AUC after training: 0.8413461538461539
User 27467 does not improve AUC. Reverting changes.
Training on augumented user 96939 3/50 current_auc = 0.8413461538461539
User 96939 AUC after training: 0.8413461538461539
User 96939 does not improve AUC. Reverting changes.
Training on augumented user 115175 4/50 current_auc = 0.8413461538461539
User 115175 AUC after training: 0.8413461538461539
User 115175 does not improve AUC. Reverting changes.
Training on augumented user 71748 5/50 current_auc = 0.8413461538461539
User 71748 AUC after training: 0.8413461538461539
User 71748 does not improve AUC. Reverting changes.
Training on augumented user 108948 6/50 current_auc = 0.8413461538461539
User 108948 AUC after training: 0.8413461538461539
User 108948 does not improve AUC. Reverting changes.
Training on augumented user 82544 7/50 current_auc = 0.8413461538461539
User 82544 AUC after training: 0.8413461538461539
User 82544 does not improve AUC. Reverting changes.
Training on augumented user 2936 8/50 current_auc = 0.8413461538461539
User 2936 AUC after training: 0.8413461538461539
User 2936 does not improve AUC. Reverting changes.
Training on augumented user 52652 9/50 current_auc = 0.8413461538461539
User 52652 AUC after training: 0.8413461538461539
User 52652 does not improve AUC. Reverting changes.
Training on augumented user 116922 10/50 current_auc = 0.8413461538461539
User 116922 AUC after training: 0.8413461538461539
User 116922 does not improve AUC. Reverting changes.
Training on augumented user 93274 11/50 current_auc = 0.8413461538461539
User 93274 AUC after training: 0.8509615384615384
User 93274 improves AUC. Keeping the model.
Training on augumented user 56232 12/50 current_auc = 0.8509615384615384
User 56232 AUC after training: 0.8461538461538461
User 56232 does not improve AUC. Reverting changes.
Training on augumented user 58303 13/50 current_auc = 0.8509615384615384
User 58303 AUC after training: 0.8461538461538461
User 58303 does not improve AUC. Reverting changes.
Training on augumented user 69473 14/50 current_auc = 0.8509615384615384
User 69473 AUC after training: 0.8461538461538461
User 69473 does not improve AUC. Reverting changes.
Training on augumented user 43735 15/50 current_auc = 0.8509615384615384
User 43735 AUC after training: 0.8509615384615384
User 43735 does not improve AUC. Reverting changes.
Training on augumented user 49709 16/50 current_auc = 0.8509615384615384
User 49709 AUC after training: 0.8509615384615384
User 49709 does not improve AUC. Reverting changes.
Training on augumented user 87621 17/50 current_auc = 0.8509615384615384
User 87621 AUC after training: 0.8509615384615384
User 87621 does not improve AUC. Reverting changes.
Training on augumented user 84385 18/50 current_auc = 0.8509615384615384
User 84385 AUC after training: 0.8413461538461539
User 84385 does not improve AUC. Reverting changes.
Training on augumented user 49369 19/50 current_auc = 0.8509615384615384
User 49369 AUC after training: 0.8461538461538461
User 49369 does not improve AUC. Reverting changes.
Training on augumented user 94786 20/50 current_auc = 0.8509615384615384
User 94786 AUC after training: 0.8509615384615384
User 94786 does not improve AUC. Reverting changes.
Training on augumented user 54043 21/50 current_auc = 0.8509615384615384
User 54043 AUC after training: 0.8461538461538461
User 54043 does not improve AUC. Reverting changes.
Training on augumented user 127977 22/50 current_auc = 0.8509615384615384
User 127977 AUC after training: 0.8461538461538461
User 127977 does not improve AUC. Reverting changes.
Training on augumented user 69816 23/50 current_auc = 0.8509615384615384
User 69816 AUC after training: 0.8461538461538461
User 69816 does not improve AUC. Reverting changes.
Training on augumented user 10184 24/50 current_auc = 0.8509615384615384
User 10184 AUC after training: 0.8509615384615384
User 10184 does not improve AUC. Reverting changes.
Training on augumented user 9274 25/50 current_auc = 0.8509615384615384
User 9274 AUC after training: 0.8509615384615384
User 9274 does not improve AUC. Reverting changes.
Training on augumented user 128132 26/50 current_auc = 0.8509615384615384
User 128132 AUC after training: 0.8509615384615384
User 128132 does not improve AUC. Reverting changes.
Training on augumented user 3209 27/50 current_auc = 0.8509615384615384
User 3209 AUC after training: 0.8509615384615384
User 3209 does not improve AUC. Reverting changes.
Training on augumented user 5542 28/50 current_auc = 0.8509615384615384
User 5542 AUC after training: 0.8413461538461539
User 5542 does not improve AUC. Reverting changes.
Training on augumented user 128988 29/50 current_auc = 0.8509615384615384
User 128988 AUC after training: 0.8509615384615384
User 128988 does not improve AUC. Reverting changes.
Training on augumented user 65235 30/50 current_auc = 0.8509615384615384
User 65235 AUC after training: 0.8461538461538461
User 65235 does not improve AUC. Reverting changes.
Training on augumented user 82634 31/50 current_auc = 0.8509615384615384
User 82634 AUC after training: 0.8461538461538461
User 82634 does not improve AUC. Reverting changes.
Training on augumented user 4448 32/50 current_auc = 0.8509615384615384
User 4448 AUC after training: 0.8509615384615384
User 4448 does not improve AUC. Reverting changes.
Training on augumented user 125710 33/50 current_auc = 0.8509615384615384
User 125710 AUC after training: 0.8509615384615384
User 125710 does not improve AUC. Reverting changes.
Training on augumented user 42848 34/50 current_auc = 0.8509615384615384
User 42848 AUC after training: 0.8461538461538461
User 42848 does not improve AUC. Reverting changes.
Training on augumented user 13537 35/50 current_auc = 0.8509615384615384
User 13537 AUC after training: 0.8509615384615384
User 13537 does not improve AUC. Reverting changes.
Training on augumented user 114157 36/50 current_auc = 0.8509615384615384
User 114157 AUC after training: 0.8509615384615384
User 114157 does not improve AUC. Reverting changes.
Training on augumented user 114505 37/50 current_auc = 0.8509615384615384
User 114505 AUC after training: 0.8461538461538461
User 114505 does not improve AUC. Reverting changes.
Training on augumented user 7143 38/50 current_auc = 0.8509615384615384
User 7143 AUC after training: 0.8509615384615384
User 7143 does not improve AUC. Reverting changes.
Training on augumented user 52554 39/50 current_auc = 0.8509615384615384
User 52554 AUC after training: 0.8509615384615384
User 52554 does not improve AUC. Reverting changes.
Training on augumented user 121771 40/50 current_auc = 0.8509615384615384
User 121771 AUC after training: 0.8509615384615384
User 121771 does not improve AUC. Reverting changes.
Training on augumented user 52176 41/50 current_auc = 0.8509615384615384
User 52176 AUC after training: 0.8461538461538461
User 52176 does not improve AUC. Reverting changes.
Training on augumented user 33256 42/50 current_auc = 0.8509615384615384
User 33256 AUC after training: 0.8461538461538461
User 33256 does not improve AUC. Reverting changes.
Training on augumented user 131780 43/50 current_auc = 0.8509615384615384
User 131780 AUC after training: 0.8509615384615384
User 131780 does not improve AUC. Reverting changes.
Training on augumented user 32652 44/50 current_auc = 0.8509615384615384
User 32652 AUC after training: 0.8509615384615384
User 32652 does not improve AUC. Reverting changes.
Training on augumented user 5740 45/50 current_auc = 0.8509615384615384
User 5740 AUC after training: 0.8509615384615384
User 5740 does not improve AUC. Reverting changes.
Training on augumented user 137811 46/50 current_auc = 0.8509615384615384
User 137811 AUC after training: 0.8509615384615384
User 137811 does not improve AUC. Reverting changes.
Training on augumented user 46321 47/50 current_auc = 0.8509615384615384
User 46321 AUC after training: 0.8509615384615384
User 46321 does not improve AUC. Reverting changes.
Training on augumented user 97588 48/50 current_auc = 0.8509615384615384
User 97588 AUC after training: 0.8509615384615384
User 97588 does not improve AUC. Reverting changes.
Training on augumented user 37437 49/50 current_auc = 0.8509615384615384
User 37437 AUC after training: 0.8509615384615384
User 37437 does not improve AUC. Reverting changes.
[2024-12-02 19:25:13.633960] start test user 128912 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:14.557560] start test user 128912 197/567 recall augumented users by random, augumented_users = [105493, 80602, 29819, 66831, 27794, 36655, 84340, 58153, 57400, 109209, 31633, 69984, 99094, 68851, 28522, 15345, 9042, 52066, 49135, 130060, 50802, 35516, 39565, 86454, 90857, 2051, 68434, 67247, 44922, 81035, 52319, 129364, 70720, 85994, 28192, 129778, 125554, 63747, 54225, 37680, 17487, 92843, 106101, 138365, 9254, 31103, 69451, 28651, 42082, 71282]
[2024-12-02 19:25:14.572757] user = 128912 Cloud 197/567
[2024-12-02 19:25:14.583538] user = 128912 Local 197/567
[2024-12-02 19:25:14.685633] user = 128912 Local+ 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:17.387640] user = 128912 MPDA- 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7567567567567568
Training on augumented user 105493 0/50 current_auc = 0.7567567567567568
User 105493 AUC after training: 0.7612612612612613
User 105493 improves AUC. Keeping the model.
Training on augumented user 80602 1/50 current_auc = 0.7612612612612613
User 80602 AUC after training: 0.7612612612612613
User 80602 does not improve AUC. Reverting changes.
Training on augumented user 29819 2/50 current_auc = 0.7612612612612613
User 29819 AUC after training: 0.7567567567567568
User 29819 does not improve AUC. Reverting changes.
Training on augumented user 66831 3/50 current_auc = 0.7612612612612613
User 66831 AUC after training: 0.7612612612612613
User 66831 does not improve AUC. Reverting changes.
Training on augumented user 27794 4/50 current_auc = 0.7612612612612613
User 27794 AUC after training: 0.7612612612612613
User 27794 does not improve AUC. Reverting changes.
Training on augumented user 36655 5/50 current_auc = 0.7612612612612613
User 36655 AUC after training: 0.7612612612612613
User 36655 does not improve AUC. Reverting changes.
Training on augumented user 84340 6/50 current_auc = 0.7612612612612613
User 84340 AUC after training: 0.7612612612612613
User 84340 does not improve AUC. Reverting changes.
Training on augumented user 58153 7/50 current_auc = 0.7612612612612613
User 58153 AUC after training: 0.7612612612612613
User 58153 does not improve AUC. Reverting changes.
Training on augumented user 57400 8/50 current_auc = 0.7612612612612613
User 57400 AUC after training: 0.7612612612612613
User 57400 does not improve AUC. Reverting changes.
Training on augumented user 109209 9/50 current_auc = 0.7612612612612613
User 109209 AUC after training: 0.7612612612612613
User 109209 does not improve AUC. Reverting changes.
Training on augumented user 31633 10/50 current_auc = 0.7612612612612613
User 31633 AUC after training: 0.7612612612612613
User 31633 does not improve AUC. Reverting changes.
Training on augumented user 69984 11/50 current_auc = 0.7612612612612613
User 69984 AUC after training: 0.7567567567567568
User 69984 does not improve AUC. Reverting changes.
Training on augumented user 99094 12/50 current_auc = 0.7612612612612613
User 99094 AUC after training: 0.7567567567567568
User 99094 does not improve AUC. Reverting changes.
Training on augumented user 68851 13/50 current_auc = 0.7612612612612613
User 68851 AUC after training: 0.7567567567567568
User 68851 does not improve AUC. Reverting changes.
Training on augumented user 28522 14/50 current_auc = 0.7612612612612613
User 28522 AUC after training: 0.7612612612612613
User 28522 does not improve AUC. Reverting changes.
Training on augumented user 15345 15/50 current_auc = 0.7612612612612613
User 15345 AUC after training: 0.7612612612612613
User 15345 does not improve AUC. Reverting changes.
Training on augumented user 9042 16/50 current_auc = 0.7612612612612613
User 9042 AUC after training: 0.7567567567567568
User 9042 does not improve AUC. Reverting changes.
Training on augumented user 52066 17/50 current_auc = 0.7612612612612613
User 52066 AUC after training: 0.7657657657657657
User 52066 improves AUC. Keeping the model.
Training on augumented user 49135 18/50 current_auc = 0.7657657657657657
User 49135 AUC after training: 0.7612612612612613
User 49135 does not improve AUC. Reverting changes.
Training on augumented user 130060 19/50 current_auc = 0.7657657657657657
User 130060 AUC after training: 0.7612612612612613
User 130060 does not improve AUC. Reverting changes.
Training on augumented user 50802 20/50 current_auc = 0.7657657657657657
User 50802 AUC after training: 0.7657657657657657
User 50802 does not improve AUC. Reverting changes.
Training on augumented user 35516 21/50 current_auc = 0.7657657657657657
User 35516 AUC after training: 0.7657657657657657
User 35516 does not improve AUC. Reverting changes.
Training on augumented user 39565 22/50 current_auc = 0.7657657657657657
User 39565 AUC after training: 0.7612612612612613
User 39565 does not improve AUC. Reverting changes.
Training on augumented user 86454 23/50 current_auc = 0.7657657657657657
User 86454 AUC after training: 0.7612612612612613
User 86454 does not improve AUC. Reverting changes.
Training on augumented user 90857 24/50 current_auc = 0.7657657657657657
User 90857 AUC after training: 0.7612612612612613
User 90857 does not improve AUC. Reverting changes.
Training on augumented user 2051 25/50 current_auc = 0.7657657657657657
User 2051 AUC after training: 0.7612612612612613
User 2051 does not improve AUC. Reverting changes.
Training on augumented user 68434 26/50 current_auc = 0.7657657657657657
User 68434 AUC after training: 0.7702702702702703
User 68434 improves AUC. Keeping the model.
Training on augumented user 67247 27/50 current_auc = 0.7702702702702703
User 67247 AUC after training: 0.7702702702702703
User 67247 does not improve AUC. Reverting changes.
Training on augumented user 44922 28/50 current_auc = 0.7702702702702703
User 44922 AUC after training: 0.7702702702702703
User 44922 does not improve AUC. Reverting changes.
Training on augumented user 81035 29/50 current_auc = 0.7702702702702703
User 81035 AUC after training: 0.7657657657657657
User 81035 does not improve AUC. Reverting changes.
Training on augumented user 52319 30/50 current_auc = 0.7702702702702703
User 52319 AUC after training: 0.7657657657657657
User 52319 does not improve AUC. Reverting changes.
Training on augumented user 129364 31/50 current_auc = 0.7702702702702703
User 129364 AUC after training: 0.7702702702702703
User 129364 does not improve AUC. Reverting changes.
Training on augumented user 70720 32/50 current_auc = 0.7702702702702703
User 70720 AUC after training: 0.7657657657657657
User 70720 does not improve AUC. Reverting changes.
Training on augumented user 85994 33/50 current_auc = 0.7702702702702703
User 85994 AUC after training: 0.7657657657657657
User 85994 does not improve AUC. Reverting changes.
Training on augumented user 28192 34/50 current_auc = 0.7702702702702703
User 28192 AUC after training: 0.7612612612612613
User 28192 does not improve AUC. Reverting changes.
Training on augumented user 129778 35/50 current_auc = 0.7702702702702703
User 129778 AUC after training: 0.7567567567567568
User 129778 does not improve AUC. Reverting changes.
Training on augumented user 125554 36/50 current_auc = 0.7702702702702703
User 125554 AUC after training: 0.7702702702702703
User 125554 does not improve AUC. Reverting changes.
Training on augumented user 63747 37/50 current_auc = 0.7702702702702703
User 63747 AUC after training: 0.7702702702702703
User 63747 does not improve AUC. Reverting changes.
Training on augumented user 54225 38/50 current_auc = 0.7702702702702703
User 54225 AUC after training: 0.7657657657657657
User 54225 does not improve AUC. Reverting changes.
Training on augumented user 37680 39/50 current_auc = 0.7702702702702703
User 37680 AUC after training: 0.7522522522522523
User 37680 does not improve AUC. Reverting changes.
Training on augumented user 17487 40/50 current_auc = 0.7702702702702703
User 17487 AUC after training: 0.7657657657657657
User 17487 does not improve AUC. Reverting changes.
Training on augumented user 92843 41/50 current_auc = 0.7702702702702703
User 92843 AUC after training: 0.7657657657657657
User 92843 does not improve AUC. Reverting changes.
Training on augumented user 106101 42/50 current_auc = 0.7702702702702703
User 106101 AUC after training: 0.7657657657657657
User 106101 does not improve AUC. Reverting changes.
Training on augumented user 138365 43/50 current_auc = 0.7702702702702703
User 138365 AUC after training: 0.7612612612612613
User 138365 does not improve AUC. Reverting changes.
Training on augumented user 9254 44/50 current_auc = 0.7702702702702703
User 9254 AUC after training: 0.7657657657657657
User 9254 does not improve AUC. Reverting changes.
Training on augumented user 31103 45/50 current_auc = 0.7702702702702703
User 31103 AUC after training: 0.7612612612612613
User 31103 does not improve AUC. Reverting changes.
Training on augumented user 69451 46/50 current_auc = 0.7702702702702703
User 69451 AUC after training: 0.7657657657657657
User 69451 does not improve AUC. Reverting changes.
Training on augumented user 28651 47/50 current_auc = 0.7702702702702703
User 28651 AUC after training: 0.7702702702702703
User 28651 does not improve AUC. Reverting changes.
Training on augumented user 42082 48/50 current_auc = 0.7702702702702703
User 42082 AUC after training: 0.7702702702702703
User 42082 does not improve AUC. Reverting changes.
Training on augumented user 71282 49/50 current_auc = 0.7702702702702703
User 71282 AUC after training: 0.7702702702702703
User 71282 does not improve AUC. Reverting changes.
[2024-12-02 19:25:50.398478] start test user 128924 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:50.998124] start test user 128924 198/567 recall augumented users by random, augumented_users = [55962, 65152, 72221, 24369, 64356, 8491, 33056, 36700, 107246, 70412, 126089, 88523, 85127, 121801, 61023, 130423, 11483, 80505, 125014, 29532, 111793, 130959, 42298, 36643, 67353, 114527, 120927, 19429, 130884, 83269, 61918, 39795, 60883, 59899, 64978, 11257, 65991, 66239, 32618, 94360, 38234, 104727, 102849, 137779, 2232, 137751, 42956, 66950, 13245, 83371]
[2024-12-02 19:25:51.025409] user = 128924 Cloud 198/567
[2024-12-02 19:25:51.085077] user = 128924 Local 198/567
[2024-12-02 19:25:51.135418] user = 128924 Local+ 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:53.629718] user = 128924 MPDA- 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.43956043956043955
Training on augumented user 55962 0/50 current_auc = 0.43956043956043955
User 55962 AUC after training: 0.4505494505494505
User 55962 improves AUC. Keeping the model.
Training on augumented user 65152 1/50 current_auc = 0.4505494505494505
User 65152 AUC after training: 0.4505494505494505
User 65152 does not improve AUC. Reverting changes.
Training on augumented user 72221 2/50 current_auc = 0.4505494505494505
User 72221 AUC after training: 0.4615384615384615
User 72221 improves AUC. Keeping the model.
Training on augumented user 24369 3/50 current_auc = 0.4615384615384615
User 24369 AUC after training: 0.4505494505494505
User 24369 does not improve AUC. Reverting changes.
Training on augumented user 64356 4/50 current_auc = 0.4615384615384615
User 64356 AUC after training: 0.4505494505494505
User 64356 does not improve AUC. Reverting changes.
Training on augumented user 8491 5/50 current_auc = 0.4615384615384615
User 8491 AUC after training: 0.4615384615384615
User 8491 does not improve AUC. Reverting changes.
Training on augumented user 33056 6/50 current_auc = 0.4615384615384615
User 33056 AUC after training: 0.4505494505494505
User 33056 does not improve AUC. Reverting changes.
Training on augumented user 36700 7/50 current_auc = 0.4615384615384615
User 36700 AUC after training: 0.4505494505494505
User 36700 does not improve AUC. Reverting changes.
Training on augumented user 107246 8/50 current_auc = 0.4615384615384615
User 107246 AUC after training: 0.4615384615384615
User 107246 does not improve AUC. Reverting changes.
Training on augumented user 70412 9/50 current_auc = 0.4615384615384615
User 70412 AUC after training: 0.4615384615384615
User 70412 does not improve AUC. Reverting changes.
Training on augumented user 126089 10/50 current_auc = 0.4615384615384615
User 126089 AUC after training: 0.4615384615384615
User 126089 does not improve AUC. Reverting changes.
Training on augumented user 88523 11/50 current_auc = 0.4615384615384615
User 88523 AUC after training: 0.4615384615384615
User 88523 does not improve AUC. Reverting changes.
Training on augumented user 85127 12/50 current_auc = 0.4615384615384615
User 85127 AUC after training: 0.4615384615384615
User 85127 does not improve AUC. Reverting changes.
Training on augumented user 121801 13/50 current_auc = 0.4615384615384615
User 121801 AUC after training: 0.4615384615384615
User 121801 does not improve AUC. Reverting changes.
Training on augumented user 61023 14/50 current_auc = 0.4615384615384615
User 61023 AUC after training: 0.4615384615384615
User 61023 does not improve AUC. Reverting changes.
Training on augumented user 130423 15/50 current_auc = 0.4615384615384615
User 130423 AUC after training: 0.4615384615384615
User 130423 does not improve AUC. Reverting changes.
Training on augumented user 11483 16/50 current_auc = 0.4615384615384615
User 11483 AUC after training: 0.4615384615384615
User 11483 does not improve AUC. Reverting changes.
Training on augumented user 80505 17/50 current_auc = 0.4615384615384615
User 80505 AUC after training: 0.4615384615384615
User 80505 does not improve AUC. Reverting changes.
Training on augumented user 125014 18/50 current_auc = 0.4615384615384615
User 125014 AUC after training: 0.4615384615384615
User 125014 does not improve AUC. Reverting changes.
Training on augumented user 29532 19/50 current_auc = 0.4615384615384615
User 29532 AUC after training: 0.4615384615384615
User 29532 does not improve AUC. Reverting changes.
Training on augumented user 111793 20/50 current_auc = 0.4615384615384615
User 111793 AUC after training: 0.4615384615384615
User 111793 does not improve AUC. Reverting changes.
Training on augumented user 130959 21/50 current_auc = 0.4615384615384615
User 130959 AUC after training: 0.4615384615384615
User 130959 does not improve AUC. Reverting changes.
Training on augumented user 42298 22/50 current_auc = 0.4615384615384615
User 42298 AUC after training: 0.4615384615384615
User 42298 does not improve AUC. Reverting changes.
Training on augumented user 36643 23/50 current_auc = 0.4615384615384615
User 36643 AUC after training: 0.4615384615384615
User 36643 does not improve AUC. Reverting changes.
Training on augumented user 67353 24/50 current_auc = 0.4615384615384615
User 67353 AUC after training: 0.4615384615384615
User 67353 does not improve AUC. Reverting changes.
Training on augumented user 114527 25/50 current_auc = 0.4615384615384615
User 114527 AUC after training: 0.4615384615384615
User 114527 does not improve AUC. Reverting changes.
Training on augumented user 120927 26/50 current_auc = 0.4615384615384615
User 120927 AUC after training: 0.4505494505494505
User 120927 does not improve AUC. Reverting changes.
Training on augumented user 19429 27/50 current_auc = 0.4615384615384615
User 19429 AUC after training: 0.4615384615384615
User 19429 does not improve AUC. Reverting changes.
Training on augumented user 130884 28/50 current_auc = 0.4615384615384615
User 130884 AUC after training: 0.4615384615384615
User 130884 does not improve AUC. Reverting changes.
Training on augumented user 83269 29/50 current_auc = 0.4615384615384615
User 83269 AUC after training: 0.4615384615384615
User 83269 does not improve AUC. Reverting changes.
Training on augumented user 61918 30/50 current_auc = 0.4615384615384615
User 61918 AUC after training: 0.4615384615384615
User 61918 does not improve AUC. Reverting changes.
Training on augumented user 39795 31/50 current_auc = 0.4615384615384615
User 39795 AUC after training: 0.4615384615384615
User 39795 does not improve AUC. Reverting changes.
Training on augumented user 60883 32/50 current_auc = 0.4615384615384615
User 60883 AUC after training: 0.4615384615384615
User 60883 does not improve AUC. Reverting changes.
Training on augumented user 59899 33/50 current_auc = 0.4615384615384615
User 59899 AUC after training: 0.4615384615384615
User 59899 does not improve AUC. Reverting changes.
Training on augumented user 64978 34/50 current_auc = 0.4615384615384615
User 64978 AUC after training: 0.4615384615384615
User 64978 does not improve AUC. Reverting changes.
Training on augumented user 11257 35/50 current_auc = 0.4615384615384615
User 11257 AUC after training: 0.4725274725274725
User 11257 improves AUC. Keeping the model.
Training on augumented user 65991 36/50 current_auc = 0.4725274725274725
User 65991 AUC after training: 0.4725274725274725
User 65991 does not improve AUC. Reverting changes.
Training on augumented user 66239 37/50 current_auc = 0.4725274725274725
User 66239 AUC after training: 0.4615384615384615
User 66239 does not improve AUC. Reverting changes.
Training on augumented user 32618 38/50 current_auc = 0.4725274725274725
User 32618 AUC after training: 0.4615384615384615
User 32618 does not improve AUC. Reverting changes.
Training on augumented user 94360 39/50 current_auc = 0.4725274725274725
User 94360 AUC after training: 0.4725274725274725
User 94360 does not improve AUC. Reverting changes.
Training on augumented user 38234 40/50 current_auc = 0.4725274725274725
User 38234 AUC after training: 0.4725274725274725
User 38234 does not improve AUC. Reverting changes.
Training on augumented user 104727 41/50 current_auc = 0.4725274725274725
User 104727 AUC after training: 0.4615384615384615
User 104727 does not improve AUC. Reverting changes.
Training on augumented user 102849 42/50 current_auc = 0.4725274725274725
User 102849 AUC after training: 0.4615384615384615
User 102849 does not improve AUC. Reverting changes.
Training on augumented user 137779 43/50 current_auc = 0.4725274725274725
User 137779 AUC after training: 0.4725274725274725
User 137779 does not improve AUC. Reverting changes.
Training on augumented user 2232 44/50 current_auc = 0.4725274725274725
User 2232 AUC after training: 0.4505494505494505
User 2232 does not improve AUC. Reverting changes.
Training on augumented user 137751 45/50 current_auc = 0.4725274725274725
User 137751 AUC after training: 0.4725274725274725
User 137751 does not improve AUC. Reverting changes.
Training on augumented user 42956 46/50 current_auc = 0.4725274725274725
User 42956 AUC after training: 0.4505494505494505
User 42956 does not improve AUC. Reverting changes.
Training on augumented user 66950 47/50 current_auc = 0.4725274725274725
User 66950 AUC after training: 0.4725274725274725
User 66950 does not improve AUC. Reverting changes.
Training on augumented user 13245 48/50 current_auc = 0.4725274725274725
User 13245 AUC after training: 0.4725274725274725
User 13245 does not improve AUC. Reverting changes.
Training on augumented user 83371 49/50 current_auc = 0.4725274725274725
User 83371 AUC after training: 0.4615384615384615
User 83371 does not improve AUC. Reverting changes.
[2024-12-02 19:26:23.091099] start test user 128972 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:23.934139] start test user 128972 199/567 recall augumented users by random, augumented_users = [63340, 82821, 122941, 74860, 61590, 88317, 27771, 60548, 76600, 75214, 6843, 60321, 41383, 33066, 112449, 106929, 3129, 42361, 128951, 40412, 65488, 132622, 8673, 135059, 129206, 95700, 118267, 23414, 7581, 125549, 126996, 23836, 80831, 114131, 68242, 106983, 72220, 77624, 6671, 14815, 91894, 18610, 14325, 113931, 78876, 21738, 40020, 11920, 68699, 71026]
[2024-12-02 19:26:23.951630] user = 128972 Cloud 199/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:23.958782] user = 128972 Local 199/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:24.041221] user = 128972 Local+ 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:26.857981] user = 128972 MPDA- 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 63340 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63340 AUC after training: 0.5
User 63340 does not improve AUC. Reverting changes.
Training on augumented user 82821 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82821 AUC after training: 0.5
User 82821 does not improve AUC. Reverting changes.
Training on augumented user 122941 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122941 AUC after training: 0.5
User 122941 does not improve AUC. Reverting changes.
Training on augumented user 74860 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74860 AUC after training: 0.5
User 74860 does not improve AUC. Reverting changes.
Training on augumented user 61590 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61590 AUC after training: 0.5
User 61590 does not improve AUC. Reverting changes.
Training on augumented user 88317 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88317 AUC after training: 0.5
User 88317 does not improve AUC. Reverting changes.
Training on augumented user 27771 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27771 AUC after training: 0.5
User 27771 does not improve AUC. Reverting changes.
Training on augumented user 60548 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60548 AUC after training: 0.5
User 60548 does not improve AUC. Reverting changes.
Training on augumented user 76600 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76600 AUC after training: 0.5
User 76600 does not improve AUC. Reverting changes.
Training on augumented user 75214 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75214 AUC after training: 0.5
User 75214 does not improve AUC. Reverting changes.
Training on augumented user 6843 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6843 AUC after training: 0.5
User 6843 does not improve AUC. Reverting changes.
Training on augumented user 60321 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60321 AUC after training: 0.5
User 60321 does not improve AUC. Reverting changes.
Training on augumented user 41383 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41383 AUC after training: 0.5
User 41383 does not improve AUC. Reverting changes.
Training on augumented user 33066 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33066 AUC after training: 0.5
User 33066 does not improve AUC. Reverting changes.
Training on augumented user 112449 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112449 AUC after training: 0.5
User 112449 does not improve AUC. Reverting changes.
Training on augumented user 106929 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106929 AUC after training: 0.5
User 106929 does not improve AUC. Reverting changes.
Training on augumented user 3129 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3129 AUC after training: 0.5
User 3129 does not improve AUC. Reverting changes.
Training on augumented user 42361 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42361 AUC after training: 0.5
User 42361 does not improve AUC. Reverting changes.
Training on augumented user 128951 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128951 AUC after training: 0.5
User 128951 does not improve AUC. Reverting changes.
Training on augumented user 40412 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40412 AUC after training: 0.5
User 40412 does not improve AUC. Reverting changes.
Training on augumented user 65488 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65488 AUC after training: 0.5
User 65488 does not improve AUC. Reverting changes.
Training on augumented user 132622 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132622 AUC after training: 0.5
User 132622 does not improve AUC. Reverting changes.
Training on augumented user 8673 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8673 AUC after training: 0.5
User 8673 does not improve AUC. Reverting changes.
Training on augumented user 135059 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135059 AUC after training: 0.5
User 135059 does not improve AUC. Reverting changes.
Training on augumented user 129206 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129206 AUC after training: 0.5
User 129206 does not improve AUC. Reverting changes.
Training on augumented user 95700 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95700 AUC after training: 0.5
User 95700 does not improve AUC. Reverting changes.
Training on augumented user 118267 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118267 AUC after training: 0.5
User 118267 does not improve AUC. Reverting changes.
Training on augumented user 23414 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23414 AUC after training: 0.5
User 23414 does not improve AUC. Reverting changes.
Training on augumented user 7581 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7581 AUC after training: 0.5
User 7581 does not improve AUC. Reverting changes.
Training on augumented user 125549 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125549 AUC after training: 0.5
User 125549 does not improve AUC. Reverting changes.
Training on augumented user 126996 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126996 AUC after training: 0.5
User 126996 does not improve AUC. Reverting changes.
Training on augumented user 23836 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23836 AUC after training: 0.5
User 23836 does not improve AUC. Reverting changes.
Training on augumented user 80831 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80831 AUC after training: 0.5
User 80831 does not improve AUC. Reverting changes.
Training on augumented user 114131 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114131 AUC after training: 0.5
User 114131 does not improve AUC. Reverting changes.
Training on augumented user 68242 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68242 AUC after training: 0.5
User 68242 does not improve AUC. Reverting changes.
Training on augumented user 106983 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106983 AUC after training: 0.5
User 106983 does not improve AUC. Reverting changes.
Training on augumented user 72220 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72220 AUC after training: 0.5
User 72220 does not improve AUC. Reverting changes.
Training on augumented user 77624 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77624 AUC after training: 0.5
User 77624 does not improve AUC. Reverting changes.
Training on augumented user 6671 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6671 AUC after training: 0.5
User 6671 does not improve AUC. Reverting changes.
Training on augumented user 14815 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14815 AUC after training: 0.5
User 14815 does not improve AUC. Reverting changes.
Training on augumented user 91894 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91894 AUC after training: 0.5
User 91894 does not improve AUC. Reverting changes.
Training on augumented user 18610 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18610 AUC after training: 0.5
User 18610 does not improve AUC. Reverting changes.
Training on augumented user 14325 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14325 AUC after training: 0.5
User 14325 does not improve AUC. Reverting changes.
Training on augumented user 113931 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113931 AUC after training: 0.5
User 113931 does not improve AUC. Reverting changes.
Training on augumented user 78876 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78876 AUC after training: 0.5
User 78876 does not improve AUC. Reverting changes.
Training on augumented user 21738 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21738 AUC after training: 0.5
User 21738 does not improve AUC. Reverting changes.
Training on augumented user 40020 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40020 AUC after training: 0.5
User 40020 does not improve AUC. Reverting changes.
Training on augumented user 11920 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11920 AUC after training: 0.5
User 11920 does not improve AUC. Reverting changes.
Training on augumented user 68699 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68699 AUC after training: 0.5
User 68699 does not improve AUC. Reverting changes.
Training on augumented user 71026 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71026 AUC after training: 0.5
User 71026 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:51.759338] start test user 128992 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:52.221718] start test user 128992 200/567 recall augumented users by random, augumented_users = [97957, 14944, 96909, 54134, 2599, 126525, 105408, 119181, 134240, 46853, 85252, 107994, 47408, 3157, 84150, 76498, 122734, 118561, 27562, 33868, 94721, 134589, 6442, 28043, 104922, 75706, 23351, 91095, 54049, 65072, 2149, 100159, 38163, 66561, 61970, 76185, 2249, 76994, 92300, 67438, 2524, 83264, 3621, 35423, 54971, 81417, 136432, 62548, 18081, 134948]
[2024-12-02 19:26:52.237830] user = 128992 Cloud 200/567
[2024-12-02 19:26:52.300775] user = 128992 Local 200/567
[2024-12-02 19:26:52.386538] user = 128992 Local+ 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:54.693662] user = 128992 MPDA- 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5672475557138899
Training on augumented user 97957 0/50 current_auc = 0.5672475557138899
User 97957 AUC after training: 0.5670001583343229
User 97957 does not improve AUC. Reverting changes.
Training on augumented user 14944 1/50 current_auc = 0.5672475557138899
User 14944 AUC after training: 0.5672178680283418
User 14944 does not improve AUC. Reverting changes.
Training on augumented user 96909 2/50 current_auc = 0.5672475557138899
User 96909 AUC after training: 0.5672871392946206
User 96909 improves AUC. Keeping the model.
Training on augumented user 54134 3/50 current_auc = 0.5672871392946206
User 54134 AUC after training: 0.5672821913470292
User 54134 does not improve AUC. Reverting changes.
Training on augumented user 2599 4/50 current_auc = 0.5672871392946206
User 2599 AUC after training: 0.5673762023512647
User 2599 improves AUC. Keeping the model.
Training on augumented user 126525 5/50 current_auc = 0.5673762023512647
User 126525 AUC after training: 0.5674405256699521
User 126525 improves AUC. Keeping the model.
Training on augumented user 105408 6/50 current_auc = 0.5674405256699521
User 105408 AUC after training: 0.5673465146657166
User 105408 does not improve AUC. Reverting changes.
Training on augumented user 119181 7/50 current_auc = 0.5674405256699521
User 119181 AUC after training: 0.5673564105608995
User 119181 does not improve AUC. Reverting changes.
Training on augumented user 134240 8/50 current_auc = 0.5674405256699521
User 134240 AUC after training: 0.5676879230495191
User 134240 improves AUC. Keeping the model.
Training on augumented user 46853 9/50 current_auc = 0.5676879230495191
User 46853 AUC after training: 0.5678066737917112
User 46853 improves AUC. Keeping the model.
Training on augumented user 85252 10/50 current_auc = 0.5678066737917112
User 85252 AUC after training: 0.5680689150140522
User 85252 improves AUC. Keeping the model.
Training on augumented user 107994 11/50 current_auc = 0.5680689150140522
User 107994 AUC after training: 0.5680095396429561
User 107994 does not improve AUC. Reverting changes.
Training on augumented user 47408 12/50 current_auc = 0.5680689150140522
User 47408 AUC after training: 0.567846257372442
User 47408 does not improve AUC. Reverting changes.
Training on augumented user 3157 13/50 current_auc = 0.5680689150140522
User 3157 AUC after training: 0.5682668329177056
User 3157 improves AUC. Keeping the model.
Training on augumented user 84150 14/50 current_auc = 0.5682668329177056
User 84150 AUC after training: 0.5681926137038357
User 84150 does not improve AUC. Reverting changes.
Training on augumented user 76498 15/50 current_auc = 0.5682668329177056
User 76498 AUC after training: 0.5683410521315758
User 76498 improves AUC. Keeping the model.
Training on augumented user 122734 16/50 current_auc = 0.5683410521315758
User 122734 AUC after training: 0.5684499069785853
User 122734 improves AUC. Keeping the model.
Training on augumented user 118561 17/50 current_auc = 0.5684499069785853
User 118561 AUC after training: 0.5685983454063255
User 118561 improves AUC. Keeping the model.
Training on augumented user 27562 18/50 current_auc = 0.5685983454063255
User 27562 AUC after training: 0.5685389700352295
User 27562 does not improve AUC. Reverting changes.
Training on augumented user 33868 19/50 current_auc = 0.5685983454063255
User 33868 AUC after training: 0.5685538138780034
User 33868 does not improve AUC. Reverting changes.
Training on augumented user 94721 20/50 current_auc = 0.5685983454063255
User 94721 AUC after training: 0.5685142302972728
User 94721 does not improve AUC. Reverting changes.
Training on augumented user 134589 21/50 current_auc = 0.5685983454063255
User 134589 AUC after training: 0.568489490559316
User 134589 does not improve AUC. Reverting changes.
Training on augumented user 6442 22/50 current_auc = 0.5685983454063255
User 6442 AUC after training: 0.568474646716542
User 6442 does not improve AUC. Reverting changes.
Training on augumented user 28043 23/50 current_auc = 0.5685983454063255
User 28043 AUC after training: 0.5685340220876381
User 28043 does not improve AUC. Reverting changes.
Training on augumented user 104922 24/50 current_auc = 0.5685983454063255
User 104922 AUC after training: 0.5683608439219412
User 104922 does not improve AUC. Reverting changes.
Training on augumented user 75706 25/50 current_auc = 0.5685983454063255
User 75706 AUC after training: 0.5685686577207774
User 75706 does not improve AUC. Reverting changes.
Training on augumented user 23351 26/50 current_auc = 0.5685983454063255
User 23351 AUC after training: 0.5687072002533349
User 23351 improves AUC. Keeping the model.
Training on augumented user 91095 27/50 current_auc = 0.5687072002533349
User 91095 AUC after training: 0.5688111071527531
User 91095 improves AUC. Keeping the model.
Training on augumented user 54049 28/50 current_auc = 0.5688111071527531
User 54049 AUC after training: 0.568736887938883
User 54049 does not improve AUC. Reverting changes.
Training on augumented user 65072 29/50 current_auc = 0.5688111071527531
User 65072 AUC after training: 0.5687022523057436
User 65072 does not improve AUC. Reverting changes.
Training on augumented user 2149 30/50 current_auc = 0.5688111071527531
User 2149 AUC after training: 0.5688012112575704
User 2149 does not improve AUC. Reverting changes.
Training on augumented user 100159 31/50 current_auc = 0.5688111071527531
User 100159 AUC after training: 0.5687121482009263
User 100159 does not improve AUC. Reverting changes.
Training on augumented user 38163 32/50 current_auc = 0.5688111071527531
User 38163 AUC after training: 0.5689298578949452
User 38163 improves AUC. Keeping the model.
Training on augumented user 66561 33/50 current_auc = 0.5689298578949452
User 66561 AUC after training: 0.5689051181569885
User 66561 does not improve AUC. Reverting changes.
Training on augumented user 61970 34/50 current_auc = 0.5689298578949452
User 61970 AUC after training: 0.5688457427858924
User 61970 does not improve AUC. Reverting changes.
Training on augumented user 76185 35/50 current_auc = 0.5689298578949452
User 76185 AUC after training: 0.5687616276768397
User 76185 does not improve AUC. Reverting changes.
Training on augumented user 2249 36/50 current_auc = 0.5689298578949452
User 2249 AUC after training: 0.5690980881130507
User 2249 improves AUC. Keeping the model.
Training on augumented user 76994 37/50 current_auc = 0.5690980881130507
User 76994 AUC after training: 0.5688407948383011
User 76994 does not improve AUC. Reverting changes.
Training on augumented user 92300 38/50 current_auc = 0.5690980881130507
User 92300 AUC after training: 0.5690189209515892
User 92300 does not improve AUC. Reverting changes.
Training on augumented user 67438 39/50 current_auc = 0.5690980881130507
User 67438 AUC after training: 0.5690634524799113
User 67438 does not improve AUC. Reverting changes.
Training on augumented user 2524 40/50 current_auc = 0.5690980881130507
User 2524 AUC after training: 0.56905850453232
User 2524 does not improve AUC. Reverting changes.
Training on augumented user 83264 41/50 current_auc = 0.5690980881130507
User 83264 AUC after training: 0.569963978941535
User 83264 improves AUC. Keeping the model.
Training on augumented user 3621 42/50 current_auc = 0.569963978941535
User 3621 AUC after training: 0.5701371571072319
User 3621 improves AUC. Keeping the model.
Training on augumented user 35423 43/50 current_auc = 0.5701371571072319
User 35423 AUC after training: 0.5705824723904525
User 35423 improves AUC. Keeping the model.
Training on augumented user 54971 44/50 current_auc = 0.5705824723904525
User 54971 AUC after training: 0.5703499188536595
User 54971 does not improve AUC. Reverting changes.
Training on augumented user 81417 45/50 current_auc = 0.5705824723904525
User 81417 AUC after training: 0.569978822784309
User 81417 does not improve AUC. Reverting changes.
Training on augumented user 136432 46/50 current_auc = 0.5705824723904525
User 136432 AUC after training: 0.5704983572813996
User 136432 does not improve AUC. Reverting changes.
Training on augumented user 62548 47/50 current_auc = 0.5705824723904525
User 62548 AUC after training: 0.5708199738748366
User 62548 improves AUC. Keeping the model.
Training on augumented user 18081 48/50 current_auc = 0.5708199738748366
User 18081 AUC after training: 0.5709288287218461
User 18081 improves AUC. Keeping the model.
Training on augumented user 134948 49/50 current_auc = 0.5709288287218461
User 134948 AUC after training: 0.5705626806000872
User 134948 does not improve AUC. Reverting changes.
[2024-12-02 19:27:25.115231] start test user 129005 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:25.779005] start test user 129005 201/567 recall augumented users by random, augumented_users = [106328, 116454, 73982, 103228, 129106, 101172, 82892, 111550, 24510, 23929, 104107, 5774, 906, 95483, 110513, 26367, 97240, 63352, 29585, 80294, 38917, 113759, 5901, 129203, 135205, 72715, 105851, 28413, 72292, 27490, 22220, 103665, 6786, 123327, 3532, 36593, 62275, 39515, 128372, 79297, 10980, 27722, 113674, 29035, 94834, 38830, 101112, 32729, 113066, 26671]
[2024-12-02 19:27:25.801969] user = 129005 Cloud 201/567
[2024-12-02 19:27:25.848158] user = 129005 Local 201/567
[2024-12-02 19:27:26.065908] user = 129005 Local+ 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:28.828097] user = 129005 MPDA- 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6356647573108231
Training on augumented user 106328 0/50 current_auc = 0.6356647573108231
User 106328 AUC after training: 0.6350115566274745
User 106328 does not improve AUC. Reverting changes.
Training on augumented user 116454 1/50 current_auc = 0.6356647573108231
User 116454 AUC after training: 0.634458848356949
User 116454 does not improve AUC. Reverting changes.
Training on augumented user 73982 2/50 current_auc = 0.6356647573108231
User 73982 AUC after training: 0.6353632800723545
User 73982 does not improve AUC. Reverting changes.
Training on augumented user 103228 3/50 current_auc = 0.6356647573108231
User 103228 AUC after training: 0.6351622952467089
User 103228 does not improve AUC. Reverting changes.
Training on augumented user 129106 4/50 current_auc = 0.6356647573108231
User 129106 AUC after training: 0.6350618028338861
User 129106 does not improve AUC. Reverting changes.
Training on augumented user 101172 5/50 current_auc = 0.6356647573108231
User 101172 AUC after training: 0.6355140186915887
User 101172 does not improve AUC. Reverting changes.
Training on augumented user 82892 6/50 current_auc = 0.6356647573108231
User 82892 AUC after training: 0.6353130338659431
User 82892 does not improve AUC. Reverting changes.
Training on augumented user 111550 7/50 current_auc = 0.6356647573108231
User 111550 AUC after training: 0.6352627876595318
User 111550 does not improve AUC. Reverting changes.
Training on augumented user 24510 8/50 current_auc = 0.6356647573108231
User 24510 AUC after training: 0.6357652497236458
User 24510 improves AUC. Keeping the model.
Training on augumented user 23929 9/50 current_auc = 0.6357652497236458
User 23929 AUC after training: 0.6357150035172343
User 23929 does not improve AUC. Reverting changes.
Training on augumented user 104107 10/50 current_auc = 0.6357652497236458
User 104107 AUC after training: 0.6356145111044116
User 104107 does not improve AUC. Reverting changes.
Training on augumented user 5774 11/50 current_auc = 0.6357652497236458
User 5774 AUC after training: 0.6361420962717316
User 5774 improves AUC. Keeping the model.
Training on augumented user 906 12/50 current_auc = 0.6361420962717316
User 906 AUC after training: 0.6363430810973771
User 906 improves AUC. Keeping the model.
Training on augumented user 95483 13/50 current_auc = 0.6363430810973771
User 95483 AUC after training: 0.6364184504069944
User 95483 improves AUC. Keeping the model.
Training on augumented user 110513 14/50 current_auc = 0.6364184504069944
User 110513 AUC after training: 0.6359662345492916
User 110513 does not improve AUC. Reverting changes.
Training on augumented user 26367 15/50 current_auc = 0.6364184504069944
User 26367 AUC after training: 0.6363179579941715
User 26367 does not improve AUC. Reverting changes.
Training on augumented user 97240 16/50 current_auc = 0.6364184504069944
User 97240 AUC after training: 0.6356145111044117
User 97240 does not improve AUC. Reverting changes.
Training on augumented user 63352 17/50 current_auc = 0.6364184504069944
User 63352 AUC after training: 0.6357150035172343
User 63352 does not improve AUC. Reverting changes.
Training on augumented user 29585 18/50 current_auc = 0.6364184504069944
User 29585 AUC after training: 0.6350618028338862
User 29585 does not improve AUC. Reverting changes.
Training on augumented user 80294 19/50 current_auc = 0.6364184504069944
User 80294 AUC after training: 0.6346095869761834
User 80294 does not improve AUC. Reverting changes.
Training on augumented user 38917 20/50 current_auc = 0.6364184504069944
User 38917 AUC after training: 0.6360667269621143
User 38917 does not improve AUC. Reverting changes.
Training on augumented user 113759 21/50 current_auc = 0.6364184504069944
User 113759 AUC after training: 0.6362174655813487
User 113759 does not improve AUC. Reverting changes.
Training on augumented user 5901 22/50 current_auc = 0.6364184504069944
User 5901 AUC after training: 0.6360164807557029
User 5901 does not improve AUC. Reverting changes.
Training on augumented user 129203 23/50 current_auc = 0.6364184504069944
User 129203 AUC after training: 0.6368706662646971
User 129203 improves AUC. Keeping the model.
Training on augumented user 135205 24/50 current_auc = 0.6368706662646971
User 135205 AUC after training: 0.6366194352326399
User 135205 does not improve AUC. Reverting changes.
Training on augumented user 72715 25/50 current_auc = 0.6368706662646971
User 72715 AUC after training: 0.6358154959300572
User 72715 does not improve AUC. Reverting changes.
Training on augumented user 105851 26/50 current_auc = 0.6368706662646971
User 105851 AUC after training: 0.6366696814390514
User 105851 does not improve AUC. Reverting changes.
Training on augumented user 28413 27/50 current_auc = 0.6368706662646971
User 28413 AUC after training: 0.636870666264697
User 28413 does not improve AUC. Reverting changes.
Training on augumented user 72292 28/50 current_auc = 0.6368706662646971
User 72292 AUC after training: 0.636870666264697
User 72292 does not improve AUC. Reverting changes.
Training on augumented user 27490 29/50 current_auc = 0.6368706662646971
User 27490 AUC after training: 0.63697115867752
User 27490 improves AUC. Keeping the model.
Training on augumented user 22220 30/50 current_auc = 0.63697115867752
User 22220 AUC after training: 0.6364686966134058
User 22220 does not improve AUC. Reverting changes.
Training on augumented user 103665 31/50 current_auc = 0.63697115867752
User 103665 AUC after training: 0.63661943523264
User 103665 does not improve AUC. Reverting changes.
Training on augumented user 6786 32/50 current_auc = 0.63697115867752
User 6786 AUC after training: 0.6372223897095769
User 6786 improves AUC. Keeping the model.
Training on augumented user 123327 33/50 current_auc = 0.6372223897095769
User 123327 AUC after training: 0.6363933273037885
User 123327 does not improve AUC. Reverting changes.
Training on augumented user 3532 34/50 current_auc = 0.6372223897095769
User 3532 AUC after training: 0.6367199276454627
User 3532 does not improve AUC. Reverting changes.
Training on augumented user 36593 35/50 current_auc = 0.6372223897095769
User 36593 AUC after training: 0.6355140186915887
User 36593 does not improve AUC. Reverting changes.
Training on augumented user 62275 36/50 current_auc = 0.6372223897095769
User 62275 AUC after training: 0.6369209124711084
User 62275 does not improve AUC. Reverting changes.
Training on augumented user 39515 37/50 current_auc = 0.6372223897095769
User 39515 AUC after training: 0.6363682042005829
User 39515 does not improve AUC. Reverting changes.
Training on augumented user 128372 38/50 current_auc = 0.6372223897095769
User 128372 AUC after training: 0.6366696814390514
User 128372 does not improve AUC. Reverting changes.
Training on augumented user 79297 39/50 current_auc = 0.6372223897095769
User 79297 AUC after training: 0.6365691890262285
User 79297 does not improve AUC. Reverting changes.
Training on augumented user 10980 40/50 current_auc = 0.6372223897095769
User 10980 AUC after training: 0.6361672193749371
User 10980 does not improve AUC. Reverting changes.
Training on augumented user 27722 41/50 current_auc = 0.6372223897095769
User 27722 AUC after training: 0.6360667269621144
User 27722 does not improve AUC. Reverting changes.
Training on augumented user 113674 42/50 current_auc = 0.6372223897095769
User 113674 AUC after training: 0.6358657421364687
User 113674 does not improve AUC. Reverting changes.
Training on augumented user 29035 43/50 current_auc = 0.6372223897095769
User 29035 AUC after training: 0.6349613104210633
User 29035 does not improve AUC. Reverting changes.
Training on augumented user 94834 44/50 current_auc = 0.6372223897095769
User 94834 AUC after training: 0.63679529695508
User 94834 does not improve AUC. Reverting changes.
Training on augumented user 38830 45/50 current_auc = 0.6372223897095769
User 38830 AUC after training: 0.6367199276454627
User 38830 does not improve AUC. Reverting changes.
Training on augumented user 101112 46/50 current_auc = 0.6372223897095769
User 101112 AUC after training: 0.635061802833886
User 101112 does not improve AUC. Reverting changes.
Training on augumented user 32729 47/50 current_auc = 0.6372223897095769
User 32729 AUC after training: 0.6369209124711084
User 32729 does not improve AUC. Reverting changes.
Training on augumented user 113066 48/50 current_auc = 0.6372223897095769
User 113066 AUC after training: 0.6372223897095769
User 113066 does not improve AUC. Reverting changes.
Training on augumented user 26671 49/50 current_auc = 0.6372223897095769
User 26671 AUC after training: 0.6373228821223997
User 26671 improves AUC. Keeping the model.
[2024-12-02 19:27:58.703614] start test user 129008 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:59.558003] start test user 129008 202/567 recall augumented users by random, augumented_users = [5398, 97445, 51977, 45832, 23324, 79005, 6322, 98995, 130732, 101580, 85551, 109417, 55062, 17694, 1102, 99283, 6141, 41346, 76194, 98934, 49779, 28856, 4394, 26269, 24117, 44881, 82787, 60448, 8808, 14557, 69985, 86437, 72030, 37235, 59389, 17078, 82864, 100480, 57400, 3040, 24632, 43266, 129848, 47538, 90143, 55831, 76740, 23858, 43579, 91288]
[2024-12-02 19:27:59.603371] user = 129008 Cloud 202/567
[2024-12-02 19:27:59.615540] user = 129008 Local 202/567
[2024-12-02 19:27:59.754809] user = 129008 Local+ 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:02.563693] user = 129008 MPDA- 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5679012345679013
Training on augumented user 5398 0/50 current_auc = 0.5679012345679013
User 5398 AUC after training: 0.5679012345679013
User 5398 does not improve AUC. Reverting changes.
Training on augumented user 97445 1/50 current_auc = 0.5679012345679013
User 97445 AUC after training: 0.5687830687830688
User 97445 improves AUC. Keeping the model.
Training on augumented user 51977 2/50 current_auc = 0.5687830687830688
User 51977 AUC after training: 0.5679012345679013
User 51977 does not improve AUC. Reverting changes.
Training on augumented user 45832 3/50 current_auc = 0.5687830687830688
User 45832 AUC after training: 0.5687830687830688
User 45832 does not improve AUC. Reverting changes.
Training on augumented user 23324 4/50 current_auc = 0.5687830687830688
User 23324 AUC after training: 0.5696649029982364
User 23324 improves AUC. Keeping the model.
Training on augumented user 79005 5/50 current_auc = 0.5696649029982364
User 79005 AUC after training: 0.5696649029982364
User 79005 does not improve AUC. Reverting changes.
Training on augumented user 6322 6/50 current_auc = 0.5696649029982364
User 6322 AUC after training: 0.5679012345679013
User 6322 does not improve AUC. Reverting changes.
Training on augumented user 98995 7/50 current_auc = 0.5696649029982364
User 98995 AUC after training: 0.5696649029982364
User 98995 does not improve AUC. Reverting changes.
Training on augumented user 130732 8/50 current_auc = 0.5696649029982364
User 130732 AUC after training: 0.5679012345679013
User 130732 does not improve AUC. Reverting changes.
Training on augumented user 101580 9/50 current_auc = 0.5696649029982364
User 101580 AUC after training: 0.5652557319223986
User 101580 does not improve AUC. Reverting changes.
Training on augumented user 85551 10/50 current_auc = 0.5696649029982364
User 85551 AUC after training: 0.5679012345679013
User 85551 does not improve AUC. Reverting changes.
Training on augumented user 109417 11/50 current_auc = 0.5696649029982364
User 109417 AUC after training: 0.5679012345679013
User 109417 does not improve AUC. Reverting changes.
Training on augumented user 55062 12/50 current_auc = 0.5696649029982364
User 55062 AUC after training: 0.5696649029982364
User 55062 does not improve AUC. Reverting changes.
Training on augumented user 17694 13/50 current_auc = 0.5696649029982364
User 17694 AUC after training: 0.5679012345679013
User 17694 does not improve AUC. Reverting changes.
Training on augumented user 1102 14/50 current_auc = 0.5696649029982364
User 1102 AUC after training: 0.5679012345679013
User 1102 does not improve AUC. Reverting changes.
Training on augumented user 99283 15/50 current_auc = 0.5696649029982364
User 99283 AUC after training: 0.5679012345679013
User 99283 does not improve AUC. Reverting changes.
Training on augumented user 6141 16/50 current_auc = 0.5696649029982364
User 6141 AUC after training: 0.5661375661375662
User 6141 does not improve AUC. Reverting changes.
Training on augumented user 41346 17/50 current_auc = 0.5696649029982364
User 41346 AUC after training: 0.5679012345679012
User 41346 does not improve AUC. Reverting changes.
Training on augumented user 76194 18/50 current_auc = 0.5696649029982364
User 76194 AUC after training: 0.5679012345679013
User 76194 does not improve AUC. Reverting changes.
Training on augumented user 98934 19/50 current_auc = 0.5696649029982364
User 98934 AUC after training: 0.5696649029982364
User 98934 does not improve AUC. Reverting changes.
Training on augumented user 49779 20/50 current_auc = 0.5696649029982364
User 49779 AUC after training: 0.5679012345679013
User 49779 does not improve AUC. Reverting changes.
Training on augumented user 28856 21/50 current_auc = 0.5696649029982364
User 28856 AUC after training: 0.5714285714285714
User 28856 improves AUC. Keeping the model.
Training on augumented user 4394 22/50 current_auc = 0.5714285714285714
User 4394 AUC after training: 0.5705467372134039
User 4394 does not improve AUC. Reverting changes.
Training on augumented user 26269 23/50 current_auc = 0.5714285714285714
User 26269 AUC after training: 0.5696649029982364
User 26269 does not improve AUC. Reverting changes.
Training on augumented user 24117 24/50 current_auc = 0.5714285714285714
User 24117 AUC after training: 0.5679012345679013
User 24117 does not improve AUC. Reverting changes.
Training on augumented user 44881 25/50 current_auc = 0.5714285714285714
User 44881 AUC after training: 0.5679012345679013
User 44881 does not improve AUC. Reverting changes.
Training on augumented user 82787 26/50 current_auc = 0.5714285714285714
User 82787 AUC after training: 0.5661375661375662
User 82787 does not improve AUC. Reverting changes.
Training on augumented user 60448 27/50 current_auc = 0.5714285714285714
User 60448 AUC after training: 0.5696649029982364
User 60448 does not improve AUC. Reverting changes.
Training on augumented user 8808 28/50 current_auc = 0.5714285714285714
User 8808 AUC after training: 0.5670194003527337
User 8808 does not improve AUC. Reverting changes.
Training on augumented user 14557 29/50 current_auc = 0.5714285714285714
User 14557 AUC after training: 0.5714285714285714
User 14557 does not improve AUC. Reverting changes.
Training on augumented user 69985 30/50 current_auc = 0.5714285714285714
User 69985 AUC after training: 0.5679012345679013
User 69985 does not improve AUC. Reverting changes.
Training on augumented user 86437 31/50 current_auc = 0.5714285714285714
User 86437 AUC after training: 0.5749559082892417
User 86437 improves AUC. Keeping the model.
Training on augumented user 72030 32/50 current_auc = 0.5749559082892417
User 72030 AUC after training: 0.5714285714285714
User 72030 does not improve AUC. Reverting changes.
Training on augumented user 37235 33/50 current_auc = 0.5749559082892417
User 37235 AUC after training: 0.5687830687830688
User 37235 does not improve AUC. Reverting changes.
Training on augumented user 59389 34/50 current_auc = 0.5749559082892417
User 59389 AUC after training: 0.5696649029982364
User 59389 does not improve AUC. Reverting changes.
Training on augumented user 17078 35/50 current_auc = 0.5749559082892417
User 17078 AUC after training: 0.5731922398589065
User 17078 does not improve AUC. Reverting changes.
Training on augumented user 82864 36/50 current_auc = 0.5749559082892417
User 82864 AUC after training: 0.5714285714285714
User 82864 does not improve AUC. Reverting changes.
Training on augumented user 100480 37/50 current_auc = 0.5749559082892417
User 100480 AUC after training: 0.5652557319223986
User 100480 does not improve AUC. Reverting changes.
Training on augumented user 57400 38/50 current_auc = 0.5749559082892417
User 57400 AUC after training: 0.5731922398589065
User 57400 does not improve AUC. Reverting changes.
Training on augumented user 3040 39/50 current_auc = 0.5749559082892417
User 3040 AUC after training: 0.5696649029982364
User 3040 does not improve AUC. Reverting changes.
Training on augumented user 24632 40/50 current_auc = 0.5749559082892417
User 24632 AUC after training: 0.5714285714285714
User 24632 does not improve AUC. Reverting changes.
Training on augumented user 43266 41/50 current_auc = 0.5749559082892417
User 43266 AUC after training: 0.5687830687830688
User 43266 does not improve AUC. Reverting changes.
Training on augumented user 129848 42/50 current_auc = 0.5749559082892417
User 129848 AUC after training: 0.5696649029982364
User 129848 does not improve AUC. Reverting changes.
Training on augumented user 47538 43/50 current_auc = 0.5749559082892417
User 47538 AUC after training: 0.5731922398589065
User 47538 does not improve AUC. Reverting changes.
Training on augumented user 90143 44/50 current_auc = 0.5749559082892417
User 90143 AUC after training: 0.5731922398589065
User 90143 does not improve AUC. Reverting changes.
Training on augumented user 55831 45/50 current_auc = 0.5749559082892417
User 55831 AUC after training: 0.5696649029982364
User 55831 does not improve AUC. Reverting changes.
Training on augumented user 76740 46/50 current_auc = 0.5749559082892417
User 76740 AUC after training: 0.5687830687830688
User 76740 does not improve AUC. Reverting changes.
Training on augumented user 23858 47/50 current_auc = 0.5749559082892417
User 23858 AUC after training: 0.5696649029982364
User 23858 does not improve AUC. Reverting changes.
Training on augumented user 43579 48/50 current_auc = 0.5749559082892417
User 43579 AUC after training: 0.5679012345679013
User 43579 does not improve AUC. Reverting changes.
Training on augumented user 91288 49/50 current_auc = 0.5749559082892417
User 91288 AUC after training: 0.5731922398589065
User 91288 does not improve AUC. Reverting changes.
[2024-12-02 19:28:28.739791] start test user 129042 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:29.276835] start test user 129042 203/567 recall augumented users by random, augumented_users = [116566, 129172, 80404, 83767, 88746, 123417, 67559, 47777, 35577, 122554, 67290, 59230, 131826, 32373, 83563, 28014, 138333, 2083, 12225, 101033, 110139, 36293, 56613, 122700, 113009, 108073, 122419, 105461, 61199, 103517, 58427, 47471, 26141, 2686, 52289, 5491, 67681, 67375, 38229, 72032, 88175, 16782, 131606, 42994, 55929, 98884, 43076, 73208, 10637, 119603]
[2024-12-02 19:28:29.292468] user = 129042 Cloud 203/567
[2024-12-02 19:28:29.319030] user = 129042 Local 203/567
[2024-12-02 19:28:29.442591] user = 129042 Local+ 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:31.859880] user = 129042 MPDA- 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6588921282798834
Training on augumented user 116566 0/50 current_auc = 0.6588921282798834
User 116566 AUC after training: 0.659125364431487
User 116566 improves AUC. Keeping the model.
Training on augumented user 129172 1/50 current_auc = 0.659125364431487
User 129172 AUC after training: 0.6593586005830905
User 129172 improves AUC. Keeping the model.
Training on augumented user 80404 2/50 current_auc = 0.6593586005830905
User 80404 AUC after training: 0.6589504373177842
User 80404 does not improve AUC. Reverting changes.
Training on augumented user 83767 3/50 current_auc = 0.6593586005830905
User 83767 AUC after training: 0.6591253644314868
User 83767 does not improve AUC. Reverting changes.
Training on augumented user 88746 4/50 current_auc = 0.6593586005830905
User 88746 AUC after training: 0.6586588921282799
User 88746 does not improve AUC. Reverting changes.
Training on augumented user 123417 5/50 current_auc = 0.6593586005830905
User 123417 AUC after training: 0.6599416909620992
User 123417 improves AUC. Keeping the model.
Training on augumented user 67559 6/50 current_auc = 0.6599416909620992
User 67559 AUC after training: 0.6600583090379009
User 67559 improves AUC. Keeping the model.
Training on augumented user 47777 7/50 current_auc = 0.6600583090379009
User 47777 AUC after training: 0.6592419825072887
User 47777 does not improve AUC. Reverting changes.
Training on augumented user 35577 8/50 current_auc = 0.6600583090379009
User 35577 AUC after training: 0.6592419825072886
User 35577 does not improve AUC. Reverting changes.
Training on augumented user 122554 9/50 current_auc = 0.6600583090379009
User 122554 AUC after training: 0.6598833819241984
User 122554 does not improve AUC. Reverting changes.
Training on augumented user 67290 10/50 current_auc = 0.6600583090379009
User 67290 AUC after training: 0.6593002915451894
User 67290 does not improve AUC. Reverting changes.
Training on augumented user 59230 11/50 current_auc = 0.6600583090379009
User 59230 AUC after training: 0.6585422740524781
User 59230 does not improve AUC. Reverting changes.
Training on augumented user 131826 12/50 current_auc = 0.6600583090379009
User 131826 AUC after training: 0.6600583090379009
User 131826 does not improve AUC. Reverting changes.
Training on augumented user 32373 13/50 current_auc = 0.6600583090379009
User 32373 AUC after training: 0.6601166180758018
User 32373 improves AUC. Keeping the model.
Training on augumented user 83563 14/50 current_auc = 0.6601166180758018
User 83563 AUC after training: 0.6597667638483965
User 83563 does not improve AUC. Reverting changes.
Training on augumented user 28014 15/50 current_auc = 0.6601166180758018
User 28014 AUC after training: 0.6602332361516036
User 28014 improves AUC. Keeping the model.
Training on augumented user 138333 16/50 current_auc = 0.6602332361516036
User 138333 AUC after training: 0.6602332361516035
User 138333 does not improve AUC. Reverting changes.
Training on augumented user 2083 17/50 current_auc = 0.6602332361516036
User 2083 AUC after training: 0.6591836734693877
User 2083 does not improve AUC. Reverting changes.
Training on augumented user 12225 18/50 current_auc = 0.6602332361516036
User 12225 AUC after training: 0.6604081632653062
User 12225 improves AUC. Keeping the model.
Training on augumented user 101033 19/50 current_auc = 0.6604081632653062
User 101033 AUC after training: 0.6599416909620991
User 101033 does not improve AUC. Reverting changes.
Training on augumented user 110139 20/50 current_auc = 0.6604081632653062
User 110139 AUC after training: 0.6596501457725948
User 110139 does not improve AUC. Reverting changes.
Training on augumented user 36293 21/50 current_auc = 0.6604081632653062
User 36293 AUC after training: 0.6595918367346939
User 36293 does not improve AUC. Reverting changes.
Training on augumented user 56613 22/50 current_auc = 0.6604081632653062
User 56613 AUC after training: 0.6605830903790089
User 56613 improves AUC. Keeping the model.
Training on augumented user 122700 23/50 current_auc = 0.6605830903790089
User 122700 AUC after training: 0.6605247813411079
User 122700 does not improve AUC. Reverting changes.
Training on augumented user 113009 24/50 current_auc = 0.6605830903790089
User 113009 AUC after training: 0.657667638483965
User 113009 does not improve AUC. Reverting changes.
Training on augumented user 108073 25/50 current_auc = 0.6605830903790089
User 108073 AUC after training: 0.6598250728862973
User 108073 does not improve AUC. Reverting changes.
Training on augumented user 122419 26/50 current_auc = 0.6605830903790089
User 122419 AUC after training: 0.6600583090379009
User 122419 does not improve AUC. Reverting changes.
Training on augumented user 105461 27/50 current_auc = 0.6605830903790089
User 105461 AUC after training: 0.6591253644314868
User 105461 does not improve AUC. Reverting changes.
Training on augumented user 61199 28/50 current_auc = 0.6605830903790089
User 61199 AUC after training: 0.6606997084548105
User 61199 improves AUC. Keeping the model.
Training on augumented user 103517 29/50 current_auc = 0.6606997084548105
User 103517 AUC after training: 0.6603498542274052
User 103517 does not improve AUC. Reverting changes.
Training on augumented user 58427 30/50 current_auc = 0.6606997084548105
User 58427 AUC after training: 0.6606997084548105
User 58427 does not improve AUC. Reverting changes.
Training on augumented user 47471 31/50 current_auc = 0.6606997084548105
User 47471 AUC after training: 0.660932944606414
User 47471 improves AUC. Keeping the model.
Training on augumented user 26141 32/50 current_auc = 0.660932944606414
User 26141 AUC after training: 0.6594752186588921
User 26141 does not improve AUC. Reverting changes.
Training on augumented user 2686 33/50 current_auc = 0.660932944606414
User 2686 AUC after training: 0.6608746355685131
User 2686 does not improve AUC. Reverting changes.
Training on augumented user 52289 34/50 current_auc = 0.660932944606414
User 52289 AUC after training: 0.6608163265306122
User 52289 does not improve AUC. Reverting changes.
Training on augumented user 5491 35/50 current_auc = 0.660932944606414
User 5491 AUC after training: 0.6604664723032071
User 5491 does not improve AUC. Reverting changes.
Training on augumented user 67681 36/50 current_auc = 0.660932944606414
User 67681 AUC after training: 0.6606413994169096
User 67681 does not improve AUC. Reverting changes.
Training on augumented user 67375 37/50 current_auc = 0.660932944606414
User 67375 AUC after training: 0.6604081632653062
User 67375 does not improve AUC. Reverting changes.
Training on augumented user 38229 38/50 current_auc = 0.660932944606414
User 38229 AUC after training: 0.6606997084548105
User 38229 does not improve AUC. Reverting changes.
Training on augumented user 72032 39/50 current_auc = 0.660932944606414
User 72032 AUC after training: 0.6602332361516035
User 72032 does not improve AUC. Reverting changes.
Training on augumented user 88175 40/50 current_auc = 0.660932944606414
User 88175 AUC after training: 0.6609329446064139
User 88175 does not improve AUC. Reverting changes.
Training on augumented user 16782 41/50 current_auc = 0.660932944606414
User 16782 AUC after training: 0.6605247813411078
User 16782 does not improve AUC. Reverting changes.
Training on augumented user 131606 42/50 current_auc = 0.660932944606414
User 131606 AUC after training: 0.6605539358600583
User 131606 does not improve AUC. Reverting changes.
Training on augumented user 42994 43/50 current_auc = 0.660932944606414
User 42994 AUC after training: 0.6604664723032071
User 42994 does not improve AUC. Reverting changes.
Training on augumented user 55929 44/50 current_auc = 0.660932944606414
User 55929 AUC after training: 0.6587755102040818
User 55929 does not improve AUC. Reverting changes.
Training on augumented user 98884 45/50 current_auc = 0.660932944606414
User 98884 AUC after training: 0.6606997084548105
User 98884 does not improve AUC. Reverting changes.
Training on augumented user 43076 46/50 current_auc = 0.660932944606414
User 43076 AUC after training: 0.6601166180758018
User 43076 does not improve AUC. Reverting changes.
Training on augumented user 73208 47/50 current_auc = 0.660932944606414
User 73208 AUC after training: 0.6607580174927113
User 73208 does not improve AUC. Reverting changes.
Training on augumented user 10637 48/50 current_auc = 0.660932944606414
User 10637 AUC after training: 0.6608163265306123
User 10637 does not improve AUC. Reverting changes.
Training on augumented user 119603 49/50 current_auc = 0.660932944606414
User 119603 AUC after training: 0.6590670553935859
User 119603 does not improve AUC. Reverting changes.
[2024-12-02 19:29:03.586086] start test user 129049 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:04.043528] start test user 129049 204/567 recall augumented users by random, augumented_users = [87433, 28408, 132488, 30625, 42710, 115034, 88679, 59631, 95188, 82873, 72396, 105390, 93671, 106759, 93849, 30818, 71564, 28213, 124315, 131869, 70774, 82211, 60068, 137192, 110375, 18326, 118898, 26767, 15956, 19733, 29070, 40350, 28627, 74571, 53279, 124089, 132734, 124158, 58830, 121028, 40020, 28106, 4787, 58845, 132146, 3630, 137177, 112520, 97245, 29204]
[2024-12-02 19:29:04.058117] user = 129049 Cloud 204/567
[2024-12-02 19:29:04.068216] user = 129049 Local 204/567
[2024-12-02 19:29:04.130788] user = 129049 Local+ 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:07.035938] user = 129049 MPDA- 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5132275132275133
Training on augumented user 87433 0/50 current_auc = 0.5132275132275133
User 87433 AUC after training: 0.5132275132275133
User 87433 does not improve AUC. Reverting changes.
Training on augumented user 28408 1/50 current_auc = 0.5132275132275133
User 28408 AUC after training: 0.5105820105820106
User 28408 does not improve AUC. Reverting changes.
Training on augumented user 132488 2/50 current_auc = 0.5132275132275133
User 132488 AUC after training: 0.5132275132275133
User 132488 does not improve AUC. Reverting changes.
Training on augumented user 30625 3/50 current_auc = 0.5132275132275133
User 30625 AUC after training: 0.5132275132275133
User 30625 does not improve AUC. Reverting changes.
Training on augumented user 42710 4/50 current_auc = 0.5132275132275133
User 42710 AUC after training: 0.5132275132275133
User 42710 does not improve AUC. Reverting changes.
Training on augumented user 115034 5/50 current_auc = 0.5132275132275133
User 115034 AUC after training: 0.5132275132275133
User 115034 does not improve AUC. Reverting changes.
Training on augumented user 88679 6/50 current_auc = 0.5132275132275133
User 88679 AUC after training: 0.5105820105820106
User 88679 does not improve AUC. Reverting changes.
Training on augumented user 59631 7/50 current_auc = 0.5132275132275133
User 59631 AUC after training: 0.5211640211640212
User 59631 improves AUC. Keeping the model.
Training on augumented user 95188 8/50 current_auc = 0.5211640211640212
User 95188 AUC after training: 0.5211640211640212
User 95188 does not improve AUC. Reverting changes.
Training on augumented user 82873 9/50 current_auc = 0.5211640211640212
User 82873 AUC after training: 0.5158730158730158
User 82873 does not improve AUC. Reverting changes.
Training on augumented user 72396 10/50 current_auc = 0.5211640211640212
User 72396 AUC after training: 0.5211640211640212
User 72396 does not improve AUC. Reverting changes.
Training on augumented user 105390 11/50 current_auc = 0.5211640211640212
User 105390 AUC after training: 0.5211640211640212
User 105390 does not improve AUC. Reverting changes.
Training on augumented user 93671 12/50 current_auc = 0.5211640211640212
User 93671 AUC after training: 0.5185185185185186
User 93671 does not improve AUC. Reverting changes.
Training on augumented user 106759 13/50 current_auc = 0.5211640211640212
User 106759 AUC after training: 0.5211640211640212
User 106759 does not improve AUC. Reverting changes.
Training on augumented user 93849 14/50 current_auc = 0.5211640211640212
User 93849 AUC after training: 0.5238095238095237
User 93849 improves AUC. Keeping the model.
Training on augumented user 30818 15/50 current_auc = 0.5238095238095237
User 30818 AUC after training: 0.5185185185185186
User 30818 does not improve AUC. Reverting changes.
Training on augumented user 71564 16/50 current_auc = 0.5238095238095237
User 71564 AUC after training: 0.5185185185185185
User 71564 does not improve AUC. Reverting changes.
Training on augumented user 28213 17/50 current_auc = 0.5238095238095237
User 28213 AUC after training: 0.5211640211640212
User 28213 does not improve AUC. Reverting changes.
Training on augumented user 124315 18/50 current_auc = 0.5238095238095237
User 124315 AUC after training: 0.5211640211640212
User 124315 does not improve AUC. Reverting changes.
Training on augumented user 131869 19/50 current_auc = 0.5238095238095237
User 131869 AUC after training: 0.5238095238095237
User 131869 does not improve AUC. Reverting changes.
Training on augumented user 70774 20/50 current_auc = 0.5238095238095237
User 70774 AUC after training: 0.5238095238095237
User 70774 does not improve AUC. Reverting changes.
Training on augumented user 82211 21/50 current_auc = 0.5238095238095237
User 82211 AUC after training: 0.5238095238095237
User 82211 does not improve AUC. Reverting changes.
Training on augumented user 60068 22/50 current_auc = 0.5238095238095237
User 60068 AUC after training: 0.5238095238095237
User 60068 does not improve AUC. Reverting changes.
Training on augumented user 137192 23/50 current_auc = 0.5238095238095237
User 137192 AUC after training: 0.5158730158730158
User 137192 does not improve AUC. Reverting changes.
Training on augumented user 110375 24/50 current_auc = 0.5238095238095237
User 110375 AUC after training: 0.5238095238095237
User 110375 does not improve AUC. Reverting changes.
Training on augumented user 18326 25/50 current_auc = 0.5238095238095237
User 18326 AUC after training: 0.5158730158730158
User 18326 does not improve AUC. Reverting changes.
Training on augumented user 118898 26/50 current_auc = 0.5238095238095237
User 118898 AUC after training: 0.5158730158730158
User 118898 does not improve AUC. Reverting changes.
Training on augumented user 26767 27/50 current_auc = 0.5238095238095237
User 26767 AUC after training: 0.5158730158730158
User 26767 does not improve AUC. Reverting changes.
Training on augumented user 15956 28/50 current_auc = 0.5238095238095237
User 15956 AUC after training: 0.5238095238095237
User 15956 does not improve AUC. Reverting changes.
Training on augumented user 19733 29/50 current_auc = 0.5238095238095237
User 19733 AUC after training: 0.5185185185185185
User 19733 does not improve AUC. Reverting changes.
Training on augumented user 29070 30/50 current_auc = 0.5238095238095237
User 29070 AUC after training: 0.5238095238095237
User 29070 does not improve AUC. Reverting changes.
Training on augumented user 40350 31/50 current_auc = 0.5238095238095237
User 40350 AUC after training: 0.5238095238095237
User 40350 does not improve AUC. Reverting changes.
Training on augumented user 28627 32/50 current_auc = 0.5238095238095237
User 28627 AUC after training: 0.5238095238095237
User 28627 does not improve AUC. Reverting changes.
Training on augumented user 74571 33/50 current_auc = 0.5238095238095237
User 74571 AUC after training: 0.5158730158730158
User 74571 does not improve AUC. Reverting changes.
Training on augumented user 53279 34/50 current_auc = 0.5238095238095237
User 53279 AUC after training: 0.5238095238095237
User 53279 does not improve AUC. Reverting changes.
Training on augumented user 124089 35/50 current_auc = 0.5238095238095237
User 124089 AUC after training: 0.5211640211640212
User 124089 does not improve AUC. Reverting changes.
Training on augumented user 132734 36/50 current_auc = 0.5238095238095237
User 132734 AUC after training: 0.5185185185185186
User 132734 does not improve AUC. Reverting changes.
Training on augumented user 124158 37/50 current_auc = 0.5238095238095237
User 124158 AUC after training: 0.5211640211640212
User 124158 does not improve AUC. Reverting changes.
Training on augumented user 58830 38/50 current_auc = 0.5238095238095237
User 58830 AUC after training: 0.5211640211640212
User 58830 does not improve AUC. Reverting changes.
Training on augumented user 121028 39/50 current_auc = 0.5238095238095237
User 121028 AUC after training: 0.5238095238095237
User 121028 does not improve AUC. Reverting changes.
Training on augumented user 40020 40/50 current_auc = 0.5238095238095237
User 40020 AUC after training: 0.5238095238095237
User 40020 does not improve AUC. Reverting changes.
Training on augumented user 28106 41/50 current_auc = 0.5238095238095237
User 28106 AUC after training: 0.5185185185185186
User 28106 does not improve AUC. Reverting changes.
Training on augumented user 4787 42/50 current_auc = 0.5238095238095237
User 4787 AUC after training: 0.5211640211640212
User 4787 does not improve AUC. Reverting changes.
Training on augumented user 58845 43/50 current_auc = 0.5238095238095237
User 58845 AUC after training: 0.5238095238095237
User 58845 does not improve AUC. Reverting changes.
Training on augumented user 132146 44/50 current_auc = 0.5238095238095237
User 132146 AUC after training: 0.5185185185185186
User 132146 does not improve AUC. Reverting changes.
Training on augumented user 3630 45/50 current_auc = 0.5238095238095237
User 3630 AUC after training: 0.5185185185185185
User 3630 does not improve AUC. Reverting changes.
Training on augumented user 137177 46/50 current_auc = 0.5238095238095237
User 137177 AUC after training: 0.5211640211640212
User 137177 does not improve AUC. Reverting changes.
Training on augumented user 112520 47/50 current_auc = 0.5238095238095237
User 112520 AUC after training: 0.5211640211640212
User 112520 does not improve AUC. Reverting changes.
Training on augumented user 97245 48/50 current_auc = 0.5238095238095237
User 97245 AUC after training: 0.5238095238095237
User 97245 does not improve AUC. Reverting changes.
Training on augumented user 29204 49/50 current_auc = 0.5238095238095237
User 29204 AUC after training: 0.5185185185185185
User 29204 does not improve AUC. Reverting changes.
[2024-12-02 19:29:36.156216] start test user 129053 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:36.610789] start test user 129053 205/567 recall augumented users by random, augumented_users = [361, 4584, 53400, 70992, 124105, 26909, 106595, 129745, 71421, 115658, 83001, 39285, 111485, 109883, 35938, 134275, 105438, 45712, 97194, 95824, 28181, 29709, 95024, 44926, 65473, 116659, 121867, 133432, 109695, 7441, 104434, 58024, 127170, 95771, 36781, 1329, 33894, 24049, 120314, 10073, 86001, 7018, 14492, 2882, 56517, 86380, 99595, 101500, 21256, 96379]
[2024-12-02 19:29:36.625757] user = 129053 Cloud 205/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:36.632531] user = 129053 Local 205/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:36.682392] user = 129053 Local+ 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:39.001640] user = 129053 MPDA- 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 361 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 361 AUC after training: 0.5
User 361 does not improve AUC. Reverting changes.
Training on augumented user 4584 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4584 AUC after training: 0.5
User 4584 does not improve AUC. Reverting changes.
Training on augumented user 53400 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53400 AUC after training: 0.5
User 53400 does not improve AUC. Reverting changes.
Training on augumented user 70992 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70992 AUC after training: 0.5
User 70992 does not improve AUC. Reverting changes.
Training on augumented user 124105 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124105 AUC after training: 0.5
User 124105 does not improve AUC. Reverting changes.
Training on augumented user 26909 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26909 AUC after training: 0.5
User 26909 does not improve AUC. Reverting changes.
Training on augumented user 106595 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106595 AUC after training: 0.5
User 106595 does not improve AUC. Reverting changes.
Training on augumented user 129745 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129745 AUC after training: 0.5
User 129745 does not improve AUC. Reverting changes.
Training on augumented user 71421 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71421 AUC after training: 0.5
User 71421 does not improve AUC. Reverting changes.
Training on augumented user 115658 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115658 AUC after training: 0.5
User 115658 does not improve AUC. Reverting changes.
Training on augumented user 83001 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83001 AUC after training: 0.5
User 83001 does not improve AUC. Reverting changes.
Training on augumented user 39285 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39285 AUC after training: 0.5
User 39285 does not improve AUC. Reverting changes.
Training on augumented user 111485 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111485 AUC after training: 0.5
User 111485 does not improve AUC. Reverting changes.
Training on augumented user 109883 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109883 AUC after training: 0.5
User 109883 does not improve AUC. Reverting changes.
Training on augumented user 35938 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35938 AUC after training: 0.5
User 35938 does not improve AUC. Reverting changes.
Training on augumented user 134275 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134275 AUC after training: 0.5
User 134275 does not improve AUC. Reverting changes.
Training on augumented user 105438 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105438 AUC after training: 0.5
User 105438 does not improve AUC. Reverting changes.
Training on augumented user 45712 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45712 AUC after training: 0.5
User 45712 does not improve AUC. Reverting changes.
Training on augumented user 97194 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97194 AUC after training: 0.5
User 97194 does not improve AUC. Reverting changes.
Training on augumented user 95824 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95824 AUC after training: 0.5
User 95824 does not improve AUC. Reverting changes.
Training on augumented user 28181 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28181 AUC after training: 0.5
User 28181 does not improve AUC. Reverting changes.
Training on augumented user 29709 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29709 AUC after training: 0.5
User 29709 does not improve AUC. Reverting changes.
Training on augumented user 95024 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95024 AUC after training: 0.5
User 95024 does not improve AUC. Reverting changes.
Training on augumented user 44926 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44926 AUC after training: 0.5
User 44926 does not improve AUC. Reverting changes.
Training on augumented user 65473 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65473 AUC after training: 0.5
User 65473 does not improve AUC. Reverting changes.
Training on augumented user 116659 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116659 AUC after training: 0.5
User 116659 does not improve AUC. Reverting changes.
Training on augumented user 121867 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121867 AUC after training: 0.5
User 121867 does not improve AUC. Reverting changes.
Training on augumented user 133432 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133432 AUC after training: 0.5
User 133432 does not improve AUC. Reverting changes.
Training on augumented user 109695 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109695 AUC after training: 0.5
User 109695 does not improve AUC. Reverting changes.
Training on augumented user 7441 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7441 AUC after training: 0.5
User 7441 does not improve AUC. Reverting changes.
Training on augumented user 104434 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104434 AUC after training: 0.5
User 104434 does not improve AUC. Reverting changes.
Training on augumented user 58024 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58024 AUC after training: 0.5
User 58024 does not improve AUC. Reverting changes.
Training on augumented user 127170 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127170 AUC after training: 0.5
User 127170 does not improve AUC. Reverting changes.
Training on augumented user 95771 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95771 AUC after training: 0.5
User 95771 does not improve AUC. Reverting changes.
Training on augumented user 36781 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36781 AUC after training: 0.5
User 36781 does not improve AUC. Reverting changes.
Training on augumented user 1329 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1329 AUC after training: 0.5
User 1329 does not improve AUC. Reverting changes.
Training on augumented user 33894 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33894 AUC after training: 0.5
User 33894 does not improve AUC. Reverting changes.
Training on augumented user 24049 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24049 AUC after training: 0.5
User 24049 does not improve AUC. Reverting changes.
Training on augumented user 120314 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120314 AUC after training: 0.5
User 120314 does not improve AUC. Reverting changes.
Training on augumented user 10073 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10073 AUC after training: 0.5
User 10073 does not improve AUC. Reverting changes.
Training on augumented user 86001 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86001 AUC after training: 0.5
User 86001 does not improve AUC. Reverting changes.
Training on augumented user 7018 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7018 AUC after training: 0.5
User 7018 does not improve AUC. Reverting changes.
Training on augumented user 14492 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14492 AUC after training: 0.5
User 14492 does not improve AUC. Reverting changes.
Training on augumented user 2882 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2882 AUC after training: 0.5
User 2882 does not improve AUC. Reverting changes.
Training on augumented user 56517 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56517 AUC after training: 0.5
User 56517 does not improve AUC. Reverting changes.
Training on augumented user 86380 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86380 AUC after training: 0.5
User 86380 does not improve AUC. Reverting changes.
Training on augumented user 99595 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99595 AUC after training: 0.5
User 99595 does not improve AUC. Reverting changes.
Training on augumented user 101500 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101500 AUC after training: 0.5
User 101500 does not improve AUC. Reverting changes.
Training on augumented user 21256 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21256 AUC after training: 0.5
User 21256 does not improve AUC. Reverting changes.
Training on augumented user 96379 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96379 AUC after training: 0.5
User 96379 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:30:06.790300] start test user 129054 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:07.298249] start test user 129054 206/567 recall augumented users by random, augumented_users = [38393, 119878, 25984, 26311, 108138, 35305, 122365, 84802, 48405, 20502, 27150, 54289, 47409, 93348, 80631, 106676, 49851, 66426, 79066, 61963, 117779, 116462, 124967, 31071, 101278, 261, 119490, 28105, 118968, 44940, 100154, 59878, 4712, 83296, 112373, 124700, 83028, 92343, 115774, 59368, 66099, 12770, 104256, 124356, 17874, 89940, 8737, 60670, 48495, 44074]
[2024-12-02 19:30:07.312771] user = 129054 Cloud 206/567
[2024-12-02 19:30:07.335761] user = 129054 Local 206/567
[2024-12-02 19:30:07.386191] user = 129054 Local+ 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:09.483481] user = 129054 MPDA- 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7894736842105263
Training on augumented user 38393 0/50 current_auc = 0.7894736842105263
User 38393 AUC after training: 0.7894736842105263
User 38393 does not improve AUC. Reverting changes.
Training on augumented user 119878 1/50 current_auc = 0.7894736842105263
User 119878 AUC after training: 0.7894736842105263
User 119878 does not improve AUC. Reverting changes.
Training on augumented user 25984 2/50 current_auc = 0.7894736842105263
User 25984 AUC after training: 0.7894736842105263
User 25984 does not improve AUC. Reverting changes.
Training on augumented user 26311 3/50 current_auc = 0.7894736842105263
User 26311 AUC after training: 0.8070175438596492
User 26311 improves AUC. Keeping the model.
Training on augumented user 108138 4/50 current_auc = 0.8070175438596492
User 108138 AUC after training: 0.7894736842105263
User 108138 does not improve AUC. Reverting changes.
Training on augumented user 35305 5/50 current_auc = 0.8070175438596492
User 35305 AUC after training: 0.8070175438596492
User 35305 does not improve AUC. Reverting changes.
Training on augumented user 122365 6/50 current_auc = 0.8070175438596492
User 122365 AUC after training: 0.7894736842105263
User 122365 does not improve AUC. Reverting changes.
Training on augumented user 84802 7/50 current_auc = 0.8070175438596492
User 84802 AUC after training: 0.8070175438596492
User 84802 does not improve AUC. Reverting changes.
Training on augumented user 48405 8/50 current_auc = 0.8070175438596492
User 48405 AUC after training: 0.7894736842105263
User 48405 does not improve AUC. Reverting changes.
Training on augumented user 20502 9/50 current_auc = 0.8070175438596492
User 20502 AUC after training: 0.8070175438596492
User 20502 does not improve AUC. Reverting changes.
Training on augumented user 27150 10/50 current_auc = 0.8070175438596492
User 27150 AUC after training: 0.7894736842105263
User 27150 does not improve AUC. Reverting changes.
Training on augumented user 54289 11/50 current_auc = 0.8070175438596492
User 54289 AUC after training: 0.8070175438596492
User 54289 does not improve AUC. Reverting changes.
Training on augumented user 47409 12/50 current_auc = 0.8070175438596492
User 47409 AUC after training: 0.8070175438596492
User 47409 does not improve AUC. Reverting changes.
Training on augumented user 93348 13/50 current_auc = 0.8070175438596492
User 93348 AUC after training: 0.8070175438596492
User 93348 does not improve AUC. Reverting changes.
Training on augumented user 80631 14/50 current_auc = 0.8070175438596492
User 80631 AUC after training: 0.8070175438596492
User 80631 does not improve AUC. Reverting changes.
Training on augumented user 106676 15/50 current_auc = 0.8070175438596492
User 106676 AUC after training: 0.8070175438596492
User 106676 does not improve AUC. Reverting changes.
Training on augumented user 49851 16/50 current_auc = 0.8070175438596492
User 49851 AUC after training: 0.7894736842105263
User 49851 does not improve AUC. Reverting changes.
Training on augumented user 66426 17/50 current_auc = 0.8070175438596492
User 66426 AUC after training: 0.8070175438596492
User 66426 does not improve AUC. Reverting changes.
Training on augumented user 79066 18/50 current_auc = 0.8070175438596492
User 79066 AUC after training: 0.7894736842105263
User 79066 does not improve AUC. Reverting changes.
Training on augumented user 61963 19/50 current_auc = 0.8070175438596492
User 61963 AUC after training: 0.8070175438596492
User 61963 does not improve AUC. Reverting changes.
Training on augumented user 117779 20/50 current_auc = 0.8070175438596492
User 117779 AUC after training: 0.8070175438596492
User 117779 does not improve AUC. Reverting changes.
Training on augumented user 116462 21/50 current_auc = 0.8070175438596492
User 116462 AUC after training: 0.8070175438596492
User 116462 does not improve AUC. Reverting changes.
Training on augumented user 124967 22/50 current_auc = 0.8070175438596492
User 124967 AUC after training: 0.7894736842105263
User 124967 does not improve AUC. Reverting changes.
Training on augumented user 31071 23/50 current_auc = 0.8070175438596492
User 31071 AUC after training: 0.8070175438596492
User 31071 does not improve AUC. Reverting changes.
Training on augumented user 101278 24/50 current_auc = 0.8070175438596492
User 101278 AUC after training: 0.8070175438596492
User 101278 does not improve AUC. Reverting changes.
Training on augumented user 261 25/50 current_auc = 0.8070175438596492
User 261 AUC after training: 0.8070175438596492
User 261 does not improve AUC. Reverting changes.
Training on augumented user 119490 26/50 current_auc = 0.8070175438596492
User 119490 AUC after training: 0.8070175438596492
User 119490 does not improve AUC. Reverting changes.
Training on augumented user 28105 27/50 current_auc = 0.8070175438596492
User 28105 AUC after training: 0.8070175438596492
User 28105 does not improve AUC. Reverting changes.
Training on augumented user 118968 28/50 current_auc = 0.8070175438596492
User 118968 AUC after training: 0.8070175438596492
User 118968 does not improve AUC. Reverting changes.
Training on augumented user 44940 29/50 current_auc = 0.8070175438596492
User 44940 AUC after training: 0.8070175438596492
User 44940 does not improve AUC. Reverting changes.
Training on augumented user 100154 30/50 current_auc = 0.8070175438596492
User 100154 AUC after training: 0.8070175438596492
User 100154 does not improve AUC. Reverting changes.
Training on augumented user 59878 31/50 current_auc = 0.8070175438596492
User 59878 AUC after training: 0.8070175438596492
User 59878 does not improve AUC. Reverting changes.
Training on augumented user 4712 32/50 current_auc = 0.8070175438596492
User 4712 AUC after training: 0.7894736842105263
User 4712 does not improve AUC. Reverting changes.
Training on augumented user 83296 33/50 current_auc = 0.8070175438596492
User 83296 AUC after training: 0.8070175438596492
User 83296 does not improve AUC. Reverting changes.
Training on augumented user 112373 34/50 current_auc = 0.8070175438596492
User 112373 AUC after training: 0.8070175438596492
User 112373 does not improve AUC. Reverting changes.
Training on augumented user 124700 35/50 current_auc = 0.8070175438596492
User 124700 AUC after training: 0.7894736842105263
User 124700 does not improve AUC. Reverting changes.
Training on augumented user 83028 36/50 current_auc = 0.8070175438596492
User 83028 AUC after training: 0.8070175438596492
User 83028 does not improve AUC. Reverting changes.
Training on augumented user 92343 37/50 current_auc = 0.8070175438596492
User 92343 AUC after training: 0.8070175438596492
User 92343 does not improve AUC. Reverting changes.
Training on augumented user 115774 38/50 current_auc = 0.8070175438596492
User 115774 AUC after training: 0.8070175438596492
User 115774 does not improve AUC. Reverting changes.
Training on augumented user 59368 39/50 current_auc = 0.8070175438596492
User 59368 AUC after training: 0.8070175438596492
User 59368 does not improve AUC. Reverting changes.
Training on augumented user 66099 40/50 current_auc = 0.8070175438596492
User 66099 AUC after training: 0.8070175438596492
User 66099 does not improve AUC. Reverting changes.
Training on augumented user 12770 41/50 current_auc = 0.8070175438596492
User 12770 AUC after training: 0.8070175438596492
User 12770 does not improve AUC. Reverting changes.
Training on augumented user 104256 42/50 current_auc = 0.8070175438596492
User 104256 AUC after training: 0.8070175438596492
User 104256 does not improve AUC. Reverting changes.
Training on augumented user 124356 43/50 current_auc = 0.8070175438596492
User 124356 AUC after training: 0.8070175438596492
User 124356 does not improve AUC. Reverting changes.
Training on augumented user 17874 44/50 current_auc = 0.8070175438596492
User 17874 AUC after training: 0.8070175438596492
User 17874 does not improve AUC. Reverting changes.
Training on augumented user 89940 45/50 current_auc = 0.8070175438596492
User 89940 AUC after training: 0.8070175438596492
User 89940 does not improve AUC. Reverting changes.
Training on augumented user 8737 46/50 current_auc = 0.8070175438596492
User 8737 AUC after training: 0.8070175438596492
User 8737 does not improve AUC. Reverting changes.
Training on augumented user 60670 47/50 current_auc = 0.8070175438596492
User 60670 AUC after training: 0.8070175438596492
User 60670 does not improve AUC. Reverting changes.
Training on augumented user 48495 48/50 current_auc = 0.8070175438596492
User 48495 AUC after training: 0.7894736842105263
User 48495 does not improve AUC. Reverting changes.
Training on augumented user 44074 49/50 current_auc = 0.8070175438596492
User 44074 AUC after training: 0.8070175438596492
User 44074 does not improve AUC. Reverting changes.
[2024-12-02 19:30:41.263487] start test user 129058 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:41.758266] start test user 129058 207/567 recall augumented users by random, augumented_users = [49954, 10423, 134066, 119005, 108918, 119932, 20987, 97872, 119955, 65999, 122361, 49707, 33931, 32244, 95332, 16182, 55714, 125603, 998, 30003, 27812, 104594, 33829, 118973, 67254, 1428, 33853, 20908, 98482, 91442, 559, 35109, 76011, 102908, 19823, 111977, 7756, 77943, 110840, 18541, 95351, 50665, 52261, 89948, 73061, 117910, 83809, 117098, 50507, 102758]
[2024-12-02 19:30:41.773412] user = 129058 Cloud 207/567
[2024-12-02 19:30:41.789995] user = 129058 Local 207/567
[2024-12-02 19:30:41.885678] user = 129058 Local+ 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:44.205774] user = 129058 MPDA- 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4791139240506329
Training on augumented user 49954 0/50 current_auc = 0.4791139240506329
User 49954 AUC after training: 0.47995780590717296
User 49954 improves AUC. Keeping the model.
Training on augumented user 10423 1/50 current_auc = 0.47995780590717296
User 10423 AUC after training: 0.4791139240506329
User 10423 does not improve AUC. Reverting changes.
Training on augumented user 134066 2/50 current_auc = 0.47995780590717296
User 134066 AUC after training: 0.4814345991561182
User 134066 improves AUC. Keeping the model.
Training on augumented user 119005 3/50 current_auc = 0.4814345991561182
User 119005 AUC after training: 0.4820675105485232
User 119005 improves AUC. Keeping the model.
Training on augumented user 108918 4/50 current_auc = 0.4820675105485232
User 108918 AUC after training: 0.4829113924050633
User 108918 improves AUC. Keeping the model.
Training on augumented user 119932 5/50 current_auc = 0.4829113924050633
User 119932 AUC after training: 0.48206751054852315
User 119932 does not improve AUC. Reverting changes.
Training on augumented user 20987 6/50 current_auc = 0.4829113924050633
User 20987 AUC after training: 0.47890295358649787
User 20987 does not improve AUC. Reverting changes.
Training on augumented user 97872 7/50 current_auc = 0.4829113924050633
User 97872 AUC after training: 0.4803797468354431
User 97872 does not improve AUC. Reverting changes.
Training on augumented user 119955 8/50 current_auc = 0.4829113924050633
User 119955 AUC after training: 0.47911392405063286
User 119955 does not improve AUC. Reverting changes.
Training on augumented user 65999 9/50 current_auc = 0.4829113924050633
User 65999 AUC after training: 0.4835443037974684
User 65999 improves AUC. Keeping the model.
Training on augumented user 122361 10/50 current_auc = 0.4835443037974684
User 122361 AUC after training: 0.4827004219409283
User 122361 does not improve AUC. Reverting changes.
Training on augumented user 49707 11/50 current_auc = 0.4835443037974684
User 49707 AUC after training: 0.48396624472573846
User 49707 improves AUC. Keeping the model.
Training on augumented user 33931 12/50 current_auc = 0.48396624472573846
User 33931 AUC after training: 0.4827004219409282
User 33931 does not improve AUC. Reverting changes.
Training on augumented user 32244 13/50 current_auc = 0.48396624472573846
User 32244 AUC after training: 0.4831223628691983
User 32244 does not improve AUC. Reverting changes.
Training on augumented user 95332 14/50 current_auc = 0.48396624472573846
User 95332 AUC after training: 0.4835443037974684
User 95332 does not improve AUC. Reverting changes.
Training on augumented user 16182 15/50 current_auc = 0.48396624472573846
User 16182 AUC after training: 0.48185654008438816
User 16182 does not improve AUC. Reverting changes.
Training on augumented user 55714 16/50 current_auc = 0.48396624472573846
User 55714 AUC after training: 0.48185654008438816
User 55714 does not improve AUC. Reverting changes.
Training on augumented user 125603 17/50 current_auc = 0.48396624472573846
User 125603 AUC after training: 0.48438818565400843
User 125603 improves AUC. Keeping the model.
Training on augumented user 998 18/50 current_auc = 0.48438818565400843
User 998 AUC after training: 0.4841772151898734
User 998 does not improve AUC. Reverting changes.
Training on augumented user 30003 19/50 current_auc = 0.48438818565400843
User 30003 AUC after training: 0.4852320675105485
User 30003 improves AUC. Keeping the model.
Training on augumented user 27812 20/50 current_auc = 0.4852320675105485
User 27812 AUC after training: 0.48565400843881856
User 27812 improves AUC. Keeping the model.
Training on augumented user 104594 21/50 current_auc = 0.48565400843881856
User 104594 AUC after training: 0.48565400843881856
User 104594 does not improve AUC. Reverting changes.
Training on augumented user 33829 22/50 current_auc = 0.48565400843881856
User 33829 AUC after training: 0.4848101265822784
User 33829 does not improve AUC. Reverting changes.
Training on augumented user 118973 23/50 current_auc = 0.48565400843881856
User 118973 AUC after training: 0.48565400843881856
User 118973 does not improve AUC. Reverting changes.
Training on augumented user 67254 24/50 current_auc = 0.48565400843881856
User 67254 AUC after training: 0.48396624472573835
User 67254 does not improve AUC. Reverting changes.
Training on augumented user 1428 25/50 current_auc = 0.48565400843881856
User 1428 AUC after training: 0.48565400843881856
User 1428 does not improve AUC. Reverting changes.
Training on augumented user 33853 26/50 current_auc = 0.48565400843881856
User 33853 AUC after training: 0.48565400843881856
User 33853 does not improve AUC. Reverting changes.
Training on augumented user 20908 27/50 current_auc = 0.48565400843881856
User 20908 AUC after training: 0.48438818565400843
User 20908 does not improve AUC. Reverting changes.
Training on augumented user 98482 28/50 current_auc = 0.48565400843881856
User 98482 AUC after training: 0.48438818565400843
User 98482 does not improve AUC. Reverting changes.
Training on augumented user 91442 29/50 current_auc = 0.48565400843881856
User 91442 AUC after training: 0.48607594936708853
User 91442 improves AUC. Keeping the model.
Training on augumented user 559 30/50 current_auc = 0.48607594936708853
User 559 AUC after training: 0.48396624472573835
User 559 does not improve AUC. Reverting changes.
Training on augumented user 35109 31/50 current_auc = 0.48607594936708853
User 35109 AUC after training: 0.48185654008438816
User 35109 does not improve AUC. Reverting changes.
Training on augumented user 76011 32/50 current_auc = 0.48607594936708853
User 76011 AUC after training: 0.48565400843881856
User 76011 does not improve AUC. Reverting changes.
Training on augumented user 102908 33/50 current_auc = 0.48607594936708853
User 102908 AUC after training: 0.4860759493670886
User 102908 improves AUC. Keeping the model.
Training on augumented user 19823 34/50 current_auc = 0.4860759493670886
User 19823 AUC after training: 0.48270042194092827
User 19823 does not improve AUC. Reverting changes.
Training on augumented user 111977 35/50 current_auc = 0.4860759493670886
User 111977 AUC after training: 0.4852320675105485
User 111977 does not improve AUC. Reverting changes.
Training on augumented user 7756 36/50 current_auc = 0.4860759493670886
User 7756 AUC after training: 0.4852320675105485
User 7756 does not improve AUC. Reverting changes.
Training on augumented user 77943 37/50 current_auc = 0.4860759493670886
User 77943 AUC after training: 0.4835443037974684
User 77943 does not improve AUC. Reverting changes.
Training on augumented user 110840 38/50 current_auc = 0.4860759493670886
User 110840 AUC after training: 0.48354430379746827
User 110840 does not improve AUC. Reverting changes.
Training on augumented user 18541 39/50 current_auc = 0.4860759493670886
User 18541 AUC after training: 0.48565400843881845
User 18541 does not improve AUC. Reverting changes.
Training on augumented user 95351 40/50 current_auc = 0.4860759493670886
User 95351 AUC after training: 0.4848101265822785
User 95351 does not improve AUC. Reverting changes.
Training on augumented user 50665 41/50 current_auc = 0.4860759493670886
User 50665 AUC after training: 0.4864978902953586
User 50665 improves AUC. Keeping the model.
Training on augumented user 52261 42/50 current_auc = 0.4864978902953586
User 52261 AUC after training: 0.48438818565400843
User 52261 does not improve AUC. Reverting changes.
Training on augumented user 89948 43/50 current_auc = 0.4864978902953586
User 89948 AUC after training: 0.48607594936708864
User 89948 does not improve AUC. Reverting changes.
Training on augumented user 73061 44/50 current_auc = 0.4864978902953586
User 73061 AUC after training: 0.4835443037974684
User 73061 does not improve AUC. Reverting changes.
Training on augumented user 117910 45/50 current_auc = 0.4864978902953586
User 117910 AUC after training: 0.4852320675105485
User 117910 does not improve AUC. Reverting changes.
Training on augumented user 83809 46/50 current_auc = 0.4864978902953586
User 83809 AUC after training: 0.4864978902953586
User 83809 does not improve AUC. Reverting changes.
Training on augumented user 117098 47/50 current_auc = 0.4864978902953586
User 117098 AUC after training: 0.4810126582278481
User 117098 does not improve AUC. Reverting changes.
Training on augumented user 50507 48/50 current_auc = 0.4864978902953586
User 50507 AUC after training: 0.4860759493670886
User 50507 does not improve AUC. Reverting changes.
Training on augumented user 102758 49/50 current_auc = 0.4864978902953586
User 102758 AUC after training: 0.48776371308016875
User 102758 improves AUC. Keeping the model.
[2024-12-02 19:31:12.260212] start test user 129102 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:12.812460] start test user 129102 208/567 recall augumented users by random, augumented_users = [95088, 44222, 132715, 24080, 4439, 69902, 64855, 76973, 102110, 54124, 112732, 109112, 110774, 71190, 58319, 102279, 34806, 129310, 112597, 56839, 109861, 79405, 128392, 29882, 94865, 35320, 138412, 90217, 29392, 16903, 90240, 84970, 86835, 119402, 58065, 64850, 8644, 30598, 74753, 87460, 14367, 84128, 25859, 32834, 21188, 89613, 128792, 42220, 38954, 129044]
[2024-12-02 19:31:12.865945] user = 129102 Cloud 208/567
[2024-12-02 19:31:12.900881] user = 129102 Local 208/567
[2024-12-02 19:31:12.977059] user = 129102 Local+ 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:15.696870] user = 129102 MPDA- 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 95088 0/50 current_auc = 1.0
User 95088 AUC after training: 1.0
User 95088 does not improve AUC. Reverting changes.
Training on augumented user 44222 1/50 current_auc = 1.0
User 44222 AUC after training: 1.0
User 44222 does not improve AUC. Reverting changes.
Training on augumented user 132715 2/50 current_auc = 1.0
User 132715 AUC after training: 1.0
User 132715 does not improve AUC. Reverting changes.
Training on augumented user 24080 3/50 current_auc = 1.0
User 24080 AUC after training: 1.0
User 24080 does not improve AUC. Reverting changes.
Training on augumented user 4439 4/50 current_auc = 1.0
User 4439 AUC after training: 1.0
User 4439 does not improve AUC. Reverting changes.
Training on augumented user 69902 5/50 current_auc = 1.0
User 69902 AUC after training: 1.0
User 69902 does not improve AUC. Reverting changes.
Training on augumented user 64855 6/50 current_auc = 1.0
User 64855 AUC after training: 1.0
User 64855 does not improve AUC. Reverting changes.
Training on augumented user 76973 7/50 current_auc = 1.0
User 76973 AUC after training: 1.0
User 76973 does not improve AUC. Reverting changes.
Training on augumented user 102110 8/50 current_auc = 1.0
User 102110 AUC after training: 1.0
User 102110 does not improve AUC. Reverting changes.
Training on augumented user 54124 9/50 current_auc = 1.0
User 54124 AUC after training: 1.0
User 54124 does not improve AUC. Reverting changes.
Training on augumented user 112732 10/50 current_auc = 1.0
User 112732 AUC after training: 1.0
User 112732 does not improve AUC. Reverting changes.
Training on augumented user 109112 11/50 current_auc = 1.0
User 109112 AUC after training: 1.0
User 109112 does not improve AUC. Reverting changes.
Training on augumented user 110774 12/50 current_auc = 1.0
User 110774 AUC after training: 1.0
User 110774 does not improve AUC. Reverting changes.
Training on augumented user 71190 13/50 current_auc = 1.0
User 71190 AUC after training: 1.0
User 71190 does not improve AUC. Reverting changes.
Training on augumented user 58319 14/50 current_auc = 1.0
User 58319 AUC after training: 1.0
User 58319 does not improve AUC. Reverting changes.
Training on augumented user 102279 15/50 current_auc = 1.0
User 102279 AUC after training: 1.0
User 102279 does not improve AUC. Reverting changes.
Training on augumented user 34806 16/50 current_auc = 1.0
User 34806 AUC after training: 1.0
User 34806 does not improve AUC. Reverting changes.
Training on augumented user 129310 17/50 current_auc = 1.0
User 129310 AUC after training: 1.0
User 129310 does not improve AUC. Reverting changes.
Training on augumented user 112597 18/50 current_auc = 1.0
User 112597 AUC after training: 1.0
User 112597 does not improve AUC. Reverting changes.
Training on augumented user 56839 19/50 current_auc = 1.0
User 56839 AUC after training: 1.0
User 56839 does not improve AUC. Reverting changes.
Training on augumented user 109861 20/50 current_auc = 1.0
User 109861 AUC after training: 1.0
User 109861 does not improve AUC. Reverting changes.
Training on augumented user 79405 21/50 current_auc = 1.0
User 79405 AUC after training: 1.0
User 79405 does not improve AUC. Reverting changes.
Training on augumented user 128392 22/50 current_auc = 1.0
User 128392 AUC after training: 1.0
User 128392 does not improve AUC. Reverting changes.
Training on augumented user 29882 23/50 current_auc = 1.0
User 29882 AUC after training: 1.0
User 29882 does not improve AUC. Reverting changes.
Training on augumented user 94865 24/50 current_auc = 1.0
User 94865 AUC after training: 1.0
User 94865 does not improve AUC. Reverting changes.
Training on augumented user 35320 25/50 current_auc = 1.0
User 35320 AUC after training: 1.0
User 35320 does not improve AUC. Reverting changes.
Training on augumented user 138412 26/50 current_auc = 1.0
User 138412 AUC after training: 1.0
User 138412 does not improve AUC. Reverting changes.
Training on augumented user 90217 27/50 current_auc = 1.0
User 90217 AUC after training: 1.0
User 90217 does not improve AUC. Reverting changes.
Training on augumented user 29392 28/50 current_auc = 1.0
User 29392 AUC after training: 1.0
User 29392 does not improve AUC. Reverting changes.
Training on augumented user 16903 29/50 current_auc = 1.0
User 16903 AUC after training: 1.0
User 16903 does not improve AUC. Reverting changes.
Training on augumented user 90240 30/50 current_auc = 1.0
User 90240 AUC after training: 1.0
User 90240 does not improve AUC. Reverting changes.
Training on augumented user 84970 31/50 current_auc = 1.0
User 84970 AUC after training: 1.0
User 84970 does not improve AUC. Reverting changes.
Training on augumented user 86835 32/50 current_auc = 1.0
User 86835 AUC after training: 1.0
User 86835 does not improve AUC. Reverting changes.
Training on augumented user 119402 33/50 current_auc = 1.0
User 119402 AUC after training: 1.0
User 119402 does not improve AUC. Reverting changes.
Training on augumented user 58065 34/50 current_auc = 1.0
User 58065 AUC after training: 1.0
User 58065 does not improve AUC. Reverting changes.
Training on augumented user 64850 35/50 current_auc = 1.0
User 64850 AUC after training: 1.0
User 64850 does not improve AUC. Reverting changes.
Training on augumented user 8644 36/50 current_auc = 1.0
User 8644 AUC after training: 1.0
User 8644 does not improve AUC. Reverting changes.
Training on augumented user 30598 37/50 current_auc = 1.0
User 30598 AUC after training: 1.0
User 30598 does not improve AUC. Reverting changes.
Training on augumented user 74753 38/50 current_auc = 1.0
User 74753 AUC after training: 1.0
User 74753 does not improve AUC. Reverting changes.
Training on augumented user 87460 39/50 current_auc = 1.0
User 87460 AUC after training: 1.0
User 87460 does not improve AUC. Reverting changes.
Training on augumented user 14367 40/50 current_auc = 1.0
User 14367 AUC after training: 1.0
User 14367 does not improve AUC. Reverting changes.
Training on augumented user 84128 41/50 current_auc = 1.0
User 84128 AUC after training: 1.0
User 84128 does not improve AUC. Reverting changes.
Training on augumented user 25859 42/50 current_auc = 1.0
User 25859 AUC after training: 1.0
User 25859 does not improve AUC. Reverting changes.
Training on augumented user 32834 43/50 current_auc = 1.0
User 32834 AUC after training: 1.0
User 32834 does not improve AUC. Reverting changes.
Training on augumented user 21188 44/50 current_auc = 1.0
User 21188 AUC after training: 1.0
User 21188 does not improve AUC. Reverting changes.
Training on augumented user 89613 45/50 current_auc = 1.0
User 89613 AUC after training: 1.0
User 89613 does not improve AUC. Reverting changes.
Training on augumented user 128792 46/50 current_auc = 1.0
User 128792 AUC after training: 1.0
User 128792 does not improve AUC. Reverting changes.
Training on augumented user 42220 47/50 current_auc = 1.0
User 42220 AUC after training: 1.0
User 42220 does not improve AUC. Reverting changes.
Training on augumented user 38954 48/50 current_auc = 1.0
User 38954 AUC after training: 1.0
User 38954 does not improve AUC. Reverting changes.
Training on augumented user 129044 49/50 current_auc = 1.0
User 129044 AUC after training: 1.0
User 129044 does not improve AUC. Reverting changes.
[2024-12-02 19:31:43.333225] start test user 129131 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:44.024857] start test user 129131 209/567 recall augumented users by random, augumented_users = [76253, 115186, 42845, 69874, 15389, 39524, 129412, 41838, 31743, 10073, 33741, 40806, 3236, 39175, 79677, 54593, 68956, 105308, 43347, 100554, 110922, 98239, 46411, 93484, 83455, 37499, 9310, 71898, 45051, 39840, 136385, 135650, 17624, 45365, 114969, 35204, 79535, 41547, 37555, 11676, 2573, 98476, 127935, 21131, 129953, 7964, 119844, 128422, 14153, 30722]
[2024-12-02 19:31:44.056960] user = 129131 Cloud 209/567
[2024-12-02 19:31:44.075837] user = 129131 Local 209/567
[2024-12-02 19:31:44.106312] user = 129131 Local+ 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:46.884086] user = 129131 MPDA- 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5425925925925925
Training on augumented user 76253 0/50 current_auc = 0.5425925925925925
User 76253 AUC after training: 0.5453703703703704
User 76253 improves AUC. Keeping the model.
Training on augumented user 115186 1/50 current_auc = 0.5453703703703704
User 115186 AUC after training: 0.5435185185185185
User 115186 does not improve AUC. Reverting changes.
Training on augumented user 42845 2/50 current_auc = 0.5453703703703704
User 42845 AUC after training: 0.5472222222222223
User 42845 improves AUC. Keeping the model.
Training on augumented user 69874 3/50 current_auc = 0.5472222222222223
User 69874 AUC after training: 0.5453703703703704
User 69874 does not improve AUC. Reverting changes.
Training on augumented user 15389 4/50 current_auc = 0.5472222222222223
User 15389 AUC after training: 0.5472222222222223
User 15389 does not improve AUC. Reverting changes.
Training on augumented user 39524 5/50 current_auc = 0.5472222222222223
User 39524 AUC after training: 0.5416666666666666
User 39524 does not improve AUC. Reverting changes.
Training on augumented user 129412 6/50 current_auc = 0.5472222222222223
User 129412 AUC after training: 0.5425925925925926
User 129412 does not improve AUC. Reverting changes.
Training on augumented user 41838 7/50 current_auc = 0.5472222222222223
User 41838 AUC after training: 0.5472222222222223
User 41838 does not improve AUC. Reverting changes.
Training on augumented user 31743 8/50 current_auc = 0.5472222222222223
User 31743 AUC after training: 0.5416666666666666
User 31743 does not improve AUC. Reverting changes.
Training on augumented user 10073 9/50 current_auc = 0.5472222222222223
User 10073 AUC after training: 0.5425925925925926
User 10073 does not improve AUC. Reverting changes.
Training on augumented user 33741 10/50 current_auc = 0.5472222222222223
User 33741 AUC after training: 0.5425925925925926
User 33741 does not improve AUC. Reverting changes.
Training on augumented user 40806 11/50 current_auc = 0.5472222222222223
User 40806 AUC after training: 0.5444444444444444
User 40806 does not improve AUC. Reverting changes.
Training on augumented user 3236 12/50 current_auc = 0.5472222222222223
User 3236 AUC after training: 0.5314814814814814
User 3236 does not improve AUC. Reverting changes.
Training on augumented user 39175 13/50 current_auc = 0.5472222222222223
User 39175 AUC after training: 0.5462962962962963
User 39175 does not improve AUC. Reverting changes.
Training on augumented user 79677 14/50 current_auc = 0.5472222222222223
User 79677 AUC after training: 0.5416666666666666
User 79677 does not improve AUC. Reverting changes.
Training on augumented user 54593 15/50 current_auc = 0.5472222222222223
User 54593 AUC after training: 0.5472222222222223
User 54593 does not improve AUC. Reverting changes.
Training on augumented user 68956 16/50 current_auc = 0.5472222222222223
User 68956 AUC after training: 0.5453703703703704
User 68956 does not improve AUC. Reverting changes.
Training on augumented user 105308 17/50 current_auc = 0.5472222222222223
User 105308 AUC after training: 0.5351851851851852
User 105308 does not improve AUC. Reverting changes.
Training on augumented user 43347 18/50 current_auc = 0.5472222222222223
User 43347 AUC after training: 0.5453703703703704
User 43347 does not improve AUC. Reverting changes.
Training on augumented user 100554 19/50 current_auc = 0.5472222222222223
User 100554 AUC after training: 0.5462962962962963
User 100554 does not improve AUC. Reverting changes.
Training on augumented user 110922 20/50 current_auc = 0.5472222222222223
User 110922 AUC after training: 0.5472222222222223
User 110922 does not improve AUC. Reverting changes.
Training on augumented user 98239 21/50 current_auc = 0.5472222222222223
User 98239 AUC after training: 0.5425925925925926
User 98239 does not improve AUC. Reverting changes.
Training on augumented user 46411 22/50 current_auc = 0.5472222222222223
User 46411 AUC after training: 0.5416666666666666
User 46411 does not improve AUC. Reverting changes.
Training on augumented user 93484 23/50 current_auc = 0.5472222222222223
User 93484 AUC after training: 0.537037037037037
User 93484 does not improve AUC. Reverting changes.
Training on augumented user 83455 24/50 current_auc = 0.5472222222222223
User 83455 AUC after training: 0.5416666666666666
User 83455 does not improve AUC. Reverting changes.
Training on augumented user 37499 25/50 current_auc = 0.5472222222222223
User 37499 AUC after training: 0.5481481481481482
User 37499 improves AUC. Keeping the model.
Training on augumented user 9310 26/50 current_auc = 0.5481481481481482
User 9310 AUC after training: 0.5518518518518518
User 9310 improves AUC. Keeping the model.
Training on augumented user 71898 27/50 current_auc = 0.5518518518518518
User 71898 AUC after training: 0.5481481481481482
User 71898 does not improve AUC. Reverting changes.
Training on augumented user 45051 28/50 current_auc = 0.5518518518518518
User 45051 AUC after training: 0.5518518518518518
User 45051 does not improve AUC. Reverting changes.
Training on augumented user 39840 29/50 current_auc = 0.5518518518518518
User 39840 AUC after training: 0.5462962962962963
User 39840 does not improve AUC. Reverting changes.
Training on augumented user 136385 30/50 current_auc = 0.5518518518518518
User 136385 AUC after training: 0.5481481481481482
User 136385 does not improve AUC. Reverting changes.
Training on augumented user 135650 31/50 current_auc = 0.5518518518518518
User 135650 AUC after training: 0.5435185185185185
User 135650 does not improve AUC. Reverting changes.
Training on augumented user 17624 32/50 current_auc = 0.5518518518518518
User 17624 AUC after training: 0.5499999999999999
User 17624 does not improve AUC. Reverting changes.
Training on augumented user 45365 33/50 current_auc = 0.5518518518518518
User 45365 AUC after training: 0.5481481481481482
User 45365 does not improve AUC. Reverting changes.
Training on augumented user 114969 34/50 current_auc = 0.5518518518518518
User 114969 AUC after training: 0.5499999999999999
User 114969 does not improve AUC. Reverting changes.
Training on augumented user 35204 35/50 current_auc = 0.5518518518518518
User 35204 AUC after training: 0.5435185185185185
User 35204 does not improve AUC. Reverting changes.
Training on augumented user 79535 36/50 current_auc = 0.5518518518518518
User 79535 AUC after training: 0.549074074074074
User 79535 does not improve AUC. Reverting changes.
Training on augumented user 41547 37/50 current_auc = 0.5518518518518518
User 41547 AUC after training: 0.5435185185185185
User 41547 does not improve AUC. Reverting changes.
Training on augumented user 37555 38/50 current_auc = 0.5518518518518518
User 37555 AUC after training: 0.5453703703703704
User 37555 does not improve AUC. Reverting changes.
Training on augumented user 11676 39/50 current_auc = 0.5518518518518518
User 11676 AUC after training: 0.5472222222222223
User 11676 does not improve AUC. Reverting changes.
Training on augumented user 2573 40/50 current_auc = 0.5518518518518518
User 2573 AUC after training: 0.5416666666666666
User 2573 does not improve AUC. Reverting changes.
Training on augumented user 98476 41/50 current_auc = 0.5518518518518518
User 98476 AUC after training: 0.5462962962962963
User 98476 does not improve AUC. Reverting changes.
Training on augumented user 127935 42/50 current_auc = 0.5518518518518518
User 127935 AUC after training: 0.55
User 127935 does not improve AUC. Reverting changes.
Training on augumented user 21131 43/50 current_auc = 0.5518518518518518
User 21131 AUC after training: 0.549074074074074
User 21131 does not improve AUC. Reverting changes.
Training on augumented user 129953 44/50 current_auc = 0.5518518518518518
User 129953 AUC after training: 0.5518518518518518
User 129953 does not improve AUC. Reverting changes.
Training on augumented user 7964 45/50 current_auc = 0.5518518518518518
User 7964 AUC after training: 0.55
User 7964 does not improve AUC. Reverting changes.
Training on augumented user 119844 46/50 current_auc = 0.5518518518518518
User 119844 AUC after training: 0.5453703703703704
User 119844 does not improve AUC. Reverting changes.
Training on augumented user 128422 47/50 current_auc = 0.5518518518518518
User 128422 AUC after training: 0.5453703703703704
User 128422 does not improve AUC. Reverting changes.
Training on augumented user 14153 48/50 current_auc = 0.5518518518518518
User 14153 AUC after training: 0.549074074074074
User 14153 does not improve AUC. Reverting changes.
Training on augumented user 30722 49/50 current_auc = 0.5518518518518518
User 30722 AUC after training: 0.5388888888888889
User 30722 does not improve AUC. Reverting changes.
[2024-12-02 19:32:12.996385] start test user 129183 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:13.719170] start test user 129183 210/567 recall augumented users by random, augumented_users = [75406, 77875, 135371, 55445, 96175, 68607, 45611, 126054, 89058, 43050, 129886, 25527, 3633, 113612, 99203, 109764, 12623, 104900, 123819, 110227, 35854, 52068, 112057, 39662, 129819, 4459, 120457, 53124, 87058, 124108, 51993, 88547, 111448, 120012, 137677, 11779, 64251, 31026, 110635, 71558, 127627, 70071, 121721, 68524, 52365, 50864, 119311, 87284, 37270, 38892]
[2024-12-02 19:32:13.734705] user = 129183 Cloud 210/567
[2024-12-02 19:32:13.747868] user = 129183 Local 210/567
[2024-12-02 19:32:13.839225] user = 129183 Local+ 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:17.089538] user = 129183 MPDA- 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6015151515151516
Training on augumented user 75406 0/50 current_auc = 0.6015151515151516
User 75406 AUC after training: 0.6015151515151516
User 75406 does not improve AUC. Reverting changes.
Training on augumented user 77875 1/50 current_auc = 0.6015151515151516
User 77875 AUC after training: 0.6015151515151516
User 77875 does not improve AUC. Reverting changes.
Training on augumented user 135371 2/50 current_auc = 0.6015151515151516
User 135371 AUC after training: 0.6022727272727273
User 135371 improves AUC. Keeping the model.
Training on augumented user 55445 3/50 current_auc = 0.6022727272727273
User 55445 AUC after training: 0.6022727272727273
User 55445 does not improve AUC. Reverting changes.
Training on augumented user 96175 4/50 current_auc = 0.6022727272727273
User 96175 AUC after training: 0.6015151515151516
User 96175 does not improve AUC. Reverting changes.
Training on augumented user 68607 5/50 current_auc = 0.6022727272727273
User 68607 AUC after training: 0.6037878787878788
User 68607 improves AUC. Keeping the model.
Training on augumented user 45611 6/50 current_auc = 0.6037878787878788
User 45611 AUC after training: 0.6022727272727273
User 45611 does not improve AUC. Reverting changes.
Training on augumented user 126054 7/50 current_auc = 0.6037878787878788
User 126054 AUC after training: 0.6007575757575758
User 126054 does not improve AUC. Reverting changes.
Training on augumented user 89058 8/50 current_auc = 0.6037878787878788
User 89058 AUC after training: 0.6022727272727273
User 89058 does not improve AUC. Reverting changes.
Training on augumented user 43050 9/50 current_auc = 0.6037878787878788
User 43050 AUC after training: 0.6015151515151516
User 43050 does not improve AUC. Reverting changes.
Training on augumented user 129886 10/50 current_auc = 0.6037878787878788
User 129886 AUC after training: 0.6022727272727273
User 129886 does not improve AUC. Reverting changes.
Training on augumented user 25527 11/50 current_auc = 0.6037878787878788
User 25527 AUC after training: 0.6037878787878788
User 25527 does not improve AUC. Reverting changes.
Training on augumented user 3633 12/50 current_auc = 0.6037878787878788
User 3633 AUC after training: 0.6015151515151516
User 3633 does not improve AUC. Reverting changes.
Training on augumented user 113612 13/50 current_auc = 0.6037878787878788
User 113612 AUC after training: 0.603030303030303
User 113612 does not improve AUC. Reverting changes.
Training on augumented user 99203 14/50 current_auc = 0.6037878787878788
User 99203 AUC after training: 0.6007575757575757
User 99203 does not improve AUC. Reverting changes.
Training on augumented user 109764 15/50 current_auc = 0.6037878787878788
User 109764 AUC after training: 0.6022727272727273
User 109764 does not improve AUC. Reverting changes.
Training on augumented user 12623 16/50 current_auc = 0.6037878787878788
User 12623 AUC after training: 0.5962121212121212
User 12623 does not improve AUC. Reverting changes.
Training on augumented user 104900 17/50 current_auc = 0.6037878787878788
User 104900 AUC after training: 0.6037878787878788
User 104900 does not improve AUC. Reverting changes.
Training on augumented user 123819 18/50 current_auc = 0.6037878787878788
User 123819 AUC after training: 0.5992424242424242
User 123819 does not improve AUC. Reverting changes.
Training on augumented user 110227 19/50 current_auc = 0.6037878787878788
User 110227 AUC after training: 0.5992424242424242
User 110227 does not improve AUC. Reverting changes.
Training on augumented user 35854 20/50 current_auc = 0.6037878787878788
User 35854 AUC after training: 0.6
User 35854 does not improve AUC. Reverting changes.
Training on augumented user 52068 21/50 current_auc = 0.6037878787878788
User 52068 AUC after training: 0.603030303030303
User 52068 does not improve AUC. Reverting changes.
Training on augumented user 112057 22/50 current_auc = 0.6037878787878788
User 112057 AUC after training: 0.6022727272727273
User 112057 does not improve AUC. Reverting changes.
Training on augumented user 39662 23/50 current_auc = 0.6037878787878788
User 39662 AUC after training: 0.5984848484848485
User 39662 does not improve AUC. Reverting changes.
Training on augumented user 129819 24/50 current_auc = 0.6037878787878788
User 129819 AUC after training: 0.6007575757575757
User 129819 does not improve AUC. Reverting changes.
Training on augumented user 4459 25/50 current_auc = 0.6037878787878788
User 4459 AUC after training: 0.6022727272727273
User 4459 does not improve AUC. Reverting changes.
Training on augumented user 120457 26/50 current_auc = 0.6037878787878788
User 120457 AUC after training: 0.6007575757575758
User 120457 does not improve AUC. Reverting changes.
Training on augumented user 53124 27/50 current_auc = 0.6037878787878788
User 53124 AUC after training: 0.6053030303030302
User 53124 improves AUC. Keeping the model.
Training on augumented user 87058 28/50 current_auc = 0.6053030303030302
User 87058 AUC after training: 0.6037878787878788
User 87058 does not improve AUC. Reverting changes.
Training on augumented user 124108 29/50 current_auc = 0.6053030303030302
User 124108 AUC after training: 0.6037878787878788
User 124108 does not improve AUC. Reverting changes.
Training on augumented user 51993 30/50 current_auc = 0.6053030303030302
User 51993 AUC after training: 0.6037878787878789
User 51993 does not improve AUC. Reverting changes.
Training on augumented user 88547 31/50 current_auc = 0.6053030303030302
User 88547 AUC after training: 0.6045454545454546
User 88547 does not improve AUC. Reverting changes.
Training on augumented user 111448 32/50 current_auc = 0.6053030303030302
User 111448 AUC after training: 0.6037878787878788
User 111448 does not improve AUC. Reverting changes.
Training on augumented user 120012 33/50 current_auc = 0.6053030303030302
User 120012 AUC after training: 0.6037878787878788
User 120012 does not improve AUC. Reverting changes.
Training on augumented user 137677 34/50 current_auc = 0.6053030303030302
User 137677 AUC after training: 0.6022727272727273
User 137677 does not improve AUC. Reverting changes.
Training on augumented user 11779 35/50 current_auc = 0.6053030303030302
User 11779 AUC after training: 0.6053030303030303
User 11779 improves AUC. Keeping the model.
Training on augumented user 64251 36/50 current_auc = 0.6053030303030303
User 64251 AUC after training: 0.6045454545454546
User 64251 does not improve AUC. Reverting changes.
Training on augumented user 31026 37/50 current_auc = 0.6053030303030303
User 31026 AUC after training: 0.6037878787878788
User 31026 does not improve AUC. Reverting changes.
Training on augumented user 110635 38/50 current_auc = 0.6053030303030303
User 110635 AUC after training: 0.6053030303030302
User 110635 does not improve AUC. Reverting changes.
Training on augumented user 71558 39/50 current_auc = 0.6053030303030303
User 71558 AUC after training: 0.6022727272727273
User 71558 does not improve AUC. Reverting changes.
Training on augumented user 127627 40/50 current_auc = 0.6053030303030303
User 127627 AUC after training: 0.6060606060606061
User 127627 improves AUC. Keeping the model.
Training on augumented user 70071 41/50 current_auc = 0.6060606060606061
User 70071 AUC after training: 0.6045454545454545
User 70071 does not improve AUC. Reverting changes.
Training on augumented user 121721 42/50 current_auc = 0.6060606060606061
User 121721 AUC after training: 0.6045454545454545
User 121721 does not improve AUC. Reverting changes.
Training on augumented user 68524 43/50 current_auc = 0.6060606060606061
User 68524 AUC after training: 0.6060606060606061
User 68524 does not improve AUC. Reverting changes.
Training on augumented user 52365 44/50 current_auc = 0.6060606060606061
User 52365 AUC after training: 0.6037878787878788
User 52365 does not improve AUC. Reverting changes.
Training on augumented user 50864 45/50 current_auc = 0.6060606060606061
User 50864 AUC after training: 0.6037878787878788
User 50864 does not improve AUC. Reverting changes.
Training on augumented user 119311 46/50 current_auc = 0.6060606060606061
User 119311 AUC after training: 0.603030303030303
User 119311 does not improve AUC. Reverting changes.
Training on augumented user 87284 47/50 current_auc = 0.6060606060606061
User 87284 AUC after training: 0.603030303030303
User 87284 does not improve AUC. Reverting changes.
Training on augumented user 37270 48/50 current_auc = 0.6060606060606061
User 37270 AUC after training: 0.603030303030303
User 37270 does not improve AUC. Reverting changes.
Training on augumented user 38892 49/50 current_auc = 0.6060606060606061
User 38892 AUC after training: 0.6053030303030303
User 38892 does not improve AUC. Reverting changes.
[2024-12-02 19:32:49.035367] start test user 129226 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:49.845294] start test user 129226 211/567 recall augumented users by random, augumented_users = [75382, 20613, 110521, 96604, 50628, 131503, 136960, 68915, 87151, 113737, 83942, 49771, 120652, 125874, 137121, 93107, 121676, 44518, 103256, 81647, 79792, 128509, 91797, 138162, 43213, 40837, 73199, 55043, 96997, 62376, 49492, 76842, 82628, 28949, 52452, 85577, 125076, 13739, 71154, 124661, 37675, 111343, 42332, 34266, 9064, 93148, 61376, 66087, 72789, 129539]
[2024-12-02 19:32:49.861850] user = 129226 Cloud 211/567
[2024-12-02 19:32:49.959157] user = 129226 Local 211/567
[2024-12-02 19:32:50.101490] user = 129226 Local+ 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:51.685965] user = 129226 MPDA- 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8313557213930348
Training on augumented user 75382 0/50 current_auc = 0.8313557213930348
User 75382 AUC after training: 0.8301243781094527
User 75382 does not improve AUC. Reverting changes.
Training on augumented user 20613 1/50 current_auc = 0.8313557213930348
User 20613 AUC after training: 0.8305223880597015
User 20613 does not improve AUC. Reverting changes.
Training on augumented user 110521 2/50 current_auc = 0.8313557213930348
User 110521 AUC after training: 0.8317537313432836
User 110521 improves AUC. Keeping the model.
Training on augumented user 96604 3/50 current_auc = 0.8317537313432836
User 96604 AUC after training: 0.831455223880597
User 96604 does not improve AUC. Reverting changes.
Training on augumented user 50628 4/50 current_auc = 0.8317537313432836
User 50628 AUC after training: 0.8342164179104478
User 50628 improves AUC. Keeping the model.
Training on augumented user 131503 5/50 current_auc = 0.8342164179104478
User 131503 AUC after training: 0.8351990049751242
User 131503 improves AUC. Keeping the model.
Training on augumented user 136960 6/50 current_auc = 0.8351990049751242
User 136960 AUC after training: 0.8322885572139302
User 136960 does not improve AUC. Reverting changes.
Training on augumented user 68915 7/50 current_auc = 0.8351990049751242
User 68915 AUC after training: 0.8340796019900497
User 68915 does not improve AUC. Reverting changes.
Training on augumented user 87151 8/50 current_auc = 0.8351990049751242
User 87151 AUC after training: 0.834776119402985
User 87151 does not improve AUC. Reverting changes.
Training on augumented user 113737 9/50 current_auc = 0.8351990049751242
User 113737 AUC after training: 0.8340920398009951
User 113737 does not improve AUC. Reverting changes.
Training on augumented user 83942 10/50 current_auc = 0.8351990049751242
User 83942 AUC after training: 0.8362064676616916
User 83942 improves AUC. Keeping the model.
Training on augumented user 49771 11/50 current_auc = 0.8362064676616916
User 49771 AUC after training: 0.8337935323383086
User 49771 does not improve AUC. Reverting changes.
Training on augumented user 120652 12/50 current_auc = 0.8362064676616916
User 120652 AUC after training: 0.8377611940298507
User 120652 improves AUC. Keeping the model.
Training on augumented user 125874 13/50 current_auc = 0.8377611940298507
User 125874 AUC after training: 0.8389676616915424
User 125874 improves AUC. Keeping the model.
Training on augumented user 137121 14/50 current_auc = 0.8389676616915424
User 137121 AUC after training: 0.8359577114427861
User 137121 does not improve AUC. Reverting changes.
Training on augumented user 93107 15/50 current_auc = 0.8389676616915424
User 93107 AUC after training: 0.8385199004975123
User 93107 does not improve AUC. Reverting changes.
Training on augumented user 121676 16/50 current_auc = 0.8389676616915424
User 121676 AUC after training: 0.8373009950248756
User 121676 does not improve AUC. Reverting changes.
Training on augumented user 44518 17/50 current_auc = 0.8389676616915424
User 44518 AUC after training: 0.8400124378109453
User 44518 improves AUC. Keeping the model.
Training on augumented user 103256 18/50 current_auc = 0.8400124378109453
User 103256 AUC after training: 0.8407835820895523
User 103256 improves AUC. Keeping the model.
Training on augumented user 81647 19/50 current_auc = 0.8407835820895523
User 81647 AUC after training: 0.8402860696517412
User 81647 does not improve AUC. Reverting changes.
Training on augumented user 79792 20/50 current_auc = 0.8407835820895523
User 79792 AUC after training: 0.8423507462686568
User 79792 improves AUC. Keeping the model.
Training on augumented user 128509 21/50 current_auc = 0.8423507462686568
User 128509 AUC after training: 0.840360696517413
User 128509 does not improve AUC. Reverting changes.
Training on augumented user 91797 22/50 current_auc = 0.8423507462686568
User 91797 AUC after training: 0.8435199004975125
User 91797 improves AUC. Keeping the model.
Training on augumented user 138162 23/50 current_auc = 0.8435199004975125
User 138162 AUC after training: 0.8438557213930349
User 138162 improves AUC. Keeping the model.
Training on augumented user 43213 24/50 current_auc = 0.8438557213930349
User 43213 AUC after training: 0.8445771144278607
User 43213 improves AUC. Keeping the model.
Training on augumented user 40837 25/50 current_auc = 0.8445771144278607
User 40837 AUC after training: 0.8460323383084578
User 40837 improves AUC. Keeping the model.
Training on augumented user 73199 26/50 current_auc = 0.8460323383084578
User 73199 AUC after training: 0.8463308457711443
User 73199 improves AUC. Keeping the model.
Training on augumented user 55043 27/50 current_auc = 0.8463308457711443
User 55043 AUC after training: 0.8457089552238806
User 55043 does not improve AUC. Reverting changes.
Training on augumented user 96997 28/50 current_auc = 0.8463308457711443
User 96997 AUC after training: 0.8432462686567164
User 96997 does not improve AUC. Reverting changes.
Training on augumented user 62376 29/50 current_auc = 0.8463308457711443
User 62376 AUC after training: 0.8447885572139303
User 62376 does not improve AUC. Reverting changes.
Training on augumented user 49492 30/50 current_auc = 0.8463308457711443
User 49492 AUC after training: 0.8459577114427861
User 49492 does not improve AUC. Reverting changes.
Training on augumented user 76842 31/50 current_auc = 0.8463308457711443
User 76842 AUC after training: 0.8450497512437811
User 76842 does not improve AUC. Reverting changes.
Training on augumented user 82628 32/50 current_auc = 0.8463308457711443
User 82628 AUC after training: 0.8470398009950248
User 82628 improves AUC. Keeping the model.
Training on augumented user 28949 33/50 current_auc = 0.8470398009950248
User 28949 AUC after training: 0.8461691542288557
User 28949 does not improve AUC. Reverting changes.
Training on augumented user 52452 34/50 current_auc = 0.8470398009950248
User 52452 AUC after training: 0.8463059701492538
User 52452 does not improve AUC. Reverting changes.
Training on augumented user 85577 35/50 current_auc = 0.8470398009950248
User 85577 AUC after training: 0.8484701492537313
User 85577 improves AUC. Keeping the model.
Training on augumented user 125076 36/50 current_auc = 0.8484701492537313
User 125076 AUC after training: 0.8482338308457711
User 125076 does not improve AUC. Reverting changes.
Training on augumented user 13739 37/50 current_auc = 0.8484701492537313
User 13739 AUC after training: 0.8474004975124377
User 13739 does not improve AUC. Reverting changes.
Training on augumented user 71154 38/50 current_auc = 0.8484701492537313
User 71154 AUC after training: 0.8477363184079602
User 71154 does not improve AUC. Reverting changes.
Training on augumented user 124661 39/50 current_auc = 0.8484701492537313
User 124661 AUC after training: 0.8479228855721394
User 124661 does not improve AUC. Reverting changes.
Training on augumented user 37675 40/50 current_auc = 0.8484701492537313
User 37675 AUC after training: 0.8475995024875621
User 37675 does not improve AUC. Reverting changes.
Training on augumented user 111343 41/50 current_auc = 0.8484701492537313
User 111343 AUC after training: 0.8490298507462686
User 111343 improves AUC. Keeping the model.
Training on augumented user 42332 42/50 current_auc = 0.8490298507462686
User 42332 AUC after training: 0.8494900497512438
User 42332 improves AUC. Keeping the model.
Training on augumented user 34266 43/50 current_auc = 0.8494900497512438
User 34266 AUC after training: 0.8508333333333333
User 34266 improves AUC. Keeping the model.
Training on augumented user 9064 44/50 current_auc = 0.8508333333333333
User 9064 AUC after training: 0.8513681592039801
User 9064 improves AUC. Keeping the model.
Training on augumented user 93148 45/50 current_auc = 0.8513681592039801
User 93148 AUC after training: 0.8513432835820894
User 93148 does not improve AUC. Reverting changes.
Training on augumented user 61376 46/50 current_auc = 0.8513681592039801
User 61376 AUC after training: 0.851044776119403
User 61376 does not improve AUC. Reverting changes.
Training on augumented user 66087 47/50 current_auc = 0.8513681592039801
User 66087 AUC after training: 0.8519029850746268
User 66087 improves AUC. Keeping the model.
Training on augumented user 72789 48/50 current_auc = 0.8519029850746268
User 72789 AUC after training: 0.8513681592039802
User 72789 does not improve AUC. Reverting changes.
Training on augumented user 129539 49/50 current_auc = 0.8519029850746268
User 129539 AUC after training: 0.850634328358209
User 129539 does not improve AUC. Reverting changes.
[2024-12-02 19:33:27.857908] start test user 129307 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:28.730470] start test user 129307 212/567 recall augumented users by random, augumented_users = [111711, 29518, 107642, 127874, 113799, 40854, 55657, 96687, 94614, 120956, 132732, 118602, 15810, 64836, 93509, 95529, 18765, 73264, 113029, 90021, 62707, 798, 92124, 20377, 84712, 52161, 116519, 38494, 105874, 134343, 43977, 19870, 104236, 137490, 55650, 7003, 102722, 87188, 2272, 106751, 65443, 76982, 90709, 39818, 83225, 29888, 134781, 107201, 35647, 79490]
[2024-12-02 19:33:28.747454] user = 129307 Cloud 212/567
[2024-12-02 19:33:28.760166] user = 129307 Local 212/567
[2024-12-02 19:33:28.812618] user = 129307 Local+ 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:31.432005] user = 129307 MPDA- 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4969230769230769
Training on augumented user 111711 0/50 current_auc = 0.4969230769230769
User 111711 AUC after training: 0.4984615384615384
User 111711 improves AUC. Keeping the model.
Training on augumented user 29518 1/50 current_auc = 0.4984615384615384
User 29518 AUC after training: 0.4969230769230769
User 29518 does not improve AUC. Reverting changes.
Training on augumented user 107642 2/50 current_auc = 0.4984615384615384
User 107642 AUC after training: 0.4969230769230769
User 107642 does not improve AUC. Reverting changes.
Training on augumented user 127874 3/50 current_auc = 0.4984615384615384
User 127874 AUC after training: 0.4969230769230769
User 127874 does not improve AUC. Reverting changes.
Training on augumented user 113799 4/50 current_auc = 0.4984615384615384
User 113799 AUC after training: 0.4984615384615384
User 113799 does not improve AUC. Reverting changes.
Training on augumented user 40854 5/50 current_auc = 0.4984615384615384
User 40854 AUC after training: 0.4984615384615384
User 40854 does not improve AUC. Reverting changes.
Training on augumented user 55657 6/50 current_auc = 0.4984615384615384
User 55657 AUC after training: 0.49846153846153846
User 55657 improves AUC. Keeping the model.
Training on augumented user 96687 7/50 current_auc = 0.49846153846153846
User 96687 AUC after training: 0.49846153846153846
User 96687 does not improve AUC. Reverting changes.
Training on augumented user 94614 8/50 current_auc = 0.49846153846153846
User 94614 AUC after training: 0.49846153846153846
User 94614 does not improve AUC. Reverting changes.
Training on augumented user 120956 9/50 current_auc = 0.49846153846153846
User 120956 AUC after training: 0.49846153846153846
User 120956 does not improve AUC. Reverting changes.
Training on augumented user 132732 10/50 current_auc = 0.49846153846153846
User 132732 AUC after training: 0.49846153846153846
User 132732 does not improve AUC. Reverting changes.
Training on augumented user 118602 11/50 current_auc = 0.49846153846153846
User 118602 AUC after training: 0.49846153846153846
User 118602 does not improve AUC. Reverting changes.
Training on augumented user 15810 12/50 current_auc = 0.49846153846153846
User 15810 AUC after training: 0.49846153846153846
User 15810 does not improve AUC. Reverting changes.
Training on augumented user 64836 13/50 current_auc = 0.49846153846153846
User 64836 AUC after training: 0.4984615384615385
User 64836 improves AUC. Keeping the model.
Training on augumented user 93509 14/50 current_auc = 0.4984615384615385
User 93509 AUC after training: 0.4984615384615385
User 93509 does not improve AUC. Reverting changes.
Training on augumented user 95529 15/50 current_auc = 0.4984615384615385
User 95529 AUC after training: 0.4953846153846154
User 95529 does not improve AUC. Reverting changes.
Training on augumented user 18765 16/50 current_auc = 0.4984615384615385
User 18765 AUC after training: 0.5
User 18765 improves AUC. Keeping the model.
Training on augumented user 73264 17/50 current_auc = 0.5
User 73264 AUC after training: 0.5015384615384615
User 73264 improves AUC. Keeping the model.
Training on augumented user 113029 18/50 current_auc = 0.5015384615384615
User 113029 AUC after training: 0.5015384615384615
User 113029 does not improve AUC. Reverting changes.
Training on augumented user 90021 19/50 current_auc = 0.5015384615384615
User 90021 AUC after training: 0.5015384615384615
User 90021 does not improve AUC. Reverting changes.
Training on augumented user 62707 20/50 current_auc = 0.5015384615384615
User 62707 AUC after training: 0.5015384615384615
User 62707 does not improve AUC. Reverting changes.
Training on augumented user 798 21/50 current_auc = 0.5015384615384615
User 798 AUC after training: 0.5015384615384615
User 798 does not improve AUC. Reverting changes.
Training on augumented user 92124 22/50 current_auc = 0.5015384615384615
User 92124 AUC after training: 0.5015384615384615
User 92124 does not improve AUC. Reverting changes.
Training on augumented user 20377 23/50 current_auc = 0.5015384615384615
User 20377 AUC after training: 0.5015384615384615
User 20377 does not improve AUC. Reverting changes.
Training on augumented user 84712 24/50 current_auc = 0.5015384615384615
User 84712 AUC after training: 0.5015384615384615
User 84712 does not improve AUC. Reverting changes.
Training on augumented user 52161 25/50 current_auc = 0.5015384615384615
User 52161 AUC after training: 0.5015384615384615
User 52161 does not improve AUC. Reverting changes.
Training on augumented user 116519 26/50 current_auc = 0.5015384615384615
User 116519 AUC after training: 0.5015384615384615
User 116519 does not improve AUC. Reverting changes.
Training on augumented user 38494 27/50 current_auc = 0.5015384615384615
User 38494 AUC after training: 0.5015384615384615
User 38494 does not improve AUC. Reverting changes.
Training on augumented user 105874 28/50 current_auc = 0.5015384615384615
User 105874 AUC after training: 0.5
User 105874 does not improve AUC. Reverting changes.
Training on augumented user 134343 29/50 current_auc = 0.5015384615384615
User 134343 AUC after training: 0.5
User 134343 does not improve AUC. Reverting changes.
Training on augumented user 43977 30/50 current_auc = 0.5015384615384615
User 43977 AUC after training: 0.5046153846153846
User 43977 improves AUC. Keeping the model.
Training on augumented user 19870 31/50 current_auc = 0.5046153846153846
User 19870 AUC after training: 0.5046153846153846
User 19870 does not improve AUC. Reverting changes.
Training on augumented user 104236 32/50 current_auc = 0.5046153846153846
User 104236 AUC after training: 0.5030769230769231
User 104236 does not improve AUC. Reverting changes.
Training on augumented user 137490 33/50 current_auc = 0.5046153846153846
User 137490 AUC after training: 0.5046153846153846
User 137490 does not improve AUC. Reverting changes.
Training on augumented user 55650 34/50 current_auc = 0.5046153846153846
User 55650 AUC after training: 0.5046153846153846
User 55650 does not improve AUC. Reverting changes.
Training on augumented user 7003 35/50 current_auc = 0.5046153846153846
User 7003 AUC after training: 0.5030769230769231
User 7003 does not improve AUC. Reverting changes.
Training on augumented user 102722 36/50 current_auc = 0.5046153846153846
User 102722 AUC after training: 0.5015384615384616
User 102722 does not improve AUC. Reverting changes.
Training on augumented user 87188 37/50 current_auc = 0.5046153846153846
User 87188 AUC after training: 0.5030769230769231
User 87188 does not improve AUC. Reverting changes.
Training on augumented user 2272 38/50 current_auc = 0.5046153846153846
User 2272 AUC after training: 0.5061538461538462
User 2272 improves AUC. Keeping the model.
Training on augumented user 106751 39/50 current_auc = 0.5061538461538462
User 106751 AUC after training: 0.5046153846153846
User 106751 does not improve AUC. Reverting changes.
Training on augumented user 65443 40/50 current_auc = 0.5061538461538462
User 65443 AUC after training: 0.5046153846153846
User 65443 does not improve AUC. Reverting changes.
Training on augumented user 76982 41/50 current_auc = 0.5061538461538462
User 76982 AUC after training: 0.5046153846153847
User 76982 does not improve AUC. Reverting changes.
Training on augumented user 90709 42/50 current_auc = 0.5061538461538462
User 90709 AUC after training: 0.5061538461538462
User 90709 does not improve AUC. Reverting changes.
Training on augumented user 39818 43/50 current_auc = 0.5061538461538462
User 39818 AUC after training: 0.5061538461538462
User 39818 does not improve AUC. Reverting changes.
Training on augumented user 83225 44/50 current_auc = 0.5061538461538462
User 83225 AUC after training: 0.5030769230769231
User 83225 does not improve AUC. Reverting changes.
Training on augumented user 29888 45/50 current_auc = 0.5061538461538462
User 29888 AUC after training: 0.5046153846153846
User 29888 does not improve AUC. Reverting changes.
Training on augumented user 134781 46/50 current_auc = 0.5061538461538462
User 134781 AUC after training: 0.5030769230769231
User 134781 does not improve AUC. Reverting changes.
Training on augumented user 107201 47/50 current_auc = 0.5061538461538462
User 107201 AUC after training: 0.5061538461538462
User 107201 does not improve AUC. Reverting changes.
Training on augumented user 35647 48/50 current_auc = 0.5061538461538462
User 35647 AUC after training: 0.5046153846153846
User 35647 does not improve AUC. Reverting changes.
Training on augumented user 79490 49/50 current_auc = 0.5061538461538462
User 79490 AUC after training: 0.5030769230769231
User 79490 does not improve AUC. Reverting changes.
[2024-12-02 19:33:58.343704] start test user 129336 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:58.757334] start test user 129336 213/567 recall augumented users by random, augumented_users = [94283, 135092, 100312, 43620, 40932, 72119, 20243, 13608, 121075, 135663, 20136, 83612, 14079, 122235, 111737, 92790, 71291, 106953, 125305, 77226, 64056, 125831, 99889, 69798, 25049, 51059, 137462, 48918, 66341, 111702, 8946, 83842, 104552, 19557, 109018, 10178, 5745, 94819, 15187, 97950, 47947, 84514, 36711, 2162, 48175, 55258, 56669, 89122, 69339, 48332]
[2024-12-02 19:33:58.772214] user = 129336 Cloud 213/567
[2024-12-02 19:33:58.783345] user = 129336 Local 213/567
[2024-12-02 19:33:58.867054] user = 129336 Local+ 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:00.597066] user = 129336 MPDA- 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6967930029154519
Training on augumented user 94283 0/50 current_auc = 0.6967930029154519
User 94283 AUC after training: 0.7026239067055394
User 94283 improves AUC. Keeping the model.
Training on augumented user 135092 1/50 current_auc = 0.7026239067055394
User 135092 AUC after training: 0.7018950437317785
User 135092 does not improve AUC. Reverting changes.
Training on augumented user 100312 2/50 current_auc = 0.7026239067055394
User 100312 AUC after training: 0.7033527696793003
User 100312 improves AUC. Keeping the model.
Training on augumented user 43620 3/50 current_auc = 0.7033527696793003
User 43620 AUC after training: 0.7048104956268222
User 43620 improves AUC. Keeping the model.
Training on augumented user 40932 4/50 current_auc = 0.7048104956268222
User 40932 AUC after training: 0.7040816326530612
User 40932 does not improve AUC. Reverting changes.
Training on augumented user 72119 5/50 current_auc = 0.7048104956268222
User 72119 AUC after training: 0.7033527696793003
User 72119 does not improve AUC. Reverting changes.
Training on augumented user 20243 6/50 current_auc = 0.7048104956268222
User 20243 AUC after training: 0.7055393586005831
User 20243 improves AUC. Keeping the model.
Training on augumented user 13608 7/50 current_auc = 0.7055393586005831
User 13608 AUC after training: 0.7069970845481051
User 13608 improves AUC. Keeping the model.
Training on augumented user 121075 8/50 current_auc = 0.7069970845481051
User 121075 AUC after training: 0.706997084548105
User 121075 does not improve AUC. Reverting changes.
Training on augumented user 135663 9/50 current_auc = 0.7069970845481051
User 135663 AUC after training: 0.7077259475218659
User 135663 improves AUC. Keeping the model.
Training on augumented user 20136 10/50 current_auc = 0.7077259475218659
User 20136 AUC after training: 0.7084548104956268
User 20136 improves AUC. Keeping the model.
Training on augumented user 83612 11/50 current_auc = 0.7084548104956268
User 83612 AUC after training: 0.7055393586005831
User 83612 does not improve AUC. Reverting changes.
Training on augumented user 14079 12/50 current_auc = 0.7084548104956268
User 14079 AUC after training: 0.7091836734693878
User 14079 improves AUC. Keeping the model.
Training on augumented user 122235 13/50 current_auc = 0.7091836734693878
User 122235 AUC after training: 0.7084548104956269
User 122235 does not improve AUC. Reverting changes.
Training on augumented user 111737 14/50 current_auc = 0.7091836734693878
User 111737 AUC after training: 0.7084548104956269
User 111737 does not improve AUC. Reverting changes.
Training on augumented user 92790 15/50 current_auc = 0.7091836734693878
User 92790 AUC after training: 0.7077259475218659
User 92790 does not improve AUC. Reverting changes.
Training on augumented user 71291 16/50 current_auc = 0.7091836734693878
User 71291 AUC after training: 0.7077259475218658
User 71291 does not improve AUC. Reverting changes.
Training on augumented user 106953 17/50 current_auc = 0.7091836734693878
User 106953 AUC after training: 0.7048104956268222
User 106953 does not improve AUC. Reverting changes.
Training on augumented user 125305 18/50 current_auc = 0.7091836734693878
User 125305 AUC after training: 0.7091836734693878
User 125305 does not improve AUC. Reverting changes.
Training on augumented user 77226 19/50 current_auc = 0.7091836734693878
User 77226 AUC after training: 0.7077259475218659
User 77226 does not improve AUC. Reverting changes.
Training on augumented user 64056 20/50 current_auc = 0.7091836734693878
User 64056 AUC after training: 0.7084548104956269
User 64056 does not improve AUC. Reverting changes.
Training on augumented user 125831 21/50 current_auc = 0.7091836734693878
User 125831 AUC after training: 0.7091836734693878
User 125831 does not improve AUC. Reverting changes.
Training on augumented user 99889 22/50 current_auc = 0.7091836734693878
User 99889 AUC after training: 0.7048104956268222
User 99889 does not improve AUC. Reverting changes.
Training on augumented user 69798 23/50 current_auc = 0.7091836734693878
User 69798 AUC after training: 0.706997084548105
User 69798 does not improve AUC. Reverting changes.
Training on augumented user 25049 24/50 current_auc = 0.7091836734693878
User 25049 AUC after training: 0.7091836734693878
User 25049 does not improve AUC. Reverting changes.
Training on augumented user 51059 25/50 current_auc = 0.7091836734693878
User 51059 AUC after training: 0.7077259475218658
User 51059 does not improve AUC. Reverting changes.
Training on augumented user 137462 26/50 current_auc = 0.7091836734693878
User 137462 AUC after training: 0.7018950437317785
User 137462 does not improve AUC. Reverting changes.
Training on augumented user 48918 27/50 current_auc = 0.7091836734693878
User 48918 AUC after training: 0.7040816326530612
User 48918 does not improve AUC. Reverting changes.
Training on augumented user 66341 28/50 current_auc = 0.7091836734693878
User 66341 AUC after training: 0.706997084548105
User 66341 does not improve AUC. Reverting changes.
Training on augumented user 111702 29/50 current_auc = 0.7091836734693878
User 111702 AUC after training: 0.7084548104956269
User 111702 does not improve AUC. Reverting changes.
Training on augumented user 8946 30/50 current_auc = 0.7091836734693878
User 8946 AUC after training: 0.7055393586005831
User 8946 does not improve AUC. Reverting changes.
Training on augumented user 83842 31/50 current_auc = 0.7091836734693878
User 83842 AUC after training: 0.7040816326530612
User 83842 does not improve AUC. Reverting changes.
Training on augumented user 104552 32/50 current_auc = 0.7091836734693878
User 104552 AUC after training: 0.706997084548105
User 104552 does not improve AUC. Reverting changes.
Training on augumented user 19557 33/50 current_auc = 0.7091836734693878
User 19557 AUC after training: 0.706997084548105
User 19557 does not improve AUC. Reverting changes.
Training on augumented user 109018 34/50 current_auc = 0.7091836734693878
User 109018 AUC after training: 0.7084548104956269
User 109018 does not improve AUC. Reverting changes.
Training on augumented user 10178 35/50 current_auc = 0.7091836734693878
User 10178 AUC after training: 0.7099125364431488
User 10178 improves AUC. Keeping the model.
Training on augumented user 5745 36/50 current_auc = 0.7099125364431488
User 5745 AUC after training: 0.7091836734693877
User 5745 does not improve AUC. Reverting changes.
Training on augumented user 94819 37/50 current_auc = 0.7099125364431488
User 94819 AUC after training: 0.7113702623906706
User 94819 improves AUC. Keeping the model.
Training on augumented user 15187 38/50 current_auc = 0.7113702623906706
User 15187 AUC after training: 0.7048104956268221
User 15187 does not improve AUC. Reverting changes.
Training on augumented user 97950 39/50 current_auc = 0.7113702623906706
User 97950 AUC after training: 0.7099125364431487
User 97950 does not improve AUC. Reverting changes.
Training on augumented user 47947 40/50 current_auc = 0.7113702623906706
User 47947 AUC after training: 0.7106413994169096
User 47947 does not improve AUC. Reverting changes.
Training on augumented user 84514 41/50 current_auc = 0.7113702623906706
User 84514 AUC after training: 0.7099125364431488
User 84514 does not improve AUC. Reverting changes.
Training on augumented user 36711 42/50 current_auc = 0.7113702623906706
User 36711 AUC after training: 0.7106413994169096
User 36711 does not improve AUC. Reverting changes.
Training on augumented user 2162 43/50 current_auc = 0.7113702623906706
User 2162 AUC after training: 0.7113702623906705
User 2162 does not improve AUC. Reverting changes.
Training on augumented user 48175 44/50 current_auc = 0.7113702623906706
User 48175 AUC after training: 0.7099125364431488
User 48175 does not improve AUC. Reverting changes.
Training on augumented user 55258 45/50 current_auc = 0.7113702623906706
User 55258 AUC after training: 0.7106413994169096
User 55258 does not improve AUC. Reverting changes.
Training on augumented user 56669 46/50 current_auc = 0.7113702623906706
User 56669 AUC after training: 0.7099125364431487
User 56669 does not improve AUC. Reverting changes.
Training on augumented user 89122 47/50 current_auc = 0.7113702623906706
User 89122 AUC after training: 0.7120991253644315
User 89122 improves AUC. Keeping the model.
Training on augumented user 69339 48/50 current_auc = 0.7120991253644315
User 69339 AUC after training: 0.7106413994169097
User 69339 does not improve AUC. Reverting changes.
Training on augumented user 48332 49/50 current_auc = 0.7120991253644315
User 48332 AUC after training: 0.7084548104956269
User 48332 does not improve AUC. Reverting changes.
[2024-12-02 19:34:23.363161] start test user 129338 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:23.790318] start test user 129338 214/567 recall augumented users by random, augumented_users = [95278, 124489, 131258, 17128, 17125, 64497, 73437, 78672, 129103, 117184, 5539, 11316, 13152, 31859, 17360, 78803, 35320, 14223, 62029, 18464, 66337, 68496, 50325, 117095, 95787, 34815, 53661, 126454, 40473, 138134, 125650, 58314, 88801, 21793, 12246, 130087, 16289, 124012, 40899, 104771, 36990, 19456, 85913, 128686, 72003, 45141, 46750, 22975, 107036, 95025]
[2024-12-02 19:34:23.805984] user = 129338 Cloud 214/567
[2024-12-02 19:34:23.827435] user = 129338 Local 214/567
[2024-12-02 19:34:23.916598] user = 129338 Local+ 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:26.131419] user = 129338 MPDA- 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5204918032786885
Training on augumented user 95278 0/50 current_auc = 0.5204918032786885
User 95278 AUC after training: 0.5202641165755919
User 95278 does not improve AUC. Reverting changes.
Training on augumented user 124489 1/50 current_auc = 0.5204918032786885
User 124489 AUC after training: 0.5196948998178506
User 124489 does not improve AUC. Reverting changes.
Training on augumented user 131258 2/50 current_auc = 0.5204918032786885
User 131258 AUC after training: 0.5207194899817851
User 131258 improves AUC. Keeping the model.
Training on augumented user 17128 3/50 current_auc = 0.5207194899817851
User 17128 AUC after training: 0.5202641165755919
User 17128 does not improve AUC. Reverting changes.
Training on augumented user 17125 4/50 current_auc = 0.5207194899817851
User 17125 AUC after training: 0.5204918032786885
User 17125 does not improve AUC. Reverting changes.
Training on augumented user 64497 5/50 current_auc = 0.5207194899817851
User 64497 AUC after training: 0.5208333333333333
User 64497 improves AUC. Keeping the model.
Training on augumented user 73437 6/50 current_auc = 0.5208333333333333
User 73437 AUC after training: 0.5204918032786885
User 73437 does not improve AUC. Reverting changes.
Training on augumented user 78672 7/50 current_auc = 0.5208333333333333
User 78672 AUC after training: 0.5202641165755919
User 78672 does not improve AUC. Reverting changes.
Training on augumented user 129103 8/50 current_auc = 0.5208333333333333
User 129103 AUC after training: 0.5203779599271403
User 129103 does not improve AUC. Reverting changes.
Training on augumented user 117184 9/50 current_auc = 0.5208333333333333
User 117184 AUC after training: 0.5203779599271403
User 117184 does not improve AUC. Reverting changes.
Training on augumented user 5539 10/50 current_auc = 0.5208333333333333
User 5539 AUC after training: 0.5233378870673953
User 5539 improves AUC. Keeping the model.
Training on augumented user 11316 11/50 current_auc = 0.5233378870673953
User 11316 AUC after training: 0.52367941712204
User 11316 improves AUC. Keeping the model.
Training on augumented user 13152 12/50 current_auc = 0.52367941712204
User 13152 AUC after training: 0.5233378870673953
User 13152 does not improve AUC. Reverting changes.
Training on augumented user 31859 13/50 current_auc = 0.52367941712204
User 31859 AUC after training: 0.5231102003642987
User 31859 does not improve AUC. Reverting changes.
Training on augumented user 17360 14/50 current_auc = 0.52367941712204
User 17360 AUC after training: 0.5240209471766848
User 17360 improves AUC. Keeping the model.
Training on augumented user 78803 15/50 current_auc = 0.5240209471766848
User 78803 AUC after training: 0.524476320582878
User 78803 improves AUC. Keeping the model.
Training on augumented user 35320 16/50 current_auc = 0.524476320582878
User 35320 AUC after training: 0.5231102003642987
User 35320 does not improve AUC. Reverting changes.
Training on augumented user 14223 17/50 current_auc = 0.524476320582878
User 14223 AUC after training: 0.52367941712204
User 14223 does not improve AUC. Reverting changes.
Training on augumented user 62029 18/50 current_auc = 0.524476320582878
User 62029 AUC after training: 0.5237932604735882
User 62029 does not improve AUC. Reverting changes.
Training on augumented user 18464 19/50 current_auc = 0.524476320582878
User 18464 AUC after training: 0.5239071038251366
User 18464 does not improve AUC. Reverting changes.
Training on augumented user 66337 20/50 current_auc = 0.524476320582878
User 66337 AUC after training: 0.524476320582878
User 66337 does not improve AUC. Reverting changes.
Training on augumented user 68496 21/50 current_auc = 0.524476320582878
User 68496 AUC after training: 0.5239071038251366
User 68496 does not improve AUC. Reverting changes.
Training on augumented user 50325 22/50 current_auc = 0.524476320582878
User 50325 AUC after training: 0.5242486338797814
User 50325 does not improve AUC. Reverting changes.
Training on augumented user 117095 23/50 current_auc = 0.524476320582878
User 117095 AUC after training: 0.5243624772313297
User 117095 does not improve AUC. Reverting changes.
Training on augumented user 95787 24/50 current_auc = 0.524476320582878
User 95787 AUC after training: 0.5241347905282332
User 95787 does not improve AUC. Reverting changes.
Training on augumented user 34815 25/50 current_auc = 0.524476320582878
User 34815 AUC after training: 0.5239071038251366
User 34815 does not improve AUC. Reverting changes.
Training on augumented user 53661 26/50 current_auc = 0.524476320582878
User 53661 AUC after training: 0.5242486338797814
User 53661 does not improve AUC. Reverting changes.
Training on augumented user 126454 27/50 current_auc = 0.524476320582878
User 126454 AUC after training: 0.5240209471766849
User 126454 does not improve AUC. Reverting changes.
Training on augumented user 40473 28/50 current_auc = 0.524476320582878
User 40473 AUC after training: 0.5241347905282332
User 40473 does not improve AUC. Reverting changes.
Training on augumented user 138134 29/50 current_auc = 0.524476320582878
User 138134 AUC after training: 0.5251593806921675
User 138134 improves AUC. Keeping the model.
Training on augumented user 125650 30/50 current_auc = 0.5251593806921675
User 125650 AUC after training: 0.5256147540983607
User 125650 improves AUC. Keeping the model.
Training on augumented user 58314 31/50 current_auc = 0.5256147540983607
User 58314 AUC after training: 0.5264116575591985
User 58314 improves AUC. Keeping the model.
Training on augumented user 88801 32/50 current_auc = 0.5264116575591985
User 88801 AUC after training: 0.525728597449909
User 88801 does not improve AUC. Reverting changes.
Training on augumented user 21793 33/50 current_auc = 0.5264116575591985
User 21793 AUC after training: 0.525728597449909
User 21793 does not improve AUC. Reverting changes.
Training on augumented user 12246 34/50 current_auc = 0.5264116575591985
User 12246 AUC after training: 0.5247040072859745
User 12246 does not improve AUC. Reverting changes.
Training on augumented user 130087 35/50 current_auc = 0.5264116575591985
User 130087 AUC after training: 0.5259562841530054
User 130087 does not improve AUC. Reverting changes.
Training on augumented user 16289 36/50 current_auc = 0.5264116575591985
User 16289 AUC after training: 0.5253870673952641
User 16289 does not improve AUC. Reverting changes.
Training on augumented user 124012 37/50 current_auc = 0.5264116575591985
User 124012 AUC after training: 0.5257285974499089
User 124012 does not improve AUC. Reverting changes.
Training on augumented user 40899 38/50 current_auc = 0.5264116575591985
User 40899 AUC after training: 0.5260701275045537
User 40899 does not improve AUC. Reverting changes.
Training on augumented user 104771 39/50 current_auc = 0.5264116575591985
User 104771 AUC after training: 0.5257285974499089
User 104771 does not improve AUC. Reverting changes.
Training on augumented user 36990 40/50 current_auc = 0.5264116575591985
User 36990 AUC after training: 0.5257285974499089
User 36990 does not improve AUC. Reverting changes.
Training on augumented user 19456 41/50 current_auc = 0.5264116575591985
User 19456 AUC after training: 0.5259562841530054
User 19456 does not improve AUC. Reverting changes.
Training on augumented user 85913 42/50 current_auc = 0.5264116575591985
User 85913 AUC after training: 0.526183970856102
User 85913 does not improve AUC. Reverting changes.
Training on augumented user 128686 43/50 current_auc = 0.5264116575591985
User 128686 AUC after training: 0.5252732240437159
User 128686 does not improve AUC. Reverting changes.
Training on augumented user 72003 44/50 current_auc = 0.5264116575591985
User 72003 AUC after training: 0.5267531876138434
User 72003 improves AUC. Keeping the model.
Training on augumented user 45141 45/50 current_auc = 0.5267531876138434
User 45141 AUC after training: 0.5262978142076502
User 45141 does not improve AUC. Reverting changes.
Training on augumented user 46750 46/50 current_auc = 0.5267531876138434
User 46750 AUC after training: 0.526183970856102
User 46750 does not improve AUC. Reverting changes.
Training on augumented user 22975 47/50 current_auc = 0.5267531876138434
User 22975 AUC after training: 0.5275500910746812
User 22975 improves AUC. Keeping the model.
Training on augumented user 107036 48/50 current_auc = 0.5275500910746812
User 107036 AUC after training: 0.5275500910746813
User 107036 improves AUC. Keeping the model.
Training on augumented user 95025 49/50 current_auc = 0.5275500910746813
User 95025 AUC after training: 0.52698087431694
User 95025 does not improve AUC. Reverting changes.
[2024-12-02 19:34:57.564640] start test user 129354 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:58.105271] start test user 129354 215/567 recall augumented users by random, augumented_users = [126034, 126585, 105664, 91483, 104906, 29172, 118184, 108179, 2261, 44205, 91206, 2869, 18254, 12384, 36075, 131645, 120734, 124030, 25327, 102882, 78859, 33759, 19099, 75110, 23049, 19982, 35795, 96828, 48941, 26162, 90051, 90106, 132764, 125873, 3662, 83820, 90031, 33183, 32788, 58785, 126862, 63402, 81563, 2664, 42432, 60089, 115963, 109115, 65734, 39981]
[2024-12-02 19:34:58.120813] user = 129354 Cloud 215/567
[2024-12-02 19:34:58.136248] user = 129354 Local 215/567
[2024-12-02 19:34:58.272362] user = 129354 Local+ 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:01.524022] user = 129354 MPDA- 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8623511904761905
Training on augumented user 126034 0/50 current_auc = 0.8623511904761905
User 126034 AUC after training: 0.8616071428571428
User 126034 does not improve AUC. Reverting changes.
Training on augumented user 126585 1/50 current_auc = 0.8623511904761905
User 126585 AUC after training: 0.8623511904761905
User 126585 does not improve AUC. Reverting changes.
Training on augumented user 105664 2/50 current_auc = 0.8623511904761905
User 105664 AUC after training: 0.8601190476190477
User 105664 does not improve AUC. Reverting changes.
Training on augumented user 91483 3/50 current_auc = 0.8623511904761905
User 91483 AUC after training: 0.8623511904761905
User 91483 does not improve AUC. Reverting changes.
Training on augumented user 104906 4/50 current_auc = 0.8623511904761905
User 104906 AUC after training: 0.861607142857143
User 104906 does not improve AUC. Reverting changes.
Training on augumented user 29172 5/50 current_auc = 0.8623511904761905
User 29172 AUC after training: 0.861607142857143
User 29172 does not improve AUC. Reverting changes.
Training on augumented user 118184 6/50 current_auc = 0.8623511904761905
User 118184 AUC after training: 0.859375
User 118184 does not improve AUC. Reverting changes.
Training on augumented user 108179 7/50 current_auc = 0.8623511904761905
User 108179 AUC after training: 0.8616071428571428
User 108179 does not improve AUC. Reverting changes.
Training on augumented user 2261 8/50 current_auc = 0.8623511904761905
User 2261 AUC after training: 0.8653273809523809
User 2261 improves AUC. Keeping the model.
Training on augumented user 44205 9/50 current_auc = 0.8653273809523809
User 44205 AUC after training: 0.8638392857142858
User 44205 does not improve AUC. Reverting changes.
Training on augumented user 91206 10/50 current_auc = 0.8653273809523809
User 91206 AUC after training: 0.8645833333333335
User 91206 does not improve AUC. Reverting changes.
Training on augumented user 2869 11/50 current_auc = 0.8653273809523809
User 2869 AUC after training: 0.8638392857142858
User 2869 does not improve AUC. Reverting changes.
Training on augumented user 18254 12/50 current_auc = 0.8653273809523809
User 18254 AUC after training: 0.8638392857142858
User 18254 does not improve AUC. Reverting changes.
Training on augumented user 12384 13/50 current_auc = 0.8653273809523809
User 12384 AUC after training: 0.8623511904761905
User 12384 does not improve AUC. Reverting changes.
Training on augumented user 36075 14/50 current_auc = 0.8653273809523809
User 36075 AUC after training: 0.8638392857142858
User 36075 does not improve AUC. Reverting changes.
Training on augumented user 131645 15/50 current_auc = 0.8653273809523809
User 131645 AUC after training: 0.8653273809523809
User 131645 does not improve AUC. Reverting changes.
Training on augumented user 120734 16/50 current_auc = 0.8653273809523809
User 120734 AUC after training: 0.8638392857142858
User 120734 does not improve AUC. Reverting changes.
Training on augumented user 124030 17/50 current_auc = 0.8653273809523809
User 124030 AUC after training: 0.8645833333333333
User 124030 does not improve AUC. Reverting changes.
Training on augumented user 25327 18/50 current_auc = 0.8653273809523809
User 25327 AUC after training: 0.8608630952380953
User 25327 does not improve AUC. Reverting changes.
Training on augumented user 102882 19/50 current_auc = 0.8653273809523809
User 102882 AUC after training: 0.8653273809523809
User 102882 does not improve AUC. Reverting changes.
Training on augumented user 78859 20/50 current_auc = 0.8653273809523809
User 78859 AUC after training: 0.8645833333333333
User 78859 does not improve AUC. Reverting changes.
Training on augumented user 33759 21/50 current_auc = 0.8653273809523809
User 33759 AUC after training: 0.8653273809523809
User 33759 does not improve AUC. Reverting changes.
Training on augumented user 19099 22/50 current_auc = 0.8653273809523809
User 19099 AUC after training: 0.8638392857142858
User 19099 does not improve AUC. Reverting changes.
Training on augumented user 75110 23/50 current_auc = 0.8653273809523809
User 75110 AUC after training: 0.8653273809523809
User 75110 does not improve AUC. Reverting changes.
Training on augumented user 23049 24/50 current_auc = 0.8653273809523809
User 23049 AUC after training: 0.8645833333333335
User 23049 does not improve AUC. Reverting changes.
Training on augumented user 19982 25/50 current_auc = 0.8653273809523809
User 19982 AUC after training: 0.8645833333333333
User 19982 does not improve AUC. Reverting changes.
Training on augumented user 35795 26/50 current_auc = 0.8653273809523809
User 35795 AUC after training: 0.8630952380952381
User 35795 does not improve AUC. Reverting changes.
Training on augumented user 96828 27/50 current_auc = 0.8653273809523809
User 96828 AUC after training: 0.8653273809523809
User 96828 does not improve AUC. Reverting changes.
Training on augumented user 48941 28/50 current_auc = 0.8653273809523809
User 48941 AUC after training: 0.8638392857142858
User 48941 does not improve AUC. Reverting changes.
Training on augumented user 26162 29/50 current_auc = 0.8653273809523809
User 26162 AUC after training: 0.8623511904761905
User 26162 does not improve AUC. Reverting changes.
Training on augumented user 90051 30/50 current_auc = 0.8653273809523809
User 90051 AUC after training: 0.8638392857142858
User 90051 does not improve AUC. Reverting changes.
Training on augumented user 90106 31/50 current_auc = 0.8653273809523809
User 90106 AUC after training: 0.8638392857142858
User 90106 does not improve AUC. Reverting changes.
Training on augumented user 132764 32/50 current_auc = 0.8653273809523809
User 132764 AUC after training: 0.8645833333333335
User 132764 does not improve AUC. Reverting changes.
Training on augumented user 125873 33/50 current_auc = 0.8653273809523809
User 125873 AUC after training: 0.8645833333333335
User 125873 does not improve AUC. Reverting changes.
Training on augumented user 3662 34/50 current_auc = 0.8653273809523809
User 3662 AUC after training: 0.8653273809523809
User 3662 does not improve AUC. Reverting changes.
Training on augumented user 83820 35/50 current_auc = 0.8653273809523809
User 83820 AUC after training: 0.8653273809523809
User 83820 does not improve AUC. Reverting changes.
Training on augumented user 90031 36/50 current_auc = 0.8653273809523809
User 90031 AUC after training: 0.8645833333333333
User 90031 does not improve AUC. Reverting changes.
Training on augumented user 33183 37/50 current_auc = 0.8653273809523809
User 33183 AUC after training: 0.8645833333333333
User 33183 does not improve AUC. Reverting changes.
Training on augumented user 32788 38/50 current_auc = 0.8653273809523809
User 32788 AUC after training: 0.8638392857142858
User 32788 does not improve AUC. Reverting changes.
Training on augumented user 58785 39/50 current_auc = 0.8653273809523809
User 58785 AUC after training: 0.8638392857142858
User 58785 does not improve AUC. Reverting changes.
Training on augumented user 126862 40/50 current_auc = 0.8653273809523809
User 126862 AUC after training: 0.8638392857142858
User 126862 does not improve AUC. Reverting changes.
Training on augumented user 63402 41/50 current_auc = 0.8653273809523809
User 63402 AUC after training: 0.8653273809523809
User 63402 does not improve AUC. Reverting changes.
Training on augumented user 81563 42/50 current_auc = 0.8653273809523809
User 81563 AUC after training: 0.8645833333333335
User 81563 does not improve AUC. Reverting changes.
Training on augumented user 2664 43/50 current_auc = 0.8653273809523809
User 2664 AUC after training: 0.8645833333333333
User 2664 does not improve AUC. Reverting changes.
Training on augumented user 42432 44/50 current_auc = 0.8653273809523809
User 42432 AUC after training: 0.8645833333333335
User 42432 does not improve AUC. Reverting changes.
Training on augumented user 60089 45/50 current_auc = 0.8653273809523809
User 60089 AUC after training: 0.8645833333333335
User 60089 does not improve AUC. Reverting changes.
Training on augumented user 115963 46/50 current_auc = 0.8653273809523809
User 115963 AUC after training: 0.8653273809523809
User 115963 does not improve AUC. Reverting changes.
Training on augumented user 109115 47/50 current_auc = 0.8653273809523809
User 109115 AUC after training: 0.8653273809523809
User 109115 does not improve AUC. Reverting changes.
Training on augumented user 65734 48/50 current_auc = 0.8653273809523809
User 65734 AUC after training: 0.8653273809523809
User 65734 does not improve AUC. Reverting changes.
Training on augumented user 39981 49/50 current_auc = 0.8653273809523809
User 39981 AUC after training: 0.8653273809523809
User 39981 does not improve AUC. Reverting changes.
[2024-12-02 19:35:31.898338] start test user 129362 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:32.675076] start test user 129362 216/567 recall augumented users by random, augumented_users = [85505, 88330, 72399, 130543, 88872, 37564, 99656, 28027, 49163, 107424, 85936, 61227, 63574, 119009, 26907, 63133, 106105, 16722, 15835, 56715, 11100, 116164, 31960, 83943, 36931, 46485, 113564, 72063, 128449, 17892, 104075, 99552, 27470, 122634, 56823, 97445, 5167, 136685, 47847, 94927, 47834, 98077, 71213, 82982, 91278, 78844, 133065, 121716, 13964, 26605]
[2024-12-02 19:35:32.689982] user = 129362 Cloud 216/567
[2024-12-02 19:35:32.700147] user = 129362 Local 216/567
[2024-12-02 19:35:32.757781] user = 129362 Local+ 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:34.828751] user = 129362 MPDA- 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6428571428571428
Training on augumented user 85505 0/50 current_auc = 0.6428571428571428
User 85505 AUC after training: 0.6363636363636364
User 85505 does not improve AUC. Reverting changes.
Training on augumented user 88330 1/50 current_auc = 0.6428571428571428
User 88330 AUC after training: 0.6428571428571428
User 88330 does not improve AUC. Reverting changes.
Training on augumented user 72399 2/50 current_auc = 0.6428571428571428
User 72399 AUC after training: 0.6428571428571428
User 72399 does not improve AUC. Reverting changes.
Training on augumented user 130543 3/50 current_auc = 0.6428571428571428
User 130543 AUC after training: 0.6363636363636364
User 130543 does not improve AUC. Reverting changes.
Training on augumented user 88872 4/50 current_auc = 0.6428571428571428
User 88872 AUC after training: 0.6363636363636364
User 88872 does not improve AUC. Reverting changes.
Training on augumented user 37564 5/50 current_auc = 0.6428571428571428
User 37564 AUC after training: 0.6363636363636364
User 37564 does not improve AUC. Reverting changes.
Training on augumented user 99656 6/50 current_auc = 0.6428571428571428
User 99656 AUC after training: 0.6428571428571428
User 99656 does not improve AUC. Reverting changes.
Training on augumented user 28027 7/50 current_auc = 0.6428571428571428
User 28027 AUC after training: 0.6363636363636364
User 28027 does not improve AUC. Reverting changes.
Training on augumented user 49163 8/50 current_auc = 0.6428571428571428
User 49163 AUC after training: 0.6428571428571428
User 49163 does not improve AUC. Reverting changes.
Training on augumented user 107424 9/50 current_auc = 0.6428571428571428
User 107424 AUC after training: 0.6363636363636364
User 107424 does not improve AUC. Reverting changes.
Training on augumented user 85936 10/50 current_auc = 0.6428571428571428
User 85936 AUC after training: 0.6363636363636364
User 85936 does not improve AUC. Reverting changes.
Training on augumented user 61227 11/50 current_auc = 0.6428571428571428
User 61227 AUC after training: 0.6428571428571428
User 61227 does not improve AUC. Reverting changes.
Training on augumented user 63574 12/50 current_auc = 0.6428571428571428
User 63574 AUC after training: 0.6493506493506493
User 63574 improves AUC. Keeping the model.
Training on augumented user 119009 13/50 current_auc = 0.6493506493506493
User 119009 AUC after training: 0.6493506493506493
User 119009 does not improve AUC. Reverting changes.
Training on augumented user 26907 14/50 current_auc = 0.6493506493506493
User 26907 AUC after training: 0.6493506493506493
User 26907 does not improve AUC. Reverting changes.
Training on augumented user 63133 15/50 current_auc = 0.6493506493506493
User 63133 AUC after training: 0.6428571428571428
User 63133 does not improve AUC. Reverting changes.
Training on augumented user 106105 16/50 current_auc = 0.6493506493506493
User 106105 AUC after training: 0.6493506493506493
User 106105 does not improve AUC. Reverting changes.
Training on augumented user 16722 17/50 current_auc = 0.6493506493506493
User 16722 AUC after training: 0.6493506493506493
User 16722 does not improve AUC. Reverting changes.
Training on augumented user 15835 18/50 current_auc = 0.6493506493506493
User 15835 AUC after training: 0.6493506493506493
User 15835 does not improve AUC. Reverting changes.
Training on augumented user 56715 19/50 current_auc = 0.6493506493506493
User 56715 AUC after training: 0.6428571428571428
User 56715 does not improve AUC. Reverting changes.
Training on augumented user 11100 20/50 current_auc = 0.6493506493506493
User 11100 AUC after training: 0.6428571428571428
User 11100 does not improve AUC. Reverting changes.
Training on augumented user 116164 21/50 current_auc = 0.6493506493506493
User 116164 AUC after training: 0.6428571428571428
User 116164 does not improve AUC. Reverting changes.
Training on augumented user 31960 22/50 current_auc = 0.6493506493506493
User 31960 AUC after training: 0.6493506493506493
User 31960 does not improve AUC. Reverting changes.
Training on augumented user 83943 23/50 current_auc = 0.6493506493506493
User 83943 AUC after training: 0.6493506493506493
User 83943 does not improve AUC. Reverting changes.
Training on augumented user 36931 24/50 current_auc = 0.6493506493506493
User 36931 AUC after training: 0.6493506493506493
User 36931 does not improve AUC. Reverting changes.
Training on augumented user 46485 25/50 current_auc = 0.6493506493506493
User 46485 AUC after training: 0.6493506493506493
User 46485 does not improve AUC. Reverting changes.
Training on augumented user 113564 26/50 current_auc = 0.6493506493506493
User 113564 AUC after training: 0.6493506493506493
User 113564 does not improve AUC. Reverting changes.
Training on augumented user 72063 27/50 current_auc = 0.6493506493506493
User 72063 AUC after training: 0.6493506493506493
User 72063 does not improve AUC. Reverting changes.
Training on augumented user 128449 28/50 current_auc = 0.6493506493506493
User 128449 AUC after training: 0.6428571428571428
User 128449 does not improve AUC. Reverting changes.
Training on augumented user 17892 29/50 current_auc = 0.6493506493506493
User 17892 AUC after training: 0.6493506493506493
User 17892 does not improve AUC. Reverting changes.
Training on augumented user 104075 30/50 current_auc = 0.6493506493506493
User 104075 AUC after training: 0.6493506493506493
User 104075 does not improve AUC. Reverting changes.
Training on augumented user 99552 31/50 current_auc = 0.6493506493506493
User 99552 AUC after training: 0.6428571428571428
User 99552 does not improve AUC. Reverting changes.
Training on augumented user 27470 32/50 current_auc = 0.6493506493506493
User 27470 AUC after training: 0.6493506493506493
User 27470 does not improve AUC. Reverting changes.
Training on augumented user 122634 33/50 current_auc = 0.6493506493506493
User 122634 AUC after training: 0.6428571428571428
User 122634 does not improve AUC. Reverting changes.
Training on augumented user 56823 34/50 current_auc = 0.6493506493506493
User 56823 AUC after training: 0.6428571428571428
User 56823 does not improve AUC. Reverting changes.
Training on augumented user 97445 35/50 current_auc = 0.6493506493506493
User 97445 AUC after training: 0.6428571428571428
User 97445 does not improve AUC. Reverting changes.
Training on augumented user 5167 36/50 current_auc = 0.6493506493506493
User 5167 AUC after training: 0.6493506493506493
User 5167 does not improve AUC. Reverting changes.
Training on augumented user 136685 37/50 current_auc = 0.6493506493506493
User 136685 AUC after training: 0.6493506493506493
User 136685 does not improve AUC. Reverting changes.
Training on augumented user 47847 38/50 current_auc = 0.6493506493506493
User 47847 AUC after training: 0.6428571428571428
User 47847 does not improve AUC. Reverting changes.
Training on augumented user 94927 39/50 current_auc = 0.6493506493506493
User 94927 AUC after training: 0.6493506493506493
User 94927 does not improve AUC. Reverting changes.
Training on augumented user 47834 40/50 current_auc = 0.6493506493506493
User 47834 AUC after training: 0.6493506493506493
User 47834 does not improve AUC. Reverting changes.
Training on augumented user 98077 41/50 current_auc = 0.6493506493506493
User 98077 AUC after training: 0.6428571428571428
User 98077 does not improve AUC. Reverting changes.
Training on augumented user 71213 42/50 current_auc = 0.6493506493506493
User 71213 AUC after training: 0.6428571428571428
User 71213 does not improve AUC. Reverting changes.
Training on augumented user 82982 43/50 current_auc = 0.6493506493506493
User 82982 AUC after training: 0.6428571428571428
User 82982 does not improve AUC. Reverting changes.
Training on augumented user 91278 44/50 current_auc = 0.6493506493506493
User 91278 AUC after training: 0.6493506493506493
User 91278 does not improve AUC. Reverting changes.
Training on augumented user 78844 45/50 current_auc = 0.6493506493506493
User 78844 AUC after training: 0.6493506493506493
User 78844 does not improve AUC. Reverting changes.
Training on augumented user 133065 46/50 current_auc = 0.6493506493506493
User 133065 AUC after training: 0.6493506493506493
User 133065 does not improve AUC. Reverting changes.
Training on augumented user 121716 47/50 current_auc = 0.6493506493506493
User 121716 AUC after training: 0.6428571428571428
User 121716 does not improve AUC. Reverting changes.
Training on augumented user 13964 48/50 current_auc = 0.6493506493506493
User 13964 AUC after training: 0.6493506493506493
User 13964 does not improve AUC. Reverting changes.
Training on augumented user 26605 49/50 current_auc = 0.6493506493506493
User 26605 AUC after training: 0.6428571428571428
User 26605 does not improve AUC. Reverting changes.
[2024-12-02 19:36:00.071252] start test user 129473 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:00.475483] start test user 129473 217/567 recall augumented users by random, augumented_users = [2590, 133553, 60274, 84473, 101163, 18555, 82387, 118347, 38970, 28183, 33487, 24, 119725, 30827, 28553, 46003, 15083, 128632, 103597, 76206, 68397, 100531, 84139, 53994, 3820, 8537, 41720, 109566, 32382, 52254, 130488, 88414, 60226, 121860, 113548, 103107, 90144, 117701, 54844, 138286, 98639, 14338, 54963, 57602, 87181, 18478, 6878, 15663, 71295, 97287]
[2024-12-02 19:36:00.489998] user = 129473 Cloud 217/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:00.497316] user = 129473 Local 217/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:00.513797] user = 129473 Local+ 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:02.551280] user = 129473 MPDA- 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 2590 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2590 AUC after training: 0.5
User 2590 does not improve AUC. Reverting changes.
Training on augumented user 133553 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133553 AUC after training: 0.5
User 133553 does not improve AUC. Reverting changes.
Training on augumented user 60274 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60274 AUC after training: 0.5
User 60274 does not improve AUC. Reverting changes.
Training on augumented user 84473 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84473 AUC after training: 0.5
User 84473 does not improve AUC. Reverting changes.
Training on augumented user 101163 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101163 AUC after training: 0.5
User 101163 does not improve AUC. Reverting changes.
Training on augumented user 18555 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18555 AUC after training: 0.5
User 18555 does not improve AUC. Reverting changes.
Training on augumented user 82387 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82387 AUC after training: 0.5
User 82387 does not improve AUC. Reverting changes.
Training on augumented user 118347 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118347 AUC after training: 0.5
User 118347 does not improve AUC. Reverting changes.
Training on augumented user 38970 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38970 AUC after training: 0.5
User 38970 does not improve AUC. Reverting changes.
Training on augumented user 28183 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28183 AUC after training: 0.5
User 28183 does not improve AUC. Reverting changes.
Training on augumented user 33487 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33487 AUC after training: 0.5
User 33487 does not improve AUC. Reverting changes.
Training on augumented user 24 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24 AUC after training: 0.5
User 24 does not improve AUC. Reverting changes.
Training on augumented user 119725 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119725 AUC after training: 0.5
User 119725 does not improve AUC. Reverting changes.
Training on augumented user 30827 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30827 AUC after training: 0.5
User 30827 does not improve AUC. Reverting changes.
Training on augumented user 28553 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28553 AUC after training: 0.5
User 28553 does not improve AUC. Reverting changes.
Training on augumented user 46003 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46003 AUC after training: 0.5
User 46003 does not improve AUC. Reverting changes.
Training on augumented user 15083 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15083 AUC after training: 0.5
User 15083 does not improve AUC. Reverting changes.
Training on augumented user 128632 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128632 AUC after training: 0.5
User 128632 does not improve AUC. Reverting changes.
Training on augumented user 103597 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103597 AUC after training: 0.5
User 103597 does not improve AUC. Reverting changes.
Training on augumented user 76206 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76206 AUC after training: 0.5
User 76206 does not improve AUC. Reverting changes.
Training on augumented user 68397 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68397 AUC after training: 0.5
User 68397 does not improve AUC. Reverting changes.
Training on augumented user 100531 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100531 AUC after training: 0.5
User 100531 does not improve AUC. Reverting changes.
Training on augumented user 84139 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84139 AUC after training: 0.5
User 84139 does not improve AUC. Reverting changes.
Training on augumented user 53994 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53994 AUC after training: 0.5
User 53994 does not improve AUC. Reverting changes.
Training on augumented user 3820 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3820 AUC after training: 0.5
User 3820 does not improve AUC. Reverting changes.
Training on augumented user 8537 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8537 AUC after training: 0.5
User 8537 does not improve AUC. Reverting changes.
Training on augumented user 41720 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41720 AUC after training: 0.5
User 41720 does not improve AUC. Reverting changes.
Training on augumented user 109566 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109566 AUC after training: 0.5
User 109566 does not improve AUC. Reverting changes.
Training on augumented user 32382 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32382 AUC after training: 0.5
User 32382 does not improve AUC. Reverting changes.
Training on augumented user 52254 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52254 AUC after training: 0.5
User 52254 does not improve AUC. Reverting changes.
Training on augumented user 130488 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130488 AUC after training: 0.5
User 130488 does not improve AUC. Reverting changes.
Training on augumented user 88414 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88414 AUC after training: 0.5
User 88414 does not improve AUC. Reverting changes.
Training on augumented user 60226 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60226 AUC after training: 0.5
User 60226 does not improve AUC. Reverting changes.
Training on augumented user 121860 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121860 AUC after training: 0.5
User 121860 does not improve AUC. Reverting changes.
Training on augumented user 113548 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113548 AUC after training: 0.5
User 113548 does not improve AUC. Reverting changes.
Training on augumented user 103107 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103107 AUC after training: 0.5
User 103107 does not improve AUC. Reverting changes.
Training on augumented user 90144 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90144 AUC after training: 0.5
User 90144 does not improve AUC. Reverting changes.
Training on augumented user 117701 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117701 AUC after training: 0.5
User 117701 does not improve AUC. Reverting changes.
Training on augumented user 54844 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54844 AUC after training: 0.5
User 54844 does not improve AUC. Reverting changes.
Training on augumented user 138286 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138286 AUC after training: 0.5
User 138286 does not improve AUC. Reverting changes.
Training on augumented user 98639 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98639 AUC after training: 0.5
User 98639 does not improve AUC. Reverting changes.
Training on augumented user 14338 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14338 AUC after training: 0.5
User 14338 does not improve AUC. Reverting changes.
Training on augumented user 54963 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54963 AUC after training: 0.5
User 54963 does not improve AUC. Reverting changes.
Training on augumented user 57602 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57602 AUC after training: 0.5
User 57602 does not improve AUC. Reverting changes.
Training on augumented user 87181 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87181 AUC after training: 0.5
User 87181 does not improve AUC. Reverting changes.
Training on augumented user 18478 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18478 AUC after training: 0.5
User 18478 does not improve AUC. Reverting changes.
Training on augumented user 6878 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6878 AUC after training: 0.5
User 6878 does not improve AUC. Reverting changes.
Training on augumented user 15663 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15663 AUC after training: 0.5
User 15663 does not improve AUC. Reverting changes.
Training on augumented user 71295 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71295 AUC after training: 0.5
User 71295 does not improve AUC. Reverting changes.
Training on augumented user 97287 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97287 AUC after training: 0.5
User 97287 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:28.434837] start test user 129494 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:28.917205] start test user 129494 218/567 recall augumented users by random, augumented_users = [14512, 127102, 17888, 6453, 48430, 80671, 33557, 27872, 106861, 110469, 25935, 72174, 7888, 118172, 37344, 424, 124817, 29923, 101315, 116606, 127617, 62359, 115839, 18840, 44884, 56430, 38847, 106728, 98021, 43754, 60194, 127019, 25561, 18030, 87571, 13120, 104979, 113777, 131325, 100313, 23350, 133399, 133510, 97212, 30583, 62129, 124392, 115048, 133814, 31494]
[2024-12-02 19:36:28.931680] user = 129494 Cloud 218/567
[2024-12-02 19:36:28.941169] user = 129494 Local 218/567
[2024-12-02 19:36:28.971932] user = 129494 Local+ 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:31.288828] user = 129494 MPDA- 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.16666666666666669
Training on augumented user 14512 0/50 current_auc = 0.16666666666666669
User 14512 AUC after training: 0.16666666666666669
User 14512 does not improve AUC. Reverting changes.
Training on augumented user 127102 1/50 current_auc = 0.16666666666666669
User 127102 AUC after training: 0.16666666666666669
User 127102 does not improve AUC. Reverting changes.
Training on augumented user 17888 2/50 current_auc = 0.16666666666666669
User 17888 AUC after training: 0.16666666666666669
User 17888 does not improve AUC. Reverting changes.
Training on augumented user 6453 3/50 current_auc = 0.16666666666666669
User 6453 AUC after training: 0.16666666666666669
User 6453 does not improve AUC. Reverting changes.
Training on augumented user 48430 4/50 current_auc = 0.16666666666666669
User 48430 AUC after training: 0.16666666666666669
User 48430 does not improve AUC. Reverting changes.
Training on augumented user 80671 5/50 current_auc = 0.16666666666666669
User 80671 AUC after training: 0.16666666666666669
User 80671 does not improve AUC. Reverting changes.
Training on augumented user 33557 6/50 current_auc = 0.16666666666666669
User 33557 AUC after training: 0.16666666666666669
User 33557 does not improve AUC. Reverting changes.
Training on augumented user 27872 7/50 current_auc = 0.16666666666666669
User 27872 AUC after training: 0.16666666666666669
User 27872 does not improve AUC. Reverting changes.
Training on augumented user 106861 8/50 current_auc = 0.16666666666666669
User 106861 AUC after training: 0.11111111111111112
User 106861 does not improve AUC. Reverting changes.
Training on augumented user 110469 9/50 current_auc = 0.16666666666666669
User 110469 AUC after training: 0.16666666666666669
User 110469 does not improve AUC. Reverting changes.
Training on augumented user 25935 10/50 current_auc = 0.16666666666666669
User 25935 AUC after training: 0.16666666666666669
User 25935 does not improve AUC. Reverting changes.
Training on augumented user 72174 11/50 current_auc = 0.16666666666666669
User 72174 AUC after training: 0.16666666666666669
User 72174 does not improve AUC. Reverting changes.
Training on augumented user 7888 12/50 current_auc = 0.16666666666666669
User 7888 AUC after training: 0.16666666666666669
User 7888 does not improve AUC. Reverting changes.
Training on augumented user 118172 13/50 current_auc = 0.16666666666666669
User 118172 AUC after training: 0.16666666666666669
User 118172 does not improve AUC. Reverting changes.
Training on augumented user 37344 14/50 current_auc = 0.16666666666666669
User 37344 AUC after training: 0.16666666666666669
User 37344 does not improve AUC. Reverting changes.
Training on augumented user 424 15/50 current_auc = 0.16666666666666669
User 424 AUC after training: 0.16666666666666669
User 424 does not improve AUC. Reverting changes.
Training on augumented user 124817 16/50 current_auc = 0.16666666666666669
User 124817 AUC after training: 0.16666666666666669
User 124817 does not improve AUC. Reverting changes.
Training on augumented user 29923 17/50 current_auc = 0.16666666666666669
User 29923 AUC after training: 0.16666666666666669
User 29923 does not improve AUC. Reverting changes.
Training on augumented user 101315 18/50 current_auc = 0.16666666666666669
User 101315 AUC after training: 0.16666666666666669
User 101315 does not improve AUC. Reverting changes.
Training on augumented user 116606 19/50 current_auc = 0.16666666666666669
User 116606 AUC after training: 0.16666666666666669
User 116606 does not improve AUC. Reverting changes.
Training on augumented user 127617 20/50 current_auc = 0.16666666666666669
User 127617 AUC after training: 0.16666666666666669
User 127617 does not improve AUC. Reverting changes.
Training on augumented user 62359 21/50 current_auc = 0.16666666666666669
User 62359 AUC after training: 0.16666666666666669
User 62359 does not improve AUC. Reverting changes.
Training on augumented user 115839 22/50 current_auc = 0.16666666666666669
User 115839 AUC after training: 0.16666666666666669
User 115839 does not improve AUC. Reverting changes.
Training on augumented user 18840 23/50 current_auc = 0.16666666666666669
User 18840 AUC after training: 0.16666666666666669
User 18840 does not improve AUC. Reverting changes.
Training on augumented user 44884 24/50 current_auc = 0.16666666666666669
User 44884 AUC after training: 0.16666666666666669
User 44884 does not improve AUC. Reverting changes.
Training on augumented user 56430 25/50 current_auc = 0.16666666666666669
User 56430 AUC after training: 0.16666666666666669
User 56430 does not improve AUC. Reverting changes.
Training on augumented user 38847 26/50 current_auc = 0.16666666666666669
User 38847 AUC after training: 0.16666666666666669
User 38847 does not improve AUC. Reverting changes.
Training on augumented user 106728 27/50 current_auc = 0.16666666666666669
User 106728 AUC after training: 0.16666666666666669
User 106728 does not improve AUC. Reverting changes.
Training on augumented user 98021 28/50 current_auc = 0.16666666666666669
User 98021 AUC after training: 0.16666666666666669
User 98021 does not improve AUC. Reverting changes.
Training on augumented user 43754 29/50 current_auc = 0.16666666666666669
User 43754 AUC after training: 0.16666666666666669
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 60194 30/50 current_auc = 0.16666666666666669
User 60194 AUC after training: 0.16666666666666669
User 60194 does not improve AUC. Reverting changes.
Training on augumented user 127019 31/50 current_auc = 0.16666666666666669
User 127019 AUC after training: 0.16666666666666669
User 127019 does not improve AUC. Reverting changes.
Training on augumented user 25561 32/50 current_auc = 0.16666666666666669
User 25561 AUC after training: 0.16666666666666669
User 25561 does not improve AUC. Reverting changes.
Training on augumented user 18030 33/50 current_auc = 0.16666666666666669
User 18030 AUC after training: 0.16666666666666669
User 18030 does not improve AUC. Reverting changes.
Training on augumented user 87571 34/50 current_auc = 0.16666666666666669
User 87571 AUC after training: 0.16666666666666669
User 87571 does not improve AUC. Reverting changes.
Training on augumented user 13120 35/50 current_auc = 0.16666666666666669
User 13120 AUC after training: 0.16666666666666669
User 13120 does not improve AUC. Reverting changes.
Training on augumented user 104979 36/50 current_auc = 0.16666666666666669
User 104979 AUC after training: 0.16666666666666669
User 104979 does not improve AUC. Reverting changes.
Training on augumented user 113777 37/50 current_auc = 0.16666666666666669
User 113777 AUC after training: 0.16666666666666669
User 113777 does not improve AUC. Reverting changes.
Training on augumented user 131325 38/50 current_auc = 0.16666666666666669
User 131325 AUC after training: 0.16666666666666669
User 131325 does not improve AUC. Reverting changes.
Training on augumented user 100313 39/50 current_auc = 0.16666666666666669
User 100313 AUC after training: 0.16666666666666669
User 100313 does not improve AUC. Reverting changes.
Training on augumented user 23350 40/50 current_auc = 0.16666666666666669
User 23350 AUC after training: 0.16666666666666669
User 23350 does not improve AUC. Reverting changes.
Training on augumented user 133399 41/50 current_auc = 0.16666666666666669
User 133399 AUC after training: 0.16666666666666669
User 133399 does not improve AUC. Reverting changes.
Training on augumented user 133510 42/50 current_auc = 0.16666666666666669
User 133510 AUC after training: 0.16666666666666669
User 133510 does not improve AUC. Reverting changes.
Training on augumented user 97212 43/50 current_auc = 0.16666666666666669
User 97212 AUC after training: 0.16666666666666669
User 97212 does not improve AUC. Reverting changes.
Training on augumented user 30583 44/50 current_auc = 0.16666666666666669
User 30583 AUC after training: 0.16666666666666669
User 30583 does not improve AUC. Reverting changes.
Training on augumented user 62129 45/50 current_auc = 0.16666666666666669
User 62129 AUC after training: 0.16666666666666669
User 62129 does not improve AUC. Reverting changes.
Training on augumented user 124392 46/50 current_auc = 0.16666666666666669
User 124392 AUC after training: 0.16666666666666669
User 124392 does not improve AUC. Reverting changes.
Training on augumented user 115048 47/50 current_auc = 0.16666666666666669
User 115048 AUC after training: 0.16666666666666669
User 115048 does not improve AUC. Reverting changes.
Training on augumented user 133814 48/50 current_auc = 0.16666666666666669
User 133814 AUC after training: 0.16666666666666669
User 133814 does not improve AUC. Reverting changes.
Training on augumented user 31494 49/50 current_auc = 0.16666666666666669
User 31494 AUC after training: 0.16666666666666669
User 31494 does not improve AUC. Reverting changes.
[2024-12-02 19:36:59.624093] start test user 129500 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:00.361391] start test user 129500 219/567 recall augumented users by random, augumented_users = [86185, 124337, 11949, 119048, 33001, 125494, 68264, 83899, 40867, 122326, 63344, 89194, 48162, 21704, 31824, 106086, 132778, 125979, 48714, 6073, 100598, 94972, 27085, 25726, 26531, 133887, 47860, 51962, 91515, 108532, 24609, 29333, 106396, 65597, 28080, 136853, 133367, 65528, 42005, 66101, 1960, 126757, 14531, 10382, 14614, 2711, 81676, 18747, 98647, 130435]
[2024-12-02 19:37:00.395899] user = 129500 Cloud 219/567
[2024-12-02 19:37:00.431537] user = 129500 Local 219/567
[2024-12-02 19:37:00.552862] user = 129500 Local+ 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:03.078776] user = 129500 MPDA- 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6388888888888888
Training on augumented user 86185 0/50 current_auc = 0.6388888888888888
User 86185 AUC after training: 0.6388888888888888
User 86185 does not improve AUC. Reverting changes.
Training on augumented user 124337 1/50 current_auc = 0.6388888888888888
User 124337 AUC after training: 0.6388888888888888
User 124337 does not improve AUC. Reverting changes.
Training on augumented user 11949 2/50 current_auc = 0.6388888888888888
User 11949 AUC after training: 0.6388888888888888
User 11949 does not improve AUC. Reverting changes.
Training on augumented user 119048 3/50 current_auc = 0.6388888888888888
User 119048 AUC after training: 0.6527777777777778
User 119048 improves AUC. Keeping the model.
Training on augumented user 33001 4/50 current_auc = 0.6527777777777778
User 33001 AUC after training: 0.6527777777777778
User 33001 does not improve AUC. Reverting changes.
Training on augumented user 125494 5/50 current_auc = 0.6527777777777778
User 125494 AUC after training: 0.6527777777777778
User 125494 does not improve AUC. Reverting changes.
Training on augumented user 68264 6/50 current_auc = 0.6527777777777778
User 68264 AUC after training: 0.6388888888888888
User 68264 does not improve AUC. Reverting changes.
Training on augumented user 83899 7/50 current_auc = 0.6527777777777778
User 83899 AUC after training: 0.6388888888888888
User 83899 does not improve AUC. Reverting changes.
Training on augumented user 40867 8/50 current_auc = 0.6527777777777778
User 40867 AUC after training: 0.6527777777777778
User 40867 does not improve AUC. Reverting changes.
Training on augumented user 122326 9/50 current_auc = 0.6527777777777778
User 122326 AUC after training: 0.6527777777777778
User 122326 does not improve AUC. Reverting changes.
Training on augumented user 63344 10/50 current_auc = 0.6527777777777778
User 63344 AUC after training: 0.6527777777777778
User 63344 does not improve AUC. Reverting changes.
Training on augumented user 89194 11/50 current_auc = 0.6527777777777778
User 89194 AUC after training: 0.6527777777777778
User 89194 does not improve AUC. Reverting changes.
Training on augumented user 48162 12/50 current_auc = 0.6527777777777778
User 48162 AUC after training: 0.6527777777777778
User 48162 does not improve AUC. Reverting changes.
Training on augumented user 21704 13/50 current_auc = 0.6527777777777778
User 21704 AUC after training: 0.6527777777777778
User 21704 does not improve AUC. Reverting changes.
Training on augumented user 31824 14/50 current_auc = 0.6527777777777778
User 31824 AUC after training: 0.6527777777777778
User 31824 does not improve AUC. Reverting changes.
Training on augumented user 106086 15/50 current_auc = 0.6527777777777778
User 106086 AUC after training: 0.6527777777777778
User 106086 does not improve AUC. Reverting changes.
Training on augumented user 132778 16/50 current_auc = 0.6527777777777778
User 132778 AUC after training: 0.6527777777777778
User 132778 does not improve AUC. Reverting changes.
Training on augumented user 125979 17/50 current_auc = 0.6527777777777778
User 125979 AUC after training: 0.6527777777777778
User 125979 does not improve AUC. Reverting changes.
Training on augumented user 48714 18/50 current_auc = 0.6527777777777778
User 48714 AUC after training: 0.6527777777777778
User 48714 does not improve AUC. Reverting changes.
Training on augumented user 6073 19/50 current_auc = 0.6527777777777778
User 6073 AUC after training: 0.6388888888888888
User 6073 does not improve AUC. Reverting changes.
Training on augumented user 100598 20/50 current_auc = 0.6527777777777778
User 100598 AUC after training: 0.6527777777777778
User 100598 does not improve AUC. Reverting changes.
Training on augumented user 94972 21/50 current_auc = 0.6527777777777778
User 94972 AUC after training: 0.6388888888888888
User 94972 does not improve AUC. Reverting changes.
Training on augumented user 27085 22/50 current_auc = 0.6527777777777778
User 27085 AUC after training: 0.6527777777777778
User 27085 does not improve AUC. Reverting changes.
Training on augumented user 25726 23/50 current_auc = 0.6527777777777778
User 25726 AUC after training: 0.6527777777777778
User 25726 does not improve AUC. Reverting changes.
Training on augumented user 26531 24/50 current_auc = 0.6527777777777778
User 26531 AUC after training: 0.6527777777777778
User 26531 does not improve AUC. Reverting changes.
Training on augumented user 133887 25/50 current_auc = 0.6527777777777778
User 133887 AUC after training: 0.6527777777777778
User 133887 does not improve AUC. Reverting changes.
Training on augumented user 47860 26/50 current_auc = 0.6527777777777778
User 47860 AUC after training: 0.6319444444444444
User 47860 does not improve AUC. Reverting changes.
Training on augumented user 51962 27/50 current_auc = 0.6527777777777778
User 51962 AUC after training: 0.6527777777777778
User 51962 does not improve AUC. Reverting changes.
Training on augumented user 91515 28/50 current_auc = 0.6527777777777778
User 91515 AUC after training: 0.6527777777777778
User 91515 does not improve AUC. Reverting changes.
Training on augumented user 108532 29/50 current_auc = 0.6527777777777778
User 108532 AUC after training: 0.6527777777777778
User 108532 does not improve AUC. Reverting changes.
Training on augumented user 24609 30/50 current_auc = 0.6527777777777778
User 24609 AUC after training: 0.6527777777777778
User 24609 does not improve AUC. Reverting changes.
Training on augumented user 29333 31/50 current_auc = 0.6527777777777778
User 29333 AUC after training: 0.6180555555555556
User 29333 does not improve AUC. Reverting changes.
Training on augumented user 106396 32/50 current_auc = 0.6527777777777778
User 106396 AUC after training: 0.6388888888888888
User 106396 does not improve AUC. Reverting changes.
Training on augumented user 65597 33/50 current_auc = 0.6527777777777778
User 65597 AUC after training: 0.6527777777777778
User 65597 does not improve AUC. Reverting changes.
Training on augumented user 28080 34/50 current_auc = 0.6527777777777778
User 28080 AUC after training: 0.6527777777777778
User 28080 does not improve AUC. Reverting changes.
Training on augumented user 136853 35/50 current_auc = 0.6527777777777778
User 136853 AUC after training: 0.6527777777777778
User 136853 does not improve AUC. Reverting changes.
Training on augumented user 133367 36/50 current_auc = 0.6527777777777778
User 133367 AUC after training: 0.6527777777777778
User 133367 does not improve AUC. Reverting changes.
Training on augumented user 65528 37/50 current_auc = 0.6527777777777778
User 65528 AUC after training: 0.6527777777777778
User 65528 does not improve AUC. Reverting changes.
Training on augumented user 42005 38/50 current_auc = 0.6527777777777778
User 42005 AUC after training: 0.6527777777777778
User 42005 does not improve AUC. Reverting changes.
Training on augumented user 66101 39/50 current_auc = 0.6527777777777778
User 66101 AUC after training: 0.6527777777777778
User 66101 does not improve AUC. Reverting changes.
Training on augumented user 1960 40/50 current_auc = 0.6527777777777778
User 1960 AUC after training: 0.6527777777777778
User 1960 does not improve AUC. Reverting changes.
Training on augumented user 126757 41/50 current_auc = 0.6527777777777778
User 126757 AUC after training: 0.6527777777777778
User 126757 does not improve AUC. Reverting changes.
Training on augumented user 14531 42/50 current_auc = 0.6527777777777778
User 14531 AUC after training: 0.6388888888888888
User 14531 does not improve AUC. Reverting changes.
Training on augumented user 10382 43/50 current_auc = 0.6527777777777778
User 10382 AUC after training: 0.6527777777777778
User 10382 does not improve AUC. Reverting changes.
Training on augumented user 14614 44/50 current_auc = 0.6527777777777778
User 14614 AUC after training: 0.6527777777777778
User 14614 does not improve AUC. Reverting changes.
Training on augumented user 2711 45/50 current_auc = 0.6527777777777778
User 2711 AUC after training: 0.6388888888888888
User 2711 does not improve AUC. Reverting changes.
Training on augumented user 81676 46/50 current_auc = 0.6527777777777778
User 81676 AUC after training: 0.6527777777777778
User 81676 does not improve AUC. Reverting changes.
Training on augumented user 18747 47/50 current_auc = 0.6527777777777778
User 18747 AUC after training: 0.6527777777777778
User 18747 does not improve AUC. Reverting changes.
Training on augumented user 98647 48/50 current_auc = 0.6527777777777778
User 98647 AUC after training: 0.6527777777777778
User 98647 does not improve AUC. Reverting changes.
Training on augumented user 130435 49/50 current_auc = 0.6527777777777778
User 130435 AUC after training: 0.6388888888888888
User 130435 does not improve AUC. Reverting changes.
[2024-12-02 19:37:36.822267] start test user 129548 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:37.532877] start test user 129548 220/567 recall augumented users by random, augumented_users = [79053, 27064, 10446, 82496, 38239, 52742, 54385, 1909, 64028, 7056, 40419, 48283, 64677, 39829, 59329, 102799, 58991, 78418, 106681, 118104, 1564, 112181, 75972, 7534, 9606, 27749, 44513, 19661, 124690, 125194, 88181, 34043, 80107, 104859, 110482, 49307, 116848, 117970, 95174, 111478, 129856, 76995, 27811, 29439, 6987, 109786, 69779, 99873, 121064, 54259]
[2024-12-02 19:37:37.549954] user = 129548 Cloud 220/567
[2024-12-02 19:37:37.604462] user = 129548 Local 220/567
[2024-12-02 19:37:37.734411] user = 129548 Local+ 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:40.829518] user = 129548 MPDA- 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3960863697705803
Training on augumented user 79053 0/50 current_auc = 0.3960863697705803
User 79053 AUC after training: 0.3974358974358974
User 79053 improves AUC. Keeping the model.
Training on augumented user 27064 1/50 current_auc = 0.3974358974358974
User 27064 AUC after training: 0.39878542510121456
User 27064 improves AUC. Keeping the model.
Training on augumented user 10446 2/50 current_auc = 0.39878542510121456
User 10446 AUC after training: 0.40553306342780027
User 10446 improves AUC. Keeping the model.
Training on augumented user 82496 3/50 current_auc = 0.40553306342780027
User 82496 AUC after training: 0.40553306342780027
User 82496 does not improve AUC. Reverting changes.
Training on augumented user 38239 4/50 current_auc = 0.40553306342780027
User 38239 AUC after training: 0.40553306342780027
User 38239 does not improve AUC. Reverting changes.
Training on augumented user 52742 5/50 current_auc = 0.40553306342780027
User 52742 AUC after training: 0.402834008097166
User 52742 does not improve AUC. Reverting changes.
Training on augumented user 54385 6/50 current_auc = 0.40553306342780027
User 54385 AUC after training: 0.4041835357624831
User 54385 does not improve AUC. Reverting changes.
Training on augumented user 1909 7/50 current_auc = 0.40553306342780027
User 1909 AUC after training: 0.402834008097166
User 1909 does not improve AUC. Reverting changes.
Training on augumented user 64028 8/50 current_auc = 0.40553306342780027
User 64028 AUC after training: 0.40418353576248317
User 64028 does not improve AUC. Reverting changes.
Training on augumented user 7056 9/50 current_auc = 0.40553306342780027
User 7056 AUC after training: 0.402834008097166
User 7056 does not improve AUC. Reverting changes.
Training on augumented user 40419 10/50 current_auc = 0.40553306342780027
User 40419 AUC after training: 0.4082321187584346
User 40419 improves AUC. Keeping the model.
Training on augumented user 48283 11/50 current_auc = 0.4082321187584346
User 48283 AUC after training: 0.4068825910931175
User 48283 does not improve AUC. Reverting changes.
Training on augumented user 64677 12/50 current_auc = 0.4082321187584346
User 64677 AUC after training: 0.4116059379217274
User 64677 improves AUC. Keeping the model.
Training on augumented user 39829 13/50 current_auc = 0.4116059379217274
User 39829 AUC after training: 0.4116059379217274
User 39829 does not improve AUC. Reverting changes.
Training on augumented user 59329 14/50 current_auc = 0.4116059379217274
User 59329 AUC after training: 0.41295546558704455
User 59329 improves AUC. Keeping the model.
Training on augumented user 102799 15/50 current_auc = 0.41295546558704455
User 102799 AUC after training: 0.4116059379217274
User 102799 does not improve AUC. Reverting changes.
Training on augumented user 58991 16/50 current_auc = 0.41295546558704455
User 58991 AUC after training: 0.41295546558704455
User 58991 does not improve AUC. Reverting changes.
Training on augumented user 78418 17/50 current_auc = 0.41295546558704455
User 78418 AUC after training: 0.41025641025641024
User 78418 does not improve AUC. Reverting changes.
Training on augumented user 106681 18/50 current_auc = 0.41295546558704455
User 106681 AUC after training: 0.41025641025641024
User 106681 does not improve AUC. Reverting changes.
Training on augumented user 118104 19/50 current_auc = 0.41295546558704455
User 118104 AUC after training: 0.41295546558704455
User 118104 does not improve AUC. Reverting changes.
Training on augumented user 1564 20/50 current_auc = 0.41295546558704455
User 1564 AUC after training: 0.4116059379217274
User 1564 does not improve AUC. Reverting changes.
Training on augumented user 112181 21/50 current_auc = 0.41295546558704455
User 112181 AUC after training: 0.4143049932523617
User 112181 improves AUC. Keeping the model.
Training on augumented user 75972 22/50 current_auc = 0.4143049932523617
User 75972 AUC after training: 0.393387314439946
User 75972 does not improve AUC. Reverting changes.
Training on augumented user 7534 23/50 current_auc = 0.4143049932523617
User 7534 AUC after training: 0.41025641025641024
User 7534 does not improve AUC. Reverting changes.
Training on augumented user 9606 24/50 current_auc = 0.4143049932523617
User 9606 AUC after training: 0.41025641025641024
User 9606 does not improve AUC. Reverting changes.
Training on augumented user 27749 25/50 current_auc = 0.4143049932523617
User 27749 AUC after training: 0.417004048582996
User 27749 improves AUC. Keeping the model.
Training on augumented user 44513 26/50 current_auc = 0.417004048582996
User 44513 AUC after training: 0.42105263157894735
User 44513 improves AUC. Keeping the model.
Training on augumented user 19661 27/50 current_auc = 0.42105263157894735
User 19661 AUC after training: 0.42105263157894735
User 19661 does not improve AUC. Reverting changes.
Training on augumented user 124690 28/50 current_auc = 0.42105263157894735
User 124690 AUC after training: 0.4143049932523617
User 124690 does not improve AUC. Reverting changes.
Training on augumented user 125194 29/50 current_auc = 0.42105263157894735
User 125194 AUC after training: 0.4197031039136302
User 125194 does not improve AUC. Reverting changes.
Training on augumented user 88181 30/50 current_auc = 0.42105263157894735
User 88181 AUC after training: 0.4116059379217274
User 88181 does not improve AUC. Reverting changes.
Training on augumented user 34043 31/50 current_auc = 0.42105263157894735
User 34043 AUC after training: 0.417004048582996
User 34043 does not improve AUC. Reverting changes.
Training on augumented user 80107 32/50 current_auc = 0.42105263157894735
User 80107 AUC after training: 0.417004048582996
User 80107 does not improve AUC. Reverting changes.
Training on augumented user 104859 33/50 current_auc = 0.42105263157894735
User 104859 AUC after training: 0.417004048582996
User 104859 does not improve AUC. Reverting changes.
Training on augumented user 110482 34/50 current_auc = 0.42105263157894735
User 110482 AUC after training: 0.4224021592442645
User 110482 improves AUC. Keeping the model.
Training on augumented user 49307 35/50 current_auc = 0.4224021592442645
User 49307 AUC after training: 0.41835357624831315
User 49307 does not improve AUC. Reverting changes.
Training on augumented user 116848 36/50 current_auc = 0.4224021592442645
User 116848 AUC after training: 0.4183535762483131
User 116848 does not improve AUC. Reverting changes.
Training on augumented user 117970 37/50 current_auc = 0.4224021592442645
User 117970 AUC after training: 0.42375168690958165
User 117970 improves AUC. Keeping the model.
Training on augumented user 95174 38/50 current_auc = 0.42375168690958165
User 95174 AUC after training: 0.42375168690958165
User 95174 does not improve AUC. Reverting changes.
Training on augumented user 111478 39/50 current_auc = 0.42375168690958165
User 111478 AUC after training: 0.4224021592442645
User 111478 does not improve AUC. Reverting changes.
Training on augumented user 129856 40/50 current_auc = 0.42375168690958165
User 129856 AUC after training: 0.42375168690958165
User 129856 does not improve AUC. Reverting changes.
Training on augumented user 76995 41/50 current_auc = 0.42375168690958165
User 76995 AUC after training: 0.42375168690958165
User 76995 does not improve AUC. Reverting changes.
Training on augumented user 27811 42/50 current_auc = 0.42375168690958165
User 27811 AUC after training: 0.42645074224021595
User 27811 improves AUC. Keeping the model.
Training on augumented user 29439 43/50 current_auc = 0.42645074224021595
User 29439 AUC after training: 0.42645074224021595
User 29439 does not improve AUC. Reverting changes.
Training on augumented user 6987 44/50 current_auc = 0.42645074224021595
User 6987 AUC after training: 0.4224021592442645
User 6987 does not improve AUC. Reverting changes.
Training on augumented user 109786 45/50 current_auc = 0.42645074224021595
User 109786 AUC after training: 0.4251012145748988
User 109786 does not improve AUC. Reverting changes.
Training on augumented user 69779 46/50 current_auc = 0.42645074224021595
User 69779 AUC after training: 0.42375168690958165
User 69779 does not improve AUC. Reverting changes.
Training on augumented user 99873 47/50 current_auc = 0.42645074224021595
User 99873 AUC after training: 0.42645074224021595
User 99873 does not improve AUC. Reverting changes.
Training on augumented user 121064 48/50 current_auc = 0.42645074224021595
User 121064 AUC after training: 0.4251012145748988
User 121064 does not improve AUC. Reverting changes.
Training on augumented user 54259 49/50 current_auc = 0.42645074224021595
User 54259 AUC after training: 0.42375168690958165
User 54259 does not improve AUC. Reverting changes.
[2024-12-02 19:38:07.090684] start test user 129583 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:07.624344] start test user 129583 221/567 recall augumented users by random, augumented_users = [108625, 11445, 17391, 75041, 58177, 92989, 119323, 124778, 131859, 11323, 45997, 44363, 70168, 1843, 117712, 108409, 88103, 29149, 80662, 44283, 106504, 92062, 66189, 30514, 109986, 16662, 51913, 5424, 42187, 991, 120131, 20483, 89021, 12423, 74027, 17318, 98940, 28747, 77930, 129719, 67815, 112036, 68221, 49065, 52458, 9521, 18549, 55558, 11020, 33258]
[2024-12-02 19:38:07.664446] user = 129583 Cloud 221/567
[2024-12-02 19:38:07.724788] user = 129583 Local 221/567
[2024-12-02 19:38:08.060252] user = 129583 Local+ 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:10.583957] user = 129583 MPDA- 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5252078528947688
Training on augumented user 108625 0/50 current_auc = 0.5252078528947688
User 108625 AUC after training: 0.5251547517902658
User 108625 does not improve AUC. Reverting changes.
Training on augumented user 11445 1/50 current_auc = 0.5252078528947688
User 11445 AUC after training: 0.5256857628352956
User 11445 improves AUC. Keeping the model.
Training on augumented user 17391 2/50 current_auc = 0.5256857628352956
User 17391 AUC after training: 0.5273318970748877
User 17391 improves AUC. Keeping the model.
Training on augumented user 75041 3/50 current_auc = 0.5273318970748877
User 75041 AUC after training: 0.52762774608569
User 75041 improves AUC. Keeping the model.
Training on augumented user 58177 4/50 current_auc = 0.52762774608569
User 58177 AUC after training: 0.5276353319577619
User 58177 improves AUC. Keeping the model.
Training on augumented user 92989 5/50 current_auc = 0.5276353319577619
User 92989 AUC after training: 0.5276277460856901
User 92989 does not improve AUC. Reverting changes.
Training on augumented user 119323 6/50 current_auc = 0.5276353319577619
User 119323 AUC after training: 0.528249787595582
User 119323 improves AUC. Keeping the model.
Training on augumented user 124778 7/50 current_auc = 0.528249787595582
User 124778 AUC after training: 0.5279615244568516
User 124778 does not improve AUC. Reverting changes.
Training on augumented user 131859 8/50 current_auc = 0.528249787595582
User 131859 AUC after training: 0.5288338997451147
User 131859 improves AUC. Keeping the model.
Training on augumented user 11323 9/50 current_auc = 0.5288338997451147
User 11323 AUC after training: 0.5294104260225755
User 11323 improves AUC. Keeping the model.
Training on augumented user 45997 10/50 current_auc = 0.5294104260225755
User 45997 AUC after training: 0.5290463041631266
User 45997 does not improve AUC. Reverting changes.
Training on augumented user 44363 11/50 current_auc = 0.5294104260225755
User 44363 AUC after training: 0.5291145770117732
User 44363 does not improve AUC. Reverting changes.
Training on augumented user 70168 12/50 current_auc = 0.5294104260225755
User 70168 AUC after training: 0.5296455880568031
User 70168 improves AUC. Keeping the model.
Training on augumented user 1843 13/50 current_auc = 0.5296455880568031
User 1843 AUC after training: 0.5297290326495934
User 1843 improves AUC. Keeping the model.
Training on augumented user 117712 14/50 current_auc = 0.5297290326495934
User 117712 AUC after training: 0.5296835174171624
User 117712 does not improve AUC. Reverting changes.
Training on augumented user 108409 15/50 current_auc = 0.5297290326495934
User 108409 AUC after training: 0.529854199538779
User 108409 improves AUC. Keeping the model.
Training on augumented user 88103 16/50 current_auc = 0.529854199538779
User 88103 AUC after training: 0.5297366185216652
User 88103 does not improve AUC. Reverting changes.
Training on augumented user 29149 17/50 current_auc = 0.529854199538779
User 29149 AUC after training: 0.5288414856171865
User 29149 does not improve AUC. Reverting changes.
Training on augumented user 80662 18/50 current_auc = 0.529854199538779
User 80662 AUC after training: 0.5294293907027552
User 80662 does not improve AUC. Reverting changes.
Training on augumented user 44283 19/50 current_auc = 0.529854199538779
User 44283 AUC after training: 0.5294559412550067
User 44283 does not improve AUC. Reverting changes.
Training on augumented user 106504 20/50 current_auc = 0.529854199538779
User 106504 AUC after training: 0.5297897196261682
User 106504 does not improve AUC. Reverting changes.
Training on augumented user 92062 21/50 current_auc = 0.529854199538779
User 92062 AUC after training: 0.5294749059351863
User 92062 does not improve AUC. Reverting changes.
Training on augumented user 66189 22/50 current_auc = 0.529854199538779
User 66189 AUC after training: 0.5297745478820246
User 66189 does not improve AUC. Reverting changes.
Training on augumented user 30514 23/50 current_auc = 0.529854199538779
User 30514 AUC after training: 0.5295166282315815
User 30514 does not improve AUC. Reverting changes.
Training on augumented user 109986 24/50 current_auc = 0.529854199538779
User 109986 AUC after training: 0.5293118096856415
User 109986 does not improve AUC. Reverting changes.
Training on augumented user 16662 25/50 current_auc = 0.529854199538779
User 16662 AUC after training: 0.5296152445685156
User 16662 does not improve AUC. Reverting changes.
Training on augumented user 51913 26/50 current_auc = 0.529854199538779
User 51913 AUC after training: 0.5301841849739046
User 51913 improves AUC. Keeping the model.
Training on augumented user 5424 27/50 current_auc = 0.5301841849739046
User 5424 AUC after training: 0.5300552251486831
User 5424 does not improve AUC. Reverting changes.
Training on augumented user 42187 28/50 current_auc = 0.5301841849739046
User 42187 AUC after training: 0.5302145284621921
User 42187 improves AUC. Keeping the model.
Training on augumented user 991 29/50 current_auc = 0.5302145284621921
User 991 AUC after training: 0.5301538414856172
User 991 does not improve AUC. Reverting changes.
Training on augumented user 120131 30/50 current_auc = 0.5302145284621921
User 120131 AUC after training: 0.5299566088117491
User 120131 does not improve AUC. Reverting changes.
Training on augumented user 20483 31/50 current_auc = 0.5302145284621921
User 20483 AUC after training: 0.5306241655540721
User 20483 improves AUC. Keeping the model.
Training on augumented user 89021 32/50 current_auc = 0.5306241655540721
User 89021 AUC after training: 0.5294407695108629
User 89021 does not improve AUC. Reverting changes.
Training on augumented user 12423 33/50 current_auc = 0.5306241655540721
User 12423 AUC after training: 0.5303890035198446
User 12423 does not improve AUC. Reverting changes.
Training on augumented user 74027 34/50 current_auc = 0.5306241655540721
User 74027 AUC after training: 0.529857992474815
User 74027 does not improve AUC. Reverting changes.
Training on augumented user 17318 35/50 current_auc = 0.5306241655540721
User 17318 AUC after training: 0.5304041752639883
User 17318 does not improve AUC. Reverting changes.
Training on augumented user 98940 36/50 current_auc = 0.5306241655540721
User 98940 AUC after training: 0.5304269328802039
User 98940 does not improve AUC. Reverting changes.
Training on augumented user 28747 37/50 current_auc = 0.5306241655540721
User 28747 AUC after training: 0.5303814176477728
User 28747 does not improve AUC. Reverting changes.
Training on augumented user 77930 38/50 current_auc = 0.5306241655540721
User 77930 AUC after training: 0.5291904357324918
User 77930 does not improve AUC. Reverting changes.
Training on augumented user 129719 39/50 current_auc = 0.5306241655540721
User 129719 AUC after training: 0.5308669134603714
User 129719 improves AUC. Keeping the model.
Training on augumented user 67815 40/50 current_auc = 0.5308669134603714
User 67815 AUC after training: 0.5311779342153173
User 67815 improves AUC. Keeping the model.
Training on augumented user 112036 41/50 current_auc = 0.5311779342153173
User 112036 AUC after training: 0.5311437977909941
User 112036 does not improve AUC. Reverting changes.
Training on augumented user 68221 42/50 current_auc = 0.5311779342153173
User 68221 AUC after training: 0.5301045333171501
User 68221 does not improve AUC. Reverting changes.
Training on augumented user 49065 43/50 current_auc = 0.5311779342153173
User 49065 AUC after training: 0.5307758829955092
User 49065 does not improve AUC. Reverting changes.
Training on augumented user 52458 44/50 current_auc = 0.5311779342153173
User 52458 AUC after training: 0.5309807015414493
User 52458 does not improve AUC. Reverting changes.
Training on augumented user 9521 45/50 current_auc = 0.5311779342153173
User 9521 AUC after training: 0.5292738803252821
User 9521 does not improve AUC. Reverting changes.
Training on augumented user 18549 46/50 current_auc = 0.5311779342153173
User 18549 AUC after training: 0.5310300097099163
User 18549 does not improve AUC. Reverting changes.
Training on augumented user 55558 47/50 current_auc = 0.5311779342153173
User 55558 AUC after training: 0.5310793178783833
User 55558 does not improve AUC. Reverting changes.
Training on augumented user 11020 48/50 current_auc = 0.5311779342153173
User 11020 AUC after training: 0.5306165796820003
User 11020 does not improve AUC. Reverting changes.
Training on augumented user 33258 49/50 current_auc = 0.5311779342153173
User 33258 AUC after training: 0.5298807500910305
User 33258 does not improve AUC. Reverting changes.
[2024-12-02 19:38:35.960829] start test user 129584 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:36.712277] start test user 129584 222/567 recall augumented users by random, augumented_users = [4694, 64093, 16225, 124627, 122413, 31766, 117575, 66457, 38681, 42204, 35896, 40551, 121630, 81708, 29137, 38178, 137216, 292, 115117, 11284, 71505, 114435, 130903, 127633, 116862, 86146, 103874, 25293, 27051, 20098, 21005, 19556, 69735, 104687, 22201, 30944, 68241, 45356, 93020, 89763, 114956, 115335, 90940, 55617, 114518, 95724, 90522, 117409, 57449, 107834]
[2024-12-02 19:38:36.757956] user = 129584 Cloud 222/567
[2024-12-02 19:38:36.793142] user = 129584 Local 222/567
[2024-12-02 19:38:36.895097] user = 129584 Local+ 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:40.237193] user = 129584 MPDA- 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6422413793103449
Training on augumented user 4694 0/50 current_auc = 0.6422413793103449
User 4694 AUC after training: 0.6422413793103449
User 4694 does not improve AUC. Reverting changes.
Training on augumented user 64093 1/50 current_auc = 0.6422413793103449
User 64093 AUC after training: 0.6400862068965517
User 64093 does not improve AUC. Reverting changes.
Training on augumented user 16225 2/50 current_auc = 0.6422413793103449
User 16225 AUC after training: 0.6400862068965517
User 16225 does not improve AUC. Reverting changes.
Training on augumented user 124627 3/50 current_auc = 0.6422413793103449
User 124627 AUC after training: 0.6422413793103449
User 124627 does not improve AUC. Reverting changes.
Training on augumented user 122413 4/50 current_auc = 0.6422413793103449
User 122413 AUC after training: 0.6422413793103449
User 122413 does not improve AUC. Reverting changes.
Training on augumented user 31766 5/50 current_auc = 0.6422413793103449
User 31766 AUC after training: 0.6379310344827587
User 31766 does not improve AUC. Reverting changes.
Training on augumented user 117575 6/50 current_auc = 0.6422413793103449
User 117575 AUC after training: 0.6422413793103449
User 117575 does not improve AUC. Reverting changes.
Training on augumented user 66457 7/50 current_auc = 0.6422413793103449
User 66457 AUC after training: 0.6379310344827587
User 66457 does not improve AUC. Reverting changes.
Training on augumented user 38681 8/50 current_auc = 0.6422413793103449
User 38681 AUC after training: 0.646551724137931
User 38681 improves AUC. Keeping the model.
Training on augumented user 42204 9/50 current_auc = 0.646551724137931
User 42204 AUC after training: 0.6357758620689655
User 42204 does not improve AUC. Reverting changes.
Training on augumented user 35896 10/50 current_auc = 0.646551724137931
User 35896 AUC after training: 0.646551724137931
User 35896 does not improve AUC. Reverting changes.
Training on augumented user 40551 11/50 current_auc = 0.646551724137931
User 40551 AUC after training: 0.6422413793103449
User 40551 does not improve AUC. Reverting changes.
Training on augumented user 121630 12/50 current_auc = 0.646551724137931
User 121630 AUC after training: 0.6573275862068966
User 121630 improves AUC. Keeping the model.
Training on augumented user 81708 13/50 current_auc = 0.6573275862068966
User 81708 AUC after training: 0.6530172413793104
User 81708 does not improve AUC. Reverting changes.
Training on augumented user 29137 14/50 current_auc = 0.6573275862068966
User 29137 AUC after training: 0.6508620689655172
User 29137 does not improve AUC. Reverting changes.
Training on augumented user 38178 15/50 current_auc = 0.6573275862068966
User 38178 AUC after training: 0.6508620689655172
User 38178 does not improve AUC. Reverting changes.
Training on augumented user 137216 16/50 current_auc = 0.6573275862068966
User 137216 AUC after training: 0.6508620689655172
User 137216 does not improve AUC. Reverting changes.
Training on augumented user 292 17/50 current_auc = 0.6573275862068966
User 292 AUC after training: 0.6551724137931034
User 292 does not improve AUC. Reverting changes.
Training on augumented user 115117 18/50 current_auc = 0.6573275862068966
User 115117 AUC after training: 0.6530172413793104
User 115117 does not improve AUC. Reverting changes.
Training on augumented user 11284 19/50 current_auc = 0.6573275862068966
User 11284 AUC after training: 0.6573275862068966
User 11284 does not improve AUC. Reverting changes.
Training on augumented user 71505 20/50 current_auc = 0.6573275862068966
User 71505 AUC after training: 0.6551724137931034
User 71505 does not improve AUC. Reverting changes.
Training on augumented user 114435 21/50 current_auc = 0.6573275862068966
User 114435 AUC after training: 0.6573275862068966
User 114435 does not improve AUC. Reverting changes.
Training on augumented user 130903 22/50 current_auc = 0.6573275862068966
User 130903 AUC after training: 0.6508620689655172
User 130903 does not improve AUC. Reverting changes.
Training on augumented user 127633 23/50 current_auc = 0.6573275862068966
User 127633 AUC after training: 0.6594827586206896
User 127633 improves AUC. Keeping the model.
Training on augumented user 116862 24/50 current_auc = 0.6594827586206896
User 116862 AUC after training: 0.6573275862068966
User 116862 does not improve AUC. Reverting changes.
Training on augumented user 86146 25/50 current_auc = 0.6594827586206896
User 86146 AUC after training: 0.6594827586206896
User 86146 does not improve AUC. Reverting changes.
Training on augumented user 103874 26/50 current_auc = 0.6594827586206896
User 103874 AUC after training: 0.6530172413793104
User 103874 does not improve AUC. Reverting changes.
Training on augumented user 25293 27/50 current_auc = 0.6594827586206896
User 25293 AUC after training: 0.6530172413793104
User 25293 does not improve AUC. Reverting changes.
Training on augumented user 27051 28/50 current_auc = 0.6594827586206896
User 27051 AUC after training: 0.6551724137931034
User 27051 does not improve AUC. Reverting changes.
Training on augumented user 20098 29/50 current_auc = 0.6594827586206896
User 20098 AUC after training: 0.6551724137931034
User 20098 does not improve AUC. Reverting changes.
Training on augumented user 21005 30/50 current_auc = 0.6594827586206896
User 21005 AUC after training: 0.6594827586206896
User 21005 does not improve AUC. Reverting changes.
Training on augumented user 19556 31/50 current_auc = 0.6594827586206896
User 19556 AUC after training: 0.6508620689655172
User 19556 does not improve AUC. Reverting changes.
Training on augumented user 69735 32/50 current_auc = 0.6594827586206896
User 69735 AUC after training: 0.6487068965517241
User 69735 does not improve AUC. Reverting changes.
Training on augumented user 104687 33/50 current_auc = 0.6594827586206896
User 104687 AUC after training: 0.6530172413793104
User 104687 does not improve AUC. Reverting changes.
Training on augumented user 22201 34/50 current_auc = 0.6594827586206896
User 22201 AUC after training: 0.6551724137931034
User 22201 does not improve AUC. Reverting changes.
Training on augumented user 30944 35/50 current_auc = 0.6594827586206896
User 30944 AUC after training: 0.6530172413793103
User 30944 does not improve AUC. Reverting changes.
Training on augumented user 68241 36/50 current_auc = 0.6594827586206896
User 68241 AUC after training: 0.6551724137931034
User 68241 does not improve AUC. Reverting changes.
Training on augumented user 45356 37/50 current_auc = 0.6594827586206896
User 45356 AUC after training: 0.6530172413793104
User 45356 does not improve AUC. Reverting changes.
Training on augumented user 93020 38/50 current_auc = 0.6594827586206896
User 93020 AUC after training: 0.6594827586206896
User 93020 does not improve AUC. Reverting changes.
Training on augumented user 89763 39/50 current_auc = 0.6594827586206896
User 89763 AUC after training: 0.6551724137931034
User 89763 does not improve AUC. Reverting changes.
Training on augumented user 114956 40/50 current_auc = 0.6594827586206896
User 114956 AUC after training: 0.6573275862068966
User 114956 does not improve AUC. Reverting changes.
Training on augumented user 115335 41/50 current_auc = 0.6594827586206896
User 115335 AUC after training: 0.6573275862068966
User 115335 does not improve AUC. Reverting changes.
Training on augumented user 90940 42/50 current_auc = 0.6594827586206896
User 90940 AUC after training: 0.6530172413793103
User 90940 does not improve AUC. Reverting changes.
Training on augumented user 55617 43/50 current_auc = 0.6594827586206896
User 55617 AUC after training: 0.6508620689655172
User 55617 does not improve AUC. Reverting changes.
Training on augumented user 114518 44/50 current_auc = 0.6594827586206896
User 114518 AUC after training: 0.6530172413793104
User 114518 does not improve AUC. Reverting changes.
Training on augumented user 95724 45/50 current_auc = 0.6594827586206896
User 95724 AUC after training: 0.6551724137931034
User 95724 does not improve AUC. Reverting changes.
Training on augumented user 90522 46/50 current_auc = 0.6594827586206896
User 90522 AUC after training: 0.6551724137931034
User 90522 does not improve AUC. Reverting changes.
Training on augumented user 117409 47/50 current_auc = 0.6594827586206896
User 117409 AUC after training: 0.6573275862068966
User 117409 does not improve AUC. Reverting changes.
Training on augumented user 57449 48/50 current_auc = 0.6594827586206896
User 57449 AUC after training: 0.6573275862068966
User 57449 does not improve AUC. Reverting changes.
Training on augumented user 107834 49/50 current_auc = 0.6594827586206896
User 107834 AUC after training: 0.6530172413793104
User 107834 does not improve AUC. Reverting changes.
[2024-12-02 19:39:09.156125] start test user 129605 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:09.941054] start test user 129605 223/567 recall augumented users by random, augumented_users = [3279, 100470, 126525, 108374, 81301, 127650, 3127, 97389, 7937, 71616, 101911, 26642, 75280, 128203, 132409, 101777, 107010, 112939, 68827, 118799, 137460, 54751, 25506, 103033, 113921, 17771, 131382, 6550, 76646, 35725, 69257, 121713, 10545, 39328, 107420, 66735, 36390, 61360, 106694, 62496, 1078, 30947, 107713, 137398, 132840, 46973, 102829, 135713, 123716, 72876]
[2024-12-02 19:39:09.957134] user = 129605 Cloud 223/567
[2024-12-02 19:39:09.981920] user = 129605 Local 223/567
[2024-12-02 19:39:10.039747] user = 129605 Local+ 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:12.137832] user = 129605 MPDA- 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4890909090909091
Training on augumented user 3279 0/50 current_auc = 0.4890909090909091
User 3279 AUC after training: 0.4890909090909091
User 3279 does not improve AUC. Reverting changes.
Training on augumented user 100470 1/50 current_auc = 0.4890909090909091
User 100470 AUC after training: 0.4890909090909091
User 100470 does not improve AUC. Reverting changes.
Training on augumented user 126525 2/50 current_auc = 0.4890909090909091
User 126525 AUC after training: 0.48909090909090913
User 126525 improves AUC. Keeping the model.
Training on augumented user 108374 3/50 current_auc = 0.48909090909090913
User 108374 AUC after training: 0.4872727272727273
User 108374 does not improve AUC. Reverting changes.
Training on augumented user 81301 4/50 current_auc = 0.48909090909090913
User 81301 AUC after training: 0.4890909090909091
User 81301 does not improve AUC. Reverting changes.
Training on augumented user 127650 5/50 current_auc = 0.48909090909090913
User 127650 AUC after training: 0.4909090909090909
User 127650 improves AUC. Keeping the model.
Training on augumented user 3127 6/50 current_auc = 0.4909090909090909
User 3127 AUC after training: 0.4927272727272727
User 3127 improves AUC. Keeping the model.
Training on augumented user 97389 7/50 current_auc = 0.4927272727272727
User 97389 AUC after training: 0.4927272727272727
User 97389 does not improve AUC. Reverting changes.
Training on augumented user 7937 8/50 current_auc = 0.4927272727272727
User 7937 AUC after training: 0.48545454545454547
User 7937 does not improve AUC. Reverting changes.
Training on augumented user 71616 9/50 current_auc = 0.4927272727272727
User 71616 AUC after training: 0.4872727272727273
User 71616 does not improve AUC. Reverting changes.
Training on augumented user 101911 10/50 current_auc = 0.4927272727272727
User 101911 AUC after training: 0.4890909090909091
User 101911 does not improve AUC. Reverting changes.
Training on augumented user 26642 11/50 current_auc = 0.4927272727272727
User 26642 AUC after training: 0.4890909090909091
User 26642 does not improve AUC. Reverting changes.
Training on augumented user 75280 12/50 current_auc = 0.4927272727272727
User 75280 AUC after training: 0.4927272727272727
User 75280 does not improve AUC. Reverting changes.
Training on augumented user 128203 13/50 current_auc = 0.4927272727272727
User 128203 AUC after training: 0.48727272727272725
User 128203 does not improve AUC. Reverting changes.
Training on augumented user 132409 14/50 current_auc = 0.4927272727272727
User 132409 AUC after training: 0.49090909090909096
User 132409 does not improve AUC. Reverting changes.
Training on augumented user 101777 15/50 current_auc = 0.4927272727272727
User 101777 AUC after training: 0.4927272727272727
User 101777 does not improve AUC. Reverting changes.
Training on augumented user 107010 16/50 current_auc = 0.4927272727272727
User 107010 AUC after training: 0.49090909090909085
User 107010 does not improve AUC. Reverting changes.
Training on augumented user 112939 17/50 current_auc = 0.4927272727272727
User 112939 AUC after training: 0.4872727272727273
User 112939 does not improve AUC. Reverting changes.
Training on augumented user 68827 18/50 current_auc = 0.4927272727272727
User 68827 AUC after training: 0.4909090909090909
User 68827 does not improve AUC. Reverting changes.
Training on augumented user 118799 19/50 current_auc = 0.4927272727272727
User 118799 AUC after training: 0.48909090909090913
User 118799 does not improve AUC. Reverting changes.
Training on augumented user 137460 20/50 current_auc = 0.4927272727272727
User 137460 AUC after training: 0.4890909090909091
User 137460 does not improve AUC. Reverting changes.
Training on augumented user 54751 21/50 current_auc = 0.4927272727272727
User 54751 AUC after training: 0.4909090909090909
User 54751 does not improve AUC. Reverting changes.
Training on augumented user 25506 22/50 current_auc = 0.4927272727272727
User 25506 AUC after training: 0.4890909090909091
User 25506 does not improve AUC. Reverting changes.
Training on augumented user 103033 23/50 current_auc = 0.4927272727272727
User 103033 AUC after training: 0.4890909090909091
User 103033 does not improve AUC. Reverting changes.
Training on augumented user 113921 24/50 current_auc = 0.4927272727272727
User 113921 AUC after training: 0.4909090909090909
User 113921 does not improve AUC. Reverting changes.
Training on augumented user 17771 25/50 current_auc = 0.4927272727272727
User 17771 AUC after training: 0.4909090909090909
User 17771 does not improve AUC. Reverting changes.
Training on augumented user 131382 26/50 current_auc = 0.4927272727272727
User 131382 AUC after training: 0.48545454545454547
User 131382 does not improve AUC. Reverting changes.
Training on augumented user 6550 27/50 current_auc = 0.4927272727272727
User 6550 AUC after training: 0.4890909090909091
User 6550 does not improve AUC. Reverting changes.
Training on augumented user 76646 28/50 current_auc = 0.4927272727272727
User 76646 AUC after training: 0.48545454545454547
User 76646 does not improve AUC. Reverting changes.
Training on augumented user 35725 29/50 current_auc = 0.4927272727272727
User 35725 AUC after training: 0.48545454545454547
User 35725 does not improve AUC. Reverting changes.
Training on augumented user 69257 30/50 current_auc = 0.4927272727272727
User 69257 AUC after training: 0.4927272727272727
User 69257 does not improve AUC. Reverting changes.
Training on augumented user 121713 31/50 current_auc = 0.4927272727272727
User 121713 AUC after training: 0.48545454545454547
User 121713 does not improve AUC. Reverting changes.
Training on augumented user 10545 32/50 current_auc = 0.4927272727272727
User 10545 AUC after training: 0.4927272727272727
User 10545 does not improve AUC. Reverting changes.
Training on augumented user 39328 33/50 current_auc = 0.4927272727272727
User 39328 AUC after training: 0.4872727272727273
User 39328 does not improve AUC. Reverting changes.
Training on augumented user 107420 34/50 current_auc = 0.4927272727272727
User 107420 AUC after training: 0.4872727272727273
User 107420 does not improve AUC. Reverting changes.
Training on augumented user 66735 35/50 current_auc = 0.4927272727272727
User 66735 AUC after training: 0.4872727272727273
User 66735 does not improve AUC. Reverting changes.
Training on augumented user 36390 36/50 current_auc = 0.4927272727272727
User 36390 AUC after training: 0.49090909090909085
User 36390 does not improve AUC. Reverting changes.
Training on augumented user 61360 37/50 current_auc = 0.4927272727272727
User 61360 AUC after training: 0.4890909090909091
User 61360 does not improve AUC. Reverting changes.
Training on augumented user 106694 38/50 current_auc = 0.4927272727272727
User 106694 AUC after training: 0.4890909090909091
User 106694 does not improve AUC. Reverting changes.
Training on augumented user 62496 39/50 current_auc = 0.4927272727272727
User 62496 AUC after training: 0.4927272727272727
User 62496 does not improve AUC. Reverting changes.
Training on augumented user 1078 40/50 current_auc = 0.4927272727272727
User 1078 AUC after training: 0.4872727272727273
User 1078 does not improve AUC. Reverting changes.
Training on augumented user 30947 41/50 current_auc = 0.4927272727272727
User 30947 AUC after training: 0.49090909090909085
User 30947 does not improve AUC. Reverting changes.
Training on augumented user 107713 42/50 current_auc = 0.4927272727272727
User 107713 AUC after training: 0.4890909090909091
User 107713 does not improve AUC. Reverting changes.
Training on augumented user 137398 43/50 current_auc = 0.4927272727272727
User 137398 AUC after training: 0.4890909090909091
User 137398 does not improve AUC. Reverting changes.
Training on augumented user 132840 44/50 current_auc = 0.4927272727272727
User 132840 AUC after training: 0.4927272727272727
User 132840 does not improve AUC. Reverting changes.
Training on augumented user 46973 45/50 current_auc = 0.4927272727272727
User 46973 AUC after training: 0.48545454545454547
User 46973 does not improve AUC. Reverting changes.
Training on augumented user 102829 46/50 current_auc = 0.4927272727272727
User 102829 AUC after training: 0.49090909090909085
User 102829 does not improve AUC. Reverting changes.
Training on augumented user 135713 47/50 current_auc = 0.4927272727272727
User 135713 AUC after training: 0.48909090909090913
User 135713 does not improve AUC. Reverting changes.
Training on augumented user 123716 48/50 current_auc = 0.4927272727272727
User 123716 AUC after training: 0.49090909090909085
User 123716 does not improve AUC. Reverting changes.
Training on augumented user 72876 49/50 current_auc = 0.4927272727272727
User 72876 AUC after training: 0.4890909090909091
User 72876 does not improve AUC. Reverting changes.
[2024-12-02 19:39:43.033359] start test user 129607 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:43.946619] start test user 129607 224/567 recall augumented users by random, augumented_users = [129515, 17871, 70047, 123948, 7552, 123663, 5419, 43277, 28876, 29868, 68235, 87246, 43961, 85235, 108352, 105081, 91534, 983, 84212, 73800, 135537, 90543, 87326, 54786, 39674, 77618, 125110, 127676, 36666, 11105, 105048, 3039, 127851, 103361, 42024, 56181, 92537, 95678, 127581, 121242, 22333, 38551, 36099, 75931, 63774, 68959, 109745, 127726, 10014, 60693]
[2024-12-02 19:39:43.967810] user = 129607 Cloud 224/567
[2024-12-02 19:39:43.978373] user = 129607 Local 224/567
[2024-12-02 19:39:44.021165] user = 129607 Local+ 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:46.889461] user = 129607 MPDA- 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.725925925925926
Training on augumented user 129515 0/50 current_auc = 0.725925925925926
User 129515 AUC after training: 0.7271604938271604
User 129515 improves AUC. Keeping the model.
Training on augumented user 17871 1/50 current_auc = 0.7271604938271604
User 17871 AUC after training: 0.7246913580246913
User 17871 does not improve AUC. Reverting changes.
Training on augumented user 70047 2/50 current_auc = 0.7271604938271604
User 70047 AUC after training: 0.7271604938271604
User 70047 does not improve AUC. Reverting changes.
Training on augumented user 123948 3/50 current_auc = 0.7271604938271604
User 123948 AUC after training: 0.7271604938271604
User 123948 does not improve AUC. Reverting changes.
Training on augumented user 7552 4/50 current_auc = 0.7271604938271604
User 7552 AUC after training: 0.7246913580246913
User 7552 does not improve AUC. Reverting changes.
Training on augumented user 123663 5/50 current_auc = 0.7271604938271604
User 123663 AUC after training: 0.725925925925926
User 123663 does not improve AUC. Reverting changes.
Training on augumented user 5419 6/50 current_auc = 0.7271604938271604
User 5419 AUC after training: 0.7234567901234569
User 5419 does not improve AUC. Reverting changes.
Training on augumented user 43277 7/50 current_auc = 0.7271604938271604
User 43277 AUC after training: 0.7296296296296297
User 43277 improves AUC. Keeping the model.
Training on augumented user 28876 8/50 current_auc = 0.7296296296296297
User 28876 AUC after training: 0.7271604938271604
User 28876 does not improve AUC. Reverting changes.
Training on augumented user 29868 9/50 current_auc = 0.7296296296296297
User 29868 AUC after training: 0.7271604938271604
User 29868 does not improve AUC. Reverting changes.
Training on augumented user 68235 10/50 current_auc = 0.7296296296296297
User 68235 AUC after training: 0.7296296296296295
User 68235 does not improve AUC. Reverting changes.
Training on augumented user 87246 11/50 current_auc = 0.7296296296296297
User 87246 AUC after training: 0.725925925925926
User 87246 does not improve AUC. Reverting changes.
Training on augumented user 43961 12/50 current_auc = 0.7296296296296297
User 43961 AUC after training: 0.7246913580246913
User 43961 does not improve AUC. Reverting changes.
Training on augumented user 85235 13/50 current_auc = 0.7296296296296297
User 85235 AUC after training: 0.7308641975308642
User 85235 improves AUC. Keeping the model.
Training on augumented user 108352 14/50 current_auc = 0.7308641975308642
User 108352 AUC after training: 0.7271604938271604
User 108352 does not improve AUC. Reverting changes.
Training on augumented user 105081 15/50 current_auc = 0.7308641975308642
User 105081 AUC after training: 0.7283950617283951
User 105081 does not improve AUC. Reverting changes.
Training on augumented user 91534 16/50 current_auc = 0.7308641975308642
User 91534 AUC after training: 0.7283950617283951
User 91534 does not improve AUC. Reverting changes.
Training on augumented user 983 17/50 current_auc = 0.7308641975308642
User 983 AUC after training: 0.7271604938271604
User 983 does not improve AUC. Reverting changes.
Training on augumented user 84212 18/50 current_auc = 0.7308641975308642
User 84212 AUC after training: 0.7246913580246913
User 84212 does not improve AUC. Reverting changes.
Training on augumented user 73800 19/50 current_auc = 0.7308641975308642
User 73800 AUC after training: 0.7308641975308642
User 73800 does not improve AUC. Reverting changes.
Training on augumented user 135537 20/50 current_auc = 0.7308641975308642
User 135537 AUC after training: 0.7271604938271604
User 135537 does not improve AUC. Reverting changes.
Training on augumented user 90543 21/50 current_auc = 0.7308641975308642
User 90543 AUC after training: 0.7283950617283951
User 90543 does not improve AUC. Reverting changes.
Training on augumented user 87326 22/50 current_auc = 0.7308641975308642
User 87326 AUC after training: 0.7283950617283951
User 87326 does not improve AUC. Reverting changes.
Training on augumented user 54786 23/50 current_auc = 0.7308641975308642
User 54786 AUC after training: 0.7271604938271604
User 54786 does not improve AUC. Reverting changes.
Training on augumented user 39674 24/50 current_auc = 0.7308641975308642
User 39674 AUC after training: 0.7283950617283951
User 39674 does not improve AUC. Reverting changes.
Training on augumented user 77618 25/50 current_auc = 0.7308641975308642
User 77618 AUC after training: 0.7271604938271604
User 77618 does not improve AUC. Reverting changes.
Training on augumented user 125110 26/50 current_auc = 0.7308641975308642
User 125110 AUC after training: 0.7234567901234569
User 125110 does not improve AUC. Reverting changes.
Training on augumented user 127676 27/50 current_auc = 0.7308641975308642
User 127676 AUC after training: 0.725925925925926
User 127676 does not improve AUC. Reverting changes.
Training on augumented user 36666 28/50 current_auc = 0.7308641975308642
User 36666 AUC after training: 0.7283950617283951
User 36666 does not improve AUC. Reverting changes.
Training on augumented user 11105 29/50 current_auc = 0.7308641975308642
User 11105 AUC after training: 0.728395061728395
User 11105 does not improve AUC. Reverting changes.
Training on augumented user 105048 30/50 current_auc = 0.7308641975308642
User 105048 AUC after training: 0.7283950617283951
User 105048 does not improve AUC. Reverting changes.
Training on augumented user 3039 31/50 current_auc = 0.7308641975308642
User 3039 AUC after training: 0.7246913580246913
User 3039 does not improve AUC. Reverting changes.
Training on augumented user 127851 32/50 current_auc = 0.7308641975308642
User 127851 AUC after training: 0.7283950617283951
User 127851 does not improve AUC. Reverting changes.
Training on augumented user 103361 33/50 current_auc = 0.7308641975308642
User 103361 AUC after training: 0.7283950617283951
User 103361 does not improve AUC. Reverting changes.
Training on augumented user 42024 34/50 current_auc = 0.7308641975308642
User 42024 AUC after training: 0.7283950617283951
User 42024 does not improve AUC. Reverting changes.
Training on augumented user 56181 35/50 current_auc = 0.7308641975308642
User 56181 AUC after training: 0.7271604938271604
User 56181 does not improve AUC. Reverting changes.
Training on augumented user 92537 36/50 current_auc = 0.7308641975308642
User 92537 AUC after training: 0.7283950617283951
User 92537 does not improve AUC. Reverting changes.
Training on augumented user 95678 37/50 current_auc = 0.7308641975308642
User 95678 AUC after training: 0.7296296296296297
User 95678 does not improve AUC. Reverting changes.
Training on augumented user 127581 38/50 current_auc = 0.7308641975308642
User 127581 AUC after training: 0.7296296296296296
User 127581 does not improve AUC. Reverting changes.
Training on augumented user 121242 39/50 current_auc = 0.7308641975308642
User 121242 AUC after training: 0.7283950617283951
User 121242 does not improve AUC. Reverting changes.
Training on augumented user 22333 40/50 current_auc = 0.7308641975308642
User 22333 AUC after training: 0.7259259259259259
User 22333 does not improve AUC. Reverting changes.
Training on augumented user 38551 41/50 current_auc = 0.7308641975308642
User 38551 AUC after training: 0.7296296296296295
User 38551 does not improve AUC. Reverting changes.
Training on augumented user 36099 42/50 current_auc = 0.7308641975308642
User 36099 AUC after training: 0.725925925925926
User 36099 does not improve AUC. Reverting changes.
Training on augumented user 75931 43/50 current_auc = 0.7308641975308642
User 75931 AUC after training: 0.7271604938271604
User 75931 does not improve AUC. Reverting changes.
Training on augumented user 63774 44/50 current_auc = 0.7308641975308642
User 63774 AUC after training: 0.7271604938271604
User 63774 does not improve AUC. Reverting changes.
Training on augumented user 68959 45/50 current_auc = 0.7308641975308642
User 68959 AUC after training: 0.7271604938271605
User 68959 does not improve AUC. Reverting changes.
Training on augumented user 109745 46/50 current_auc = 0.7308641975308642
User 109745 AUC after training: 0.7234567901234569
User 109745 does not improve AUC. Reverting changes.
Training on augumented user 127726 47/50 current_auc = 0.7308641975308642
User 127726 AUC after training: 0.7259259259259259
User 127726 does not improve AUC. Reverting changes.
Training on augumented user 10014 48/50 current_auc = 0.7308641975308642
User 10014 AUC after training: 0.7271604938271604
User 10014 does not improve AUC. Reverting changes.
Training on augumented user 60693 49/50 current_auc = 0.7308641975308642
User 60693 AUC after training: 0.725925925925926
User 60693 does not improve AUC. Reverting changes.
[2024-12-02 19:40:17.807284] start test user 129654 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:18.364325] start test user 129654 225/567 recall augumented users by random, augumented_users = [82322, 73654, 134856, 50831, 116869, 26720, 25945, 120194, 59988, 100565, 6720, 116599, 112970, 92202, 121408, 96436, 16583, 118835, 117321, 91623, 18256, 90414, 76717, 128757, 16283, 78714, 67619, 104913, 43791, 23984, 7335, 100271, 124265, 12705, 22183, 15153, 130520, 9366, 105913, 62485, 119637, 68528, 31139, 41042, 97357, 71654, 74712, 9279, 95944, 75577]
[2024-12-02 19:40:18.385704] user = 129654 Cloud 225/567
[2024-12-02 19:40:18.404930] user = 129654 Local 225/567
[2024-12-02 19:40:18.484918] user = 129654 Local+ 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:20.364481] user = 129654 MPDA- 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6613636363636364
Training on augumented user 82322 0/50 current_auc = 0.6613636363636364
User 82322 AUC after training: 0.6598484848484849
User 82322 does not improve AUC. Reverting changes.
Training on augumented user 73654 1/50 current_auc = 0.6613636363636364
User 73654 AUC after training: 0.6613636363636364
User 73654 does not improve AUC. Reverting changes.
Training on augumented user 134856 2/50 current_auc = 0.6613636363636364
User 134856 AUC after training: 0.6606060606060606
User 134856 does not improve AUC. Reverting changes.
Training on augumented user 50831 3/50 current_auc = 0.6613636363636364
User 50831 AUC after training: 0.6583333333333334
User 50831 does not improve AUC. Reverting changes.
Training on augumented user 116869 4/50 current_auc = 0.6613636363636364
User 116869 AUC after training: 0.6606060606060606
User 116869 does not improve AUC. Reverting changes.
Training on augumented user 26720 5/50 current_auc = 0.6613636363636364
User 26720 AUC after training: 0.6613636363636364
User 26720 does not improve AUC. Reverting changes.
Training on augumented user 25945 6/50 current_auc = 0.6613636363636364
User 25945 AUC after training: 0.6613636363636364
User 25945 does not improve AUC. Reverting changes.
Training on augumented user 120194 7/50 current_auc = 0.6613636363636364
User 120194 AUC after training: 0.6613636363636364
User 120194 does not improve AUC. Reverting changes.
Training on augumented user 59988 8/50 current_auc = 0.6613636363636364
User 59988 AUC after training: 0.6606060606060606
User 59988 does not improve AUC. Reverting changes.
Training on augumented user 100565 9/50 current_auc = 0.6613636363636364
User 100565 AUC after training: 0.6590909090909092
User 100565 does not improve AUC. Reverting changes.
Training on augumented user 6720 10/50 current_auc = 0.6613636363636364
User 6720 AUC after training: 0.6598484848484849
User 6720 does not improve AUC. Reverting changes.
Training on augumented user 116599 11/50 current_auc = 0.6613636363636364
User 116599 AUC after training: 0.6606060606060606
User 116599 does not improve AUC. Reverting changes.
Training on augumented user 112970 12/50 current_auc = 0.6613636363636364
User 112970 AUC after training: 0.6606060606060606
User 112970 does not improve AUC. Reverting changes.
Training on augumented user 92202 13/50 current_auc = 0.6613636363636364
User 92202 AUC after training: 0.6598484848484849
User 92202 does not improve AUC. Reverting changes.
Training on augumented user 121408 14/50 current_auc = 0.6613636363636364
User 121408 AUC after training: 0.6583333333333333
User 121408 does not improve AUC. Reverting changes.
Training on augumented user 96436 15/50 current_auc = 0.6613636363636364
User 96436 AUC after training: 0.6613636363636364
User 96436 does not improve AUC. Reverting changes.
Training on augumented user 16583 16/50 current_auc = 0.6613636363636364
User 16583 AUC after training: 0.6613636363636364
User 16583 does not improve AUC. Reverting changes.
Training on augumented user 118835 17/50 current_auc = 0.6613636363636364
User 118835 AUC after training: 0.6613636363636364
User 118835 does not improve AUC. Reverting changes.
Training on augumented user 117321 18/50 current_auc = 0.6613636363636364
User 117321 AUC after training: 0.6598484848484849
User 117321 does not improve AUC. Reverting changes.
Training on augumented user 91623 19/50 current_auc = 0.6613636363636364
User 91623 AUC after training: 0.6583333333333334
User 91623 does not improve AUC. Reverting changes.
Training on augumented user 18256 20/50 current_auc = 0.6613636363636364
User 18256 AUC after training: 0.6606060606060606
User 18256 does not improve AUC. Reverting changes.
Training on augumented user 90414 21/50 current_auc = 0.6613636363636364
User 90414 AUC after training: 0.6606060606060606
User 90414 does not improve AUC. Reverting changes.
Training on augumented user 76717 22/50 current_auc = 0.6613636363636364
User 76717 AUC after training: 0.6598484848484849
User 76717 does not improve AUC. Reverting changes.
Training on augumented user 128757 23/50 current_auc = 0.6613636363636364
User 128757 AUC after training: 0.6606060606060606
User 128757 does not improve AUC. Reverting changes.
Training on augumented user 16283 24/50 current_auc = 0.6613636363636364
User 16283 AUC after training: 0.6606060606060606
User 16283 does not improve AUC. Reverting changes.
Training on augumented user 78714 25/50 current_auc = 0.6613636363636364
User 78714 AUC after training: 0.6606060606060606
User 78714 does not improve AUC. Reverting changes.
Training on augumented user 67619 26/50 current_auc = 0.6613636363636364
User 67619 AUC after training: 0.6606060606060606
User 67619 does not improve AUC. Reverting changes.
Training on augumented user 104913 27/50 current_auc = 0.6613636363636364
User 104913 AUC after training: 0.6598484848484849
User 104913 does not improve AUC. Reverting changes.
Training on augumented user 43791 28/50 current_auc = 0.6613636363636364
User 43791 AUC after training: 0.6606060606060606
User 43791 does not improve AUC. Reverting changes.
Training on augumented user 23984 29/50 current_auc = 0.6613636363636364
User 23984 AUC after training: 0.6613636363636364
User 23984 does not improve AUC. Reverting changes.
Training on augumented user 7335 30/50 current_auc = 0.6613636363636364
User 7335 AUC after training: 0.6613636363636364
User 7335 does not improve AUC. Reverting changes.
Training on augumented user 100271 31/50 current_auc = 0.6613636363636364
User 100271 AUC after training: 0.6606060606060606
User 100271 does not improve AUC. Reverting changes.
Training on augumented user 124265 32/50 current_auc = 0.6613636363636364
User 124265 AUC after training: 0.6590909090909092
User 124265 does not improve AUC. Reverting changes.
Training on augumented user 12705 33/50 current_auc = 0.6613636363636364
User 12705 AUC after training: 0.6621212121212121
User 12705 improves AUC. Keeping the model.
Training on augumented user 22183 34/50 current_auc = 0.6621212121212121
User 22183 AUC after training: 0.6606060606060606
User 22183 does not improve AUC. Reverting changes.
Training on augumented user 15153 35/50 current_auc = 0.6621212121212121
User 15153 AUC after training: 0.6613636363636364
User 15153 does not improve AUC. Reverting changes.
Training on augumented user 130520 36/50 current_auc = 0.6621212121212121
User 130520 AUC after training: 0.6613636363636364
User 130520 does not improve AUC. Reverting changes.
Training on augumented user 9366 37/50 current_auc = 0.6621212121212121
User 9366 AUC after training: 0.6613636363636364
User 9366 does not improve AUC. Reverting changes.
Training on augumented user 105913 38/50 current_auc = 0.6621212121212121
User 105913 AUC after training: 0.6598484848484849
User 105913 does not improve AUC. Reverting changes.
Training on augumented user 62485 39/50 current_auc = 0.6621212121212121
User 62485 AUC after training: 0.6613636363636364
User 62485 does not improve AUC. Reverting changes.
Training on augumented user 119637 40/50 current_auc = 0.6621212121212121
User 119637 AUC after training: 0.6613636363636364
User 119637 does not improve AUC. Reverting changes.
Training on augumented user 68528 41/50 current_auc = 0.6621212121212121
User 68528 AUC after training: 0.6613636363636364
User 68528 does not improve AUC. Reverting changes.
Training on augumented user 31139 42/50 current_auc = 0.6621212121212121
User 31139 AUC after training: 0.6613636363636364
User 31139 does not improve AUC. Reverting changes.
Training on augumented user 41042 43/50 current_auc = 0.6621212121212121
User 41042 AUC after training: 0.6613636363636364
User 41042 does not improve AUC. Reverting changes.
Training on augumented user 97357 44/50 current_auc = 0.6621212121212121
User 97357 AUC after training: 0.6613636363636364
User 97357 does not improve AUC. Reverting changes.
Training on augumented user 71654 45/50 current_auc = 0.6621212121212121
User 71654 AUC after training: 0.6621212121212121
User 71654 does not improve AUC. Reverting changes.
Training on augumented user 74712 46/50 current_auc = 0.6621212121212121
User 74712 AUC after training: 0.6583333333333334
User 74712 does not improve AUC. Reverting changes.
Training on augumented user 9279 47/50 current_auc = 0.6621212121212121
User 9279 AUC after training: 0.6613636363636364
User 9279 does not improve AUC. Reverting changes.
Training on augumented user 95944 48/50 current_auc = 0.6621212121212121
User 95944 AUC after training: 0.6590909090909092
User 95944 does not improve AUC. Reverting changes.
Training on augumented user 75577 49/50 current_auc = 0.6621212121212121
User 75577 AUC after training: 0.6613636363636364
User 75577 does not improve AUC. Reverting changes.
[2024-12-02 19:40:52.578999] start test user 129683 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:52.986812] start test user 129683 226/567 recall augumented users by random, augumented_users = [102038, 73349, 87244, 49946, 70122, 4776, 94647, 64700, 112154, 104525, 131711, 35071, 79915, 15846, 15066, 85064, 6406, 93826, 60625, 87729, 17357, 9090, 10770, 26715, 4884, 76502, 118474, 82229, 38317, 135379, 77370, 99231, 46603, 9202, 136747, 92387, 55657, 77198, 20644, 27294, 138150, 121814, 72022, 79646, 88755, 65109, 137318, 34122, 15526, 41482]
[2024-12-02 19:40:53.002081] user = 129683 Cloud 226/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:53.008073] user = 129683 Local 226/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:53.148285] user = 129683 Local+ 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:55.296296] user = 129683 MPDA- 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 102038 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102038 AUC after training: 0.5
User 102038 does not improve AUC. Reverting changes.
Training on augumented user 73349 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73349 AUC after training: 0.5
User 73349 does not improve AUC. Reverting changes.
Training on augumented user 87244 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87244 AUC after training: 0.5
User 87244 does not improve AUC. Reverting changes.
Training on augumented user 49946 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49946 AUC after training: 0.5
User 49946 does not improve AUC. Reverting changes.
Training on augumented user 70122 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70122 AUC after training: 0.5
User 70122 does not improve AUC. Reverting changes.
Training on augumented user 4776 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4776 AUC after training: 0.5
User 4776 does not improve AUC. Reverting changes.
Training on augumented user 94647 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94647 AUC after training: 0.5
User 94647 does not improve AUC. Reverting changes.
Training on augumented user 64700 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64700 AUC after training: 0.5
User 64700 does not improve AUC. Reverting changes.
Training on augumented user 112154 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112154 AUC after training: 0.5
User 112154 does not improve AUC. Reverting changes.
Training on augumented user 104525 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104525 AUC after training: 0.5
User 104525 does not improve AUC. Reverting changes.
Training on augumented user 131711 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131711 AUC after training: 0.5
User 131711 does not improve AUC. Reverting changes.
Training on augumented user 35071 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35071 AUC after training: 0.5
User 35071 does not improve AUC. Reverting changes.
Training on augumented user 79915 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79915 AUC after training: 0.5
User 79915 does not improve AUC. Reverting changes.
Training on augumented user 15846 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15846 AUC after training: 0.5
User 15846 does not improve AUC. Reverting changes.
Training on augumented user 15066 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15066 AUC after training: 0.5
User 15066 does not improve AUC. Reverting changes.
Training on augumented user 85064 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85064 AUC after training: 0.5
User 85064 does not improve AUC. Reverting changes.
Training on augumented user 6406 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6406 AUC after training: 0.5
User 6406 does not improve AUC. Reverting changes.
Training on augumented user 93826 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93826 AUC after training: 0.5
User 93826 does not improve AUC. Reverting changes.
Training on augumented user 60625 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60625 AUC after training: 0.5
User 60625 does not improve AUC. Reverting changes.
Training on augumented user 87729 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87729 AUC after training: 0.5
User 87729 does not improve AUC. Reverting changes.
Training on augumented user 17357 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17357 AUC after training: 0.5
User 17357 does not improve AUC. Reverting changes.
Training on augumented user 9090 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9090 AUC after training: 0.5
User 9090 does not improve AUC. Reverting changes.
Training on augumented user 10770 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10770 AUC after training: 0.5
User 10770 does not improve AUC. Reverting changes.
Training on augumented user 26715 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26715 AUC after training: 0.5
User 26715 does not improve AUC. Reverting changes.
Training on augumented user 4884 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4884 AUC after training: 0.5
User 4884 does not improve AUC. Reverting changes.
Training on augumented user 76502 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76502 AUC after training: 0.5
User 76502 does not improve AUC. Reverting changes.
Training on augumented user 118474 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118474 AUC after training: 0.5
User 118474 does not improve AUC. Reverting changes.
Training on augumented user 82229 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82229 AUC after training: 0.5
User 82229 does not improve AUC. Reverting changes.
Training on augumented user 38317 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38317 AUC after training: 0.5
User 38317 does not improve AUC. Reverting changes.
Training on augumented user 135379 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135379 AUC after training: 0.5
User 135379 does not improve AUC. Reverting changes.
Training on augumented user 77370 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77370 AUC after training: 0.5
User 77370 does not improve AUC. Reverting changes.
Training on augumented user 99231 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99231 AUC after training: 0.5
User 99231 does not improve AUC. Reverting changes.
Training on augumented user 46603 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46603 AUC after training: 0.5
User 46603 does not improve AUC. Reverting changes.
Training on augumented user 9202 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9202 AUC after training: 0.5
User 9202 does not improve AUC. Reverting changes.
Training on augumented user 136747 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136747 AUC after training: 0.5
User 136747 does not improve AUC. Reverting changes.
Training on augumented user 92387 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92387 AUC after training: 0.5
User 92387 does not improve AUC. Reverting changes.
Training on augumented user 55657 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55657 AUC after training: 0.5
User 55657 does not improve AUC. Reverting changes.
Training on augumented user 77198 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77198 AUC after training: 0.5
User 77198 does not improve AUC. Reverting changes.
Training on augumented user 20644 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20644 AUC after training: 0.5
User 20644 does not improve AUC. Reverting changes.
Training on augumented user 27294 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27294 AUC after training: 0.5
User 27294 does not improve AUC. Reverting changes.
Training on augumented user 138150 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138150 AUC after training: 0.5
User 138150 does not improve AUC. Reverting changes.
Training on augumented user 121814 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121814 AUC after training: 0.5
User 121814 does not improve AUC. Reverting changes.
Training on augumented user 72022 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72022 AUC after training: 0.5
User 72022 does not improve AUC. Reverting changes.
Training on augumented user 79646 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79646 AUC after training: 0.5
User 79646 does not improve AUC. Reverting changes.
Training on augumented user 88755 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88755 AUC after training: 0.5
User 88755 does not improve AUC. Reverting changes.
Training on augumented user 65109 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65109 AUC after training: 0.5
User 65109 does not improve AUC. Reverting changes.
Training on augumented user 137318 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137318 AUC after training: 0.5
User 137318 does not improve AUC. Reverting changes.
Training on augumented user 34122 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34122 AUC after training: 0.5
User 34122 does not improve AUC. Reverting changes.
Training on augumented user 15526 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15526 AUC after training: 0.5
User 15526 does not improve AUC. Reverting changes.
Training on augumented user 41482 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41482 AUC after training: 0.5
User 41482 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:21.683114] start test user 129746 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:22.253570] start test user 129746 227/567 recall augumented users by random, augumented_users = [42620, 74236, 92912, 125904, 81740, 131287, 61183, 5426, 49399, 26978, 111503, 19427, 123035, 99145, 42736, 112035, 29574, 26190, 96027, 52804, 6446, 58920, 124523, 23848, 106526, 133104, 63469, 55515, 63133, 22711, 24380, 44449, 6924, 132998, 91759, 418, 88495, 93210, 4896, 277, 54412, 72693, 110373, 56106, 60376, 118796, 28870, 137556, 109286, 136574]
[2024-12-02 19:41:22.279506] user = 129746 Cloud 227/567
[2024-12-02 19:41:22.343282] user = 129746 Local 227/567
[2024-12-02 19:41:22.591876] user = 129746 Local+ 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:25.221658] user = 129746 MPDA- 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5686026936026936
Training on augumented user 42620 0/50 current_auc = 0.5686026936026936
User 42620 AUC after training: 0.5703282828282827
User 42620 improves AUC. Keeping the model.
Training on augumented user 74236 1/50 current_auc = 0.5703282828282827
User 74236 AUC after training: 0.5702020202020203
User 74236 does not improve AUC. Reverting changes.
Training on augumented user 92912 2/50 current_auc = 0.5703282828282827
User 92912 AUC after training: 0.5686868686868687
User 92912 does not improve AUC. Reverting changes.
Training on augumented user 125904 3/50 current_auc = 0.5703282828282827
User 125904 AUC after training: 0.5701599326599327
User 125904 does not improve AUC. Reverting changes.
Training on augumented user 81740 4/50 current_auc = 0.5703282828282827
User 81740 AUC after training: 0.5693602693602693
User 81740 does not improve AUC. Reverting changes.
Training on augumented user 131287 5/50 current_auc = 0.5703282828282827
User 131287 AUC after training: 0.5702441077441078
User 131287 does not improve AUC. Reverting changes.
Training on augumented user 61183 6/50 current_auc = 0.5703282828282827
User 61183 AUC after training: 0.5705808080808081
User 61183 improves AUC. Keeping the model.
Training on augumented user 5426 7/50 current_auc = 0.5705808080808081
User 5426 AUC after training: 0.5701599326599326
User 5426 does not improve AUC. Reverting changes.
Training on augumented user 49399 8/50 current_auc = 0.5705808080808081
User 49399 AUC after training: 0.5699494949494949
User 49399 does not improve AUC. Reverting changes.
Training on augumented user 26978 9/50 current_auc = 0.5705808080808081
User 26978 AUC after training: 0.5702861952861953
User 26978 does not improve AUC. Reverting changes.
Training on augumented user 111503 10/50 current_auc = 0.5705808080808081
User 111503 AUC after training: 0.5707070707070707
User 111503 improves AUC. Keeping the model.
Training on augumented user 19427 11/50 current_auc = 0.5707070707070707
User 19427 AUC after training: 0.571043771043771
User 19427 improves AUC. Keeping the model.
Training on augumented user 123035 12/50 current_auc = 0.571043771043771
User 123035 AUC after training: 0.5710437710437711
User 123035 improves AUC. Keeping the model.
Training on augumented user 99145 13/50 current_auc = 0.5710437710437711
User 99145 AUC after training: 0.5696969696969697
User 99145 does not improve AUC. Reverting changes.
Training on augumented user 42736 14/50 current_auc = 0.5710437710437711
User 42736 AUC after training: 0.5707070707070707
User 42736 does not improve AUC. Reverting changes.
Training on augumented user 112035 15/50 current_auc = 0.5710437710437711
User 112035 AUC after training: 0.5701178451178451
User 112035 does not improve AUC. Reverting changes.
Training on augumented user 29574 16/50 current_auc = 0.5710437710437711
User 29574 AUC after training: 0.570580808080808
User 29574 does not improve AUC. Reverting changes.
Training on augumented user 26190 17/50 current_auc = 0.5710437710437711
User 26190 AUC after training: 0.5705387205387206
User 26190 does not improve AUC. Reverting changes.
Training on augumented user 96027 18/50 current_auc = 0.5710437710437711
User 96027 AUC after training: 0.5707070707070707
User 96027 does not improve AUC. Reverting changes.
Training on augumented user 52804 19/50 current_auc = 0.5710437710437711
User 52804 AUC after training: 0.5693602693602694
User 52804 does not improve AUC. Reverting changes.
Training on augumented user 6446 20/50 current_auc = 0.5710437710437711
User 6446 AUC after training: 0.5709175084175084
User 6446 does not improve AUC. Reverting changes.
Training on augumented user 58920 21/50 current_auc = 0.5710437710437711
User 58920 AUC after training: 0.5693181818181817
User 58920 does not improve AUC. Reverting changes.
Training on augumented user 124523 22/50 current_auc = 0.5710437710437711
User 124523 AUC after training: 0.5711279461279462
User 124523 improves AUC. Keeping the model.
Training on augumented user 23848 23/50 current_auc = 0.5711279461279462
User 23848 AUC after training: 0.5691919191919192
User 23848 does not improve AUC. Reverting changes.
Training on augumented user 106526 24/50 current_auc = 0.5711279461279462
User 106526 AUC after training: 0.5690235690235691
User 106526 does not improve AUC. Reverting changes.
Training on augumented user 133104 25/50 current_auc = 0.5711279461279462
User 133104 AUC after training: 0.5708754208754209
User 133104 does not improve AUC. Reverting changes.
Training on augumented user 63469 26/50 current_auc = 0.5711279461279462
User 63469 AUC after training: 0.5707070707070707
User 63469 does not improve AUC. Reverting changes.
Training on augumented user 55515 27/50 current_auc = 0.5711279461279462
User 55515 AUC after training: 0.5715488215488215
User 55515 improves AUC. Keeping the model.
Training on augumented user 63133 28/50 current_auc = 0.5715488215488215
User 63133 AUC after training: 0.5698653198653199
User 63133 does not improve AUC. Reverting changes.
Training on augumented user 22711 29/50 current_auc = 0.5715488215488215
User 22711 AUC after training: 0.5702861952861953
User 22711 does not improve AUC. Reverting changes.
Training on augumented user 24380 30/50 current_auc = 0.5715488215488215
User 24380 AUC after training: 0.571043771043771
User 24380 does not improve AUC. Reverting changes.
Training on augumented user 44449 31/50 current_auc = 0.5715488215488215
User 44449 AUC after training: 0.570959595959596
User 44449 does not improve AUC. Reverting changes.
Training on augumented user 6924 32/50 current_auc = 0.5715488215488215
User 6924 AUC after training: 0.5706228956228956
User 6924 does not improve AUC. Reverting changes.
Training on augumented user 132998 33/50 current_auc = 0.5715488215488215
User 132998 AUC after training: 0.5712121212121212
User 132998 does not improve AUC. Reverting changes.
Training on augumented user 91759 34/50 current_auc = 0.5715488215488215
User 91759 AUC after training: 0.5685185185185185
User 91759 does not improve AUC. Reverting changes.
Training on augumented user 418 35/50 current_auc = 0.5715488215488215
User 418 AUC after training: 0.5721380471380472
User 418 improves AUC. Keeping the model.
Training on augumented user 88495 36/50 current_auc = 0.5721380471380472
User 88495 AUC after training: 0.5707912457912457
User 88495 does not improve AUC. Reverting changes.
Training on augumented user 93210 37/50 current_auc = 0.5721380471380472
User 93210 AUC after training: 0.5706228956228956
User 93210 does not improve AUC. Reverting changes.
Training on augumented user 4896 38/50 current_auc = 0.5721380471380472
User 4896 AUC after training: 0.5693602693602694
User 4896 does not improve AUC. Reverting changes.
Training on augumented user 277 39/50 current_auc = 0.5721380471380472
User 277 AUC after training: 0.5712962962962963
User 277 does not improve AUC. Reverting changes.
Training on augumented user 54412 40/50 current_auc = 0.5721380471380472
User 54412 AUC after training: 0.5714646464646466
User 54412 does not improve AUC. Reverting changes.
Training on augumented user 72693 41/50 current_auc = 0.5721380471380472
User 72693 AUC after training: 0.5712121212121212
User 72693 does not improve AUC. Reverting changes.
Training on augumented user 110373 42/50 current_auc = 0.5721380471380472
User 110373 AUC after training: 0.5712121212121213
User 110373 does not improve AUC. Reverting changes.
Training on augumented user 56106 43/50 current_auc = 0.5721380471380472
User 56106 AUC after training: 0.5707912457912457
User 56106 does not improve AUC. Reverting changes.
Training on augumented user 60376 44/50 current_auc = 0.5721380471380472
User 60376 AUC after training: 0.5706228956228956
User 60376 does not improve AUC. Reverting changes.
Training on augumented user 118796 45/50 current_auc = 0.5721380471380472
User 118796 AUC after training: 0.5717171717171716
User 118796 does not improve AUC. Reverting changes.
Training on augumented user 28870 46/50 current_auc = 0.5721380471380472
User 28870 AUC after training: 0.5704545454545455
User 28870 does not improve AUC. Reverting changes.
Training on augumented user 137556 47/50 current_auc = 0.5721380471380472
User 137556 AUC after training: 0.5711279461279462
User 137556 does not improve AUC. Reverting changes.
Training on augumented user 109286 48/50 current_auc = 0.5721380471380472
User 109286 AUC after training: 0.5678451178451178
User 109286 does not improve AUC. Reverting changes.
Training on augumented user 136574 49/50 current_auc = 0.5721380471380472
User 136574 AUC after training: 0.5716329966329966
User 136574 does not improve AUC. Reverting changes.
[2024-12-02 19:41:56.340824] start test user 129802 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:56.941556] start test user 129802 228/567 recall augumented users by random, augumented_users = [132262, 100077, 87340, 61076, 123437, 56843, 107343, 62880, 19283, 92146, 118988, 134535, 132260, 82948, 128289, 64922, 104329, 15916, 112716, 14260, 36497, 124890, 92792, 83296, 92504, 63921, 94774, 115460, 138444, 5854, 116232, 109069, 92287, 107072, 23517, 131305, 123622, 20970, 94418, 100586, 57664, 32916, 52332, 25854, 68066, 120633, 73818, 2465, 109800, 126069]
[2024-12-02 19:41:56.971671] user = 129802 Cloud 228/567
[2024-12-02 19:41:57.015395] user = 129802 Local 228/567
[2024-12-02 19:41:57.197680] user = 129802 Local+ 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:59.133338] user = 129802 MPDA- 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6326959517657191
Training on augumented user 132262 0/50 current_auc = 0.6326959517657191
User 132262 AUC after training: 0.633359173126615
User 132262 improves AUC. Keeping the model.
Training on augumented user 100077 1/50 current_auc = 0.633359173126615
User 100077 AUC after training: 0.6340137812230836
User 100077 improves AUC. Keeping the model.
Training on augumented user 87340 2/50 current_auc = 0.6340137812230836
User 87340 AUC after training: 0.6322394487510766
User 87340 does not improve AUC. Reverting changes.
Training on augumented user 61076 3/50 current_auc = 0.6340137812230836
User 61076 AUC after training: 0.6335228251507321
User 61076 does not improve AUC. Reverting changes.
Training on augumented user 123437 4/50 current_auc = 0.6340137812230836
User 123437 AUC after training: 0.6336778639104221
User 123437 does not improve AUC. Reverting changes.
Training on augumented user 56843 5/50 current_auc = 0.6340137812230836
User 56843 AUC after training: 0.6338329026701119
User 56843 does not improve AUC. Reverting changes.
Training on augumented user 107343 6/50 current_auc = 0.6340137812230836
User 107343 AUC after training: 0.6335745047372954
User 107343 does not improve AUC. Reverting changes.
Training on augumented user 62880 7/50 current_auc = 0.6340137812230836
User 62880 AUC after training: 0.6344616709732989
User 62880 improves AUC. Keeping the model.
Training on augumented user 19283 8/50 current_auc = 0.6344616709732989
User 19283 AUC after training: 0.6340223944875107
User 19283 does not improve AUC. Reverting changes.
Training on augumented user 92146 9/50 current_auc = 0.6344616709732989
User 92146 AUC after training: 0.6346080964685615
User 92146 improves AUC. Keeping the model.
Training on augumented user 118988 10/50 current_auc = 0.6346080964685615
User 118988 AUC after training: 0.634384151593454
User 118988 does not improve AUC. Reverting changes.
Training on augumented user 134535 11/50 current_auc = 0.6346080964685615
User 134535 AUC after training: 0.6350904392764858
User 134535 improves AUC. Keeping the model.
Training on augumented user 132260 12/50 current_auc = 0.6350904392764858
User 132260 AUC after training: 0.6353488372093024
User 132260 improves AUC. Keeping the model.
Training on augumented user 82948 13/50 current_auc = 0.6353488372093024
User 82948 AUC after training: 0.6352454780361757
User 82948 does not improve AUC. Reverting changes.
Training on augumented user 128289 14/50 current_auc = 0.6353488372093024
User 128289 AUC after training: 0.6352627045650301
User 128289 does not improve AUC. Reverting changes.
Training on augumented user 64922 15/50 current_auc = 0.6353488372093024
User 64922 AUC after training: 0.6360034453057707
User 64922 improves AUC. Keeping the model.
Training on augumented user 104329 16/50 current_auc = 0.6360034453057707
User 104329 AUC after training: 0.6353488372093024
User 104329 does not improve AUC. Reverting changes.
Training on augumented user 15916 17/50 current_auc = 0.6360034453057707
User 15916 AUC after training: 0.6349870801033592
User 15916 does not improve AUC. Reverting changes.
Training on augumented user 112716 18/50 current_auc = 0.6360034453057707
User 112716 AUC after training: 0.6351076658053402
User 112716 does not improve AUC. Reverting changes.
Training on augumented user 14260 19/50 current_auc = 0.6360034453057707
User 14260 AUC after training: 0.6350129198966408
User 14260 does not improve AUC. Reverting changes.
Training on augumented user 36497 20/50 current_auc = 0.6360034453057707
User 36497 AUC after training: 0.6363479758828596
User 36497 improves AUC. Keeping the model.
Training on augumented user 124890 21/50 current_auc = 0.6363479758828596
User 124890 AUC after training: 0.636365202411714
User 124890 improves AUC. Keeping the model.
Training on augumented user 92792 22/50 current_auc = 0.636365202411714
User 92792 AUC after training: 0.6353057708871661
User 92792 does not improve AUC. Reverting changes.
Training on augumented user 83296 23/50 current_auc = 0.636365202411714
User 83296 AUC after training: 0.6363135228251509
User 83296 does not improve AUC. Reverting changes.
Training on augumented user 92504 24/50 current_auc = 0.636365202411714
User 92504 AUC after training: 0.6363307493540051
User 92504 does not improve AUC. Reverting changes.
Training on augumented user 63921 25/50 current_auc = 0.636365202411714
User 63921 AUC after training: 0.633987941429802
User 63921 does not improve AUC. Reverting changes.
Training on augumented user 94774 26/50 current_auc = 0.636365202411714
User 94774 AUC after training: 0.6356072351421188
User 94774 does not improve AUC. Reverting changes.
Training on augumented user 115460 27/50 current_auc = 0.636365202411714
User 115460 AUC after training: 0.635452196382429
User 115460 does not improve AUC. Reverting changes.
Training on augumented user 138444 28/50 current_auc = 0.636365202411714
User 138444 AUC after training: 0.6361412575366063
User 138444 does not improve AUC. Reverting changes.
Training on augumented user 5854 29/50 current_auc = 0.636365202411714
User 5854 AUC after training: 0.6361154177433247
User 5854 does not improve AUC. Reverting changes.
Training on augumented user 116232 30/50 current_auc = 0.636365202411714
User 116232 AUC after training: 0.6367269595176572
User 116232 improves AUC. Keeping the model.
Training on augumented user 109069 31/50 current_auc = 0.6367269595176572
User 109069 AUC after training: 0.635813953488372
User 109069 does not improve AUC. Reverting changes.
Training on augumented user 92287 32/50 current_auc = 0.6367269595176572
User 92287 AUC after training: 0.6370025839793282
User 92287 improves AUC. Keeping the model.
Training on augumented user 107072 33/50 current_auc = 0.6370025839793282
User 107072 AUC after training: 0.6364513350559862
User 107072 does not improve AUC. Reverting changes.
Training on augumented user 23517 34/50 current_auc = 0.6370025839793282
User 23517 AUC after training: 0.6369509043927648
User 23517 does not improve AUC. Reverting changes.
Training on augumented user 131305 35/50 current_auc = 0.6370025839793282
User 131305 AUC after training: 0.6366322136089577
User 131305 does not improve AUC. Reverting changes.
Training on augumented user 123622 36/50 current_auc = 0.6370025839793282
User 123622 AUC after training: 0.636881998277347
User 123622 does not improve AUC. Reverting changes.
Training on augumented user 20970 37/50 current_auc = 0.6370025839793282
User 20970 AUC after training: 0.6367097329888027
User 20970 does not improve AUC. Reverting changes.
Training on augumented user 94418 38/50 current_auc = 0.6370025839793282
User 94418 AUC after training: 0.6350645994832043
User 94418 does not improve AUC. Reverting changes.
Training on augumented user 100586 39/50 current_auc = 0.6370025839793282
User 100586 AUC after training: 0.6358656330749354
User 100586 does not improve AUC. Reverting changes.
Training on augumented user 57664 40/50 current_auc = 0.6370025839793282
User 57664 AUC after training: 0.6365546942291128
User 57664 does not improve AUC. Reverting changes.
Training on augumented user 32916 41/50 current_auc = 0.6370025839793282
User 32916 AUC after training: 0.6363393626184324
User 32916 does not improve AUC. Reverting changes.
Training on augumented user 52332 42/50 current_auc = 0.6370025839793282
User 52332 AUC after training: 0.6362446167097331
User 52332 does not improve AUC. Reverting changes.
Training on augumented user 25854 43/50 current_auc = 0.6370025839793282
User 25854 AUC after training: 0.6372782084409992
User 25854 improves AUC. Keeping the model.
Training on augumented user 68066 44/50 current_auc = 0.6372782084409992
User 68066 AUC after training: 0.6370714900947458
User 68066 does not improve AUC. Reverting changes.
Training on augumented user 120633 45/50 current_auc = 0.6372782084409992
User 120633 AUC after training: 0.6368475452196383
User 120633 does not improve AUC. Reverting changes.
Training on augumented user 73818 46/50 current_auc = 0.6372782084409992
User 73818 AUC after training: 0.6370025839793282
User 73818 does not improve AUC. Reverting changes.
Training on augumented user 2465 47/50 current_auc = 0.6372782084409992
User 2465 AUC after training: 0.6372351421188631
User 2465 does not improve AUC. Reverting changes.
Training on augumented user 109800 48/50 current_auc = 0.6372782084409992
User 109800 AUC after training: 0.6365202411714039
User 109800 does not improve AUC. Reverting changes.
Training on augumented user 126069 49/50 current_auc = 0.6372782084409992
User 126069 AUC after training: 0.6372437553832903
User 126069 does not improve AUC. Reverting changes.
[2024-12-02 19:42:29.085509] start test user 129863 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:29.501649] start test user 129863 229/567 recall augumented users by random, augumented_users = [45456, 91052, 24757, 117458, 9606, 57529, 59551, 50949, 4118, 89885, 79467, 134516, 106970, 66428, 127984, 45788, 30780, 8061, 66759, 117645, 113549, 15222, 16164, 58655, 77741, 125208, 97671, 96737, 56556, 7604, 109208, 47672, 58415, 101761, 106169, 85204, 6902, 104208, 123042, 68596, 62041, 52806, 133112, 111362, 51392, 69897, 50846, 71005, 45379, 132235]
[2024-12-02 19:42:29.516980] user = 129863 Cloud 229/567
[2024-12-02 19:42:29.531334] user = 129863 Local 229/567
[2024-12-02 19:42:29.623169] user = 129863 Local+ 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:31.372267] user = 129863 MPDA- 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.647972972972973
Training on augumented user 45456 0/50 current_auc = 0.647972972972973
User 45456 AUC after training: 0.6469594594594594
User 45456 does not improve AUC. Reverting changes.
Training on augumented user 91052 1/50 current_auc = 0.647972972972973
User 91052 AUC after training: 0.6489864864864864
User 91052 improves AUC. Keeping the model.
Training on augumented user 24757 2/50 current_auc = 0.6489864864864864
User 24757 AUC after training: 0.6506756756756756
User 24757 improves AUC. Keeping the model.
Training on augumented user 117458 3/50 current_auc = 0.6506756756756756
User 117458 AUC after training: 0.6496621621621622
User 117458 does not improve AUC. Reverting changes.
Training on augumented user 9606 4/50 current_auc = 0.6506756756756756
User 9606 AUC after training: 0.6499999999999999
User 9606 does not improve AUC. Reverting changes.
Training on augumented user 57529 5/50 current_auc = 0.6506756756756756
User 57529 AUC after training: 0.6496621621621622
User 57529 does not improve AUC. Reverting changes.
Training on augumented user 59551 6/50 current_auc = 0.6506756756756756
User 59551 AUC after training: 0.6506756756756755
User 59551 does not improve AUC. Reverting changes.
Training on augumented user 50949 7/50 current_auc = 0.6506756756756756
User 50949 AUC after training: 0.6503378378378378
User 50949 does not improve AUC. Reverting changes.
Training on augumented user 4118 8/50 current_auc = 0.6506756756756756
User 4118 AUC after training: 0.6503378378378378
User 4118 does not improve AUC. Reverting changes.
Training on augumented user 89885 9/50 current_auc = 0.6506756756756756
User 89885 AUC after training: 0.6510135135135134
User 89885 improves AUC. Keeping the model.
Training on augumented user 79467 10/50 current_auc = 0.6510135135135134
User 79467 AUC after training: 0.6506756756756756
User 79467 does not improve AUC. Reverting changes.
Training on augumented user 134516 11/50 current_auc = 0.6510135135135134
User 134516 AUC after training: 0.6506756756756756
User 134516 does not improve AUC. Reverting changes.
Training on augumented user 106970 12/50 current_auc = 0.6510135135135134
User 106970 AUC after training: 0.6496621621621621
User 106970 does not improve AUC. Reverting changes.
Training on augumented user 66428 13/50 current_auc = 0.6510135135135134
User 66428 AUC after training: 0.649831081081081
User 66428 does not improve AUC. Reverting changes.
Training on augumented user 127984 14/50 current_auc = 0.6510135135135134
User 127984 AUC after training: 0.6506756756756757
User 127984 does not improve AUC. Reverting changes.
Training on augumented user 45788 15/50 current_auc = 0.6510135135135134
User 45788 AUC after training: 0.6481418918918919
User 45788 does not improve AUC. Reverting changes.
Training on augumented user 30780 16/50 current_auc = 0.6510135135135134
User 30780 AUC after training: 0.6503378378378378
User 30780 does not improve AUC. Reverting changes.
Training on augumented user 8061 17/50 current_auc = 0.6510135135135134
User 8061 AUC after training: 0.6506756756756756
User 8061 does not improve AUC. Reverting changes.
Training on augumented user 66759 18/50 current_auc = 0.6510135135135134
User 66759 AUC after training: 0.6499999999999999
User 66759 does not improve AUC. Reverting changes.
Training on augumented user 117645 19/50 current_auc = 0.6510135135135134
User 117645 AUC after training: 0.65
User 117645 does not improve AUC. Reverting changes.
Training on augumented user 113549 20/50 current_auc = 0.6510135135135134
User 113549 AUC after training: 0.6506756756756756
User 113549 does not improve AUC. Reverting changes.
Training on augumented user 15222 21/50 current_auc = 0.6510135135135134
User 15222 AUC after training: 0.65
User 15222 does not improve AUC. Reverting changes.
Training on augumented user 16164 22/50 current_auc = 0.6510135135135134
User 16164 AUC after training: 0.65
User 16164 does not improve AUC. Reverting changes.
Training on augumented user 58655 23/50 current_auc = 0.6510135135135134
User 58655 AUC after training: 0.6510135135135134
User 58655 does not improve AUC. Reverting changes.
Training on augumented user 77741 24/50 current_auc = 0.6510135135135134
User 77741 AUC after training: 0.6510135135135134
User 77741 does not improve AUC. Reverting changes.
Training on augumented user 125208 25/50 current_auc = 0.6510135135135134
User 125208 AUC after training: 0.6510135135135134
User 125208 does not improve AUC. Reverting changes.
Training on augumented user 97671 26/50 current_auc = 0.6510135135135134
User 97671 AUC after training: 0.6501689189189189
User 97671 does not improve AUC. Reverting changes.
Training on augumented user 96737 27/50 current_auc = 0.6510135135135134
User 96737 AUC after training: 0.6499999999999999
User 96737 does not improve AUC. Reverting changes.
Training on augumented user 56556 28/50 current_auc = 0.6510135135135134
User 56556 AUC after training: 0.6493243243243243
User 56556 does not improve AUC. Reverting changes.
Training on augumented user 7604 29/50 current_auc = 0.6510135135135134
User 7604 AUC after training: 0.6503378378378378
User 7604 does not improve AUC. Reverting changes.
Training on augumented user 109208 30/50 current_auc = 0.6510135135135134
User 109208 AUC after training: 0.6510135135135134
User 109208 does not improve AUC. Reverting changes.
Training on augumented user 47672 31/50 current_auc = 0.6510135135135134
User 47672 AUC after training: 0.6503378378378378
User 47672 does not improve AUC. Reverting changes.
Training on augumented user 58415 32/50 current_auc = 0.6510135135135134
User 58415 AUC after training: 0.6510135135135136
User 58415 improves AUC. Keeping the model.
Training on augumented user 101761 33/50 current_auc = 0.6510135135135136
User 101761 AUC after training: 0.6503378378378378
User 101761 does not improve AUC. Reverting changes.
Training on augumented user 106169 34/50 current_auc = 0.6510135135135136
User 106169 AUC after training: 0.65
User 106169 does not improve AUC. Reverting changes.
Training on augumented user 85204 35/50 current_auc = 0.6510135135135136
User 85204 AUC after training: 0.6506756756756756
User 85204 does not improve AUC. Reverting changes.
Training on augumented user 6902 36/50 current_auc = 0.6510135135135136
User 6902 AUC after training: 0.6515202702702703
User 6902 improves AUC. Keeping the model.
Training on augumented user 104208 37/50 current_auc = 0.6515202702702703
User 104208 AUC after training: 0.6494932432432432
User 104208 does not improve AUC. Reverting changes.
Training on augumented user 123042 38/50 current_auc = 0.6515202702702703
User 123042 AUC after training: 0.6525337837837838
User 123042 improves AUC. Keeping the model.
Training on augumented user 68596 39/50 current_auc = 0.6525337837837838
User 68596 AUC after training: 0.6518581081081081
User 68596 does not improve AUC. Reverting changes.
Training on augumented user 62041 40/50 current_auc = 0.6525337837837838
User 62041 AUC after training: 0.6511824324324323
User 62041 does not improve AUC. Reverting changes.
Training on augumented user 52806 41/50 current_auc = 0.6525337837837838
User 52806 AUC after training: 0.652195945945946
User 52806 does not improve AUC. Reverting changes.
Training on augumented user 133112 42/50 current_auc = 0.6525337837837838
User 133112 AUC after training: 0.6518581081081081
User 133112 does not improve AUC. Reverting changes.
Training on augumented user 111362 43/50 current_auc = 0.6525337837837838
User 111362 AUC after training: 0.6521959459459459
User 111362 does not improve AUC. Reverting changes.
Training on augumented user 51392 44/50 current_auc = 0.6525337837837838
User 51392 AUC after training: 0.6518581081081081
User 51392 does not improve AUC. Reverting changes.
Training on augumented user 69897 45/50 current_auc = 0.6525337837837838
User 69897 AUC after training: 0.6518581081081081
User 69897 does not improve AUC. Reverting changes.
Training on augumented user 50846 46/50 current_auc = 0.6525337837837838
User 50846 AUC after training: 0.6525337837837838
User 50846 does not improve AUC. Reverting changes.
Training on augumented user 71005 47/50 current_auc = 0.6525337837837838
User 71005 AUC after training: 0.6505067567567568
User 71005 does not improve AUC. Reverting changes.
Training on augumented user 45379 48/50 current_auc = 0.6525337837837838
User 45379 AUC after training: 0.649831081081081
User 45379 does not improve AUC. Reverting changes.
Training on augumented user 132235 49/50 current_auc = 0.6525337837837838
User 132235 AUC after training: 0.649831081081081
User 132235 does not improve AUC. Reverting changes.
[2024-12-02 19:42:55.900977] start test user 129989 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:56.292877] start test user 129989 230/567 recall augumented users by random, augumented_users = [79714, 66023, 72914, 52050, 7053, 63816, 410, 46978, 53108, 112850, 39535, 65555, 121262, 90312, 1134, 67382, 97929, 133672, 80424, 71973, 3732, 24958, 50492, 109457, 130947, 23678, 63649, 12950, 59985, 97233, 12539, 3977, 55223, 74125, 122860, 60029, 82450, 15555, 56317, 129054, 86548, 111465, 48537, 61494, 132564, 55868, 89943, 56453, 31163, 34111]
[2024-12-02 19:42:56.307629] user = 129989 Cloud 230/567
[2024-12-02 19:42:56.316945] user = 129989 Local 230/567
[2024-12-02 19:42:56.364811] user = 129989 Local+ 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:59.216943] user = 129989 MPDA- 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 79714 0/50 current_auc = 0.0
User 79714 AUC after training: 0.0
User 79714 does not improve AUC. Reverting changes.
Training on augumented user 66023 1/50 current_auc = 0.0
User 66023 AUC after training: 0.0
User 66023 does not improve AUC. Reverting changes.
Training on augumented user 72914 2/50 current_auc = 0.0
User 72914 AUC after training: 0.0
User 72914 does not improve AUC. Reverting changes.
Training on augumented user 52050 3/50 current_auc = 0.0
User 52050 AUC after training: 0.0
User 52050 does not improve AUC. Reverting changes.
Training on augumented user 7053 4/50 current_auc = 0.0
User 7053 AUC after training: 0.0
User 7053 does not improve AUC. Reverting changes.
Training on augumented user 63816 5/50 current_auc = 0.0
User 63816 AUC after training: 0.0
User 63816 does not improve AUC. Reverting changes.
Training on augumented user 410 6/50 current_auc = 0.0
User 410 AUC after training: 0.0
User 410 does not improve AUC. Reverting changes.
Training on augumented user 46978 7/50 current_auc = 0.0
User 46978 AUC after training: 0.0
User 46978 does not improve AUC. Reverting changes.
Training on augumented user 53108 8/50 current_auc = 0.0
User 53108 AUC after training: 0.0
User 53108 does not improve AUC. Reverting changes.
Training on augumented user 112850 9/50 current_auc = 0.0
User 112850 AUC after training: 0.0
User 112850 does not improve AUC. Reverting changes.
Training on augumented user 39535 10/50 current_auc = 0.0
User 39535 AUC after training: 0.0
User 39535 does not improve AUC. Reverting changes.
Training on augumented user 65555 11/50 current_auc = 0.0
User 65555 AUC after training: 0.0
User 65555 does not improve AUC. Reverting changes.
Training on augumented user 121262 12/50 current_auc = 0.0
User 121262 AUC after training: 0.0
User 121262 does not improve AUC. Reverting changes.
Training on augumented user 90312 13/50 current_auc = 0.0
User 90312 AUC after training: 0.0
User 90312 does not improve AUC. Reverting changes.
Training on augumented user 1134 14/50 current_auc = 0.0
User 1134 AUC after training: 0.0
User 1134 does not improve AUC. Reverting changes.
Training on augumented user 67382 15/50 current_auc = 0.0
User 67382 AUC after training: 0.0
User 67382 does not improve AUC. Reverting changes.
Training on augumented user 97929 16/50 current_auc = 0.0
User 97929 AUC after training: 0.0
User 97929 does not improve AUC. Reverting changes.
Training on augumented user 133672 17/50 current_auc = 0.0
User 133672 AUC after training: 0.0
User 133672 does not improve AUC. Reverting changes.
Training on augumented user 80424 18/50 current_auc = 0.0
User 80424 AUC after training: 0.0
User 80424 does not improve AUC. Reverting changes.
Training on augumented user 71973 19/50 current_auc = 0.0
User 71973 AUC after training: 0.0
User 71973 does not improve AUC. Reverting changes.
Training on augumented user 3732 20/50 current_auc = 0.0
User 3732 AUC after training: 0.0
User 3732 does not improve AUC. Reverting changes.
Training on augumented user 24958 21/50 current_auc = 0.0
User 24958 AUC after training: 0.0
User 24958 does not improve AUC. Reverting changes.
Training on augumented user 50492 22/50 current_auc = 0.0
User 50492 AUC after training: 0.0
User 50492 does not improve AUC. Reverting changes.
Training on augumented user 109457 23/50 current_auc = 0.0
User 109457 AUC after training: 0.0
User 109457 does not improve AUC. Reverting changes.
Training on augumented user 130947 24/50 current_auc = 0.0
User 130947 AUC after training: 0.0
User 130947 does not improve AUC. Reverting changes.
Training on augumented user 23678 25/50 current_auc = 0.0
User 23678 AUC after training: 0.0
User 23678 does not improve AUC. Reverting changes.
Training on augumented user 63649 26/50 current_auc = 0.0
User 63649 AUC after training: 0.0
User 63649 does not improve AUC. Reverting changes.
Training on augumented user 12950 27/50 current_auc = 0.0
User 12950 AUC after training: 0.0
User 12950 does not improve AUC. Reverting changes.
Training on augumented user 59985 28/50 current_auc = 0.0
User 59985 AUC after training: 0.0
User 59985 does not improve AUC. Reverting changes.
Training on augumented user 97233 29/50 current_auc = 0.0
User 97233 AUC after training: 0.0
User 97233 does not improve AUC. Reverting changes.
Training on augumented user 12539 30/50 current_auc = 0.0
User 12539 AUC after training: 0.0
User 12539 does not improve AUC. Reverting changes.
Training on augumented user 3977 31/50 current_auc = 0.0
User 3977 AUC after training: 0.0
User 3977 does not improve AUC. Reverting changes.
Training on augumented user 55223 32/50 current_auc = 0.0
User 55223 AUC after training: 0.0
User 55223 does not improve AUC. Reverting changes.
Training on augumented user 74125 33/50 current_auc = 0.0
User 74125 AUC after training: 0.0
User 74125 does not improve AUC. Reverting changes.
Training on augumented user 122860 34/50 current_auc = 0.0
User 122860 AUC after training: 0.0
User 122860 does not improve AUC. Reverting changes.
Training on augumented user 60029 35/50 current_auc = 0.0
User 60029 AUC after training: 0.0
User 60029 does not improve AUC. Reverting changes.
Training on augumented user 82450 36/50 current_auc = 0.0
User 82450 AUC after training: 0.0
User 82450 does not improve AUC. Reverting changes.
Training on augumented user 15555 37/50 current_auc = 0.0
User 15555 AUC after training: 0.0
User 15555 does not improve AUC. Reverting changes.
Training on augumented user 56317 38/50 current_auc = 0.0
User 56317 AUC after training: 0.0
User 56317 does not improve AUC. Reverting changes.
Training on augumented user 129054 39/50 current_auc = 0.0
User 129054 AUC after training: 0.0
User 129054 does not improve AUC. Reverting changes.
Training on augumented user 86548 40/50 current_auc = 0.0
User 86548 AUC after training: 0.0
User 86548 does not improve AUC. Reverting changes.
Training on augumented user 111465 41/50 current_auc = 0.0
User 111465 AUC after training: 0.0
User 111465 does not improve AUC. Reverting changes.
Training on augumented user 48537 42/50 current_auc = 0.0
User 48537 AUC after training: 0.0
User 48537 does not improve AUC. Reverting changes.
Training on augumented user 61494 43/50 current_auc = 0.0
User 61494 AUC after training: 0.0
User 61494 does not improve AUC. Reverting changes.
Training on augumented user 132564 44/50 current_auc = 0.0
User 132564 AUC after training: 0.0
User 132564 does not improve AUC. Reverting changes.
Training on augumented user 55868 45/50 current_auc = 0.0
User 55868 AUC after training: 0.0
User 55868 does not improve AUC. Reverting changes.
Training on augumented user 89943 46/50 current_auc = 0.0
User 89943 AUC after training: 0.0
User 89943 does not improve AUC. Reverting changes.
Training on augumented user 56453 47/50 current_auc = 0.0
User 56453 AUC after training: 0.0
User 56453 does not improve AUC. Reverting changes.
Training on augumented user 31163 48/50 current_auc = 0.0
User 31163 AUC after training: 0.0
User 31163 does not improve AUC. Reverting changes.
Training on augumented user 34111 49/50 current_auc = 0.0
User 34111 AUC after training: 0.0
User 34111 does not improve AUC. Reverting changes.
[2024-12-02 19:43:27.135012] start test user 130020 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:28.052889] start test user 130020 231/567 recall augumented users by random, augumented_users = [122412, 39021, 27081, 91072, 12905, 76893, 21398, 118862, 82843, 119428, 32111, 13518, 5176, 45845, 118829, 38520, 20263, 126337, 47323, 126032, 121060, 118278, 95207, 94360, 85626, 103267, 43310, 36492, 125218, 84324, 22795, 79164, 127087, 7291, 9410, 13643, 79041, 19196, 28936, 15927, 33353, 12529, 41624, 129171, 13327, 5107, 57041, 77895, 82644, 23879]
[2024-12-02 19:43:28.070761] user = 130020 Cloud 231/567
[2024-12-02 19:43:28.082703] user = 130020 Local 231/567
[2024-12-02 19:43:28.139990] user = 130020 Local+ 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:30.854366] user = 130020 MPDA- 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2857142857142857
Training on augumented user 122412 0/50 current_auc = 0.2857142857142857
User 122412 AUC after training: 0.30612244897959184
User 122412 improves AUC. Keeping the model.
Training on augumented user 39021 1/50 current_auc = 0.30612244897959184
User 39021 AUC after training: 0.30612244897959184
User 39021 does not improve AUC. Reverting changes.
Training on augumented user 27081 2/50 current_auc = 0.30612244897959184
User 27081 AUC after training: 0.30612244897959184
User 27081 does not improve AUC. Reverting changes.
Training on augumented user 91072 3/50 current_auc = 0.30612244897959184
User 91072 AUC after training: 0.30612244897959184
User 91072 does not improve AUC. Reverting changes.
Training on augumented user 12905 4/50 current_auc = 0.30612244897959184
User 12905 AUC after training: 0.2857142857142857
User 12905 does not improve AUC. Reverting changes.
Training on augumented user 76893 5/50 current_auc = 0.30612244897959184
User 76893 AUC after training: 0.2857142857142857
User 76893 does not improve AUC. Reverting changes.
Training on augumented user 21398 6/50 current_auc = 0.30612244897959184
User 21398 AUC after training: 0.2857142857142857
User 21398 does not improve AUC. Reverting changes.
Training on augumented user 118862 7/50 current_auc = 0.30612244897959184
User 118862 AUC after training: 0.2857142857142857
User 118862 does not improve AUC. Reverting changes.
Training on augumented user 82843 8/50 current_auc = 0.30612244897959184
User 82843 AUC after training: 0.30612244897959184
User 82843 does not improve AUC. Reverting changes.
Training on augumented user 119428 9/50 current_auc = 0.30612244897959184
User 119428 AUC after training: 0.2857142857142857
User 119428 does not improve AUC. Reverting changes.
Training on augumented user 32111 10/50 current_auc = 0.30612244897959184
User 32111 AUC after training: 0.30612244897959184
User 32111 does not improve AUC. Reverting changes.
Training on augumented user 13518 11/50 current_auc = 0.30612244897959184
User 13518 AUC after training: 0.30612244897959184
User 13518 does not improve AUC. Reverting changes.
Training on augumented user 5176 12/50 current_auc = 0.30612244897959184
User 5176 AUC after training: 0.30612244897959184
User 5176 does not improve AUC. Reverting changes.
Training on augumented user 45845 13/50 current_auc = 0.30612244897959184
User 45845 AUC after training: 0.30612244897959184
User 45845 does not improve AUC. Reverting changes.
Training on augumented user 118829 14/50 current_auc = 0.30612244897959184
User 118829 AUC after training: 0.30612244897959184
User 118829 does not improve AUC. Reverting changes.
Training on augumented user 38520 15/50 current_auc = 0.30612244897959184
User 38520 AUC after training: 0.30612244897959184
User 38520 does not improve AUC. Reverting changes.
Training on augumented user 20263 16/50 current_auc = 0.30612244897959184
User 20263 AUC after training: 0.2857142857142857
User 20263 does not improve AUC. Reverting changes.
Training on augumented user 126337 17/50 current_auc = 0.30612244897959184
User 126337 AUC after training: 0.30612244897959184
User 126337 does not improve AUC. Reverting changes.
Training on augumented user 47323 18/50 current_auc = 0.30612244897959184
User 47323 AUC after training: 0.30612244897959184
User 47323 does not improve AUC. Reverting changes.
Training on augumented user 126032 19/50 current_auc = 0.30612244897959184
User 126032 AUC after training: 0.2857142857142857
User 126032 does not improve AUC. Reverting changes.
Training on augumented user 121060 20/50 current_auc = 0.30612244897959184
User 121060 AUC after training: 0.2857142857142857
User 121060 does not improve AUC. Reverting changes.
Training on augumented user 118278 21/50 current_auc = 0.30612244897959184
User 118278 AUC after training: 0.30612244897959184
User 118278 does not improve AUC. Reverting changes.
Training on augumented user 95207 22/50 current_auc = 0.30612244897959184
User 95207 AUC after training: 0.30612244897959184
User 95207 does not improve AUC. Reverting changes.
Training on augumented user 94360 23/50 current_auc = 0.30612244897959184
User 94360 AUC after training: 0.30612244897959184
User 94360 does not improve AUC. Reverting changes.
Training on augumented user 85626 24/50 current_auc = 0.30612244897959184
User 85626 AUC after training: 0.30612244897959184
User 85626 does not improve AUC. Reverting changes.
Training on augumented user 103267 25/50 current_auc = 0.30612244897959184
User 103267 AUC after training: 0.2857142857142857
User 103267 does not improve AUC. Reverting changes.
Training on augumented user 43310 26/50 current_auc = 0.30612244897959184
User 43310 AUC after training: 0.2857142857142857
User 43310 does not improve AUC. Reverting changes.
Training on augumented user 36492 27/50 current_auc = 0.30612244897959184
User 36492 AUC after training: 0.2857142857142857
User 36492 does not improve AUC. Reverting changes.
Training on augumented user 125218 28/50 current_auc = 0.30612244897959184
User 125218 AUC after training: 0.2857142857142857
User 125218 does not improve AUC. Reverting changes.
Training on augumented user 84324 29/50 current_auc = 0.30612244897959184
User 84324 AUC after training: 0.2857142857142857
User 84324 does not improve AUC. Reverting changes.
Training on augumented user 22795 30/50 current_auc = 0.30612244897959184
User 22795 AUC after training: 0.30612244897959184
User 22795 does not improve AUC. Reverting changes.
Training on augumented user 79164 31/50 current_auc = 0.30612244897959184
User 79164 AUC after training: 0.30612244897959184
User 79164 does not improve AUC. Reverting changes.
Training on augumented user 127087 32/50 current_auc = 0.30612244897959184
User 127087 AUC after training: 0.30612244897959184
User 127087 does not improve AUC. Reverting changes.
Training on augumented user 7291 33/50 current_auc = 0.30612244897959184
User 7291 AUC after training: 0.2857142857142857
User 7291 does not improve AUC. Reverting changes.
Training on augumented user 9410 34/50 current_auc = 0.30612244897959184
User 9410 AUC after training: 0.2857142857142857
User 9410 does not improve AUC. Reverting changes.
Training on augumented user 13643 35/50 current_auc = 0.30612244897959184
User 13643 AUC after training: 0.30612244897959184
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 79041 36/50 current_auc = 0.30612244897959184
User 79041 AUC after training: 0.2857142857142857
User 79041 does not improve AUC. Reverting changes.
Training on augumented user 19196 37/50 current_auc = 0.30612244897959184
User 19196 AUC after training: 0.30612244897959184
User 19196 does not improve AUC. Reverting changes.
Training on augumented user 28936 38/50 current_auc = 0.30612244897959184
User 28936 AUC after training: 0.2857142857142857
User 28936 does not improve AUC. Reverting changes.
Training on augumented user 15927 39/50 current_auc = 0.30612244897959184
User 15927 AUC after training: 0.2857142857142857
User 15927 does not improve AUC. Reverting changes.
Training on augumented user 33353 40/50 current_auc = 0.30612244897959184
User 33353 AUC after training: 0.2857142857142857
User 33353 does not improve AUC. Reverting changes.
Training on augumented user 12529 41/50 current_auc = 0.30612244897959184
User 12529 AUC after training: 0.30612244897959184
User 12529 does not improve AUC. Reverting changes.
Training on augumented user 41624 42/50 current_auc = 0.30612244897959184
User 41624 AUC after training: 0.30612244897959184
User 41624 does not improve AUC. Reverting changes.
Training on augumented user 129171 43/50 current_auc = 0.30612244897959184
User 129171 AUC after training: 0.2857142857142857
User 129171 does not improve AUC. Reverting changes.
Training on augumented user 13327 44/50 current_auc = 0.30612244897959184
User 13327 AUC after training: 0.30612244897959184
User 13327 does not improve AUC. Reverting changes.
Training on augumented user 5107 45/50 current_auc = 0.30612244897959184
User 5107 AUC after training: 0.2653061224489796
User 5107 does not improve AUC. Reverting changes.
Training on augumented user 57041 46/50 current_auc = 0.30612244897959184
User 57041 AUC after training: 0.30612244897959184
User 57041 does not improve AUC. Reverting changes.
Training on augumented user 77895 47/50 current_auc = 0.30612244897959184
User 77895 AUC after training: 0.2857142857142857
User 77895 does not improve AUC. Reverting changes.
Training on augumented user 82644 48/50 current_auc = 0.30612244897959184
User 82644 AUC after training: 0.2857142857142857
User 82644 does not improve AUC. Reverting changes.
Training on augumented user 23879 49/50 current_auc = 0.30612244897959184
User 23879 AUC after training: 0.2857142857142857
User 23879 does not improve AUC. Reverting changes.
[2024-12-02 19:44:01.631339] start test user 130062 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:02.406455] start test user 130062 232/567 recall augumented users by random, augumented_users = [71135, 122627, 9085, 9515, 112935, 63275, 125219, 96637, 75741, 59687, 4194, 105255, 129336, 116902, 438, 102504, 43133, 2981, 49928, 135517, 55790, 93747, 57545, 88237, 50733, 2969, 50992, 137074, 34064, 21661, 87050, 78708, 47479, 84591, 31508, 107891, 18815, 76499, 9010, 58905, 76976, 50520, 93260, 55018, 91277, 2029, 40123, 126856, 57710, 46822]
[2024-12-02 19:44:02.424201] user = 130062 Cloud 232/567
[2024-12-02 19:44:02.436876] user = 130062 Local 232/567
[2024-12-02 19:44:02.501747] user = 130062 Local+ 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:05.138933] user = 130062 MPDA- 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.51875
Training on augumented user 71135 0/50 current_auc = 0.51875
User 71135 AUC after training: 0.51875
User 71135 does not improve AUC. Reverting changes.
Training on augumented user 122627 1/50 current_auc = 0.51875
User 122627 AUC after training: 0.525
User 122627 improves AUC. Keeping the model.
Training on augumented user 9085 2/50 current_auc = 0.525
User 9085 AUC after training: 0.528125
User 9085 improves AUC. Keeping the model.
Training on augumented user 9515 3/50 current_auc = 0.528125
User 9515 AUC after training: 0.528125
User 9515 does not improve AUC. Reverting changes.
Training on augumented user 112935 4/50 current_auc = 0.528125
User 112935 AUC after training: 0.534375
User 112935 improves AUC. Keeping the model.
Training on augumented user 63275 5/50 current_auc = 0.534375
User 63275 AUC after training: 0.534375
User 63275 does not improve AUC. Reverting changes.
Training on augumented user 125219 6/50 current_auc = 0.534375
User 125219 AUC after training: 0.534375
User 125219 does not improve AUC. Reverting changes.
Training on augumented user 96637 7/50 current_auc = 0.534375
User 96637 AUC after training: 0.534375
User 96637 does not improve AUC. Reverting changes.
Training on augumented user 75741 8/50 current_auc = 0.534375
User 75741 AUC after training: 0.534375
User 75741 does not improve AUC. Reverting changes.
Training on augumented user 59687 9/50 current_auc = 0.534375
User 59687 AUC after training: 0.534375
User 59687 does not improve AUC. Reverting changes.
Training on augumented user 4194 10/50 current_auc = 0.534375
User 4194 AUC after training: 0.534375
User 4194 does not improve AUC. Reverting changes.
Training on augumented user 105255 11/50 current_auc = 0.534375
User 105255 AUC after training: 0.534375
User 105255 does not improve AUC. Reverting changes.
Training on augumented user 129336 12/50 current_auc = 0.534375
User 129336 AUC after training: 0.534375
User 129336 does not improve AUC. Reverting changes.
Training on augumented user 116902 13/50 current_auc = 0.534375
User 116902 AUC after training: 0.534375
User 116902 does not improve AUC. Reverting changes.
Training on augumented user 438 14/50 current_auc = 0.534375
User 438 AUC after training: 0.534375
User 438 does not improve AUC. Reverting changes.
Training on augumented user 102504 15/50 current_auc = 0.534375
User 102504 AUC after training: 0.534375
User 102504 does not improve AUC. Reverting changes.
Training on augumented user 43133 16/50 current_auc = 0.534375
User 43133 AUC after training: 0.534375
User 43133 does not improve AUC. Reverting changes.
Training on augumented user 2981 17/50 current_auc = 0.534375
User 2981 AUC after training: 0.534375
User 2981 does not improve AUC. Reverting changes.
Training on augumented user 49928 18/50 current_auc = 0.534375
User 49928 AUC after training: 0.534375
User 49928 does not improve AUC. Reverting changes.
Training on augumented user 135517 19/50 current_auc = 0.534375
User 135517 AUC after training: 0.534375
User 135517 does not improve AUC. Reverting changes.
Training on augumented user 55790 20/50 current_auc = 0.534375
User 55790 AUC after training: 0.525
User 55790 does not improve AUC. Reverting changes.
Training on augumented user 93747 21/50 current_auc = 0.534375
User 93747 AUC after training: 0.534375
User 93747 does not improve AUC. Reverting changes.
Training on augumented user 57545 22/50 current_auc = 0.534375
User 57545 AUC after training: 0.53125
User 57545 does not improve AUC. Reverting changes.
Training on augumented user 88237 23/50 current_auc = 0.534375
User 88237 AUC after training: 0.534375
User 88237 does not improve AUC. Reverting changes.
Training on augumented user 50733 24/50 current_auc = 0.534375
User 50733 AUC after training: 0.534375
User 50733 does not improve AUC. Reverting changes.
Training on augumented user 2969 25/50 current_auc = 0.534375
User 2969 AUC after training: 0.534375
User 2969 does not improve AUC. Reverting changes.
Training on augumented user 50992 26/50 current_auc = 0.534375
User 50992 AUC after training: 0.534375
User 50992 does not improve AUC. Reverting changes.
Training on augumented user 137074 27/50 current_auc = 0.534375
User 137074 AUC after training: 0.53125
User 137074 does not improve AUC. Reverting changes.
Training on augumented user 34064 28/50 current_auc = 0.534375
User 34064 AUC after training: 0.534375
User 34064 does not improve AUC. Reverting changes.
Training on augumented user 21661 29/50 current_auc = 0.534375
User 21661 AUC after training: 0.534375
User 21661 does not improve AUC. Reverting changes.
Training on augumented user 87050 30/50 current_auc = 0.534375
User 87050 AUC after training: 0.534375
User 87050 does not improve AUC. Reverting changes.
Training on augumented user 78708 31/50 current_auc = 0.534375
User 78708 AUC after training: 0.534375
User 78708 does not improve AUC. Reverting changes.
Training on augumented user 47479 32/50 current_auc = 0.534375
User 47479 AUC after training: 0.53125
User 47479 does not improve AUC. Reverting changes.
Training on augumented user 84591 33/50 current_auc = 0.534375
User 84591 AUC after training: 0.534375
User 84591 does not improve AUC. Reverting changes.
Training on augumented user 31508 34/50 current_auc = 0.534375
User 31508 AUC after training: 0.534375
User 31508 does not improve AUC. Reverting changes.
Training on augumented user 107891 35/50 current_auc = 0.534375
User 107891 AUC after training: 0.534375
User 107891 does not improve AUC. Reverting changes.
Training on augumented user 18815 36/50 current_auc = 0.534375
User 18815 AUC after training: 0.53125
User 18815 does not improve AUC. Reverting changes.
Training on augumented user 76499 37/50 current_auc = 0.534375
User 76499 AUC after training: 0.534375
User 76499 does not improve AUC. Reverting changes.
Training on augumented user 9010 38/50 current_auc = 0.534375
User 9010 AUC after training: 0.534375
User 9010 does not improve AUC. Reverting changes.
Training on augumented user 58905 39/50 current_auc = 0.534375
User 58905 AUC after training: 0.534375
User 58905 does not improve AUC. Reverting changes.
Training on augumented user 76976 40/50 current_auc = 0.534375
User 76976 AUC after training: 0.534375
User 76976 does not improve AUC. Reverting changes.
Training on augumented user 50520 41/50 current_auc = 0.534375
User 50520 AUC after training: 0.534375
User 50520 does not improve AUC. Reverting changes.
Training on augumented user 93260 42/50 current_auc = 0.534375
User 93260 AUC after training: 0.534375
User 93260 does not improve AUC. Reverting changes.
Training on augumented user 55018 43/50 current_auc = 0.534375
User 55018 AUC after training: 0.528125
User 55018 does not improve AUC. Reverting changes.
Training on augumented user 91277 44/50 current_auc = 0.534375
User 91277 AUC after training: 0.534375
User 91277 does not improve AUC. Reverting changes.
Training on augumented user 2029 45/50 current_auc = 0.534375
User 2029 AUC after training: 0.534375
User 2029 does not improve AUC. Reverting changes.
Training on augumented user 40123 46/50 current_auc = 0.534375
User 40123 AUC after training: 0.53125
User 40123 does not improve AUC. Reverting changes.
Training on augumented user 126856 47/50 current_auc = 0.534375
User 126856 AUC after training: 0.534375
User 126856 does not improve AUC. Reverting changes.
Training on augumented user 57710 48/50 current_auc = 0.534375
User 57710 AUC after training: 0.53125
User 57710 does not improve AUC. Reverting changes.
Training on augumented user 46822 49/50 current_auc = 0.534375
User 46822 AUC after training: 0.534375
User 46822 does not improve AUC. Reverting changes.
[2024-12-02 19:44:33.872781] start test user 130112 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:34.565593] start test user 130112 233/567 recall augumented users by random, augumented_users = [21484, 77664, 15826, 122800, 113162, 93444, 3538, 46619, 22706, 47092, 5209, 13794, 53057, 93314, 101607, 20010, 35724, 97705, 132630, 68441, 8110, 113536, 120537, 74180, 58394, 88865, 24731, 78571, 43589, 58818, 86620, 75773, 14852, 31699, 99409, 127840, 73003, 43531, 78764, 37919, 18721, 77598, 42275, 36460, 71731, 132169, 9289, 122991, 1179, 47003]
[2024-12-02 19:44:34.591804] user = 130112 Cloud 233/567
[2024-12-02 19:44:34.609427] user = 130112 Local 233/567
[2024-12-02 19:44:34.718250] user = 130112 Local+ 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:37.920815] user = 130112 MPDA- 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6805555555555556
Training on augumented user 21484 0/50 current_auc = 0.6805555555555556
User 21484 AUC after training: 0.6805555555555556
User 21484 does not improve AUC. Reverting changes.
Training on augumented user 77664 1/50 current_auc = 0.6805555555555556
User 77664 AUC after training: 0.6763888888888889
User 77664 does not improve AUC. Reverting changes.
Training on augumented user 15826 2/50 current_auc = 0.6805555555555556
User 15826 AUC after training: 0.6805555555555556
User 15826 does not improve AUC. Reverting changes.
Training on augumented user 122800 3/50 current_auc = 0.6805555555555556
User 122800 AUC after training: 0.6805555555555556
User 122800 does not improve AUC. Reverting changes.
Training on augumented user 113162 4/50 current_auc = 0.6805555555555556
User 113162 AUC after training: 0.6805555555555556
User 113162 does not improve AUC. Reverting changes.
Training on augumented user 93444 5/50 current_auc = 0.6805555555555556
User 93444 AUC after training: 0.6805555555555556
User 93444 does not improve AUC. Reverting changes.
Training on augumented user 3538 6/50 current_auc = 0.6805555555555556
User 3538 AUC after training: 0.6791666666666667
User 3538 does not improve AUC. Reverting changes.
Training on augumented user 46619 7/50 current_auc = 0.6805555555555556
User 46619 AUC after training: 0.6805555555555556
User 46619 does not improve AUC. Reverting changes.
Training on augumented user 22706 8/50 current_auc = 0.6805555555555556
User 22706 AUC after training: 0.6805555555555556
User 22706 does not improve AUC. Reverting changes.
Training on augumented user 47092 9/50 current_auc = 0.6805555555555556
User 47092 AUC after training: 0.6805555555555556
User 47092 does not improve AUC. Reverting changes.
Training on augumented user 5209 10/50 current_auc = 0.6805555555555556
User 5209 AUC after training: 0.6777777777777778
User 5209 does not improve AUC. Reverting changes.
Training on augumented user 13794 11/50 current_auc = 0.6805555555555556
User 13794 AUC after training: 0.6805555555555556
User 13794 does not improve AUC. Reverting changes.
Training on augumented user 53057 12/50 current_auc = 0.6805555555555556
User 53057 AUC after training: 0.6805555555555556
User 53057 does not improve AUC. Reverting changes.
Training on augumented user 93314 13/50 current_auc = 0.6805555555555556
User 93314 AUC after training: 0.6777777777777778
User 93314 does not improve AUC. Reverting changes.
Training on augumented user 101607 14/50 current_auc = 0.6805555555555556
User 101607 AUC after training: 0.6805555555555556
User 101607 does not improve AUC. Reverting changes.
Training on augumented user 20010 15/50 current_auc = 0.6805555555555556
User 20010 AUC after training: 0.6805555555555556
User 20010 does not improve AUC. Reverting changes.
Training on augumented user 35724 16/50 current_auc = 0.6805555555555556
User 35724 AUC after training: 0.6805555555555556
User 35724 does not improve AUC. Reverting changes.
Training on augumented user 97705 17/50 current_auc = 0.6805555555555556
User 97705 AUC after training: 0.6805555555555556
User 97705 does not improve AUC. Reverting changes.
Training on augumented user 132630 18/50 current_auc = 0.6805555555555556
User 132630 AUC after training: 0.6791666666666667
User 132630 does not improve AUC. Reverting changes.
Training on augumented user 68441 19/50 current_auc = 0.6805555555555556
User 68441 AUC after training: 0.6805555555555556
User 68441 does not improve AUC. Reverting changes.
Training on augumented user 8110 20/50 current_auc = 0.6805555555555556
User 8110 AUC after training: 0.6805555555555556
User 8110 does not improve AUC. Reverting changes.
Training on augumented user 113536 21/50 current_auc = 0.6805555555555556
User 113536 AUC after training: 0.6805555555555556
User 113536 does not improve AUC. Reverting changes.
Training on augumented user 120537 22/50 current_auc = 0.6805555555555556
User 120537 AUC after training: 0.6763888888888889
User 120537 does not improve AUC. Reverting changes.
Training on augumented user 74180 23/50 current_auc = 0.6805555555555556
User 74180 AUC after training: 0.6805555555555556
User 74180 does not improve AUC. Reverting changes.
Training on augumented user 58394 24/50 current_auc = 0.6805555555555556
User 58394 AUC after training: 0.6805555555555556
User 58394 does not improve AUC. Reverting changes.
Training on augumented user 88865 25/50 current_auc = 0.6805555555555556
User 88865 AUC after training: 0.6805555555555556
User 88865 does not improve AUC. Reverting changes.
Training on augumented user 24731 26/50 current_auc = 0.6805555555555556
User 24731 AUC after training: 0.6777777777777778
User 24731 does not improve AUC. Reverting changes.
Training on augumented user 78571 27/50 current_auc = 0.6805555555555556
User 78571 AUC after training: 0.6805555555555556
User 78571 does not improve AUC. Reverting changes.
Training on augumented user 43589 28/50 current_auc = 0.6805555555555556
User 43589 AUC after training: 0.6805555555555556
User 43589 does not improve AUC. Reverting changes.
Training on augumented user 58818 29/50 current_auc = 0.6805555555555556
User 58818 AUC after training: 0.6805555555555556
User 58818 does not improve AUC. Reverting changes.
Training on augumented user 86620 30/50 current_auc = 0.6805555555555556
User 86620 AUC after training: 0.6805555555555556
User 86620 does not improve AUC. Reverting changes.
Training on augumented user 75773 31/50 current_auc = 0.6805555555555556
User 75773 AUC after training: 0.6791666666666667
User 75773 does not improve AUC. Reverting changes.
Training on augumented user 14852 32/50 current_auc = 0.6805555555555556
User 14852 AUC after training: 0.6805555555555556
User 14852 does not improve AUC. Reverting changes.
Training on augumented user 31699 33/50 current_auc = 0.6805555555555556
User 31699 AUC after training: 0.6805555555555556
User 31699 does not improve AUC. Reverting changes.
Training on augumented user 99409 34/50 current_auc = 0.6805555555555556
User 99409 AUC after training: 0.6805555555555556
User 99409 does not improve AUC. Reverting changes.
Training on augumented user 127840 35/50 current_auc = 0.6805555555555556
User 127840 AUC after training: 0.6777777777777778
User 127840 does not improve AUC. Reverting changes.
Training on augumented user 73003 36/50 current_auc = 0.6805555555555556
User 73003 AUC after training: 0.6805555555555556
User 73003 does not improve AUC. Reverting changes.
Training on augumented user 43531 37/50 current_auc = 0.6805555555555556
User 43531 AUC after training: 0.6805555555555556
User 43531 does not improve AUC. Reverting changes.
Training on augumented user 78764 38/50 current_auc = 0.6805555555555556
User 78764 AUC after training: 0.6805555555555556
User 78764 does not improve AUC. Reverting changes.
Training on augumented user 37919 39/50 current_auc = 0.6805555555555556
User 37919 AUC after training: 0.6805555555555556
User 37919 does not improve AUC. Reverting changes.
Training on augumented user 18721 40/50 current_auc = 0.6805555555555556
User 18721 AUC after training: 0.6805555555555556
User 18721 does not improve AUC. Reverting changes.
Training on augumented user 77598 41/50 current_auc = 0.6805555555555556
User 77598 AUC after training: 0.6777777777777778
User 77598 does not improve AUC. Reverting changes.
Training on augumented user 42275 42/50 current_auc = 0.6805555555555556
User 42275 AUC after training: 0.6805555555555556
User 42275 does not improve AUC. Reverting changes.
Training on augumented user 36460 43/50 current_auc = 0.6805555555555556
User 36460 AUC after training: 0.6805555555555556
User 36460 does not improve AUC. Reverting changes.
Training on augumented user 71731 44/50 current_auc = 0.6805555555555556
User 71731 AUC after training: 0.6777777777777778
User 71731 does not improve AUC. Reverting changes.
Training on augumented user 132169 45/50 current_auc = 0.6805555555555556
User 132169 AUC after training: 0.6805555555555556
User 132169 does not improve AUC. Reverting changes.
Training on augumented user 9289 46/50 current_auc = 0.6805555555555556
User 9289 AUC after training: 0.6805555555555556
User 9289 does not improve AUC. Reverting changes.
Training on augumented user 122991 47/50 current_auc = 0.6805555555555556
User 122991 AUC after training: 0.6805555555555556
User 122991 does not improve AUC. Reverting changes.
Training on augumented user 1179 48/50 current_auc = 0.6805555555555556
User 1179 AUC after training: 0.6805555555555556
User 1179 does not improve AUC. Reverting changes.
Training on augumented user 47003 49/50 current_auc = 0.6805555555555556
User 47003 AUC after training: 0.6777777777777778
User 47003 does not improve AUC. Reverting changes.
[2024-12-02 19:45:05.004108] start test user 130130 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:05.632505] start test user 130130 234/567 recall augumented users by random, augumented_users = [122967, 49536, 29785, 20331, 122046, 67677, 12865, 68592, 65873, 44219, 23455, 135969, 44511, 135220, 83845, 121308, 20235, 54959, 104731, 124738, 86319, 33053, 68240, 11574, 33374, 134905, 12139, 61672, 53384, 6612, 75710, 92228, 95803, 96888, 44623, 30689, 120452, 66861, 45069, 92612, 22899, 709, 13115, 47591, 61116, 96510, 125974, 30533, 114749, 76004]
[2024-12-02 19:45:05.648263] user = 130130 Cloud 234/567
[2024-12-02 19:45:05.676550] user = 130130 Local 234/567
[2024-12-02 19:45:05.783200] user = 130130 Local+ 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:08.318400] user = 130130 MPDA- 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5803365937859608
Training on augumented user 122967 0/50 current_auc = 0.5803365937859608
User 122967 AUC after training: 0.5790420023014959
User 122967 does not improve AUC. Reverting changes.
Training on augumented user 49536 1/50 current_auc = 0.5803365937859608
User 49536 AUC after training: 0.578898158803222
User 49536 does not improve AUC. Reverting changes.
Training on augumented user 29785 2/50 current_auc = 0.5803365937859608
User 29785 AUC after training: 0.5797612197928653
User 29785 does not improve AUC. Reverting changes.
Training on augumented user 20331 3/50 current_auc = 0.5803365937859608
User 20331 AUC after training: 0.5777474108170311
User 20331 does not improve AUC. Reverting changes.
Training on augumented user 122046 4/50 current_auc = 0.5803365937859608
User 122046 AUC after training: 0.5783227848101266
User 122046 does not improve AUC. Reverting changes.
Training on augumented user 67677 5/50 current_auc = 0.5803365937859608
User 67677 AUC after training: 0.5814154200230149
User 67677 improves AUC. Keeping the model.
Training on augumented user 12865 6/50 current_auc = 0.5814154200230149
User 12865 AUC after training: 0.5809838895281934
User 12865 does not improve AUC. Reverting changes.
Training on augumented user 68592 7/50 current_auc = 0.5814154200230149
User 68592 AUC after training: 0.5809838895281934
User 68592 does not improve AUC. Reverting changes.
Training on augumented user 65873 8/50 current_auc = 0.5814154200230149
User 65873 AUC after training: 0.5818469505178365
User 65873 improves AUC. Keeping the model.
Training on augumented user 44219 9/50 current_auc = 0.5818469505178365
User 44219 AUC after training: 0.5804085155350978
User 44219 does not improve AUC. Reverting changes.
Training on augumented user 23455 10/50 current_auc = 0.5818469505178365
User 23455 AUC after training: 0.5819907940161104
User 23455 improves AUC. Keeping the model.
Training on augumented user 135969 11/50 current_auc = 0.5819907940161104
User 135969 AUC after training: 0.5821346375143843
User 135969 improves AUC. Keeping the model.
Training on augumented user 44511 12/50 current_auc = 0.5821346375143843
User 44511 AUC after training: 0.5811277330264671
User 44511 does not improve AUC. Reverting changes.
Training on augumented user 135220 13/50 current_auc = 0.5821346375143843
User 135220 AUC after training: 0.5817031070195627
User 135220 does not improve AUC. Reverting changes.
Training on augumented user 83845 14/50 current_auc = 0.5821346375143843
User 83845 AUC after training: 0.5834292289988492
User 83845 improves AUC. Keeping the model.
Training on augumented user 121308 15/50 current_auc = 0.5834292289988492
User 121308 AUC after training: 0.578970080552359
User 121308 does not improve AUC. Reverting changes.
Training on augumented user 20235 16/50 current_auc = 0.5834292289988492
User 20235 AUC after training: 0.5798331415420024
User 20235 does not improve AUC. Reverting changes.
Training on augumented user 54959 17/50 current_auc = 0.5834292289988492
User 54959 AUC after training: 0.5829257767548908
User 54959 does not improve AUC. Reverting changes.
Training on augumented user 104731 18/50 current_auc = 0.5834292289988492
User 104731 AUC after training: 0.5816311852704257
User 104731 does not improve AUC. Reverting changes.
Training on augumented user 124738 19/50 current_auc = 0.5834292289988492
User 124738 AUC after training: 0.5821346375143843
User 124738 does not improve AUC. Reverting changes.
Training on augumented user 86319 20/50 current_auc = 0.5834292289988492
User 86319 AUC after training: 0.5840046029919448
User 86319 improves AUC. Keeping the model.
Training on augumented user 33053 21/50 current_auc = 0.5840046029919448
User 33053 AUC after training: 0.5804085155350979
User 33053 does not improve AUC. Reverting changes.
Training on augumented user 68240 22/50 current_auc = 0.5840046029919448
User 68240 AUC after training: 0.5845080552359033
User 68240 improves AUC. Keeping the model.
Training on augumented user 11574 23/50 current_auc = 0.5845080552359033
User 11574 AUC after training: 0.5845080552359033
User 11574 does not improve AUC. Reverting changes.
Training on augumented user 33374 24/50 current_auc = 0.5845080552359033
User 33374 AUC after training: 0.5854430379746836
User 33374 improves AUC. Keeping the model.
Training on augumented user 134905 25/50 current_auc = 0.5854430379746836
User 134905 AUC after training: 0.5817031070195626
User 134905 does not improve AUC. Reverting changes.
Training on augumented user 12139 26/50 current_auc = 0.5854430379746836
User 12139 AUC after training: 0.5801927502876869
User 12139 does not improve AUC. Reverting changes.
Training on augumented user 61672 27/50 current_auc = 0.5854430379746836
User 61672 AUC after training: 0.5852991944764097
User 61672 does not improve AUC. Reverting changes.
Training on augumented user 53384 28/50 current_auc = 0.5854430379746836
User 53384 AUC after training: 0.5849395857307249
User 53384 does not improve AUC. Reverting changes.
Training on augumented user 6612 29/50 current_auc = 0.5854430379746836
User 6612 AUC after training: 0.5842922899884926
User 6612 does not improve AUC. Reverting changes.
Training on augumented user 75710 30/50 current_auc = 0.5854430379746836
User 75710 AUC after training: 0.584795742232451
User 75710 does not improve AUC. Reverting changes.
Training on augumented user 92228 31/50 current_auc = 0.5854430379746836
User 92228 AUC after training: 0.5844361334867664
User 92228 does not improve AUC. Reverting changes.
Training on augumented user 95803 32/50 current_auc = 0.5854430379746836
User 95803 AUC after training: 0.5840046029919448
User 95803 does not improve AUC. Reverting changes.
Training on augumented user 96888 33/50 current_auc = 0.5854430379746836
User 96888 AUC after training: 0.5861622554660528
User 96888 improves AUC. Keeping the model.
Training on augumented user 44623 34/50 current_auc = 0.5861622554660528
User 44623 AUC after training: 0.5859464902186421
User 44623 does not improve AUC. Reverting changes.
Training on augumented user 30689 35/50 current_auc = 0.5861622554660528
User 30689 AUC after training: 0.5869533947065593
User 30689 improves AUC. Keeping the model.
Training on augumented user 120452 36/50 current_auc = 0.5869533947065593
User 120452 AUC after training: 0.5861622554660529
User 120452 does not improve AUC. Reverting changes.
Training on augumented user 66861 37/50 current_auc = 0.5869533947065593
User 66861 AUC after training: 0.5850115074798619
User 66861 does not improve AUC. Reverting changes.
Training on augumented user 45069 38/50 current_auc = 0.5869533947065593
User 45069 AUC after training: 0.5878164556962026
User 45069 improves AUC. Keeping the model.
Training on augumented user 92612 39/50 current_auc = 0.5878164556962026
User 92612 AUC after training: 0.5875287686996548
User 92612 does not improve AUC. Reverting changes.
Training on augumented user 22899 40/50 current_auc = 0.5878164556962026
User 22899 AUC after training: 0.5808400460299195
User 22899 does not improve AUC. Reverting changes.
Training on augumented user 709 41/50 current_auc = 0.5878164556962026
User 709 AUC after training: 0.5878164556962024
User 709 does not improve AUC. Reverting changes.
Training on augumented user 13115 42/50 current_auc = 0.5878164556962026
User 13115 AUC after training: 0.5865937859608745
User 13115 does not improve AUC. Reverting changes.
Training on augumented user 47591 43/50 current_auc = 0.5878164556962026
User 47591 AUC after training: 0.5855149597238205
User 47591 does not improve AUC. Reverting changes.
Training on augumented user 61116 44/50 current_auc = 0.5878164556962026
User 61116 AUC after training: 0.5852991944764097
User 61116 does not improve AUC. Reverting changes.
Training on augumented user 96510 45/50 current_auc = 0.5878164556962026
User 96510 AUC after training: 0.5869533947065593
User 96510 does not improve AUC. Reverting changes.
Training on augumented user 125974 46/50 current_auc = 0.5878164556962026
User 125974 AUC after training: 0.5870253164556962
User 125974 does not improve AUC. Reverting changes.
Training on augumented user 30533 47/50 current_auc = 0.5878164556962026
User 30533 AUC after training: 0.5863780207134637
User 30533 does not improve AUC. Reverting changes.
Training on augumented user 114749 48/50 current_auc = 0.5878164556962026
User 114749 AUC after training: 0.5835730724971231
User 114749 does not improve AUC. Reverting changes.
Training on augumented user 76004 49/50 current_auc = 0.5878164556962026
User 76004 AUC after training: 0.5817750287686997
User 76004 does not improve AUC. Reverting changes.
[2024-12-02 19:45:37.342040] start test user 130165 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:38.021593] start test user 130165 235/567 recall augumented users by random, augumented_users = [113670, 75907, 47803, 27253, 47112, 96007, 76272, 87600, 109906, 74927, 83319, 26288, 93353, 69686, 86962, 12318, 11383, 23241, 5821, 6655, 24231, 105433, 110272, 119555, 107440, 30056, 136672, 126482, 70745, 86787, 124499, 81233, 127679, 18471, 34392, 114750, 39938, 43108, 16414, 116158, 9032, 7967, 12870, 11739, 25762, 17459, 124889, 81702, 54979, 111550]
[2024-12-02 19:45:38.038227] user = 130165 Cloud 235/567
[2024-12-02 19:45:38.084587] user = 130165 Local 235/567
[2024-12-02 19:45:38.231329] user = 130165 Local+ 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:40.773909] user = 130165 MPDA- 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8323076923076924
Training on augumented user 113670 0/50 current_auc = 0.8323076923076924
User 113670 AUC after training: 0.8322377622377621
User 113670 does not improve AUC. Reverting changes.
Training on augumented user 75907 1/50 current_auc = 0.8323076923076924
User 75907 AUC after training: 0.8322377622377622
User 75907 does not improve AUC. Reverting changes.
Training on augumented user 47803 2/50 current_auc = 0.8323076923076924
User 47803 AUC after training: 0.8316783216783217
User 47803 does not improve AUC. Reverting changes.
Training on augumented user 27253 3/50 current_auc = 0.8323076923076924
User 27253 AUC after training: 0.832027972027972
User 27253 does not improve AUC. Reverting changes.
Training on augumented user 47112 4/50 current_auc = 0.8323076923076924
User 47112 AUC after training: 0.8322027972027972
User 47112 does not improve AUC. Reverting changes.
Training on augumented user 96007 5/50 current_auc = 0.8323076923076924
User 96007 AUC after training: 0.8325874125874126
User 96007 improves AUC. Keeping the model.
Training on augumented user 76272 6/50 current_auc = 0.8325874125874126
User 76272 AUC after training: 0.8333566433566434
User 76272 improves AUC. Keeping the model.
Training on augumented user 87600 7/50 current_auc = 0.8333566433566434
User 87600 AUC after training: 0.8338461538461538
User 87600 improves AUC. Keeping the model.
Training on augumented user 109906 8/50 current_auc = 0.8338461538461538
User 109906 AUC after training: 0.8335664335664336
User 109906 does not improve AUC. Reverting changes.
Training on augumented user 74927 9/50 current_auc = 0.8338461538461538
User 74927 AUC after training: 0.8338461538461539
User 74927 improves AUC. Keeping the model.
Training on augumented user 83319 10/50 current_auc = 0.8338461538461539
User 83319 AUC after training: 0.8331468531468532
User 83319 does not improve AUC. Reverting changes.
Training on augumented user 26288 11/50 current_auc = 0.8338461538461539
User 26288 AUC after training: 0.833006993006993
User 26288 does not improve AUC. Reverting changes.
Training on augumented user 93353 12/50 current_auc = 0.8338461538461539
User 93353 AUC after training: 0.8339160839160839
User 93353 improves AUC. Keeping the model.
Training on augumented user 69686 13/50 current_auc = 0.8339160839160839
User 69686 AUC after training: 0.8337062937062938
User 69686 does not improve AUC. Reverting changes.
Training on augumented user 86962 14/50 current_auc = 0.8339160839160839
User 86962 AUC after training: 0.8344755244755244
User 86962 improves AUC. Keeping the model.
Training on augumented user 12318 15/50 current_auc = 0.8344755244755244
User 12318 AUC after training: 0.8335664335664336
User 12318 does not improve AUC. Reverting changes.
Training on augumented user 11383 16/50 current_auc = 0.8344755244755244
User 11383 AUC after training: 0.8339160839160839
User 11383 does not improve AUC. Reverting changes.
Training on augumented user 23241 17/50 current_auc = 0.8344755244755244
User 23241 AUC after training: 0.833986013986014
User 23241 does not improve AUC. Reverting changes.
Training on augumented user 5821 18/50 current_auc = 0.8344755244755244
User 5821 AUC after training: 0.8341258741258741
User 5821 does not improve AUC. Reverting changes.
Training on augumented user 6655 19/50 current_auc = 0.8344755244755244
User 6655 AUC after training: 0.8349650349650349
User 6655 improves AUC. Keeping the model.
Training on augumented user 24231 20/50 current_auc = 0.8349650349650349
User 24231 AUC after training: 0.8345454545454546
User 24231 does not improve AUC. Reverting changes.
Training on augumented user 105433 21/50 current_auc = 0.8349650349650349
User 105433 AUC after training: 0.8346853146853147
User 105433 does not improve AUC. Reverting changes.
Training on augumented user 110272 22/50 current_auc = 0.8349650349650349
User 110272 AUC after training: 0.8340559440559441
User 110272 does not improve AUC. Reverting changes.
Training on augumented user 119555 23/50 current_auc = 0.8349650349650349
User 119555 AUC after training: 0.833986013986014
User 119555 does not improve AUC. Reverting changes.
Training on augumented user 107440 24/50 current_auc = 0.8349650349650349
User 107440 AUC after training: 0.8352447552447553
User 107440 improves AUC. Keeping the model.
Training on augumented user 30056 25/50 current_auc = 0.8352447552447553
User 30056 AUC after training: 0.8346153846153846
User 30056 does not improve AUC. Reverting changes.
Training on augumented user 136672 26/50 current_auc = 0.8352447552447553
User 136672 AUC after training: 0.8355244755244755
User 136672 improves AUC. Keeping the model.
Training on augumented user 126482 27/50 current_auc = 0.8355244755244755
User 126482 AUC after training: 0.8348951048951049
User 126482 does not improve AUC. Reverting changes.
Training on augumented user 70745 28/50 current_auc = 0.8355244755244755
User 70745 AUC after training: 0.8351048951048952
User 70745 does not improve AUC. Reverting changes.
Training on augumented user 86787 29/50 current_auc = 0.8355244755244755
User 86787 AUC after training: 0.8353846153846154
User 86787 does not improve AUC. Reverting changes.
Training on augumented user 124499 30/50 current_auc = 0.8355244755244755
User 124499 AUC after training: 0.8348951048951049
User 124499 does not improve AUC. Reverting changes.
Training on augumented user 81233 31/50 current_auc = 0.8355244755244755
User 81233 AUC after training: 0.835034965034965
User 81233 does not improve AUC. Reverting changes.
Training on augumented user 127679 32/50 current_auc = 0.8355244755244755
User 127679 AUC after training: 0.8350349650349651
User 127679 does not improve AUC. Reverting changes.
Training on augumented user 18471 33/50 current_auc = 0.8355244755244755
User 18471 AUC after training: 0.8353146853146853
User 18471 does not improve AUC. Reverting changes.
Training on augumented user 34392 34/50 current_auc = 0.8355244755244755
User 34392 AUC after training: 0.835034965034965
User 34392 does not improve AUC. Reverting changes.
Training on augumented user 114750 35/50 current_auc = 0.8355244755244755
User 114750 AUC after training: 0.8347552447552448
User 114750 does not improve AUC. Reverting changes.
Training on augumented user 39938 36/50 current_auc = 0.8355244755244755
User 39938 AUC after training: 0.8354545454545456
User 39938 does not improve AUC. Reverting changes.
Training on augumented user 43108 37/50 current_auc = 0.8355244755244755
User 43108 AUC after training: 0.8346853146853147
User 43108 does not improve AUC. Reverting changes.
Training on augumented user 16414 38/50 current_auc = 0.8355244755244755
User 16414 AUC after training: 0.8357342657342658
User 16414 improves AUC. Keeping the model.
Training on augumented user 116158 39/50 current_auc = 0.8357342657342658
User 116158 AUC after training: 0.8347552447552448
User 116158 does not improve AUC. Reverting changes.
Training on augumented user 9032 40/50 current_auc = 0.8357342657342658
User 9032 AUC after training: 0.836013986013986
User 9032 improves AUC. Keeping the model.
Training on augumented user 7967 41/50 current_auc = 0.836013986013986
User 7967 AUC after training: 0.8368531468531468
User 7967 improves AUC. Keeping the model.
Training on augumented user 12870 42/50 current_auc = 0.8368531468531468
User 12870 AUC after training: 0.8370629370629371
User 12870 improves AUC. Keeping the model.
Training on augumented user 11739 43/50 current_auc = 0.8370629370629371
User 11739 AUC after training: 0.8364335664335665
User 11739 does not improve AUC. Reverting changes.
Training on augumented user 25762 44/50 current_auc = 0.8370629370629371
User 25762 AUC after training: 0.8362237762237763
User 25762 does not improve AUC. Reverting changes.
Training on augumented user 17459 45/50 current_auc = 0.8370629370629371
User 17459 AUC after training: 0.8371328671328673
User 17459 improves AUC. Keeping the model.
Training on augumented user 124889 46/50 current_auc = 0.8371328671328673
User 124889 AUC after training: 0.8369230769230769
User 124889 does not improve AUC. Reverting changes.
Training on augumented user 81702 47/50 current_auc = 0.8371328671328673
User 81702 AUC after training: 0.8368531468531468
User 81702 does not improve AUC. Reverting changes.
Training on augumented user 54979 48/50 current_auc = 0.8371328671328673
User 54979 AUC after training: 0.8368531468531468
User 54979 does not improve AUC. Reverting changes.
Training on augumented user 111550 49/50 current_auc = 0.8371328671328673
User 111550 AUC after training: 0.8369230769230769
User 111550 does not improve AUC. Reverting changes.
[2024-12-02 19:46:11.021730] start test user 130185 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:11.459731] start test user 130185 236/567 recall augumented users by random, augumented_users = [51534, 131131, 72438, 111419, 3613, 11433, 43744, 15632, 12132, 24409, 78434, 96281, 64153, 116525, 6760, 69886, 104965, 33479, 134532, 93382, 71602, 68789, 129078, 130900, 27372, 94677, 14619, 47318, 70856, 77012, 97590, 116048, 47429, 13630, 27742, 100958, 38853, 37145, 52070, 94211, 34162, 130594, 124337, 1613, 137309, 61644, 46870, 84368, 11937, 56113]
[2024-12-02 19:46:11.474740] user = 130185 Cloud 236/567
[2024-12-02 19:46:11.485713] user = 130185 Local 236/567
[2024-12-02 19:46:11.531647] user = 130185 Local+ 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:13.974836] user = 130185 MPDA- 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5279761904761905
Training on augumented user 51534 0/50 current_auc = 0.5279761904761905
User 51534 AUC after training: 0.5291666666666667
User 51534 improves AUC. Keeping the model.
Training on augumented user 131131 1/50 current_auc = 0.5291666666666667
User 131131 AUC after training: 0.5279761904761905
User 131131 does not improve AUC. Reverting changes.
Training on augumented user 72438 2/50 current_auc = 0.5291666666666667
User 72438 AUC after training: 0.5279761904761905
User 72438 does not improve AUC. Reverting changes.
Training on augumented user 111419 3/50 current_auc = 0.5291666666666667
User 111419 AUC after training: 0.5291666666666667
User 111419 does not improve AUC. Reverting changes.
Training on augumented user 3613 4/50 current_auc = 0.5291666666666667
User 3613 AUC after training: 0.5291666666666667
User 3613 does not improve AUC. Reverting changes.
Training on augumented user 11433 5/50 current_auc = 0.5291666666666667
User 11433 AUC after training: 0.5291666666666667
User 11433 does not improve AUC. Reverting changes.
Training on augumented user 43744 6/50 current_auc = 0.5291666666666667
User 43744 AUC after training: 0.5279761904761905
User 43744 does not improve AUC. Reverting changes.
Training on augumented user 15632 7/50 current_auc = 0.5291666666666667
User 15632 AUC after training: 0.5291666666666667
User 15632 does not improve AUC. Reverting changes.
Training on augumented user 12132 8/50 current_auc = 0.5291666666666667
User 12132 AUC after training: 0.5279761904761905
User 12132 does not improve AUC. Reverting changes.
Training on augumented user 24409 9/50 current_auc = 0.5291666666666667
User 24409 AUC after training: 0.5291666666666667
User 24409 does not improve AUC. Reverting changes.
Training on augumented user 78434 10/50 current_auc = 0.5291666666666667
User 78434 AUC after training: 0.5279761904761905
User 78434 does not improve AUC. Reverting changes.
Training on augumented user 96281 11/50 current_auc = 0.5291666666666667
User 96281 AUC after training: 0.5333333333333334
User 96281 improves AUC. Keeping the model.
Training on augumented user 64153 12/50 current_auc = 0.5333333333333334
User 64153 AUC after training: 0.5345238095238096
User 64153 improves AUC. Keeping the model.
Training on augumented user 116525 13/50 current_auc = 0.5345238095238096
User 116525 AUC after training: 0.530952380952381
User 116525 does not improve AUC. Reverting changes.
Training on augumented user 6760 14/50 current_auc = 0.5345238095238096
User 6760 AUC after training: 0.5333333333333334
User 6760 does not improve AUC. Reverting changes.
Training on augumented user 69886 15/50 current_auc = 0.5345238095238096
User 69886 AUC after training: 0.5357142857142858
User 69886 improves AUC. Keeping the model.
Training on augumented user 104965 16/50 current_auc = 0.5357142857142858
User 104965 AUC after training: 0.5333333333333334
User 104965 does not improve AUC. Reverting changes.
Training on augumented user 33479 17/50 current_auc = 0.5357142857142858
User 33479 AUC after training: 0.5345238095238096
User 33479 does not improve AUC. Reverting changes.
Training on augumented user 134532 18/50 current_auc = 0.5357142857142858
User 134532 AUC after training: 0.5333333333333334
User 134532 does not improve AUC. Reverting changes.
Training on augumented user 93382 19/50 current_auc = 0.5357142857142858
User 93382 AUC after training: 0.5357142857142858
User 93382 does not improve AUC. Reverting changes.
Training on augumented user 71602 20/50 current_auc = 0.5357142857142858
User 71602 AUC after training: 0.5345238095238096
User 71602 does not improve AUC. Reverting changes.
Training on augumented user 68789 21/50 current_auc = 0.5357142857142858
User 68789 AUC after training: 0.530952380952381
User 68789 does not improve AUC. Reverting changes.
Training on augumented user 129078 22/50 current_auc = 0.5357142857142858
User 129078 AUC after training: 0.530952380952381
User 129078 does not improve AUC. Reverting changes.
Training on augumented user 130900 23/50 current_auc = 0.5357142857142858
User 130900 AUC after training: 0.5321428571428573
User 130900 does not improve AUC. Reverting changes.
Training on augumented user 27372 24/50 current_auc = 0.5357142857142858
User 27372 AUC after training: 0.5345238095238096
User 27372 does not improve AUC. Reverting changes.
Training on augumented user 94677 25/50 current_auc = 0.5357142857142858
User 94677 AUC after training: 0.5357142857142858
User 94677 does not improve AUC. Reverting changes.
Training on augumented user 14619 26/50 current_auc = 0.5357142857142858
User 14619 AUC after training: 0.5333333333333334
User 14619 does not improve AUC. Reverting changes.
Training on augumented user 47318 27/50 current_auc = 0.5357142857142858
User 47318 AUC after training: 0.5321428571428571
User 47318 does not improve AUC. Reverting changes.
Training on augumented user 70856 28/50 current_auc = 0.5357142857142858
User 70856 AUC after training: 0.536904761904762
User 70856 improves AUC. Keeping the model.
Training on augumented user 77012 29/50 current_auc = 0.536904761904762
User 77012 AUC after training: 0.5357142857142858
User 77012 does not improve AUC. Reverting changes.
Training on augumented user 97590 30/50 current_auc = 0.536904761904762
User 97590 AUC after training: 0.5345238095238096
User 97590 does not improve AUC. Reverting changes.
Training on augumented user 116048 31/50 current_auc = 0.536904761904762
User 116048 AUC after training: 0.5345238095238096
User 116048 does not improve AUC. Reverting changes.
Training on augumented user 47429 32/50 current_auc = 0.536904761904762
User 47429 AUC after training: 0.5345238095238096
User 47429 does not improve AUC. Reverting changes.
Training on augumented user 13630 33/50 current_auc = 0.536904761904762
User 13630 AUC after training: 0.5357142857142858
User 13630 does not improve AUC. Reverting changes.
Training on augumented user 27742 34/50 current_auc = 0.536904761904762
User 27742 AUC after training: 0.5333333333333334
User 27742 does not improve AUC. Reverting changes.
Training on augumented user 100958 35/50 current_auc = 0.536904761904762
User 100958 AUC after training: 0.5357142857142858
User 100958 does not improve AUC. Reverting changes.
Training on augumented user 38853 36/50 current_auc = 0.536904761904762
User 38853 AUC after training: 0.536904761904762
User 38853 does not improve AUC. Reverting changes.
Training on augumented user 37145 37/50 current_auc = 0.536904761904762
User 37145 AUC after training: 0.5357142857142858
User 37145 does not improve AUC. Reverting changes.
Training on augumented user 52070 38/50 current_auc = 0.536904761904762
User 52070 AUC after training: 0.5333333333333334
User 52070 does not improve AUC. Reverting changes.
Training on augumented user 94211 39/50 current_auc = 0.536904761904762
User 94211 AUC after training: 0.5357142857142858
User 94211 does not improve AUC. Reverting changes.
Training on augumented user 34162 40/50 current_auc = 0.536904761904762
User 34162 AUC after training: 0.536904761904762
User 34162 does not improve AUC. Reverting changes.
Training on augumented user 130594 41/50 current_auc = 0.536904761904762
User 130594 AUC after training: 0.5357142857142858
User 130594 does not improve AUC. Reverting changes.
Training on augumented user 124337 42/50 current_auc = 0.536904761904762
User 124337 AUC after training: 0.5333333333333334
User 124337 does not improve AUC. Reverting changes.
Training on augumented user 1613 43/50 current_auc = 0.536904761904762
User 1613 AUC after training: 0.5345238095238095
User 1613 does not improve AUC. Reverting changes.
Training on augumented user 137309 44/50 current_auc = 0.536904761904762
User 137309 AUC after training: 0.5357142857142858
User 137309 does not improve AUC. Reverting changes.
Training on augumented user 61644 45/50 current_auc = 0.536904761904762
User 61644 AUC after training: 0.5357142857142858
User 61644 does not improve AUC. Reverting changes.
Training on augumented user 46870 46/50 current_auc = 0.536904761904762
User 46870 AUC after training: 0.5357142857142858
User 46870 does not improve AUC. Reverting changes.
Training on augumented user 84368 47/50 current_auc = 0.536904761904762
User 84368 AUC after training: 0.5357142857142858
User 84368 does not improve AUC. Reverting changes.
Training on augumented user 11937 48/50 current_auc = 0.536904761904762
User 11937 AUC after training: 0.536904761904762
User 11937 does not improve AUC. Reverting changes.
Training on augumented user 56113 49/50 current_auc = 0.536904761904762
User 56113 AUC after training: 0.5357142857142858
User 56113 does not improve AUC. Reverting changes.
[2024-12-02 19:46:41.797087] start test user 130192 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:42.215150] start test user 130192 237/567 recall augumented users by random, augumented_users = [74132, 115105, 79725, 82519, 114306, 26341, 120001, 77117, 67567, 43267, 50096, 58457, 77049, 28067, 42043, 60912, 95191, 132567, 50445, 125470, 81829, 113996, 128702, 74999, 54586, 55377, 98957, 60399, 92661, 46714, 37053, 87020, 6569, 28806, 3778, 29727, 77133, 33940, 68327, 104227, 53438, 130643, 54300, 46820, 88277, 118641, 73535, 9012, 136952, 60142]
[2024-12-02 19:46:42.230785] user = 130192 Cloud 237/567
[2024-12-02 19:46:42.242221] user = 130192 Local 237/567
[2024-12-02 19:46:42.317773] user = 130192 Local+ 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:44.739869] user = 130192 MPDA- 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 74132 0/50 current_auc = 0.33333333333333337
User 74132 AUC after training: 0.33333333333333337
User 74132 does not improve AUC. Reverting changes.
Training on augumented user 115105 1/50 current_auc = 0.33333333333333337
User 115105 AUC after training: 0.33333333333333337
User 115105 does not improve AUC. Reverting changes.
Training on augumented user 79725 2/50 current_auc = 0.33333333333333337
User 79725 AUC after training: 0.33333333333333337
User 79725 does not improve AUC. Reverting changes.
Training on augumented user 82519 3/50 current_auc = 0.33333333333333337
User 82519 AUC after training: 0.33333333333333337
User 82519 does not improve AUC. Reverting changes.
Training on augumented user 114306 4/50 current_auc = 0.33333333333333337
User 114306 AUC after training: 0.33333333333333337
User 114306 does not improve AUC. Reverting changes.
Training on augumented user 26341 5/50 current_auc = 0.33333333333333337
User 26341 AUC after training: 0.4
User 26341 improves AUC. Keeping the model.
Training on augumented user 120001 6/50 current_auc = 0.4
User 120001 AUC after training: 0.4
User 120001 does not improve AUC. Reverting changes.
Training on augumented user 77117 7/50 current_auc = 0.4
User 77117 AUC after training: 0.33333333333333337
User 77117 does not improve AUC. Reverting changes.
Training on augumented user 67567 8/50 current_auc = 0.4
User 67567 AUC after training: 0.4
User 67567 does not improve AUC. Reverting changes.
Training on augumented user 43267 9/50 current_auc = 0.4
User 43267 AUC after training: 0.33333333333333337
User 43267 does not improve AUC. Reverting changes.
Training on augumented user 50096 10/50 current_auc = 0.4
User 50096 AUC after training: 0.33333333333333337
User 50096 does not improve AUC. Reverting changes.
Training on augumented user 58457 11/50 current_auc = 0.4
User 58457 AUC after training: 0.33333333333333337
User 58457 does not improve AUC. Reverting changes.
Training on augumented user 77049 12/50 current_auc = 0.4
User 77049 AUC after training: 0.4
User 77049 does not improve AUC. Reverting changes.
Training on augumented user 28067 13/50 current_auc = 0.4
User 28067 AUC after training: 0.4
User 28067 does not improve AUC. Reverting changes.
Training on augumented user 42043 14/50 current_auc = 0.4
User 42043 AUC after training: 0.33333333333333337
User 42043 does not improve AUC. Reverting changes.
Training on augumented user 60912 15/50 current_auc = 0.4
User 60912 AUC after training: 0.33333333333333337
User 60912 does not improve AUC. Reverting changes.
Training on augumented user 95191 16/50 current_auc = 0.4
User 95191 AUC after training: 0.33333333333333337
User 95191 does not improve AUC. Reverting changes.
Training on augumented user 132567 17/50 current_auc = 0.4
User 132567 AUC after training: 0.33333333333333337
User 132567 does not improve AUC. Reverting changes.
Training on augumented user 50445 18/50 current_auc = 0.4
User 50445 AUC after training: 0.33333333333333337
User 50445 does not improve AUC. Reverting changes.
Training on augumented user 125470 19/50 current_auc = 0.4
User 125470 AUC after training: 0.33333333333333337
User 125470 does not improve AUC. Reverting changes.
Training on augumented user 81829 20/50 current_auc = 0.4
User 81829 AUC after training: 0.33333333333333337
User 81829 does not improve AUC. Reverting changes.
Training on augumented user 113996 21/50 current_auc = 0.4
User 113996 AUC after training: 0.33333333333333337
User 113996 does not improve AUC. Reverting changes.
Training on augumented user 128702 22/50 current_auc = 0.4
User 128702 AUC after training: 0.4
User 128702 does not improve AUC. Reverting changes.
Training on augumented user 74999 23/50 current_auc = 0.4
User 74999 AUC after training: 0.33333333333333337
User 74999 does not improve AUC. Reverting changes.
Training on augumented user 54586 24/50 current_auc = 0.4
User 54586 AUC after training: 0.33333333333333337
User 54586 does not improve AUC. Reverting changes.
Training on augumented user 55377 25/50 current_auc = 0.4
User 55377 AUC after training: 0.33333333333333337
User 55377 does not improve AUC. Reverting changes.
Training on augumented user 98957 26/50 current_auc = 0.4
User 98957 AUC after training: 0.33333333333333337
User 98957 does not improve AUC. Reverting changes.
Training on augumented user 60399 27/50 current_auc = 0.4
User 60399 AUC after training: 0.33333333333333337
User 60399 does not improve AUC. Reverting changes.
Training on augumented user 92661 28/50 current_auc = 0.4
User 92661 AUC after training: 0.33333333333333337
User 92661 does not improve AUC. Reverting changes.
Training on augumented user 46714 29/50 current_auc = 0.4
User 46714 AUC after training: 0.33333333333333337
User 46714 does not improve AUC. Reverting changes.
Training on augumented user 37053 30/50 current_auc = 0.4
User 37053 AUC after training: 0.33333333333333337
User 37053 does not improve AUC. Reverting changes.
Training on augumented user 87020 31/50 current_auc = 0.4
User 87020 AUC after training: 0.33333333333333337
User 87020 does not improve AUC. Reverting changes.
Training on augumented user 6569 32/50 current_auc = 0.4
User 6569 AUC after training: 0.33333333333333337
User 6569 does not improve AUC. Reverting changes.
Training on augumented user 28806 33/50 current_auc = 0.4
User 28806 AUC after training: 0.4
User 28806 does not improve AUC. Reverting changes.
Training on augumented user 3778 34/50 current_auc = 0.4
User 3778 AUC after training: 0.33333333333333337
User 3778 does not improve AUC. Reverting changes.
Training on augumented user 29727 35/50 current_auc = 0.4
User 29727 AUC after training: 0.4
User 29727 does not improve AUC. Reverting changes.
Training on augumented user 77133 36/50 current_auc = 0.4
User 77133 AUC after training: 0.4
User 77133 does not improve AUC. Reverting changes.
Training on augumented user 33940 37/50 current_auc = 0.4
User 33940 AUC after training: 0.4
User 33940 does not improve AUC. Reverting changes.
Training on augumented user 68327 38/50 current_auc = 0.4
User 68327 AUC after training: 0.4
User 68327 does not improve AUC. Reverting changes.
Training on augumented user 104227 39/50 current_auc = 0.4
User 104227 AUC after training: 0.33333333333333337
User 104227 does not improve AUC. Reverting changes.
Training on augumented user 53438 40/50 current_auc = 0.4
User 53438 AUC after training: 0.33333333333333337
User 53438 does not improve AUC. Reverting changes.
Training on augumented user 130643 41/50 current_auc = 0.4
User 130643 AUC after training: 0.4
User 130643 does not improve AUC. Reverting changes.
Training on augumented user 54300 42/50 current_auc = 0.4
User 54300 AUC after training: 0.4
User 54300 does not improve AUC. Reverting changes.
Training on augumented user 46820 43/50 current_auc = 0.4
User 46820 AUC after training: 0.4
User 46820 does not improve AUC. Reverting changes.
Training on augumented user 88277 44/50 current_auc = 0.4
User 88277 AUC after training: 0.4
User 88277 does not improve AUC. Reverting changes.
Training on augumented user 118641 45/50 current_auc = 0.4
User 118641 AUC after training: 0.33333333333333337
User 118641 does not improve AUC. Reverting changes.
Training on augumented user 73535 46/50 current_auc = 0.4
User 73535 AUC after training: 0.33333333333333337
User 73535 does not improve AUC. Reverting changes.
Training on augumented user 9012 47/50 current_auc = 0.4
User 9012 AUC after training: 0.33333333333333337
User 9012 does not improve AUC. Reverting changes.
Training on augumented user 136952 48/50 current_auc = 0.4
User 136952 AUC after training: 0.33333333333333337
User 136952 does not improve AUC. Reverting changes.
Training on augumented user 60142 49/50 current_auc = 0.4
User 60142 AUC after training: 0.4
User 60142 does not improve AUC. Reverting changes.
[2024-12-02 19:47:15.383596] start test user 130202 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:15.929760] start test user 130202 238/567 recall augumented users by random, augumented_users = [17021, 62703, 41955, 33541, 44071, 22489, 113718, 86568, 70399, 76547, 31705, 45021, 108848, 99113, 76209, 42203, 28902, 49054, 58283, 130610, 24322, 128706, 103543, 128749, 93450, 21806, 70198, 117100, 27547, 113315, 77914, 82659, 51793, 97472, 84948, 44051, 6150, 97255, 108146, 65940, 76042, 94215, 10030, 21081, 52440, 49680, 117092, 47339, 37218, 23352]
[2024-12-02 19:47:15.946047] user = 130202 Cloud 238/567
[2024-12-02 19:47:15.997781] user = 130202 Local 238/567
[2024-12-02 19:47:16.047458] user = 130202 Local+ 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:18.277904] user = 130202 MPDA- 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6546546546546547
Training on augumented user 17021 0/50 current_auc = 0.6546546546546547
User 17021 AUC after training: 0.6546546546546547
User 17021 does not improve AUC. Reverting changes.
Training on augumented user 62703 1/50 current_auc = 0.6546546546546547
User 62703 AUC after training: 0.6539039039039038
User 62703 does not improve AUC. Reverting changes.
Training on augumented user 41955 2/50 current_auc = 0.6546546546546547
User 41955 AUC after training: 0.6554054054054054
User 41955 improves AUC. Keeping the model.
Training on augumented user 33541 3/50 current_auc = 0.6554054054054054
User 33541 AUC after training: 0.6539039039039038
User 33541 does not improve AUC. Reverting changes.
Training on augumented user 44071 4/50 current_auc = 0.6554054054054054
User 44071 AUC after training: 0.6546546546546547
User 44071 does not improve AUC. Reverting changes.
Training on augumented user 22489 5/50 current_auc = 0.6554054054054054
User 22489 AUC after training: 0.6554054054054054
User 22489 does not improve AUC. Reverting changes.
Training on augumented user 113718 6/50 current_auc = 0.6554054054054054
User 113718 AUC after training: 0.6546546546546547
User 113718 does not improve AUC. Reverting changes.
Training on augumented user 86568 7/50 current_auc = 0.6554054054054054
User 86568 AUC after training: 0.6546546546546547
User 86568 does not improve AUC. Reverting changes.
Training on augumented user 70399 8/50 current_auc = 0.6554054054054054
User 70399 AUC after training: 0.6554054054054054
User 70399 does not improve AUC. Reverting changes.
Training on augumented user 76547 9/50 current_auc = 0.6554054054054054
User 76547 AUC after training: 0.6554054054054054
User 76547 does not improve AUC. Reverting changes.
Training on augumented user 31705 10/50 current_auc = 0.6554054054054054
User 31705 AUC after training: 0.653903903903904
User 31705 does not improve AUC. Reverting changes.
Training on augumented user 45021 11/50 current_auc = 0.6554054054054054
User 45021 AUC after training: 0.6546546546546547
User 45021 does not improve AUC. Reverting changes.
Training on augumented user 108848 12/50 current_auc = 0.6554054054054054
User 108848 AUC after training: 0.6554054054054054
User 108848 does not improve AUC. Reverting changes.
Training on augumented user 99113 13/50 current_auc = 0.6554054054054054
User 99113 AUC after training: 0.6554054054054054
User 99113 does not improve AUC. Reverting changes.
Training on augumented user 76209 14/50 current_auc = 0.6554054054054054
User 76209 AUC after training: 0.6546546546546547
User 76209 does not improve AUC. Reverting changes.
Training on augumented user 42203 15/50 current_auc = 0.6554054054054054
User 42203 AUC after training: 0.6554054054054054
User 42203 does not improve AUC. Reverting changes.
Training on augumented user 28902 16/50 current_auc = 0.6554054054054054
User 28902 AUC after training: 0.6546546546546547
User 28902 does not improve AUC. Reverting changes.
Training on augumented user 49054 17/50 current_auc = 0.6554054054054054
User 49054 AUC after training: 0.6554054054054054
User 49054 does not improve AUC. Reverting changes.
Training on augumented user 58283 18/50 current_auc = 0.6554054054054054
User 58283 AUC after training: 0.6546546546546547
User 58283 does not improve AUC. Reverting changes.
Training on augumented user 130610 19/50 current_auc = 0.6554054054054054
User 130610 AUC after training: 0.6546546546546547
User 130610 does not improve AUC. Reverting changes.
Training on augumented user 24322 20/50 current_auc = 0.6554054054054054
User 24322 AUC after training: 0.6546546546546547
User 24322 does not improve AUC. Reverting changes.
Training on augumented user 128706 21/50 current_auc = 0.6554054054054054
User 128706 AUC after training: 0.6546546546546547
User 128706 does not improve AUC. Reverting changes.
Training on augumented user 103543 22/50 current_auc = 0.6554054054054054
User 103543 AUC after training: 0.6554054054054054
User 103543 does not improve AUC. Reverting changes.
Training on augumented user 128749 23/50 current_auc = 0.6554054054054054
User 128749 AUC after training: 0.6561561561561562
User 128749 improves AUC. Keeping the model.
Training on augumented user 93450 24/50 current_auc = 0.6561561561561562
User 93450 AUC after training: 0.6561561561561562
User 93450 does not improve AUC. Reverting changes.
Training on augumented user 21806 25/50 current_auc = 0.6561561561561562
User 21806 AUC after training: 0.6554054054054054
User 21806 does not improve AUC. Reverting changes.
Training on augumented user 70198 26/50 current_auc = 0.6561561561561562
User 70198 AUC after training: 0.6546546546546547
User 70198 does not improve AUC. Reverting changes.
Training on augumented user 117100 27/50 current_auc = 0.6561561561561562
User 117100 AUC after training: 0.6546546546546547
User 117100 does not improve AUC. Reverting changes.
Training on augumented user 27547 28/50 current_auc = 0.6561561561561562
User 27547 AUC after training: 0.6554054054054054
User 27547 does not improve AUC. Reverting changes.
Training on augumented user 113315 29/50 current_auc = 0.6561561561561562
User 113315 AUC after training: 0.6561561561561562
User 113315 does not improve AUC. Reverting changes.
Training on augumented user 77914 30/50 current_auc = 0.6561561561561562
User 77914 AUC after training: 0.6546546546546547
User 77914 does not improve AUC. Reverting changes.
Training on augumented user 82659 31/50 current_auc = 0.6561561561561562
User 82659 AUC after training: 0.6561561561561562
User 82659 does not improve AUC. Reverting changes.
Training on augumented user 51793 32/50 current_auc = 0.6561561561561562
User 51793 AUC after training: 0.6546546546546547
User 51793 does not improve AUC. Reverting changes.
Training on augumented user 97472 33/50 current_auc = 0.6561561561561562
User 97472 AUC after training: 0.6561561561561562
User 97472 does not improve AUC. Reverting changes.
Training on augumented user 84948 34/50 current_auc = 0.6561561561561562
User 84948 AUC after training: 0.6561561561561562
User 84948 does not improve AUC. Reverting changes.
Training on augumented user 44051 35/50 current_auc = 0.6561561561561562
User 44051 AUC after training: 0.6561561561561562
User 44051 does not improve AUC. Reverting changes.
Training on augumented user 6150 36/50 current_auc = 0.6561561561561562
User 6150 AUC after training: 0.656906906906907
User 6150 improves AUC. Keeping the model.
Training on augumented user 97255 37/50 current_auc = 0.656906906906907
User 97255 AUC after training: 0.6561561561561562
User 97255 does not improve AUC. Reverting changes.
Training on augumented user 108146 38/50 current_auc = 0.656906906906907
User 108146 AUC after training: 0.656906906906907
User 108146 does not improve AUC. Reverting changes.
Training on augumented user 65940 39/50 current_auc = 0.656906906906907
User 65940 AUC after training: 0.6561561561561562
User 65940 does not improve AUC. Reverting changes.
Training on augumented user 76042 40/50 current_auc = 0.656906906906907
User 76042 AUC after training: 0.656906906906907
User 76042 does not improve AUC. Reverting changes.
Training on augumented user 94215 41/50 current_auc = 0.656906906906907
User 94215 AUC after training: 0.656906906906907
User 94215 does not improve AUC. Reverting changes.
Training on augumented user 10030 42/50 current_auc = 0.656906906906907
User 10030 AUC after training: 0.6561561561561562
User 10030 does not improve AUC. Reverting changes.
Training on augumented user 21081 43/50 current_auc = 0.656906906906907
User 21081 AUC after training: 0.656906906906907
User 21081 does not improve AUC. Reverting changes.
Training on augumented user 52440 44/50 current_auc = 0.656906906906907
User 52440 AUC after training: 0.656906906906907
User 52440 does not improve AUC. Reverting changes.
Training on augumented user 49680 45/50 current_auc = 0.656906906906907
User 49680 AUC after training: 0.656906906906907
User 49680 does not improve AUC. Reverting changes.
Training on augumented user 117092 46/50 current_auc = 0.656906906906907
User 117092 AUC after training: 0.6561561561561562
User 117092 does not improve AUC. Reverting changes.
Training on augumented user 47339 47/50 current_auc = 0.656906906906907
User 47339 AUC after training: 0.6561561561561562
User 47339 does not improve AUC. Reverting changes.
Training on augumented user 37218 48/50 current_auc = 0.656906906906907
User 37218 AUC after training: 0.6561561561561562
User 37218 does not improve AUC. Reverting changes.
Training on augumented user 23352 49/50 current_auc = 0.656906906906907
User 23352 AUC after training: 0.656906906906907
User 23352 does not improve AUC. Reverting changes.
[2024-12-02 19:47:45.943908] start test user 130273 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:46.343602] start test user 130273 239/567 recall augumented users by random, augumented_users = [68801, 71179, 4487, 107064, 115802, 82587, 67171, 97840, 34238, 32272, 37536, 76143, 99721, 11861, 63975, 62968, 33335, 87159, 38878, 117549, 10506, 55718, 6208, 35969, 73965, 35934, 91043, 119882, 17780, 126124, 126680, 116953, 61393, 88866, 44399, 97662, 74940, 90193, 103197, 12054, 28494, 87894, 101824, 127977, 129285, 128401, 102952, 91486, 46952, 99092]
[2024-12-02 19:47:46.358983] user = 130273 Cloud 239/567
[2024-12-02 19:47:46.379785] user = 130273 Local 239/567
[2024-12-02 19:47:46.434922] user = 130273 Local+ 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:48.514482] user = 130273 MPDA- 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6059578293559987
Training on augumented user 68801 0/50 current_auc = 0.6059578293559987
User 68801 AUC after training: 0.6056717881660675
User 68801 does not improve AUC. Reverting changes.
Training on augumented user 71179 1/50 current_auc = 0.6059578293559987
User 71179 AUC after training: 0.6027705132396207
User 71179 does not improve AUC. Reverting changes.
Training on augumented user 4487 2/50 current_auc = 0.6059578293559987
User 4487 AUC after training: 0.6059578293559987
User 4487 does not improve AUC. Reverting changes.
Training on augumented user 107064 3/50 current_auc = 0.6059578293559987
User 107064 AUC after training: 0.6057943772474664
User 107064 does not improve AUC. Reverting changes.
Training on augumented user 115802 4/50 current_auc = 0.6059578293559987
User 115802 AUC after training: 0.6043641712978097
User 115802 does not improve AUC. Reverting changes.
Training on augumented user 82587 5/50 current_auc = 0.6059578293559987
User 82587 AUC after training: 0.6048136645962733
User 82587 does not improve AUC. Reverting changes.
Training on augumented user 67171 6/50 current_auc = 0.6059578293559987
User 67171 AUC after training: 0.6054266100032691
User 67171 does not improve AUC. Reverting changes.
Training on augumented user 97840 7/50 current_auc = 0.6059578293559987
User 97840 AUC after training: 0.6069794050343251
User 97840 improves AUC. Keeping the model.
Training on augumented user 34238 8/50 current_auc = 0.6069794050343251
User 34238 AUC after training: 0.6043641712978097
User 34238 does not improve AUC. Reverting changes.
Training on augumented user 32272 9/50 current_auc = 0.6069794050343251
User 32272 AUC after training: 0.6060804184373979
User 32272 does not improve AUC. Reverting changes.
Training on augumented user 37536 10/50 current_auc = 0.6069794050343251
User 37536 AUC after training: 0.6069385420071919
User 37536 does not improve AUC. Reverting changes.
Training on augumented user 76143 11/50 current_auc = 0.6069794050343251
User 76143 AUC after training: 0.607020268061458
User 76143 improves AUC. Keeping the model.
Training on augumented user 99721 12/50 current_auc = 0.607020268061458
User 99721 AUC after training: 0.6073471722785225
User 99721 improves AUC. Keeping the model.
Training on augumented user 11861 13/50 current_auc = 0.6073471722785225
User 11861 AUC after training: 0.6068976789800589
User 11861 does not improve AUC. Reverting changes.
Training on augumented user 63975 14/50 current_auc = 0.6073471722785225
User 63975 AUC after training: 0.6073880353056554
User 63975 improves AUC. Keeping the model.
Training on augumented user 62968 15/50 current_auc = 0.6073880353056554
User 62968 AUC after training: 0.6071428571428572
User 62968 does not improve AUC. Reverting changes.
Training on augumented user 33335 16/50 current_auc = 0.6073880353056554
User 33335 AUC after training: 0.6066525008172606
User 33335 does not improve AUC. Reverting changes.
Training on augumented user 87159 17/50 current_auc = 0.6073880353056554
User 87159 AUC after training: 0.6072245831971231
User 87159 does not improve AUC. Reverting changes.
Training on augumented user 38878 18/50 current_auc = 0.6073880353056554
User 38878 AUC after training: 0.6073063092513894
User 38878 does not improve AUC. Reverting changes.
Training on augumented user 117549 19/50 current_auc = 0.6073880353056554
User 117549 AUC after training: 0.6078783916312521
User 117549 improves AUC. Keeping the model.
Training on augumented user 10506 20/50 current_auc = 0.6078783916312521
User 10506 AUC after training: 0.6076740764955869
User 10506 does not improve AUC. Reverting changes.
Training on augumented user 55718 21/50 current_auc = 0.6078783916312521
User 55718 AUC after training: 0.6083687479568486
User 55718 improves AUC. Keeping the model.
Training on augumented user 6208 22/50 current_auc = 0.6083687479568486
User 6208 AUC after training: 0.6086956521739131
User 6208 improves AUC. Keeping the model.
Training on augumented user 35969 23/50 current_auc = 0.6086956521739131
User 35969 AUC after training: 0.6075514874141876
User 35969 does not improve AUC. Reverting changes.
Training on augumented user 73965 24/50 current_auc = 0.6086956521739131
User 73965 AUC after training: 0.6071428571428571
User 73965 does not improve AUC. Reverting changes.
Training on augumented user 35934 25/50 current_auc = 0.6086956521739131
User 35934 AUC after training: 0.6090225563909775
User 35934 improves AUC. Keeping the model.
Training on augumented user 91043 26/50 current_auc = 0.6090225563909775
User 91043 AUC after training: 0.608695652173913
User 91043 does not improve AUC. Reverting changes.
Training on augumented user 119882 27/50 current_auc = 0.6090225563909775
User 119882 AUC after training: 0.6086139261196469
User 119882 does not improve AUC. Reverting changes.
Training on augumented user 17780 28/50 current_auc = 0.6090225563909775
User 17780 AUC after training: 0.6091860084995097
User 17780 improves AUC. Keeping the model.
Training on augumented user 126124 29/50 current_auc = 0.6091860084995097
User 126124 AUC after training: 0.6093494606080417
User 126124 improves AUC. Keeping the model.
Training on augumented user 126680 30/50 current_auc = 0.6093494606080417
User 126680 AUC after training: 0.6101667211507029
User 126680 improves AUC. Keeping the model.
Training on augumented user 116953 31/50 current_auc = 0.6101667211507029
User 116953 AUC after training: 0.6098398169336384
User 116953 does not improve AUC. Reverting changes.
Training on augumented user 61393 32/50 current_auc = 0.6101667211507029
User 61393 AUC after training: 0.6080418437397843
User 61393 does not improve AUC. Reverting changes.
Training on augumented user 88866 33/50 current_auc = 0.6101667211507029
User 88866 AUC after training: 0.610248447204969
User 88866 improves AUC. Keeping the model.
Training on augumented user 44399 34/50 current_auc = 0.610248447204969
User 44399 AUC after training: 0.6096763648251062
User 44399 does not improve AUC. Reverting changes.
Training on augumented user 97662 35/50 current_auc = 0.610248447204969
User 97662 AUC after training: 0.6100849950964368
User 97662 does not improve AUC. Reverting changes.
Training on augumented user 74940 36/50 current_auc = 0.610248447204969
User 74940 AUC after training: 0.6104118993135011
User 74940 improves AUC. Keeping the model.
Training on augumented user 90193 37/50 current_auc = 0.6104118993135011
User 90193 AUC after training: 0.6113108859104283
User 90193 improves AUC. Keeping the model.
Training on augumented user 103197 38/50 current_auc = 0.6113108859104283
User 103197 AUC after training: 0.610248447204969
User 103197 does not improve AUC. Reverting changes.
Training on augumented user 12054 39/50 current_auc = 0.6113108859104283
User 12054 AUC after training: 0.6100849950964367
User 12054 does not improve AUC. Reverting changes.
Training on augumented user 28494 40/50 current_auc = 0.6113108859104283
User 28494 AUC after training: 0.6090225563909775
User 28494 does not improve AUC. Reverting changes.
Training on augumented user 87894 41/50 current_auc = 0.6113108859104283
User 87894 AUC after training: 0.6096763648251061
User 87894 does not improve AUC. Reverting changes.
Training on augumented user 101824 42/50 current_auc = 0.6113108859104283
User 101824 AUC after training: 0.6100032690421706
User 101824 does not improve AUC. Reverting changes.
Training on augumented user 127977 43/50 current_auc = 0.6113108859104283
User 127977 AUC after training: 0.6098398169336384
User 127977 does not improve AUC. Reverting changes.
Training on augumented user 129285 44/50 current_auc = 0.6113108859104283
User 129285 AUC after training: 0.6085322000653809
User 129285 does not improve AUC. Reverting changes.
Training on augumented user 128401 45/50 current_auc = 0.6113108859104283
User 128401 AUC after training: 0.6096763648251062
User 128401 does not improve AUC. Reverting changes.
Training on augumented user 102952 46/50 current_auc = 0.6113108859104283
User 102952 AUC after training: 0.609431186662308
User 102952 does not improve AUC. Reverting changes.
Training on augumented user 91486 47/50 current_auc = 0.6113108859104283
User 91486 AUC after training: 0.6110657077476299
User 91486 does not improve AUC. Reverting changes.
Training on augumented user 46952 48/50 current_auc = 0.6113108859104283
User 46952 AUC after training: 0.6109839816933639
User 46952 does not improve AUC. Reverting changes.
Training on augumented user 99092 49/50 current_auc = 0.6113108859104283
User 99092 AUC after training: 0.6084504740111147
User 99092 does not improve AUC. Reverting changes.
[2024-12-02 19:48:17.461561] start test user 130276 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:17.867395] start test user 130276 240/567 recall augumented users by random, augumented_users = [671, 15769, 13435, 86865, 66558, 103319, 20575, 106742, 124392, 129032, 100944, 128134, 133277, 121449, 30667, 23834, 82171, 136815, 2510, 105216, 11264, 113666, 38503, 100481, 110196, 1521, 111108, 62562, 108751, 53953, 72821, 999, 78847, 116717, 20392, 47424, 121624, 92902, 57039, 72841, 130393, 38059, 109541, 9153, 86041, 20012, 67825, 48622, 134371, 63912]
[2024-12-02 19:48:17.882800] user = 130276 Cloud 240/567
[2024-12-02 19:48:17.892922] user = 130276 Local 240/567
[2024-12-02 19:48:17.934473] user = 130276 Local+ 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:19.995343] user = 130276 MPDA- 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6845238095238095
Training on augumented user 671 0/50 current_auc = 0.6845238095238095
User 671 AUC after training: 0.6845238095238095
User 671 does not improve AUC. Reverting changes.
Training on augumented user 15769 1/50 current_auc = 0.6845238095238095
User 15769 AUC after training: 0.6845238095238095
User 15769 does not improve AUC. Reverting changes.
Training on augumented user 13435 2/50 current_auc = 0.6845238095238095
User 13435 AUC after training: 0.6845238095238095
User 13435 does not improve AUC. Reverting changes.
Training on augumented user 86865 3/50 current_auc = 0.6845238095238095
User 86865 AUC after training: 0.6845238095238095
User 86865 does not improve AUC. Reverting changes.
Training on augumented user 66558 4/50 current_auc = 0.6845238095238095
User 66558 AUC after training: 0.6845238095238095
User 66558 does not improve AUC. Reverting changes.
Training on augumented user 103319 5/50 current_auc = 0.6845238095238095
User 103319 AUC after training: 0.6845238095238095
User 103319 does not improve AUC. Reverting changes.
Training on augumented user 20575 6/50 current_auc = 0.6845238095238095
User 20575 AUC after training: 0.6845238095238095
User 20575 does not improve AUC. Reverting changes.
Training on augumented user 106742 7/50 current_auc = 0.6845238095238095
User 106742 AUC after training: 0.6845238095238095
User 106742 does not improve AUC. Reverting changes.
Training on augumented user 124392 8/50 current_auc = 0.6845238095238095
User 124392 AUC after training: 0.6845238095238095
User 124392 does not improve AUC. Reverting changes.
Training on augumented user 129032 9/50 current_auc = 0.6845238095238095
User 129032 AUC after training: 0.6845238095238095
User 129032 does not improve AUC. Reverting changes.
Training on augumented user 100944 10/50 current_auc = 0.6845238095238095
User 100944 AUC after training: 0.6845238095238095
User 100944 does not improve AUC. Reverting changes.
Training on augumented user 128134 11/50 current_auc = 0.6845238095238095
User 128134 AUC after training: 0.6845238095238095
User 128134 does not improve AUC. Reverting changes.
Training on augumented user 133277 12/50 current_auc = 0.6845238095238095
User 133277 AUC after training: 0.6845238095238095
User 133277 does not improve AUC. Reverting changes.
Training on augumented user 121449 13/50 current_auc = 0.6845238095238095
User 121449 AUC after training: 0.6845238095238095
User 121449 does not improve AUC. Reverting changes.
Training on augumented user 30667 14/50 current_auc = 0.6845238095238095
User 30667 AUC after training: 0.6845238095238095
User 30667 does not improve AUC. Reverting changes.
Training on augumented user 23834 15/50 current_auc = 0.6845238095238095
User 23834 AUC after training: 0.6845238095238095
User 23834 does not improve AUC. Reverting changes.
Training on augumented user 82171 16/50 current_auc = 0.6845238095238095
User 82171 AUC after training: 0.6845238095238095
User 82171 does not improve AUC. Reverting changes.
Training on augumented user 136815 17/50 current_auc = 0.6845238095238095
User 136815 AUC after training: 0.6845238095238095
User 136815 does not improve AUC. Reverting changes.
Training on augumented user 2510 18/50 current_auc = 0.6845238095238095
User 2510 AUC after training: 0.6845238095238095
User 2510 does not improve AUC. Reverting changes.
Training on augumented user 105216 19/50 current_auc = 0.6845238095238095
User 105216 AUC after training: 0.6845238095238095
User 105216 does not improve AUC. Reverting changes.
Training on augumented user 11264 20/50 current_auc = 0.6845238095238095
User 11264 AUC after training: 0.6845238095238095
User 11264 does not improve AUC. Reverting changes.
Training on augumented user 113666 21/50 current_auc = 0.6845238095238095
User 113666 AUC after training: 0.6845238095238095
User 113666 does not improve AUC. Reverting changes.
Training on augumented user 38503 22/50 current_auc = 0.6845238095238095
User 38503 AUC after training: 0.6845238095238095
User 38503 does not improve AUC. Reverting changes.
Training on augumented user 100481 23/50 current_auc = 0.6845238095238095
User 100481 AUC after training: 0.6845238095238095
User 100481 does not improve AUC. Reverting changes.
Training on augumented user 110196 24/50 current_auc = 0.6845238095238095
User 110196 AUC after training: 0.6845238095238095
User 110196 does not improve AUC. Reverting changes.
Training on augumented user 1521 25/50 current_auc = 0.6845238095238095
User 1521 AUC after training: 0.6845238095238095
User 1521 does not improve AUC. Reverting changes.
Training on augumented user 111108 26/50 current_auc = 0.6845238095238095
User 111108 AUC after training: 0.6845238095238095
User 111108 does not improve AUC. Reverting changes.
Training on augumented user 62562 27/50 current_auc = 0.6845238095238095
User 62562 AUC after training: 0.6845238095238095
User 62562 does not improve AUC. Reverting changes.
Training on augumented user 108751 28/50 current_auc = 0.6845238095238095
User 108751 AUC after training: 0.6845238095238095
User 108751 does not improve AUC. Reverting changes.
Training on augumented user 53953 29/50 current_auc = 0.6845238095238095
User 53953 AUC after training: 0.6845238095238095
User 53953 does not improve AUC. Reverting changes.
Training on augumented user 72821 30/50 current_auc = 0.6845238095238095
User 72821 AUC after training: 0.6845238095238095
User 72821 does not improve AUC. Reverting changes.
Training on augumented user 999 31/50 current_auc = 0.6845238095238095
User 999 AUC after training: 0.6845238095238095
User 999 does not improve AUC. Reverting changes.
Training on augumented user 78847 32/50 current_auc = 0.6845238095238095
User 78847 AUC after training: 0.6845238095238095
User 78847 does not improve AUC. Reverting changes.
Training on augumented user 116717 33/50 current_auc = 0.6845238095238095
User 116717 AUC after training: 0.6845238095238095
User 116717 does not improve AUC. Reverting changes.
Training on augumented user 20392 34/50 current_auc = 0.6845238095238095
User 20392 AUC after training: 0.6845238095238095
User 20392 does not improve AUC. Reverting changes.
Training on augumented user 47424 35/50 current_auc = 0.6845238095238095
User 47424 AUC after training: 0.6845238095238095
User 47424 does not improve AUC. Reverting changes.
Training on augumented user 121624 36/50 current_auc = 0.6845238095238095
User 121624 AUC after training: 0.6845238095238095
User 121624 does not improve AUC. Reverting changes.
Training on augumented user 92902 37/50 current_auc = 0.6845238095238095
User 92902 AUC after training: 0.6845238095238095
User 92902 does not improve AUC. Reverting changes.
Training on augumented user 57039 38/50 current_auc = 0.6845238095238095
User 57039 AUC after training: 0.6845238095238095
User 57039 does not improve AUC. Reverting changes.
Training on augumented user 72841 39/50 current_auc = 0.6845238095238095
User 72841 AUC after training: 0.6845238095238095
User 72841 does not improve AUC. Reverting changes.
Training on augumented user 130393 40/50 current_auc = 0.6845238095238095
User 130393 AUC after training: 0.6845238095238095
User 130393 does not improve AUC. Reverting changes.
Training on augumented user 38059 41/50 current_auc = 0.6845238095238095
User 38059 AUC after training: 0.6845238095238095
User 38059 does not improve AUC. Reverting changes.
Training on augumented user 109541 42/50 current_auc = 0.6845238095238095
User 109541 AUC after training: 0.6845238095238095
User 109541 does not improve AUC. Reverting changes.
Training on augumented user 9153 43/50 current_auc = 0.6845238095238095
User 9153 AUC after training: 0.6845238095238095
User 9153 does not improve AUC. Reverting changes.
Training on augumented user 86041 44/50 current_auc = 0.6845238095238095
User 86041 AUC after training: 0.6845238095238095
User 86041 does not improve AUC. Reverting changes.
Training on augumented user 20012 45/50 current_auc = 0.6845238095238095
User 20012 AUC after training: 0.6845238095238095
User 20012 does not improve AUC. Reverting changes.
Training on augumented user 67825 46/50 current_auc = 0.6845238095238095
User 67825 AUC after training: 0.6845238095238095
User 67825 does not improve AUC. Reverting changes.
Training on augumented user 48622 47/50 current_auc = 0.6845238095238095
User 48622 AUC after training: 0.6845238095238095
User 48622 does not improve AUC. Reverting changes.
Training on augumented user 134371 48/50 current_auc = 0.6845238095238095
User 134371 AUC after training: 0.6845238095238095
User 134371 does not improve AUC. Reverting changes.
Training on augumented user 63912 49/50 current_auc = 0.6845238095238095
User 63912 AUC after training: 0.6845238095238095
User 63912 does not improve AUC. Reverting changes.
[2024-12-02 19:48:49.151862] start test user 130280 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:49.746703] start test user 130280 241/567 recall augumented users by random, augumented_users = [103833, 66531, 40444, 113181, 106324, 26069, 72399, 81282, 137633, 86998, 98072, 86558, 40173, 81766, 138059, 114495, 199, 100323, 102349, 29639, 91559, 124511, 119160, 16020, 99438, 137036, 55740, 7721, 136390, 93392, 23872, 98690, 138309, 56174, 109651, 100716, 79777, 45550, 2481, 65235, 25007, 49846, 110296, 74528, 133394, 50170, 35391, 65132, 40298, 92079]
[2024-12-02 19:48:49.766261] user = 130280 Cloud 241/567
[2024-12-02 19:48:49.792893] user = 130280 Local 241/567
[2024-12-02 19:48:49.946140] user = 130280 Local+ 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:52.895779] user = 130280 MPDA- 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6451837140019862
Training on augumented user 103833 0/50 current_auc = 0.6451837140019862
User 103833 AUC after training: 0.6461767626613704
User 103833 improves AUC. Keeping the model.
Training on augumented user 66531 1/50 current_auc = 0.6461767626613704
User 66531 AUC after training: 0.6465739821251241
User 66531 improves AUC. Keeping the model.
Training on augumented user 40444 2/50 current_auc = 0.6465739821251241
User 40444 AUC after training: 0.6456802383316782
User 40444 does not improve AUC. Reverting changes.
Training on augumented user 113181 3/50 current_auc = 0.6465739821251241
User 113181 AUC after training: 0.6442403177755711
User 113181 does not improve AUC. Reverting changes.
Training on augumented user 106324 4/50 current_auc = 0.6465739821251241
User 106324 AUC after training: 0.6467229394240317
User 106324 improves AUC. Keeping the model.
Training on augumented user 26069 5/50 current_auc = 0.6467229394240317
User 26069 AUC after training: 0.6458291956305858
User 26069 does not improve AUC. Reverting changes.
Training on augumented user 72399 6/50 current_auc = 0.6467229394240317
User 72399 AUC after training: 0.6450347567030784
User 72399 does not improve AUC. Reverting changes.
Training on augumented user 81282 7/50 current_auc = 0.6467229394240317
User 81282 AUC after training: 0.6471698113207547
User 81282 improves AUC. Keeping the model.
Training on augumented user 137633 8/50 current_auc = 0.6471698113207547
User 137633 AUC after training: 0.6467229394240317
User 137633 does not improve AUC. Reverting changes.
Training on augumented user 86998 9/50 current_auc = 0.6471698113207547
User 86998 AUC after training: 0.6467229394240318
User 86998 does not improve AUC. Reverting changes.
Training on augumented user 98072 10/50 current_auc = 0.6471698113207547
User 98072 AUC after training: 0.647219463753724
User 98072 improves AUC. Keeping the model.
Training on augumented user 86558 11/50 current_auc = 0.647219463753724
User 86558 AUC after training: 0.6470705064548163
User 86558 does not improve AUC. Reverting changes.
Training on augumented user 40173 12/50 current_auc = 0.647219463753724
User 40173 AUC after training: 0.6467229394240318
User 40173 does not improve AUC. Reverting changes.
Training on augumented user 81766 13/50 current_auc = 0.647219463753724
User 81766 AUC after training: 0.6475670307845084
User 81766 improves AUC. Keeping the model.
Training on augumented user 138059 14/50 current_auc = 0.6475670307845084
User 138059 AUC after training: 0.6468222442899701
User 138059 does not improve AUC. Reverting changes.
Training on augumented user 114495 15/50 current_auc = 0.6475670307845084
User 114495 AUC after training: 0.647269116186693
User 114495 does not improve AUC. Reverting changes.
Training on augumented user 199 16/50 current_auc = 0.6475670307845084
User 199 AUC after training: 0.6471698113207547
User 199 does not improve AUC. Reverting changes.
Training on augumented user 100323 17/50 current_auc = 0.6475670307845084
User 100323 AUC after training: 0.6475173783515392
User 100323 does not improve AUC. Reverting changes.
Training on augumented user 102349 18/50 current_auc = 0.6475670307845084
User 102349 AUC after training: 0.6464746772591857
User 102349 does not improve AUC. Reverting changes.
Training on augumented user 29639 19/50 current_auc = 0.6475670307845084
User 29639 AUC after training: 0.6472691161866932
User 29639 does not improve AUC. Reverting changes.
Training on augumented user 91559 20/50 current_auc = 0.6475670307845084
User 91559 AUC after training: 0.6444389275074479
User 91559 does not improve AUC. Reverting changes.
Training on augumented user 124511 21/50 current_auc = 0.6475670307845084
User 124511 AUC after training: 0.6461271102284012
User 124511 does not improve AUC. Reverting changes.
Training on augumented user 119160 22/50 current_auc = 0.6475670307845084
User 119160 AUC after training: 0.6462264150943396
User 119160 does not improve AUC. Reverting changes.
Training on augumented user 16020 23/50 current_auc = 0.6475670307845084
User 16020 AUC after training: 0.6463257199602781
User 16020 does not improve AUC. Reverting changes.
Training on augumented user 99438 24/50 current_auc = 0.6475670307845084
User 99438 AUC after training: 0.6473187686196623
User 99438 does not improve AUC. Reverting changes.
Training on augumented user 137036 25/50 current_auc = 0.6475670307845084
User 137036 AUC after training: 0.6473187686196623
User 137036 does not improve AUC. Reverting changes.
Training on augumented user 55740 26/50 current_auc = 0.6475670307845084
User 55740 AUC after training: 0.6468718967229395
User 55740 does not improve AUC. Reverting changes.
Training on augumented user 7721 27/50 current_auc = 0.6475670307845084
User 7721 AUC after training: 0.6466732869910625
User 7721 does not improve AUC. Reverting changes.
Training on augumented user 136390 28/50 current_auc = 0.6475670307845084
User 136390 AUC after training: 0.6443396226415095
User 136390 does not improve AUC. Reverting changes.
Training on augumented user 93392 29/50 current_auc = 0.6475670307845084
User 93392 AUC after training: 0.647020854021847
User 93392 does not improve AUC. Reverting changes.
Training on augumented user 23872 30/50 current_auc = 0.6475670307845084
User 23872 AUC after training: 0.6473684210526316
User 23872 does not improve AUC. Reverting changes.
Training on augumented user 98690 31/50 current_auc = 0.6475670307845084
User 98690 AUC after training: 0.6486593843098313
User 98690 improves AUC. Keeping the model.
Training on augumented user 138309 32/50 current_auc = 0.6486593843098313
User 138309 AUC after training: 0.6490069513406156
User 138309 improves AUC. Keeping the model.
Training on augumented user 56174 33/50 current_auc = 0.6490069513406156
User 56174 AUC after training: 0.6462760675273088
User 56174 does not improve AUC. Reverting changes.
Training on augumented user 109651 34/50 current_auc = 0.6490069513406156
User 109651 AUC after training: 0.6492055610724925
User 109651 improves AUC. Keeping the model.
Training on augumented user 100716 35/50 current_auc = 0.6492055610724925
User 100716 AUC after training: 0.649106256206554
User 100716 does not improve AUC. Reverting changes.
Training on augumented user 79777 36/50 current_auc = 0.6492055610724925
User 79777 AUC after training: 0.6501986097318769
User 79777 improves AUC. Keeping the model.
Training on augumented user 45550 37/50 current_auc = 0.6501986097318769
User 45550 AUC after training: 0.6507447864945382
User 45550 improves AUC. Keeping the model.
Training on augumented user 2481 38/50 current_auc = 0.6507447864945382
User 2481 AUC after training: 0.6503475670307846
User 2481 does not improve AUC. Reverting changes.
Training on augumented user 65235 39/50 current_auc = 0.6507447864945382
User 65235 AUC after training: 0.6483614697120158
User 65235 does not improve AUC. Reverting changes.
Training on augumented user 25007 40/50 current_auc = 0.6507447864945382
User 25007 AUC after training: 0.6482125124131082
User 25007 does not improve AUC. Reverting changes.
Training on augumented user 49846 41/50 current_auc = 0.6507447864945382
User 49846 AUC after training: 0.6480635551142006
User 49846 does not improve AUC. Reverting changes.
Training on augumented user 110296 42/50 current_auc = 0.6507447864945382
User 110296 AUC after training: 0.65
User 110296 does not improve AUC. Reverting changes.
Training on augumented user 74528 43/50 current_auc = 0.6507447864945382
User 74528 AUC after training: 0.6503475670307846
User 74528 does not improve AUC. Reverting changes.
Training on augumented user 133394 44/50 current_auc = 0.6507447864945382
User 133394 AUC after training: 0.6476663356504468
User 133394 does not improve AUC. Reverting changes.
Training on augumented user 50170 45/50 current_auc = 0.6507447864945382
User 50170 AUC after training: 0.6503972194637536
User 50170 does not improve AUC. Reverting changes.
Training on augumented user 35391 46/50 current_auc = 0.6507447864945382
User 35391 AUC after training: 0.649875868917577
User 35391 does not improve AUC. Reverting changes.
Training on augumented user 65132 47/50 current_auc = 0.6507447864945382
User 65132 AUC after training: 0.6508440913604767
User 65132 improves AUC. Keeping the model.
Training on augumented user 40298 48/50 current_auc = 0.6508440913604767
User 40298 AUC after training: 0.6508440913604767
User 40298 does not improve AUC. Reverting changes.
Training on augumented user 92079 49/50 current_auc = 0.6508440913604767
User 92079 AUC after training: 0.651142005958292
User 92079 improves AUC. Keeping the model.
[2024-12-02 19:49:25.025748] start test user 130384 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:25.672602] start test user 130384 242/567 recall augumented users by random, augumented_users = [5098, 137307, 90582, 80630, 118561, 21212, 111849, 66928, 46091, 6280, 117598, 91411, 3499, 17531, 72633, 82511, 12661, 80439, 80602, 45438, 84216, 112365, 104647, 43058, 60464, 65454, 100442, 47273, 38144, 135426, 22281, 15514, 116358, 16937, 76454, 17630, 69769, 10374, 11645, 25227, 9202, 47231, 44632, 80930, 44566, 27061, 38382, 38858, 10975, 96780]
[2024-12-02 19:49:25.687811] user = 130384 Cloud 242/567
[2024-12-02 19:49:25.703780] user = 130384 Local 242/567
[2024-12-02 19:49:25.906971] user = 130384 Local+ 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:27.767934] user = 130384 MPDA- 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6529411764705882
Training on augumented user 5098 0/50 current_auc = 0.6529411764705882
User 5098 AUC after training: 0.6529411764705882
User 5098 does not improve AUC. Reverting changes.
Training on augumented user 137307 1/50 current_auc = 0.6529411764705882
User 137307 AUC after training: 0.6529411764705882
User 137307 does not improve AUC. Reverting changes.
Training on augumented user 90582 2/50 current_auc = 0.6529411764705882
User 90582 AUC after training: 0.6529411764705882
User 90582 does not improve AUC. Reverting changes.
Training on augumented user 80630 3/50 current_auc = 0.6529411764705882
User 80630 AUC after training: 0.6529411764705882
User 80630 does not improve AUC. Reverting changes.
Training on augumented user 118561 4/50 current_auc = 0.6529411764705882
User 118561 AUC after training: 0.6529411764705882
User 118561 does not improve AUC. Reverting changes.
Training on augumented user 21212 5/50 current_auc = 0.6529411764705882
User 21212 AUC after training: 0.6529411764705882
User 21212 does not improve AUC. Reverting changes.
Training on augumented user 111849 6/50 current_auc = 0.6529411764705882
User 111849 AUC after training: 0.6529411764705882
User 111849 does not improve AUC. Reverting changes.
Training on augumented user 66928 7/50 current_auc = 0.6529411764705882
User 66928 AUC after training: 0.6529411764705882
User 66928 does not improve AUC. Reverting changes.
Training on augumented user 46091 8/50 current_auc = 0.6529411764705882
User 46091 AUC after training: 0.6529411764705882
User 46091 does not improve AUC. Reverting changes.
Training on augumented user 6280 9/50 current_auc = 0.6529411764705882
User 6280 AUC after training: 0.6529411764705882
User 6280 does not improve AUC. Reverting changes.
Training on augumented user 117598 10/50 current_auc = 0.6529411764705882
User 117598 AUC after training: 0.6529411764705882
User 117598 does not improve AUC. Reverting changes.
Training on augumented user 91411 11/50 current_auc = 0.6529411764705882
User 91411 AUC after training: 0.6470588235294118
User 91411 does not improve AUC. Reverting changes.
Training on augumented user 3499 12/50 current_auc = 0.6529411764705882
User 3499 AUC after training: 0.6529411764705882
User 3499 does not improve AUC. Reverting changes.
Training on augumented user 17531 13/50 current_auc = 0.6529411764705882
User 17531 AUC after training: 0.6529411764705882
User 17531 does not improve AUC. Reverting changes.
Training on augumented user 72633 14/50 current_auc = 0.6529411764705882
User 72633 AUC after training: 0.6529411764705882
User 72633 does not improve AUC. Reverting changes.
Training on augumented user 82511 15/50 current_auc = 0.6529411764705882
User 82511 AUC after training: 0.6529411764705882
User 82511 does not improve AUC. Reverting changes.
Training on augumented user 12661 16/50 current_auc = 0.6529411764705882
User 12661 AUC after training: 0.6529411764705882
User 12661 does not improve AUC. Reverting changes.
Training on augumented user 80439 17/50 current_auc = 0.6529411764705882
User 80439 AUC after training: 0.6529411764705882
User 80439 does not improve AUC. Reverting changes.
Training on augumented user 80602 18/50 current_auc = 0.6529411764705882
User 80602 AUC after training: 0.6529411764705882
User 80602 does not improve AUC. Reverting changes.
Training on augumented user 45438 19/50 current_auc = 0.6529411764705882
User 45438 AUC after training: 0.6529411764705882
User 45438 does not improve AUC. Reverting changes.
Training on augumented user 84216 20/50 current_auc = 0.6529411764705882
User 84216 AUC after training: 0.6529411764705882
User 84216 does not improve AUC. Reverting changes.
Training on augumented user 112365 21/50 current_auc = 0.6529411764705882
User 112365 AUC after training: 0.6529411764705882
User 112365 does not improve AUC. Reverting changes.
Training on augumented user 104647 22/50 current_auc = 0.6529411764705882
User 104647 AUC after training: 0.6529411764705882
User 104647 does not improve AUC. Reverting changes.
Training on augumented user 43058 23/50 current_auc = 0.6529411764705882
User 43058 AUC after training: 0.6529411764705882
User 43058 does not improve AUC. Reverting changes.
Training on augumented user 60464 24/50 current_auc = 0.6529411764705882
User 60464 AUC after training: 0.6529411764705882
User 60464 does not improve AUC. Reverting changes.
Training on augumented user 65454 25/50 current_auc = 0.6529411764705882
User 65454 AUC after training: 0.6529411764705882
User 65454 does not improve AUC. Reverting changes.
Training on augumented user 100442 26/50 current_auc = 0.6529411764705882
User 100442 AUC after training: 0.6529411764705882
User 100442 does not improve AUC. Reverting changes.
Training on augumented user 47273 27/50 current_auc = 0.6529411764705882
User 47273 AUC after training: 0.6529411764705882
User 47273 does not improve AUC. Reverting changes.
Training on augumented user 38144 28/50 current_auc = 0.6529411764705882
User 38144 AUC after training: 0.6529411764705882
User 38144 does not improve AUC. Reverting changes.
Training on augumented user 135426 29/50 current_auc = 0.6529411764705882
User 135426 AUC after training: 0.6529411764705882
User 135426 does not improve AUC. Reverting changes.
Training on augumented user 22281 30/50 current_auc = 0.6529411764705882
User 22281 AUC after training: 0.6529411764705882
User 22281 does not improve AUC. Reverting changes.
Training on augumented user 15514 31/50 current_auc = 0.6529411764705882
User 15514 AUC after training: 0.6529411764705882
User 15514 does not improve AUC. Reverting changes.
Training on augumented user 116358 32/50 current_auc = 0.6529411764705882
User 116358 AUC after training: 0.6529411764705882
User 116358 does not improve AUC. Reverting changes.
Training on augumented user 16937 33/50 current_auc = 0.6529411764705882
User 16937 AUC after training: 0.6529411764705882
User 16937 does not improve AUC. Reverting changes.
Training on augumented user 76454 34/50 current_auc = 0.6529411764705882
User 76454 AUC after training: 0.6529411764705882
User 76454 does not improve AUC. Reverting changes.
Training on augumented user 17630 35/50 current_auc = 0.6529411764705882
User 17630 AUC after training: 0.6529411764705882
User 17630 does not improve AUC. Reverting changes.
Training on augumented user 69769 36/50 current_auc = 0.6529411764705882
User 69769 AUC after training: 0.6529411764705882
User 69769 does not improve AUC. Reverting changes.
Training on augumented user 10374 37/50 current_auc = 0.6529411764705882
User 10374 AUC after training: 0.6529411764705882
User 10374 does not improve AUC. Reverting changes.
Training on augumented user 11645 38/50 current_auc = 0.6529411764705882
User 11645 AUC after training: 0.6470588235294118
User 11645 does not improve AUC. Reverting changes.
Training on augumented user 25227 39/50 current_auc = 0.6529411764705882
User 25227 AUC after training: 0.6529411764705882
User 25227 does not improve AUC. Reverting changes.
Training on augumented user 9202 40/50 current_auc = 0.6529411764705882
User 9202 AUC after training: 0.6470588235294118
User 9202 does not improve AUC. Reverting changes.
Training on augumented user 47231 41/50 current_auc = 0.6529411764705882
User 47231 AUC after training: 0.6529411764705882
User 47231 does not improve AUC. Reverting changes.
Training on augumented user 44632 42/50 current_auc = 0.6529411764705882
User 44632 AUC after training: 0.6529411764705882
User 44632 does not improve AUC. Reverting changes.
Training on augumented user 80930 43/50 current_auc = 0.6529411764705882
User 80930 AUC after training: 0.6529411764705882
User 80930 does not improve AUC. Reverting changes.
Training on augumented user 44566 44/50 current_auc = 0.6529411764705882
User 44566 AUC after training: 0.6529411764705882
User 44566 does not improve AUC. Reverting changes.
Training on augumented user 27061 45/50 current_auc = 0.6529411764705882
User 27061 AUC after training: 0.6529411764705882
User 27061 does not improve AUC. Reverting changes.
Training on augumented user 38382 46/50 current_auc = 0.6529411764705882
User 38382 AUC after training: 0.6529411764705882
User 38382 does not improve AUC. Reverting changes.
Training on augumented user 38858 47/50 current_auc = 0.6529411764705882
User 38858 AUC after training: 0.6529411764705882
User 38858 does not improve AUC. Reverting changes.
Training on augumented user 10975 48/50 current_auc = 0.6529411764705882
User 10975 AUC after training: 0.6529411764705882
User 10975 does not improve AUC. Reverting changes.
Training on augumented user 96780 49/50 current_auc = 0.6529411764705882
User 96780 AUC after training: 0.6529411764705882
User 96780 does not improve AUC. Reverting changes.
[2024-12-02 19:49:57.222030] start test user 130390 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:57.702819] start test user 130390 243/567 recall augumented users by random, augumented_users = [61701, 24920, 35761, 115794, 128650, 62634, 75930, 78921, 103759, 72988, 127056, 50138, 132038, 136818, 58631, 20971, 6334, 99250, 69770, 71073, 99838, 45100, 134895, 71766, 20963, 115573, 72881, 37701, 81052, 136293, 100114, 60263, 65565, 109124, 97519, 115381, 11762, 98351, 27949, 106289, 110338, 10368, 120849, 123530, 124651, 13252, 17248, 110048, 116749, 35606]
[2024-12-02 19:49:57.718645] user = 130390 Cloud 243/567
[2024-12-02 19:49:57.727965] user = 130390 Local 243/567
[2024-12-02 19:49:58.031500] user = 130390 Local+ 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:00.233337] user = 130390 MPDA- 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.37962962962962965
Training on augumented user 61701 0/50 current_auc = 0.37962962962962965
User 61701 AUC after training: 0.37962962962962965
User 61701 does not improve AUC. Reverting changes.
Training on augumented user 24920 1/50 current_auc = 0.37962962962962965
User 24920 AUC after training: 0.37962962962962965
User 24920 does not improve AUC. Reverting changes.
Training on augumented user 35761 2/50 current_auc = 0.37962962962962965
User 35761 AUC after training: 0.37037037037037035
User 35761 does not improve AUC. Reverting changes.
Training on augumented user 115794 3/50 current_auc = 0.37962962962962965
User 115794 AUC after training: 0.37962962962962965
User 115794 does not improve AUC. Reverting changes.
Training on augumented user 128650 4/50 current_auc = 0.37962962962962965
User 128650 AUC after training: 0.37962962962962965
User 128650 does not improve AUC. Reverting changes.
Training on augumented user 62634 5/50 current_auc = 0.37962962962962965
User 62634 AUC after training: 0.37962962962962965
User 62634 does not improve AUC. Reverting changes.
Training on augumented user 75930 6/50 current_auc = 0.37962962962962965
User 75930 AUC after training: 0.37962962962962965
User 75930 does not improve AUC. Reverting changes.
Training on augumented user 78921 7/50 current_auc = 0.37962962962962965
User 78921 AUC after training: 0.37962962962962965
User 78921 does not improve AUC. Reverting changes.
Training on augumented user 103759 8/50 current_auc = 0.37962962962962965
User 103759 AUC after training: 0.37962962962962965
User 103759 does not improve AUC. Reverting changes.
Training on augumented user 72988 9/50 current_auc = 0.37962962962962965
User 72988 AUC after training: 0.3796296296296296
User 72988 does not improve AUC. Reverting changes.
Training on augumented user 127056 10/50 current_auc = 0.37962962962962965
User 127056 AUC after training: 0.37962962962962965
User 127056 does not improve AUC. Reverting changes.
Training on augumented user 50138 11/50 current_auc = 0.37962962962962965
User 50138 AUC after training: 0.37962962962962965
User 50138 does not improve AUC. Reverting changes.
Training on augumented user 132038 12/50 current_auc = 0.37962962962962965
User 132038 AUC after training: 0.38425925925925924
User 132038 improves AUC. Keeping the model.
Training on augumented user 136818 13/50 current_auc = 0.38425925925925924
User 136818 AUC after training: 0.38425925925925924
User 136818 does not improve AUC. Reverting changes.
Training on augumented user 58631 14/50 current_auc = 0.38425925925925924
User 58631 AUC after training: 0.38425925925925924
User 58631 does not improve AUC. Reverting changes.
Training on augumented user 20971 15/50 current_auc = 0.38425925925925924
User 20971 AUC after training: 0.38425925925925924
User 20971 does not improve AUC. Reverting changes.
Training on augumented user 6334 16/50 current_auc = 0.38425925925925924
User 6334 AUC after training: 0.38425925925925924
User 6334 does not improve AUC. Reverting changes.
Training on augumented user 99250 17/50 current_auc = 0.38425925925925924
User 99250 AUC after training: 0.37962962962962965
User 99250 does not improve AUC. Reverting changes.
Training on augumented user 69770 18/50 current_auc = 0.38425925925925924
User 69770 AUC after training: 0.37962962962962965
User 69770 does not improve AUC. Reverting changes.
Training on augumented user 71073 19/50 current_auc = 0.38425925925925924
User 71073 AUC after training: 0.38425925925925924
User 71073 does not improve AUC. Reverting changes.
Training on augumented user 99838 20/50 current_auc = 0.38425925925925924
User 99838 AUC after training: 0.38425925925925924
User 99838 does not improve AUC. Reverting changes.
Training on augumented user 45100 21/50 current_auc = 0.38425925925925924
User 45100 AUC after training: 0.38425925925925924
User 45100 does not improve AUC. Reverting changes.
Training on augumented user 134895 22/50 current_auc = 0.38425925925925924
User 134895 AUC after training: 0.37962962962962965
User 134895 does not improve AUC. Reverting changes.
Training on augumented user 71766 23/50 current_auc = 0.38425925925925924
User 71766 AUC after training: 0.38425925925925924
User 71766 does not improve AUC. Reverting changes.
Training on augumented user 20963 24/50 current_auc = 0.38425925925925924
User 20963 AUC after training: 0.38425925925925924
User 20963 does not improve AUC. Reverting changes.
Training on augumented user 115573 25/50 current_auc = 0.38425925925925924
User 115573 AUC after training: 0.38425925925925924
User 115573 does not improve AUC. Reverting changes.
Training on augumented user 72881 26/50 current_auc = 0.38425925925925924
User 72881 AUC after training: 0.38425925925925924
User 72881 does not improve AUC. Reverting changes.
Training on augumented user 37701 27/50 current_auc = 0.38425925925925924
User 37701 AUC after training: 0.38425925925925924
User 37701 does not improve AUC. Reverting changes.
Training on augumented user 81052 28/50 current_auc = 0.38425925925925924
User 81052 AUC after training: 0.37962962962962965
User 81052 does not improve AUC. Reverting changes.
Training on augumented user 136293 29/50 current_auc = 0.38425925925925924
User 136293 AUC after training: 0.38425925925925924
User 136293 does not improve AUC. Reverting changes.
Training on augumented user 100114 30/50 current_auc = 0.38425925925925924
User 100114 AUC after training: 0.38425925925925924
User 100114 does not improve AUC. Reverting changes.
Training on augumented user 60263 31/50 current_auc = 0.38425925925925924
User 60263 AUC after training: 0.3888888888888889
User 60263 improves AUC. Keeping the model.
Training on augumented user 65565 32/50 current_auc = 0.3888888888888889
User 65565 AUC after training: 0.3888888888888889
User 65565 does not improve AUC. Reverting changes.
Training on augumented user 109124 33/50 current_auc = 0.3888888888888889
User 109124 AUC after training: 0.38425925925925924
User 109124 does not improve AUC. Reverting changes.
Training on augumented user 97519 34/50 current_auc = 0.3888888888888889
User 97519 AUC after training: 0.38425925925925924
User 97519 does not improve AUC. Reverting changes.
Training on augumented user 115381 35/50 current_auc = 0.3888888888888889
User 115381 AUC after training: 0.3888888888888889
User 115381 does not improve AUC. Reverting changes.
Training on augumented user 11762 36/50 current_auc = 0.3888888888888889
User 11762 AUC after training: 0.3888888888888889
User 11762 does not improve AUC. Reverting changes.
Training on augumented user 98351 37/50 current_auc = 0.3888888888888889
User 98351 AUC after training: 0.3888888888888889
User 98351 does not improve AUC. Reverting changes.
Training on augumented user 27949 38/50 current_auc = 0.3888888888888889
User 27949 AUC after training: 0.3888888888888889
User 27949 does not improve AUC. Reverting changes.
Training on augumented user 106289 39/50 current_auc = 0.3888888888888889
User 106289 AUC after training: 0.3796296296296296
User 106289 does not improve AUC. Reverting changes.
Training on augumented user 110338 40/50 current_auc = 0.3888888888888889
User 110338 AUC after training: 0.3888888888888889
User 110338 does not improve AUC. Reverting changes.
Training on augumented user 10368 41/50 current_auc = 0.3888888888888889
User 10368 AUC after training: 0.3888888888888889
User 10368 does not improve AUC. Reverting changes.
Training on augumented user 120849 42/50 current_auc = 0.3888888888888889
User 120849 AUC after training: 0.38425925925925924
User 120849 does not improve AUC. Reverting changes.
Training on augumented user 123530 43/50 current_auc = 0.3888888888888889
User 123530 AUC after training: 0.3888888888888889
User 123530 does not improve AUC. Reverting changes.
Training on augumented user 124651 44/50 current_auc = 0.3888888888888889
User 124651 AUC after training: 0.38425925925925924
User 124651 does not improve AUC. Reverting changes.
Training on augumented user 13252 45/50 current_auc = 0.3888888888888889
User 13252 AUC after training: 0.3888888888888889
User 13252 does not improve AUC. Reverting changes.
Training on augumented user 17248 46/50 current_auc = 0.3888888888888889
User 17248 AUC after training: 0.3888888888888889
User 17248 does not improve AUC. Reverting changes.
Training on augumented user 110048 47/50 current_auc = 0.3888888888888889
User 110048 AUC after training: 0.3796296296296296
User 110048 does not improve AUC. Reverting changes.
Training on augumented user 116749 48/50 current_auc = 0.3888888888888889
User 116749 AUC after training: 0.3888888888888889
User 116749 does not improve AUC. Reverting changes.
Training on augumented user 35606 49/50 current_auc = 0.3888888888888889
User 35606 AUC after training: 0.3888888888888889
User 35606 does not improve AUC. Reverting changes.
[2024-12-02 19:50:28.787051] start test user 130407 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:29.365401] start test user 130407 244/567 recall augumented users by random, augumented_users = [35534, 42858, 81034, 100499, 118563, 59061, 133983, 24350, 33441, 61379, 125752, 21728, 91834, 61511, 94557, 39755, 125838, 124108, 94627, 10221, 62642, 91384, 74949, 24648, 123555, 83370, 82844, 108815, 77741, 31711, 52028, 46471, 19900, 24193, 71878, 55181, 13922, 126999, 83647, 90746, 123988, 57532, 130151, 51118, 55701, 132542, 5635, 91199, 64017, 121308]
[2024-12-02 19:50:29.380458] user = 130407 Cloud 244/567
[2024-12-02 19:50:29.399487] user = 130407 Local 244/567
[2024-12-02 19:50:29.428567] user = 130407 Local+ 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:31.839736] user = 130407 MPDA- 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6537143887486476
Training on augumented user 35534 0/50 current_auc = 0.6537143887486476
User 35534 AUC after training: 0.6538045438153625
User 35534 improves AUC. Keeping the model.
Training on augumented user 42858 1/50 current_auc = 0.6538045438153625
User 42858 AUC after training: 0.6545257843490805
User 42858 improves AUC. Keeping the model.
Training on augumented user 81034 2/50 current_auc = 0.6545257843490805
User 81034 AUC after training: 0.6551568698160837
User 81034 improves AUC. Keeping the model.
Training on augumented user 100499 3/50 current_auc = 0.6551568698160837
User 100499 AUC after training: 0.6551568698160837
User 100499 does not improve AUC. Reverting changes.
Training on augumented user 118563 4/50 current_auc = 0.6551568698160837
User 118563 AUC after training: 0.6552470248827984
User 118563 improves AUC. Keeping the model.
Training on augumented user 59061 5/50 current_auc = 0.6552470248827984
User 59061 AUC after training: 0.6552470248827984
User 59061 does not improve AUC. Reverting changes.
Training on augumented user 133983 6/50 current_auc = 0.6552470248827984
User 133983 AUC after training: 0.6545257843490803
User 133983 does not improve AUC. Reverting changes.
Training on augumented user 24350 7/50 current_auc = 0.6552470248827984
User 24350 AUC after training: 0.6551568698160836
User 24350 does not improve AUC. Reverting changes.
Training on augumented user 33441 8/50 current_auc = 0.6552470248827984
User 33441 AUC after training: 0.6543454742156509
User 33441 does not improve AUC. Reverting changes.
Training on augumented user 61379 9/50 current_auc = 0.6552470248827984
User 61379 AUC after training: 0.6541651640822214
User 61379 does not improve AUC. Reverting changes.
Training on augumented user 125752 10/50 current_auc = 0.6552470248827984
User 125752 AUC after training: 0.6558781103498017
User 125752 improves AUC. Keeping the model.
Training on augumented user 21728 11/50 current_auc = 0.6558781103498017
User 21728 AUC after training: 0.6539848539487919
User 21728 does not improve AUC. Reverting changes.
Training on augumented user 91834 12/50 current_auc = 0.6558781103498017
User 91834 AUC after training: 0.6565993508835197
User 91834 improves AUC. Keeping the model.
Training on augumented user 61511 13/50 current_auc = 0.6565993508835197
User 61511 AUC after training: 0.6558781103498017
User 61511 does not improve AUC. Reverting changes.
Training on augumented user 94557 14/50 current_auc = 0.6565993508835197
User 94557 AUC after training: 0.6542553191489362
User 94557 does not improve AUC. Reverting changes.
Training on augumented user 39755 15/50 current_auc = 0.6565993508835197
User 39755 AUC after training: 0.6567796610169492
User 39755 improves AUC. Keeping the model.
Training on augumented user 125838 16/50 current_auc = 0.6567796610169492
User 125838 AUC after training: 0.6564190407500902
User 125838 does not improve AUC. Reverting changes.
Training on augumented user 124108 17/50 current_auc = 0.6567796610169492
User 124108 AUC after training: 0.6564190407500902
User 124108 does not improve AUC. Reverting changes.
Training on augumented user 94627 18/50 current_auc = 0.6567796610169492
User 94627 AUC after training: 0.6560584204832312
User 94627 does not improve AUC. Reverting changes.
Training on augumented user 10221 19/50 current_auc = 0.6567796610169492
User 10221 AUC after training: 0.6562387306166606
User 10221 does not improve AUC. Reverting changes.
Training on augumented user 62642 20/50 current_auc = 0.6567796610169492
User 62642 AUC after training: 0.6543454742156509
User 62642 does not improve AUC. Reverting changes.
Training on augumented user 91384 21/50 current_auc = 0.6567796610169492
User 91384 AUC after training: 0.6559682654165163
User 91384 does not improve AUC. Reverting changes.
Training on augumented user 74949 22/50 current_auc = 0.6567796610169492
User 74949 AUC after training: 0.6562387306166607
User 74949 does not improve AUC. Reverting changes.
Training on augumented user 24648 23/50 current_auc = 0.6567796610169492
User 24648 AUC after training: 0.655787955283087
User 24648 does not improve AUC. Reverting changes.
Training on augumented user 123555 24/50 current_auc = 0.6567796610169492
User 123555 AUC after training: 0.6562387306166607
User 123555 does not improve AUC. Reverting changes.
Training on augumented user 83370 25/50 current_auc = 0.6567796610169492
User 83370 AUC after training: 0.6555174900829427
User 83370 does not improve AUC. Reverting changes.
Training on augumented user 82844 26/50 current_auc = 0.6567796610169492
User 82844 AUC after training: 0.6547060944825099
User 82844 does not improve AUC. Reverting changes.
Training on augumented user 108815 27/50 current_auc = 0.6567796610169492
User 108815 AUC after training: 0.6554273350162279
User 108815 does not improve AUC. Reverting changes.
Training on augumented user 77741 28/50 current_auc = 0.6567796610169492
User 77741 AUC after training: 0.6559682654165164
User 77741 does not improve AUC. Reverting changes.
Training on augumented user 31711 29/50 current_auc = 0.6567796610169492
User 31711 AUC after training: 0.6556978002163721
User 31711 does not improve AUC. Reverting changes.
Training on augumented user 52028 30/50 current_auc = 0.6567796610169492
User 52028 AUC after training: 0.6561485755499459
User 52028 does not improve AUC. Reverting changes.
Training on augumented user 46471 31/50 current_auc = 0.6567796610169492
User 46471 AUC after training: 0.6547962495492247
User 46471 does not improve AUC. Reverting changes.
Training on augumented user 19900 32/50 current_auc = 0.6567796610169492
User 19900 AUC after training: 0.6552470248827984
User 19900 does not improve AUC. Reverting changes.
Training on augumented user 24193 33/50 current_auc = 0.6567796610169492
User 24193 AUC after training: 0.6562387306166607
User 24193 does not improve AUC. Reverting changes.
Training on augumented user 71878 34/50 current_auc = 0.6567796610169492
User 71878 AUC after training: 0.6562387306166608
User 71878 does not improve AUC. Reverting changes.
Training on augumented user 55181 35/50 current_auc = 0.6567796610169492
User 55181 AUC after training: 0.6564190407500902
User 55181 does not improve AUC. Reverting changes.
Training on augumented user 13922 36/50 current_auc = 0.6567796610169492
User 13922 AUC after training: 0.6547060944825098
User 13922 does not improve AUC. Reverting changes.
Training on augumented user 126999 37/50 current_auc = 0.6567796610169492
User 126999 AUC after training: 0.6560584204832313
User 126999 does not improve AUC. Reverting changes.
Training on augumented user 83647 38/50 current_auc = 0.6567796610169492
User 83647 AUC after training: 0.6564190407500903
User 83647 does not improve AUC. Reverting changes.
Training on augumented user 90746 39/50 current_auc = 0.6567796610169492
User 90746 AUC after training: 0.6562387306166606
User 90746 does not improve AUC. Reverting changes.
Training on augumented user 123988 40/50 current_auc = 0.6567796610169492
User 123988 AUC after training: 0.6551568698160838
User 123988 does not improve AUC. Reverting changes.
Training on augumented user 57532 41/50 current_auc = 0.6567796610169492
User 57532 AUC after training: 0.6540750090155066
User 57532 does not improve AUC. Reverting changes.
Training on augumented user 130151 42/50 current_auc = 0.6567796610169492
User 130151 AUC after training: 0.6532636134150739
User 130151 does not improve AUC. Reverting changes.
Training on augumented user 51118 43/50 current_auc = 0.6567796610169492
User 51118 AUC after training: 0.6560584204832312
User 51118 does not improve AUC. Reverting changes.
Training on augumented user 55701 44/50 current_auc = 0.6567796610169492
User 55701 AUC after training: 0.6552470248827984
User 55701 does not improve AUC. Reverting changes.
Training on augumented user 132542 45/50 current_auc = 0.6567796610169492
User 132542 AUC after training: 0.6558781103498016
User 132542 does not improve AUC. Reverting changes.
Training on augumented user 5635 46/50 current_auc = 0.6567796610169492
User 5635 AUC after training: 0.6567796610169491
User 5635 does not improve AUC. Reverting changes.
Training on augumented user 91199 47/50 current_auc = 0.6567796610169492
User 91199 AUC after training: 0.6560584204832312
User 91199 does not improve AUC. Reverting changes.
Training on augumented user 64017 48/50 current_auc = 0.6567796610169492
User 64017 AUC after training: 0.6551568698160838
User 64017 does not improve AUC. Reverting changes.
Training on augumented user 121308 49/50 current_auc = 0.6567796610169492
User 121308 AUC after training: 0.6556076451496574
User 121308 does not improve AUC. Reverting changes.
[2024-12-02 19:50:59.355795] start test user 130420 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:59.756301] start test user 130420 245/567 recall augumented users by random, augumented_users = [77205, 125634, 34978, 34733, 131549, 10158, 14014, 97404, 90960, 96820, 80455, 13799, 68488, 8960, 116788, 117952, 37310, 133801, 4004, 46525, 48933, 117637, 67663, 82424, 51664, 86721, 62005, 111756, 38123, 62313, 18253, 69190, 23480, 84422, 40819, 93905, 90160, 80240, 76506, 129454, 17456, 38892, 43601, 25881, 83908, 131403, 94113, 28940, 14545, 15109]
[2024-12-02 19:50:59.772588] user = 130420 Cloud 245/567
[2024-12-02 19:50:59.826803] user = 130420 Local 245/567
[2024-12-02 19:50:59.885758] user = 130420 Local+ 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:01.851007] user = 130420 MPDA- 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.73464339700426
Training on augumented user 77205 0/50 current_auc = 0.73464339700426
User 77205 AUC after training: 0.7354068373719329
User 77205 improves AUC. Keeping the model.
Training on augumented user 125634 1/50 current_auc = 0.7354068373719329
User 125634 AUC after training: 0.7351472676469242
User 125634 does not improve AUC. Reverting changes.
Training on augumented user 34978 2/50 current_auc = 0.7354068373719329
User 34978 AUC after training: 0.7353915685645795
User 34978 does not improve AUC. Reverting changes.
Training on augumented user 34733 3/50 current_auc = 0.7354068373719329
User 34733 AUC after training: 0.7349793107660361
User 34733 does not improve AUC. Reverting changes.
Training on augumented user 131549 4/50 current_auc = 0.7354068373719329
User 131549 AUC after training: 0.7354984502160536
User 131549 improves AUC. Keeping the model.
Training on augumented user 10158 5/50 current_auc = 0.7354984502160536
User 10158 AUC after training: 0.7363229658131403
User 10158 improves AUC. Keeping the model.
Training on augumented user 14014 6/50 current_auc = 0.7363229658131403
User 14014 AUC after training: 0.7371169437955201
User 14014 improves AUC. Keeping the model.
Training on augumented user 97404 7/50 current_auc = 0.7371169437955201
User 97404 AUC after training: 0.7375750080161239
User 97404 improves AUC. Keeping the model.
Training on augumented user 90960 8/50 current_auc = 0.7375750080161239
User 90960 AUC after training: 0.7370405997587528
User 90960 does not improve AUC. Reverting changes.
Training on augumented user 96820 9/50 current_auc = 0.7375750080161239
User 96820 AUC after training: 0.737712427282305
User 96820 improves AUC. Keeping the model.
Training on augumented user 80455 10/50 current_auc = 0.737712427282305
User 80455 AUC after training: 0.7378803841631929
User 80455 improves AUC. Keeping the model.
Training on augumented user 13799 11/50 current_auc = 0.7378803841631929
User 13799 AUC after training: 0.7378803841631929
User 13799 does not improve AUC. Reverting changes.
Training on augumented user 68488 12/50 current_auc = 0.7378803841631929
User 68488 AUC after training: 0.7377429648970119
User 68488 does not improve AUC. Reverting changes.
Training on augumented user 8960 13/50 current_auc = 0.7378803841631929
User 8960 AUC after training: 0.7375902768234772
User 8960 does not improve AUC. Reverting changes.
Training on augumented user 116788 14/50 current_auc = 0.7378803841631929
User 116788 AUC after training: 0.737712427282305
User 116788 does not improve AUC. Reverting changes.
Training on augumented user 117952 15/50 current_auc = 0.7378803841631929
User 117952 AUC after training: 0.7380559754477578
User 117952 improves AUC. Keeping the model.
Training on augumented user 37310 16/50 current_auc = 0.7380559754477578
User 37310 AUC after training: 0.7383155451727665
User 37310 improves AUC. Keeping the model.
Training on augumented user 133801 17/50 current_auc = 0.7383155451727665
User 133801 AUC after training: 0.7385980181088055
User 133801 improves AUC. Keeping the model.
Training on augumented user 4004 18/50 current_auc = 0.7385980181088055
User 4004 AUC after training: 0.7386590933382193
User 4004 improves AUC. Keeping the model.
Training on augumented user 46525 19/50 current_auc = 0.7386590933382193
User 46525 AUC after training: 0.7391629639808834
User 46525 improves AUC. Keeping the model.
Training on augumented user 48933 20/50 current_auc = 0.7391629639808834
User 48933 AUC after training: 0.7390713511367628
User 48933 does not improve AUC. Reverting changes.
Training on augumented user 117637 21/50 current_auc = 0.7391629639808834
User 117637 AUC after training: 0.7390560823294092
User 117637 does not improve AUC. Reverting changes.
Training on augumented user 67663 22/50 current_auc = 0.7391629639808834
User 67663 AUC after training: 0.7389033942558748
User 67663 does not improve AUC. Reverting changes.
Training on augumented user 82424 23/50 current_auc = 0.7391629639808834
User 82424 AUC after training: 0.738949200677935
User 82424 does not improve AUC. Reverting changes.
Training on augumented user 51664 24/50 current_auc = 0.7391629639808834
User 51664 AUC after training: 0.7390866199441162
User 51664 does not improve AUC. Reverting changes.
Training on augumented user 86721 25/50 current_auc = 0.7391629639808834
User 86721 AUC after training: 0.7390102759073489
User 86721 does not improve AUC. Reverting changes.
Training on augumented user 62005 26/50 current_auc = 0.7391629639808834
User 62005 AUC after training: 0.7387278029713098
User 62005 does not improve AUC. Reverting changes.
Training on augumented user 111756 27/50 current_auc = 0.7391629639808834
User 111756 AUC after training: 0.7387659749896934
User 111756 does not improve AUC. Reverting changes.
Training on augumented user 38123 28/50 current_auc = 0.7391629639808834
User 38123 AUC after training: 0.7387812437970469
User 38123 does not improve AUC. Reverting changes.
Training on augumented user 62313 29/50 current_auc = 0.7391629639808834
User 62313 AUC after training: 0.7391629639808834
User 62313 does not improve AUC. Reverting changes.
Training on augumented user 18253 30/50 current_auc = 0.7391629639808834
User 18253 AUC after training: 0.7391018887514695
User 18253 does not improve AUC. Reverting changes.
Training on augumented user 69190 31/50 current_auc = 0.7391629639808834
User 69190 AUC after training: 0.7391476951735301
User 69190 does not improve AUC. Reverting changes.
Training on augumented user 23480 32/50 current_auc = 0.7391629639808834
User 23480 AUC after training: 0.7392698456323579
User 23480 improves AUC. Keeping the model.
Training on augumented user 84422 33/50 current_auc = 0.7392698456323579
User 84422 AUC after training: 0.7394683401279525
User 84422 improves AUC. Keeping the model.
Training on augumented user 40819 34/50 current_auc = 0.7394683401279525
User 40819 AUC after training: 0.7394072648985387
User 40819 does not improve AUC. Reverting changes.
Training on augumented user 93905 35/50 current_auc = 0.7394683401279525
User 93905 AUC after training: 0.7394836089353061
User 93905 improves AUC. Keeping the model.
Training on augumented user 90160 36/50 current_auc = 0.7394836089353061
User 90160 AUC after training: 0.7393767272838319
User 90160 does not improve AUC. Reverting changes.
Training on augumented user 80240 37/50 current_auc = 0.7394836089353061
User 80240 AUC after training: 0.7395904905867803
User 80240 improves AUC. Keeping the model.
Training on augumented user 76506 38/50 current_auc = 0.7395904905867803
User 76506 AUC after training: 0.7389644694852886
User 76506 does not improve AUC. Reverting changes.
Training on augumented user 129454 39/50 current_auc = 0.7395904905867803
User 129454 AUC after training: 0.7395904905867803
User 129454 does not improve AUC. Reverting changes.
Training on augumented user 17456 40/50 current_auc = 0.7395904905867803
User 17456 AUC after training: 0.7393461896691249
User 17456 does not improve AUC. Reverting changes.
Training on augumented user 38892 41/50 current_auc = 0.7395904905867803
User 38892 AUC after training: 0.7394072648985388
User 38892 does not improve AUC. Reverting changes.
Training on augumented user 43601 42/50 current_auc = 0.7395904905867803
User 43601 AUC after training: 0.7381704915029088
User 43601 does not improve AUC. Reverting changes.
Training on augumented user 25881 43/50 current_auc = 0.7395904905867803
User 25881 AUC after training: 0.7398653291191426
User 25881 improves AUC. Keeping the model.
Training on augumented user 83908 44/50 current_auc = 0.7398653291191426
User 83908 AUC after training: 0.7397584474676683
User 83908 does not improve AUC. Reverting changes.
Training on augumented user 131403 45/50 current_auc = 0.7398653291191426
User 131403 AUC after training: 0.7396592002198709
User 131403 does not improve AUC. Reverting changes.
Training on augumented user 94113 46/50 current_auc = 0.7398653291191426
User 94113 AUC after training: 0.739850060311789
User 94113 does not improve AUC. Reverting changes.
Training on augumented user 28940 47/50 current_auc = 0.7398653291191426
User 28940 AUC after training: 0.7394530713205992
User 28940 does not improve AUC. Reverting changes.
Training on augumented user 14545 48/50 current_auc = 0.7398653291191426
User 14545 AUC after training: 0.7397584474676683
User 14545 does not improve AUC. Reverting changes.
Training on augumented user 15109 49/50 current_auc = 0.7398653291191426
User 15109 AUC after training: 0.7397584474676683
User 15109 does not improve AUC. Reverting changes.
[2024-12-02 19:51:32.675908] start test user 130446 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:33.090915] start test user 130446 246/567 recall augumented users by random, augumented_users = [6359, 947, 96486, 23695, 34911, 39161, 62918, 49767, 66955, 13620, 29803, 96814, 19266, 71968, 108049, 94506, 120131, 21015, 47332, 48893, 60386, 65379, 138279, 123923, 61281, 9175, 118795, 55694, 62319, 19599, 25172, 121222, 100574, 33638, 119659, 24498, 6576, 104019, 110860, 134190, 99762, 85847, 121997, 121968, 80609, 1635, 39427, 110222, 28730, 108132]
[2024-12-02 19:51:33.106829] user = 130446 Cloud 246/567
[2024-12-02 19:51:33.134141] user = 130446 Local 246/567
[2024-12-02 19:51:33.235107] user = 130446 Local+ 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:35.822708] user = 130446 MPDA- 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6827338129496403
Training on augumented user 6359 0/50 current_auc = 0.6827338129496403
User 6359 AUC after training: 0.6826949251409683
User 6359 does not improve AUC. Reverting changes.
Training on augumented user 947 1/50 current_auc = 0.6827338129496403
User 947 AUC after training: 0.6826171495236243
User 947 does not improve AUC. Reverting changes.
Training on augumented user 96486 2/50 current_auc = 0.6827338129496403
User 96486 AUC after training: 0.6826171495236243
User 96486 does not improve AUC. Reverting changes.
Training on augumented user 23695 3/50 current_auc = 0.6827338129496403
User 23695 AUC after training: 0.6828893641843281
User 23695 improves AUC. Keeping the model.
Training on augumented user 34911 4/50 current_auc = 0.6828893641843281
User 34911 AUC after training: 0.6830449154190161
User 34911 improves AUC. Keeping the model.
Training on augumented user 39161 5/50 current_auc = 0.6830449154190161
User 39161 AUC after training: 0.6829671398016722
User 39161 does not improve AUC. Reverting changes.
Training on augumented user 62918 6/50 current_auc = 0.6830449154190161
User 62918 AUC after training: 0.6823449348629206
User 62918 does not improve AUC. Reverting changes.
Training on augumented user 49767 7/50 current_auc = 0.6830449154190161
User 49767 AUC after training: 0.6827727007583122
User 49767 does not improve AUC. Reverting changes.
Training on augumented user 66955 8/50 current_auc = 0.6830449154190161
User 66955 AUC after training: 0.6821116080108885
User 66955 does not improve AUC. Reverting changes.
Training on augumented user 13620 9/50 current_auc = 0.6830449154190161
User 13620 AUC after training: 0.6828504763756561
User 13620 does not improve AUC. Reverting changes.
Training on augumented user 29803 10/50 current_auc = 0.6830449154190161
User 29803 AUC after training: 0.6829671398016722
User 29803 does not improve AUC. Reverting changes.
Training on augumented user 96814 11/50 current_auc = 0.6830449154190161
User 96814 AUC after training: 0.6825004860976085
User 96814 does not improve AUC. Reverting changes.
Training on augumented user 19266 12/50 current_auc = 0.6830449154190161
User 19266 AUC after training: 0.6830449154190161
User 19266 does not improve AUC. Reverting changes.
Training on augumented user 71968 13/50 current_auc = 0.6830449154190161
User 71968 AUC after training: 0.6830449154190161
User 71968 does not improve AUC. Reverting changes.
Training on augumented user 108049 14/50 current_auc = 0.6830449154190161
User 108049 AUC after training: 0.6829671398016721
User 108049 does not improve AUC. Reverting changes.
Training on augumented user 94506 15/50 current_auc = 0.6830449154190161
User 94506 AUC after training: 0.6833365739840559
User 94506 improves AUC. Keeping the model.
Training on augumented user 120131 16/50 current_auc = 0.6833365739840559
User 120131 AUC after training: 0.6836282325490959
User 120131 improves AUC. Keeping the model.
Training on augumented user 21015 17/50 current_auc = 0.6836282325490959
User 21015 AUC after training: 0.6838615594011277
User 21015 improves AUC. Keeping the model.
Training on augumented user 47332 18/50 current_auc = 0.6838615594011277
User 47332 AUC after training: 0.6839782228271437
User 47332 improves AUC. Keeping the model.
Training on augumented user 48893 19/50 current_auc = 0.6839782228271437
User 48893 AUC after training: 0.68351156912308
User 48893 does not improve AUC. Reverting changes.
Training on augumented user 60386 20/50 current_auc = 0.6839782228271437
User 60386 AUC after training: 0.6836282325490959
User 60386 does not improve AUC. Reverting changes.
Training on augumented user 65379 21/50 current_auc = 0.6839782228271437
User 65379 AUC after training: 0.685514291269687
User 65379 improves AUC. Keeping the model.
Training on augumented user 138279 22/50 current_auc = 0.685514291269687
User 138279 AUC after training: 0.6851643009916392
User 138279 does not improve AUC. Reverting changes.
Training on augumented user 123923 23/50 current_auc = 0.685514291269687
User 123923 AUC after training: 0.685300408321991
User 123923 does not improve AUC. Reverting changes.
Training on augumented user 61281 24/50 current_auc = 0.685514291269687
User 61281 AUC after training: 0.685514291269687
User 61281 does not improve AUC. Reverting changes.
Training on augumented user 9175 25/50 current_auc = 0.685514291269687
User 9175 AUC after training: 0.6848920863309353
User 9175 does not improve AUC. Reverting changes.
Training on augumented user 118795 26/50 current_auc = 0.685514291269687
User 118795 AUC after training: 0.6851059692786311
User 118795 does not improve AUC. Reverting changes.
Training on augumented user 55694 27/50 current_auc = 0.685514291269687
User 55694 AUC after training: 0.6853781839393351
User 55694 does not improve AUC. Reverting changes.
Training on augumented user 62319 28/50 current_auc = 0.685514291269687
User 62319 AUC after training: 0.6850865253742953
User 62319 does not improve AUC. Reverting changes.
Training on augumented user 19599 29/50 current_auc = 0.685514291269687
User 19599 AUC after training: 0.6849698619482792
User 19599 does not improve AUC. Reverting changes.
Training on augumented user 25172 30/50 current_auc = 0.685514291269687
User 25172 AUC after training: 0.6850670814699591
User 25172 does not improve AUC. Reverting changes.
Training on augumented user 121222 31/50 current_auc = 0.685514291269687
User 121222 AUC after training: 0.685475403461015
User 121222 does not improve AUC. Reverting changes.
Training on augumented user 100574 32/50 current_auc = 0.685514291269687
User 100574 AUC after training: 0.6853976278436711
User 100574 does not improve AUC. Reverting changes.
Training on augumented user 33638 33/50 current_auc = 0.685514291269687
User 33638 AUC after training: 0.6854754034610149
User 33638 does not improve AUC. Reverting changes.
Training on augumented user 119659 34/50 current_auc = 0.685514291269687
User 119659 AUC after training: 0.685261520513319
User 119659 does not improve AUC. Reverting changes.
Training on augumented user 24498 35/50 current_auc = 0.685514291269687
User 24498 AUC after training: 0.6855337351740229
User 24498 improves AUC. Keeping the model.
Training on augumented user 6576 36/50 current_auc = 0.6855337351740229
User 6576 AUC after training: 0.6852226327046471
User 6576 does not improve AUC. Reverting changes.
Training on augumented user 104019 37/50 current_auc = 0.6855337351740229
User 104019 AUC after training: 0.6851837448959751
User 104019 does not improve AUC. Reverting changes.
Training on augumented user 110860 38/50 current_auc = 0.6855337351740229
User 110860 AUC after training: 0.6852031888003112
User 110860 does not improve AUC. Reverting changes.
Training on augumented user 134190 39/50 current_auc = 0.6855337351740229
User 134190 AUC after training: 0.6853004083219911
User 134190 does not improve AUC. Reverting changes.
Training on augumented user 99762 40/50 current_auc = 0.6855337351740229
User 99762 AUC after training: 0.6851837448959751
User 99762 does not improve AUC. Reverting changes.
Training on augumented user 85847 41/50 current_auc = 0.6855337351740229
User 85847 AUC after training: 0.6843282131051917
User 85847 does not improve AUC. Reverting changes.
Training on augumented user 121997 42/50 current_auc = 0.6855337351740229
User 121997 AUC after training: 0.6850087497569513
User 121997 does not improve AUC. Reverting changes.
Training on augumented user 121968 43/50 current_auc = 0.6855337351740229
User 121968 AUC after training: 0.6842698813921835
User 121968 does not improve AUC. Reverting changes.
Training on augumented user 80609 44/50 current_auc = 0.6855337351740229
User 80609 AUC after training: 0.685261520513319
User 80609 does not improve AUC. Reverting changes.
Training on augumented user 1635 45/50 current_auc = 0.6855337351740229
User 1635 AUC after training: 0.6850865253742952
User 1635 does not improve AUC. Reverting changes.
Training on augumented user 39427 46/50 current_auc = 0.6855337351740229
User 39427 AUC after training: 0.6852031888003111
User 39427 does not improve AUC. Reverting changes.
Training on augumented user 110222 47/50 current_auc = 0.6855337351740229
User 110222 AUC after training: 0.6853004083219911
User 110222 does not improve AUC. Reverting changes.
Training on augumented user 28730 48/50 current_auc = 0.6855337351740229
User 28730 AUC after training: 0.685397627843671
User 28730 does not improve AUC. Reverting changes.
Training on augumented user 108132 49/50 current_auc = 0.6855337351740229
User 108132 AUC after training: 0.6856309546957029
User 108132 improves AUC. Keeping the model.
[2024-12-02 19:52:09.956213] start test user 130465 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:10.396127] start test user 130465 247/567 recall augumented users by random, augumented_users = [29271, 95200, 114461, 93701, 73007, 81710, 50563, 8499, 47316, 17211, 127649, 112508, 103113, 10149, 1550, 66687, 53443, 47929, 87653, 113819, 78073, 64544, 112321, 118360, 954, 76113, 84459, 61375, 104723, 110849, 119459, 92301, 27037, 120414, 105025, 16614, 117376, 79924, 32044, 12287, 3522, 4680, 124507, 88564, 122326, 32470, 122742, 79276, 56921, 62361]
[2024-12-02 19:52:10.411820] user = 130465 Cloud 247/567
[2024-12-02 19:52:10.445978] user = 130465 Local 247/567
[2024-12-02 19:52:10.611219] user = 130465 Local+ 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:13.145339] user = 130465 MPDA- 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6105188343994314
Training on augumented user 29271 0/50 current_auc = 0.6105188343994314
User 29271 AUC after training: 0.6122956645344705
User 29271 improves AUC. Keeping the model.
Training on augumented user 95200 1/50 current_auc = 0.6122956645344705
User 95200 AUC after training: 0.6119402985074627
User 95200 does not improve AUC. Reverting changes.
Training on augumented user 114461 2/50 current_auc = 0.6122956645344705
User 114461 AUC after training: 0.6135394456289979
User 114461 improves AUC. Keeping the model.
Training on augumented user 93701 3/50 current_auc = 0.6135394456289979
User 93701 AUC after training: 0.609452736318408
User 93701 does not improve AUC. Reverting changes.
Training on augumented user 73007 4/50 current_auc = 0.6135394456289979
User 73007 AUC after training: 0.6121179815209665
User 73007 does not improve AUC. Reverting changes.
Training on augumented user 81710 5/50 current_auc = 0.6135394456289979
User 81710 AUC after training: 0.6126510305614783
User 81710 does not improve AUC. Reverting changes.
Training on augumented user 50563 6/50 current_auc = 0.6135394456289979
User 50563 AUC after training: 0.6131840796019901
User 50563 does not improve AUC. Reverting changes.
Training on augumented user 8499 7/50 current_auc = 0.6135394456289979
User 8499 AUC after training: 0.6117626154939588
User 8499 does not improve AUC. Reverting changes.
Training on augumented user 47316 8/50 current_auc = 0.6135394456289979
User 47316 AUC after training: 0.6138948116560057
User 47316 improves AUC. Keeping the model.
Training on augumented user 17211 9/50 current_auc = 0.6138948116560057
User 17211 AUC after training: 0.6128287135749821
User 17211 does not improve AUC. Reverting changes.
Training on augumented user 127649 10/50 current_auc = 0.6138948116560057
User 127649 AUC after training: 0.6112295664534471
User 127649 does not improve AUC. Reverting changes.
Training on augumented user 112508 11/50 current_auc = 0.6138948116560057
User 112508 AUC after training: 0.6147832267235251
User 112508 improves AUC. Keeping the model.
Training on augumented user 103113 12/50 current_auc = 0.6147832267235251
User 103113 AUC after training: 0.611407249466951
User 103113 does not improve AUC. Reverting changes.
Training on augumented user 10149 13/50 current_auc = 0.6147832267235251
User 10149 AUC after training: 0.6119402985074627
User 10149 does not improve AUC. Reverting changes.
Training on augumented user 1550 14/50 current_auc = 0.6147832267235251
User 1550 AUC after training: 0.6126510305614783
User 1550 does not improve AUC. Reverting changes.
Training on augumented user 66687 15/50 current_auc = 0.6147832267235251
User 66687 AUC after training: 0.6149609097370291
User 66687 improves AUC. Keeping the model.
Training on augumented user 53443 16/50 current_auc = 0.6149609097370291
User 53443 AUC after training: 0.6147832267235251
User 53443 does not improve AUC. Reverting changes.
Training on augumented user 47929 17/50 current_auc = 0.6149609097370291
User 47929 AUC after training: 0.6144278606965174
User 47929 does not improve AUC. Reverting changes.
Training on augumented user 87653 18/50 current_auc = 0.6149609097370291
User 87653 AUC after training: 0.6140724946695095
User 87653 does not improve AUC. Reverting changes.
Training on augumented user 113819 19/50 current_auc = 0.6149609097370291
User 113819 AUC after training: 0.6135394456289979
User 113819 does not improve AUC. Reverting changes.
Training on augumented user 78073 20/50 current_auc = 0.6149609097370291
User 78073 AUC after training: 0.6147832267235253
User 78073 does not improve AUC. Reverting changes.
Training on augumented user 64544 21/50 current_auc = 0.6149609097370291
User 64544 AUC after training: 0.6146055437100213
User 64544 does not improve AUC. Reverting changes.
Training on augumented user 112321 22/50 current_auc = 0.6149609097370291
User 112321 AUC after training: 0.6140724946695096
User 112321 does not improve AUC. Reverting changes.
Training on augumented user 118360 23/50 current_auc = 0.6149609097370291
User 118360 AUC after training: 0.6160270078180525
User 118360 improves AUC. Keeping the model.
Training on augumented user 954 24/50 current_auc = 0.6160270078180525
User 954 AUC after training: 0.6153162757640369
User 954 does not improve AUC. Reverting changes.
Training on augumented user 76113 25/50 current_auc = 0.6160270078180525
User 76113 AUC after training: 0.6147832267235251
User 76113 does not improve AUC. Reverting changes.
Training on augumented user 84459 26/50 current_auc = 0.6160270078180525
User 84459 AUC after training: 0.6147832267235251
User 84459 does not improve AUC. Reverting changes.
Training on augumented user 61375 27/50 current_auc = 0.6160270078180525
User 61375 AUC after training: 0.6144278606965174
User 61375 does not improve AUC. Reverting changes.
Training on augumented user 104723 28/50 current_auc = 0.6160270078180525
User 104723 AUC after training: 0.6154939587775408
User 104723 does not improve AUC. Reverting changes.
Training on augumented user 110849 29/50 current_auc = 0.6160270078180525
User 110849 AUC after training: 0.6149609097370292
User 110849 does not improve AUC. Reverting changes.
Training on augumented user 119459 30/50 current_auc = 0.6160270078180525
User 119459 AUC after training: 0.6158493248045487
User 119459 does not improve AUC. Reverting changes.
Training on augumented user 92301 31/50 current_auc = 0.6160270078180525
User 92301 AUC after training: 0.6165600568585643
User 92301 improves AUC. Keeping the model.
Training on augumented user 27037 32/50 current_auc = 0.6165600568585643
User 27037 AUC after training: 0.6170931058990761
User 27037 improves AUC. Keeping the model.
Training on augumented user 120414 33/50 current_auc = 0.6170931058990761
User 120414 AUC after training: 0.6176261549395878
User 120414 improves AUC. Keeping the model.
Training on augumented user 105025 34/50 current_auc = 0.6176261549395878
User 105025 AUC after training: 0.6144278606965174
User 105025 does not improve AUC. Reverting changes.
Training on augumented user 16614 35/50 current_auc = 0.6176261549395878
User 16614 AUC after training: 0.6146055437100213
User 16614 does not improve AUC. Reverting changes.
Training on augumented user 117376 36/50 current_auc = 0.6176261549395878
User 117376 AUC after training: 0.6183368869936035
User 117376 improves AUC. Keeping the model.
Training on augumented user 79924 37/50 current_auc = 0.6183368869936035
User 79924 AUC after training: 0.61727078891258
User 79924 does not improve AUC. Reverting changes.
Training on augumented user 32044 38/50 current_auc = 0.6183368869936035
User 32044 AUC after training: 0.6176261549395878
User 32044 does not improve AUC. Reverting changes.
Training on augumented user 12287 39/50 current_auc = 0.6183368869936035
User 12287 AUC after training: 0.6183368869936035
User 12287 does not improve AUC. Reverting changes.
Training on augumented user 3522 40/50 current_auc = 0.6183368869936035
User 3522 AUC after training: 0.6179815209665956
User 3522 does not improve AUC. Reverting changes.
Training on augumented user 4680 41/50 current_auc = 0.6183368869936035
User 4680 AUC after training: 0.6146055437100213
User 4680 does not improve AUC. Reverting changes.
Training on augumented user 124507 42/50 current_auc = 0.6183368869936035
User 124507 AUC after training: 0.6137171286425018
User 124507 does not improve AUC. Reverting changes.
Training on augumented user 88564 43/50 current_auc = 0.6183368869936035
User 88564 AUC after training: 0.6179815209665955
User 88564 does not improve AUC. Reverting changes.
Training on augumented user 122326 44/50 current_auc = 0.6183368869936035
User 122326 AUC after training: 0.6179815209665956
User 122326 does not improve AUC. Reverting changes.
Training on augumented user 32470 45/50 current_auc = 0.6183368869936035
User 32470 AUC after training: 0.6151385927505331
User 32470 does not improve AUC. Reverting changes.
Training on augumented user 122742 46/50 current_auc = 0.6183368869936035
User 122742 AUC after training: 0.6147832267235253
User 122742 does not improve AUC. Reverting changes.
Training on augumented user 79276 47/50 current_auc = 0.6183368869936035
User 79276 AUC after training: 0.6176261549395878
User 79276 does not improve AUC. Reverting changes.
Training on augumented user 56921 48/50 current_auc = 0.6183368869936035
User 56921 AUC after training: 0.6158493248045487
User 56921 does not improve AUC. Reverting changes.
Training on augumented user 62361 49/50 current_auc = 0.6183368869936035
User 62361 AUC after training: 0.6176261549395878
User 62361 does not improve AUC. Reverting changes.
[2024-12-02 19:52:43.237223] start test user 130472 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:43.924846] start test user 130472 248/567 recall augumented users by random, augumented_users = [60743, 112579, 283, 94790, 85925, 85173, 58468, 87699, 84567, 131946, 80565, 101147, 114974, 101200, 26852, 40789, 37938, 74059, 41857, 54103, 44622, 86887, 94926, 39489, 8946, 50871, 134810, 40924, 257, 94311, 714, 51647, 83743, 43315, 112680, 85162, 114408, 117918, 67455, 15855, 116569, 64856, 78342, 52221, 76051, 51474, 14367, 14097, 126412, 50228]
[2024-12-02 19:52:43.942839] user = 130472 Cloud 248/567
[2024-12-02 19:52:43.960416] user = 130472 Local 248/567
[2024-12-02 19:52:44.020615] user = 130472 Local+ 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:47.099655] user = 130472 MPDA- 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5773273273273274
Training on augumented user 60743 0/50 current_auc = 0.5773273273273274
User 60743 AUC after training: 0.5777027027027027
User 60743 improves AUC. Keeping the model.
Training on augumented user 112579 1/50 current_auc = 0.5777027027027027
User 112579 AUC after training: 0.5784534534534533
User 112579 improves AUC. Keeping the model.
Training on augumented user 283 2/50 current_auc = 0.5784534534534533
User 283 AUC after training: 0.5784534534534536
User 283 improves AUC. Keeping the model.
Training on augumented user 94790 3/50 current_auc = 0.5784534534534536
User 94790 AUC after training: 0.5769519519519519
User 94790 does not improve AUC. Reverting changes.
Training on augumented user 85925 4/50 current_auc = 0.5784534534534536
User 85925 AUC after training: 0.5788288288288288
User 85925 improves AUC. Keeping the model.
Training on augumented user 85173 5/50 current_auc = 0.5788288288288288
User 85173 AUC after training: 0.5788288288288288
User 85173 does not improve AUC. Reverting changes.
Training on augumented user 58468 6/50 current_auc = 0.5788288288288288
User 58468 AUC after training: 0.5792042042042043
User 58468 improves AUC. Keeping the model.
Training on augumented user 87699 7/50 current_auc = 0.5792042042042043
User 87699 AUC after training: 0.5780780780780781
User 87699 does not improve AUC. Reverting changes.
Training on augumented user 84567 8/50 current_auc = 0.5792042042042043
User 84567 AUC after training: 0.5765765765765766
User 84567 does not improve AUC. Reverting changes.
Training on augumented user 131946 9/50 current_auc = 0.5792042042042043
User 131946 AUC after training: 0.5795795795795795
User 131946 improves AUC. Keeping the model.
Training on augumented user 80565 10/50 current_auc = 0.5795795795795795
User 80565 AUC after training: 0.5795795795795795
User 80565 does not improve AUC. Reverting changes.
Training on augumented user 101147 11/50 current_auc = 0.5795795795795795
User 101147 AUC after training: 0.5792042042042043
User 101147 does not improve AUC. Reverting changes.
Training on augumented user 114974 12/50 current_auc = 0.5795795795795795
User 114974 AUC after training: 0.5788288288288288
User 114974 does not improve AUC. Reverting changes.
Training on augumented user 101200 13/50 current_auc = 0.5795795795795795
User 101200 AUC after training: 0.579954954954955
User 101200 improves AUC. Keeping the model.
Training on augumented user 26852 14/50 current_auc = 0.579954954954955
User 26852 AUC after training: 0.5784534534534534
User 26852 does not improve AUC. Reverting changes.
Training on augumented user 40789 15/50 current_auc = 0.579954954954955
User 40789 AUC after training: 0.579954954954955
User 40789 does not improve AUC. Reverting changes.
Training on augumented user 37938 16/50 current_auc = 0.579954954954955
User 37938 AUC after training: 0.579954954954955
User 37938 does not improve AUC. Reverting changes.
Training on augumented user 74059 17/50 current_auc = 0.579954954954955
User 74059 AUC after training: 0.579954954954955
User 74059 does not improve AUC. Reverting changes.
Training on augumented user 41857 18/50 current_auc = 0.579954954954955
User 41857 AUC after training: 0.5795795795795795
User 41857 does not improve AUC. Reverting changes.
Training on augumented user 54103 19/50 current_auc = 0.579954954954955
User 54103 AUC after training: 0.5795795795795796
User 54103 does not improve AUC. Reverting changes.
Training on augumented user 44622 20/50 current_auc = 0.579954954954955
User 44622 AUC after training: 0.579954954954955
User 44622 does not improve AUC. Reverting changes.
Training on augumented user 86887 21/50 current_auc = 0.579954954954955
User 86887 AUC after training: 0.579954954954955
User 86887 does not improve AUC. Reverting changes.
Training on augumented user 94926 22/50 current_auc = 0.579954954954955
User 94926 AUC after training: 0.579954954954955
User 94926 does not improve AUC. Reverting changes.
Training on augumented user 39489 23/50 current_auc = 0.579954954954955
User 39489 AUC after training: 0.5795795795795796
User 39489 does not improve AUC. Reverting changes.
Training on augumented user 8946 24/50 current_auc = 0.579954954954955
User 8946 AUC after training: 0.5773273273273274
User 8946 does not improve AUC. Reverting changes.
Training on augumented user 50871 25/50 current_auc = 0.579954954954955
User 50871 AUC after training: 0.5795795795795796
User 50871 does not improve AUC. Reverting changes.
Training on augumented user 134810 26/50 current_auc = 0.579954954954955
User 134810 AUC after training: 0.5784534534534534
User 134810 does not improve AUC. Reverting changes.
Training on augumented user 40924 27/50 current_auc = 0.579954954954955
User 40924 AUC after training: 0.5780780780780781
User 40924 does not improve AUC. Reverting changes.
Training on augumented user 257 28/50 current_auc = 0.579954954954955
User 257 AUC after training: 0.579954954954955
User 257 does not improve AUC. Reverting changes.
Training on augumented user 94311 29/50 current_auc = 0.579954954954955
User 94311 AUC after training: 0.5777027027027027
User 94311 does not improve AUC. Reverting changes.
Training on augumented user 714 30/50 current_auc = 0.579954954954955
User 714 AUC after training: 0.5795795795795796
User 714 does not improve AUC. Reverting changes.
Training on augumented user 51647 31/50 current_auc = 0.579954954954955
User 51647 AUC after training: 0.579954954954955
User 51647 does not improve AUC. Reverting changes.
Training on augumented user 83743 32/50 current_auc = 0.579954954954955
User 83743 AUC after training: 0.5792042042042043
User 83743 does not improve AUC. Reverting changes.
Training on augumented user 43315 33/50 current_auc = 0.579954954954955
User 43315 AUC after training: 0.5788288288288288
User 43315 does not improve AUC. Reverting changes.
Training on augumented user 112680 34/50 current_auc = 0.579954954954955
User 112680 AUC after training: 0.5762012012012012
User 112680 does not improve AUC. Reverting changes.
Training on augumented user 85162 35/50 current_auc = 0.579954954954955
User 85162 AUC after training: 0.5792042042042043
User 85162 does not improve AUC. Reverting changes.
Training on augumented user 114408 36/50 current_auc = 0.579954954954955
User 114408 AUC after training: 0.579954954954955
User 114408 does not improve AUC. Reverting changes.
Training on augumented user 117918 37/50 current_auc = 0.579954954954955
User 117918 AUC after training: 0.579954954954955
User 117918 does not improve AUC. Reverting changes.
Training on augumented user 67455 38/50 current_auc = 0.579954954954955
User 67455 AUC after training: 0.5795795795795796
User 67455 does not improve AUC. Reverting changes.
Training on augumented user 15855 39/50 current_auc = 0.579954954954955
User 15855 AUC after training: 0.5784534534534536
User 15855 does not improve AUC. Reverting changes.
Training on augumented user 116569 40/50 current_auc = 0.579954954954955
User 116569 AUC after training: 0.5788288288288288
User 116569 does not improve AUC. Reverting changes.
Training on augumented user 64856 41/50 current_auc = 0.579954954954955
User 64856 AUC after training: 0.579954954954955
User 64856 does not improve AUC. Reverting changes.
Training on augumented user 78342 42/50 current_auc = 0.579954954954955
User 78342 AUC after training: 0.5788288288288288
User 78342 does not improve AUC. Reverting changes.
Training on augumented user 52221 43/50 current_auc = 0.579954954954955
User 52221 AUC after training: 0.575075075075075
User 52221 does not improve AUC. Reverting changes.
Training on augumented user 76051 44/50 current_auc = 0.579954954954955
User 76051 AUC after training: 0.5795795795795796
User 76051 does not improve AUC. Reverting changes.
Training on augumented user 51474 45/50 current_auc = 0.579954954954955
User 51474 AUC after training: 0.579954954954955
User 51474 does not improve AUC. Reverting changes.
Training on augumented user 14367 46/50 current_auc = 0.579954954954955
User 14367 AUC after training: 0.579954954954955
User 14367 does not improve AUC. Reverting changes.
Training on augumented user 14097 47/50 current_auc = 0.579954954954955
User 14097 AUC after training: 0.579954954954955
User 14097 does not improve AUC. Reverting changes.
Training on augumented user 126412 48/50 current_auc = 0.579954954954955
User 126412 AUC after training: 0.5795795795795796
User 126412 does not improve AUC. Reverting changes.
Training on augumented user 50228 49/50 current_auc = 0.579954954954955
User 50228 AUC after training: 0.5795795795795796
User 50228 does not improve AUC. Reverting changes.
[2024-12-02 19:53:12.860584] start test user 130479 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:13.357567] start test user 130479 249/567 recall augumented users by random, augumented_users = [4330, 92675, 25605, 67087, 80318, 133305, 47792, 27653, 60926, 31033, 101245, 134508, 111994, 9296, 77995, 30677, 84944, 126750, 24660, 101696, 117996, 81831, 120757, 117165, 44894, 58080, 134101, 131832, 50517, 120637, 116895, 92818, 38003, 25468, 64487, 93549, 95446, 7135, 126808, 44286, 120954, 49919, 135001, 112689, 67550, 72692, 54312, 117101, 89801, 124793]
[2024-12-02 19:53:13.372832] user = 130479 Cloud 249/567
[2024-12-02 19:53:13.389272] user = 130479 Local 249/567
[2024-12-02 19:53:13.435935] user = 130479 Local+ 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:15.568958] user = 130479 MPDA- 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6227350427350428
Training on augumented user 4330 0/50 current_auc = 0.6227350427350428
User 4330 AUC after training: 0.6204273504273504
User 4330 does not improve AUC. Reverting changes.
Training on augumented user 92675 1/50 current_auc = 0.6227350427350428
User 92675 AUC after training: 0.6217094017094018
User 92675 does not improve AUC. Reverting changes.
Training on augumented user 25605 2/50 current_auc = 0.6227350427350428
User 25605 AUC after training: 0.6230769230769231
User 25605 improves AUC. Keeping the model.
Training on augumented user 67087 3/50 current_auc = 0.6230769230769231
User 67087 AUC after training: 0.618034188034188
User 67087 does not improve AUC. Reverting changes.
Training on augumented user 80318 4/50 current_auc = 0.6230769230769231
User 80318 AUC after training: 0.625982905982906
User 80318 improves AUC. Keeping the model.
Training on augumented user 133305 5/50 current_auc = 0.625982905982906
User 133305 AUC after training: 0.6266666666666667
User 133305 improves AUC. Keeping the model.
Training on augumented user 47792 6/50 current_auc = 0.6266666666666667
User 47792 AUC after training: 0.6285470085470085
User 47792 improves AUC. Keeping the model.
Training on augumented user 27653 7/50 current_auc = 0.6285470085470085
User 27653 AUC after training: 0.6292307692307693
User 27653 improves AUC. Keeping the model.
Training on augumented user 60926 8/50 current_auc = 0.6292307692307693
User 60926 AUC after training: 0.629059829059829
User 60926 does not improve AUC. Reverting changes.
Training on augumented user 31033 9/50 current_auc = 0.6292307692307693
User 31033 AUC after training: 0.6288888888888888
User 31033 does not improve AUC. Reverting changes.
Training on augumented user 101245 10/50 current_auc = 0.6292307692307693
User 101245 AUC after training: 0.6278632478632479
User 101245 does not improve AUC. Reverting changes.
Training on augumented user 134508 11/50 current_auc = 0.6292307692307693
User 134508 AUC after training: 0.6295726495726496
User 134508 improves AUC. Keeping the model.
Training on augumented user 111994 12/50 current_auc = 0.6295726495726496
User 111994 AUC after training: 0.6304273504273504
User 111994 improves AUC. Keeping the model.
Training on augumented user 9296 13/50 current_auc = 0.6304273504273504
User 9296 AUC after training: 0.6292307692307693
User 9296 does not improve AUC. Reverting changes.
Training on augumented user 77995 14/50 current_auc = 0.6304273504273504
User 77995 AUC after training: 0.6321367521367521
User 77995 improves AUC. Keeping the model.
Training on augumented user 30677 15/50 current_auc = 0.6321367521367521
User 30677 AUC after training: 0.6319658119658119
User 30677 does not improve AUC. Reverting changes.
Training on augumented user 84944 16/50 current_auc = 0.6321367521367521
User 84944 AUC after training: 0.6314529914529914
User 84944 does not improve AUC. Reverting changes.
Training on augumented user 126750 17/50 current_auc = 0.6321367521367521
User 126750 AUC after training: 0.6297435897435898
User 126750 does not improve AUC. Reverting changes.
Training on augumented user 24660 18/50 current_auc = 0.6321367521367521
User 24660 AUC after training: 0.6323076923076925
User 24660 improves AUC. Keeping the model.
Training on augumented user 101696 19/50 current_auc = 0.6323076923076925
User 101696 AUC after training: 0.6328205128205128
User 101696 improves AUC. Keeping the model.
Training on augumented user 117996 20/50 current_auc = 0.6328205128205128
User 117996 AUC after training: 0.6288888888888889
User 117996 does not improve AUC. Reverting changes.
Training on augumented user 81831 21/50 current_auc = 0.6328205128205128
User 81831 AUC after training: 0.6336752136752137
User 81831 improves AUC. Keeping the model.
Training on augumented user 120757 22/50 current_auc = 0.6336752136752137
User 120757 AUC after training: 0.633846153846154
User 120757 improves AUC. Keeping the model.
Training on augumented user 117165 23/50 current_auc = 0.633846153846154
User 117165 AUC after training: 0.6317948717948717
User 117165 does not improve AUC. Reverting changes.
Training on augumented user 44894 24/50 current_auc = 0.633846153846154
User 44894 AUC after training: 0.6316239316239316
User 44894 does not improve AUC. Reverting changes.
Training on augumented user 58080 25/50 current_auc = 0.633846153846154
User 58080 AUC after training: 0.6319658119658119
User 58080 does not improve AUC. Reverting changes.
Training on augumented user 134101 26/50 current_auc = 0.633846153846154
User 134101 AUC after training: 0.6331623931623932
User 134101 does not improve AUC. Reverting changes.
Training on augumented user 131832 27/50 current_auc = 0.633846153846154
User 131832 AUC after training: 0.6331623931623931
User 131832 does not improve AUC. Reverting changes.
Training on augumented user 50517 28/50 current_auc = 0.633846153846154
User 50517 AUC after training: 0.6326495726495727
User 50517 does not improve AUC. Reverting changes.
Training on augumented user 120637 29/50 current_auc = 0.633846153846154
User 120637 AUC after training: 0.6321367521367521
User 120637 does not improve AUC. Reverting changes.
Training on augumented user 116895 30/50 current_auc = 0.633846153846154
User 116895 AUC after training: 0.6324786324786325
User 116895 does not improve AUC. Reverting changes.
Training on augumented user 92818 31/50 current_auc = 0.633846153846154
User 92818 AUC after training: 0.6323076923076923
User 92818 does not improve AUC. Reverting changes.
Training on augumented user 38003 32/50 current_auc = 0.633846153846154
User 38003 AUC after training: 0.632136752136752
User 38003 does not improve AUC. Reverting changes.
Training on augumented user 25468 33/50 current_auc = 0.633846153846154
User 25468 AUC after training: 0.6331623931623931
User 25468 does not improve AUC. Reverting changes.
Training on augumented user 64487 34/50 current_auc = 0.633846153846154
User 64487 AUC after training: 0.6312820512820513
User 64487 does not improve AUC. Reverting changes.
Training on augumented user 93549 35/50 current_auc = 0.633846153846154
User 93549 AUC after training: 0.6335042735042735
User 93549 does not improve AUC. Reverting changes.
Training on augumented user 95446 36/50 current_auc = 0.633846153846154
User 95446 AUC after training: 0.6324786324786326
User 95446 does not improve AUC. Reverting changes.
Training on augumented user 7135 37/50 current_auc = 0.633846153846154
User 7135 AUC after training: 0.632991452991453
User 7135 does not improve AUC. Reverting changes.
Training on augumented user 126808 38/50 current_auc = 0.633846153846154
User 126808 AUC after training: 0.6326495726495727
User 126808 does not improve AUC. Reverting changes.
Training on augumented user 44286 39/50 current_auc = 0.633846153846154
User 44286 AUC after training: 0.6343589743589744
User 44286 improves AUC. Keeping the model.
Training on augumented user 120954 40/50 current_auc = 0.6343589743589744
User 120954 AUC after training: 0.634017094017094
User 120954 does not improve AUC. Reverting changes.
Training on augumented user 49919 41/50 current_auc = 0.6343589743589744
User 49919 AUC after training: 0.6335042735042735
User 49919 does not improve AUC. Reverting changes.
Training on augumented user 135001 42/50 current_auc = 0.6343589743589744
User 135001 AUC after training: 0.6324786324786325
User 135001 does not improve AUC. Reverting changes.
Training on augumented user 112689 43/50 current_auc = 0.6343589743589744
User 112689 AUC after training: 0.6345299145299146
User 112689 improves AUC. Keeping the model.
Training on augumented user 67550 44/50 current_auc = 0.6345299145299146
User 67550 AUC after training: 0.6331623931623932
User 67550 does not improve AUC. Reverting changes.
Training on augumented user 72692 45/50 current_auc = 0.6345299145299146
User 72692 AUC after training: 0.6341880341880342
User 72692 does not improve AUC. Reverting changes.
Training on augumented user 54312 46/50 current_auc = 0.6345299145299146
User 54312 AUC after training: 0.634017094017094
User 54312 does not improve AUC. Reverting changes.
Training on augumented user 117101 47/50 current_auc = 0.6345299145299146
User 117101 AUC after training: 0.6335042735042734
User 117101 does not improve AUC. Reverting changes.
Training on augumented user 89801 48/50 current_auc = 0.6345299145299146
User 89801 AUC after training: 0.6341880341880343
User 89801 does not improve AUC. Reverting changes.
Training on augumented user 124793 49/50 current_auc = 0.6345299145299146
User 124793 AUC after training: 0.6331623931623931
User 124793 does not improve AUC. Reverting changes.
[2024-12-02 19:53:47.080043] start test user 130485 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:47.600918] start test user 130485 250/567 recall augumented users by random, augumented_users = [35056, 33246, 23768, 94676, 12982, 137091, 54736, 56287, 54645, 55040, 118980, 104830, 137272, 133110, 16290, 21016, 23634, 43373, 83037, 12396, 70933, 26498, 117363, 136549, 58637, 10840, 116324, 97789, 120225, 135363, 16927, 32867, 11192, 118973, 116661, 48822, 90989, 111580, 28653, 29019, 52404, 74701, 9165, 119221, 18971, 17998, 99312, 48097, 138204, 25375]
[2024-12-02 19:53:47.618229] user = 130485 Cloud 250/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:53:47.626349] user = 130485 Local 250/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:53:47.679341] user = 130485 Local+ 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:53:50.298735] user = 130485 MPDA- 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 35056 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35056 AUC after training: 0.5
User 35056 does not improve AUC. Reverting changes.
Training on augumented user 33246 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33246 AUC after training: 0.5
User 33246 does not improve AUC. Reverting changes.
Training on augumented user 23768 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23768 AUC after training: 0.5
User 23768 does not improve AUC. Reverting changes.
Training on augumented user 94676 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94676 AUC after training: 0.5
User 94676 does not improve AUC. Reverting changes.
Training on augumented user 12982 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12982 AUC after training: 0.5
User 12982 does not improve AUC. Reverting changes.
Training on augumented user 137091 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137091 AUC after training: 0.5
User 137091 does not improve AUC. Reverting changes.
Training on augumented user 54736 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54736 AUC after training: 0.5
User 54736 does not improve AUC. Reverting changes.
Training on augumented user 56287 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56287 AUC after training: 0.5
User 56287 does not improve AUC. Reverting changes.
Training on augumented user 54645 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54645 AUC after training: 0.5
User 54645 does not improve AUC. Reverting changes.
Training on augumented user 55040 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55040 AUC after training: 0.5
User 55040 does not improve AUC. Reverting changes.
Training on augumented user 118980 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118980 AUC after training: 0.5
User 118980 does not improve AUC. Reverting changes.
Training on augumented user 104830 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104830 AUC after training: 0.5
User 104830 does not improve AUC. Reverting changes.
Training on augumented user 137272 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137272 AUC after training: 0.5
User 137272 does not improve AUC. Reverting changes.
Training on augumented user 133110 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133110 AUC after training: 0.5
User 133110 does not improve AUC. Reverting changes.
Training on augumented user 16290 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16290 AUC after training: 0.5
User 16290 does not improve AUC. Reverting changes.
Training on augumented user 21016 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21016 AUC after training: 0.5
User 21016 does not improve AUC. Reverting changes.
Training on augumented user 23634 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23634 AUC after training: 0.5
User 23634 does not improve AUC. Reverting changes.
Training on augumented user 43373 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43373 AUC after training: 0.5
User 43373 does not improve AUC. Reverting changes.
Training on augumented user 83037 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83037 AUC after training: 0.5
User 83037 does not improve AUC. Reverting changes.
Training on augumented user 12396 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12396 AUC after training: 0.5
User 12396 does not improve AUC. Reverting changes.
Training on augumented user 70933 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70933 AUC after training: 0.5
User 70933 does not improve AUC. Reverting changes.
Training on augumented user 26498 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26498 AUC after training: 0.5
User 26498 does not improve AUC. Reverting changes.
Training on augumented user 117363 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117363 AUC after training: 0.5
User 117363 does not improve AUC. Reverting changes.
Training on augumented user 136549 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136549 AUC after training: 0.5
User 136549 does not improve AUC. Reverting changes.
Training on augumented user 58637 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58637 AUC after training: 0.5
User 58637 does not improve AUC. Reverting changes.
Training on augumented user 10840 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10840 AUC after training: 0.5
User 10840 does not improve AUC. Reverting changes.
Training on augumented user 116324 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116324 AUC after training: 0.5
User 116324 does not improve AUC. Reverting changes.
Training on augumented user 97789 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97789 AUC after training: 0.5
User 97789 does not improve AUC. Reverting changes.
Training on augumented user 120225 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120225 AUC after training: 0.5
User 120225 does not improve AUC. Reverting changes.
Training on augumented user 135363 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135363 AUC after training: 0.5
User 135363 does not improve AUC. Reverting changes.
Training on augumented user 16927 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16927 AUC after training: 0.5
User 16927 does not improve AUC. Reverting changes.
Training on augumented user 32867 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32867 AUC after training: 0.5
User 32867 does not improve AUC. Reverting changes.
Training on augumented user 11192 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11192 AUC after training: 0.5
User 11192 does not improve AUC. Reverting changes.
Training on augumented user 118973 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118973 AUC after training: 0.5
User 118973 does not improve AUC. Reverting changes.
Training on augumented user 116661 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116661 AUC after training: 0.5
User 116661 does not improve AUC. Reverting changes.
Training on augumented user 48822 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48822 AUC after training: 0.5
User 48822 does not improve AUC. Reverting changes.
Training on augumented user 90989 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90989 AUC after training: 0.5
User 90989 does not improve AUC. Reverting changes.
Training on augumented user 111580 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111580 AUC after training: 0.5
User 111580 does not improve AUC. Reverting changes.
Training on augumented user 28653 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28653 AUC after training: 0.5
User 28653 does not improve AUC. Reverting changes.
Training on augumented user 29019 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29019 AUC after training: 0.5
User 29019 does not improve AUC. Reverting changes.
Training on augumented user 52404 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52404 AUC after training: 0.5
User 52404 does not improve AUC. Reverting changes.
Training on augumented user 74701 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74701 AUC after training: 0.5
User 74701 does not improve AUC. Reverting changes.
Training on augumented user 9165 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9165 AUC after training: 0.5
User 9165 does not improve AUC. Reverting changes.
Training on augumented user 119221 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119221 AUC after training: 0.5
User 119221 does not improve AUC. Reverting changes.
Training on augumented user 18971 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18971 AUC after training: 0.5
User 18971 does not improve AUC. Reverting changes.
Training on augumented user 17998 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17998 AUC after training: 0.5
User 17998 does not improve AUC. Reverting changes.
Training on augumented user 99312 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99312 AUC after training: 0.5
User 99312 does not improve AUC. Reverting changes.
Training on augumented user 48097 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48097 AUC after training: 0.5
User 48097 does not improve AUC. Reverting changes.
Training on augumented user 138204 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138204 AUC after training: 0.5
User 138204 does not improve AUC. Reverting changes.
Training on augumented user 25375 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25375 AUC after training: 0.5
User 25375 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:54:17.384953] start test user 130516 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:17.867279] start test user 130516 251/567 recall augumented users by random, augumented_users = [57028, 114484, 116456, 33276, 79597, 2120, 114046, 28163, 51018, 113715, 65407, 134781, 51153, 113327, 50748, 48566, 9734, 9318, 60049, 37876, 69165, 79925, 126725, 58767, 9822, 89029, 51138, 20392, 12570, 98817, 88951, 70120, 119321, 82973, 119976, 47719, 30162, 115540, 110572, 112835, 29141, 134945, 8746, 93167, 8734, 86067, 15978, 82865, 97370, 15991]
[2024-12-02 19:54:17.882949] user = 130516 Cloud 251/567
[2024-12-02 19:54:17.892686] user = 130516 Local 251/567
[2024-12-02 19:54:18.033354] user = 130516 Local+ 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:20.090901] user = 130516 MPDA- 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5595238095238095
Training on augumented user 57028 0/50 current_auc = 0.5595238095238095
User 57028 AUC after training: 0.5595238095238095
User 57028 does not improve AUC. Reverting changes.
Training on augumented user 114484 1/50 current_auc = 0.5595238095238095
User 114484 AUC after training: 0.5595238095238095
User 114484 does not improve AUC. Reverting changes.
Training on augumented user 116456 2/50 current_auc = 0.5595238095238095
User 116456 AUC after training: 0.5595238095238095
User 116456 does not improve AUC. Reverting changes.
Training on augumented user 33276 3/50 current_auc = 0.5595238095238095
User 33276 AUC after training: 0.5634920634920635
User 33276 improves AUC. Keeping the model.
Training on augumented user 79597 4/50 current_auc = 0.5634920634920635
User 79597 AUC after training: 0.5595238095238095
User 79597 does not improve AUC. Reverting changes.
Training on augumented user 2120 5/50 current_auc = 0.5634920634920635
User 2120 AUC after training: 0.5595238095238095
User 2120 does not improve AUC. Reverting changes.
Training on augumented user 114046 6/50 current_auc = 0.5634920634920635
User 114046 AUC after training: 0.5595238095238095
User 114046 does not improve AUC. Reverting changes.
Training on augumented user 28163 7/50 current_auc = 0.5634920634920635
User 28163 AUC after training: 0.5634920634920635
User 28163 does not improve AUC. Reverting changes.
Training on augumented user 51018 8/50 current_auc = 0.5634920634920635
User 51018 AUC after training: 0.5595238095238095
User 51018 does not improve AUC. Reverting changes.
Training on augumented user 113715 9/50 current_auc = 0.5634920634920635
User 113715 AUC after training: 0.5634920634920635
User 113715 does not improve AUC. Reverting changes.
Training on augumented user 65407 10/50 current_auc = 0.5634920634920635
User 65407 AUC after training: 0.5595238095238094
User 65407 does not improve AUC. Reverting changes.
Training on augumented user 134781 11/50 current_auc = 0.5634920634920635
User 134781 AUC after training: 0.5634920634920635
User 134781 does not improve AUC. Reverting changes.
Training on augumented user 51153 12/50 current_auc = 0.5634920634920635
User 51153 AUC after training: 0.5634920634920635
User 51153 does not improve AUC. Reverting changes.
Training on augumented user 113327 13/50 current_auc = 0.5634920634920635
User 113327 AUC after training: 0.5634920634920635
User 113327 does not improve AUC. Reverting changes.
Training on augumented user 50748 14/50 current_auc = 0.5634920634920635
User 50748 AUC after training: 0.5634920634920635
User 50748 does not improve AUC. Reverting changes.
Training on augumented user 48566 15/50 current_auc = 0.5634920634920635
User 48566 AUC after training: 0.5634920634920635
User 48566 does not improve AUC. Reverting changes.
Training on augumented user 9734 16/50 current_auc = 0.5634920634920635
User 9734 AUC after training: 0.5634920634920635
User 9734 does not improve AUC. Reverting changes.
Training on augumented user 9318 17/50 current_auc = 0.5634920634920635
User 9318 AUC after training: 0.5634920634920635
User 9318 does not improve AUC. Reverting changes.
Training on augumented user 60049 18/50 current_auc = 0.5634920634920635
User 60049 AUC after training: 0.5634920634920635
User 60049 does not improve AUC. Reverting changes.
Training on augumented user 37876 19/50 current_auc = 0.5634920634920635
User 37876 AUC after training: 0.5595238095238095
User 37876 does not improve AUC. Reverting changes.
Training on augumented user 69165 20/50 current_auc = 0.5634920634920635
User 69165 AUC after training: 0.5595238095238095
User 69165 does not improve AUC. Reverting changes.
Training on augumented user 79925 21/50 current_auc = 0.5634920634920635
User 79925 AUC after training: 0.5595238095238095
User 79925 does not improve AUC. Reverting changes.
Training on augumented user 126725 22/50 current_auc = 0.5634920634920635
User 126725 AUC after training: 0.5634920634920635
User 126725 does not improve AUC. Reverting changes.
Training on augumented user 58767 23/50 current_auc = 0.5634920634920635
User 58767 AUC after training: 0.5634920634920635
User 58767 does not improve AUC. Reverting changes.
Training on augumented user 9822 24/50 current_auc = 0.5634920634920635
User 9822 AUC after training: 0.5634920634920635
User 9822 does not improve AUC. Reverting changes.
Training on augumented user 89029 25/50 current_auc = 0.5634920634920635
User 89029 AUC after training: 0.5595238095238095
User 89029 does not improve AUC. Reverting changes.
Training on augumented user 51138 26/50 current_auc = 0.5634920634920635
User 51138 AUC after training: 0.5595238095238095
User 51138 does not improve AUC. Reverting changes.
Training on augumented user 20392 27/50 current_auc = 0.5634920634920635
User 20392 AUC after training: 0.5595238095238095
User 20392 does not improve AUC. Reverting changes.
Training on augumented user 12570 28/50 current_auc = 0.5634920634920635
User 12570 AUC after training: 0.5674603174603174
User 12570 improves AUC. Keeping the model.
Training on augumented user 98817 29/50 current_auc = 0.5674603174603174
User 98817 AUC after training: 0.5634920634920635
User 98817 does not improve AUC. Reverting changes.
Training on augumented user 88951 30/50 current_auc = 0.5674603174603174
User 88951 AUC after training: 0.5634920634920635
User 88951 does not improve AUC. Reverting changes.
Training on augumented user 70120 31/50 current_auc = 0.5674603174603174
User 70120 AUC after training: 0.5674603174603174
User 70120 does not improve AUC. Reverting changes.
Training on augumented user 119321 32/50 current_auc = 0.5674603174603174
User 119321 AUC after training: 0.5674603174603174
User 119321 does not improve AUC. Reverting changes.
Training on augumented user 82973 33/50 current_auc = 0.5674603174603174
User 82973 AUC after training: 0.5674603174603174
User 82973 does not improve AUC. Reverting changes.
Training on augumented user 119976 34/50 current_auc = 0.5674603174603174
User 119976 AUC after training: 0.5674603174603174
User 119976 does not improve AUC. Reverting changes.
Training on augumented user 47719 35/50 current_auc = 0.5674603174603174
User 47719 AUC after training: 0.5674603174603174
User 47719 does not improve AUC. Reverting changes.
Training on augumented user 30162 36/50 current_auc = 0.5674603174603174
User 30162 AUC after training: 0.5595238095238094
User 30162 does not improve AUC. Reverting changes.
Training on augumented user 115540 37/50 current_auc = 0.5674603174603174
User 115540 AUC after training: 0.5634920634920635
User 115540 does not improve AUC. Reverting changes.
Training on augumented user 110572 38/50 current_auc = 0.5674603174603174
User 110572 AUC after training: 0.5634920634920635
User 110572 does not improve AUC. Reverting changes.
Training on augumented user 112835 39/50 current_auc = 0.5674603174603174
User 112835 AUC after training: 0.5674603174603174
User 112835 does not improve AUC. Reverting changes.
Training on augumented user 29141 40/50 current_auc = 0.5674603174603174
User 29141 AUC after training: 0.5634920634920635
User 29141 does not improve AUC. Reverting changes.
Training on augumented user 134945 41/50 current_auc = 0.5674603174603174
User 134945 AUC after training: 0.5634920634920635
User 134945 does not improve AUC. Reverting changes.
Training on augumented user 8746 42/50 current_auc = 0.5674603174603174
User 8746 AUC after training: 0.5634920634920635
User 8746 does not improve AUC. Reverting changes.
Training on augumented user 93167 43/50 current_auc = 0.5674603174603174
User 93167 AUC after training: 0.5634920634920635
User 93167 does not improve AUC. Reverting changes.
Training on augumented user 8734 44/50 current_auc = 0.5674603174603174
User 8734 AUC after training: 0.5634920634920635
User 8734 does not improve AUC. Reverting changes.
Training on augumented user 86067 45/50 current_auc = 0.5674603174603174
User 86067 AUC after training: 0.5595238095238095
User 86067 does not improve AUC. Reverting changes.
Training on augumented user 15978 46/50 current_auc = 0.5674603174603174
User 15978 AUC after training: 0.5634920634920635
User 15978 does not improve AUC. Reverting changes.
Training on augumented user 82865 47/50 current_auc = 0.5674603174603174
User 82865 AUC after training: 0.5634920634920635
User 82865 does not improve AUC. Reverting changes.
Training on augumented user 97370 48/50 current_auc = 0.5674603174603174
User 97370 AUC after training: 0.5674603174603174
User 97370 does not improve AUC. Reverting changes.
Training on augumented user 15991 49/50 current_auc = 0.5674603174603174
User 15991 AUC after training: 0.5674603174603174
User 15991 does not improve AUC. Reverting changes.
[2024-12-02 19:54:47.732482] start test user 130517 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:48.236422] start test user 130517 252/567 recall augumented users by random, augumented_users = [2660, 17997, 53830, 104926, 31487, 87523, 105211, 97341, 111387, 78070, 6644, 48956, 36218, 66665, 67216, 129129, 19410, 83372, 117480, 119292, 84830, 105183, 95577, 15298, 31515, 109531, 106628, 121727, 88721, 17692, 104946, 71828, 30970, 137204, 63277, 82191, 26542, 93998, 20601, 71315, 53659, 118305, 38614, 92828, 121577, 136102, 95373, 91127, 48343, 39753]
[2024-12-02 19:54:48.252190] user = 130517 Cloud 252/567
[2024-12-02 19:54:48.286678] user = 130517 Local 252/567
[2024-12-02 19:54:48.550521] user = 130517 Local+ 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:51.254679] user = 130517 MPDA- 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7455648926237162
Training on augumented user 2660 0/50 current_auc = 0.7455648926237162
User 2660 AUC after training: 0.7427637721755369
User 2660 does not improve AUC. Reverting changes.
Training on augumented user 17997 1/50 current_auc = 0.7455648926237162
User 17997 AUC after training: 0.7446311858076564
User 17997 does not improve AUC. Reverting changes.
Training on augumented user 53830 2/50 current_auc = 0.7455648926237162
User 53830 AUC after training: 0.7427637721755369
User 53830 does not improve AUC. Reverting changes.
Training on augumented user 104926 3/50 current_auc = 0.7455648926237162
User 104926 AUC after training: 0.7455648926237162
User 104926 does not improve AUC. Reverting changes.
Training on augumented user 31487 4/50 current_auc = 0.7455648926237162
User 31487 AUC after training: 0.7455648926237162
User 31487 does not improve AUC. Reverting changes.
Training on augumented user 87523 5/50 current_auc = 0.7455648926237162
User 87523 AUC after training: 0.7455648926237162
User 87523 does not improve AUC. Reverting changes.
Training on augumented user 105211 6/50 current_auc = 0.7455648926237162
User 105211 AUC after training: 0.7446311858076564
User 105211 does not improve AUC. Reverting changes.
Training on augumented user 97341 7/50 current_auc = 0.7455648926237162
User 97341 AUC after training: 0.7483660130718954
User 97341 improves AUC. Keeping the model.
Training on augumented user 111387 8/50 current_auc = 0.7483660130718954
User 111387 AUC after training: 0.7474323062558357
User 111387 does not improve AUC. Reverting changes.
Training on augumented user 78070 9/50 current_auc = 0.7483660130718954
User 78070 AUC after training: 0.7464985994397759
User 78070 does not improve AUC. Reverting changes.
Training on augumented user 6644 10/50 current_auc = 0.7483660130718954
User 6644 AUC after training: 0.7474323062558357
User 6644 does not improve AUC. Reverting changes.
Training on augumented user 48956 11/50 current_auc = 0.7483660130718954
User 48956 AUC after training: 0.7474323062558357
User 48956 does not improve AUC. Reverting changes.
Training on augumented user 36218 12/50 current_auc = 0.7483660130718954
User 36218 AUC after training: 0.7507002801120448
User 36218 improves AUC. Keeping the model.
Training on augumented user 66665 13/50 current_auc = 0.7507002801120448
User 66665 AUC after training: 0.7488328664799253
User 66665 does not improve AUC. Reverting changes.
Training on augumented user 67216 14/50 current_auc = 0.7507002801120448
User 67216 AUC after training: 0.7446311858076564
User 67216 does not improve AUC. Reverting changes.
Training on augumented user 129129 15/50 current_auc = 0.7507002801120448
User 129129 AUC after training: 0.7497665732959851
User 129129 does not improve AUC. Reverting changes.
Training on augumented user 19410 16/50 current_auc = 0.7507002801120448
User 19410 AUC after training: 0.7492997198879552
User 19410 does not improve AUC. Reverting changes.
Training on augumented user 83372 17/50 current_auc = 0.7507002801120448
User 83372 AUC after training: 0.7497665732959851
User 83372 does not improve AUC. Reverting changes.
Training on augumented user 117480 18/50 current_auc = 0.7507002801120448
User 117480 AUC after training: 0.7497665732959851
User 117480 does not improve AUC. Reverting changes.
Training on augumented user 119292 19/50 current_auc = 0.7507002801120448
User 119292 AUC after training: 0.7507002801120448
User 119292 does not improve AUC. Reverting changes.
Training on augumented user 84830 20/50 current_auc = 0.7507002801120448
User 84830 AUC after training: 0.7497665732959851
User 84830 does not improve AUC. Reverting changes.
Training on augumented user 105183 21/50 current_auc = 0.7507002801120448
User 105183 AUC after training: 0.7488328664799253
User 105183 does not improve AUC. Reverting changes.
Training on augumented user 95577 22/50 current_auc = 0.7507002801120448
User 95577 AUC after training: 0.7507002801120448
User 95577 does not improve AUC. Reverting changes.
Training on augumented user 15298 23/50 current_auc = 0.7507002801120448
User 15298 AUC after training: 0.7474323062558357
User 15298 does not improve AUC. Reverting changes.
Training on augumented user 31515 24/50 current_auc = 0.7507002801120448
User 31515 AUC after training: 0.7478991596638656
User 31515 does not improve AUC. Reverting changes.
Training on augumented user 109531 25/50 current_auc = 0.7507002801120448
User 109531 AUC after training: 0.7488328664799253
User 109531 does not improve AUC. Reverting changes.
Training on augumented user 106628 26/50 current_auc = 0.7507002801120448
User 106628 AUC after training: 0.7474323062558357
User 106628 does not improve AUC. Reverting changes.
Training on augumented user 121727 27/50 current_auc = 0.7507002801120448
User 121727 AUC after training: 0.7497665732959851
User 121727 does not improve AUC. Reverting changes.
Training on augumented user 88721 28/50 current_auc = 0.7507002801120448
User 88721 AUC after training: 0.7488328664799253
User 88721 does not improve AUC. Reverting changes.
Training on augumented user 17692 29/50 current_auc = 0.7507002801120448
User 17692 AUC after training: 0.7507002801120448
User 17692 does not improve AUC. Reverting changes.
Training on augumented user 104946 30/50 current_auc = 0.7507002801120448
User 104946 AUC after training: 0.7464985994397759
User 104946 does not improve AUC. Reverting changes.
Training on augumented user 71828 31/50 current_auc = 0.7507002801120448
User 71828 AUC after training: 0.7492997198879552
User 71828 does not improve AUC. Reverting changes.
Training on augumented user 30970 32/50 current_auc = 0.7507002801120448
User 30970 AUC after training: 0.7497665732959851
User 30970 does not improve AUC. Reverting changes.
Training on augumented user 137204 33/50 current_auc = 0.7507002801120448
User 137204 AUC after training: 0.7507002801120448
User 137204 does not improve AUC. Reverting changes.
Training on augumented user 63277 34/50 current_auc = 0.7507002801120448
User 63277 AUC after training: 0.7507002801120448
User 63277 does not improve AUC. Reverting changes.
Training on augumented user 82191 35/50 current_auc = 0.7507002801120448
User 82191 AUC after training: 0.7488328664799253
User 82191 does not improve AUC. Reverting changes.
Training on augumented user 26542 36/50 current_auc = 0.7507002801120448
User 26542 AUC after training: 0.7474323062558357
User 26542 does not improve AUC. Reverting changes.
Training on augumented user 93998 37/50 current_auc = 0.7507002801120448
User 93998 AUC after training: 0.7488328664799253
User 93998 does not improve AUC. Reverting changes.
Training on augumented user 20601 38/50 current_auc = 0.7507002801120448
User 20601 AUC after training: 0.7474323062558357
User 20601 does not improve AUC. Reverting changes.
Training on augumented user 71315 39/50 current_auc = 0.7507002801120448
User 71315 AUC after training: 0.7390289449112979
User 71315 does not improve AUC. Reverting changes.
Training on augumented user 53659 40/50 current_auc = 0.7507002801120448
User 53659 AUC after training: 0.7497665732959851
User 53659 does not improve AUC. Reverting changes.
Training on augumented user 118305 41/50 current_auc = 0.7507002801120448
User 118305 AUC after training: 0.7492997198879552
User 118305 does not improve AUC. Reverting changes.
Training on augumented user 38614 42/50 current_auc = 0.7507002801120448
User 38614 AUC after training: 0.7474323062558357
User 38614 does not improve AUC. Reverting changes.
Training on augumented user 92828 43/50 current_auc = 0.7507002801120448
User 92828 AUC after training: 0.746031746031746
User 92828 does not improve AUC. Reverting changes.
Training on augumented user 121577 44/50 current_auc = 0.7507002801120448
User 121577 AUC after training: 0.7507002801120448
User 121577 does not improve AUC. Reverting changes.
Training on augumented user 136102 45/50 current_auc = 0.7507002801120448
User 136102 AUC after training: 0.7464985994397759
User 136102 does not improve AUC. Reverting changes.
Training on augumented user 95373 46/50 current_auc = 0.7507002801120448
User 95373 AUC after training: 0.7507002801120448
User 95373 does not improve AUC. Reverting changes.
Training on augumented user 91127 47/50 current_auc = 0.7507002801120448
User 91127 AUC after training: 0.7474323062558357
User 91127 does not improve AUC. Reverting changes.
Training on augumented user 48343 48/50 current_auc = 0.7507002801120448
User 48343 AUC after training: 0.7507002801120448
User 48343 does not improve AUC. Reverting changes.
Training on augumented user 39753 49/50 current_auc = 0.7507002801120448
User 39753 AUC after training: 0.7497665732959851
User 39753 does not improve AUC. Reverting changes.
[2024-12-02 19:55:20.099622] start test user 130544 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:20.728240] start test user 130544 253/567 recall augumented users by random, augumented_users = [81585, 127250, 12398, 20157, 86156, 17531, 40892, 15470, 108380, 1892, 55084, 110157, 47476, 31029, 103145, 34804, 101428, 135123, 16502, 104067, 85698, 11522, 75202, 103932, 33256, 11656, 26998, 18592, 26325, 83163, 112036, 74145, 34899, 39200, 13281, 133744, 133960, 90390, 69496, 27588, 12182, 82674, 79472, 101467, 36993, 78520, 111429, 87047, 120898, 106697]
[2024-12-02 19:55:20.749456] user = 130544 Cloud 253/567
[2024-12-02 19:55:20.766349] user = 130544 Local 253/567
[2024-12-02 19:55:20.866709] user = 130544 Local+ 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:23.217594] user = 130544 MPDA- 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.691304347826087
Training on augumented user 81585 0/50 current_auc = 0.691304347826087
User 81585 AUC after training: 0.6956521739130435
User 81585 improves AUC. Keeping the model.
Training on augumented user 127250 1/50 current_auc = 0.6956521739130435
User 127250 AUC after training: 0.691304347826087
User 127250 does not improve AUC. Reverting changes.
Training on augumented user 12398 2/50 current_auc = 0.6956521739130435
User 12398 AUC after training: 0.691304347826087
User 12398 does not improve AUC. Reverting changes.
Training on augumented user 20157 3/50 current_auc = 0.6956521739130435
User 20157 AUC after training: 0.691304347826087
User 20157 does not improve AUC. Reverting changes.
Training on augumented user 86156 4/50 current_auc = 0.6956521739130435
User 86156 AUC after training: 0.6956521739130435
User 86156 does not improve AUC. Reverting changes.
Training on augumented user 17531 5/50 current_auc = 0.6956521739130435
User 17531 AUC after training: 0.691304347826087
User 17531 does not improve AUC. Reverting changes.
Training on augumented user 40892 6/50 current_auc = 0.6956521739130435
User 40892 AUC after training: 0.6956521739130435
User 40892 does not improve AUC. Reverting changes.
Training on augumented user 15470 7/50 current_auc = 0.6956521739130435
User 15470 AUC after training: 0.6956521739130435
User 15470 does not improve AUC. Reverting changes.
Training on augumented user 108380 8/50 current_auc = 0.6956521739130435
User 108380 AUC after training: 0.6956521739130435
User 108380 does not improve AUC. Reverting changes.
Training on augumented user 1892 9/50 current_auc = 0.6956521739130435
User 1892 AUC after training: 0.6956521739130435
User 1892 does not improve AUC. Reverting changes.
Training on augumented user 55084 10/50 current_auc = 0.6956521739130435
User 55084 AUC after training: 0.6956521739130435
User 55084 does not improve AUC. Reverting changes.
Training on augumented user 110157 11/50 current_auc = 0.6956521739130435
User 110157 AUC after training: 0.691304347826087
User 110157 does not improve AUC. Reverting changes.
Training on augumented user 47476 12/50 current_auc = 0.6956521739130435
User 47476 AUC after training: 0.6869565217391305
User 47476 does not improve AUC. Reverting changes.
Training on augumented user 31029 13/50 current_auc = 0.6956521739130435
User 31029 AUC after training: 0.6956521739130435
User 31029 does not improve AUC. Reverting changes.
Training on augumented user 103145 14/50 current_auc = 0.6956521739130435
User 103145 AUC after training: 0.6956521739130435
User 103145 does not improve AUC. Reverting changes.
Training on augumented user 34804 15/50 current_auc = 0.6956521739130435
User 34804 AUC after training: 0.6956521739130435
User 34804 does not improve AUC. Reverting changes.
Training on augumented user 101428 16/50 current_auc = 0.6956521739130435
User 101428 AUC after training: 0.6956521739130435
User 101428 does not improve AUC. Reverting changes.
Training on augumented user 135123 17/50 current_auc = 0.6956521739130435
User 135123 AUC after training: 0.691304347826087
User 135123 does not improve AUC. Reverting changes.
Training on augumented user 16502 18/50 current_auc = 0.6956521739130435
User 16502 AUC after training: 0.6956521739130435
User 16502 does not improve AUC. Reverting changes.
Training on augumented user 104067 19/50 current_auc = 0.6956521739130435
User 104067 AUC after training: 0.6956521739130435
User 104067 does not improve AUC. Reverting changes.
Training on augumented user 85698 20/50 current_auc = 0.6956521739130435
User 85698 AUC after training: 0.691304347826087
User 85698 does not improve AUC. Reverting changes.
Training on augumented user 11522 21/50 current_auc = 0.6956521739130435
User 11522 AUC after training: 0.6956521739130435
User 11522 does not improve AUC. Reverting changes.
Training on augumented user 75202 22/50 current_auc = 0.6956521739130435
User 75202 AUC after training: 0.6956521739130435
User 75202 does not improve AUC. Reverting changes.
Training on augumented user 103932 23/50 current_auc = 0.6956521739130435
User 103932 AUC after training: 0.6956521739130435
User 103932 does not improve AUC. Reverting changes.
Training on augumented user 33256 24/50 current_auc = 0.6956521739130435
User 33256 AUC after training: 0.7
User 33256 improves AUC. Keeping the model.
Training on augumented user 11656 25/50 current_auc = 0.7
User 11656 AUC after training: 0.6956521739130435
User 11656 does not improve AUC. Reverting changes.
Training on augumented user 26998 26/50 current_auc = 0.7
User 26998 AUC after training: 0.6956521739130435
User 26998 does not improve AUC. Reverting changes.
Training on augumented user 18592 27/50 current_auc = 0.7
User 18592 AUC after training: 0.6956521739130435
User 18592 does not improve AUC. Reverting changes.
Training on augumented user 26325 28/50 current_auc = 0.7
User 26325 AUC after training: 0.7
User 26325 does not improve AUC. Reverting changes.
Training on augumented user 83163 29/50 current_auc = 0.7
User 83163 AUC after training: 0.7
User 83163 does not improve AUC. Reverting changes.
Training on augumented user 112036 30/50 current_auc = 0.7
User 112036 AUC after training: 0.6956521739130435
User 112036 does not improve AUC. Reverting changes.
Training on augumented user 74145 31/50 current_auc = 0.7
User 74145 AUC after training: 0.6956521739130435
User 74145 does not improve AUC. Reverting changes.
Training on augumented user 34899 32/50 current_auc = 0.7
User 34899 AUC after training: 0.691304347826087
User 34899 does not improve AUC. Reverting changes.
Training on augumented user 39200 33/50 current_auc = 0.7
User 39200 AUC after training: 0.6956521739130435
User 39200 does not improve AUC. Reverting changes.
Training on augumented user 13281 34/50 current_auc = 0.7
User 13281 AUC after training: 0.691304347826087
User 13281 does not improve AUC. Reverting changes.
Training on augumented user 133744 35/50 current_auc = 0.7
User 133744 AUC after training: 0.7
User 133744 does not improve AUC. Reverting changes.
Training on augumented user 133960 36/50 current_auc = 0.7
User 133960 AUC after training: 0.6956521739130435
User 133960 does not improve AUC. Reverting changes.
Training on augumented user 90390 37/50 current_auc = 0.7
User 90390 AUC after training: 0.7
User 90390 does not improve AUC. Reverting changes.
Training on augumented user 69496 38/50 current_auc = 0.7
User 69496 AUC after training: 0.682608695652174
User 69496 does not improve AUC. Reverting changes.
Training on augumented user 27588 39/50 current_auc = 0.7
User 27588 AUC after training: 0.6956521739130435
User 27588 does not improve AUC. Reverting changes.
Training on augumented user 12182 40/50 current_auc = 0.7
User 12182 AUC after training: 0.7
User 12182 does not improve AUC. Reverting changes.
Training on augumented user 82674 41/50 current_auc = 0.7
User 82674 AUC after training: 0.6956521739130435
User 82674 does not improve AUC. Reverting changes.
Training on augumented user 79472 42/50 current_auc = 0.7
User 79472 AUC after training: 0.6956521739130435
User 79472 does not improve AUC. Reverting changes.
Training on augumented user 101467 43/50 current_auc = 0.7
User 101467 AUC after training: 0.7
User 101467 does not improve AUC. Reverting changes.
Training on augumented user 36993 44/50 current_auc = 0.7
User 36993 AUC after training: 0.6956521739130435
User 36993 does not improve AUC. Reverting changes.
Training on augumented user 78520 45/50 current_auc = 0.7
User 78520 AUC after training: 0.6956521739130435
User 78520 does not improve AUC. Reverting changes.
Training on augumented user 111429 46/50 current_auc = 0.7
User 111429 AUC after training: 0.6956521739130435
User 111429 does not improve AUC. Reverting changes.
Training on augumented user 87047 47/50 current_auc = 0.7
User 87047 AUC after training: 0.7
User 87047 does not improve AUC. Reverting changes.
Training on augumented user 120898 48/50 current_auc = 0.7
User 120898 AUC after training: 0.6956521739130435
User 120898 does not improve AUC. Reverting changes.
Training on augumented user 106697 49/50 current_auc = 0.7
User 106697 AUC after training: 0.7
User 106697 does not improve AUC. Reverting changes.
[2024-12-02 19:55:50.710417] start test user 130603 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:51.217475] start test user 130603 254/567 recall augumented users by random, augumented_users = [63946, 11957, 129340, 116961, 19714, 123293, 10719, 15882, 136760, 132088, 44511, 53887, 44673, 44950, 93802, 37178, 28123, 70336, 138122, 56598, 62043, 99102, 60281, 82221, 66962, 21683, 84854, 86361, 108778, 83091, 12893, 22773, 34251, 83150, 94958, 98411, 52547, 100974, 102661, 108102, 100994, 37717, 52882, 127360, 88238, 74681, 114987, 23491, 79802, 133540]
[2024-12-02 19:55:51.232541] user = 130603 Cloud 254/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:51.238488] user = 130603 Local 254/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:51.342036] user = 130603 Local+ 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:54.248316] user = 130603 MPDA- 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 63946 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63946 AUC after training: 0.5
User 63946 does not improve AUC. Reverting changes.
Training on augumented user 11957 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11957 AUC after training: 0.5
User 11957 does not improve AUC. Reverting changes.
Training on augumented user 129340 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129340 AUC after training: 0.5
User 129340 does not improve AUC. Reverting changes.
Training on augumented user 116961 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116961 AUC after training: 0.5
User 116961 does not improve AUC. Reverting changes.
Training on augumented user 19714 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19714 AUC after training: 0.5
User 19714 does not improve AUC. Reverting changes.
Training on augumented user 123293 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123293 AUC after training: 0.5
User 123293 does not improve AUC. Reverting changes.
Training on augumented user 10719 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10719 AUC after training: 0.5
User 10719 does not improve AUC. Reverting changes.
Training on augumented user 15882 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15882 AUC after training: 0.5
User 15882 does not improve AUC. Reverting changes.
Training on augumented user 136760 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136760 AUC after training: 0.5
User 136760 does not improve AUC. Reverting changes.
Training on augumented user 132088 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132088 AUC after training: 0.5
User 132088 does not improve AUC. Reverting changes.
Training on augumented user 44511 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44511 AUC after training: 0.5
User 44511 does not improve AUC. Reverting changes.
Training on augumented user 53887 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53887 AUC after training: 0.5
User 53887 does not improve AUC. Reverting changes.
Training on augumented user 44673 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44673 AUC after training: 0.5
User 44673 does not improve AUC. Reverting changes.
Training on augumented user 44950 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44950 AUC after training: 0.5
User 44950 does not improve AUC. Reverting changes.
Training on augumented user 93802 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93802 AUC after training: 0.5
User 93802 does not improve AUC. Reverting changes.
Training on augumented user 37178 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37178 AUC after training: 0.5
User 37178 does not improve AUC. Reverting changes.
Training on augumented user 28123 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28123 AUC after training: 0.5
User 28123 does not improve AUC. Reverting changes.
Training on augumented user 70336 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70336 AUC after training: 0.5
User 70336 does not improve AUC. Reverting changes.
Training on augumented user 138122 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138122 AUC after training: 0.5
User 138122 does not improve AUC. Reverting changes.
Training on augumented user 56598 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56598 AUC after training: 0.5
User 56598 does not improve AUC. Reverting changes.
Training on augumented user 62043 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62043 AUC after training: 0.5
User 62043 does not improve AUC. Reverting changes.
Training on augumented user 99102 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99102 AUC after training: 0.5
User 99102 does not improve AUC. Reverting changes.
Training on augumented user 60281 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60281 AUC after training: 0.5
User 60281 does not improve AUC. Reverting changes.
Training on augumented user 82221 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82221 AUC after training: 0.5
User 82221 does not improve AUC. Reverting changes.
Training on augumented user 66962 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66962 AUC after training: 0.5
User 66962 does not improve AUC. Reverting changes.
Training on augumented user 21683 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21683 AUC after training: 0.5
User 21683 does not improve AUC. Reverting changes.
Training on augumented user 84854 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84854 AUC after training: 0.5
User 84854 does not improve AUC. Reverting changes.
Training on augumented user 86361 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86361 AUC after training: 0.5
User 86361 does not improve AUC. Reverting changes.
Training on augumented user 108778 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108778 AUC after training: 0.5
User 108778 does not improve AUC. Reverting changes.
Training on augumented user 83091 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83091 AUC after training: 0.5
User 83091 does not improve AUC. Reverting changes.
Training on augumented user 12893 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12893 AUC after training: 0.5
User 12893 does not improve AUC. Reverting changes.
Training on augumented user 22773 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22773 AUC after training: 0.5
User 22773 does not improve AUC. Reverting changes.
Training on augumented user 34251 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34251 AUC after training: 0.5
User 34251 does not improve AUC. Reverting changes.
Training on augumented user 83150 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83150 AUC after training: 0.5
User 83150 does not improve AUC. Reverting changes.
Training on augumented user 94958 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94958 AUC after training: 0.5
User 94958 does not improve AUC. Reverting changes.
Training on augumented user 98411 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98411 AUC after training: 0.5
User 98411 does not improve AUC. Reverting changes.
Training on augumented user 52547 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52547 AUC after training: 0.5
User 52547 does not improve AUC. Reverting changes.
Training on augumented user 100974 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100974 AUC after training: 0.5
User 100974 does not improve AUC. Reverting changes.
Training on augumented user 102661 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102661 AUC after training: 0.5
User 102661 does not improve AUC. Reverting changes.
Training on augumented user 108102 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108102 AUC after training: 0.5
User 108102 does not improve AUC. Reverting changes.
Training on augumented user 100994 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100994 AUC after training: 0.5
User 100994 does not improve AUC. Reverting changes.
Training on augumented user 37717 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37717 AUC after training: 0.5
User 37717 does not improve AUC. Reverting changes.
Training on augumented user 52882 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52882 AUC after training: 0.5
User 52882 does not improve AUC. Reverting changes.
Training on augumented user 127360 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127360 AUC after training: 0.5
User 127360 does not improve AUC. Reverting changes.
Training on augumented user 88238 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88238 AUC after training: 0.5
User 88238 does not improve AUC. Reverting changes.
Training on augumented user 74681 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74681 AUC after training: 0.5
User 74681 does not improve AUC. Reverting changes.
Training on augumented user 114987 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114987 AUC after training: 0.5
User 114987 does not improve AUC. Reverting changes.
Training on augumented user 23491 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23491 AUC after training: 0.5
User 23491 does not improve AUC. Reverting changes.
Training on augumented user 79802 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79802 AUC after training: 0.5
User 79802 does not improve AUC. Reverting changes.
Training on augumented user 133540 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133540 AUC after training: 0.5
User 133540 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:20.234024] start test user 130605 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:20.964982] start test user 130605 255/567 recall augumented users by random, augumented_users = [7467, 98656, 1304, 19585, 62198, 28959, 52882, 117594, 8302, 23778, 119075, 100460, 39704, 85125, 44033, 42181, 71190, 41751, 114098, 63906, 52109, 11510, 89552, 90854, 63340, 15231, 109654, 69135, 104697, 6408, 34554, 88847, 36809, 81674, 99257, 114714, 79357, 35796, 21529, 72471, 66425, 39013, 60294, 51676, 91960, 38765, 46708, 113507, 82321, 112751]
[2024-12-02 19:56:21.007039] user = 130605 Cloud 255/567
[2024-12-02 19:56:21.025326] user = 130605 Local 255/567
[2024-12-02 19:56:21.086960] user = 130605 Local+ 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:22.739361] user = 130605 MPDA- 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.38095238095238093
Training on augumented user 7467 0/50 current_auc = 0.38095238095238093
User 7467 AUC after training: 0.38095238095238093
User 7467 does not improve AUC. Reverting changes.
Training on augumented user 98656 1/50 current_auc = 0.38095238095238093
User 98656 AUC after training: 0.38095238095238093
User 98656 does not improve AUC. Reverting changes.
Training on augumented user 1304 2/50 current_auc = 0.38095238095238093
User 1304 AUC after training: 0.38095238095238093
User 1304 does not improve AUC. Reverting changes.
Training on augumented user 19585 3/50 current_auc = 0.38095238095238093
User 19585 AUC after training: 0.38095238095238093
User 19585 does not improve AUC. Reverting changes.
Training on augumented user 62198 4/50 current_auc = 0.38095238095238093
User 62198 AUC after training: 0.38095238095238093
User 62198 does not improve AUC. Reverting changes.
Training on augumented user 28959 5/50 current_auc = 0.38095238095238093
User 28959 AUC after training: 0.38095238095238093
User 28959 does not improve AUC. Reverting changes.
Training on augumented user 52882 6/50 current_auc = 0.38095238095238093
User 52882 AUC after training: 0.38095238095238093
User 52882 does not improve AUC. Reverting changes.
Training on augumented user 117594 7/50 current_auc = 0.38095238095238093
User 117594 AUC after training: 0.38095238095238093
User 117594 does not improve AUC. Reverting changes.
Training on augumented user 8302 8/50 current_auc = 0.38095238095238093
User 8302 AUC after training: 0.38095238095238093
User 8302 does not improve AUC. Reverting changes.
Training on augumented user 23778 9/50 current_auc = 0.38095238095238093
User 23778 AUC after training: 0.38095238095238093
User 23778 does not improve AUC. Reverting changes.
Training on augumented user 119075 10/50 current_auc = 0.38095238095238093
User 119075 AUC after training: 0.38095238095238093
User 119075 does not improve AUC. Reverting changes.
Training on augumented user 100460 11/50 current_auc = 0.38095238095238093
User 100460 AUC after training: 0.38095238095238093
User 100460 does not improve AUC. Reverting changes.
Training on augumented user 39704 12/50 current_auc = 0.38095238095238093
User 39704 AUC after training: 0.38095238095238093
User 39704 does not improve AUC. Reverting changes.
Training on augumented user 85125 13/50 current_auc = 0.38095238095238093
User 85125 AUC after training: 0.38095238095238093
User 85125 does not improve AUC. Reverting changes.
Training on augumented user 44033 14/50 current_auc = 0.38095238095238093
User 44033 AUC after training: 0.38095238095238093
User 44033 does not improve AUC. Reverting changes.
Training on augumented user 42181 15/50 current_auc = 0.38095238095238093
User 42181 AUC after training: 0.38095238095238093
User 42181 does not improve AUC. Reverting changes.
Training on augumented user 71190 16/50 current_auc = 0.38095238095238093
User 71190 AUC after training: 0.38095238095238093
User 71190 does not improve AUC. Reverting changes.
Training on augumented user 41751 17/50 current_auc = 0.38095238095238093
User 41751 AUC after training: 0.38095238095238093
User 41751 does not improve AUC. Reverting changes.
Training on augumented user 114098 18/50 current_auc = 0.38095238095238093
User 114098 AUC after training: 0.38095238095238093
User 114098 does not improve AUC. Reverting changes.
Training on augumented user 63906 19/50 current_auc = 0.38095238095238093
User 63906 AUC after training: 0.38095238095238093
User 63906 does not improve AUC. Reverting changes.
Training on augumented user 52109 20/50 current_auc = 0.38095238095238093
User 52109 AUC after training: 0.38095238095238093
User 52109 does not improve AUC. Reverting changes.
Training on augumented user 11510 21/50 current_auc = 0.38095238095238093
User 11510 AUC after training: 0.38095238095238093
User 11510 does not improve AUC. Reverting changes.
Training on augumented user 89552 22/50 current_auc = 0.38095238095238093
User 89552 AUC after training: 0.38095238095238093
User 89552 does not improve AUC. Reverting changes.
Training on augumented user 90854 23/50 current_auc = 0.38095238095238093
User 90854 AUC after training: 0.38095238095238093
User 90854 does not improve AUC. Reverting changes.
Training on augumented user 63340 24/50 current_auc = 0.38095238095238093
User 63340 AUC after training: 0.38095238095238093
User 63340 does not improve AUC. Reverting changes.
Training on augumented user 15231 25/50 current_auc = 0.38095238095238093
User 15231 AUC after training: 0.38095238095238093
User 15231 does not improve AUC. Reverting changes.
Training on augumented user 109654 26/50 current_auc = 0.38095238095238093
User 109654 AUC after training: 0.38095238095238093
User 109654 does not improve AUC. Reverting changes.
Training on augumented user 69135 27/50 current_auc = 0.38095238095238093
User 69135 AUC after training: 0.38095238095238093
User 69135 does not improve AUC. Reverting changes.
Training on augumented user 104697 28/50 current_auc = 0.38095238095238093
User 104697 AUC after training: 0.38095238095238093
User 104697 does not improve AUC. Reverting changes.
Training on augumented user 6408 29/50 current_auc = 0.38095238095238093
User 6408 AUC after training: 0.38095238095238093
User 6408 does not improve AUC. Reverting changes.
Training on augumented user 34554 30/50 current_auc = 0.38095238095238093
User 34554 AUC after training: 0.38095238095238093
User 34554 does not improve AUC. Reverting changes.
Training on augumented user 88847 31/50 current_auc = 0.38095238095238093
User 88847 AUC after training: 0.38095238095238093
User 88847 does not improve AUC. Reverting changes.
Training on augumented user 36809 32/50 current_auc = 0.38095238095238093
User 36809 AUC after training: 0.38095238095238093
User 36809 does not improve AUC. Reverting changes.
Training on augumented user 81674 33/50 current_auc = 0.38095238095238093
User 81674 AUC after training: 0.38095238095238093
User 81674 does not improve AUC. Reverting changes.
Training on augumented user 99257 34/50 current_auc = 0.38095238095238093
User 99257 AUC after training: 0.38095238095238093
User 99257 does not improve AUC. Reverting changes.
Training on augumented user 114714 35/50 current_auc = 0.38095238095238093
User 114714 AUC after training: 0.38095238095238093
User 114714 does not improve AUC. Reverting changes.
Training on augumented user 79357 36/50 current_auc = 0.38095238095238093
User 79357 AUC after training: 0.38095238095238093
User 79357 does not improve AUC. Reverting changes.
Training on augumented user 35796 37/50 current_auc = 0.38095238095238093
User 35796 AUC after training: 0.38095238095238093
User 35796 does not improve AUC. Reverting changes.
Training on augumented user 21529 38/50 current_auc = 0.38095238095238093
User 21529 AUC after training: 0.38095238095238093
User 21529 does not improve AUC. Reverting changes.
Training on augumented user 72471 39/50 current_auc = 0.38095238095238093
User 72471 AUC after training: 0.38095238095238093
User 72471 does not improve AUC. Reverting changes.
Training on augumented user 66425 40/50 current_auc = 0.38095238095238093
User 66425 AUC after training: 0.38095238095238093
User 66425 does not improve AUC. Reverting changes.
Training on augumented user 39013 41/50 current_auc = 0.38095238095238093
User 39013 AUC after training: 0.38095238095238093
User 39013 does not improve AUC. Reverting changes.
Training on augumented user 60294 42/50 current_auc = 0.38095238095238093
User 60294 AUC after training: 0.38095238095238093
User 60294 does not improve AUC. Reverting changes.
Training on augumented user 51676 43/50 current_auc = 0.38095238095238093
User 51676 AUC after training: 0.38095238095238093
User 51676 does not improve AUC. Reverting changes.
Training on augumented user 91960 44/50 current_auc = 0.38095238095238093
User 91960 AUC after training: 0.38095238095238093
User 91960 does not improve AUC. Reverting changes.
Training on augumented user 38765 45/50 current_auc = 0.38095238095238093
User 38765 AUC after training: 0.38095238095238093
User 38765 does not improve AUC. Reverting changes.
Training on augumented user 46708 46/50 current_auc = 0.38095238095238093
User 46708 AUC after training: 0.38095238095238093
User 46708 does not improve AUC. Reverting changes.
Training on augumented user 113507 47/50 current_auc = 0.38095238095238093
User 113507 AUC after training: 0.38095238095238093
User 113507 does not improve AUC. Reverting changes.
Training on augumented user 82321 48/50 current_auc = 0.38095238095238093
User 82321 AUC after training: 0.38095238095238093
User 82321 does not improve AUC. Reverting changes.
Training on augumented user 112751 49/50 current_auc = 0.38095238095238093
User 112751 AUC after training: 0.38095238095238093
User 112751 does not improve AUC. Reverting changes.
[2024-12-02 19:56:47.539591] start test user 130685 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:47.978777] start test user 130685 256/567 recall augumented users by random, augumented_users = [135993, 52672, 5957, 102672, 87224, 72375, 38533, 102806, 104857, 84812, 72188, 68955, 68707, 5715, 11785, 5591, 83907, 90616, 129453, 29426, 31676, 17987, 59769, 43177, 19272, 7026, 92337, 57809, 108659, 30839, 70961, 71031, 68232, 21169, 40519, 40676, 20713, 33593, 118398, 18190, 38615, 57180, 137317, 8414, 74259, 85813, 17266, 19455, 74853, 78987]
[2024-12-02 19:56:47.995444] user = 130685 Cloud 256/567
[2024-12-02 19:56:48.042237] user = 130685 Local 256/567
[2024-12-02 19:56:48.174126] user = 130685 Local+ 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:50.897924] user = 130685 MPDA- 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.550220088035214
Training on augumented user 135993 0/50 current_auc = 0.550220088035214
User 135993 AUC after training: 0.5498866213151927
User 135993 does not improve AUC. Reverting changes.
Training on augumented user 52672 1/50 current_auc = 0.550220088035214
User 52672 AUC after training: 0.5498199279711884
User 52672 does not improve AUC. Reverting changes.
Training on augumented user 5957 2/50 current_auc = 0.550220088035214
User 5957 AUC after training: 0.5496198479391756
User 5957 does not improve AUC. Reverting changes.
Training on augumented user 102672 3/50 current_auc = 0.550220088035214
User 102672 AUC after training: 0.5497532346271842
User 102672 does not improve AUC. Reverting changes.
Training on augumented user 87224 4/50 current_auc = 0.550220088035214
User 87224 AUC after training: 0.5499533146591971
User 87224 does not improve AUC. Reverting changes.
Training on augumented user 72375 5/50 current_auc = 0.550220088035214
User 72375 AUC after training: 0.5483526744030947
User 72375 does not improve AUC. Reverting changes.
Training on augumented user 38533 6/50 current_auc = 0.550220088035214
User 38533 AUC after training: 0.5498199279711884
User 38533 does not improve AUC. Reverting changes.
Training on augumented user 102806 7/50 current_auc = 0.550220088035214
User 102806 AUC after training: 0.5503534747232226
User 102806 improves AUC. Keeping the model.
Training on augumented user 104857 8/50 current_auc = 0.5503534747232226
User 104857 AUC after training: 0.5504868614112312
User 104857 improves AUC. Keeping the model.
Training on augumented user 84812 9/50 current_auc = 0.5504868614112312
User 84812 AUC after training: 0.5498199279711885
User 84812 does not improve AUC. Reverting changes.
Training on augumented user 72188 10/50 current_auc = 0.5504868614112312
User 72188 AUC after training: 0.5494197679071628
User 72188 does not improve AUC. Reverting changes.
Training on augumented user 68955 11/50 current_auc = 0.5504868614112312
User 68955 AUC after training: 0.548219287715086
User 68955 does not improve AUC. Reverting changes.
Training on augumented user 68707 12/50 current_auc = 0.5504868614112312
User 68707 AUC after training: 0.5495531545951714
User 68707 does not improve AUC. Reverting changes.
Training on augumented user 5715 13/50 current_auc = 0.5504868614112312
User 5715 AUC after training: 0.5498199279711885
User 5715 does not improve AUC. Reverting changes.
Training on augumented user 11785 14/50 current_auc = 0.5504868614112312
User 11785 AUC after training: 0.54968654128318
User 11785 does not improve AUC. Reverting changes.
Training on augumented user 5591 15/50 current_auc = 0.5504868614112312
User 5591 AUC after training: 0.5491529945311457
User 5591 does not improve AUC. Reverting changes.
Training on augumented user 83907 16/50 current_auc = 0.5504868614112312
User 83907 AUC after training: 0.5488862211551288
User 83907 does not improve AUC. Reverting changes.
Training on augumented user 90616 17/50 current_auc = 0.5504868614112312
User 90616 AUC after training: 0.5498199279711884
User 90616 does not improve AUC. Reverting changes.
Training on augumented user 129453 18/50 current_auc = 0.5504868614112312
User 129453 AUC after training: 0.5499533146591971
User 129453 does not improve AUC. Reverting changes.
Training on augumented user 29426 19/50 current_auc = 0.5504868614112312
User 29426 AUC after training: 0.5487528344671202
User 29426 does not improve AUC. Reverting changes.
Training on augumented user 31676 20/50 current_auc = 0.5504868614112312
User 31676 AUC after training: 0.5494197679071628
User 31676 does not improve AUC. Reverting changes.
Training on augumented user 17987 21/50 current_auc = 0.5504868614112312
User 17987 AUC after training: 0.5501533946912098
User 17987 does not improve AUC. Reverting changes.
Training on augumented user 59769 22/50 current_auc = 0.5504868614112312
User 59769 AUC after training: 0.5498199279711884
User 59769 does not improve AUC. Reverting changes.
Training on augumented user 43177 23/50 current_auc = 0.5504868614112312
User 43177 AUC after training: 0.5488862211551288
User 43177 does not improve AUC. Reverting changes.
Training on augumented user 19272 24/50 current_auc = 0.5504868614112312
User 19272 AUC after training: 0.5495531545951714
User 19272 does not improve AUC. Reverting changes.
Training on augumented user 7026 25/50 current_auc = 0.5504868614112312
User 7026 AUC after training: 0.550220088035214
User 7026 does not improve AUC. Reverting changes.
Training on augumented user 92337 26/50 current_auc = 0.5504868614112312
User 92337 AUC after training: 0.5491529945311457
User 92337 does not improve AUC. Reverting changes.
Training on augumented user 57809 27/50 current_auc = 0.5504868614112312
User 57809 AUC after training: 0.5491529945311457
User 57809 does not improve AUC. Reverting changes.
Training on augumented user 108659 28/50 current_auc = 0.5504868614112312
User 108659 AUC after training: 0.54968654128318
User 108659 does not improve AUC. Reverting changes.
Training on augumented user 30839 29/50 current_auc = 0.5504868614112312
User 30839 AUC after training: 0.5490196078431373
User 30839 does not improve AUC. Reverting changes.
Training on augumented user 70961 30/50 current_auc = 0.5504868614112312
User 70961 AUC after training: 0.5488862211551286
User 70961 does not improve AUC. Reverting changes.
Training on augumented user 71031 31/50 current_auc = 0.5504868614112312
User 71031 AUC after training: 0.5492863812191544
User 71031 does not improve AUC. Reverting changes.
Training on augumented user 68232 32/50 current_auc = 0.5504868614112312
User 68232 AUC after training: 0.54968654128318
User 68232 does not improve AUC. Reverting changes.
Training on augumented user 21169 33/50 current_auc = 0.5504868614112312
User 21169 AUC after training: 0.54968654128318
User 21169 does not improve AUC. Reverting changes.
Training on augumented user 40519 34/50 current_auc = 0.5504868614112312
User 40519 AUC after training: 0.54968654128318
User 40519 does not improve AUC. Reverting changes.
Training on augumented user 40676 35/50 current_auc = 0.5504868614112312
User 40676 AUC after training: 0.550220088035214
User 40676 does not improve AUC. Reverting changes.
Training on augumented user 20713 36/50 current_auc = 0.5504868614112312
User 20713 AUC after training: 0.5484860610911032
User 20713 does not improve AUC. Reverting changes.
Training on augumented user 33593 37/50 current_auc = 0.5504868614112312
User 33593 AUC after training: 0.5494197679071628
User 33593 does not improve AUC. Reverting changes.
Training on augumented user 118398 38/50 current_auc = 0.5504868614112312
User 118398 AUC after training: 0.5503534747232226
User 118398 does not improve AUC. Reverting changes.
Training on augumented user 18190 39/50 current_auc = 0.5504868614112312
User 18190 AUC after training: 0.5492863812191544
User 18190 does not improve AUC. Reverting changes.
Training on augumented user 38615 40/50 current_auc = 0.5504868614112312
User 38615 AUC after training: 0.5491529945311457
User 38615 does not improve AUC. Reverting changes.
Training on augumented user 57180 41/50 current_auc = 0.5504868614112312
User 57180 AUC after training: 0.5510204081632653
User 57180 improves AUC. Keeping the model.
Training on augumented user 137317 42/50 current_auc = 0.5510204081632653
User 137317 AUC after training: 0.5515539549152993
User 137317 improves AUC. Keeping the model.
Training on augumented user 8414 43/50 current_auc = 0.5515539549152993
User 8414 AUC after training: 0.5516873416033079
User 8414 improves AUC. Keeping the model.
Training on augumented user 74259 44/50 current_auc = 0.5516873416033079
User 74259 AUC after training: 0.5518207282913166
User 74259 improves AUC. Keeping the model.
Training on augumented user 85813 45/50 current_auc = 0.5518207282913166
User 85813 AUC after training: 0.5512871815392824
User 85813 does not improve AUC. Reverting changes.
Training on augumented user 17266 46/50 current_auc = 0.5518207282913166
User 17266 AUC after training: 0.551687341603308
User 17266 does not improve AUC. Reverting changes.
Training on augumented user 19455 47/50 current_auc = 0.5518207282913166
User 19455 AUC after training: 0.5515539549152995
User 19455 does not improve AUC. Reverting changes.
Training on augumented user 74853 48/50 current_auc = 0.5518207282913166
User 74853 AUC after training: 0.5503534747232226
User 74853 does not improve AUC. Reverting changes.
Training on augumented user 78987 49/50 current_auc = 0.5518207282913166
User 78987 AUC after training: 0.5520875016673336
User 78987 improves AUC. Keeping the model.
[2024-12-02 19:57:22.593115] start test user 130689 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:23.361355] start test user 130689 257/567 recall augumented users by random, augumented_users = [114312, 43235, 30663, 59543, 66176, 16415, 12119, 29574, 21577, 116806, 50441, 113203, 116952, 81695, 99501, 40105, 115982, 133591, 79557, 7288, 50990, 114796, 48164, 19024, 1632, 18839, 112114, 110466, 106018, 115313, 129812, 75464, 63298, 36686, 128553, 35933, 15438, 23749, 129325, 100779, 69010, 37680, 101804, 128194, 43754, 118579, 91829, 119309, 129594, 42105]
[2024-12-02 19:57:23.396835] user = 130689 Cloud 257/567
[2024-12-02 19:57:23.407342] user = 130689 Local 257/567
[2024-12-02 19:57:23.434952] user = 130689 Local+ 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:26.301051] user = 130689 MPDA- 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3695652173913043
Training on augumented user 114312 0/50 current_auc = 0.3695652173913043
User 114312 AUC after training: 0.3695652173913043
User 114312 does not improve AUC. Reverting changes.
Training on augumented user 43235 1/50 current_auc = 0.3695652173913043
User 43235 AUC after training: 0.3695652173913043
User 43235 does not improve AUC. Reverting changes.
Training on augumented user 30663 2/50 current_auc = 0.3695652173913043
User 30663 AUC after training: 0.3695652173913043
User 30663 does not improve AUC. Reverting changes.
Training on augumented user 59543 3/50 current_auc = 0.3695652173913043
User 59543 AUC after training: 0.3695652173913043
User 59543 does not improve AUC. Reverting changes.
Training on augumented user 66176 4/50 current_auc = 0.3695652173913043
User 66176 AUC after training: 0.3695652173913043
User 66176 does not improve AUC. Reverting changes.
Training on augumented user 16415 5/50 current_auc = 0.3695652173913043
User 16415 AUC after training: 0.3695652173913043
User 16415 does not improve AUC. Reverting changes.
Training on augumented user 12119 6/50 current_auc = 0.3695652173913043
User 12119 AUC after training: 0.3695652173913043
User 12119 does not improve AUC. Reverting changes.
Training on augumented user 29574 7/50 current_auc = 0.3695652173913043
User 29574 AUC after training: 0.3695652173913043
User 29574 does not improve AUC. Reverting changes.
Training on augumented user 21577 8/50 current_auc = 0.3695652173913043
User 21577 AUC after training: 0.3695652173913043
User 21577 does not improve AUC. Reverting changes.
Training on augumented user 116806 9/50 current_auc = 0.3695652173913043
User 116806 AUC after training: 0.3695652173913043
User 116806 does not improve AUC. Reverting changes.
Training on augumented user 50441 10/50 current_auc = 0.3695652173913043
User 50441 AUC after training: 0.3913043478260869
User 50441 improves AUC. Keeping the model.
Training on augumented user 113203 11/50 current_auc = 0.3913043478260869
User 113203 AUC after training: 0.3913043478260869
User 113203 does not improve AUC. Reverting changes.
Training on augumented user 116952 12/50 current_auc = 0.3913043478260869
User 116952 AUC after training: 0.3913043478260869
User 116952 does not improve AUC. Reverting changes.
Training on augumented user 81695 13/50 current_auc = 0.3913043478260869
User 81695 AUC after training: 0.3913043478260869
User 81695 does not improve AUC. Reverting changes.
Training on augumented user 99501 14/50 current_auc = 0.3913043478260869
User 99501 AUC after training: 0.3913043478260869
User 99501 does not improve AUC. Reverting changes.
Training on augumented user 40105 15/50 current_auc = 0.3913043478260869
User 40105 AUC after training: 0.3913043478260869
User 40105 does not improve AUC. Reverting changes.
Training on augumented user 115982 16/50 current_auc = 0.3913043478260869
User 115982 AUC after training: 0.3913043478260869
User 115982 does not improve AUC. Reverting changes.
Training on augumented user 133591 17/50 current_auc = 0.3913043478260869
User 133591 AUC after training: 0.3913043478260869
User 133591 does not improve AUC. Reverting changes.
Training on augumented user 79557 18/50 current_auc = 0.3913043478260869
User 79557 AUC after training: 0.3913043478260869
User 79557 does not improve AUC. Reverting changes.
Training on augumented user 7288 19/50 current_auc = 0.3913043478260869
User 7288 AUC after training: 0.3695652173913043
User 7288 does not improve AUC. Reverting changes.
Training on augumented user 50990 20/50 current_auc = 0.3913043478260869
User 50990 AUC after training: 0.3695652173913043
User 50990 does not improve AUC. Reverting changes.
Training on augumented user 114796 21/50 current_auc = 0.3913043478260869
User 114796 AUC after training: 0.3913043478260869
User 114796 does not improve AUC. Reverting changes.
Training on augumented user 48164 22/50 current_auc = 0.3913043478260869
User 48164 AUC after training: 0.3695652173913043
User 48164 does not improve AUC. Reverting changes.
Training on augumented user 19024 23/50 current_auc = 0.3913043478260869
User 19024 AUC after training: 0.3913043478260869
User 19024 does not improve AUC. Reverting changes.
Training on augumented user 1632 24/50 current_auc = 0.3913043478260869
User 1632 AUC after training: 0.3913043478260869
User 1632 does not improve AUC. Reverting changes.
Training on augumented user 18839 25/50 current_auc = 0.3913043478260869
User 18839 AUC after training: 0.3913043478260869
User 18839 does not improve AUC. Reverting changes.
Training on augumented user 112114 26/50 current_auc = 0.3913043478260869
User 112114 AUC after training: 0.3695652173913043
User 112114 does not improve AUC. Reverting changes.
Training on augumented user 110466 27/50 current_auc = 0.3913043478260869
User 110466 AUC after training: 0.3913043478260869
User 110466 does not improve AUC. Reverting changes.
Training on augumented user 106018 28/50 current_auc = 0.3913043478260869
User 106018 AUC after training: 0.3695652173913043
User 106018 does not improve AUC. Reverting changes.
Training on augumented user 115313 29/50 current_auc = 0.3913043478260869
User 115313 AUC after training: 0.3695652173913043
User 115313 does not improve AUC. Reverting changes.
Training on augumented user 129812 30/50 current_auc = 0.3913043478260869
User 129812 AUC after training: 0.3695652173913043
User 129812 does not improve AUC. Reverting changes.
Training on augumented user 75464 31/50 current_auc = 0.3913043478260869
User 75464 AUC after training: 0.3695652173913043
User 75464 does not improve AUC. Reverting changes.
Training on augumented user 63298 32/50 current_auc = 0.3913043478260869
User 63298 AUC after training: 0.3695652173913043
User 63298 does not improve AUC. Reverting changes.
Training on augumented user 36686 33/50 current_auc = 0.3913043478260869
User 36686 AUC after training: 0.3913043478260869
User 36686 does not improve AUC. Reverting changes.
Training on augumented user 128553 34/50 current_auc = 0.3913043478260869
User 128553 AUC after training: 0.3913043478260869
User 128553 does not improve AUC. Reverting changes.
Training on augumented user 35933 35/50 current_auc = 0.3913043478260869
User 35933 AUC after training: 0.3695652173913043
User 35933 does not improve AUC. Reverting changes.
Training on augumented user 15438 36/50 current_auc = 0.3913043478260869
User 15438 AUC after training: 0.3695652173913043
User 15438 does not improve AUC. Reverting changes.
Training on augumented user 23749 37/50 current_auc = 0.3913043478260869
User 23749 AUC after training: 0.3913043478260869
User 23749 does not improve AUC. Reverting changes.
Training on augumented user 129325 38/50 current_auc = 0.3913043478260869
User 129325 AUC after training: 0.3913043478260869
User 129325 does not improve AUC. Reverting changes.
Training on augumented user 100779 39/50 current_auc = 0.3913043478260869
User 100779 AUC after training: 0.3695652173913043
User 100779 does not improve AUC. Reverting changes.
Training on augumented user 69010 40/50 current_auc = 0.3913043478260869
User 69010 AUC after training: 0.3913043478260869
User 69010 does not improve AUC. Reverting changes.
Training on augumented user 37680 41/50 current_auc = 0.3913043478260869
User 37680 AUC after training: 0.3913043478260869
User 37680 does not improve AUC. Reverting changes.
Training on augumented user 101804 42/50 current_auc = 0.3913043478260869
User 101804 AUC after training: 0.3695652173913043
User 101804 does not improve AUC. Reverting changes.
Training on augumented user 128194 43/50 current_auc = 0.3913043478260869
User 128194 AUC after training: 0.3695652173913043
User 128194 does not improve AUC. Reverting changes.
Training on augumented user 43754 44/50 current_auc = 0.3913043478260869
User 43754 AUC after training: 0.3913043478260869
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 118579 45/50 current_auc = 0.3913043478260869
User 118579 AUC after training: 0.3913043478260869
User 118579 does not improve AUC. Reverting changes.
Training on augumented user 91829 46/50 current_auc = 0.3913043478260869
User 91829 AUC after training: 0.3695652173913043
User 91829 does not improve AUC. Reverting changes.
Training on augumented user 119309 47/50 current_auc = 0.3913043478260869
User 119309 AUC after training: 0.3913043478260869
User 119309 does not improve AUC. Reverting changes.
Training on augumented user 129594 48/50 current_auc = 0.3913043478260869
User 129594 AUC after training: 0.3913043478260869
User 129594 does not improve AUC. Reverting changes.
Training on augumented user 42105 49/50 current_auc = 0.3913043478260869
User 42105 AUC after training: 0.3695652173913043
User 42105 does not improve AUC. Reverting changes.
[2024-12-02 19:57:58.276580] start test user 130766 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:58.958340] start test user 130766 258/567 recall augumented users by random, augumented_users = [133197, 22749, 120029, 796, 119498, 63863, 18988, 128544, 102146, 71776, 11321, 90585, 95049, 102142, 87572, 116272, 24012, 124641, 57831, 46012, 15753, 35811, 38751, 100319, 106367, 60755, 1471, 49749, 36865, 76775, 45168, 80317, 134953, 74094, 82476, 47224, 134239, 120124, 127297, 80891, 98829, 40489, 9670, 96109, 67961, 88071, 61440, 97581, 105020, 8392]
[2024-12-02 19:57:58.975336] user = 130766 Cloud 258/567
[2024-12-02 19:57:58.988074] user = 130766 Local 258/567
[2024-12-02 19:57:59.019963] user = 130766 Local+ 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:01.784058] user = 130766 MPDA- 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.715625
Training on augumented user 133197 0/50 current_auc = 0.715625
User 133197 AUC after training: 0.7125
User 133197 does not improve AUC. Reverting changes.
Training on augumented user 22749 1/50 current_auc = 0.715625
User 22749 AUC after training: 0.715625
User 22749 does not improve AUC. Reverting changes.
Training on augumented user 120029 2/50 current_auc = 0.715625
User 120029 AUC after training: 0.715625
User 120029 does not improve AUC. Reverting changes.
Training on augumented user 796 3/50 current_auc = 0.715625
User 796 AUC after training: 0.715625
User 796 does not improve AUC. Reverting changes.
Training on augumented user 119498 4/50 current_auc = 0.715625
User 119498 AUC after training: 0.715625
User 119498 does not improve AUC. Reverting changes.
Training on augumented user 63863 5/50 current_auc = 0.715625
User 63863 AUC after training: 0.715625
User 63863 does not improve AUC. Reverting changes.
Training on augumented user 18988 6/50 current_auc = 0.715625
User 18988 AUC after training: 0.71875
User 18988 improves AUC. Keeping the model.
Training on augumented user 128544 7/50 current_auc = 0.71875
User 128544 AUC after training: 0.715625
User 128544 does not improve AUC. Reverting changes.
Training on augumented user 102146 8/50 current_auc = 0.71875
User 102146 AUC after training: 0.715625
User 102146 does not improve AUC. Reverting changes.
Training on augumented user 71776 9/50 current_auc = 0.71875
User 71776 AUC after training: 0.71875
User 71776 does not improve AUC. Reverting changes.
Training on augumented user 11321 10/50 current_auc = 0.71875
User 11321 AUC after training: 0.7125
User 11321 does not improve AUC. Reverting changes.
Training on augumented user 90585 11/50 current_auc = 0.71875
User 90585 AUC after training: 0.7125
User 90585 does not improve AUC. Reverting changes.
Training on augumented user 95049 12/50 current_auc = 0.71875
User 95049 AUC after training: 0.7125
User 95049 does not improve AUC. Reverting changes.
Training on augumented user 102142 13/50 current_auc = 0.71875
User 102142 AUC after training: 0.71875
User 102142 does not improve AUC. Reverting changes.
Training on augumented user 87572 14/50 current_auc = 0.71875
User 87572 AUC after training: 0.7140624999999999
User 87572 does not improve AUC. Reverting changes.
Training on augumented user 116272 15/50 current_auc = 0.71875
User 116272 AUC after training: 0.715625
User 116272 does not improve AUC. Reverting changes.
Training on augumented user 24012 16/50 current_auc = 0.71875
User 24012 AUC after training: 0.7125
User 24012 does not improve AUC. Reverting changes.
Training on augumented user 124641 17/50 current_auc = 0.71875
User 124641 AUC after training: 0.7125
User 124641 does not improve AUC. Reverting changes.
Training on augumented user 57831 18/50 current_auc = 0.71875
User 57831 AUC after training: 0.715625
User 57831 does not improve AUC. Reverting changes.
Training on augumented user 46012 19/50 current_auc = 0.71875
User 46012 AUC after training: 0.71875
User 46012 does not improve AUC. Reverting changes.
Training on augumented user 15753 20/50 current_auc = 0.71875
User 15753 AUC after training: 0.715625
User 15753 does not improve AUC. Reverting changes.
Training on augumented user 35811 21/50 current_auc = 0.71875
User 35811 AUC after training: 0.715625
User 35811 does not improve AUC. Reverting changes.
Training on augumented user 38751 22/50 current_auc = 0.71875
User 38751 AUC after training: 0.71875
User 38751 does not improve AUC. Reverting changes.
Training on augumented user 100319 23/50 current_auc = 0.71875
User 100319 AUC after training: 0.715625
User 100319 does not improve AUC. Reverting changes.
Training on augumented user 106367 24/50 current_auc = 0.71875
User 106367 AUC after training: 0.71875
User 106367 does not improve AUC. Reverting changes.
Training on augumented user 60755 25/50 current_auc = 0.71875
User 60755 AUC after training: 0.715625
User 60755 does not improve AUC. Reverting changes.
Training on augumented user 1471 26/50 current_auc = 0.71875
User 1471 AUC after training: 0.71875
User 1471 does not improve AUC. Reverting changes.
Training on augumented user 49749 27/50 current_auc = 0.71875
User 49749 AUC after training: 0.715625
User 49749 does not improve AUC. Reverting changes.
Training on augumented user 36865 28/50 current_auc = 0.71875
User 36865 AUC after training: 0.71875
User 36865 does not improve AUC. Reverting changes.
Training on augumented user 76775 29/50 current_auc = 0.71875
User 76775 AUC after training: 0.71875
User 76775 does not improve AUC. Reverting changes.
Training on augumented user 45168 30/50 current_auc = 0.71875
User 45168 AUC after training: 0.71875
User 45168 does not improve AUC. Reverting changes.
Training on augumented user 80317 31/50 current_auc = 0.71875
User 80317 AUC after training: 0.715625
User 80317 does not improve AUC. Reverting changes.
Training on augumented user 134953 32/50 current_auc = 0.71875
User 134953 AUC after training: 0.71875
User 134953 does not improve AUC. Reverting changes.
Training on augumented user 74094 33/50 current_auc = 0.71875
User 74094 AUC after training: 0.715625
User 74094 does not improve AUC. Reverting changes.
Training on augumented user 82476 34/50 current_auc = 0.71875
User 82476 AUC after training: 0.715625
User 82476 does not improve AUC. Reverting changes.
Training on augumented user 47224 35/50 current_auc = 0.71875
User 47224 AUC after training: 0.715625
User 47224 does not improve AUC. Reverting changes.
Training on augumented user 134239 36/50 current_auc = 0.71875
User 134239 AUC after training: 0.715625
User 134239 does not improve AUC. Reverting changes.
Training on augumented user 120124 37/50 current_auc = 0.71875
User 120124 AUC after training: 0.7109375
User 120124 does not improve AUC. Reverting changes.
Training on augumented user 127297 38/50 current_auc = 0.71875
User 127297 AUC after training: 0.721875
User 127297 improves AUC. Keeping the model.
Training on augumented user 80891 39/50 current_auc = 0.721875
User 80891 AUC after training: 0.721875
User 80891 does not improve AUC. Reverting changes.
Training on augumented user 98829 40/50 current_auc = 0.721875
User 98829 AUC after training: 0.71875
User 98829 does not improve AUC. Reverting changes.
Training on augumented user 40489 41/50 current_auc = 0.721875
User 40489 AUC after training: 0.71875
User 40489 does not improve AUC. Reverting changes.
Training on augumented user 9670 42/50 current_auc = 0.721875
User 9670 AUC after training: 0.721875
User 9670 does not improve AUC. Reverting changes.
Training on augumented user 96109 43/50 current_auc = 0.721875
User 96109 AUC after training: 0.71875
User 96109 does not improve AUC. Reverting changes.
Training on augumented user 67961 44/50 current_auc = 0.721875
User 67961 AUC after training: 0.71875
User 67961 does not improve AUC. Reverting changes.
Training on augumented user 88071 45/50 current_auc = 0.721875
User 88071 AUC after training: 0.71875
User 88071 does not improve AUC. Reverting changes.
Training on augumented user 61440 46/50 current_auc = 0.721875
User 61440 AUC after training: 0.71875
User 61440 does not improve AUC. Reverting changes.
Training on augumented user 97581 47/50 current_auc = 0.721875
User 97581 AUC after training: 0.71875
User 97581 does not improve AUC. Reverting changes.
Training on augumented user 105020 48/50 current_auc = 0.721875
User 105020 AUC after training: 0.71875
User 105020 does not improve AUC. Reverting changes.
Training on augumented user 8392 49/50 current_auc = 0.721875
User 8392 AUC after training: 0.725
User 8392 improves AUC. Keeping the model.
[2024-12-02 19:58:32.694289] start test user 130767 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:33.469915] start test user 130767 259/567 recall augumented users by random, augumented_users = [69099, 34479, 72152, 116263, 1720, 103965, 103283, 115666, 100377, 92659, 47588, 47632, 63584, 136512, 54332, 106567, 64278, 2882, 29702, 130129, 102753, 124272, 58651, 9984, 103259, 7464, 80044, 61066, 72948, 120595, 122671, 118232, 115554, 47730, 57009, 73257, 53646, 10761, 1886, 65229, 48834, 8028, 57672, 52172, 46, 81831, 8729, 29282, 47186, 36733]
[2024-12-02 19:58:33.543676] user = 130767 Cloud 259/567
[2024-12-02 19:58:33.757786] user = 130767 Local 259/567
[2024-12-02 19:58:34.564403] user = 130767 Local+ 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:37.688601] user = 130767 MPDA- 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6597897055682514
Training on augumented user 69099 0/50 current_auc = 0.6597897055682514
User 69099 AUC after training: 0.6597261872686991
User 69099 does not improve AUC. Reverting changes.
Training on augumented user 34479 1/50 current_auc = 0.6597897055682514
User 34479 AUC after training: 0.6597942425896481
User 34479 improves AUC. Keeping the model.
Training on augumented user 72152 2/50 current_auc = 0.6597942425896481
User 72152 AUC after training: 0.6598225117229654
User 72152 improves AUC. Keeping the model.
Training on augumented user 116263 3/50 current_auc = 0.6598225117229654
User 116263 AUC after training: 0.6595872846136343
User 116263 does not improve AUC. Reverting changes.
Training on augumented user 1720 4/50 current_auc = 0.6598225117229654
User 1720 AUC after training: 0.659868928941869
User 1720 improves AUC. Keeping the model.
Training on augumented user 103965 5/50 current_auc = 0.659868928941869
User 103965 AUC after training: 0.6599314002364834
User 103965 improves AUC. Keeping the model.
Training on augumented user 103283 6/50 current_auc = 0.6599314002364834
User 103283 AUC after training: 0.6600493627927949
User 103283 improves AUC. Keeping the model.
Training on augumented user 115666 7/50 current_auc = 0.6600493627927949
User 115666 AUC after training: 0.6599753744438659
User 115666 does not improve AUC. Reverting changes.
Training on augumented user 100377 8/50 current_auc = 0.6600493627927949
User 100377 AUC after training: 0.6600758869178827
User 100377 improves AUC. Keeping the model.
Training on augumented user 92659 9/50 current_auc = 0.6600758869178827
User 92659 AUC after training: 0.6601729093754406
User 92659 improves AUC. Keeping the model.
Training on augumented user 47588 10/50 current_auc = 0.6601729093754406
User 47588 AUC after training: 0.6600549468191292
User 47588 does not improve AUC. Reverting changes.
Training on augumented user 47632 11/50 current_auc = 0.6601729093754406
User 47632 AUC after training: 0.6601547612898542
User 47632 does not improve AUC. Reverting changes.
Training on augumented user 63584 12/50 current_auc = 0.6601729093754406
User 63584 AUC after training: 0.6602633008017266
User 63584 improves AUC. Keeping the model.
Training on augumented user 136512 13/50 current_auc = 0.6602633008017266
User 136512 AUC after training: 0.6603285641095085
User 136512 improves AUC. Keeping the model.
Training on augumented user 54332 14/50 current_auc = 0.6603285641095085
User 54332 AUC after training: 0.6602399176914517
User 54332 does not improve AUC. Reverting changes.
Training on augumented user 106567 15/50 current_auc = 0.6603285641095085
User 106567 AUC after training: 0.6604193045374402
User 106567 improves AUC. Keeping the model.
Training on augumented user 64278 16/50 current_auc = 0.6604193045374402
User 64278 AUC after training: 0.6604604867316555
User 64278 improves AUC. Keeping the model.
Training on augumented user 2882 17/50 current_auc = 0.6604604867316555
User 2882 AUC after training: 0.6604953868962447
User 2882 improves AUC. Keeping the model.
Training on augumented user 29702 18/50 current_auc = 0.6604953868962447
User 29702 AUC after training: 0.6604863128534514
User 29702 does not improve AUC. Reverting changes.
Training on augumented user 130129 19/50 current_auc = 0.6604953868962447
User 130129 AUC after training: 0.6605219110213324
User 130129 improves AUC. Keeping the model.
Training on augumented user 102753 20/50 current_auc = 0.6605219110213324
User 102753 AUC after training: 0.6605428511200858
User 102753 improves AUC. Keeping the model.
Training on augumented user 124272 21/50 current_auc = 0.6605428511200858
User 124272 AUC after training: 0.6606014833965956
User 124272 improves AUC. Keeping the model.
Training on augumented user 58651 22/50 current_auc = 0.6606014833965956
User 58651 AUC after training: 0.6606074164245759
User 58651 improves AUC. Keeping the model.
Training on augumented user 9984 23/50 current_auc = 0.6606074164245759
User 9984 AUC after training: 0.6604754938024286
User 9984 does not improve AUC. Reverting changes.
Training on augumented user 103259 24/50 current_auc = 0.6606074164245759
User 103259 AUC after training: 0.6605791472912586
User 103259 does not improve AUC. Reverting changes.
Training on augumented user 7464 25/50 current_auc = 0.6606074164245759
User 7464 AUC after training: 0.6606520886352499
User 7464 improves AUC. Keeping the model.
Training on augumented user 80044 26/50 current_auc = 0.6606520886352499
User 80044 AUC after training: 0.6606510416303124
User 80044 does not improve AUC. Reverting changes.
Training on augumented user 61066 27/50 current_auc = 0.6606520886352499
User 61066 AUC after training: 0.660597295376845
User 61066 does not improve AUC. Reverting changes.
Training on augumented user 72948 28/50 current_auc = 0.6606520886352499
User 72948 AUC after training: 0.6605878723324059
User 72948 does not improve AUC. Reverting changes.
Training on augumented user 120595 29/50 current_auc = 0.6606520886352499
User 120595 AUC after training: 0.6606287055249752
User 120595 does not improve AUC. Reverting changes.
Training on augumented user 122671 30/50 current_auc = 0.6606520886352499
User 122671 AUC after training: 0.6606356855578931
User 122671 does not improve AUC. Reverting changes.
Training on augumented user 118232 31/50 current_auc = 0.6606520886352499
User 118232 AUC after training: 0.6607257279825332
User 118232 improves AUC. Keeping the model.
Training on augumented user 115554 32/50 current_auc = 0.6607257279825332
User 115554 AUC after training: 0.6606733777356495
User 115554 does not improve AUC. Reverting changes.
Training on augumented user 47730 33/50 current_auc = 0.6607257279825332
User 47730 AUC after training: 0.6606454576039781
User 47730 does not improve AUC. Reverting changes.
Training on augumented user 57009 34/50 current_auc = 0.6607257279825332
User 57009 AUC after training: 0.6607784272310628
User 57009 improves AUC. Keeping the model.
Training on augumented user 73257 35/50 current_auc = 0.6607784272310628
User 73257 AUC after training: 0.6607355000286181
User 73257 does not improve AUC. Reverting changes.
Training on augumented user 53646 36/50 current_auc = 0.6607784272310628
User 53646 AUC after training: 0.6607697021899155
User 53646 does not improve AUC. Reverting changes.
Training on augumented user 10761 37/50 current_auc = 0.6607784272310628
User 10761 AUC after training: 0.6608217034351533
User 10761 improves AUC. Keeping the model.
Training on augumented user 1886 38/50 current_auc = 0.6608217034351533
User 1886 AUC after training: 0.6608698656622866
User 1886 improves AUC. Keeping the model.
Training on augumented user 65229 39/50 current_auc = 0.6608698656622866
User 65229 AUC after training: 0.6607260769841791
User 65229 does not improve AUC. Reverting changes.
Training on augumented user 48834 40/50 current_auc = 0.6608698656622866
User 48834 AUC after training: 0.661145576962541
User 48834 improves AUC. Keeping the model.
Training on augumented user 8028 41/50 current_auc = 0.661145576962541
User 8028 AUC after training: 0.6611529059971046
User 8028 improves AUC. Keeping the model.
Training on augumented user 57672 42/50 current_auc = 0.6611529059971046
User 57672 AUC after training: 0.6611703560793993
User 57672 improves AUC. Keeping the model.
Training on augumented user 52172 43/50 current_auc = 0.6611703560793993
User 52172 AUC after training: 0.6612687745435407
User 52172 improves AUC. Keeping the model.
Training on augumented user 46 44/50 current_auc = 0.6612687745435407
User 46 AUC after training: 0.661322869798654
User 46 improves AUC. Keeping the model.
Training on augumented user 81831 45/50 current_auc = 0.661322869798654
User 81831 AUC after training: 0.6612094442637392
User 81831 does not improve AUC. Reverting changes.
Training on augumented user 8729 46/50 current_auc = 0.661322869798654
User 8729 AUC after training: 0.6614869005722231
User 8729 improves AUC. Keeping the model.
Training on augumented user 29282 47/50 current_auc = 0.6614869005722231
User 29282 AUC after training: 0.6615832250264893
User 29282 improves AUC. Keeping the model.
Training on augumented user 47186 48/50 current_auc = 0.6615832250264893
User 47186 AUC after training: 0.6614715444998039
User 47186 does not improve AUC. Reverting changes.
Training on augumented user 36733 49/50 current_auc = 0.6615832250264893
User 36733 AUC after training: 0.661412912223294
User 36733 does not improve AUC. Reverting changes.
[2024-12-02 19:59:20.288991] start test user 130779 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:20.829825] start test user 130779 260/567 recall augumented users by random, augumented_users = [68202, 8942, 20423, 70507, 22015, 115658, 60158, 84150, 119024, 11929, 131297, 17895, 115326, 25202, 134296, 77190, 44485, 3560, 73511, 72882, 40229, 21012, 110726, 7205, 43671, 135373, 90521, 35198, 102480, 108288, 125357, 54579, 10746, 125117, 102268, 115418, 75672, 22372, 137480, 71519, 98411, 96236, 102718, 107191, 52903, 32118, 57528, 30583, 105641, 50322]
[2024-12-02 19:59:20.844698] user = 130779 Cloud 260/567
[2024-12-02 19:59:20.864659] user = 130779 Local 260/567
[2024-12-02 19:59:20.888923] user = 130779 Local+ 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:23.211345] user = 130779 MPDA- 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9
Training on augumented user 68202 0/50 current_auc = 0.9
User 68202 AUC after training: 0.9
User 68202 does not improve AUC. Reverting changes.
Training on augumented user 8942 1/50 current_auc = 0.9
User 8942 AUC after training: 0.9
User 8942 does not improve AUC. Reverting changes.
Training on augumented user 20423 2/50 current_auc = 0.9
User 20423 AUC after training: 0.9
User 20423 does not improve AUC. Reverting changes.
Training on augumented user 70507 3/50 current_auc = 0.9
User 70507 AUC after training: 0.9
User 70507 does not improve AUC. Reverting changes.
Training on augumented user 22015 4/50 current_auc = 0.9
User 22015 AUC after training: 0.9
User 22015 does not improve AUC. Reverting changes.
Training on augumented user 115658 5/50 current_auc = 0.9
User 115658 AUC after training: 0.9
User 115658 does not improve AUC. Reverting changes.
Training on augumented user 60158 6/50 current_auc = 0.9
User 60158 AUC after training: 0.9
User 60158 does not improve AUC. Reverting changes.
Training on augumented user 84150 7/50 current_auc = 0.9
User 84150 AUC after training: 0.9
User 84150 does not improve AUC. Reverting changes.
Training on augumented user 119024 8/50 current_auc = 0.9
User 119024 AUC after training: 0.9
User 119024 does not improve AUC. Reverting changes.
Training on augumented user 11929 9/50 current_auc = 0.9
User 11929 AUC after training: 0.9
User 11929 does not improve AUC. Reverting changes.
Training on augumented user 131297 10/50 current_auc = 0.9
User 131297 AUC after training: 0.9
User 131297 does not improve AUC. Reverting changes.
Training on augumented user 17895 11/50 current_auc = 0.9
User 17895 AUC after training: 0.9
User 17895 does not improve AUC. Reverting changes.
Training on augumented user 115326 12/50 current_auc = 0.9
User 115326 AUC after training: 0.9
User 115326 does not improve AUC. Reverting changes.
Training on augumented user 25202 13/50 current_auc = 0.9
User 25202 AUC after training: 0.9
User 25202 does not improve AUC. Reverting changes.
Training on augumented user 134296 14/50 current_auc = 0.9
User 134296 AUC after training: 0.9
User 134296 does not improve AUC. Reverting changes.
Training on augumented user 77190 15/50 current_auc = 0.9
User 77190 AUC after training: 0.9
User 77190 does not improve AUC. Reverting changes.
Training on augumented user 44485 16/50 current_auc = 0.9
User 44485 AUC after training: 0.9
User 44485 does not improve AUC. Reverting changes.
Training on augumented user 3560 17/50 current_auc = 0.9
User 3560 AUC after training: 0.9
User 3560 does not improve AUC. Reverting changes.
Training on augumented user 73511 18/50 current_auc = 0.9
User 73511 AUC after training: 0.9
User 73511 does not improve AUC. Reverting changes.
Training on augumented user 72882 19/50 current_auc = 0.9
User 72882 AUC after training: 0.9
User 72882 does not improve AUC. Reverting changes.
Training on augumented user 40229 20/50 current_auc = 0.9
User 40229 AUC after training: 0.9
User 40229 does not improve AUC. Reverting changes.
Training on augumented user 21012 21/50 current_auc = 0.9
User 21012 AUC after training: 0.9
User 21012 does not improve AUC. Reverting changes.
Training on augumented user 110726 22/50 current_auc = 0.9
User 110726 AUC after training: 0.9
User 110726 does not improve AUC. Reverting changes.
Training on augumented user 7205 23/50 current_auc = 0.9
User 7205 AUC after training: 0.9
User 7205 does not improve AUC. Reverting changes.
Training on augumented user 43671 24/50 current_auc = 0.9
User 43671 AUC after training: 0.9
User 43671 does not improve AUC. Reverting changes.
Training on augumented user 135373 25/50 current_auc = 0.9
User 135373 AUC after training: 0.9
User 135373 does not improve AUC. Reverting changes.
Training on augumented user 90521 26/50 current_auc = 0.9
User 90521 AUC after training: 0.9
User 90521 does not improve AUC. Reverting changes.
Training on augumented user 35198 27/50 current_auc = 0.9
User 35198 AUC after training: 0.9
User 35198 does not improve AUC. Reverting changes.
Training on augumented user 102480 28/50 current_auc = 0.9
User 102480 AUC after training: 0.9
User 102480 does not improve AUC. Reverting changes.
Training on augumented user 108288 29/50 current_auc = 0.9
User 108288 AUC after training: 0.9
User 108288 does not improve AUC. Reverting changes.
Training on augumented user 125357 30/50 current_auc = 0.9
User 125357 AUC after training: 0.9
User 125357 does not improve AUC. Reverting changes.
Training on augumented user 54579 31/50 current_auc = 0.9
User 54579 AUC after training: 0.9
User 54579 does not improve AUC. Reverting changes.
Training on augumented user 10746 32/50 current_auc = 0.9
User 10746 AUC after training: 0.9
User 10746 does not improve AUC. Reverting changes.
Training on augumented user 125117 33/50 current_auc = 0.9
User 125117 AUC after training: 0.9
User 125117 does not improve AUC. Reverting changes.
Training on augumented user 102268 34/50 current_auc = 0.9
User 102268 AUC after training: 0.9
User 102268 does not improve AUC. Reverting changes.
Training on augumented user 115418 35/50 current_auc = 0.9
User 115418 AUC after training: 0.9
User 115418 does not improve AUC. Reverting changes.
Training on augumented user 75672 36/50 current_auc = 0.9
User 75672 AUC after training: 0.9
User 75672 does not improve AUC. Reverting changes.
Training on augumented user 22372 37/50 current_auc = 0.9
User 22372 AUC after training: 0.9
User 22372 does not improve AUC. Reverting changes.
Training on augumented user 137480 38/50 current_auc = 0.9
User 137480 AUC after training: 0.9
User 137480 does not improve AUC. Reverting changes.
Training on augumented user 71519 39/50 current_auc = 0.9
User 71519 AUC after training: 0.9
User 71519 does not improve AUC. Reverting changes.
Training on augumented user 98411 40/50 current_auc = 0.9
User 98411 AUC after training: 0.9
User 98411 does not improve AUC. Reverting changes.
Training on augumented user 96236 41/50 current_auc = 0.9
User 96236 AUC after training: 0.9
User 96236 does not improve AUC. Reverting changes.
Training on augumented user 102718 42/50 current_auc = 0.9
User 102718 AUC after training: 0.9
User 102718 does not improve AUC. Reverting changes.
Training on augumented user 107191 43/50 current_auc = 0.9
User 107191 AUC after training: 0.9
User 107191 does not improve AUC. Reverting changes.
Training on augumented user 52903 44/50 current_auc = 0.9
User 52903 AUC after training: 0.9
User 52903 does not improve AUC. Reverting changes.
Training on augumented user 32118 45/50 current_auc = 0.9
User 32118 AUC after training: 0.9
User 32118 does not improve AUC. Reverting changes.
Training on augumented user 57528 46/50 current_auc = 0.9
User 57528 AUC after training: 0.9
User 57528 does not improve AUC. Reverting changes.
Training on augumented user 30583 47/50 current_auc = 0.9
User 30583 AUC after training: 0.9
User 30583 does not improve AUC. Reverting changes.
Training on augumented user 105641 48/50 current_auc = 0.9
User 105641 AUC after training: 0.9
User 105641 does not improve AUC. Reverting changes.
Training on augumented user 50322 49/50 current_auc = 0.9
User 50322 AUC after training: 0.9
User 50322 does not improve AUC. Reverting changes.
[2024-12-02 19:59:48.530743] start test user 130784 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:48.949286] start test user 130784 261/567 recall augumented users by random, augumented_users = [37227, 25526, 30107, 72647, 74526, 43827, 37069, 72285, 69661, 5661, 93744, 117733, 13191, 111673, 128787, 117165, 28345, 7469, 62833, 28505, 107239, 105916, 53400, 80396, 23049, 94966, 137188, 109390, 78308, 37389, 48362, 19664, 57355, 87932, 123830, 46138, 78475, 102869, 87659, 29949, 11770, 72611, 77451, 41336, 53452, 106844, 62380, 61470, 6191, 80247]
[2024-12-02 19:59:48.963267] user = 130784 Cloud 261/567
[2024-12-02 19:59:48.976777] user = 130784 Local 261/567
[2024-12-02 19:59:49.033370] user = 130784 Local+ 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:50.995327] user = 130784 MPDA- 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6197916666666666
Training on augumented user 37227 0/50 current_auc = 0.6197916666666666
User 37227 AUC after training: 0.6177662037037037
User 37227 does not improve AUC. Reverting changes.
Training on augumented user 25526 1/50 current_auc = 0.6197916666666666
User 25526 AUC after training: 0.6203703703703703
User 25526 improves AUC. Keeping the model.
Training on augumented user 30107 2/50 current_auc = 0.6203703703703703
User 30107 AUC after training: 0.6183449074074074
User 30107 does not improve AUC. Reverting changes.
Training on augumented user 72647 3/50 current_auc = 0.6203703703703703
User 72647 AUC after training: 0.619212962962963
User 72647 does not improve AUC. Reverting changes.
Training on augumented user 74526 4/50 current_auc = 0.6203703703703703
User 74526 AUC after training: 0.6197916666666666
User 74526 does not improve AUC. Reverting changes.
Training on augumented user 43827 5/50 current_auc = 0.6203703703703703
User 43827 AUC after training: 0.6197916666666666
User 43827 does not improve AUC. Reverting changes.
Training on augumented user 37069 6/50 current_auc = 0.6203703703703703
User 37069 AUC after training: 0.6183449074074074
User 37069 does not improve AUC. Reverting changes.
Training on augumented user 72285 7/50 current_auc = 0.6203703703703703
User 72285 AUC after training: 0.6200810185185185
User 72285 does not improve AUC. Reverting changes.
Training on augumented user 69661 8/50 current_auc = 0.6203703703703703
User 69661 AUC after training: 0.6209490740740741
User 69661 improves AUC. Keeping the model.
Training on augumented user 5661 9/50 current_auc = 0.6209490740740741
User 5661 AUC after training: 0.6203703703703703
User 5661 does not improve AUC. Reverting changes.
Training on augumented user 93744 10/50 current_auc = 0.6209490740740741
User 93744 AUC after training: 0.6197916666666667
User 93744 does not improve AUC. Reverting changes.
Training on augumented user 117733 11/50 current_auc = 0.6209490740740741
User 117733 AUC after training: 0.6209490740740741
User 117733 does not improve AUC. Reverting changes.
Training on augumented user 13191 12/50 current_auc = 0.6209490740740741
User 13191 AUC after training: 0.6197916666666667
User 13191 does not improve AUC. Reverting changes.
Training on augumented user 111673 13/50 current_auc = 0.6209490740740741
User 111673 AUC after training: 0.6197916666666666
User 111673 does not improve AUC. Reverting changes.
Training on augumented user 128787 14/50 current_auc = 0.6209490740740741
User 128787 AUC after training: 0.6209490740740741
User 128787 does not improve AUC. Reverting changes.
Training on augumented user 117165 15/50 current_auc = 0.6209490740740741
User 117165 AUC after training: 0.6203703703703703
User 117165 does not improve AUC. Reverting changes.
Training on augumented user 28345 16/50 current_auc = 0.6209490740740741
User 28345 AUC after training: 0.6183449074074074
User 28345 does not improve AUC. Reverting changes.
Training on augumented user 7469 17/50 current_auc = 0.6209490740740741
User 7469 AUC after training: 0.6174768518518519
User 7469 does not improve AUC. Reverting changes.
Training on augumented user 62833 18/50 current_auc = 0.6209490740740741
User 62833 AUC after training: 0.6195023148148148
User 62833 does not improve AUC. Reverting changes.
Training on augumented user 28505 19/50 current_auc = 0.6209490740740741
User 28505 AUC after training: 0.6189236111111112
User 28505 does not improve AUC. Reverting changes.
Training on augumented user 107239 20/50 current_auc = 0.6209490740740741
User 107239 AUC after training: 0.6203703703703703
User 107239 does not improve AUC. Reverting changes.
Training on augumented user 105916 21/50 current_auc = 0.6209490740740741
User 105916 AUC after training: 0.6197916666666666
User 105916 does not improve AUC. Reverting changes.
Training on augumented user 53400 22/50 current_auc = 0.6209490740740741
User 53400 AUC after training: 0.6203703703703703
User 53400 does not improve AUC. Reverting changes.
Training on augumented user 80396 23/50 current_auc = 0.6209490740740741
User 80396 AUC after training: 0.6197916666666666
User 80396 does not improve AUC. Reverting changes.
Training on augumented user 23049 24/50 current_auc = 0.6209490740740741
User 23049 AUC after training: 0.6203703703703703
User 23049 does not improve AUC. Reverting changes.
Training on augumented user 94966 25/50 current_auc = 0.6209490740740741
User 94966 AUC after training: 0.619212962962963
User 94966 does not improve AUC. Reverting changes.
Training on augumented user 137188 26/50 current_auc = 0.6209490740740741
User 137188 AUC after training: 0.6197916666666666
User 137188 does not improve AUC. Reverting changes.
Training on augumented user 109390 27/50 current_auc = 0.6209490740740741
User 109390 AUC after training: 0.619212962962963
User 109390 does not improve AUC. Reverting changes.
Training on augumented user 78308 28/50 current_auc = 0.6209490740740741
User 78308 AUC after training: 0.6160300925925926
User 78308 does not improve AUC. Reverting changes.
Training on augumented user 37389 29/50 current_auc = 0.6209490740740741
User 37389 AUC after training: 0.6203703703703703
User 37389 does not improve AUC. Reverting changes.
Training on augumented user 48362 30/50 current_auc = 0.6209490740740741
User 48362 AUC after training: 0.6197916666666666
User 48362 does not improve AUC. Reverting changes.
Training on augumented user 19664 31/50 current_auc = 0.6209490740740741
User 19664 AUC after training: 0.6183449074074074
User 19664 does not improve AUC. Reverting changes.
Training on augumented user 57355 32/50 current_auc = 0.6209490740740741
User 57355 AUC after training: 0.6174768518518519
User 57355 does not improve AUC. Reverting changes.
Training on augumented user 87932 33/50 current_auc = 0.6209490740740741
User 87932 AUC after training: 0.6203703703703703
User 87932 does not improve AUC. Reverting changes.
Training on augumented user 123830 34/50 current_auc = 0.6209490740740741
User 123830 AUC after training: 0.6215277777777778
User 123830 improves AUC. Keeping the model.
Training on augumented user 46138 35/50 current_auc = 0.6215277777777778
User 46138 AUC after training: 0.6209490740740741
User 46138 does not improve AUC. Reverting changes.
Training on augumented user 78475 36/50 current_auc = 0.6215277777777778
User 78475 AUC after training: 0.6221064814814815
User 78475 improves AUC. Keeping the model.
Training on augumented user 102869 37/50 current_auc = 0.6221064814814815
User 102869 AUC after training: 0.6209490740740741
User 102869 does not improve AUC. Reverting changes.
Training on augumented user 87659 38/50 current_auc = 0.6221064814814815
User 87659 AUC after training: 0.6215277777777778
User 87659 does not improve AUC. Reverting changes.
Training on augumented user 29949 39/50 current_auc = 0.6221064814814815
User 29949 AUC after training: 0.6209490740740741
User 29949 does not improve AUC. Reverting changes.
Training on augumented user 11770 40/50 current_auc = 0.6221064814814815
User 11770 AUC after training: 0.6209490740740741
User 11770 does not improve AUC. Reverting changes.
Training on augumented user 72611 41/50 current_auc = 0.6221064814814815
User 72611 AUC after training: 0.6186342592592592
User 72611 does not improve AUC. Reverting changes.
Training on augumented user 77451 42/50 current_auc = 0.6221064814814815
User 77451 AUC after training: 0.6189236111111112
User 77451 does not improve AUC. Reverting changes.
Training on augumented user 41336 43/50 current_auc = 0.6221064814814815
User 41336 AUC after training: 0.6209490740740741
User 41336 does not improve AUC. Reverting changes.
Training on augumented user 53452 44/50 current_auc = 0.6221064814814815
User 53452 AUC after training: 0.6203703703703703
User 53452 does not improve AUC. Reverting changes.
Training on augumented user 106844 45/50 current_auc = 0.6221064814814815
User 106844 AUC after training: 0.6212384259259259
User 106844 does not improve AUC. Reverting changes.
Training on augumented user 62380 46/50 current_auc = 0.6221064814814815
User 62380 AUC after training: 0.6209490740740741
User 62380 does not improve AUC. Reverting changes.
Training on augumented user 61470 47/50 current_auc = 0.6221064814814815
User 61470 AUC after training: 0.6226851851851851
User 61470 improves AUC. Keeping the model.
Training on augumented user 6191 48/50 current_auc = 0.6226851851851851
User 6191 AUC after training: 0.6221064814814814
User 6191 does not improve AUC. Reverting changes.
Training on augumented user 80247 49/50 current_auc = 0.6226851851851851
User 80247 AUC after training: 0.6221064814814815
User 80247 does not improve AUC. Reverting changes.
[2024-12-02 20:00:20.127234] start test user 130795 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:20.626977] start test user 130795 262/567 recall augumented users by random, augumented_users = [11745, 136914, 111138, 125111, 46583, 77415, 3125, 70423, 48181, 82940, 100416, 121611, 53125, 113946, 83660, 111861, 130922, 51068, 100186, 90760, 53782, 74957, 126156, 6855, 132514, 15189, 115531, 74309, 134789, 106970, 132070, 137418, 1911, 42933, 24647, 79891, 136815, 50216, 129748, 105747, 96966, 31227, 106329, 48907, 49878, 80205, 126583, 23879, 6463, 70442]
[2024-12-02 20:00:20.642404] user = 130795 Cloud 262/567
[2024-12-02 20:00:20.659605] user = 130795 Local 262/567
[2024-12-02 20:00:20.755998] user = 130795 Local+ 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:23.335998] user = 130795 MPDA- 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.556341673856773
Training on augumented user 11745 0/50 current_auc = 0.556341673856773
User 11745 AUC after training: 0.556514236410699
User 11745 improves AUC. Keeping the model.
Training on augumented user 136914 1/50 current_auc = 0.556514236410699
User 136914 AUC after training: 0.5561691113028473
User 136914 does not improve AUC. Reverting changes.
Training on augumented user 111138 2/50 current_auc = 0.556514236410699
User 111138 AUC after training: 0.556341673856773
User 111138 does not improve AUC. Reverting changes.
Training on augumented user 125111 3/50 current_auc = 0.556514236410699
User 125111 AUC after training: 0.5565142364106989
User 125111 does not improve AUC. Reverting changes.
Training on augumented user 46583 4/50 current_auc = 0.556514236410699
User 46583 AUC after training: 0.5553062985332183
User 46583 does not improve AUC. Reverting changes.
Training on augumented user 77415 5/50 current_auc = 0.556514236410699
User 77415 AUC after training: 0.5539257981018119
User 77415 does not improve AUC. Reverting changes.
Training on augumented user 3125 6/50 current_auc = 0.556514236410699
User 3125 AUC after training: 0.5573770491803278
User 3125 improves AUC. Keeping the model.
Training on augumented user 70423 7/50 current_auc = 0.5573770491803278
User 70423 AUC after training: 0.5572044866264021
User 70423 does not improve AUC. Reverting changes.
Training on augumented user 48181 8/50 current_auc = 0.5573770491803278
User 48181 AUC after training: 0.5561691113028473
User 48181 does not improve AUC. Reverting changes.
Training on augumented user 82940 9/50 current_auc = 0.5573770491803278
User 82940 AUC after training: 0.5558239861949957
User 82940 does not improve AUC. Reverting changes.
Training on augumented user 100416 10/50 current_auc = 0.5573770491803278
User 100416 AUC after training: 0.5569456427955134
User 100416 does not improve AUC. Reverting changes.
Training on augumented user 121611 11/50 current_auc = 0.5573770491803278
User 121611 AUC after training: 0.5582398619499568
User 121611 improves AUC. Keeping the model.
Training on augumented user 53125 12/50 current_auc = 0.5582398619499568
User 53125 AUC after training: 0.5551337359792925
User 53125 does not improve AUC. Reverting changes.
Training on augumented user 113946 13/50 current_auc = 0.5582398619499568
User 113946 AUC after training: 0.5540983606557377
User 113946 does not improve AUC. Reverting changes.
Training on augumented user 83660 14/50 current_auc = 0.5582398619499568
User 83660 AUC after training: 0.5586712683347713
User 83660 improves AUC. Keeping the model.
Training on augumented user 111861 15/50 current_auc = 0.5586712683347713
User 111861 AUC after training: 0.5572044866264021
User 111861 does not improve AUC. Reverting changes.
Training on augumented user 130922 16/50 current_auc = 0.5586712683347713
User 130922 AUC after training: 0.556514236410699
User 130922 does not improve AUC. Reverting changes.
Training on augumented user 51068 17/50 current_auc = 0.5586712683347713
User 51068 AUC after training: 0.5592752372735117
User 51068 improves AUC. Keeping the model.
Training on augumented user 100186 18/50 current_auc = 0.5592752372735117
User 100186 AUC after training: 0.5618636755823986
User 100186 improves AUC. Keeping the model.
Training on augumented user 90760 19/50 current_auc = 0.5618636755823986
User 90760 AUC after training: 0.559016393442623
User 90760 does not improve AUC. Reverting changes.
Training on augumented user 53782 20/50 current_auc = 0.5618636755823986
User 53782 AUC after training: 0.5604831751509922
User 53782 does not improve AUC. Reverting changes.
Training on augumented user 74957 21/50 current_auc = 0.5618636755823986
User 74957 AUC after training: 0.5611734253666955
User 74957 does not improve AUC. Reverting changes.
Training on augumented user 126156 22/50 current_auc = 0.5618636755823986
User 126156 AUC after training: 0.559792924935289
User 126156 does not improve AUC. Reverting changes.
Training on augumented user 6855 23/50 current_auc = 0.5618636755823986
User 6855 AUC after training: 0.5591026747195859
User 6855 does not improve AUC. Reverting changes.
Training on augumented user 132514 24/50 current_auc = 0.5618636755823986
User 132514 AUC after training: 0.5613459879206212
User 132514 does not improve AUC. Reverting changes.
Training on augumented user 15189 25/50 current_auc = 0.5618636755823986
User 15189 AUC after training: 0.5594477998274374
User 15189 does not improve AUC. Reverting changes.
Training on augumented user 115531 26/50 current_auc = 0.5618636755823986
User 115531 AUC after training: 0.5573770491803278
User 115531 does not improve AUC. Reverting changes.
Training on augumented user 74309 27/50 current_auc = 0.5618636755823986
User 74309 AUC after training: 0.5611734253666955
User 74309 does not improve AUC. Reverting changes.
Training on augumented user 134789 28/50 current_auc = 0.5618636755823986
User 134789 AUC after training: 0.5584124245038827
User 134789 does not improve AUC. Reverting changes.
Training on augumented user 106970 29/50 current_auc = 0.5618636755823986
User 106970 AUC after training: 0.5604831751509922
User 106970 does not improve AUC. Reverting changes.
Training on augumented user 132070 30/50 current_auc = 0.5618636755823986
User 132070 AUC after training: 0.5577221742881794
User 132070 does not improve AUC. Reverting changes.
Training on augumented user 137418 31/50 current_auc = 0.5618636755823986
User 137418 AUC after training: 0.5582398619499569
User 137418 does not improve AUC. Reverting changes.
Training on augumented user 1911 32/50 current_auc = 0.5618636755823986
User 1911 AUC after training: 0.5611734253666955
User 1911 does not improve AUC. Reverting changes.
Training on augumented user 42933 33/50 current_auc = 0.5618636755823986
User 42933 AUC after training: 0.5592752372735116
User 42933 does not improve AUC. Reverting changes.
Training on augumented user 24647 34/50 current_auc = 0.5618636755823986
User 24647 AUC after training: 0.5603106125970664
User 24647 does not improve AUC. Reverting changes.
Training on augumented user 79891 35/50 current_auc = 0.5618636755823986
User 79891 AUC after training: 0.5618636755823986
User 79891 does not improve AUC. Reverting changes.
Training on augumented user 136815 36/50 current_auc = 0.5618636755823986
User 136815 AUC after training: 0.5603106125970664
User 136815 does not improve AUC. Reverting changes.
Training on augumented user 50216 37/50 current_auc = 0.5618636755823986
User 50216 AUC after training: 0.5584124245038826
User 50216 does not improve AUC. Reverting changes.
Training on augumented user 129748 38/50 current_auc = 0.5618636755823986
User 129748 AUC after training: 0.5606557377049181
User 129748 does not improve AUC. Reverting changes.
Training on augumented user 105747 39/50 current_auc = 0.5618636755823986
User 105747 AUC after training: 0.5587575496117343
User 105747 does not improve AUC. Reverting changes.
Training on augumented user 96966 40/50 current_auc = 0.5618636755823986
User 96966 AUC after training: 0.5592752372735117
User 96966 does not improve AUC. Reverting changes.
Training on augumented user 31227 41/50 current_auc = 0.5618636755823986
User 31227 AUC after training: 0.5601380500431407
User 31227 does not improve AUC. Reverting changes.
Training on augumented user 106329 42/50 current_auc = 0.5618636755823986
User 106329 AUC after training: 0.5596203623813633
User 106329 does not improve AUC. Reverting changes.
Training on augumented user 48907 43/50 current_auc = 0.5618636755823986
User 48907 AUC after training: 0.5592752372735117
User 48907 does not improve AUC. Reverting changes.
Training on augumented user 49878 44/50 current_auc = 0.5618636755823986
User 49878 AUC after training: 0.5596203623813633
User 49878 does not improve AUC. Reverting changes.
Training on augumented user 80205 45/50 current_auc = 0.5618636755823986
User 80205 AUC after training: 0.5594477998274374
User 80205 does not improve AUC. Reverting changes.
Training on augumented user 126583 46/50 current_auc = 0.5618636755823986
User 126583 AUC after training: 0.5596203623813631
User 126583 does not improve AUC. Reverting changes.
Training on augumented user 23879 47/50 current_auc = 0.5618636755823986
User 23879 AUC after training: 0.5594477998274374
User 23879 does not improve AUC. Reverting changes.
Training on augumented user 6463 48/50 current_auc = 0.5618636755823986
User 6463 AUC after training: 0.5585849870578085
User 6463 does not improve AUC. Reverting changes.
Training on augumented user 70442 49/50 current_auc = 0.5618636755823986
User 70442 AUC after training: 0.55893011216566
User 70442 does not improve AUC. Reverting changes.
[2024-12-02 20:00:57.873612] start test user 130799 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:58.621059] start test user 130799 263/567 recall augumented users by random, augumented_users = [41669, 93883, 67842, 76570, 43656, 55924, 21458, 7784, 17594, 26303, 14253, 94853, 33164, 21807, 60852, 77303, 60086, 6606, 131306, 69156, 44932, 24919, 20781, 13988, 120790, 60503, 15883, 58798, 59711, 59880, 19450, 6128, 22062, 135794, 57568, 56884, 116819, 7006, 106560, 9249, 107384, 26406, 85397, 80344, 35390, 35184, 20464, 120299, 29810, 61054]
[2024-12-02 20:00:58.637734] user = 130799 Cloud 263/567
[2024-12-02 20:00:58.649712] user = 130799 Local 263/567
[2024-12-02 20:00:58.740721] user = 130799 Local+ 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:01.214861] user = 130799 MPDA- 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.646551724137931
Training on augumented user 41669 0/50 current_auc = 0.646551724137931
User 41669 AUC after training: 0.6508620689655172
User 41669 improves AUC. Keeping the model.
Training on augumented user 93883 1/50 current_auc = 0.6508620689655172
User 93883 AUC after training: 0.6508620689655172
User 93883 does not improve AUC. Reverting changes.
Training on augumented user 67842 2/50 current_auc = 0.6508620689655172
User 67842 AUC after training: 0.6508620689655172
User 67842 does not improve AUC. Reverting changes.
Training on augumented user 76570 3/50 current_auc = 0.6508620689655172
User 76570 AUC after training: 0.6508620689655172
User 76570 does not improve AUC. Reverting changes.
Training on augumented user 43656 4/50 current_auc = 0.6508620689655172
User 43656 AUC after training: 0.6508620689655172
User 43656 does not improve AUC. Reverting changes.
Training on augumented user 55924 5/50 current_auc = 0.6508620689655172
User 55924 AUC after training: 0.6508620689655172
User 55924 does not improve AUC. Reverting changes.
Training on augumented user 21458 6/50 current_auc = 0.6508620689655172
User 21458 AUC after training: 0.6508620689655172
User 21458 does not improve AUC. Reverting changes.
Training on augumented user 7784 7/50 current_auc = 0.6508620689655172
User 7784 AUC after training: 0.646551724137931
User 7784 does not improve AUC. Reverting changes.
Training on augumented user 17594 8/50 current_auc = 0.6508620689655172
User 17594 AUC after training: 0.6508620689655172
User 17594 does not improve AUC. Reverting changes.
Training on augumented user 26303 9/50 current_auc = 0.6508620689655172
User 26303 AUC after training: 0.6508620689655172
User 26303 does not improve AUC. Reverting changes.
Training on augumented user 14253 10/50 current_auc = 0.6508620689655172
User 14253 AUC after training: 0.6508620689655172
User 14253 does not improve AUC. Reverting changes.
Training on augumented user 94853 11/50 current_auc = 0.6508620689655172
User 94853 AUC after training: 0.6508620689655172
User 94853 does not improve AUC. Reverting changes.
Training on augumented user 33164 12/50 current_auc = 0.6508620689655172
User 33164 AUC after training: 0.646551724137931
User 33164 does not improve AUC. Reverting changes.
Training on augumented user 21807 13/50 current_auc = 0.6508620689655172
User 21807 AUC after training: 0.6508620689655172
User 21807 does not improve AUC. Reverting changes.
Training on augumented user 60852 14/50 current_auc = 0.6508620689655172
User 60852 AUC after training: 0.6508620689655172
User 60852 does not improve AUC. Reverting changes.
Training on augumented user 77303 15/50 current_auc = 0.6508620689655172
User 77303 AUC after training: 0.6508620689655172
User 77303 does not improve AUC. Reverting changes.
Training on augumented user 60086 16/50 current_auc = 0.6508620689655172
User 60086 AUC after training: 0.6508620689655172
User 60086 does not improve AUC. Reverting changes.
Training on augumented user 6606 17/50 current_auc = 0.6508620689655172
User 6606 AUC after training: 0.6508620689655172
User 6606 does not improve AUC. Reverting changes.
Training on augumented user 131306 18/50 current_auc = 0.6508620689655172
User 131306 AUC after training: 0.6508620689655172
User 131306 does not improve AUC. Reverting changes.
Training on augumented user 69156 19/50 current_auc = 0.6508620689655172
User 69156 AUC after training: 0.6508620689655172
User 69156 does not improve AUC. Reverting changes.
Training on augumented user 44932 20/50 current_auc = 0.6508620689655172
User 44932 AUC after training: 0.6508620689655172
User 44932 does not improve AUC. Reverting changes.
Training on augumented user 24919 21/50 current_auc = 0.6508620689655172
User 24919 AUC after training: 0.6508620689655172
User 24919 does not improve AUC. Reverting changes.
Training on augumented user 20781 22/50 current_auc = 0.6508620689655172
User 20781 AUC after training: 0.6508620689655172
User 20781 does not improve AUC. Reverting changes.
Training on augumented user 13988 23/50 current_auc = 0.6508620689655172
User 13988 AUC after training: 0.6508620689655172
User 13988 does not improve AUC. Reverting changes.
Training on augumented user 120790 24/50 current_auc = 0.6508620689655172
User 120790 AUC after training: 0.6508620689655172
User 120790 does not improve AUC. Reverting changes.
Training on augumented user 60503 25/50 current_auc = 0.6508620689655172
User 60503 AUC after training: 0.6508620689655172
User 60503 does not improve AUC. Reverting changes.
Training on augumented user 15883 26/50 current_auc = 0.6508620689655172
User 15883 AUC after training: 0.6508620689655172
User 15883 does not improve AUC. Reverting changes.
Training on augumented user 58798 27/50 current_auc = 0.6508620689655172
User 58798 AUC after training: 0.6508620689655172
User 58798 does not improve AUC. Reverting changes.
Training on augumented user 59711 28/50 current_auc = 0.6508620689655172
User 59711 AUC after training: 0.6422413793103449
User 59711 does not improve AUC. Reverting changes.
Training on augumented user 59880 29/50 current_auc = 0.6508620689655172
User 59880 AUC after training: 0.6508620689655172
User 59880 does not improve AUC. Reverting changes.
Training on augumented user 19450 30/50 current_auc = 0.6508620689655172
User 19450 AUC after training: 0.6508620689655172
User 19450 does not improve AUC. Reverting changes.
Training on augumented user 6128 31/50 current_auc = 0.6508620689655172
User 6128 AUC after training: 0.6508620689655172
User 6128 does not improve AUC. Reverting changes.
Training on augumented user 22062 32/50 current_auc = 0.6508620689655172
User 22062 AUC after training: 0.6508620689655172
User 22062 does not improve AUC. Reverting changes.
Training on augumented user 135794 33/50 current_auc = 0.6508620689655172
User 135794 AUC after training: 0.6508620689655172
User 135794 does not improve AUC. Reverting changes.
Training on augumented user 57568 34/50 current_auc = 0.6508620689655172
User 57568 AUC after training: 0.6508620689655172
User 57568 does not improve AUC. Reverting changes.
Training on augumented user 56884 35/50 current_auc = 0.6508620689655172
User 56884 AUC after training: 0.6508620689655172
User 56884 does not improve AUC. Reverting changes.
Training on augumented user 116819 36/50 current_auc = 0.6508620689655172
User 116819 AUC after training: 0.6508620689655172
User 116819 does not improve AUC. Reverting changes.
Training on augumented user 7006 37/50 current_auc = 0.6508620689655172
User 7006 AUC after training: 0.6508620689655172
User 7006 does not improve AUC. Reverting changes.
Training on augumented user 106560 38/50 current_auc = 0.6508620689655172
User 106560 AUC after training: 0.6508620689655172
User 106560 does not improve AUC. Reverting changes.
Training on augumented user 9249 39/50 current_auc = 0.6508620689655172
User 9249 AUC after training: 0.6508620689655172
User 9249 does not improve AUC. Reverting changes.
Training on augumented user 107384 40/50 current_auc = 0.6508620689655172
User 107384 AUC after training: 0.646551724137931
User 107384 does not improve AUC. Reverting changes.
Training on augumented user 26406 41/50 current_auc = 0.6508620689655172
User 26406 AUC after training: 0.6508620689655172
User 26406 does not improve AUC. Reverting changes.
Training on augumented user 85397 42/50 current_auc = 0.6508620689655172
User 85397 AUC after training: 0.6508620689655172
User 85397 does not improve AUC. Reverting changes.
Training on augumented user 80344 43/50 current_auc = 0.6508620689655172
User 80344 AUC after training: 0.6508620689655172
User 80344 does not improve AUC. Reverting changes.
Training on augumented user 35390 44/50 current_auc = 0.6508620689655172
User 35390 AUC after training: 0.6508620689655172
User 35390 does not improve AUC. Reverting changes.
Training on augumented user 35184 45/50 current_auc = 0.6508620689655172
User 35184 AUC after training: 0.646551724137931
User 35184 does not improve AUC. Reverting changes.
Training on augumented user 20464 46/50 current_auc = 0.6508620689655172
User 20464 AUC after training: 0.6508620689655172
User 20464 does not improve AUC. Reverting changes.
Training on augumented user 120299 47/50 current_auc = 0.6508620689655172
User 120299 AUC after training: 0.6508620689655172
User 120299 does not improve AUC. Reverting changes.
Training on augumented user 29810 48/50 current_auc = 0.6508620689655172
User 29810 AUC after training: 0.6508620689655172
User 29810 does not improve AUC. Reverting changes.
Training on augumented user 61054 49/50 current_auc = 0.6508620689655172
User 61054 AUC after training: 0.646551724137931
User 61054 does not improve AUC. Reverting changes.
[2024-12-02 20:01:32.599498] start test user 130812 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:33.002225] start test user 130812 264/567 recall augumented users by random, augumented_users = [58781, 65177, 4799, 88563, 126734, 77588, 47518, 8446, 59366, 28994, 121113, 69231, 82748, 103556, 24908, 18171, 51636, 9970, 114944, 102404, 123692, 87234, 124546, 71227, 66935, 82535, 131740, 78751, 133288, 97485, 62453, 29336, 15034, 41064, 119536, 118614, 74225, 82452, 46742, 92960, 89574, 123095, 57107, 26145, 83609, 123808, 120295, 4094, 76513, 22881]
[2024-12-02 20:01:33.017823] user = 130812 Cloud 264/567
[2024-12-02 20:01:33.034518] user = 130812 Local 264/567
[2024-12-02 20:01:33.081427] user = 130812 Local+ 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:34.557479] user = 130812 MPDA- 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.681511746680286
Training on augumented user 58781 0/50 current_auc = 0.681511746680286
User 58781 AUC after training: 0.6817160367722166
User 58781 improves AUC. Keeping the model.
Training on augumented user 65177 1/50 current_auc = 0.6817160367722166
User 65177 AUC after training: 0.6817160367722166
User 65177 does not improve AUC. Reverting changes.
Training on augumented user 4799 2/50 current_auc = 0.6817160367722166
User 4799 AUC after training: 0.6823289070480081
User 4799 improves AUC. Keeping the model.
Training on augumented user 88563 3/50 current_auc = 0.6823289070480081
User 88563 AUC after training: 0.6829417773237998
User 88563 improves AUC. Keeping the model.
Training on augumented user 126734 4/50 current_auc = 0.6829417773237998
User 126734 AUC after training: 0.6819203268641472
User 126734 does not improve AUC. Reverting changes.
Training on augumented user 77588 5/50 current_auc = 0.6829417773237998
User 77588 AUC after training: 0.6811031664964249
User 77588 does not improve AUC. Reverting changes.
Training on augumented user 47518 6/50 current_auc = 0.6829417773237998
User 47518 AUC after training: 0.6808988764044943
User 47518 does not improve AUC. Reverting changes.
Training on augumented user 8446 7/50 current_auc = 0.6829417773237998
User 8446 AUC after training: 0.6827374872318692
User 8446 does not improve AUC. Reverting changes.
Training on augumented user 59366 8/50 current_auc = 0.6829417773237998
User 59366 AUC after training: 0.6831460674157304
User 59366 improves AUC. Keeping the model.
Training on augumented user 28994 9/50 current_auc = 0.6831460674157304
User 28994 AUC after training: 0.6839632277834524
User 28994 improves AUC. Keeping the model.
Training on augumented user 121113 10/50 current_auc = 0.6839632277834524
User 121113 AUC after training: 0.6829417773237998
User 121113 does not improve AUC. Reverting changes.
Training on augumented user 69231 11/50 current_auc = 0.6839632277834524
User 69231 AUC after training: 0.6831460674157303
User 69231 does not improve AUC. Reverting changes.
Training on augumented user 82748 12/50 current_auc = 0.6839632277834524
User 82748 AUC after training: 0.6841675178753831
User 82748 improves AUC. Keeping the model.
Training on augumented user 103556 13/50 current_auc = 0.6841675178753831
User 103556 AUC after training: 0.6829417773237998
User 103556 does not improve AUC. Reverting changes.
Training on augumented user 24908 14/50 current_auc = 0.6841675178753831
User 24908 AUC after training: 0.6839632277834525
User 24908 does not improve AUC. Reverting changes.
Training on augumented user 18171 15/50 current_auc = 0.6841675178753831
User 18171 AUC after training: 0.6831460674157304
User 18171 does not improve AUC. Reverting changes.
Training on augumented user 51636 16/50 current_auc = 0.6841675178753831
User 51636 AUC after training: 0.6831460674157304
User 51636 does not improve AUC. Reverting changes.
Training on augumented user 9970 17/50 current_auc = 0.6841675178753831
User 9970 AUC after training: 0.6843718079673136
User 9970 improves AUC. Keeping the model.
Training on augumented user 114944 18/50 current_auc = 0.6843718079673136
User 114944 AUC after training: 0.684167517875383
User 114944 does not improve AUC. Reverting changes.
Training on augumented user 102404 19/50 current_auc = 0.6843718079673136
User 102404 AUC after training: 0.6847803881511747
User 102404 improves AUC. Keeping the model.
Training on augumented user 123692 20/50 current_auc = 0.6847803881511747
User 123692 AUC after training: 0.6855975485188968
User 123692 improves AUC. Keeping the model.
Training on augumented user 87234 21/50 current_auc = 0.6855975485188968
User 87234 AUC after training: 0.6855975485188968
User 87234 does not improve AUC. Reverting changes.
Training on augumented user 124546 22/50 current_auc = 0.6855975485188968
User 124546 AUC after training: 0.6851889683350357
User 124546 does not improve AUC. Reverting changes.
Training on augumented user 71227 23/50 current_auc = 0.6855975485188968
User 71227 AUC after training: 0.6853932584269664
User 71227 does not improve AUC. Reverting changes.
Training on augumented user 66935 24/50 current_auc = 0.6855975485188968
User 66935 AUC after training: 0.683758937691522
User 66935 does not improve AUC. Reverting changes.
Training on augumented user 82535 25/50 current_auc = 0.6855975485188968
User 82535 AUC after training: 0.6858018386108273
User 82535 improves AUC. Keeping the model.
Training on augumented user 131740 26/50 current_auc = 0.6858018386108273
User 131740 AUC after training: 0.6855975485188968
User 131740 does not improve AUC. Reverting changes.
Training on augumented user 78751 27/50 current_auc = 0.6858018386108273
User 78751 AUC after training: 0.6847803881511747
User 78751 does not improve AUC. Reverting changes.
Training on augumented user 133288 28/50 current_auc = 0.6858018386108273
User 133288 AUC after training: 0.6847803881511747
User 133288 does not improve AUC. Reverting changes.
Training on augumented user 97485 29/50 current_auc = 0.6858018386108273
User 97485 AUC after training: 0.6847803881511747
User 97485 does not improve AUC. Reverting changes.
Training on augumented user 62453 30/50 current_auc = 0.6858018386108273
User 62453 AUC after training: 0.6847803881511747
User 62453 does not improve AUC. Reverting changes.
Training on augumented user 29336 31/50 current_auc = 0.6858018386108273
User 29336 AUC after training: 0.6845760980592441
User 29336 does not improve AUC. Reverting changes.
Training on augumented user 15034 32/50 current_auc = 0.6858018386108273
User 15034 AUC after training: 0.6847803881511747
User 15034 does not improve AUC. Reverting changes.
Training on augumented user 41064 33/50 current_auc = 0.6858018386108273
User 41064 AUC after training: 0.683758937691522
User 41064 does not improve AUC. Reverting changes.
Training on augumented user 119536 34/50 current_auc = 0.6858018386108273
User 119536 AUC after training: 0.6866189989785495
User 119536 improves AUC. Keeping the model.
Training on augumented user 118614 35/50 current_auc = 0.6866189989785495
User 118614 AUC after training: 0.6868232890704802
User 118614 improves AUC. Keeping the model.
Training on augumented user 74225 36/50 current_auc = 0.6868232890704802
User 74225 AUC after training: 0.686414708886619
User 74225 does not improve AUC. Reverting changes.
Training on augumented user 82452 37/50 current_auc = 0.6868232890704802
User 82452 AUC after training: 0.6862104187946885
User 82452 does not improve AUC. Reverting changes.
Training on augumented user 46742 38/50 current_auc = 0.6868232890704802
User 46742 AUC after training: 0.6862104187946885
User 46742 does not improve AUC. Reverting changes.
Training on augumented user 92960 39/50 current_auc = 0.6868232890704802
User 92960 AUC after training: 0.6853932584269663
User 92960 does not improve AUC. Reverting changes.
Training on augumented user 89574 40/50 current_auc = 0.6868232890704802
User 89574 AUC after training: 0.6868232890704801
User 89574 does not improve AUC. Reverting changes.
Training on augumented user 123095 41/50 current_auc = 0.6868232890704802
User 123095 AUC after training: 0.6839632277834525
User 123095 does not improve AUC. Reverting changes.
Training on augumented user 57107 42/50 current_auc = 0.6868232890704802
User 57107 AUC after training: 0.6847803881511747
User 57107 does not improve AUC. Reverting changes.
Training on augumented user 26145 43/50 current_auc = 0.6868232890704802
User 26145 AUC after training: 0.6827374872318693
User 26145 does not improve AUC. Reverting changes.
Training on augumented user 83609 44/50 current_auc = 0.6868232890704802
User 83609 AUC after training: 0.6868232890704801
User 83609 does not improve AUC. Reverting changes.
Training on augumented user 123808 45/50 current_auc = 0.6868232890704802
User 123808 AUC after training: 0.6868232890704801
User 123808 does not improve AUC. Reverting changes.
Training on augumented user 120295 46/50 current_auc = 0.6868232890704802
User 120295 AUC after training: 0.6866189989785496
User 120295 does not improve AUC. Reverting changes.
Training on augumented user 4094 47/50 current_auc = 0.6868232890704802
User 4094 AUC after training: 0.6864147088866189
User 4094 does not improve AUC. Reverting changes.
Training on augumented user 76513 48/50 current_auc = 0.6868232890704802
User 76513 AUC after training: 0.6864147088866189
User 76513 does not improve AUC. Reverting changes.
Training on augumented user 22881 49/50 current_auc = 0.6868232890704802
User 22881 AUC after training: 0.6851889683350357
User 22881 does not improve AUC. Reverting changes.
[2024-12-02 20:02:02.279890] start test user 130819 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:03.151956] start test user 130819 265/567 recall augumented users by random, augumented_users = [67266, 20726, 21911, 127162, 21603, 103740, 58739, 22812, 110307, 115578, 130036, 40842, 117239, 37648, 47079, 111617, 56913, 38727, 32535, 58304, 85952, 43371, 78511, 29607, 108161, 115379, 97641, 62097, 126141, 54369, 129008, 127, 112933, 81564, 67110, 118226, 56597, 4318, 55837, 14597, 85212, 3336, 16956, 52949, 109455, 135120, 61420, 27861, 123650, 39301]
[2024-12-02 20:02:03.173992] user = 130819 Cloud 265/567
[2024-12-02 20:02:03.183917] user = 130819 Local 265/567
[2024-12-02 20:02:03.425876] user = 130819 Local+ 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:06.075584] user = 130819 MPDA- 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5824175824175823
Training on augumented user 67266 0/50 current_auc = 0.5824175824175823
User 67266 AUC after training: 0.5824175824175823
User 67266 does not improve AUC. Reverting changes.
Training on augumented user 20726 1/50 current_auc = 0.5824175824175823
User 20726 AUC after training: 0.5824175824175823
User 20726 does not improve AUC. Reverting changes.
Training on augumented user 21911 2/50 current_auc = 0.5824175824175823
User 21911 AUC after training: 0.5824175824175823
User 21911 does not improve AUC. Reverting changes.
Training on augumented user 127162 3/50 current_auc = 0.5824175824175823
User 127162 AUC after training: 0.5824175824175823
User 127162 does not improve AUC. Reverting changes.
Training on augumented user 21603 4/50 current_auc = 0.5824175824175823
User 21603 AUC after training: 0.5824175824175823
User 21603 does not improve AUC. Reverting changes.
Training on augumented user 103740 5/50 current_auc = 0.5824175824175823
User 103740 AUC after training: 0.5824175824175823
User 103740 does not improve AUC. Reverting changes.
Training on augumented user 58739 6/50 current_auc = 0.5824175824175823
User 58739 AUC after training: 0.5824175824175823
User 58739 does not improve AUC. Reverting changes.
Training on augumented user 22812 7/50 current_auc = 0.5824175824175823
User 22812 AUC after training: 0.5824175824175823
User 22812 does not improve AUC. Reverting changes.
Training on augumented user 110307 8/50 current_auc = 0.5824175824175823
User 110307 AUC after training: 0.5824175824175823
User 110307 does not improve AUC. Reverting changes.
Training on augumented user 115578 9/50 current_auc = 0.5824175824175823
User 115578 AUC after training: 0.5824175824175823
User 115578 does not improve AUC. Reverting changes.
Training on augumented user 130036 10/50 current_auc = 0.5824175824175823
User 130036 AUC after training: 0.5824175824175823
User 130036 does not improve AUC. Reverting changes.
Training on augumented user 40842 11/50 current_auc = 0.5824175824175823
User 40842 AUC after training: 0.5824175824175823
User 40842 does not improve AUC. Reverting changes.
Training on augumented user 117239 12/50 current_auc = 0.5824175824175823
User 117239 AUC after training: 0.5824175824175823
User 117239 does not improve AUC. Reverting changes.
Training on augumented user 37648 13/50 current_auc = 0.5824175824175823
User 37648 AUC after training: 0.5824175824175823
User 37648 does not improve AUC. Reverting changes.
Training on augumented user 47079 14/50 current_auc = 0.5824175824175823
User 47079 AUC after training: 0.5824175824175823
User 47079 does not improve AUC. Reverting changes.
Training on augumented user 111617 15/50 current_auc = 0.5824175824175823
User 111617 AUC after training: 0.5714285714285714
User 111617 does not improve AUC. Reverting changes.
Training on augumented user 56913 16/50 current_auc = 0.5824175824175823
User 56913 AUC after training: 0.5824175824175823
User 56913 does not improve AUC. Reverting changes.
Training on augumented user 38727 17/50 current_auc = 0.5824175824175823
User 38727 AUC after training: 0.5824175824175823
User 38727 does not improve AUC. Reverting changes.
Training on augumented user 32535 18/50 current_auc = 0.5824175824175823
User 32535 AUC after training: 0.5824175824175823
User 32535 does not improve AUC. Reverting changes.
Training on augumented user 58304 19/50 current_auc = 0.5824175824175823
User 58304 AUC after training: 0.5824175824175823
User 58304 does not improve AUC. Reverting changes.
Training on augumented user 85952 20/50 current_auc = 0.5824175824175823
User 85952 AUC after training: 0.5824175824175823
User 85952 does not improve AUC. Reverting changes.
Training on augumented user 43371 21/50 current_auc = 0.5824175824175823
User 43371 AUC after training: 0.5824175824175823
User 43371 does not improve AUC. Reverting changes.
Training on augumented user 78511 22/50 current_auc = 0.5824175824175823
User 78511 AUC after training: 0.5824175824175823
User 78511 does not improve AUC. Reverting changes.
Training on augumented user 29607 23/50 current_auc = 0.5824175824175823
User 29607 AUC after training: 0.5824175824175823
User 29607 does not improve AUC. Reverting changes.
Training on augumented user 108161 24/50 current_auc = 0.5824175824175823
User 108161 AUC after training: 0.5824175824175823
User 108161 does not improve AUC. Reverting changes.
Training on augumented user 115379 25/50 current_auc = 0.5824175824175823
User 115379 AUC after training: 0.5824175824175823
User 115379 does not improve AUC. Reverting changes.
Training on augumented user 97641 26/50 current_auc = 0.5824175824175823
User 97641 AUC after training: 0.5824175824175823
User 97641 does not improve AUC. Reverting changes.
Training on augumented user 62097 27/50 current_auc = 0.5824175824175823
User 62097 AUC after training: 0.5824175824175823
User 62097 does not improve AUC. Reverting changes.
Training on augumented user 126141 28/50 current_auc = 0.5824175824175823
User 126141 AUC after training: 0.5824175824175823
User 126141 does not improve AUC. Reverting changes.
Training on augumented user 54369 29/50 current_auc = 0.5824175824175823
User 54369 AUC after training: 0.5824175824175823
User 54369 does not improve AUC. Reverting changes.
Training on augumented user 129008 30/50 current_auc = 0.5824175824175823
User 129008 AUC after training: 0.5824175824175823
User 129008 does not improve AUC. Reverting changes.
Training on augumented user 127 31/50 current_auc = 0.5824175824175823
User 127 AUC after training: 0.5824175824175823
User 127 does not improve AUC. Reverting changes.
Training on augumented user 112933 32/50 current_auc = 0.5824175824175823
User 112933 AUC after training: 0.5824175824175823
User 112933 does not improve AUC. Reverting changes.
Training on augumented user 81564 33/50 current_auc = 0.5824175824175823
User 81564 AUC after training: 0.5824175824175823
User 81564 does not improve AUC. Reverting changes.
Training on augumented user 67110 34/50 current_auc = 0.5824175824175823
User 67110 AUC after training: 0.5824175824175823
User 67110 does not improve AUC. Reverting changes.
Training on augumented user 118226 35/50 current_auc = 0.5824175824175823
User 118226 AUC after training: 0.5824175824175823
User 118226 does not improve AUC. Reverting changes.
Training on augumented user 56597 36/50 current_auc = 0.5824175824175823
User 56597 AUC after training: 0.5714285714285714
User 56597 does not improve AUC. Reverting changes.
Training on augumented user 4318 37/50 current_auc = 0.5824175824175823
User 4318 AUC after training: 0.5824175824175823
User 4318 does not improve AUC. Reverting changes.
Training on augumented user 55837 38/50 current_auc = 0.5824175824175823
User 55837 AUC after training: 0.5824175824175823
User 55837 does not improve AUC. Reverting changes.
Training on augumented user 14597 39/50 current_auc = 0.5824175824175823
User 14597 AUC after training: 0.5824175824175823
User 14597 does not improve AUC. Reverting changes.
Training on augumented user 85212 40/50 current_auc = 0.5824175824175823
User 85212 AUC after training: 0.5824175824175823
User 85212 does not improve AUC. Reverting changes.
Training on augumented user 3336 41/50 current_auc = 0.5824175824175823
User 3336 AUC after training: 0.5824175824175823
User 3336 does not improve AUC. Reverting changes.
Training on augumented user 16956 42/50 current_auc = 0.5824175824175823
User 16956 AUC after training: 0.5824175824175823
User 16956 does not improve AUC. Reverting changes.
Training on augumented user 52949 43/50 current_auc = 0.5824175824175823
User 52949 AUC after training: 0.5824175824175823
User 52949 does not improve AUC. Reverting changes.
Training on augumented user 109455 44/50 current_auc = 0.5824175824175823
User 109455 AUC after training: 0.5824175824175823
User 109455 does not improve AUC. Reverting changes.
Training on augumented user 135120 45/50 current_auc = 0.5824175824175823
User 135120 AUC after training: 0.5824175824175823
User 135120 does not improve AUC. Reverting changes.
Training on augumented user 61420 46/50 current_auc = 0.5824175824175823
User 61420 AUC after training: 0.5824175824175823
User 61420 does not improve AUC. Reverting changes.
Training on augumented user 27861 47/50 current_auc = 0.5824175824175823
User 27861 AUC after training: 0.5824175824175823
User 27861 does not improve AUC. Reverting changes.
Training on augumented user 123650 48/50 current_auc = 0.5824175824175823
User 123650 AUC after training: 0.5824175824175823
User 123650 does not improve AUC. Reverting changes.
Training on augumented user 39301 49/50 current_auc = 0.5824175824175823
User 39301 AUC after training: 0.5824175824175823
User 39301 does not improve AUC. Reverting changes.
[2024-12-02 20:02:33.120824] start test user 130825 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:33.541919] start test user 130825 266/567 recall augumented users by random, augumented_users = [66711, 52648, 103399, 4511, 134551, 21324, 134924, 62472, 102262, 34855, 101889, 96145, 35945, 62821, 4767, 93453, 49696, 14359, 79445, 85677, 21226, 22942, 56979, 21943, 122701, 60250, 84320, 55482, 86970, 109904, 24065, 86459, 76493, 111345, 107343, 8513, 79502, 90462, 94324, 5366, 123981, 80210, 133327, 11319, 48715, 4815, 85291, 125735, 29627, 10100]
[2024-12-02 20:02:33.556422] user = 130825 Cloud 266/567
[2024-12-02 20:02:33.566377] user = 130825 Local 266/567
[2024-12-02 20:02:33.599720] user = 130825 Local+ 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:36.344078] user = 130825 MPDA- 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6135265700483092
Training on augumented user 66711 0/50 current_auc = 0.6135265700483092
User 66711 AUC after training: 0.6183574879227054
User 66711 improves AUC. Keeping the model.
Training on augumented user 52648 1/50 current_auc = 0.6183574879227054
User 52648 AUC after training: 0.6135265700483092
User 52648 does not improve AUC. Reverting changes.
Training on augumented user 103399 2/50 current_auc = 0.6183574879227054
User 103399 AUC after training: 0.6183574879227054
User 103399 does not improve AUC. Reverting changes.
Training on augumented user 4511 3/50 current_auc = 0.6183574879227054
User 4511 AUC after training: 0.6183574879227054
User 4511 does not improve AUC. Reverting changes.
Training on augumented user 134551 4/50 current_auc = 0.6183574879227054
User 134551 AUC after training: 0.6183574879227054
User 134551 does not improve AUC. Reverting changes.
Training on augumented user 21324 5/50 current_auc = 0.6183574879227054
User 21324 AUC after training: 0.6135265700483092
User 21324 does not improve AUC. Reverting changes.
Training on augumented user 134924 6/50 current_auc = 0.6183574879227054
User 134924 AUC after training: 0.6086956521739131
User 134924 does not improve AUC. Reverting changes.
Training on augumented user 62472 7/50 current_auc = 0.6183574879227054
User 62472 AUC after training: 0.6183574879227054
User 62472 does not improve AUC. Reverting changes.
Training on augumented user 102262 8/50 current_auc = 0.6183574879227054
User 102262 AUC after training: 0.6086956521739131
User 102262 does not improve AUC. Reverting changes.
Training on augumented user 34855 9/50 current_auc = 0.6183574879227054
User 34855 AUC after training: 0.6183574879227054
User 34855 does not improve AUC. Reverting changes.
Training on augumented user 101889 10/50 current_auc = 0.6183574879227054
User 101889 AUC after training: 0.6135265700483092
User 101889 does not improve AUC. Reverting changes.
Training on augumented user 96145 11/50 current_auc = 0.6183574879227054
User 96145 AUC after training: 0.6086956521739131
User 96145 does not improve AUC. Reverting changes.
Training on augumented user 35945 12/50 current_auc = 0.6183574879227054
User 35945 AUC after training: 0.6135265700483092
User 35945 does not improve AUC. Reverting changes.
Training on augumented user 62821 13/50 current_auc = 0.6183574879227054
User 62821 AUC after training: 0.6183574879227054
User 62821 does not improve AUC. Reverting changes.
Training on augumented user 4767 14/50 current_auc = 0.6183574879227054
User 4767 AUC after training: 0.6183574879227054
User 4767 does not improve AUC. Reverting changes.
Training on augumented user 93453 15/50 current_auc = 0.6183574879227054
User 93453 AUC after training: 0.6135265700483092
User 93453 does not improve AUC. Reverting changes.
Training on augumented user 49696 16/50 current_auc = 0.6183574879227054
User 49696 AUC after training: 0.6183574879227054
User 49696 does not improve AUC. Reverting changes.
Training on augumented user 14359 17/50 current_auc = 0.6183574879227054
User 14359 AUC after training: 0.6135265700483092
User 14359 does not improve AUC. Reverting changes.
Training on augumented user 79445 18/50 current_auc = 0.6183574879227054
User 79445 AUC after training: 0.6086956521739131
User 79445 does not improve AUC. Reverting changes.
Training on augumented user 85677 19/50 current_auc = 0.6183574879227054
User 85677 AUC after training: 0.6135265700483092
User 85677 does not improve AUC. Reverting changes.
Training on augumented user 21226 20/50 current_auc = 0.6183574879227054
User 21226 AUC after training: 0.6135265700483092
User 21226 does not improve AUC. Reverting changes.
Training on augumented user 22942 21/50 current_auc = 0.6183574879227054
User 22942 AUC after training: 0.6038647342995169
User 22942 does not improve AUC. Reverting changes.
Training on augumented user 56979 22/50 current_auc = 0.6183574879227054
User 56979 AUC after training: 0.6183574879227054
User 56979 does not improve AUC. Reverting changes.
Training on augumented user 21943 23/50 current_auc = 0.6183574879227054
User 21943 AUC after training: 0.6183574879227054
User 21943 does not improve AUC. Reverting changes.
Training on augumented user 122701 24/50 current_auc = 0.6183574879227054
User 122701 AUC after training: 0.6135265700483092
User 122701 does not improve AUC. Reverting changes.
Training on augumented user 60250 25/50 current_auc = 0.6183574879227054
User 60250 AUC after training: 0.6135265700483092
User 60250 does not improve AUC. Reverting changes.
Training on augumented user 84320 26/50 current_auc = 0.6183574879227054
User 84320 AUC after training: 0.6135265700483092
User 84320 does not improve AUC. Reverting changes.
Training on augumented user 55482 27/50 current_auc = 0.6183574879227054
User 55482 AUC after training: 0.6183574879227054
User 55482 does not improve AUC. Reverting changes.
Training on augumented user 86970 28/50 current_auc = 0.6183574879227054
User 86970 AUC after training: 0.6183574879227054
User 86970 does not improve AUC. Reverting changes.
Training on augumented user 109904 29/50 current_auc = 0.6183574879227054
User 109904 AUC after training: 0.6183574879227054
User 109904 does not improve AUC. Reverting changes.
Training on augumented user 24065 30/50 current_auc = 0.6183574879227054
User 24065 AUC after training: 0.6183574879227054
User 24065 does not improve AUC. Reverting changes.
Training on augumented user 86459 31/50 current_auc = 0.6183574879227054
User 86459 AUC after training: 0.6183574879227054
User 86459 does not improve AUC. Reverting changes.
Training on augumented user 76493 32/50 current_auc = 0.6183574879227054
User 76493 AUC after training: 0.6135265700483092
User 76493 does not improve AUC. Reverting changes.
Training on augumented user 111345 33/50 current_auc = 0.6183574879227054
User 111345 AUC after training: 0.6183574879227054
User 111345 does not improve AUC. Reverting changes.
Training on augumented user 107343 34/50 current_auc = 0.6183574879227054
User 107343 AUC after training: 0.6183574879227054
User 107343 does not improve AUC. Reverting changes.
Training on augumented user 8513 35/50 current_auc = 0.6183574879227054
User 8513 AUC after training: 0.6135265700483092
User 8513 does not improve AUC. Reverting changes.
Training on augumented user 79502 36/50 current_auc = 0.6183574879227054
User 79502 AUC after training: 0.6135265700483092
User 79502 does not improve AUC. Reverting changes.
Training on augumented user 90462 37/50 current_auc = 0.6183574879227054
User 90462 AUC after training: 0.6086956521739131
User 90462 does not improve AUC. Reverting changes.
Training on augumented user 94324 38/50 current_auc = 0.6183574879227054
User 94324 AUC after training: 0.6183574879227054
User 94324 does not improve AUC. Reverting changes.
Training on augumented user 5366 39/50 current_auc = 0.6183574879227054
User 5366 AUC after training: 0.6135265700483092
User 5366 does not improve AUC. Reverting changes.
Training on augumented user 123981 40/50 current_auc = 0.6183574879227054
User 123981 AUC after training: 0.6135265700483092
User 123981 does not improve AUC. Reverting changes.
Training on augumented user 80210 41/50 current_auc = 0.6183574879227054
User 80210 AUC after training: 0.6183574879227054
User 80210 does not improve AUC. Reverting changes.
Training on augumented user 133327 42/50 current_auc = 0.6183574879227054
User 133327 AUC after training: 0.6183574879227054
User 133327 does not improve AUC. Reverting changes.
Training on augumented user 11319 43/50 current_auc = 0.6183574879227054
User 11319 AUC after training: 0.6135265700483092
User 11319 does not improve AUC. Reverting changes.
Training on augumented user 48715 44/50 current_auc = 0.6183574879227054
User 48715 AUC after training: 0.6135265700483092
User 48715 does not improve AUC. Reverting changes.
Training on augumented user 4815 45/50 current_auc = 0.6183574879227054
User 4815 AUC after training: 0.6183574879227054
User 4815 does not improve AUC. Reverting changes.
Training on augumented user 85291 46/50 current_auc = 0.6183574879227054
User 85291 AUC after training: 0.6183574879227054
User 85291 does not improve AUC. Reverting changes.
Training on augumented user 125735 47/50 current_auc = 0.6183574879227054
User 125735 AUC after training: 0.6183574879227054
User 125735 does not improve AUC. Reverting changes.
Training on augumented user 29627 48/50 current_auc = 0.6183574879227054
User 29627 AUC after training: 0.6183574879227054
User 29627 does not improve AUC. Reverting changes.
Training on augumented user 10100 49/50 current_auc = 0.6183574879227054
User 10100 AUC after training: 0.6183574879227054
User 10100 does not improve AUC. Reverting changes.
[2024-12-02 20:03:08.605068] start test user 130827 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:09.043325] start test user 130827 267/567 recall augumented users by random, augumented_users = [136067, 42865, 4566, 35588, 1465, 25822, 103550, 119594, 132543, 21691, 95337, 122482, 17337, 30052, 13750, 135572, 76639, 124395, 135445, 104287, 102640, 79381, 39182, 77647, 92837, 106928, 48954, 127096, 11568, 116792, 99204, 79857, 43936, 129409, 108891, 45627, 44875, 679, 47369, 81378, 8073, 17711, 99051, 27235, 87173, 114674, 61385, 4698, 23222, 50192]
[2024-12-02 20:03:09.061027] user = 130827 Cloud 267/567
[2024-12-02 20:03:09.125925] user = 130827 Local 267/567
[2024-12-02 20:03:09.242504] user = 130827 Local+ 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:11.042571] user = 130827 MPDA- 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6514429884406456
Training on augumented user 136067 0/50 current_auc = 0.6514429884406456
User 136067 AUC after training: 0.6504968720232731
User 136067 does not improve AUC. Reverting changes.
Training on augumented user 42865 1/50 current_auc = 0.6514429884406456
User 42865 AUC after training: 0.6508122441623974
User 42865 does not improve AUC. Reverting changes.
Training on augumented user 4566 2/50 current_auc = 0.6514429884406456
User 4566 AUC after training: 0.6514655150220117
User 4566 improves AUC. Keeping the model.
Training on augumented user 35588 3/50 current_auc = 0.6514655150220117
User 35588 AUC after training: 0.6511533609659397
User 35588 does not improve AUC. Reverting changes.
Training on augumented user 1465 4/50 current_auc = 0.6514655150220117
User 1465 AUC after training: 0.6512048502947765
User 1465 does not improve AUC. Reverting changes.
Training on augumented user 25822 5/50 current_auc = 0.6514655150220117
User 25822 AUC after training: 0.651513786267796
User 25822 improves AUC. Keeping the model.
Training on augumented user 103550 6/50 current_auc = 0.651513786267796
User 103550 AUC after training: 0.6514301161084366
User 103550 does not improve AUC. Reverting changes.
Training on augumented user 119594 7/50 current_auc = 0.651513786267796
User 119594 AUC after training: 0.6514236799423319
User 119594 does not improve AUC. Reverting changes.
Training on augumented user 132543 8/50 current_auc = 0.651513786267796
User 132543 AUC after training: 0.6513464459490771
User 132543 does not improve AUC. Reverting changes.
Training on augumented user 21691 9/50 current_auc = 0.651513786267796
User 21691 AUC after training: 0.6510246376438483
User 21691 does not improve AUC. Reverting changes.
Training on augumented user 95337 10/50 current_auc = 0.651513786267796
User 95337 AUC after training: 0.6515009139355868
User 95337 does not improve AUC. Reverting changes.
Training on augumented user 122482 11/50 current_auc = 0.651513786267796
User 122482 AUC after training: 0.651346445949077
User 122482 does not improve AUC. Reverting changes.
Training on augumented user 17337 12/50 current_auc = 0.651513786267796
User 17337 AUC after training: 0.6515652755966325
User 17337 improves AUC. Keeping the model.
Training on augumented user 30052 13/50 current_auc = 0.6515652755966325
User 30052 AUC after training: 0.6515395309322143
User 30052 does not improve AUC. Reverting changes.
Training on augumented user 13750 14/50 current_auc = 0.6515652755966325
User 13750 AUC after training: 0.6515330947661097
User 13750 does not improve AUC. Reverting changes.
Training on augumented user 135572 15/50 current_auc = 0.6515652755966325
User 135572 AUC after training: 0.6508572973251293
User 135572 does not improve AUC. Reverting changes.
Training on augumented user 76639 16/50 current_auc = 0.6515652755966325
User 76639 AUC after training: 0.6514494246067503
User 76639 does not improve AUC. Reverting changes.
Training on augumented user 124395 17/50 current_auc = 0.6515652755966325
User 124395 AUC after training: 0.6515009139355868
User 124395 does not improve AUC. Reverting changes.
Training on augumented user 135445 18/50 current_auc = 0.6515652755966325
User 135445 AUC after training: 0.6513013927863451
User 135445 does not improve AUC. Reverting changes.
Training on augumented user 104287 19/50 current_auc = 0.6515652755966325
User 104287 AUC after training: 0.6509345313183843
User 104287 does not improve AUC. Reverting changes.
Training on augumented user 102640 20/50 current_auc = 0.6515652755966325
User 102640 AUC after training: 0.6509409674844888
User 102640 does not improve AUC. Reverting changes.
Training on augumented user 79381 21/50 current_auc = 0.6515652755966325
User 79381 AUC after training: 0.6513850629457045
User 79381 does not improve AUC. Reverting changes.
Training on augumented user 39182 22/50 current_auc = 0.6515652755966325
User 39182 AUC after training: 0.6511018716371033
User 39182 does not improve AUC. Reverting changes.
Training on augumented user 77647 23/50 current_auc = 0.6515652755966325
User 77647 AUC after training: 0.6515009139355868
User 77647 does not improve AUC. Reverting changes.
Training on augumented user 92837 24/50 current_auc = 0.6515652755966325
User 92837 AUC after training: 0.6514494246067501
User 92837 does not improve AUC. Reverting changes.
Training on augumented user 106928 25/50 current_auc = 0.6515652755966325
User 106928 AUC after training: 0.6516232010915738
User 106928 improves AUC. Keeping the model.
Training on augumented user 48954 26/50 current_auc = 0.6516232010915738
User 48954 AUC after training: 0.6512048502947764
User 48954 does not improve AUC. Reverting changes.
Training on augumented user 127096 27/50 current_auc = 0.6516232010915738
User 127096 AUC after training: 0.6517004350848287
User 127096 improves AUC. Keeping the model.
Training on augumented user 11568 28/50 current_auc = 0.6517004350848287
User 11568 AUC after training: 0.6515073501016914
User 11568 does not improve AUC. Reverting changes.
Training on augumented user 116792 29/50 current_auc = 0.6517004350848287
User 116792 AUC after training: 0.6514043714440182
User 116792 does not improve AUC. Reverting changes.
Training on augumented user 99204 30/50 current_auc = 0.6517004350848287
User 99204 AUC after training: 0.6514172437762275
User 99204 does not improve AUC. Reverting changes.
Training on augumented user 79857 31/50 current_auc = 0.6517004350848287
User 79857 AUC after training: 0.6515910202610509
User 79857 does not improve AUC. Reverting changes.
Training on augumented user 43936 32/50 current_auc = 0.6517004350848287
User 43936 AUC after training: 0.6509667121489071
User 43936 does not improve AUC. Reverting changes.
Training on augumented user 129409 33/50 current_auc = 0.6517004350848287
User 129409 AUC after training: 0.6518806477357568
User 129409 improves AUC. Keeping the model.
Training on augumented user 108891 34/50 current_auc = 0.6518806477357568
User 108891 AUC after training: 0.6519128285662797
User 108891 improves AUC. Keeping the model.
Training on augumented user 45627 35/50 current_auc = 0.6519128285662797
User 45627 AUC after training: 0.6509474036505933
User 45627 does not improve AUC. Reverting changes.
Training on augumented user 44875 36/50 current_auc = 0.6519128285662797
User 44875 AUC after training: 0.651848466905234
User 44875 does not improve AUC. Reverting changes.
Training on augumented user 679 37/50 current_auc = 0.6519128285662797
User 679 AUC after training: 0.6516425095898876
User 679 does not improve AUC. Reverting changes.
Training on augumented user 47369 38/50 current_auc = 0.6519128285662797
User 47369 AUC after training: 0.6515781479288417
User 47369 does not improve AUC. Reverting changes.
Training on augumented user 81378 39/50 current_auc = 0.6519128285662797
User 81378 AUC after training: 0.6514751692711686
User 81378 does not improve AUC. Reverting changes.
Training on augumented user 8073 40/50 current_auc = 0.6519128285662797
User 8073 AUC after training: 0.6518677754035476
User 8073 does not improve AUC. Reverting changes.
Training on augumented user 17711 41/50 current_auc = 0.6519128285662797
User 17711 AUC after training: 0.6506899570064104
User 17711 does not improve AUC. Reverting changes.
Training on augumented user 99051 42/50 current_auc = 0.6519128285662797
User 99051 AUC after training: 0.6515910202610509
User 99051 does not improve AUC. Reverting changes.
Training on augumented user 27235 43/50 current_auc = 0.6519128285662797
User 27235 AUC after training: 0.6516682542543057
User 27235 does not improve AUC. Reverting changes.
Training on augumented user 87173 44/50 current_auc = 0.6519128285662797
User 87173 AUC after training: 0.6518806477357567
User 87173 does not improve AUC. Reverting changes.
Training on augumented user 114674 45/50 current_auc = 0.6519128285662797
User 114674 AUC after training: 0.6511855417964626
User 114674 does not improve AUC. Reverting changes.
Training on augumented user 61385 46/50 current_auc = 0.6519128285662797
User 61385 AUC after training: 0.651906392400175
User 61385 does not improve AUC. Reverting changes.
Training on augumented user 4698 47/50 current_auc = 0.6519128285662797
User 4698 AUC after training: 0.6512885204541359
User 4698 does not improve AUC. Reverting changes.
Training on augumented user 23222 48/50 current_auc = 0.6519128285662797
User 23222 AUC after training: 0.6516232010915737
User 23222 does not improve AUC. Reverting changes.
Training on augumented user 50192 49/50 current_auc = 0.6519128285662797
User 50192 AUC after training: 0.6507092655047241
User 50192 does not improve AUC. Reverting changes.
[2024-12-02 20:03:46.253602] start test user 130915 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:46.927217] start test user 130915 268/567 recall augumented users by random, augumented_users = [55764, 16618, 54517, 45423, 72795, 65099, 1899, 68355, 27425, 70425, 7360, 54978, 51777, 26223, 5215, 109264, 27702, 107545, 24323, 15189, 108295, 38159, 3134, 70922, 79158, 66790, 70499, 36453, 3025, 92983, 113757, 20439, 135858, 72616, 99649, 37754, 81387, 128955, 46334, 19578, 79906, 95976, 63002, 63855, 115577, 77978, 118288, 34857, 79897, 90566]
[2024-12-02 20:03:46.943212] user = 130915 Cloud 268/567
[2024-12-02 20:03:46.966799] user = 130915 Local 268/567
[2024-12-02 20:03:47.031122] user = 130915 Local+ 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:50.225915] user = 130915 MPDA- 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 55764 0/50 current_auc = 0.625
User 55764 AUC after training: 0.625
User 55764 does not improve AUC. Reverting changes.
Training on augumented user 16618 1/50 current_auc = 0.625
User 16618 AUC after training: 0.625
User 16618 does not improve AUC. Reverting changes.
Training on augumented user 54517 2/50 current_auc = 0.625
User 54517 AUC after training: 0.625
User 54517 does not improve AUC. Reverting changes.
Training on augumented user 45423 3/50 current_auc = 0.625
User 45423 AUC after training: 0.625
User 45423 does not improve AUC. Reverting changes.
Training on augumented user 72795 4/50 current_auc = 0.625
User 72795 AUC after training: 0.625
User 72795 does not improve AUC. Reverting changes.
Training on augumented user 65099 5/50 current_auc = 0.625
User 65099 AUC after training: 0.6607142857142857
User 65099 improves AUC. Keeping the model.
Training on augumented user 1899 6/50 current_auc = 0.6607142857142857
User 1899 AUC after training: 0.6607142857142857
User 1899 does not improve AUC. Reverting changes.
Training on augumented user 68355 7/50 current_auc = 0.6607142857142857
User 68355 AUC after training: 0.6607142857142857
User 68355 does not improve AUC. Reverting changes.
Training on augumented user 27425 8/50 current_auc = 0.6607142857142857
User 27425 AUC after training: 0.6607142857142857
User 27425 does not improve AUC. Reverting changes.
Training on augumented user 70425 9/50 current_auc = 0.6607142857142857
User 70425 AUC after training: 0.6607142857142857
User 70425 does not improve AUC. Reverting changes.
Training on augumented user 7360 10/50 current_auc = 0.6607142857142857
User 7360 AUC after training: 0.6607142857142857
User 7360 does not improve AUC. Reverting changes.
Training on augumented user 54978 11/50 current_auc = 0.6607142857142857
User 54978 AUC after training: 0.625
User 54978 does not improve AUC. Reverting changes.
Training on augumented user 51777 12/50 current_auc = 0.6607142857142857
User 51777 AUC after training: 0.6607142857142857
User 51777 does not improve AUC. Reverting changes.
Training on augumented user 26223 13/50 current_auc = 0.6607142857142857
User 26223 AUC after training: 0.6607142857142857
User 26223 does not improve AUC. Reverting changes.
Training on augumented user 5215 14/50 current_auc = 0.6607142857142857
User 5215 AUC after training: 0.6607142857142857
User 5215 does not improve AUC. Reverting changes.
Training on augumented user 109264 15/50 current_auc = 0.6607142857142857
User 109264 AUC after training: 0.6607142857142857
User 109264 does not improve AUC. Reverting changes.
Training on augumented user 27702 16/50 current_auc = 0.6607142857142857
User 27702 AUC after training: 0.6607142857142857
User 27702 does not improve AUC. Reverting changes.
Training on augumented user 107545 17/50 current_auc = 0.6607142857142857
User 107545 AUC after training: 0.6607142857142857
User 107545 does not improve AUC. Reverting changes.
Training on augumented user 24323 18/50 current_auc = 0.6607142857142857
User 24323 AUC after training: 0.6607142857142857
User 24323 does not improve AUC. Reverting changes.
Training on augumented user 15189 19/50 current_auc = 0.6607142857142857
User 15189 AUC after training: 0.6607142857142857
User 15189 does not improve AUC. Reverting changes.
Training on augumented user 108295 20/50 current_auc = 0.6607142857142857
User 108295 AUC after training: 0.6607142857142857
User 108295 does not improve AUC. Reverting changes.
Training on augumented user 38159 21/50 current_auc = 0.6607142857142857
User 38159 AUC after training: 0.625
User 38159 does not improve AUC. Reverting changes.
Training on augumented user 3134 22/50 current_auc = 0.6607142857142857
User 3134 AUC after training: 0.6607142857142857
User 3134 does not improve AUC. Reverting changes.
Training on augumented user 70922 23/50 current_auc = 0.6607142857142857
User 70922 AUC after training: 0.6607142857142857
User 70922 does not improve AUC. Reverting changes.
Training on augumented user 79158 24/50 current_auc = 0.6607142857142857
User 79158 AUC after training: 0.6607142857142857
User 79158 does not improve AUC. Reverting changes.
Training on augumented user 66790 25/50 current_auc = 0.6607142857142857
User 66790 AUC after training: 0.6607142857142857
User 66790 does not improve AUC. Reverting changes.
Training on augumented user 70499 26/50 current_auc = 0.6607142857142857
User 70499 AUC after training: 0.6607142857142857
User 70499 does not improve AUC. Reverting changes.
Training on augumented user 36453 27/50 current_auc = 0.6607142857142857
User 36453 AUC after training: 0.6607142857142857
User 36453 does not improve AUC. Reverting changes.
Training on augumented user 3025 28/50 current_auc = 0.6607142857142857
User 3025 AUC after training: 0.6428571428571428
User 3025 does not improve AUC. Reverting changes.
Training on augumented user 92983 29/50 current_auc = 0.6607142857142857
User 92983 AUC after training: 0.6607142857142857
User 92983 does not improve AUC. Reverting changes.
Training on augumented user 113757 30/50 current_auc = 0.6607142857142857
User 113757 AUC after training: 0.6607142857142857
User 113757 does not improve AUC. Reverting changes.
Training on augumented user 20439 31/50 current_auc = 0.6607142857142857
User 20439 AUC after training: 0.6607142857142857
User 20439 does not improve AUC. Reverting changes.
Training on augumented user 135858 32/50 current_auc = 0.6607142857142857
User 135858 AUC after training: 0.6607142857142857
User 135858 does not improve AUC. Reverting changes.
Training on augumented user 72616 33/50 current_auc = 0.6607142857142857
User 72616 AUC after training: 0.6607142857142857
User 72616 does not improve AUC. Reverting changes.
Training on augumented user 99649 34/50 current_auc = 0.6607142857142857
User 99649 AUC after training: 0.6607142857142857
User 99649 does not improve AUC. Reverting changes.
Training on augumented user 37754 35/50 current_auc = 0.6607142857142857
User 37754 AUC after training: 0.6607142857142857
User 37754 does not improve AUC. Reverting changes.
Training on augumented user 81387 36/50 current_auc = 0.6607142857142857
User 81387 AUC after training: 0.6607142857142857
User 81387 does not improve AUC. Reverting changes.
Training on augumented user 128955 37/50 current_auc = 0.6607142857142857
User 128955 AUC after training: 0.6607142857142857
User 128955 does not improve AUC. Reverting changes.
Training on augumented user 46334 38/50 current_auc = 0.6607142857142857
User 46334 AUC after training: 0.6607142857142857
User 46334 does not improve AUC. Reverting changes.
Training on augumented user 19578 39/50 current_auc = 0.6607142857142857
User 19578 AUC after training: 0.6428571428571428
User 19578 does not improve AUC. Reverting changes.
Training on augumented user 79906 40/50 current_auc = 0.6607142857142857
User 79906 AUC after training: 0.6607142857142857
User 79906 does not improve AUC. Reverting changes.
Training on augumented user 95976 41/50 current_auc = 0.6607142857142857
User 95976 AUC after training: 0.6607142857142857
User 95976 does not improve AUC. Reverting changes.
Training on augumented user 63002 42/50 current_auc = 0.6607142857142857
User 63002 AUC after training: 0.6607142857142857
User 63002 does not improve AUC. Reverting changes.
Training on augumented user 63855 43/50 current_auc = 0.6607142857142857
User 63855 AUC after training: 0.6607142857142857
User 63855 does not improve AUC. Reverting changes.
Training on augumented user 115577 44/50 current_auc = 0.6607142857142857
User 115577 AUC after training: 0.6607142857142857
User 115577 does not improve AUC. Reverting changes.
Training on augumented user 77978 45/50 current_auc = 0.6607142857142857
User 77978 AUC after training: 0.6607142857142857
User 77978 does not improve AUC. Reverting changes.
Training on augumented user 118288 46/50 current_auc = 0.6607142857142857
User 118288 AUC after training: 0.6607142857142857
User 118288 does not improve AUC. Reverting changes.
Training on augumented user 34857 47/50 current_auc = 0.6607142857142857
User 34857 AUC after training: 0.6607142857142857
User 34857 does not improve AUC. Reverting changes.
Training on augumented user 79897 48/50 current_auc = 0.6607142857142857
User 79897 AUC after training: 0.6607142857142857
User 79897 does not improve AUC. Reverting changes.
Training on augumented user 90566 49/50 current_auc = 0.6607142857142857
User 90566 AUC after training: 0.6607142857142857
User 90566 does not improve AUC. Reverting changes.
[2024-12-02 20:04:22.092226] start test user 130934 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:22.591918] start test user 130934 269/567 recall augumented users by random, augumented_users = [32725, 12675, 59122, 59533, 65081, 2980, 25552, 18519, 95807, 26409, 128115, 99198, 33232, 111227, 83958, 101969, 70008, 104180, 69024, 85893, 30603, 24204, 5149, 119375, 33128, 43842, 4740, 32625, 10118, 88022, 54833, 59514, 107121, 7273, 69920, 30483, 121068, 6831, 71150, 26237, 130137, 23854, 69691, 48066, 13620, 38054, 69143, 117687, 110873, 116935]
[2024-12-02 20:04:22.614026] user = 130934 Cloud 269/567
[2024-12-02 20:04:22.672256] user = 130934 Local 269/567
[2024-12-02 20:04:22.825390] user = 130934 Local+ 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:25.360619] user = 130934 MPDA- 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5508979885057471
Training on augumented user 32725 0/50 current_auc = 0.5508979885057471
User 32725 AUC after training: 0.5519755747126437
User 32725 improves AUC. Keeping the model.
Training on augumented user 12675 1/50 current_auc = 0.5519755747126437
User 12675 AUC after training: 0.5523347701149426
User 12675 improves AUC. Keeping the model.
Training on augumented user 59122 2/50 current_auc = 0.5523347701149426
User 59122 AUC after training: 0.551221264367816
User 59122 does not improve AUC. Reverting changes.
Training on augumented user 59533 3/50 current_auc = 0.5523347701149426
User 59533 AUC after training: 0.552478448275862
User 59533 improves AUC. Keeping the model.
Training on augumented user 65081 4/50 current_auc = 0.552478448275862
User 65081 AUC after training: 0.5529813218390804
User 65081 improves AUC. Keeping the model.
Training on augumented user 2980 5/50 current_auc = 0.5529813218390804
User 2980 AUC after training: 0.5529813218390804
User 2980 does not improve AUC. Reverting changes.
Training on augumented user 25552 6/50 current_auc = 0.5529813218390804
User 25552 AUC after training: 0.5529094827586207
User 25552 does not improve AUC. Reverting changes.
Training on augumented user 18519 7/50 current_auc = 0.5529813218390804
User 18519 AUC after training: 0.5526939655172414
User 18519 does not improve AUC. Reverting changes.
Training on augumented user 95807 8/50 current_auc = 0.5529813218390804
User 95807 AUC after training: 0.5537356321839081
User 95807 improves AUC. Keeping the model.
Training on augumented user 26409 9/50 current_auc = 0.5537356321839081
User 26409 AUC after training: 0.554094827586207
User 26409 improves AUC. Keeping the model.
Training on augumented user 128115 10/50 current_auc = 0.554094827586207
User 128115 AUC after training: 0.5539152298850575
User 128115 does not improve AUC. Reverting changes.
Training on augumented user 99198 11/50 current_auc = 0.554094827586207
User 99198 AUC after training: 0.5540948275862069
User 99198 does not improve AUC. Reverting changes.
Training on augumented user 33232 12/50 current_auc = 0.554094827586207
User 33232 AUC after training: 0.553125
User 33232 does not improve AUC. Reverting changes.
Training on augumented user 111227 13/50 current_auc = 0.554094827586207
User 111227 AUC after training: 0.5540948275862069
User 111227 does not improve AUC. Reverting changes.
Training on augumented user 83958 14/50 current_auc = 0.554094827586207
User 83958 AUC after training: 0.5545977011494253
User 83958 improves AUC. Keeping the model.
Training on augumented user 101969 15/50 current_auc = 0.5545977011494253
User 101969 AUC after training: 0.5544540229885058
User 101969 does not improve AUC. Reverting changes.
Training on augumented user 70008 16/50 current_auc = 0.5545977011494253
User 70008 AUC after training: 0.5548132183908046
User 70008 improves AUC. Keeping the model.
Training on augumented user 104180 17/50 current_auc = 0.5548132183908046
User 104180 AUC after training: 0.5543821839080461
User 104180 does not improve AUC. Reverting changes.
Training on augumented user 69024 18/50 current_auc = 0.5548132183908046
User 69024 AUC after training: 0.5536278735632184
User 69024 does not improve AUC. Reverting changes.
Training on augumented user 85893 19/50 current_auc = 0.5548132183908046
User 85893 AUC after training: 0.5549568965517242
User 85893 improves AUC. Keeping the model.
Training on augumented user 30603 20/50 current_auc = 0.5549568965517242
User 30603 AUC after training: 0.555352011494253
User 30603 improves AUC. Keeping the model.
Training on augumented user 24204 21/50 current_auc = 0.555352011494253
User 24204 AUC after training: 0.5550646551724139
User 24204 does not improve AUC. Reverting changes.
Training on augumented user 5149 22/50 current_auc = 0.555352011494253
User 5149 AUC after training: 0.5548491379310345
User 5149 does not improve AUC. Reverting changes.
Training on augumented user 119375 23/50 current_auc = 0.555352011494253
User 119375 AUC after training: 0.555639367816092
User 119375 improves AUC. Keeping the model.
Training on augumented user 33128 24/50 current_auc = 0.555639367816092
User 33128 AUC after training: 0.555352011494253
User 33128 does not improve AUC. Reverting changes.
Training on augumented user 43842 25/50 current_auc = 0.555639367816092
User 43842 AUC after training: 0.5550646551724139
User 43842 does not improve AUC. Reverting changes.
Training on augumented user 4740 26/50 current_auc = 0.555639367816092
User 4740 AUC after training: 0.5551364942528736
User 4740 does not improve AUC. Reverting changes.
Training on augumented user 32625 27/50 current_auc = 0.555639367816092
User 32625 AUC after training: 0.5562140804597702
User 32625 improves AUC. Keeping the model.
Training on augumented user 10118 28/50 current_auc = 0.5562140804597702
User 10118 AUC after training: 0.5553520114942528
User 10118 does not improve AUC. Reverting changes.
Training on augumented user 88022 29/50 current_auc = 0.5562140804597702
User 88022 AUC after training: 0.5559985632183908
User 88022 does not improve AUC. Reverting changes.
Training on augumented user 54833 30/50 current_auc = 0.5562140804597702
User 54833 AUC after training: 0.556573275862069
User 54833 improves AUC. Keeping the model.
Training on augumented user 59514 31/50 current_auc = 0.556573275862069
User 59514 AUC after training: 0.5562859195402299
User 59514 does not improve AUC. Reverting changes.
Training on augumented user 107121 32/50 current_auc = 0.556573275862069
User 107121 AUC after training: 0.5541666666666667
User 107121 does not improve AUC. Reverting changes.
Training on augumented user 7273 33/50 current_auc = 0.556573275862069
User 7273 AUC after training: 0.5557112068965517
User 7273 does not improve AUC. Reverting changes.
Training on augumented user 69920 34/50 current_auc = 0.556573275862069
User 69920 AUC after training: 0.556573275862069
User 69920 does not improve AUC. Reverting changes.
Training on augumented user 30483 35/50 current_auc = 0.556573275862069
User 30483 AUC after training: 0.5558908045977011
User 30483 does not improve AUC. Reverting changes.
Training on augumented user 121068 36/50 current_auc = 0.556573275862069
User 121068 AUC after training: 0.5559985632183908
User 121068 does not improve AUC. Reverting changes.
Training on augumented user 6831 37/50 current_auc = 0.556573275862069
User 6831 AUC after training: 0.5559985632183908
User 6831 does not improve AUC. Reverting changes.
Training on augumented user 71150 38/50 current_auc = 0.556573275862069
User 71150 AUC after training: 0.5562140804597702
User 71150 does not improve AUC. Reverting changes.
Training on augumented user 26237 39/50 current_auc = 0.556573275862069
User 26237 AUC after training: 0.556573275862069
User 26237 does not improve AUC. Reverting changes.
Training on augumented user 130137 40/50 current_auc = 0.556573275862069
User 130137 AUC after training: 0.5569324712643678
User 130137 improves AUC. Keeping the model.
Training on augumented user 23854 41/50 current_auc = 0.5569324712643678
User 23854 AUC after training: 0.5547413793103448
User 23854 does not improve AUC. Reverting changes.
Training on augumented user 69691 42/50 current_auc = 0.5569324712643678
User 69691 AUC after training: 0.5547054597701149
User 69691 does not improve AUC. Reverting changes.
Training on augumented user 48066 43/50 current_auc = 0.5569324712643678
User 48066 AUC after training: 0.5567528735632183
User 48066 does not improve AUC. Reverting changes.
Training on augumented user 13620 44/50 current_auc = 0.5569324712643678
User 13620 AUC after training: 0.5560344827586208
User 13620 does not improve AUC. Reverting changes.
Training on augumented user 38054 45/50 current_auc = 0.5569324712643678
User 38054 AUC after training: 0.5551364942528736
User 38054 does not improve AUC. Reverting changes.
Training on augumented user 69143 46/50 current_auc = 0.5569324712643678
User 69143 AUC after training: 0.5554238505747127
User 69143 does not improve AUC. Reverting changes.
Training on augumented user 117687 47/50 current_auc = 0.5569324712643678
User 117687 AUC after training: 0.555639367816092
User 117687 does not improve AUC. Reverting changes.
Training on augumented user 110873 48/50 current_auc = 0.5569324712643678
User 110873 AUC after training: 0.5570402298850574
User 110873 improves AUC. Keeping the model.
Training on augumented user 116935 49/50 current_auc = 0.5570402298850574
User 116935 AUC after training: 0.5569324712643678
User 116935 does not improve AUC. Reverting changes.
[2024-12-02 20:04:51.809663] start test user 130968 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:52.393116] start test user 130968 270/567 recall augumented users by random, augumented_users = [136977, 44540, 132750, 92416, 111564, 27873, 45787, 14613, 103345, 126488, 83691, 12424, 130357, 8774, 49070, 73846, 30311, 72032, 24814, 127660, 129521, 76731, 40422, 20999, 47753, 41658, 31156, 12144, 64962, 128823, 103698, 27379, 33902, 6735, 137934, 82779, 109077, 135145, 48308, 91020, 125074, 72423, 44185, 128248, 80247, 14289, 88272, 98617, 96783, 53832]
[2024-12-02 20:04:52.428410] user = 130968 Cloud 270/567
[2024-12-02 20:04:52.437944] user = 130968 Local 270/567
[2024-12-02 20:04:52.510635] user = 130968 Local+ 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:55.134633] user = 130968 MPDA- 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 136977 0/50 current_auc = 0.0
User 136977 AUC after training: 0.0
User 136977 does not improve AUC. Reverting changes.
Training on augumented user 44540 1/50 current_auc = 0.0
User 44540 AUC after training: 0.0
User 44540 does not improve AUC. Reverting changes.
Training on augumented user 132750 2/50 current_auc = 0.0
User 132750 AUC after training: 0.0
User 132750 does not improve AUC. Reverting changes.
Training on augumented user 92416 3/50 current_auc = 0.0
User 92416 AUC after training: 0.0
User 92416 does not improve AUC. Reverting changes.
Training on augumented user 111564 4/50 current_auc = 0.0
User 111564 AUC after training: 0.0
User 111564 does not improve AUC. Reverting changes.
Training on augumented user 27873 5/50 current_auc = 0.0
User 27873 AUC after training: 0.0
User 27873 does not improve AUC. Reverting changes.
Training on augumented user 45787 6/50 current_auc = 0.0
User 45787 AUC after training: 0.0
User 45787 does not improve AUC. Reverting changes.
Training on augumented user 14613 7/50 current_auc = 0.0
User 14613 AUC after training: 0.0
User 14613 does not improve AUC. Reverting changes.
Training on augumented user 103345 8/50 current_auc = 0.0
User 103345 AUC after training: 0.0
User 103345 does not improve AUC. Reverting changes.
Training on augumented user 126488 9/50 current_auc = 0.0
User 126488 AUC after training: 0.0
User 126488 does not improve AUC. Reverting changes.
Training on augumented user 83691 10/50 current_auc = 0.0
User 83691 AUC after training: 0.0
User 83691 does not improve AUC. Reverting changes.
Training on augumented user 12424 11/50 current_auc = 0.0
User 12424 AUC after training: 0.0
User 12424 does not improve AUC. Reverting changes.
Training on augumented user 130357 12/50 current_auc = 0.0
User 130357 AUC after training: 0.0
User 130357 does not improve AUC. Reverting changes.
Training on augumented user 8774 13/50 current_auc = 0.0
User 8774 AUC after training: 0.0
User 8774 does not improve AUC. Reverting changes.
Training on augumented user 49070 14/50 current_auc = 0.0
User 49070 AUC after training: 0.0
User 49070 does not improve AUC. Reverting changes.
Training on augumented user 73846 15/50 current_auc = 0.0
User 73846 AUC after training: 0.0
User 73846 does not improve AUC. Reverting changes.
Training on augumented user 30311 16/50 current_auc = 0.0
User 30311 AUC after training: 0.0
User 30311 does not improve AUC. Reverting changes.
Training on augumented user 72032 17/50 current_auc = 0.0
User 72032 AUC after training: 0.0
User 72032 does not improve AUC. Reverting changes.
Training on augumented user 24814 18/50 current_auc = 0.0
User 24814 AUC after training: 0.0
User 24814 does not improve AUC. Reverting changes.
Training on augumented user 127660 19/50 current_auc = 0.0
User 127660 AUC after training: 0.0
User 127660 does not improve AUC. Reverting changes.
Training on augumented user 129521 20/50 current_auc = 0.0
User 129521 AUC after training: 0.0
User 129521 does not improve AUC. Reverting changes.
Training on augumented user 76731 21/50 current_auc = 0.0
User 76731 AUC after training: 0.0
User 76731 does not improve AUC. Reverting changes.
Training on augumented user 40422 22/50 current_auc = 0.0
User 40422 AUC after training: 0.0
User 40422 does not improve AUC. Reverting changes.
Training on augumented user 20999 23/50 current_auc = 0.0
User 20999 AUC after training: 0.0
User 20999 does not improve AUC. Reverting changes.
Training on augumented user 47753 24/50 current_auc = 0.0
User 47753 AUC after training: 0.0
User 47753 does not improve AUC. Reverting changes.
Training on augumented user 41658 25/50 current_auc = 0.0
User 41658 AUC after training: 0.0
User 41658 does not improve AUC. Reverting changes.
Training on augumented user 31156 26/50 current_auc = 0.0
User 31156 AUC after training: 0.0
User 31156 does not improve AUC. Reverting changes.
Training on augumented user 12144 27/50 current_auc = 0.0
User 12144 AUC after training: 0.0
User 12144 does not improve AUC. Reverting changes.
Training on augumented user 64962 28/50 current_auc = 0.0
User 64962 AUC after training: 0.0
User 64962 does not improve AUC. Reverting changes.
Training on augumented user 128823 29/50 current_auc = 0.0
User 128823 AUC after training: 0.0
User 128823 does not improve AUC. Reverting changes.
Training on augumented user 103698 30/50 current_auc = 0.0
User 103698 AUC after training: 0.0
User 103698 does not improve AUC. Reverting changes.
Training on augumented user 27379 31/50 current_auc = 0.0
User 27379 AUC after training: 0.0
User 27379 does not improve AUC. Reverting changes.
Training on augumented user 33902 32/50 current_auc = 0.0
User 33902 AUC after training: 0.0
User 33902 does not improve AUC. Reverting changes.
Training on augumented user 6735 33/50 current_auc = 0.0
User 6735 AUC after training: 0.0
User 6735 does not improve AUC. Reverting changes.
Training on augumented user 137934 34/50 current_auc = 0.0
User 137934 AUC after training: 0.0
User 137934 does not improve AUC. Reverting changes.
Training on augumented user 82779 35/50 current_auc = 0.0
User 82779 AUC after training: 0.0
User 82779 does not improve AUC. Reverting changes.
Training on augumented user 109077 36/50 current_auc = 0.0
User 109077 AUC after training: 0.0
User 109077 does not improve AUC. Reverting changes.
Training on augumented user 135145 37/50 current_auc = 0.0
User 135145 AUC after training: 0.0
User 135145 does not improve AUC. Reverting changes.
Training on augumented user 48308 38/50 current_auc = 0.0
User 48308 AUC after training: 0.0
User 48308 does not improve AUC. Reverting changes.
Training on augumented user 91020 39/50 current_auc = 0.0
User 91020 AUC after training: 0.0
User 91020 does not improve AUC. Reverting changes.
Training on augumented user 125074 40/50 current_auc = 0.0
User 125074 AUC after training: 0.0
User 125074 does not improve AUC. Reverting changes.
Training on augumented user 72423 41/50 current_auc = 0.0
User 72423 AUC after training: 0.0
User 72423 does not improve AUC. Reverting changes.
Training on augumented user 44185 42/50 current_auc = 0.0
User 44185 AUC after training: 0.0
User 44185 does not improve AUC. Reverting changes.
Training on augumented user 128248 43/50 current_auc = 0.0
User 128248 AUC after training: 0.0
User 128248 does not improve AUC. Reverting changes.
Training on augumented user 80247 44/50 current_auc = 0.0
User 80247 AUC after training: 0.0
User 80247 does not improve AUC. Reverting changes.
Training on augumented user 14289 45/50 current_auc = 0.0
User 14289 AUC after training: 0.0
User 14289 does not improve AUC. Reverting changes.
Training on augumented user 88272 46/50 current_auc = 0.0
User 88272 AUC after training: 0.0
User 88272 does not improve AUC. Reverting changes.
Training on augumented user 98617 47/50 current_auc = 0.0
User 98617 AUC after training: 0.0
User 98617 does not improve AUC. Reverting changes.
Training on augumented user 96783 48/50 current_auc = 0.0
User 96783 AUC after training: 0.0
User 96783 does not improve AUC. Reverting changes.
Training on augumented user 53832 49/50 current_auc = 0.0
User 53832 AUC after training: 0.0
User 53832 does not improve AUC. Reverting changes.
[2024-12-02 20:05:23.218875] start test user 130987 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:23.772647] start test user 130987 271/567 recall augumented users by random, augumented_users = [122662, 52174, 111340, 116281, 55316, 38076, 13183, 70425, 93260, 31756, 75503, 14158, 118104, 94388, 34281, 97699, 73508, 18249, 136761, 124221, 104981, 8254, 49758, 57110, 115693, 65325, 78385, 124549, 113316, 1509, 112968, 71027, 119629, 27748, 116003, 123512, 44135, 52447, 99814, 137454, 24112, 130017, 43160, 112, 91028, 116384, 55413, 105579, 39077, 115735]
[2024-12-02 20:05:23.791818] user = 130987 Cloud 271/567
[2024-12-02 20:05:23.831956] user = 130987 Local 271/567
[2024-12-02 20:05:24.002841] user = 130987 Local+ 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:26.127460] user = 130987 MPDA- 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6472013274336283
Training on augumented user 122662 0/50 current_auc = 0.6472013274336283
User 122662 AUC after training: 0.6465376106194691
User 122662 does not improve AUC. Reverting changes.
Training on augumented user 52174 1/50 current_auc = 0.6472013274336283
User 52174 AUC after training: 0.646825221238938
User 52174 does not improve AUC. Reverting changes.
Training on augumented user 111340 2/50 current_auc = 0.6472013274336283
User 111340 AUC after training: 0.6470464601769912
User 111340 does not improve AUC. Reverting changes.
Training on augumented user 116281 3/50 current_auc = 0.6472013274336283
User 116281 AUC after training: 0.6469579646017699
User 116281 does not improve AUC. Reverting changes.
Training on augumented user 55316 4/50 current_auc = 0.6472013274336283
User 55316 AUC after training: 0.6473340707964601
User 55316 improves AUC. Keeping the model.
Training on augumented user 38076 5/50 current_auc = 0.6473340707964601
User 38076 AUC after training: 0.6472013274336283
User 38076 does not improve AUC. Reverting changes.
Training on augumented user 13183 6/50 current_auc = 0.6473340707964601
User 13183 AUC after training: 0.6473783185840708
User 13183 improves AUC. Keeping the model.
Training on augumented user 70425 7/50 current_auc = 0.6473783185840708
User 70425 AUC after training: 0.6471792035398231
User 70425 does not improve AUC. Reverting changes.
Training on augumented user 93260 8/50 current_auc = 0.6473783185840708
User 93260 AUC after training: 0.6466924778761062
User 93260 does not improve AUC. Reverting changes.
Training on augumented user 31756 9/50 current_auc = 0.6473783185840708
User 31756 AUC after training: 0.6471792035398231
User 31756 does not improve AUC. Reverting changes.
Training on augumented user 75503 10/50 current_auc = 0.6473783185840708
User 75503 AUC after training: 0.6474225663716815
User 75503 improves AUC. Keeping the model.
Training on augumented user 14158 11/50 current_auc = 0.6474225663716815
User 14158 AUC after training: 0.6476880530973451
User 14158 improves AUC. Keeping the model.
Training on augumented user 118104 12/50 current_auc = 0.6476880530973451
User 118104 AUC after training: 0.6474446902654867
User 118104 does not improve AUC. Reverting changes.
Training on augumented user 94388 13/50 current_auc = 0.6476880530973451
User 94388 AUC after training: 0.6474225663716815
User 94388 does not improve AUC. Reverting changes.
Training on augumented user 34281 14/50 current_auc = 0.6476880530973451
User 34281 AUC after training: 0.647466814159292
User 34281 does not improve AUC. Reverting changes.
Training on augumented user 97699 15/50 current_auc = 0.6476880530973451
User 97699 AUC after training: 0.647533185840708
User 97699 does not improve AUC. Reverting changes.
Training on augumented user 73508 16/50 current_auc = 0.6476880530973451
User 73508 AUC after training: 0.6474889380530973
User 73508 does not improve AUC. Reverting changes.
Training on augumented user 18249 17/50 current_auc = 0.6476880530973451
User 18249 AUC after training: 0.6475774336283187
User 18249 does not improve AUC. Reverting changes.
Training on augumented user 136761 18/50 current_auc = 0.6476880530973451
User 136761 AUC after training: 0.6472898230088495
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 124221 19/50 current_auc = 0.6476880530973451
User 124221 AUC after training: 0.6475331858407078
User 124221 does not improve AUC. Reverting changes.
Training on augumented user 104981 20/50 current_auc = 0.6476880530973451
User 104981 AUC after training: 0.6479756637168141
User 104981 improves AUC. Keeping the model.
Training on augumented user 8254 21/50 current_auc = 0.6479756637168141
User 8254 AUC after training: 0.6480862831858407
User 8254 improves AUC. Keeping the model.
Training on augumented user 49758 22/50 current_auc = 0.6480862831858407
User 49758 AUC after training: 0.6472123893805309
User 49758 does not improve AUC. Reverting changes.
Training on augumented user 57110 23/50 current_auc = 0.6480862831858407
User 57110 AUC after training: 0.6479092920353982
User 57110 does not improve AUC. Reverting changes.
Training on augumented user 115693 24/50 current_auc = 0.6480862831858407
User 115693 AUC after training: 0.6480199115044248
User 115693 does not improve AUC. Reverting changes.
Training on augumented user 65325 25/50 current_auc = 0.6480862831858407
User 65325 AUC after training: 0.6482190265486726
User 65325 improves AUC. Keeping the model.
Training on augumented user 78385 26/50 current_auc = 0.6482190265486726
User 78385 AUC after training: 0.6479977876106194
User 78385 does not improve AUC. Reverting changes.
Training on augumented user 124549 27/50 current_auc = 0.6482190265486726
User 124549 AUC after training: 0.6477765486725663
User 124549 does not improve AUC. Reverting changes.
Training on augumented user 113316 28/50 current_auc = 0.6482190265486726
User 113316 AUC after training: 0.6480641592920353
User 113316 does not improve AUC. Reverting changes.
Training on augumented user 1509 29/50 current_auc = 0.6482190265486726
User 1509 AUC after training: 0.6479092920353982
User 1509 does not improve AUC. Reverting changes.
Training on augumented user 112968 30/50 current_auc = 0.6482190265486726
User 112968 AUC after training: 0.6480641592920353
User 112968 does not improve AUC. Reverting changes.
Training on augumented user 71027 31/50 current_auc = 0.6482190265486726
User 71027 AUC after training: 0.647953539823009
User 71027 does not improve AUC. Reverting changes.
Training on augumented user 119629 32/50 current_auc = 0.6482190265486726
User 119629 AUC after training: 0.6483517699115044
User 119629 improves AUC. Keeping the model.
Training on augumented user 27748 33/50 current_auc = 0.6483517699115044
User 27748 AUC after training: 0.6484623893805309
User 27748 improves AUC. Keeping the model.
Training on augumented user 116003 34/50 current_auc = 0.6484623893805309
User 116003 AUC after training: 0.647887168141593
User 116003 does not improve AUC. Reverting changes.
Training on augumented user 123512 35/50 current_auc = 0.6484623893805309
User 123512 AUC after training: 0.6484845132743363
User 123512 improves AUC. Keeping the model.
Training on augumented user 44135 36/50 current_auc = 0.6484845132743363
User 44135 AUC after training: 0.6479756637168141
User 44135 does not improve AUC. Reverting changes.
Training on augumented user 52447 37/50 current_auc = 0.6484845132743363
User 52447 AUC after training: 0.6485287610619469
User 52447 improves AUC. Keeping the model.
Training on augumented user 99814 38/50 current_auc = 0.6485287610619469
User 99814 AUC after training: 0.648462389380531
User 99814 does not improve AUC. Reverting changes.
Training on augumented user 137454 39/50 current_auc = 0.6485287610619469
User 137454 AUC after training: 0.6483075221238936
User 137454 does not improve AUC. Reverting changes.
Training on augumented user 24112 40/50 current_auc = 0.6485287610619469
User 24112 AUC after training: 0.6483075221238939
User 24112 does not improve AUC. Reverting changes.
Training on augumented user 130017 41/50 current_auc = 0.6485287610619469
User 130017 AUC after training: 0.6484402654867256
User 130017 does not improve AUC. Reverting changes.
Training on augumented user 43160 42/50 current_auc = 0.6485287610619469
User 43160 AUC after training: 0.648462389380531
User 43160 does not improve AUC. Reverting changes.
Training on augumented user 112 43/50 current_auc = 0.6485287610619469
User 112 AUC after training: 0.64875
User 112 improves AUC. Keeping the model.
Training on augumented user 91028 44/50 current_auc = 0.64875
User 91028 AUC after training: 0.64875
User 91028 does not improve AUC. Reverting changes.
Training on augumented user 116384 45/50 current_auc = 0.64875
User 116384 AUC after training: 0.6485730088495575
User 116384 does not improve AUC. Reverting changes.
Training on augumented user 55413 46/50 current_auc = 0.64875
User 55413 AUC after training: 0.6483517699115044
User 55413 does not improve AUC. Reverting changes.
Training on augumented user 105579 47/50 current_auc = 0.64875
User 105579 AUC after training: 0.6487278761061946
User 105579 does not improve AUC. Reverting changes.
Training on augumented user 39077 48/50 current_auc = 0.64875
User 39077 AUC after training: 0.6486172566371681
User 39077 does not improve AUC. Reverting changes.
Training on augumented user 115735 49/50 current_auc = 0.64875
User 115735 AUC after training: 0.6487721238938053
User 115735 improves AUC. Keeping the model.
[2024-12-02 20:05:51.443831] start test user 130988 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:52.037582] start test user 130988 272/567 recall augumented users by random, augumented_users = [99598, 117947, 78209, 27261, 71223, 60726, 4520, 60226, 72358, 30704, 116113, 122748, 29475, 10006, 10640, 107459, 134885, 44992, 136334, 65727, 112237, 118336, 89545, 10582, 45152, 134227, 89398, 113891, 54530, 810, 58887, 50147, 46876, 123008, 117565, 94496, 74765, 7676, 85368, 38795, 24555, 63607, 43263, 28657, 120878, 12953, 23729, 55126, 12086, 85844]
[2024-12-02 20:05:52.068915] user = 130988 Cloud 272/567
[2024-12-02 20:05:52.092051] user = 130988 Local 272/567
[2024-12-02 20:05:52.178647] user = 130988 Local+ 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:53.671250] user = 130988 MPDA- 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333333
Training on augumented user 99598 0/50 current_auc = 0.8333333333333333
User 99598 AUC after training: 0.8333333333333333
User 99598 does not improve AUC. Reverting changes.
Training on augumented user 117947 1/50 current_auc = 0.8333333333333333
User 117947 AUC after training: 0.8333333333333333
User 117947 does not improve AUC. Reverting changes.
Training on augumented user 78209 2/50 current_auc = 0.8333333333333333
User 78209 AUC after training: 0.8333333333333333
User 78209 does not improve AUC. Reverting changes.
Training on augumented user 27261 3/50 current_auc = 0.8333333333333333
User 27261 AUC after training: 0.8333333333333333
User 27261 does not improve AUC. Reverting changes.
Training on augumented user 71223 4/50 current_auc = 0.8333333333333333
User 71223 AUC after training: 0.8333333333333333
User 71223 does not improve AUC. Reverting changes.
Training on augumented user 60726 5/50 current_auc = 0.8333333333333333
User 60726 AUC after training: 0.8333333333333333
User 60726 does not improve AUC. Reverting changes.
Training on augumented user 4520 6/50 current_auc = 0.8333333333333333
User 4520 AUC after training: 0.8333333333333333
User 4520 does not improve AUC. Reverting changes.
Training on augumented user 60226 7/50 current_auc = 0.8333333333333333
User 60226 AUC after training: 0.8333333333333333
User 60226 does not improve AUC. Reverting changes.
Training on augumented user 72358 8/50 current_auc = 0.8333333333333333
User 72358 AUC after training: 0.8333333333333333
User 72358 does not improve AUC. Reverting changes.
Training on augumented user 30704 9/50 current_auc = 0.8333333333333333
User 30704 AUC after training: 0.8333333333333333
User 30704 does not improve AUC. Reverting changes.
Training on augumented user 116113 10/50 current_auc = 0.8333333333333333
User 116113 AUC after training: 0.8095238095238095
User 116113 does not improve AUC. Reverting changes.
Training on augumented user 122748 11/50 current_auc = 0.8333333333333333
User 122748 AUC after training: 0.8333333333333333
User 122748 does not improve AUC. Reverting changes.
Training on augumented user 29475 12/50 current_auc = 0.8333333333333333
User 29475 AUC after training: 0.8333333333333333
User 29475 does not improve AUC. Reverting changes.
Training on augumented user 10006 13/50 current_auc = 0.8333333333333333
User 10006 AUC after training: 0.8333333333333333
User 10006 does not improve AUC. Reverting changes.
Training on augumented user 10640 14/50 current_auc = 0.8333333333333333
User 10640 AUC after training: 0.8333333333333333
User 10640 does not improve AUC. Reverting changes.
Training on augumented user 107459 15/50 current_auc = 0.8333333333333333
User 107459 AUC after training: 0.8333333333333333
User 107459 does not improve AUC. Reverting changes.
Training on augumented user 134885 16/50 current_auc = 0.8333333333333333
User 134885 AUC after training: 0.8333333333333333
User 134885 does not improve AUC. Reverting changes.
Training on augumented user 44992 17/50 current_auc = 0.8333333333333333
User 44992 AUC after training: 0.8333333333333333
User 44992 does not improve AUC. Reverting changes.
Training on augumented user 136334 18/50 current_auc = 0.8333333333333333
User 136334 AUC after training: 0.8333333333333333
User 136334 does not improve AUC. Reverting changes.
Training on augumented user 65727 19/50 current_auc = 0.8333333333333333
User 65727 AUC after training: 0.8333333333333333
User 65727 does not improve AUC. Reverting changes.
Training on augumented user 112237 20/50 current_auc = 0.8333333333333333
User 112237 AUC after training: 0.8333333333333333
User 112237 does not improve AUC. Reverting changes.
Training on augumented user 118336 21/50 current_auc = 0.8333333333333333
User 118336 AUC after training: 0.8333333333333333
User 118336 does not improve AUC. Reverting changes.
Training on augumented user 89545 22/50 current_auc = 0.8333333333333333
User 89545 AUC after training: 0.8333333333333333
User 89545 does not improve AUC. Reverting changes.
Training on augumented user 10582 23/50 current_auc = 0.8333333333333333
User 10582 AUC after training: 0.8333333333333333
User 10582 does not improve AUC. Reverting changes.
Training on augumented user 45152 24/50 current_auc = 0.8333333333333333
User 45152 AUC after training: 0.8333333333333333
User 45152 does not improve AUC. Reverting changes.
Training on augumented user 134227 25/50 current_auc = 0.8333333333333333
User 134227 AUC after training: 0.8333333333333333
User 134227 does not improve AUC. Reverting changes.
Training on augumented user 89398 26/50 current_auc = 0.8333333333333333
User 89398 AUC after training: 0.8333333333333333
User 89398 does not improve AUC. Reverting changes.
Training on augumented user 113891 27/50 current_auc = 0.8333333333333333
User 113891 AUC after training: 0.8333333333333333
User 113891 does not improve AUC. Reverting changes.
Training on augumented user 54530 28/50 current_auc = 0.8333333333333333
User 54530 AUC after training: 0.8333333333333333
User 54530 does not improve AUC. Reverting changes.
Training on augumented user 810 29/50 current_auc = 0.8333333333333333
User 810 AUC after training: 0.8333333333333333
User 810 does not improve AUC. Reverting changes.
Training on augumented user 58887 30/50 current_auc = 0.8333333333333333
User 58887 AUC after training: 0.8333333333333333
User 58887 does not improve AUC. Reverting changes.
Training on augumented user 50147 31/50 current_auc = 0.8333333333333333
User 50147 AUC after training: 0.8333333333333333
User 50147 does not improve AUC. Reverting changes.
Training on augumented user 46876 32/50 current_auc = 0.8333333333333333
User 46876 AUC after training: 0.8333333333333333
User 46876 does not improve AUC. Reverting changes.
Training on augumented user 123008 33/50 current_auc = 0.8333333333333333
User 123008 AUC after training: 0.8333333333333333
User 123008 does not improve AUC. Reverting changes.
Training on augumented user 117565 34/50 current_auc = 0.8333333333333333
User 117565 AUC after training: 0.8333333333333333
User 117565 does not improve AUC. Reverting changes.
Training on augumented user 94496 35/50 current_auc = 0.8333333333333333
User 94496 AUC after training: 0.8333333333333333
User 94496 does not improve AUC. Reverting changes.
Training on augumented user 74765 36/50 current_auc = 0.8333333333333333
User 74765 AUC after training: 0.8333333333333333
User 74765 does not improve AUC. Reverting changes.
Training on augumented user 7676 37/50 current_auc = 0.8333333333333333
User 7676 AUC after training: 0.8333333333333333
User 7676 does not improve AUC. Reverting changes.
Training on augumented user 85368 38/50 current_auc = 0.8333333333333333
User 85368 AUC after training: 0.8333333333333333
User 85368 does not improve AUC. Reverting changes.
Training on augumented user 38795 39/50 current_auc = 0.8333333333333333
User 38795 AUC after training: 0.8333333333333333
User 38795 does not improve AUC. Reverting changes.
Training on augumented user 24555 40/50 current_auc = 0.8333333333333333
User 24555 AUC after training: 0.8333333333333333
User 24555 does not improve AUC. Reverting changes.
Training on augumented user 63607 41/50 current_auc = 0.8333333333333333
User 63607 AUC after training: 0.8333333333333333
User 63607 does not improve AUC. Reverting changes.
Training on augumented user 43263 42/50 current_auc = 0.8333333333333333
User 43263 AUC after training: 0.8095238095238095
User 43263 does not improve AUC. Reverting changes.
Training on augumented user 28657 43/50 current_auc = 0.8333333333333333
User 28657 AUC after training: 0.8333333333333333
User 28657 does not improve AUC. Reverting changes.
Training on augumented user 120878 44/50 current_auc = 0.8333333333333333
User 120878 AUC after training: 0.8333333333333333
User 120878 does not improve AUC. Reverting changes.
Training on augumented user 12953 45/50 current_auc = 0.8333333333333333
User 12953 AUC after training: 0.8333333333333333
User 12953 does not improve AUC. Reverting changes.
Training on augumented user 23729 46/50 current_auc = 0.8333333333333333
User 23729 AUC after training: 0.8333333333333333
User 23729 does not improve AUC. Reverting changes.
Training on augumented user 55126 47/50 current_auc = 0.8333333333333333
User 55126 AUC after training: 0.8333333333333333
User 55126 does not improve AUC. Reverting changes.
Training on augumented user 12086 48/50 current_auc = 0.8333333333333333
User 12086 AUC after training: 0.8333333333333333
User 12086 does not improve AUC. Reverting changes.
Training on augumented user 85844 49/50 current_auc = 0.8333333333333333
User 85844 AUC after training: 0.8333333333333333
User 85844 does not improve AUC. Reverting changes.
[2024-12-02 20:06:20.599291] start test user 131013 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:21.023026] start test user 131013 273/567 recall augumented users by random, augumented_users = [113308, 15010, 126749, 127839, 120500, 54251, 46319, 10687, 2199, 50550, 48793, 3422, 92666, 50485, 31585, 53432, 80635, 105382, 7056, 103995, 32396, 41113, 52593, 136506, 25618, 25405, 19070, 104764, 92433, 129789, 67784, 43110, 131961, 2293, 19104, 116415, 131063, 19443, 50518, 27394, 137068, 73806, 33329, 123219, 129615, 83618, 55621, 4426, 14447, 134583]
[2024-12-02 20:06:21.036080] user = 131013 Cloud 273/567
[2024-12-02 20:06:21.045387] user = 131013 Local 273/567
[2024-12-02 20:06:21.088791] user = 131013 Local+ 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:23.673023] user = 131013 MPDA- 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 113308 0/50 current_auc = 0.25
User 113308 AUC after training: 0.25
User 113308 does not improve AUC. Reverting changes.
Training on augumented user 15010 1/50 current_auc = 0.25
User 15010 AUC after training: 0.25
User 15010 does not improve AUC. Reverting changes.
Training on augumented user 126749 2/50 current_auc = 0.25
User 126749 AUC after training: 0.25
User 126749 does not improve AUC. Reverting changes.
Training on augumented user 127839 3/50 current_auc = 0.25
User 127839 AUC after training: 0.25
User 127839 does not improve AUC. Reverting changes.
Training on augumented user 120500 4/50 current_auc = 0.25
User 120500 AUC after training: 0.25
User 120500 does not improve AUC. Reverting changes.
Training on augumented user 54251 5/50 current_auc = 0.25
User 54251 AUC after training: 0.25
User 54251 does not improve AUC. Reverting changes.
Training on augumented user 46319 6/50 current_auc = 0.25
User 46319 AUC after training: 0.25
User 46319 does not improve AUC. Reverting changes.
Training on augumented user 10687 7/50 current_auc = 0.25
User 10687 AUC after training: 0.25
User 10687 does not improve AUC. Reverting changes.
Training on augumented user 2199 8/50 current_auc = 0.25
User 2199 AUC after training: 0.25
User 2199 does not improve AUC. Reverting changes.
Training on augumented user 50550 9/50 current_auc = 0.25
User 50550 AUC after training: 0.25
User 50550 does not improve AUC. Reverting changes.
Training on augumented user 48793 10/50 current_auc = 0.25
User 48793 AUC after training: 0.25
User 48793 does not improve AUC. Reverting changes.
Training on augumented user 3422 11/50 current_auc = 0.25
User 3422 AUC after training: 0.25
User 3422 does not improve AUC. Reverting changes.
Training on augumented user 92666 12/50 current_auc = 0.25
User 92666 AUC after training: 0.25
User 92666 does not improve AUC. Reverting changes.
Training on augumented user 50485 13/50 current_auc = 0.25
User 50485 AUC after training: 0.25
User 50485 does not improve AUC. Reverting changes.
Training on augumented user 31585 14/50 current_auc = 0.25
User 31585 AUC after training: 0.25
User 31585 does not improve AUC. Reverting changes.
Training on augumented user 53432 15/50 current_auc = 0.25
User 53432 AUC after training: 0.25
User 53432 does not improve AUC. Reverting changes.
Training on augumented user 80635 16/50 current_auc = 0.25
User 80635 AUC after training: 0.25
User 80635 does not improve AUC. Reverting changes.
Training on augumented user 105382 17/50 current_auc = 0.25
User 105382 AUC after training: 0.25
User 105382 does not improve AUC. Reverting changes.
Training on augumented user 7056 18/50 current_auc = 0.25
User 7056 AUC after training: 0.25
User 7056 does not improve AUC. Reverting changes.
Training on augumented user 103995 19/50 current_auc = 0.25
User 103995 AUC after training: 0.25
User 103995 does not improve AUC. Reverting changes.
Training on augumented user 32396 20/50 current_auc = 0.25
User 32396 AUC after training: 0.25
User 32396 does not improve AUC. Reverting changes.
Training on augumented user 41113 21/50 current_auc = 0.25
User 41113 AUC after training: 0.25
User 41113 does not improve AUC. Reverting changes.
Training on augumented user 52593 22/50 current_auc = 0.25
User 52593 AUC after training: 0.25
User 52593 does not improve AUC. Reverting changes.
Training on augumented user 136506 23/50 current_auc = 0.25
User 136506 AUC after training: 0.25
User 136506 does not improve AUC. Reverting changes.
Training on augumented user 25618 24/50 current_auc = 0.25
User 25618 AUC after training: 0.25
User 25618 does not improve AUC. Reverting changes.
Training on augumented user 25405 25/50 current_auc = 0.25
User 25405 AUC after training: 0.25
User 25405 does not improve AUC. Reverting changes.
Training on augumented user 19070 26/50 current_auc = 0.25
User 19070 AUC after training: 0.25
User 19070 does not improve AUC. Reverting changes.
Training on augumented user 104764 27/50 current_auc = 0.25
User 104764 AUC after training: 0.25
User 104764 does not improve AUC. Reverting changes.
Training on augumented user 92433 28/50 current_auc = 0.25
User 92433 AUC after training: 0.25
User 92433 does not improve AUC. Reverting changes.
Training on augumented user 129789 29/50 current_auc = 0.25
User 129789 AUC after training: 0.25
User 129789 does not improve AUC. Reverting changes.
Training on augumented user 67784 30/50 current_auc = 0.25
User 67784 AUC after training: 0.25
User 67784 does not improve AUC. Reverting changes.
Training on augumented user 43110 31/50 current_auc = 0.25
User 43110 AUC after training: 0.25
User 43110 does not improve AUC. Reverting changes.
Training on augumented user 131961 32/50 current_auc = 0.25
User 131961 AUC after training: 0.25
User 131961 does not improve AUC. Reverting changes.
Training on augumented user 2293 33/50 current_auc = 0.25
User 2293 AUC after training: 0.25
User 2293 does not improve AUC. Reverting changes.
Training on augumented user 19104 34/50 current_auc = 0.25
User 19104 AUC after training: 0.25
User 19104 does not improve AUC. Reverting changes.
Training on augumented user 116415 35/50 current_auc = 0.25
User 116415 AUC after training: 0.25
User 116415 does not improve AUC. Reverting changes.
Training on augumented user 131063 36/50 current_auc = 0.25
User 131063 AUC after training: 0.25
User 131063 does not improve AUC. Reverting changes.
Training on augumented user 19443 37/50 current_auc = 0.25
User 19443 AUC after training: 0.25
User 19443 does not improve AUC. Reverting changes.
Training on augumented user 50518 38/50 current_auc = 0.25
User 50518 AUC after training: 0.25
User 50518 does not improve AUC. Reverting changes.
Training on augumented user 27394 39/50 current_auc = 0.25
User 27394 AUC after training: 0.25
User 27394 does not improve AUC. Reverting changes.
Training on augumented user 137068 40/50 current_auc = 0.25
User 137068 AUC after training: 0.25
User 137068 does not improve AUC. Reverting changes.
Training on augumented user 73806 41/50 current_auc = 0.25
User 73806 AUC after training: 0.25
User 73806 does not improve AUC. Reverting changes.
Training on augumented user 33329 42/50 current_auc = 0.25
User 33329 AUC after training: 0.25
User 33329 does not improve AUC. Reverting changes.
Training on augumented user 123219 43/50 current_auc = 0.25
User 123219 AUC after training: 0.25
User 123219 does not improve AUC. Reverting changes.
Training on augumented user 129615 44/50 current_auc = 0.25
User 129615 AUC after training: 0.25
User 129615 does not improve AUC. Reverting changes.
Training on augumented user 83618 45/50 current_auc = 0.25
User 83618 AUC after training: 0.25
User 83618 does not improve AUC. Reverting changes.
Training on augumented user 55621 46/50 current_auc = 0.25
User 55621 AUC after training: 0.25
User 55621 does not improve AUC. Reverting changes.
Training on augumented user 4426 47/50 current_auc = 0.25
User 4426 AUC after training: 0.25
User 4426 does not improve AUC. Reverting changes.
Training on augumented user 14447 48/50 current_auc = 0.25
User 14447 AUC after training: 0.25
User 14447 does not improve AUC. Reverting changes.
Training on augumented user 134583 49/50 current_auc = 0.25
User 134583 AUC after training: 0.25
User 134583 does not improve AUC. Reverting changes.
[2024-12-02 20:06:54.998024] start test user 131051 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:55.401324] start test user 131051 274/567 recall augumented users by random, augumented_users = [90623, 110646, 95167, 5127, 27043, 9351, 87688, 117349, 38550, 56425, 134386, 40246, 1205, 59715, 104304, 77563, 20331, 133537, 81418, 77669, 75280, 13493, 86815, 125508, 2100, 84004, 112838, 32140, 83803, 107390, 5764, 6347, 33853, 14327, 117789, 106170, 40476, 52585, 12347, 132999, 1432, 95386, 33112, 108929, 617, 134537, 127569, 2781, 57008, 137779]
[2024-12-02 20:06:55.415573] user = 131051 Cloud 274/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:55.421982] user = 131051 Local 274/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:55.456052] user = 131051 Local+ 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:58.088199] user = 131051 MPDA- 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 90623 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90623 AUC after training: 0.5
User 90623 does not improve AUC. Reverting changes.
Training on augumented user 110646 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110646 AUC after training: 0.5
User 110646 does not improve AUC. Reverting changes.
Training on augumented user 95167 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95167 AUC after training: 0.5
User 95167 does not improve AUC. Reverting changes.
Training on augumented user 5127 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5127 AUC after training: 0.5
User 5127 does not improve AUC. Reverting changes.
Training on augumented user 27043 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27043 AUC after training: 0.5
User 27043 does not improve AUC. Reverting changes.
Training on augumented user 9351 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9351 AUC after training: 0.5
User 9351 does not improve AUC. Reverting changes.
Training on augumented user 87688 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87688 AUC after training: 0.5
User 87688 does not improve AUC. Reverting changes.
Training on augumented user 117349 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117349 AUC after training: 0.5
User 117349 does not improve AUC. Reverting changes.
Training on augumented user 38550 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38550 AUC after training: 0.5
User 38550 does not improve AUC. Reverting changes.
Training on augumented user 56425 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56425 AUC after training: 0.5
User 56425 does not improve AUC. Reverting changes.
Training on augumented user 134386 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134386 AUC after training: 0.5
User 134386 does not improve AUC. Reverting changes.
Training on augumented user 40246 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40246 AUC after training: 0.5
User 40246 does not improve AUC. Reverting changes.
Training on augumented user 1205 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1205 AUC after training: 0.5
User 1205 does not improve AUC. Reverting changes.
Training on augumented user 59715 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59715 AUC after training: 0.5
User 59715 does not improve AUC. Reverting changes.
Training on augumented user 104304 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104304 AUC after training: 0.5
User 104304 does not improve AUC. Reverting changes.
Training on augumented user 77563 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77563 AUC after training: 0.5
User 77563 does not improve AUC. Reverting changes.
Training on augumented user 20331 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20331 AUC after training: 0.5
User 20331 does not improve AUC. Reverting changes.
Training on augumented user 133537 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133537 AUC after training: 0.5
User 133537 does not improve AUC. Reverting changes.
Training on augumented user 81418 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81418 AUC after training: 0.5
User 81418 does not improve AUC. Reverting changes.
Training on augumented user 77669 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77669 AUC after training: 0.5
User 77669 does not improve AUC. Reverting changes.
Training on augumented user 75280 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75280 AUC after training: 0.5
User 75280 does not improve AUC. Reverting changes.
Training on augumented user 13493 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13493 AUC after training: 0.5
User 13493 does not improve AUC. Reverting changes.
Training on augumented user 86815 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86815 AUC after training: 0.5
User 86815 does not improve AUC. Reverting changes.
Training on augumented user 125508 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125508 AUC after training: 0.5
User 125508 does not improve AUC. Reverting changes.
Training on augumented user 2100 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2100 AUC after training: 0.5
User 2100 does not improve AUC. Reverting changes.
Training on augumented user 84004 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84004 AUC after training: 0.5
User 84004 does not improve AUC. Reverting changes.
Training on augumented user 112838 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112838 AUC after training: 0.5
User 112838 does not improve AUC. Reverting changes.
Training on augumented user 32140 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32140 AUC after training: 0.5
User 32140 does not improve AUC. Reverting changes.
Training on augumented user 83803 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83803 AUC after training: 0.5
User 83803 does not improve AUC. Reverting changes.
Training on augumented user 107390 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107390 AUC after training: 0.5
User 107390 does not improve AUC. Reverting changes.
Training on augumented user 5764 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5764 AUC after training: 0.5
User 5764 does not improve AUC. Reverting changes.
Training on augumented user 6347 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6347 AUC after training: 0.5
User 6347 does not improve AUC. Reverting changes.
Training on augumented user 33853 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33853 AUC after training: 0.5
User 33853 does not improve AUC. Reverting changes.
Training on augumented user 14327 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14327 AUC after training: 0.5
User 14327 does not improve AUC. Reverting changes.
Training on augumented user 117789 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117789 AUC after training: 0.5
User 117789 does not improve AUC. Reverting changes.
Training on augumented user 106170 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106170 AUC after training: 0.5
User 106170 does not improve AUC. Reverting changes.
Training on augumented user 40476 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40476 AUC after training: 0.5
User 40476 does not improve AUC. Reverting changes.
Training on augumented user 52585 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52585 AUC after training: 0.5
User 52585 does not improve AUC. Reverting changes.
Training on augumented user 12347 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12347 AUC after training: 0.5
User 12347 does not improve AUC. Reverting changes.
Training on augumented user 132999 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132999 AUC after training: 0.5
User 132999 does not improve AUC. Reverting changes.
Training on augumented user 1432 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1432 AUC after training: 0.5
User 1432 does not improve AUC. Reverting changes.
Training on augumented user 95386 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95386 AUC after training: 0.5
User 95386 does not improve AUC. Reverting changes.
Training on augumented user 33112 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33112 AUC after training: 0.5
User 33112 does not improve AUC. Reverting changes.
Training on augumented user 108929 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108929 AUC after training: 0.5
User 108929 does not improve AUC. Reverting changes.
Training on augumented user 617 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 617 AUC after training: 0.5
User 617 does not improve AUC. Reverting changes.
Training on augumented user 134537 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134537 AUC after training: 0.5
User 134537 does not improve AUC. Reverting changes.
Training on augumented user 127569 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127569 AUC after training: 0.5
User 127569 does not improve AUC. Reverting changes.
Training on augumented user 2781 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2781 AUC after training: 0.5
User 2781 does not improve AUC. Reverting changes.
Training on augumented user 57008 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57008 AUC after training: 0.5
User 57008 does not improve AUC. Reverting changes.
Training on augumented user 137779 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137779 AUC after training: 0.5
User 137779 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:27.976375] start test user 131068 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:28.393013] start test user 131068 275/567 recall augumented users by random, augumented_users = [134013, 65235, 57337, 66368, 13225, 120434, 123497, 53268, 47783, 11649, 42409, 13468, 72036, 112355, 118954, 119313, 27929, 127990, 64031, 123621, 104490, 120705, 132286, 125424, 54972, 104637, 16619, 64813, 53948, 25649, 118145, 63010, 113739, 112865, 129011, 115446, 50164, 6773, 28087, 93327, 67400, 115600, 57781, 18609, 7102, 83411, 98226, 57072, 74030, 9956]
[2024-12-02 20:07:28.408870] user = 131068 Cloud 275/567
[2024-12-02 20:07:28.428327] user = 131068 Local 275/567
[2024-12-02 20:07:28.508394] user = 131068 Local+ 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:30.350699] user = 131068 MPDA- 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7099882491186839
Training on augumented user 134013 0/50 current_auc = 0.7099882491186839
User 134013 AUC after training: 0.7099882491186839
User 134013 does not improve AUC. Reverting changes.
Training on augumented user 65235 1/50 current_auc = 0.7099882491186839
User 65235 AUC after training: 0.7099882491186839
User 65235 does not improve AUC. Reverting changes.
Training on augumented user 57337 2/50 current_auc = 0.7099882491186839
User 57337 AUC after training: 0.7097532314923619
User 57337 does not improve AUC. Reverting changes.
Training on augumented user 66368 3/50 current_auc = 0.7099882491186839
User 66368 AUC after training: 0.7090481786133961
User 66368 does not improve AUC. Reverting changes.
Training on augumented user 13225 4/50 current_auc = 0.7099882491186839
User 13225 AUC after training: 0.70951821386604
User 13225 does not improve AUC. Reverting changes.
Training on augumented user 120434 5/50 current_auc = 0.7099882491186839
User 120434 AUC after training: 0.7099882491186839
User 120434 does not improve AUC. Reverting changes.
Training on augumented user 123497 6/50 current_auc = 0.7099882491186839
User 123497 AUC after training: 0.7090481786133961
User 123497 does not improve AUC. Reverting changes.
Training on augumented user 53268 7/50 current_auc = 0.7099882491186839
User 53268 AUC after training: 0.7097532314923619
User 53268 does not improve AUC. Reverting changes.
Training on augumented user 47783 8/50 current_auc = 0.7099882491186839
User 47783 AUC after training: 0.7097532314923619
User 47783 does not improve AUC. Reverting changes.
Training on augumented user 11649 9/50 current_auc = 0.7099882491186839
User 11649 AUC after training: 0.7097532314923619
User 11649 does not improve AUC. Reverting changes.
Training on augumented user 42409 10/50 current_auc = 0.7099882491186839
User 42409 AUC after training: 0.7097532314923619
User 42409 does not improve AUC. Reverting changes.
Training on augumented user 13468 11/50 current_auc = 0.7099882491186839
User 13468 AUC after training: 0.7099882491186839
User 13468 does not improve AUC. Reverting changes.
Training on augumented user 72036 12/50 current_auc = 0.7099882491186839
User 72036 AUC after training: 0.709283196239718
User 72036 does not improve AUC. Reverting changes.
Training on augumented user 112355 13/50 current_auc = 0.7099882491186839
User 112355 AUC after training: 0.7069330199764983
User 112355 does not improve AUC. Reverting changes.
Training on augumented user 118954 14/50 current_auc = 0.7099882491186839
User 118954 AUC after training: 0.7102232667450059
User 118954 improves AUC. Keeping the model.
Training on augumented user 119313 15/50 current_auc = 0.7102232667450059
User 119313 AUC after training: 0.709048178613396
User 119313 does not improve AUC. Reverting changes.
Training on augumented user 27929 16/50 current_auc = 0.7102232667450059
User 27929 AUC after training: 0.7097532314923619
User 27929 does not improve AUC. Reverting changes.
Training on augumented user 127990 17/50 current_auc = 0.7102232667450059
User 127990 AUC after training: 0.7099882491186839
User 127990 does not improve AUC. Reverting changes.
Training on augumented user 64031 18/50 current_auc = 0.7102232667450059
User 64031 AUC after training: 0.7102232667450059
User 64031 does not improve AUC. Reverting changes.
Training on augumented user 123621 19/50 current_auc = 0.7102232667450059
User 123621 AUC after training: 0.7099882491186839
User 123621 does not improve AUC. Reverting changes.
Training on augumented user 104490 20/50 current_auc = 0.7102232667450059
User 104490 AUC after training: 0.7097532314923619
User 104490 does not improve AUC. Reverting changes.
Training on augumented user 120705 21/50 current_auc = 0.7102232667450059
User 120705 AUC after training: 0.7099882491186839
User 120705 does not improve AUC. Reverting changes.
Training on augumented user 132286 22/50 current_auc = 0.7102232667450059
User 132286 AUC after training: 0.7099882491186839
User 132286 does not improve AUC. Reverting changes.
Training on augumented user 125424 23/50 current_auc = 0.7102232667450059
User 125424 AUC after training: 0.7088131609870741
User 125424 does not improve AUC. Reverting changes.
Training on augumented user 54972 24/50 current_auc = 0.7102232667450059
User 54972 AUC after training: 0.70951821386604
User 54972 does not improve AUC. Reverting changes.
Training on augumented user 104637 25/50 current_auc = 0.7102232667450059
User 104637 AUC after training: 0.7102232667450059
User 104637 does not improve AUC. Reverting changes.
Training on augumented user 16619 26/50 current_auc = 0.7102232667450059
User 16619 AUC after training: 0.7102232667450059
User 16619 does not improve AUC. Reverting changes.
Training on augumented user 64813 27/50 current_auc = 0.7102232667450059
User 64813 AUC after training: 0.708813160987074
User 64813 does not improve AUC. Reverting changes.
Training on augumented user 53948 28/50 current_auc = 0.7102232667450059
User 53948 AUC after training: 0.70951821386604
User 53948 does not improve AUC. Reverting changes.
Training on augumented user 25649 29/50 current_auc = 0.7102232667450059
User 25649 AUC after training: 0.7102232667450059
User 25649 does not improve AUC. Reverting changes.
Training on augumented user 118145 30/50 current_auc = 0.7102232667450059
User 118145 AUC after training: 0.7097532314923619
User 118145 does not improve AUC. Reverting changes.
Training on augumented user 63010 31/50 current_auc = 0.7102232667450059
User 63010 AUC after training: 0.7099882491186839
User 63010 does not improve AUC. Reverting changes.
Training on augumented user 113739 32/50 current_auc = 0.7102232667450059
User 113739 AUC after training: 0.70951821386604
User 113739 does not improve AUC. Reverting changes.
Training on augumented user 112865 33/50 current_auc = 0.7102232667450059
User 112865 AUC after training: 0.7099882491186839
User 112865 does not improve AUC. Reverting changes.
Training on augumented user 129011 34/50 current_auc = 0.7102232667450059
User 129011 AUC after training: 0.70951821386604
User 129011 does not improve AUC. Reverting changes.
Training on augumented user 115446 35/50 current_auc = 0.7102232667450059
User 115446 AUC after training: 0.7102232667450059
User 115446 does not improve AUC. Reverting changes.
Training on augumented user 50164 36/50 current_auc = 0.7102232667450059
User 50164 AUC after training: 0.7097532314923619
User 50164 does not improve AUC. Reverting changes.
Training on augumented user 6773 37/50 current_auc = 0.7102232667450059
User 6773 AUC after training: 0.7102232667450059
User 6773 does not improve AUC. Reverting changes.
Training on augumented user 28087 38/50 current_auc = 0.7102232667450059
User 28087 AUC after training: 0.70951821386604
User 28087 does not improve AUC. Reverting changes.
Training on augumented user 93327 39/50 current_auc = 0.7102232667450059
User 93327 AUC after training: 0.7102232667450059
User 93327 does not improve AUC. Reverting changes.
Training on augumented user 67400 40/50 current_auc = 0.7102232667450059
User 67400 AUC after training: 0.70951821386604
User 67400 does not improve AUC. Reverting changes.
Training on augumented user 115600 41/50 current_auc = 0.7102232667450059
User 115600 AUC after training: 0.7099882491186839
User 115600 does not improve AUC. Reverting changes.
Training on augumented user 57781 42/50 current_auc = 0.7102232667450059
User 57781 AUC after training: 0.7097532314923619
User 57781 does not improve AUC. Reverting changes.
Training on augumented user 18609 43/50 current_auc = 0.7102232667450059
User 18609 AUC after training: 0.7102232667450059
User 18609 does not improve AUC. Reverting changes.
Training on augumented user 7102 44/50 current_auc = 0.7102232667450059
User 7102 AUC after training: 0.709988249118684
User 7102 does not improve AUC. Reverting changes.
Training on augumented user 83411 45/50 current_auc = 0.7102232667450059
User 83411 AUC after training: 0.7099882491186839
User 83411 does not improve AUC. Reverting changes.
Training on augumented user 98226 46/50 current_auc = 0.7102232667450059
User 98226 AUC after training: 0.7102232667450059
User 98226 does not improve AUC. Reverting changes.
Training on augumented user 57072 47/50 current_auc = 0.7102232667450059
User 57072 AUC after training: 0.70951821386604
User 57072 does not improve AUC. Reverting changes.
Training on augumented user 74030 48/50 current_auc = 0.7102232667450059
User 74030 AUC after training: 0.7099882491186839
User 74030 does not improve AUC. Reverting changes.
Training on augumented user 9956 49/50 current_auc = 0.7102232667450059
User 9956 AUC after training: 0.7097532314923619
User 9956 does not improve AUC. Reverting changes.
[2024-12-02 20:08:03.517590] start test user 131132 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:04.055367] start test user 131132 276/567 recall augumented users by random, augumented_users = [49682, 29824, 46981, 7201, 4186, 22097, 24474, 82197, 23365, 46373, 24284, 120641, 55426, 39391, 131648, 13643, 67892, 64780, 137461, 34241, 112497, 95701, 47521, 127048, 87154, 125717, 31923, 13072, 20803, 58767, 49039, 121779, 116449, 44906, 99516, 93352, 28126, 36872, 59915, 41306, 96220, 49858, 58594, 79937, 103192, 85060, 10411, 22565, 138366, 22828]
[2024-12-02 20:08:04.072622] user = 131132 Cloud 276/567
[2024-12-02 20:08:04.088526] user = 131132 Local 276/567
[2024-12-02 20:08:04.135858] user = 131132 Local+ 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:06.627989] user = 131132 MPDA- 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7731481481481481
Training on augumented user 49682 0/50 current_auc = 0.7731481481481481
User 49682 AUC after training: 0.7638888888888888
User 49682 does not improve AUC. Reverting changes.
Training on augumented user 29824 1/50 current_auc = 0.7731481481481481
User 29824 AUC after training: 0.7592592592592593
User 29824 does not improve AUC. Reverting changes.
Training on augumented user 46981 2/50 current_auc = 0.7731481481481481
User 46981 AUC after training: 0.7638888888888888
User 46981 does not improve AUC. Reverting changes.
Training on augumented user 7201 3/50 current_auc = 0.7731481481481481
User 7201 AUC after training: 0.7638888888888888
User 7201 does not improve AUC. Reverting changes.
Training on augumented user 4186 4/50 current_auc = 0.7731481481481481
User 4186 AUC after training: 0.7731481481481481
User 4186 does not improve AUC. Reverting changes.
Training on augumented user 22097 5/50 current_auc = 0.7731481481481481
User 22097 AUC after training: 0.7731481481481481
User 22097 does not improve AUC. Reverting changes.
Training on augumented user 24474 6/50 current_auc = 0.7731481481481481
User 24474 AUC after training: 0.7638888888888888
User 24474 does not improve AUC. Reverting changes.
Training on augumented user 82197 7/50 current_auc = 0.7731481481481481
User 82197 AUC after training: 0.7731481481481481
User 82197 does not improve AUC. Reverting changes.
Training on augumented user 23365 8/50 current_auc = 0.7731481481481481
User 23365 AUC after training: 0.7731481481481481
User 23365 does not improve AUC. Reverting changes.
Training on augumented user 46373 9/50 current_auc = 0.7731481481481481
User 46373 AUC after training: 0.7638888888888888
User 46373 does not improve AUC. Reverting changes.
Training on augumented user 24284 10/50 current_auc = 0.7731481481481481
User 24284 AUC after training: 0.7638888888888888
User 24284 does not improve AUC. Reverting changes.
Training on augumented user 120641 11/50 current_auc = 0.7731481481481481
User 120641 AUC after training: 0.7685185185185186
User 120641 does not improve AUC. Reverting changes.
Training on augumented user 55426 12/50 current_auc = 0.7731481481481481
User 55426 AUC after training: 0.7638888888888888
User 55426 does not improve AUC. Reverting changes.
Training on augumented user 39391 13/50 current_auc = 0.7731481481481481
User 39391 AUC after training: 0.7638888888888888
User 39391 does not improve AUC. Reverting changes.
Training on augumented user 131648 14/50 current_auc = 0.7731481481481481
User 131648 AUC after training: 0.7731481481481481
User 131648 does not improve AUC. Reverting changes.
Training on augumented user 13643 15/50 current_auc = 0.7731481481481481
User 13643 AUC after training: 0.7638888888888888
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 67892 16/50 current_auc = 0.7731481481481481
User 67892 AUC after training: 0.7731481481481481
User 67892 does not improve AUC. Reverting changes.
Training on augumented user 64780 17/50 current_auc = 0.7731481481481481
User 64780 AUC after training: 0.7685185185185186
User 64780 does not improve AUC. Reverting changes.
Training on augumented user 137461 18/50 current_auc = 0.7731481481481481
User 137461 AUC after training: 0.7685185185185186
User 137461 does not improve AUC. Reverting changes.
Training on augumented user 34241 19/50 current_auc = 0.7731481481481481
User 34241 AUC after training: 0.7685185185185186
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 112497 20/50 current_auc = 0.7731481481481481
User 112497 AUC after training: 0.7638888888888888
User 112497 does not improve AUC. Reverting changes.
Training on augumented user 95701 21/50 current_auc = 0.7731481481481481
User 95701 AUC after training: 0.7731481481481481
User 95701 does not improve AUC. Reverting changes.
Training on augumented user 47521 22/50 current_auc = 0.7731481481481481
User 47521 AUC after training: 0.7638888888888888
User 47521 does not improve AUC. Reverting changes.
Training on augumented user 127048 23/50 current_auc = 0.7731481481481481
User 127048 AUC after training: 0.7731481481481481
User 127048 does not improve AUC. Reverting changes.
Training on augumented user 87154 24/50 current_auc = 0.7731481481481481
User 87154 AUC after training: 0.7685185185185186
User 87154 does not improve AUC. Reverting changes.
Training on augumented user 125717 25/50 current_auc = 0.7731481481481481
User 125717 AUC after training: 0.7638888888888888
User 125717 does not improve AUC. Reverting changes.
Training on augumented user 31923 26/50 current_auc = 0.7731481481481481
User 31923 AUC after training: 0.7638888888888888
User 31923 does not improve AUC. Reverting changes.
Training on augumented user 13072 27/50 current_auc = 0.7731481481481481
User 13072 AUC after training: 0.7592592592592593
User 13072 does not improve AUC. Reverting changes.
Training on augumented user 20803 28/50 current_auc = 0.7731481481481481
User 20803 AUC after training: 0.7731481481481481
User 20803 does not improve AUC. Reverting changes.
Training on augumented user 58767 29/50 current_auc = 0.7731481481481481
User 58767 AUC after training: 0.7638888888888888
User 58767 does not improve AUC. Reverting changes.
Training on augumented user 49039 30/50 current_auc = 0.7731481481481481
User 49039 AUC after training: 0.7638888888888888
User 49039 does not improve AUC. Reverting changes.
Training on augumented user 121779 31/50 current_auc = 0.7731481481481481
User 121779 AUC after training: 0.7685185185185186
User 121779 does not improve AUC. Reverting changes.
Training on augumented user 116449 32/50 current_auc = 0.7731481481481481
User 116449 AUC after training: 0.7731481481481481
User 116449 does not improve AUC. Reverting changes.
Training on augumented user 44906 33/50 current_auc = 0.7731481481481481
User 44906 AUC after training: 0.7685185185185186
User 44906 does not improve AUC. Reverting changes.
Training on augumented user 99516 34/50 current_auc = 0.7731481481481481
User 99516 AUC after training: 0.7638888888888888
User 99516 does not improve AUC. Reverting changes.
Training on augumented user 93352 35/50 current_auc = 0.7731481481481481
User 93352 AUC after training: 0.7731481481481481
User 93352 does not improve AUC. Reverting changes.
Training on augumented user 28126 36/50 current_auc = 0.7731481481481481
User 28126 AUC after training: 0.7638888888888888
User 28126 does not improve AUC. Reverting changes.
Training on augumented user 36872 37/50 current_auc = 0.7731481481481481
User 36872 AUC after training: 0.7638888888888888
User 36872 does not improve AUC. Reverting changes.
Training on augumented user 59915 38/50 current_auc = 0.7731481481481481
User 59915 AUC after training: 0.7731481481481481
User 59915 does not improve AUC. Reverting changes.
Training on augumented user 41306 39/50 current_auc = 0.7731481481481481
User 41306 AUC after training: 0.7731481481481481
User 41306 does not improve AUC. Reverting changes.
Training on augumented user 96220 40/50 current_auc = 0.7731481481481481
User 96220 AUC after training: 0.7638888888888888
User 96220 does not improve AUC. Reverting changes.
Training on augumented user 49858 41/50 current_auc = 0.7731481481481481
User 49858 AUC after training: 0.7638888888888888
User 49858 does not improve AUC. Reverting changes.
Training on augumented user 58594 42/50 current_auc = 0.7731481481481481
User 58594 AUC after training: 0.7638888888888888
User 58594 does not improve AUC. Reverting changes.
Training on augumented user 79937 43/50 current_auc = 0.7731481481481481
User 79937 AUC after training: 0.7638888888888888
User 79937 does not improve AUC. Reverting changes.
Training on augumented user 103192 44/50 current_auc = 0.7731481481481481
User 103192 AUC after training: 0.7592592592592593
User 103192 does not improve AUC. Reverting changes.
Training on augumented user 85060 45/50 current_auc = 0.7731481481481481
User 85060 AUC after training: 0.7638888888888888
User 85060 does not improve AUC. Reverting changes.
Training on augumented user 10411 46/50 current_auc = 0.7731481481481481
User 10411 AUC after training: 0.7638888888888888
User 10411 does not improve AUC. Reverting changes.
Training on augumented user 22565 47/50 current_auc = 0.7731481481481481
User 22565 AUC after training: 0.7638888888888888
User 22565 does not improve AUC. Reverting changes.
Training on augumented user 138366 48/50 current_auc = 0.7731481481481481
User 138366 AUC after training: 0.7638888888888888
User 138366 does not improve AUC. Reverting changes.
Training on augumented user 22828 49/50 current_auc = 0.7731481481481481
User 22828 AUC after training: 0.7638888888888888
User 22828 does not improve AUC. Reverting changes.
[2024-12-02 20:08:32.900679] start test user 131138 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:33.314881] start test user 131138 277/567 recall augumented users by random, augumented_users = [40373, 89007, 32950, 14270, 60451, 117855, 125477, 89609, 59226, 5428, 61591, 79366, 3343, 19250, 98050, 84871, 106056, 126435, 37666, 137513, 65126, 71050, 85625, 42599, 35439, 129826, 121732, 23133, 48123, 62891, 115490, 43644, 493, 128244, 58471, 75746, 134223, 103218, 45264, 50243, 129940, 70105, 15413, 136842, 120180, 103179, 112023, 10088, 44246, 137297]
[2024-12-02 20:08:33.329935] user = 131138 Cloud 277/567
[2024-12-02 20:08:33.341875] user = 131138 Local 277/567
[2024-12-02 20:08:33.394300] user = 131138 Local+ 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:35.687443] user = 131138 MPDA- 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7153846153846154
Training on augumented user 40373 0/50 current_auc = 0.7153846153846154
User 40373 AUC after training: 0.7230769230769231
User 40373 improves AUC. Keeping the model.
Training on augumented user 89007 1/50 current_auc = 0.7230769230769231
User 89007 AUC after training: 0.7230769230769231
User 89007 does not improve AUC. Reverting changes.
Training on augumented user 32950 2/50 current_auc = 0.7230769230769231
User 32950 AUC after training: 0.7230769230769231
User 32950 does not improve AUC. Reverting changes.
Training on augumented user 14270 3/50 current_auc = 0.7230769230769231
User 14270 AUC after training: 0.7230769230769231
User 14270 does not improve AUC. Reverting changes.
Training on augumented user 60451 4/50 current_auc = 0.7230769230769231
User 60451 AUC after training: 0.7230769230769231
User 60451 does not improve AUC. Reverting changes.
Training on augumented user 117855 5/50 current_auc = 0.7230769230769231
User 117855 AUC after training: 0.7230769230769231
User 117855 does not improve AUC. Reverting changes.
Training on augumented user 125477 6/50 current_auc = 0.7230769230769231
User 125477 AUC after training: 0.7230769230769231
User 125477 does not improve AUC. Reverting changes.
Training on augumented user 89609 7/50 current_auc = 0.7230769230769231
User 89609 AUC after training: 0.7230769230769231
User 89609 does not improve AUC. Reverting changes.
Training on augumented user 59226 8/50 current_auc = 0.7230769230769231
User 59226 AUC after training: 0.7153846153846154
User 59226 does not improve AUC. Reverting changes.
Training on augumented user 5428 9/50 current_auc = 0.7230769230769231
User 5428 AUC after training: 0.7230769230769231
User 5428 does not improve AUC. Reverting changes.
Training on augumented user 61591 10/50 current_auc = 0.7230769230769231
User 61591 AUC after training: 0.7230769230769231
User 61591 does not improve AUC. Reverting changes.
Training on augumented user 79366 11/50 current_auc = 0.7230769230769231
User 79366 AUC after training: 0.7230769230769231
User 79366 does not improve AUC. Reverting changes.
Training on augumented user 3343 12/50 current_auc = 0.7230769230769231
User 3343 AUC after training: 0.7230769230769231
User 3343 does not improve AUC. Reverting changes.
Training on augumented user 19250 13/50 current_auc = 0.7230769230769231
User 19250 AUC after training: 0.7230769230769231
User 19250 does not improve AUC. Reverting changes.
Training on augumented user 98050 14/50 current_auc = 0.7230769230769231
User 98050 AUC after training: 0.7230769230769231
User 98050 does not improve AUC. Reverting changes.
Training on augumented user 84871 15/50 current_auc = 0.7230769230769231
User 84871 AUC after training: 0.7230769230769231
User 84871 does not improve AUC. Reverting changes.
Training on augumented user 106056 16/50 current_auc = 0.7230769230769231
User 106056 AUC after training: 0.7230769230769231
User 106056 does not improve AUC. Reverting changes.
Training on augumented user 126435 17/50 current_auc = 0.7230769230769231
User 126435 AUC after training: 0.7230769230769231
User 126435 does not improve AUC. Reverting changes.
Training on augumented user 37666 18/50 current_auc = 0.7230769230769231
User 37666 AUC after training: 0.7230769230769231
User 37666 does not improve AUC. Reverting changes.
Training on augumented user 137513 19/50 current_auc = 0.7230769230769231
User 137513 AUC after training: 0.7230769230769231
User 137513 does not improve AUC. Reverting changes.
Training on augumented user 65126 20/50 current_auc = 0.7230769230769231
User 65126 AUC after training: 0.7230769230769231
User 65126 does not improve AUC. Reverting changes.
Training on augumented user 71050 21/50 current_auc = 0.7230769230769231
User 71050 AUC after training: 0.7230769230769231
User 71050 does not improve AUC. Reverting changes.
Training on augumented user 85625 22/50 current_auc = 0.7230769230769231
User 85625 AUC after training: 0.7230769230769231
User 85625 does not improve AUC. Reverting changes.
Training on augumented user 42599 23/50 current_auc = 0.7230769230769231
User 42599 AUC after training: 0.7230769230769231
User 42599 does not improve AUC. Reverting changes.
Training on augumented user 35439 24/50 current_auc = 0.7230769230769231
User 35439 AUC after training: 0.7153846153846154
User 35439 does not improve AUC. Reverting changes.
Training on augumented user 129826 25/50 current_auc = 0.7230769230769231
User 129826 AUC after training: 0.7230769230769231
User 129826 does not improve AUC. Reverting changes.
Training on augumented user 121732 26/50 current_auc = 0.7230769230769231
User 121732 AUC after training: 0.7230769230769231
User 121732 does not improve AUC. Reverting changes.
Training on augumented user 23133 27/50 current_auc = 0.7230769230769231
User 23133 AUC after training: 0.7153846153846154
User 23133 does not improve AUC. Reverting changes.
Training on augumented user 48123 28/50 current_auc = 0.7230769230769231
User 48123 AUC after training: 0.7230769230769231
User 48123 does not improve AUC. Reverting changes.
Training on augumented user 62891 29/50 current_auc = 0.7230769230769231
User 62891 AUC after training: 0.7230769230769231
User 62891 does not improve AUC. Reverting changes.
Training on augumented user 115490 30/50 current_auc = 0.7230769230769231
User 115490 AUC after training: 0.7230769230769231
User 115490 does not improve AUC. Reverting changes.
Training on augumented user 43644 31/50 current_auc = 0.7230769230769231
User 43644 AUC after training: 0.7230769230769231
User 43644 does not improve AUC. Reverting changes.
Training on augumented user 493 32/50 current_auc = 0.7230769230769231
User 493 AUC after training: 0.7230769230769231
User 493 does not improve AUC. Reverting changes.
Training on augumented user 128244 33/50 current_auc = 0.7230769230769231
User 128244 AUC after training: 0.7230769230769231
User 128244 does not improve AUC. Reverting changes.
Training on augumented user 58471 34/50 current_auc = 0.7230769230769231
User 58471 AUC after training: 0.7230769230769231
User 58471 does not improve AUC. Reverting changes.
Training on augumented user 75746 35/50 current_auc = 0.7230769230769231
User 75746 AUC after training: 0.7230769230769231
User 75746 does not improve AUC. Reverting changes.
Training on augumented user 134223 36/50 current_auc = 0.7230769230769231
User 134223 AUC after training: 0.7230769230769231
User 134223 does not improve AUC. Reverting changes.
Training on augumented user 103218 37/50 current_auc = 0.7230769230769231
User 103218 AUC after training: 0.7230769230769231
User 103218 does not improve AUC. Reverting changes.
Training on augumented user 45264 38/50 current_auc = 0.7230769230769231
User 45264 AUC after training: 0.7153846153846154
User 45264 does not improve AUC. Reverting changes.
Training on augumented user 50243 39/50 current_auc = 0.7230769230769231
User 50243 AUC after training: 0.7230769230769231
User 50243 does not improve AUC. Reverting changes.
Training on augumented user 129940 40/50 current_auc = 0.7230769230769231
User 129940 AUC after training: 0.7230769230769231
User 129940 does not improve AUC. Reverting changes.
Training on augumented user 70105 41/50 current_auc = 0.7230769230769231
User 70105 AUC after training: 0.7230769230769231
User 70105 does not improve AUC. Reverting changes.
Training on augumented user 15413 42/50 current_auc = 0.7230769230769231
User 15413 AUC after training: 0.7153846153846154
User 15413 does not improve AUC. Reverting changes.
Training on augumented user 136842 43/50 current_auc = 0.7230769230769231
User 136842 AUC after training: 0.7230769230769231
User 136842 does not improve AUC. Reverting changes.
Training on augumented user 120180 44/50 current_auc = 0.7230769230769231
User 120180 AUC after training: 0.7230769230769231
User 120180 does not improve AUC. Reverting changes.
Training on augumented user 103179 45/50 current_auc = 0.7230769230769231
User 103179 AUC after training: 0.7230769230769231
User 103179 does not improve AUC. Reverting changes.
Training on augumented user 112023 46/50 current_auc = 0.7230769230769231
User 112023 AUC after training: 0.7230769230769231
User 112023 does not improve AUC. Reverting changes.
Training on augumented user 10088 47/50 current_auc = 0.7230769230769231
User 10088 AUC after training: 0.7230769230769231
User 10088 does not improve AUC. Reverting changes.
Training on augumented user 44246 48/50 current_auc = 0.7230769230769231
User 44246 AUC after training: 0.7230769230769231
User 44246 does not improve AUC. Reverting changes.
Training on augumented user 137297 49/50 current_auc = 0.7230769230769231
User 137297 AUC after training: 0.7230769230769231
User 137297 does not improve AUC. Reverting changes.
[2024-12-02 20:09:02.728489] start test user 131153 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:03.375584] start test user 131153 278/567 recall augumented users by random, augumented_users = [44482, 61594, 8998, 104411, 99289, 34229, 134921, 137876, 30389, 1995, 100635, 112738, 26232, 64731, 98037, 1558, 80734, 61016, 12995, 125709, 85666, 56533, 65683, 135561, 68572, 70414, 18552, 118622, 52772, 22010, 46834, 1943, 82404, 65393, 111130, 55755, 77294, 13797, 117352, 987, 127776, 131079, 131020, 77513, 66285, 71696, 7959, 75458, 8870, 62776]
[2024-12-02 20:09:03.391265] user = 131153 Cloud 278/567
[2024-12-02 20:09:03.402896] user = 131153 Local 278/567
[2024-12-02 20:09:03.518193] user = 131153 Local+ 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:06.015442] user = 131153 MPDA- 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4956395348837209
Training on augumented user 44482 0/50 current_auc = 0.4956395348837209
User 44482 AUC after training: 0.49709302325581395
User 44482 improves AUC. Keeping the model.
Training on augumented user 61594 1/50 current_auc = 0.49709302325581395
User 61594 AUC after training: 0.4941860465116279
User 61594 does not improve AUC. Reverting changes.
Training on augumented user 8998 2/50 current_auc = 0.49709302325581395
User 8998 AUC after training: 0.4956395348837209
User 8998 does not improve AUC. Reverting changes.
Training on augumented user 104411 3/50 current_auc = 0.49709302325581395
User 104411 AUC after training: 0.49273255813953487
User 104411 does not improve AUC. Reverting changes.
Training on augumented user 99289 4/50 current_auc = 0.49709302325581395
User 99289 AUC after training: 0.4956395348837209
User 99289 does not improve AUC. Reverting changes.
Training on augumented user 34229 5/50 current_auc = 0.49709302325581395
User 34229 AUC after training: 0.498546511627907
User 34229 improves AUC. Keeping the model.
Training on augumented user 134921 6/50 current_auc = 0.498546511627907
User 134921 AUC after training: 0.5
User 134921 improves AUC. Keeping the model.
Training on augumented user 137876 7/50 current_auc = 0.5
User 137876 AUC after training: 0.5
User 137876 does not improve AUC. Reverting changes.
Training on augumented user 30389 8/50 current_auc = 0.5
User 30389 AUC after training: 0.5
User 30389 does not improve AUC. Reverting changes.
Training on augumented user 1995 9/50 current_auc = 0.5
User 1995 AUC after training: 0.5
User 1995 does not improve AUC. Reverting changes.
Training on augumented user 100635 10/50 current_auc = 0.5
User 100635 AUC after training: 0.49418604651162795
User 100635 does not improve AUC. Reverting changes.
Training on augumented user 112738 11/50 current_auc = 0.5
User 112738 AUC after training: 0.5
User 112738 does not improve AUC. Reverting changes.
Training on augumented user 26232 12/50 current_auc = 0.5
User 26232 AUC after training: 0.4927325581395349
User 26232 does not improve AUC. Reverting changes.
Training on augumented user 64731 13/50 current_auc = 0.5
User 64731 AUC after training: 0.49709302325581395
User 64731 does not improve AUC. Reverting changes.
Training on augumented user 98037 14/50 current_auc = 0.5
User 98037 AUC after training: 0.5
User 98037 does not improve AUC. Reverting changes.
Training on augumented user 1558 15/50 current_auc = 0.5
User 1558 AUC after training: 0.501453488372093
User 1558 improves AUC. Keeping the model.
Training on augumented user 80734 16/50 current_auc = 0.501453488372093
User 80734 AUC after training: 0.49709302325581395
User 80734 does not improve AUC. Reverting changes.
Training on augumented user 61016 17/50 current_auc = 0.501453488372093
User 61016 AUC after training: 0.498546511627907
User 61016 does not improve AUC. Reverting changes.
Training on augumented user 12995 18/50 current_auc = 0.501453488372093
User 12995 AUC after training: 0.5
User 12995 does not improve AUC. Reverting changes.
Training on augumented user 125709 19/50 current_auc = 0.501453488372093
User 125709 AUC after training: 0.501453488372093
User 125709 does not improve AUC. Reverting changes.
Training on augumented user 85666 20/50 current_auc = 0.501453488372093
User 85666 AUC after training: 0.49709302325581395
User 85666 does not improve AUC. Reverting changes.
Training on augumented user 56533 21/50 current_auc = 0.501453488372093
User 56533 AUC after training: 0.497093023255814
User 56533 does not improve AUC. Reverting changes.
Training on augumented user 65683 22/50 current_auc = 0.501453488372093
User 65683 AUC after training: 0.501453488372093
User 65683 does not improve AUC. Reverting changes.
Training on augumented user 135561 23/50 current_auc = 0.501453488372093
User 135561 AUC after training: 0.501453488372093
User 135561 does not improve AUC. Reverting changes.
Training on augumented user 68572 24/50 current_auc = 0.501453488372093
User 68572 AUC after training: 0.501453488372093
User 68572 does not improve AUC. Reverting changes.
Training on augumented user 70414 25/50 current_auc = 0.501453488372093
User 70414 AUC after training: 0.501453488372093
User 70414 does not improve AUC. Reverting changes.
Training on augumented user 18552 26/50 current_auc = 0.501453488372093
User 18552 AUC after training: 0.501453488372093
User 18552 does not improve AUC. Reverting changes.
Training on augumented user 118622 27/50 current_auc = 0.501453488372093
User 118622 AUC after training: 0.49709302325581395
User 118622 does not improve AUC. Reverting changes.
Training on augumented user 52772 28/50 current_auc = 0.501453488372093
User 52772 AUC after training: 0.5
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 22010 29/50 current_auc = 0.501453488372093
User 22010 AUC after training: 0.498546511627907
User 22010 does not improve AUC. Reverting changes.
Training on augumented user 46834 30/50 current_auc = 0.501453488372093
User 46834 AUC after training: 0.5
User 46834 does not improve AUC. Reverting changes.
Training on augumented user 1943 31/50 current_auc = 0.501453488372093
User 1943 AUC after training: 0.501453488372093
User 1943 does not improve AUC. Reverting changes.
Training on augumented user 82404 32/50 current_auc = 0.501453488372093
User 82404 AUC after training: 0.5
User 82404 does not improve AUC. Reverting changes.
Training on augumented user 65393 33/50 current_auc = 0.501453488372093
User 65393 AUC after training: 0.49709302325581395
User 65393 does not improve AUC. Reverting changes.
Training on augumented user 111130 34/50 current_auc = 0.501453488372093
User 111130 AUC after training: 0.498546511627907
User 111130 does not improve AUC. Reverting changes.
Training on augumented user 55755 35/50 current_auc = 0.501453488372093
User 55755 AUC after training: 0.501453488372093
User 55755 does not improve AUC. Reverting changes.
Training on augumented user 77294 36/50 current_auc = 0.501453488372093
User 77294 AUC after training: 0.5
User 77294 does not improve AUC. Reverting changes.
Training on augumented user 13797 37/50 current_auc = 0.501453488372093
User 13797 AUC after training: 0.5
User 13797 does not improve AUC. Reverting changes.
Training on augumented user 117352 38/50 current_auc = 0.501453488372093
User 117352 AUC after training: 0.4941860465116279
User 117352 does not improve AUC. Reverting changes.
Training on augumented user 987 39/50 current_auc = 0.501453488372093
User 987 AUC after training: 0.498546511627907
User 987 does not improve AUC. Reverting changes.
Training on augumented user 127776 40/50 current_auc = 0.501453488372093
User 127776 AUC after training: 0.49709302325581395
User 127776 does not improve AUC. Reverting changes.
Training on augumented user 131079 41/50 current_auc = 0.501453488372093
User 131079 AUC after training: 0.49709302325581395
User 131079 does not improve AUC. Reverting changes.
Training on augumented user 131020 42/50 current_auc = 0.501453488372093
User 131020 AUC after training: 0.5
User 131020 does not improve AUC. Reverting changes.
Training on augumented user 77513 43/50 current_auc = 0.501453488372093
User 77513 AUC after training: 0.5
User 77513 does not improve AUC. Reverting changes.
Training on augumented user 66285 44/50 current_auc = 0.501453488372093
User 66285 AUC after training: 0.49418604651162795
User 66285 does not improve AUC. Reverting changes.
Training on augumented user 71696 45/50 current_auc = 0.501453488372093
User 71696 AUC after training: 0.5
User 71696 does not improve AUC. Reverting changes.
Training on augumented user 7959 46/50 current_auc = 0.501453488372093
User 7959 AUC after training: 0.502906976744186
User 7959 improves AUC. Keeping the model.
Training on augumented user 75458 47/50 current_auc = 0.502906976744186
User 75458 AUC after training: 0.501453488372093
User 75458 does not improve AUC. Reverting changes.
Training on augumented user 8870 48/50 current_auc = 0.502906976744186
User 8870 AUC after training: 0.5
User 8870 does not improve AUC. Reverting changes.
Training on augumented user 62776 49/50 current_auc = 0.502906976744186
User 62776 AUC after training: 0.498546511627907
User 62776 does not improve AUC. Reverting changes.
[2024-12-02 20:09:35.700154] start test user 131162 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:36.644980] start test user 131162 279/567 recall augumented users by random, augumented_users = [68490, 17859, 93740, 89152, 77776, 95896, 77709, 99352, 85987, 104216, 68497, 49680, 124573, 107085, 88806, 3231, 56772, 10164, 51007, 6827, 137978, 56418, 59413, 46345, 112067, 30657, 121357, 120443, 93383, 120794, 30601, 37544, 108651, 35647, 103431, 51803, 88158, 65695, 54410, 109243, 35459, 117027, 131743, 84978, 78736, 19808, 125178, 64503, 138052, 54187]
[2024-12-02 20:09:36.662567] user = 131162 Cloud 279/567
[2024-12-02 20:09:36.688867] user = 131162 Local 279/567
[2024-12-02 20:09:36.742817] user = 131162 Local+ 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:39.821418] user = 131162 MPDA- 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.771108443377351
Training on augumented user 68490 0/50 current_auc = 0.771108443377351
User 68490 AUC after training: 0.7716419901293851
User 68490 improves AUC. Keeping the model.
Training on augumented user 17859 1/50 current_auc = 0.7716419901293851
User 17859 AUC after training: 0.7711084433773508
User 17859 does not improve AUC. Reverting changes.
Training on augumented user 93740 2/50 current_auc = 0.7716419901293851
User 93740 AUC after training: 0.771375216753368
User 93740 does not improve AUC. Reverting changes.
Training on augumented user 89152 3/50 current_auc = 0.7716419901293851
User 89152 AUC after training: 0.7723089235694277
User 89152 improves AUC. Keeping the model.
Training on augumented user 77776 4/50 current_auc = 0.7723089235694277
User 77776 AUC after training: 0.7703081232492996
User 77776 does not improve AUC. Reverting changes.
Training on augumented user 95896 5/50 current_auc = 0.7723089235694277
User 95896 AUC after training: 0.7720421501934106
User 95896 does not improve AUC. Reverting changes.
Training on augumented user 77709 6/50 current_auc = 0.7723089235694277
User 77709 AUC after training: 0.7721755368814193
User 77709 does not improve AUC. Reverting changes.
Training on augumented user 99352 7/50 current_auc = 0.7723089235694277
User 99352 AUC after training: 0.7729758570094706
User 99352 improves AUC. Keeping the model.
Training on augumented user 85987 8/50 current_auc = 0.7729758570094706
User 85987 AUC after training: 0.7732426303854875
User 85987 improves AUC. Keeping the model.
Training on augumented user 104216 9/50 current_auc = 0.7732426303854875
User 104216 AUC after training: 0.7725756969454447
User 104216 does not improve AUC. Reverting changes.
Training on augumented user 68497 10/50 current_auc = 0.7732426303854875
User 68497 AUC after training: 0.7728424703214619
User 68497 does not improve AUC. Reverting changes.
Training on augumented user 49680 11/50 current_auc = 0.7732426303854875
User 49680 AUC after training: 0.7734427104175005
User 49680 improves AUC. Keeping the model.
Training on augumented user 124573 12/50 current_auc = 0.7734427104175005
User 124573 AUC after training: 0.7729758570094705
User 124573 does not improve AUC. Reverting changes.
Training on augumented user 107085 13/50 current_auc = 0.7734427104175005
User 107085 AUC after training: 0.773109243697479
User 107085 does not improve AUC. Reverting changes.
Training on augumented user 88806 14/50 current_auc = 0.7734427104175005
User 88806 AUC after training: 0.7729758570094706
User 88806 does not improve AUC. Reverting changes.
Training on augumented user 3231 15/50 current_auc = 0.7734427104175005
User 3231 AUC after training: 0.7728424703214619
User 3231 does not improve AUC. Reverting changes.
Training on augumented user 56772 16/50 current_auc = 0.7734427104175005
User 56772 AUC after training: 0.7720421501934107
User 56772 does not improve AUC. Reverting changes.
Training on augumented user 10164 17/50 current_auc = 0.7734427104175005
User 10164 AUC after training: 0.7725756969454449
User 10164 does not improve AUC. Reverting changes.
Training on augumented user 51007 18/50 current_auc = 0.7734427104175005
User 51007 AUC after training: 0.7727090836334534
User 51007 does not improve AUC. Reverting changes.
Training on augumented user 6827 19/50 current_auc = 0.7734427104175005
User 6827 AUC after training: 0.7733760170734961
User 6827 does not improve AUC. Reverting changes.
Training on augumented user 137978 20/50 current_auc = 0.7734427104175005
User 137978 AUC after training: 0.7733760170734961
User 137978 does not improve AUC. Reverting changes.
Training on augumented user 56418 21/50 current_auc = 0.7734427104175005
User 56418 AUC after training: 0.7733760170734961
User 56418 does not improve AUC. Reverting changes.
Training on augumented user 59413 22/50 current_auc = 0.7734427104175005
User 59413 AUC after training: 0.7736427904495131
User 59413 improves AUC. Keeping the model.
Training on augumented user 46345 23/50 current_auc = 0.7736427904495131
User 46345 AUC after training: 0.7737761771375217
User 46345 improves AUC. Keeping the model.
Training on augumented user 112067 24/50 current_auc = 0.7737761771375217
User 112067 AUC after training: 0.773642790449513
User 112067 does not improve AUC. Reverting changes.
Training on augumented user 30657 25/50 current_auc = 0.7737761771375217
User 30657 AUC after training: 0.7736427904495131
User 30657 does not improve AUC. Reverting changes.
Training on augumented user 121357 26/50 current_auc = 0.7737761771375217
User 121357 AUC after training: 0.7732426303854875
User 121357 does not improve AUC. Reverting changes.
Training on augumented user 120443 27/50 current_auc = 0.7737761771375217
User 120443 AUC after training: 0.7736427904495132
User 120443 does not improve AUC. Reverting changes.
Training on augumented user 93383 28/50 current_auc = 0.7737761771375217
User 93383 AUC after training: 0.773109243697479
User 93383 does not improve AUC. Reverting changes.
Training on augumented user 120794 29/50 current_auc = 0.7737761771375217
User 120794 AUC after training: 0.7732426303854875
User 120794 does not improve AUC. Reverting changes.
Training on augumented user 30601 30/50 current_auc = 0.7737761771375217
User 30601 AUC after training: 0.7735094037615046
User 30601 does not improve AUC. Reverting changes.
Training on augumented user 37544 31/50 current_auc = 0.7737761771375217
User 37544 AUC after training: 0.7729758570094706
User 37544 does not improve AUC. Reverting changes.
Training on augumented user 108651 32/50 current_auc = 0.7737761771375217
User 108651 AUC after training: 0.7727090836334534
User 108651 does not improve AUC. Reverting changes.
Training on augumented user 35647 33/50 current_auc = 0.7737761771375217
User 35647 AUC after training: 0.7729091636654662
User 35647 does not improve AUC. Reverting changes.
Training on augumented user 103431 34/50 current_auc = 0.7737761771375217
User 103431 AUC after training: 0.7740429505135388
User 103431 improves AUC. Keeping the model.
Training on augumented user 51803 35/50 current_auc = 0.7740429505135388
User 51803 AUC after training: 0.7741763372015473
User 51803 improves AUC. Keeping the model.
Training on augumented user 88158 36/50 current_auc = 0.7741763372015473
User 88158 AUC after training: 0.7741763372015473
User 88158 does not improve AUC. Reverting changes.
Training on augumented user 65695 37/50 current_auc = 0.7741763372015473
User 65695 AUC after training: 0.7740429505135388
User 65695 does not improve AUC. Reverting changes.
Training on augumented user 54410 38/50 current_auc = 0.7741763372015473
User 54410 AUC after training: 0.7740429505135388
User 54410 does not improve AUC. Reverting changes.
Training on augumented user 109243 39/50 current_auc = 0.7741763372015473
User 109243 AUC after training: 0.773376017073496
User 109243 does not improve AUC. Reverting changes.
Training on augumented user 35459 40/50 current_auc = 0.7741763372015473
User 35459 AUC after training: 0.7743097238895559
User 35459 improves AUC. Keeping the model.
Training on augumented user 117027 41/50 current_auc = 0.7743097238895559
User 117027 AUC after training: 0.7734427104175002
User 117027 does not improve AUC. Reverting changes.
Training on augumented user 131743 42/50 current_auc = 0.7743097238895559
User 131743 AUC after training: 0.7739095638255302
User 131743 does not improve AUC. Reverting changes.
Training on augumented user 84978 43/50 current_auc = 0.7743097238895559
User 84978 AUC after training: 0.7739095638255301
User 84978 does not improve AUC. Reverting changes.
Training on augumented user 78736 44/50 current_auc = 0.7743097238895559
User 78736 AUC after training: 0.7743097238895559
User 78736 does not improve AUC. Reverting changes.
Training on augumented user 19808 45/50 current_auc = 0.7743097238895559
User 19808 AUC after training: 0.773376017073496
User 19808 does not improve AUC. Reverting changes.
Training on augumented user 125178 46/50 current_auc = 0.7743097238895559
User 125178 AUC after training: 0.7748432706415901
User 125178 improves AUC. Keeping the model.
Training on augumented user 64503 47/50 current_auc = 0.7748432706415901
User 64503 AUC after training: 0.7755102040816325
User 64503 improves AUC. Keeping the model.
Training on augumented user 138052 48/50 current_auc = 0.7755102040816325
User 138052 AUC after training: 0.7749766573295985
User 138052 does not improve AUC. Reverting changes.
Training on augumented user 54187 49/50 current_auc = 0.7755102040816325
User 54187 AUC after training: 0.7747098839535814
User 54187 does not improve AUC. Reverting changes.
[2024-12-02 20:10:06.257765] start test user 131168 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:06.763041] start test user 131168 280/567 recall augumented users by random, augumented_users = [114287, 87114, 117478, 49972, 118073, 22498, 20038, 118163, 124808, 79511, 132450, 20335, 72560, 91047, 64628, 111394, 37880, 107127, 115755, 123561, 94494, 136433, 4441, 59052, 29809, 46322, 64214, 60497, 59602, 22549, 80249, 44155, 118557, 16887, 105711, 33372, 5803, 95701, 37788, 52235, 131119, 129847, 134211, 1472, 16342, 120127, 67667, 5330, 73976, 92297]
[2024-12-02 20:10:06.778678] user = 131168 Cloud 280/567
[2024-12-02 20:10:06.791293] user = 131168 Local 280/567
[2024-12-02 20:10:06.840756] user = 131168 Local+ 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:08.785723] user = 131168 MPDA- 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6385674931129477
Training on augumented user 114287 0/50 current_auc = 0.6385674931129477
User 114287 AUC after training: 0.6369146005509643
User 114287 does not improve AUC. Reverting changes.
Training on augumented user 87114 1/50 current_auc = 0.6385674931129477
User 87114 AUC after training: 0.6393939393939394
User 87114 improves AUC. Keeping the model.
Training on augumented user 117478 2/50 current_auc = 0.6393939393939394
User 117478 AUC after training: 0.6413223140495867
User 117478 improves AUC. Keeping the model.
Training on augumented user 49972 3/50 current_auc = 0.6413223140495867
User 49972 AUC after training: 0.6413223140495867
User 49972 does not improve AUC. Reverting changes.
Training on augumented user 118073 4/50 current_auc = 0.6413223140495867
User 118073 AUC after training: 0.643526170798898
User 118073 improves AUC. Keeping the model.
Training on augumented user 22498 5/50 current_auc = 0.643526170798898
User 22498 AUC after training: 0.6415977961432506
User 22498 does not improve AUC. Reverting changes.
Training on augumented user 20038 6/50 current_auc = 0.643526170798898
User 20038 AUC after training: 0.6410468319559228
User 20038 does not improve AUC. Reverting changes.
Training on augumented user 118163 7/50 current_auc = 0.643526170798898
User 118163 AUC after training: 0.6418732782369145
User 118163 does not improve AUC. Reverting changes.
Training on augumented user 124808 8/50 current_auc = 0.643526170798898
User 124808 AUC after training: 0.6429752066115704
User 124808 does not improve AUC. Reverting changes.
Training on augumented user 79511 9/50 current_auc = 0.643526170798898
User 79511 AUC after training: 0.643250688705234
User 79511 does not improve AUC. Reverting changes.
Training on augumented user 132450 10/50 current_auc = 0.643526170798898
User 132450 AUC after training: 0.6418732782369145
User 132450 does not improve AUC. Reverting changes.
Training on augumented user 20335 11/50 current_auc = 0.643526170798898
User 20335 AUC after training: 0.6391184573002755
User 20335 does not improve AUC. Reverting changes.
Training on augumented user 72560 12/50 current_auc = 0.643526170798898
User 72560 AUC after training: 0.643801652892562
User 72560 improves AUC. Keeping the model.
Training on augumented user 91047 13/50 current_auc = 0.643801652892562
User 91047 AUC after training: 0.6451790633608815
User 91047 improves AUC. Keeping the model.
Training on augumented user 64628 14/50 current_auc = 0.6451790633608815
User 64628 AUC after training: 0.643526170798898
User 64628 does not improve AUC. Reverting changes.
Training on augumented user 111394 15/50 current_auc = 0.6451790633608815
User 111394 AUC after training: 0.6443526170798899
User 111394 does not improve AUC. Reverting changes.
Training on augumented user 37880 16/50 current_auc = 0.6451790633608815
User 37880 AUC after training: 0.6443526170798898
User 37880 does not improve AUC. Reverting changes.
Training on augumented user 107127 17/50 current_auc = 0.6451790633608815
User 107127 AUC after training: 0.6438016528925619
User 107127 does not improve AUC. Reverting changes.
Training on augumented user 115755 18/50 current_auc = 0.6451790633608815
User 115755 AUC after training: 0.6454545454545455
User 115755 improves AUC. Keeping the model.
Training on augumented user 123561 19/50 current_auc = 0.6454545454545455
User 123561 AUC after training: 0.6446280991735538
User 123561 does not improve AUC. Reverting changes.
Training on augumented user 94494 20/50 current_auc = 0.6454545454545455
User 94494 AUC after training: 0.6446280991735537
User 94494 does not improve AUC. Reverting changes.
Training on augumented user 136433 21/50 current_auc = 0.6454545454545455
User 136433 AUC after training: 0.6462809917355372
User 136433 improves AUC. Keeping the model.
Training on augumented user 4441 22/50 current_auc = 0.6462809917355372
User 4441 AUC after training: 0.6457300275482094
User 4441 does not improve AUC. Reverting changes.
Training on augumented user 59052 23/50 current_auc = 0.6462809917355372
User 59052 AUC after training: 0.6462809917355372
User 59052 does not improve AUC. Reverting changes.
Training on augumented user 29809 24/50 current_auc = 0.6462809917355372
User 29809 AUC after training: 0.6462809917355372
User 29809 does not improve AUC. Reverting changes.
Training on augumented user 46322 25/50 current_auc = 0.6462809917355372
User 46322 AUC after training: 0.6462809917355372
User 46322 does not improve AUC. Reverting changes.
Training on augumented user 64214 26/50 current_auc = 0.6462809917355372
User 64214 AUC after training: 0.646831955922865
User 64214 improves AUC. Keeping the model.
Training on augumented user 60497 27/50 current_auc = 0.646831955922865
User 60497 AUC after training: 0.6473829201101928
User 60497 improves AUC. Keeping the model.
Training on augumented user 59602 28/50 current_auc = 0.6473829201101928
User 59602 AUC after training: 0.646831955922865
User 59602 does not improve AUC. Reverting changes.
Training on augumented user 22549 29/50 current_auc = 0.6473829201101928
User 22549 AUC after training: 0.6457300275482094
User 22549 does not improve AUC. Reverting changes.
Training on augumented user 80249 30/50 current_auc = 0.6473829201101928
User 80249 AUC after training: 0.646831955922865
User 80249 does not improve AUC. Reverting changes.
Training on augumented user 44155 31/50 current_auc = 0.6473829201101928
User 44155 AUC after training: 0.6473829201101928
User 44155 does not improve AUC. Reverting changes.
Training on augumented user 118557 32/50 current_auc = 0.6473829201101928
User 118557 AUC after training: 0.650137741046832
User 118557 improves AUC. Keeping the model.
Training on augumented user 16887 33/50 current_auc = 0.650137741046832
User 16887 AUC after training: 0.6479338842975206
User 16887 does not improve AUC. Reverting changes.
Training on augumented user 105711 34/50 current_auc = 0.650137741046832
User 105711 AUC after training: 0.649862258953168
User 105711 does not improve AUC. Reverting changes.
Training on augumented user 33372 35/50 current_auc = 0.650137741046832
User 33372 AUC after training: 0.646831955922865
User 33372 does not improve AUC. Reverting changes.
Training on augumented user 5803 36/50 current_auc = 0.650137741046832
User 5803 AUC after training: 0.6473829201101928
User 5803 does not improve AUC. Reverting changes.
Training on augumented user 95701 37/50 current_auc = 0.650137741046832
User 95701 AUC after training: 0.6440771349862259
User 95701 does not improve AUC. Reverting changes.
Training on augumented user 37788 38/50 current_auc = 0.650137741046832
User 37788 AUC after training: 0.6484848484848484
User 37788 does not improve AUC. Reverting changes.
Training on augumented user 52235 39/50 current_auc = 0.650137741046832
User 52235 AUC after training: 0.6484848484848484
User 52235 does not improve AUC. Reverting changes.
Training on augumented user 131119 40/50 current_auc = 0.650137741046832
User 131119 AUC after training: 0.650137741046832
User 131119 does not improve AUC. Reverting changes.
Training on augumented user 129847 41/50 current_auc = 0.650137741046832
User 129847 AUC after training: 0.6487603305785125
User 129847 does not improve AUC. Reverting changes.
Training on augumented user 134211 42/50 current_auc = 0.650137741046832
User 134211 AUC after training: 0.649862258953168
User 134211 does not improve AUC. Reverting changes.
Training on augumented user 1472 43/50 current_auc = 0.650137741046832
User 1472 AUC after training: 0.6504132231404959
User 1472 improves AUC. Keeping the model.
Training on augumented user 16342 44/50 current_auc = 0.6504132231404959
User 16342 AUC after training: 0.6479338842975206
User 16342 does not improve AUC. Reverting changes.
Training on augumented user 120127 45/50 current_auc = 0.6504132231404959
User 120127 AUC after training: 0.6495867768595042
User 120127 does not improve AUC. Reverting changes.
Training on augumented user 67667 46/50 current_auc = 0.6504132231404959
User 67667 AUC after training: 0.6487603305785123
User 67667 does not improve AUC. Reverting changes.
Training on augumented user 5330 47/50 current_auc = 0.6504132231404959
User 5330 AUC after training: 0.6446280991735538
User 5330 does not improve AUC. Reverting changes.
Training on augumented user 73976 48/50 current_auc = 0.6504132231404959
User 73976 AUC after training: 0.6490358126721762
User 73976 does not improve AUC. Reverting changes.
Training on augumented user 92297 49/50 current_auc = 0.6504132231404959
User 92297 AUC after training: 0.6490358126721762
User 92297 does not improve AUC. Reverting changes.
[2024-12-02 20:10:35.671679] start test user 131173 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:36.079265] start test user 131173 281/567 recall augumented users by random, augumented_users = [131626, 110084, 51521, 56136, 137691, 53921, 50099, 73933, 26513, 83538, 116882, 58740, 79412, 8245, 80380, 39748, 111002, 87945, 73511, 134645, 40973, 84211, 41224, 79911, 127780, 50597, 4710, 102269, 123674, 59241, 136849, 118830, 104314, 33088, 122263, 123643, 125402, 43100, 16093, 2881, 4942, 108108, 21858, 76968, 92541, 8258, 76573, 37152, 37223, 105173]
[2024-12-02 20:10:36.094372] user = 131173 Cloud 281/567
[2024-12-02 20:10:36.105115] user = 131173 Local 281/567
[2024-12-02 20:10:36.163729] user = 131173 Local+ 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:38.611074] user = 131173 MPDA- 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8526785714285714
Training on augumented user 131626 0/50 current_auc = 0.8526785714285714
User 131626 AUC after training: 0.8511904761904762
User 131626 does not improve AUC. Reverting changes.
Training on augumented user 110084 1/50 current_auc = 0.8526785714285714
User 110084 AUC after training: 0.8526785714285714
User 110084 does not improve AUC. Reverting changes.
Training on augumented user 51521 2/50 current_auc = 0.8526785714285714
User 51521 AUC after training: 0.8526785714285714
User 51521 does not improve AUC. Reverting changes.
Training on augumented user 56136 3/50 current_auc = 0.8526785714285714
User 56136 AUC after training: 0.8526785714285714
User 56136 does not improve AUC. Reverting changes.
Training on augumented user 137691 4/50 current_auc = 0.8526785714285714
User 137691 AUC after training: 0.8526785714285714
User 137691 does not improve AUC. Reverting changes.
Training on augumented user 53921 5/50 current_auc = 0.8526785714285714
User 53921 AUC after training: 0.8526785714285714
User 53921 does not improve AUC. Reverting changes.
Training on augumented user 50099 6/50 current_auc = 0.8526785714285714
User 50099 AUC after training: 0.8526785714285714
User 50099 does not improve AUC. Reverting changes.
Training on augumented user 73933 7/50 current_auc = 0.8526785714285714
User 73933 AUC after training: 0.8526785714285714
User 73933 does not improve AUC. Reverting changes.
Training on augumented user 26513 8/50 current_auc = 0.8526785714285714
User 26513 AUC after training: 0.8526785714285714
User 26513 does not improve AUC. Reverting changes.
Training on augumented user 83538 9/50 current_auc = 0.8526785714285714
User 83538 AUC after training: 0.8526785714285714
User 83538 does not improve AUC. Reverting changes.
Training on augumented user 116882 10/50 current_auc = 0.8526785714285714
User 116882 AUC after training: 0.8526785714285714
User 116882 does not improve AUC. Reverting changes.
Training on augumented user 58740 11/50 current_auc = 0.8526785714285714
User 58740 AUC after training: 0.8511904761904762
User 58740 does not improve AUC. Reverting changes.
Training on augumented user 79412 12/50 current_auc = 0.8526785714285714
User 79412 AUC after training: 0.8511904761904762
User 79412 does not improve AUC. Reverting changes.
Training on augumented user 8245 13/50 current_auc = 0.8526785714285714
User 8245 AUC after training: 0.8511904761904762
User 8245 does not improve AUC. Reverting changes.
Training on augumented user 80380 14/50 current_auc = 0.8526785714285714
User 80380 AUC after training: 0.8526785714285714
User 80380 does not improve AUC. Reverting changes.
Training on augumented user 39748 15/50 current_auc = 0.8526785714285714
User 39748 AUC after training: 0.8511904761904762
User 39748 does not improve AUC. Reverting changes.
Training on augumented user 111002 16/50 current_auc = 0.8526785714285714
User 111002 AUC after training: 0.8526785714285714
User 111002 does not improve AUC. Reverting changes.
Training on augumented user 87945 17/50 current_auc = 0.8526785714285714
User 87945 AUC after training: 0.8526785714285714
User 87945 does not improve AUC. Reverting changes.
Training on augumented user 73511 18/50 current_auc = 0.8526785714285714
User 73511 AUC after training: 0.8511904761904762
User 73511 does not improve AUC. Reverting changes.
Training on augumented user 134645 19/50 current_auc = 0.8526785714285714
User 134645 AUC after training: 0.8541666666666666
User 134645 improves AUC. Keeping the model.
Training on augumented user 40973 20/50 current_auc = 0.8541666666666666
User 40973 AUC after training: 0.8541666666666666
User 40973 does not improve AUC. Reverting changes.
Training on augumented user 84211 21/50 current_auc = 0.8541666666666666
User 84211 AUC after training: 0.8541666666666666
User 84211 does not improve AUC. Reverting changes.
Training on augumented user 41224 22/50 current_auc = 0.8541666666666666
User 41224 AUC after training: 0.8541666666666666
User 41224 does not improve AUC. Reverting changes.
Training on augumented user 79911 23/50 current_auc = 0.8541666666666666
User 79911 AUC after training: 0.8541666666666666
User 79911 does not improve AUC. Reverting changes.
Training on augumented user 127780 24/50 current_auc = 0.8541666666666666
User 127780 AUC after training: 0.8511904761904762
User 127780 does not improve AUC. Reverting changes.
Training on augumented user 50597 25/50 current_auc = 0.8541666666666666
User 50597 AUC after training: 0.8526785714285714
User 50597 does not improve AUC. Reverting changes.
Training on augumented user 4710 26/50 current_auc = 0.8541666666666666
User 4710 AUC after training: 0.8526785714285714
User 4710 does not improve AUC. Reverting changes.
Training on augumented user 102269 27/50 current_auc = 0.8541666666666666
User 102269 AUC after training: 0.8541666666666666
User 102269 does not improve AUC. Reverting changes.
Training on augumented user 123674 28/50 current_auc = 0.8541666666666666
User 123674 AUC after training: 0.8526785714285714
User 123674 does not improve AUC. Reverting changes.
Training on augumented user 59241 29/50 current_auc = 0.8541666666666666
User 59241 AUC after training: 0.8541666666666666
User 59241 does not improve AUC. Reverting changes.
Training on augumented user 136849 30/50 current_auc = 0.8541666666666666
User 136849 AUC after training: 0.8541666666666666
User 136849 does not improve AUC. Reverting changes.
Training on augumented user 118830 31/50 current_auc = 0.8541666666666666
User 118830 AUC after training: 0.8541666666666666
User 118830 does not improve AUC. Reverting changes.
Training on augumented user 104314 32/50 current_auc = 0.8541666666666666
User 104314 AUC after training: 0.8556547619047619
User 104314 improves AUC. Keeping the model.
Training on augumented user 33088 33/50 current_auc = 0.8556547619047619
User 33088 AUC after training: 0.8526785714285714
User 33088 does not improve AUC. Reverting changes.
Training on augumented user 122263 34/50 current_auc = 0.8556547619047619
User 122263 AUC after training: 0.8571428571428571
User 122263 improves AUC. Keeping the model.
Training on augumented user 123643 35/50 current_auc = 0.8571428571428571
User 123643 AUC after training: 0.8556547619047619
User 123643 does not improve AUC. Reverting changes.
Training on augumented user 125402 36/50 current_auc = 0.8571428571428571
User 125402 AUC after training: 0.8541666666666666
User 125402 does not improve AUC. Reverting changes.
Training on augumented user 43100 37/50 current_auc = 0.8571428571428571
User 43100 AUC after training: 0.8526785714285714
User 43100 does not improve AUC. Reverting changes.
Training on augumented user 16093 38/50 current_auc = 0.8571428571428571
User 16093 AUC after training: 0.8541666666666666
User 16093 does not improve AUC. Reverting changes.
Training on augumented user 2881 39/50 current_auc = 0.8571428571428571
User 2881 AUC after training: 0.8541666666666666
User 2881 does not improve AUC. Reverting changes.
Training on augumented user 4942 40/50 current_auc = 0.8571428571428571
User 4942 AUC after training: 0.8556547619047619
User 4942 does not improve AUC. Reverting changes.
Training on augumented user 108108 41/50 current_auc = 0.8571428571428571
User 108108 AUC after training: 0.8541666666666666
User 108108 does not improve AUC. Reverting changes.
Training on augumented user 21858 42/50 current_auc = 0.8571428571428571
User 21858 AUC after training: 0.8571428571428571
User 21858 does not improve AUC. Reverting changes.
Training on augumented user 76968 43/50 current_auc = 0.8571428571428571
User 76968 AUC after training: 0.8571428571428571
User 76968 does not improve AUC. Reverting changes.
Training on augumented user 92541 44/50 current_auc = 0.8571428571428571
User 92541 AUC after training: 0.8556547619047619
User 92541 does not improve AUC. Reverting changes.
Training on augumented user 8258 45/50 current_auc = 0.8571428571428571
User 8258 AUC after training: 0.8541666666666666
User 8258 does not improve AUC. Reverting changes.
Training on augumented user 76573 46/50 current_auc = 0.8571428571428571
User 76573 AUC after training: 0.8556547619047619
User 76573 does not improve AUC. Reverting changes.
Training on augumented user 37152 47/50 current_auc = 0.8571428571428571
User 37152 AUC after training: 0.8541666666666666
User 37152 does not improve AUC. Reverting changes.
Training on augumented user 37223 48/50 current_auc = 0.8571428571428571
User 37223 AUC after training: 0.8556547619047619
User 37223 does not improve AUC. Reverting changes.
Training on augumented user 105173 49/50 current_auc = 0.8571428571428571
User 105173 AUC after training: 0.8571428571428571
User 105173 does not improve AUC. Reverting changes.
[2024-12-02 20:11:08.885746] start test user 131204 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:09.306988] start test user 131204 282/567 recall augumented users by random, augumented_users = [47152, 5249, 68341, 102425, 103749, 48274, 110897, 71562, 30907, 98925, 115834, 114612, 69986, 110363, 32471, 71177, 47467, 33783, 63147, 59026, 12613, 56430, 71285, 19209, 31021, 136691, 82269, 86141, 54304, 84364, 62275, 124878, 100969, 12685, 103426, 137013, 84413, 125808, 49476, 79698, 48591, 109152, 89541, 43705, 79362, 116603, 223, 13719, 84307, 83524]
[2024-12-02 20:11:09.322991] user = 131204 Cloud 282/567
[2024-12-02 20:11:09.340245] user = 131204 Local 282/567
[2024-12-02 20:11:09.500769] user = 131204 Local+ 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:12.911711] user = 131204 MPDA- 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5914322250639387
Training on augumented user 47152 0/50 current_auc = 0.5914322250639387
User 47152 AUC after training: 0.5899403239556692
User 47152 does not improve AUC. Reverting changes.
Training on augumented user 5249 1/50 current_auc = 0.5914322250639387
User 5249 AUC after training: 0.5918584825234442
User 5249 improves AUC. Keeping the model.
Training on augumented user 68341 2/50 current_auc = 0.5918584825234442
User 68341 AUC after training: 0.5919650468883206
User 68341 improves AUC. Keeping the model.
Training on augumented user 102425 3/50 current_auc = 0.5919650468883206
User 102425 AUC after training: 0.5927109974424553
User 102425 improves AUC. Keeping the model.
Training on augumented user 103749 4/50 current_auc = 0.5927109974424553
User 103749 AUC after training: 0.5881287297527706
User 103749 does not improve AUC. Reverting changes.
Training on augumented user 48274 5/50 current_auc = 0.5927109974424553
User 48274 AUC after training: 0.5918584825234441
User 48274 does not improve AUC. Reverting changes.
Training on augumented user 110897 6/50 current_auc = 0.5927109974424553
User 110897 AUC after training: 0.5927109974424553
User 110897 does not improve AUC. Reverting changes.
Training on augumented user 71562 7/50 current_auc = 0.5927109974424553
User 71562 AUC after training: 0.5918584825234442
User 71562 does not improve AUC. Reverting changes.
Training on augumented user 30907 8/50 current_auc = 0.5927109974424553
User 30907 AUC after training: 0.5924978687127025
User 30907 does not improve AUC. Reverting changes.
Training on augumented user 98925 9/50 current_auc = 0.5927109974424553
User 98925 AUC after training: 0.5922847399829497
User 98925 does not improve AUC. Reverting changes.
Training on augumented user 115834 10/50 current_auc = 0.5927109974424553
User 115834 AUC after training: 0.5913256606990622
User 115834 does not improve AUC. Reverting changes.
Training on augumented user 114612 11/50 current_auc = 0.5927109974424553
User 114612 AUC after training: 0.5918584825234442
User 114612 does not improve AUC. Reverting changes.
Training on augumented user 69986 12/50 current_auc = 0.5927109974424553
User 69986 AUC after training: 0.5924978687127025
User 69986 does not improve AUC. Reverting changes.
Training on augumented user 110363 13/50 current_auc = 0.5927109974424553
User 110363 AUC after training: 0.5927109974424553
User 110363 does not improve AUC. Reverting changes.
Training on augumented user 32471 14/50 current_auc = 0.5927109974424553
User 32471 AUC after training: 0.592924126172208
User 32471 improves AUC. Keeping the model.
Training on augumented user 71177 15/50 current_auc = 0.592924126172208
User 71177 AUC after training: 0.5931372549019608
User 71177 improves AUC. Keeping the model.
Training on augumented user 47467 16/50 current_auc = 0.5931372549019608
User 47467 AUC after training: 0.592924126172208
User 47467 does not improve AUC. Reverting changes.
Training on augumented user 33783 17/50 current_auc = 0.5931372549019608
User 33783 AUC after training: 0.5922847399829497
User 33783 does not improve AUC. Reverting changes.
Training on augumented user 63147 18/50 current_auc = 0.5931372549019608
User 63147 AUC after training: 0.5881287297527708
User 63147 does not improve AUC. Reverting changes.
Training on augumented user 59026 19/50 current_auc = 0.5931372549019608
User 59026 AUC after training: 0.5935635123614663
User 59026 improves AUC. Keeping the model.
Training on augumented user 12613 20/50 current_auc = 0.5935635123614663
User 12613 AUC after training: 0.592071611253197
User 12613 does not improve AUC. Reverting changes.
Training on augumented user 56430 21/50 current_auc = 0.5935635123614663
User 56430 AUC after training: 0.592924126172208
User 56430 does not improve AUC. Reverting changes.
Training on augumented user 71285 22/50 current_auc = 0.5935635123614663
User 71285 AUC after training: 0.5935635123614663
User 71285 does not improve AUC. Reverting changes.
Training on augumented user 19209 23/50 current_auc = 0.5935635123614663
User 19209 AUC after training: 0.5931372549019608
User 19209 does not improve AUC. Reverting changes.
Training on augumented user 31021 24/50 current_auc = 0.5935635123614663
User 31021 AUC after training: 0.5931372549019608
User 31021 does not improve AUC. Reverting changes.
Training on augumented user 136691 25/50 current_auc = 0.5935635123614663
User 136691 AUC after training: 0.5927109974424553
User 136691 does not improve AUC. Reverting changes.
Training on augumented user 82269 26/50 current_auc = 0.5935635123614663
User 82269 AUC after training: 0.5916453537936914
User 82269 does not improve AUC. Reverting changes.
Training on augumented user 86141 27/50 current_auc = 0.5935635123614663
User 86141 AUC after training: 0.5927109974424553
User 86141 does not improve AUC. Reverting changes.
Training on augumented user 54304 28/50 current_auc = 0.5935635123614663
User 54304 AUC after training: 0.5937766410912191
User 54304 improves AUC. Keeping the model.
Training on augumented user 84364 29/50 current_auc = 0.5937766410912191
User 84364 AUC after training: 0.5919650468883206
User 84364 does not improve AUC. Reverting changes.
Training on augumented user 62275 30/50 current_auc = 0.5937766410912191
User 62275 AUC after training: 0.5935635123614663
User 62275 does not improve AUC. Reverting changes.
Training on augumented user 124878 31/50 current_auc = 0.5937766410912191
User 124878 AUC after training: 0.592071611253197
User 124878 does not improve AUC. Reverting changes.
Training on augumented user 100969 32/50 current_auc = 0.5937766410912191
User 100969 AUC after training: 0.5908994032395567
User 100969 does not improve AUC. Reverting changes.
Training on augumented user 12685 33/50 current_auc = 0.5937766410912191
User 12685 AUC after training: 0.5939897698209718
User 12685 improves AUC. Keeping the model.
Training on augumented user 103426 34/50 current_auc = 0.5939897698209718
User 103426 AUC after training: 0.5933503836317136
User 103426 does not improve AUC. Reverting changes.
Training on augumented user 137013 35/50 current_auc = 0.5939897698209718
User 137013 AUC after training: 0.5931372549019608
User 137013 does not improve AUC. Reverting changes.
Training on augumented user 84413 36/50 current_auc = 0.5939897698209718
User 84413 AUC after training: 0.5924978687127025
User 84413 does not improve AUC. Reverting changes.
Training on augumented user 125808 37/50 current_auc = 0.5939897698209718
User 125808 AUC after training: 0.5939897698209718
User 125808 does not improve AUC. Reverting changes.
Training on augumented user 49476 38/50 current_auc = 0.5939897698209718
User 49476 AUC after training: 0.5933503836317136
User 49476 does not improve AUC. Reverting changes.
Training on augumented user 79698 39/50 current_auc = 0.5939897698209718
User 79698 AUC after training: 0.592924126172208
User 79698 does not improve AUC. Reverting changes.
Training on augumented user 48591 40/50 current_auc = 0.5939897698209718
User 48591 AUC after training: 0.5912190963341859
User 48591 does not improve AUC. Reverting changes.
Training on augumented user 109152 41/50 current_auc = 0.5939897698209718
User 109152 AUC after training: 0.592924126172208
User 109152 does not improve AUC. Reverting changes.
Training on augumented user 89541 42/50 current_auc = 0.5939897698209718
User 89541 AUC after training: 0.5937766410912191
User 89541 does not improve AUC. Reverting changes.
Training on augumented user 43705 43/50 current_auc = 0.5939897698209718
User 43705 AUC after training: 0.5931372549019608
User 43705 does not improve AUC. Reverting changes.
Training on augumented user 79362 44/50 current_auc = 0.5939897698209718
User 79362 AUC after training: 0.592924126172208
User 79362 does not improve AUC. Reverting changes.
Training on augumented user 116603 45/50 current_auc = 0.5939897698209718
User 116603 AUC after training: 0.5914322250639387
User 116603 does not improve AUC. Reverting changes.
Training on augumented user 223 46/50 current_auc = 0.5939897698209718
User 223 AUC after training: 0.592924126172208
User 223 does not improve AUC. Reverting changes.
Training on augumented user 13719 47/50 current_auc = 0.5939897698209718
User 13719 AUC after training: 0.5933503836317136
User 13719 does not improve AUC. Reverting changes.
Training on augumented user 84307 48/50 current_auc = 0.5939897698209718
User 84307 AUC after training: 0.5933503836317136
User 84307 does not improve AUC. Reverting changes.
Training on augumented user 83524 49/50 current_auc = 0.5939897698209718
User 83524 AUC after training: 0.5935635123614663
User 83524 does not improve AUC. Reverting changes.
[2024-12-02 20:11:38.567960] start test user 131227 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:38.981658] start test user 131227 283/567 recall augumented users by random, augumented_users = [81553, 36600, 108134, 136480, 33905, 13344, 106787, 80941, 44539, 94952, 91231, 69894, 54834, 135140, 32004, 35482, 32960, 92453, 41892, 81473, 4401, 57627, 29520, 61207, 79262, 134460, 128057, 2581, 116344, 19807, 89183, 74302, 74881, 6466, 42140, 72027, 49067, 71659, 50545, 58797, 26647, 125902, 68987, 42843, 97634, 60832, 4735, 78303, 4630, 38840]
[2024-12-02 20:11:38.998331] user = 131227 Cloud 283/567
[2024-12-02 20:11:39.023794] user = 131227 Local 283/567
[2024-12-02 20:11:39.174831] user = 131227 Local+ 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:41.176269] user = 131227 MPDA- 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5614634692962797
Training on augumented user 81553 0/50 current_auc = 0.5614634692962797
User 81553 AUC after training: 0.561967727476468
User 81553 improves AUC. Keeping the model.
Training on augumented user 36600 1/50 current_auc = 0.561967727476468
User 36600 AUC after training: 0.5617996414164051
User 36600 does not improve AUC. Reverting changes.
Training on augumented user 108134 2/50 current_auc = 0.561967727476468
User 108134 AUC after training: 0.5622478709099058
User 108134 improves AUC. Keeping the model.
Training on augumented user 136480 3/50 current_auc = 0.5622478709099058
User 136480 AUC after training: 0.5623038995965934
User 136480 improves AUC. Keeping the model.
Training on augumented user 33905 4/50 current_auc = 0.5623038995965934
User 33905 AUC after training: 0.5623599282832811
User 33905 improves AUC. Keeping the model.
Training on augumented user 13344 5/50 current_auc = 0.5623599282832811
User 13344 AUC after training: 0.5626400717167189
User 13344 improves AUC. Keeping the model.
Training on augumented user 106787 6/50 current_auc = 0.5626400717167189
User 106787 AUC after training: 0.5634244733303451
User 106787 improves AUC. Keeping the model.
Training on augumented user 80941 7/50 current_auc = 0.5634244733303451
User 80941 AUC after training: 0.5624159569699686
User 80941 does not improve AUC. Reverting changes.
Training on augumented user 44539 8/50 current_auc = 0.5634244733303451
User 44539 AUC after training: 0.563984760197221
User 44539 improves AUC. Keeping the model.
Training on augumented user 94952 9/50 current_auc = 0.563984760197221
User 94952 AUC after training: 0.563032272523532
User 94952 does not improve AUC. Reverting changes.
Training on augumented user 91231 10/50 current_auc = 0.563984760197221
User 91231 AUC after training: 0.5635925593904079
User 91231 does not improve AUC. Reverting changes.
Training on augumented user 69894 11/50 current_auc = 0.563984760197221
User 69894 AUC after training: 0.5634805020170327
User 69894 does not improve AUC. Reverting changes.
Training on augumented user 54834 12/50 current_auc = 0.563984760197221
User 54834 AUC after training: 0.5639287315105334
User 54834 does not improve AUC. Reverting changes.
Training on augumented user 135140 13/50 current_auc = 0.563984760197221
User 135140 AUC after training: 0.563704616763783
User 135140 does not improve AUC. Reverting changes.
Training on augumented user 32004 14/50 current_auc = 0.563984760197221
User 32004 AUC after training: 0.563984760197221
User 32004 does not improve AUC. Reverting changes.
Training on augumented user 35482 15/50 current_auc = 0.563984760197221
User 35482 AUC after training: 0.563984760197221
User 35482 does not improve AUC. Reverting changes.
Training on augumented user 32960 16/50 current_auc = 0.563984760197221
User 32960 AUC after training: 0.563704616763783
User 32960 does not improve AUC. Reverting changes.
Training on augumented user 92453 17/50 current_auc = 0.563984760197221
User 92453 AUC after training: 0.5639287315105334
User 92453 does not improve AUC. Reverting changes.
Training on augumented user 41892 18/50 current_auc = 0.563984760197221
User 41892 AUC after training: 0.5636766024204393
User 41892 does not improve AUC. Reverting changes.
Training on augumented user 81473 19/50 current_auc = 0.563984760197221
User 81473 AUC after training: 0.5640968175705962
User 81473 improves AUC. Keeping the model.
Training on augumented user 4401 20/50 current_auc = 0.5640968175705962
User 4401 AUC after training: 0.5638166741371582
User 4401 does not improve AUC. Reverting changes.
Training on augumented user 57627 21/50 current_auc = 0.5640968175705962
User 57627 AUC after training: 0.5640968175705962
User 57627 does not improve AUC. Reverting changes.
Training on augumented user 29520 22/50 current_auc = 0.5640968175705962
User 29520 AUC after training: 0.5640407888839086
User 29520 does not improve AUC. Reverting changes.
Training on augumented user 61207 23/50 current_auc = 0.5640968175705962
User 61207 AUC after training: 0.5640968175705962
User 61207 does not improve AUC. Reverting changes.
Training on augumented user 79262 24/50 current_auc = 0.5640968175705962
User 79262 AUC after training: 0.5642649036306588
User 79262 improves AUC. Keeping the model.
Training on augumented user 134460 25/50 current_auc = 0.5642649036306588
User 134460 AUC after training: 0.563032272523532
User 134460 does not improve AUC. Reverting changes.
Training on augumented user 128057 26/50 current_auc = 0.5642649036306588
User 128057 AUC after training: 0.5632003585835947
User 128057 does not improve AUC. Reverting changes.
Training on augumented user 2581 27/50 current_auc = 0.5642649036306588
User 2581 AUC after training: 0.5648812191842223
User 2581 improves AUC. Keeping the model.
Training on augumented user 116344 28/50 current_auc = 0.5648812191842223
User 116344 AUC after training: 0.5645450470640968
User 116344 does not improve AUC. Reverting changes.
Training on augumented user 19807 29/50 current_auc = 0.5648812191842223
User 19807 AUC after training: 0.5651613626176603
User 19807 improves AUC. Keeping the model.
Training on augumented user 89183 30/50 current_auc = 0.5651613626176603
User 89183 AUC after training: 0.5647131331241596
User 89183 does not improve AUC. Reverting changes.
Training on augumented user 74302 31/50 current_auc = 0.5651613626176603
User 74302 AUC after training: 0.5649372478709099
User 74302 does not improve AUC. Reverting changes.
Training on augumented user 74881 32/50 current_auc = 0.5651613626176603
User 74881 AUC after training: 0.5648812191842223
User 74881 does not improve AUC. Reverting changes.
Training on augumented user 6466 33/50 current_auc = 0.5651613626176603
User 6466 AUC after training: 0.5653854773644106
User 6466 improves AUC. Keeping the model.
Training on augumented user 42140 34/50 current_auc = 0.5653854773644106
User 42140 AUC after training: 0.5647131331241595
User 42140 does not improve AUC. Reverting changes.
Training on augumented user 72027 35/50 current_auc = 0.5653854773644106
User 72027 AUC after training: 0.5621358135365306
User 72027 does not improve AUC. Reverting changes.
Training on augumented user 49067 36/50 current_auc = 0.5653854773644106
User 49067 AUC after training: 0.5644329896907216
User 49067 does not improve AUC. Reverting changes.
Training on augumented user 71659 37/50 current_auc = 0.5653854773644106
User 71659 AUC after training: 0.5653854773644106
User 71659 does not improve AUC. Reverting changes.
Training on augumented user 50545 38/50 current_auc = 0.5653854773644106
User 50545 AUC after training: 0.5649372478709099
User 50545 does not improve AUC. Reverting changes.
Training on augumented user 58797 39/50 current_auc = 0.5653854773644106
User 58797 AUC after training: 0.5645450470640969
User 58797 does not improve AUC. Reverting changes.
Training on augumented user 26647 40/50 current_auc = 0.5653854773644106
User 26647 AUC after training: 0.5643209323173465
User 26647 does not improve AUC. Reverting changes.
Training on augumented user 125902 41/50 current_auc = 0.5653854773644106
User 125902 AUC after training: 0.5651053339309726
User 125902 does not improve AUC. Reverting changes.
Training on augumented user 68987 42/50 current_auc = 0.5653854773644106
User 68987 AUC after training: 0.5646010757507843
User 68987 does not improve AUC. Reverting changes.
Training on augumented user 42843 43/50 current_auc = 0.5653854773644106
User 42843 AUC after training: 0.5651053339309726
User 42843 does not improve AUC. Reverting changes.
Training on augumented user 97634 44/50 current_auc = 0.5653854773644106
User 97634 AUC after training: 0.565329448677723
User 97634 does not improve AUC. Reverting changes.
Training on augumented user 60832 45/50 current_auc = 0.5653854773644106
User 60832 AUC after training: 0.5647131331241596
User 60832 does not improve AUC. Reverting changes.
Training on augumented user 4735 46/50 current_auc = 0.5653854773644106
User 4735 AUC after training: 0.565329448677723
User 4735 does not improve AUC. Reverting changes.
Training on augumented user 78303 47/50 current_auc = 0.5653854773644106
User 78303 AUC after training: 0.5647131331241595
User 78303 does not improve AUC. Reverting changes.
Training on augumented user 4630 48/50 current_auc = 0.5653854773644106
User 4630 AUC after training: 0.5655535634244734
User 4630 improves AUC. Keeping the model.
Training on augumented user 38840 49/50 current_auc = 0.5655535634244734
User 38840 AUC after training: 0.5653854773644105
User 38840 does not improve AUC. Reverting changes.
[2024-12-02 20:12:10.754235] start test user 131239 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:11.181732] start test user 131239 284/567 recall augumented users by random, augumented_users = [26309, 136146, 22939, 66381, 56078, 37115, 8592, 131971, 95842, 110456, 135263, 118190, 22518, 12231, 109043, 2773, 35432, 28937, 76816, 11964, 21822, 16749, 104554, 91003, 47233, 94576, 40637, 118676, 69496, 130556, 103777, 72641, 137018, 9993, 67231, 71636, 126962, 66612, 132394, 137385, 102249, 86344, 112791, 90360, 35095, 133779, 90300, 8838, 3912, 4907]
[2024-12-02 20:12:11.196739] user = 131239 Cloud 284/567
[2024-12-02 20:12:11.207336] user = 131239 Local 284/567
[2024-12-02 20:12:11.242648] user = 131239 Local+ 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:13.461097] user = 131239 MPDA- 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 26309 0/50 current_auc = 1.0
User 26309 AUC after training: 1.0
User 26309 does not improve AUC. Reverting changes.
Training on augumented user 136146 1/50 current_auc = 1.0
User 136146 AUC after training: 1.0
User 136146 does not improve AUC. Reverting changes.
Training on augumented user 22939 2/50 current_auc = 1.0
User 22939 AUC after training: 1.0
User 22939 does not improve AUC. Reverting changes.
Training on augumented user 66381 3/50 current_auc = 1.0
User 66381 AUC after training: 1.0
User 66381 does not improve AUC. Reverting changes.
Training on augumented user 56078 4/50 current_auc = 1.0
User 56078 AUC after training: 1.0
User 56078 does not improve AUC. Reverting changes.
Training on augumented user 37115 5/50 current_auc = 1.0
User 37115 AUC after training: 1.0
User 37115 does not improve AUC. Reverting changes.
Training on augumented user 8592 6/50 current_auc = 1.0
User 8592 AUC after training: 1.0
User 8592 does not improve AUC. Reverting changes.
Training on augumented user 131971 7/50 current_auc = 1.0
User 131971 AUC after training: 1.0
User 131971 does not improve AUC. Reverting changes.
Training on augumented user 95842 8/50 current_auc = 1.0
User 95842 AUC after training: 1.0
User 95842 does not improve AUC. Reverting changes.
Training on augumented user 110456 9/50 current_auc = 1.0
User 110456 AUC after training: 1.0
User 110456 does not improve AUC. Reverting changes.
Training on augumented user 135263 10/50 current_auc = 1.0
User 135263 AUC after training: 1.0
User 135263 does not improve AUC. Reverting changes.
Training on augumented user 118190 11/50 current_auc = 1.0
User 118190 AUC after training: 1.0
User 118190 does not improve AUC. Reverting changes.
Training on augumented user 22518 12/50 current_auc = 1.0
User 22518 AUC after training: 1.0
User 22518 does not improve AUC. Reverting changes.
Training on augumented user 12231 13/50 current_auc = 1.0
User 12231 AUC after training: 1.0
User 12231 does not improve AUC. Reverting changes.
Training on augumented user 109043 14/50 current_auc = 1.0
User 109043 AUC after training: 1.0
User 109043 does not improve AUC. Reverting changes.
Training on augumented user 2773 15/50 current_auc = 1.0
User 2773 AUC after training: 1.0
User 2773 does not improve AUC. Reverting changes.
Training on augumented user 35432 16/50 current_auc = 1.0
User 35432 AUC after training: 1.0
User 35432 does not improve AUC. Reverting changes.
Training on augumented user 28937 17/50 current_auc = 1.0
User 28937 AUC after training: 1.0
User 28937 does not improve AUC. Reverting changes.
Training on augumented user 76816 18/50 current_auc = 1.0
User 76816 AUC after training: 1.0
User 76816 does not improve AUC. Reverting changes.
Training on augumented user 11964 19/50 current_auc = 1.0
User 11964 AUC after training: 1.0
User 11964 does not improve AUC. Reverting changes.
Training on augumented user 21822 20/50 current_auc = 1.0
User 21822 AUC after training: 1.0
User 21822 does not improve AUC. Reverting changes.
Training on augumented user 16749 21/50 current_auc = 1.0
User 16749 AUC after training: 1.0
User 16749 does not improve AUC. Reverting changes.
Training on augumented user 104554 22/50 current_auc = 1.0
User 104554 AUC after training: 1.0
User 104554 does not improve AUC. Reverting changes.
Training on augumented user 91003 23/50 current_auc = 1.0
User 91003 AUC after training: 1.0
User 91003 does not improve AUC. Reverting changes.
Training on augumented user 47233 24/50 current_auc = 1.0
User 47233 AUC after training: 1.0
User 47233 does not improve AUC. Reverting changes.
Training on augumented user 94576 25/50 current_auc = 1.0
User 94576 AUC after training: 1.0
User 94576 does not improve AUC. Reverting changes.
Training on augumented user 40637 26/50 current_auc = 1.0
User 40637 AUC after training: 1.0
User 40637 does not improve AUC. Reverting changes.
Training on augumented user 118676 27/50 current_auc = 1.0
User 118676 AUC after training: 1.0
User 118676 does not improve AUC. Reverting changes.
Training on augumented user 69496 28/50 current_auc = 1.0
User 69496 AUC after training: 1.0
User 69496 does not improve AUC. Reverting changes.
Training on augumented user 130556 29/50 current_auc = 1.0
User 130556 AUC after training: 1.0
User 130556 does not improve AUC. Reverting changes.
Training on augumented user 103777 30/50 current_auc = 1.0
User 103777 AUC after training: 1.0
User 103777 does not improve AUC. Reverting changes.
Training on augumented user 72641 31/50 current_auc = 1.0
User 72641 AUC after training: 1.0
User 72641 does not improve AUC. Reverting changes.
Training on augumented user 137018 32/50 current_auc = 1.0
User 137018 AUC after training: 1.0
User 137018 does not improve AUC. Reverting changes.
Training on augumented user 9993 33/50 current_auc = 1.0
User 9993 AUC after training: 1.0
User 9993 does not improve AUC. Reverting changes.
Training on augumented user 67231 34/50 current_auc = 1.0
User 67231 AUC after training: 1.0
User 67231 does not improve AUC. Reverting changes.
Training on augumented user 71636 35/50 current_auc = 1.0
User 71636 AUC after training: 1.0
User 71636 does not improve AUC. Reverting changes.
Training on augumented user 126962 36/50 current_auc = 1.0
User 126962 AUC after training: 1.0
User 126962 does not improve AUC. Reverting changes.
Training on augumented user 66612 37/50 current_auc = 1.0
User 66612 AUC after training: 1.0
User 66612 does not improve AUC. Reverting changes.
Training on augumented user 132394 38/50 current_auc = 1.0
User 132394 AUC after training: 1.0
User 132394 does not improve AUC. Reverting changes.
Training on augumented user 137385 39/50 current_auc = 1.0
User 137385 AUC after training: 1.0
User 137385 does not improve AUC. Reverting changes.
Training on augumented user 102249 40/50 current_auc = 1.0
User 102249 AUC after training: 1.0
User 102249 does not improve AUC. Reverting changes.
Training on augumented user 86344 41/50 current_auc = 1.0
User 86344 AUC after training: 1.0
User 86344 does not improve AUC. Reverting changes.
Training on augumented user 112791 42/50 current_auc = 1.0
User 112791 AUC after training: 1.0
User 112791 does not improve AUC. Reverting changes.
Training on augumented user 90360 43/50 current_auc = 1.0
User 90360 AUC after training: 1.0
User 90360 does not improve AUC. Reverting changes.
Training on augumented user 35095 44/50 current_auc = 1.0
User 35095 AUC after training: 1.0
User 35095 does not improve AUC. Reverting changes.
Training on augumented user 133779 45/50 current_auc = 1.0
User 133779 AUC after training: 1.0
User 133779 does not improve AUC. Reverting changes.
Training on augumented user 90300 46/50 current_auc = 1.0
User 90300 AUC after training: 1.0
User 90300 does not improve AUC. Reverting changes.
Training on augumented user 8838 47/50 current_auc = 1.0
User 8838 AUC after training: 1.0
User 8838 does not improve AUC. Reverting changes.
Training on augumented user 3912 48/50 current_auc = 1.0
User 3912 AUC after training: 1.0
User 3912 does not improve AUC. Reverting changes.
Training on augumented user 4907 49/50 current_auc = 1.0
User 4907 AUC after training: 1.0
User 4907 does not improve AUC. Reverting changes.
[2024-12-02 20:12:40.023983] start test user 131241 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:40.773441] start test user 131241 285/567 recall augumented users by random, augumented_users = [50625, 74120, 86130, 61302, 81642, 36443, 27512, 85926, 110917, 2254, 29068, 79060, 73847, 113906, 25110, 125711, 51648, 110591, 137776, 77887, 105533, 134684, 9863, 81807, 81725, 129006, 97215, 5803, 95380, 48898, 104609, 35437, 60119, 12561, 108596, 116271, 80001, 24366, 6404, 39592, 107626, 44714, 62022, 66968, 8158, 65508, 28516, 57934, 70647, 99812]
[2024-12-02 20:12:40.788812] user = 131241 Cloud 285/567
[2024-12-02 20:12:40.808311] user = 131241 Local 285/567
[2024-12-02 20:12:40.906022] user = 131241 Local+ 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:44.637404] user = 131241 MPDA- 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7153596099146688
Training on augumented user 50625 0/50 current_auc = 0.7153596099146688
User 50625 AUC after training: 0.7153596099146688
User 50625 does not improve AUC. Reverting changes.
Training on augumented user 74120 1/50 current_auc = 0.7153596099146688
User 74120 AUC after training: 0.7153596099146688
User 74120 does not improve AUC. Reverting changes.
Training on augumented user 86130 2/50 current_auc = 0.7153596099146688
User 86130 AUC after training: 0.7153596099146688
User 86130 does not improve AUC. Reverting changes.
Training on augumented user 61302 3/50 current_auc = 0.7153596099146688
User 61302 AUC after training: 0.7157659488013003
User 61302 improves AUC. Keeping the model.
Training on augumented user 81642 4/50 current_auc = 0.7157659488013003
User 81642 AUC after training: 0.7157659488013003
User 81642 does not improve AUC. Reverting changes.
Training on augumented user 36443 5/50 current_auc = 0.7157659488013003
User 36443 AUC after training: 0.7161722876879317
User 36443 improves AUC. Keeping the model.
Training on augumented user 27512 6/50 current_auc = 0.7161722876879317
User 27512 AUC after training: 0.715969118244616
User 27512 does not improve AUC. Reverting changes.
Training on augumented user 85926 7/50 current_auc = 0.7161722876879317
User 85926 AUC after training: 0.7165786265745633
User 85926 improves AUC. Keeping the model.
Training on augumented user 110917 8/50 current_auc = 0.7165786265745633
User 110917 AUC after training: 0.7163754571312475
User 110917 does not improve AUC. Reverting changes.
Training on augumented user 2254 9/50 current_auc = 0.7165786265745633
User 2254 AUC after training: 0.7173913043478262
User 2254 improves AUC. Keeping the model.
Training on augumented user 29068 10/50 current_auc = 0.7173913043478262
User 29068 AUC after training: 0.7180008126777733
User 29068 improves AUC. Keeping the model.
Training on augumented user 79060 11/50 current_auc = 0.7180008126777733
User 79060 AUC after training: 0.7175944737911419
User 79060 does not improve AUC. Reverting changes.
Training on augumented user 73847 12/50 current_auc = 0.7180008126777733
User 73847 AUC after training: 0.7175944737911418
User 73847 does not improve AUC. Reverting changes.
Training on augumented user 113906 13/50 current_auc = 0.7180008126777733
User 113906 AUC after training: 0.7167817960178788
User 113906 does not improve AUC. Reverting changes.
Training on augumented user 25110 14/50 current_auc = 0.7180008126777733
User 25110 AUC after training: 0.7167817960178791
User 25110 does not improve AUC. Reverting changes.
Training on augumented user 125711 15/50 current_auc = 0.7180008126777733
User 125711 AUC after training: 0.7163754571312475
User 125711 does not improve AUC. Reverting changes.
Training on augumented user 51648 16/50 current_auc = 0.7180008126777733
User 51648 AUC after training: 0.7173913043478262
User 51648 does not improve AUC. Reverting changes.
Training on augumented user 110591 17/50 current_auc = 0.7180008126777733
User 110591 AUC after training: 0.7169849654611946
User 110591 does not improve AUC. Reverting changes.
Training on augumented user 137776 18/50 current_auc = 0.7180008126777733
User 137776 AUC after training: 0.7180008126777733
User 137776 does not improve AUC. Reverting changes.
Training on augumented user 77887 19/50 current_auc = 0.7180008126777733
User 77887 AUC after training: 0.7169849654611946
User 77887 does not improve AUC. Reverting changes.
Training on augumented user 105533 20/50 current_auc = 0.7180008126777733
User 105533 AUC after training: 0.7180008126777733
User 105533 does not improve AUC. Reverting changes.
Training on augumented user 134684 21/50 current_auc = 0.7180008126777733
User 134684 AUC after training: 0.7173913043478262
User 134684 does not improve AUC. Reverting changes.
Training on augumented user 9863 22/50 current_auc = 0.7180008126777733
User 9863 AUC after training: 0.7165786265745632
User 9863 does not improve AUC. Reverting changes.
Training on augumented user 81807 23/50 current_auc = 0.7180008126777733
User 81807 AUC after training: 0.7175944737911419
User 81807 does not improve AUC. Reverting changes.
Training on augumented user 81725 24/50 current_auc = 0.7180008126777733
User 81725 AUC after training: 0.7180008126777733
User 81725 does not improve AUC. Reverting changes.
Training on augumented user 129006 25/50 current_auc = 0.7180008126777733
User 129006 AUC after training: 0.7163754571312475
User 129006 does not improve AUC. Reverting changes.
Training on augumented user 97215 26/50 current_auc = 0.7180008126777733
User 97215 AUC after training: 0.7163754571312475
User 97215 does not improve AUC. Reverting changes.
Training on augumented user 5803 27/50 current_auc = 0.7180008126777733
User 5803 AUC after training: 0.7182039821210889
User 5803 improves AUC. Keeping the model.
Training on augumented user 95380 28/50 current_auc = 0.7182039821210889
User 95380 AUC after training: 0.7180008126777733
User 95380 does not improve AUC. Reverting changes.
Training on augumented user 48898 29/50 current_auc = 0.7182039821210889
User 48898 AUC after training: 0.7171881349045104
User 48898 does not improve AUC. Reverting changes.
Training on augumented user 104609 30/50 current_auc = 0.7182039821210889
User 104609 AUC after training: 0.7167817960178791
User 104609 does not improve AUC. Reverting changes.
Training on augumented user 35437 31/50 current_auc = 0.7182039821210889
User 35437 AUC after training: 0.7167817960178788
User 35437 does not improve AUC. Reverting changes.
Training on augumented user 60119 32/50 current_auc = 0.7182039821210889
User 60119 AUC after training: 0.7188134904510362
User 60119 improves AUC. Keeping the model.
Training on augumented user 12561 33/50 current_auc = 0.7188134904510362
User 12561 AUC after training: 0.7188134904510362
User 12561 does not improve AUC. Reverting changes.
Training on augumented user 108596 34/50 current_auc = 0.7188134904510362
User 108596 AUC after training: 0.7194229987809834
User 108596 improves AUC. Keeping the model.
Training on augumented user 116271 35/50 current_auc = 0.7194229987809834
User 116271 AUC after training: 0.7188134904510362
User 116271 does not improve AUC. Reverting changes.
Training on augumented user 80001 36/50 current_auc = 0.7194229987809834
User 80001 AUC after training: 0.7192198293376677
User 80001 does not improve AUC. Reverting changes.
Training on augumented user 24366 37/50 current_auc = 0.7194229987809834
User 24366 AUC after training: 0.7202356765542463
User 24366 improves AUC. Keeping the model.
Training on augumented user 6404 38/50 current_auc = 0.7202356765542463
User 6404 AUC after training: 0.7198293376676148
User 6404 does not improve AUC. Reverting changes.
Training on augumented user 39592 39/50 current_auc = 0.7202356765542463
User 39592 AUC after training: 0.7190166598943519
User 39592 does not improve AUC. Reverting changes.
Training on augumented user 107626 40/50 current_auc = 0.7202356765542463
User 107626 AUC after training: 0.720438845997562
User 107626 improves AUC. Keeping the model.
Training on augumented user 44714 41/50 current_auc = 0.720438845997562
User 44714 AUC after training: 0.7202356765542464
User 44714 does not improve AUC. Reverting changes.
Training on augumented user 62022 42/50 current_auc = 0.720438845997562
User 62022 AUC after training: 0.718203982121089
User 62022 does not improve AUC. Reverting changes.
Training on augumented user 66968 43/50 current_auc = 0.720438845997562
User 66968 AUC after training: 0.720438845997562
User 66968 does not improve AUC. Reverting changes.
Training on augumented user 8158 44/50 current_auc = 0.720438845997562
User 8158 AUC after training: 0.7188134904510362
User 8158 does not improve AUC. Reverting changes.
Training on augumented user 65508 45/50 current_auc = 0.720438845997562
User 65508 AUC after training: 0.7192198293376677
User 65508 does not improve AUC. Reverting changes.
Training on augumented user 28516 46/50 current_auc = 0.720438845997562
User 28516 AUC after training: 0.7200325071109305
User 28516 does not improve AUC. Reverting changes.
Training on augumented user 57934 47/50 current_auc = 0.720438845997562
User 57934 AUC after training: 0.7202356765542463
User 57934 does not improve AUC. Reverting changes.
Training on augumented user 70647 48/50 current_auc = 0.720438845997562
User 70647 AUC after training: 0.7188134904510362
User 70647 does not improve AUC. Reverting changes.
Training on augumented user 99812 49/50 current_auc = 0.720438845997562
User 99812 AUC after training: 0.7194229987809835
User 99812 does not improve AUC. Reverting changes.
[2024-12-02 20:13:14.952622] start test user 131255 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:15.567611] start test user 131255 286/567 recall augumented users by random, augumented_users = [6177, 32075, 58058, 122493, 102673, 47031, 67343, 34906, 8238, 97980, 120561, 124521, 35206, 25061, 662, 6851, 63760, 37250, 103240, 113061, 99485, 32975, 31806, 24412, 67023, 38932, 91882, 38609, 102271, 56900, 109567, 127294, 91995, 117786, 109943, 105498, 68332, 12643, 83157, 92740, 27226, 36500, 115439, 83642, 102865, 133138, 129951, 10216, 81926, 71251]
[2024-12-02 20:13:15.583929] user = 131255 Cloud 286/567
[2024-12-02 20:13:15.595598] user = 131255 Local 286/567
[2024-12-02 20:13:15.697263] user = 131255 Local+ 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:18.863797] user = 131255 MPDA- 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5955678670360111
Training on augumented user 6177 0/50 current_auc = 0.5955678670360111
User 6177 AUC after training: 0.5969529085872576
User 6177 improves AUC. Keeping the model.
Training on augumented user 32075 1/50 current_auc = 0.5969529085872576
User 32075 AUC after training: 0.5969529085872576
User 32075 does not improve AUC. Reverting changes.
Training on augumented user 58058 2/50 current_auc = 0.5969529085872576
User 58058 AUC after training: 0.5941828254847645
User 58058 does not improve AUC. Reverting changes.
Training on augumented user 122493 3/50 current_auc = 0.5969529085872576
User 122493 AUC after training: 0.5997229916897507
User 122493 improves AUC. Keeping the model.
Training on augumented user 102673 4/50 current_auc = 0.5997229916897507
User 102673 AUC after training: 0.5997229916897507
User 102673 does not improve AUC. Reverting changes.
Training on augumented user 47031 5/50 current_auc = 0.5997229916897507
User 47031 AUC after training: 0.6011080332409973
User 47031 improves AUC. Keeping the model.
Training on augumented user 67343 6/50 current_auc = 0.6011080332409973
User 67343 AUC after training: 0.5997229916897507
User 67343 does not improve AUC. Reverting changes.
Training on augumented user 34906 7/50 current_auc = 0.6011080332409973
User 34906 AUC after training: 0.5983379501385042
User 34906 does not improve AUC. Reverting changes.
Training on augumented user 8238 8/50 current_auc = 0.6011080332409973
User 8238 AUC after training: 0.6011080332409973
User 8238 does not improve AUC. Reverting changes.
Training on augumented user 97980 9/50 current_auc = 0.6011080332409973
User 97980 AUC after training: 0.6024930747922438
User 97980 improves AUC. Keeping the model.
Training on augumented user 120561 10/50 current_auc = 0.6024930747922438
User 120561 AUC after training: 0.6024930747922438
User 120561 does not improve AUC. Reverting changes.
Training on augumented user 124521 11/50 current_auc = 0.6024930747922438
User 124521 AUC after training: 0.6011080332409973
User 124521 does not improve AUC. Reverting changes.
Training on augumented user 35206 12/50 current_auc = 0.6024930747922438
User 35206 AUC after training: 0.5997229916897507
User 35206 does not improve AUC. Reverting changes.
Training on augumented user 25061 13/50 current_auc = 0.6024930747922438
User 25061 AUC after training: 0.5969529085872576
User 25061 does not improve AUC. Reverting changes.
Training on augumented user 662 14/50 current_auc = 0.6024930747922438
User 662 AUC after training: 0.592797783933518
User 662 does not improve AUC. Reverting changes.
Training on augumented user 6851 15/50 current_auc = 0.6024930747922438
User 6851 AUC after training: 0.6024930747922438
User 6851 does not improve AUC. Reverting changes.
Training on augumented user 63760 16/50 current_auc = 0.6024930747922438
User 63760 AUC after training: 0.6024930747922438
User 63760 does not improve AUC. Reverting changes.
Training on augumented user 37250 17/50 current_auc = 0.6024930747922438
User 37250 AUC after training: 0.6024930747922438
User 37250 does not improve AUC. Reverting changes.
Training on augumented user 103240 18/50 current_auc = 0.6024930747922438
User 103240 AUC after training: 0.5997229916897506
User 103240 does not improve AUC. Reverting changes.
Training on augumented user 113061 19/50 current_auc = 0.6024930747922438
User 113061 AUC after training: 0.592797783933518
User 113061 does not improve AUC. Reverting changes.
Training on augumented user 99485 20/50 current_auc = 0.6024930747922438
User 99485 AUC after training: 0.6011080332409973
User 99485 does not improve AUC. Reverting changes.
Training on augumented user 32975 21/50 current_auc = 0.6024930747922438
User 32975 AUC after training: 0.5997229916897507
User 32975 does not improve AUC. Reverting changes.
Training on augumented user 31806 22/50 current_auc = 0.6024930747922438
User 31806 AUC after training: 0.6024930747922438
User 31806 does not improve AUC. Reverting changes.
Training on augumented user 24412 23/50 current_auc = 0.6024930747922438
User 24412 AUC after training: 0.6011080332409973
User 24412 does not improve AUC. Reverting changes.
Training on augumented user 67023 24/50 current_auc = 0.6024930747922438
User 67023 AUC after training: 0.6011080332409973
User 67023 does not improve AUC. Reverting changes.
Training on augumented user 38932 25/50 current_auc = 0.6024930747922438
User 38932 AUC after training: 0.592797783933518
User 38932 does not improve AUC. Reverting changes.
Training on augumented user 91882 26/50 current_auc = 0.6024930747922438
User 91882 AUC after training: 0.6024930747922438
User 91882 does not improve AUC. Reverting changes.
Training on augumented user 38609 27/50 current_auc = 0.6024930747922438
User 38609 AUC after training: 0.6011080332409973
User 38609 does not improve AUC. Reverting changes.
Training on augumented user 102271 28/50 current_auc = 0.6024930747922438
User 102271 AUC after training: 0.6052631578947368
User 102271 improves AUC. Keeping the model.
Training on augumented user 56900 29/50 current_auc = 0.6052631578947368
User 56900 AUC after training: 0.6094182825484764
User 56900 improves AUC. Keeping the model.
Training on augumented user 109567 30/50 current_auc = 0.6094182825484764
User 109567 AUC after training: 0.6080332409972299
User 109567 does not improve AUC. Reverting changes.
Training on augumented user 127294 31/50 current_auc = 0.6094182825484764
User 127294 AUC after training: 0.5997229916897506
User 127294 does not improve AUC. Reverting changes.
Training on augumented user 91995 32/50 current_auc = 0.6094182825484764
User 91995 AUC after training: 0.6094182825484764
User 91995 does not improve AUC. Reverting changes.
Training on augumented user 117786 33/50 current_auc = 0.6094182825484764
User 117786 AUC after training: 0.6052631578947368
User 117786 does not improve AUC. Reverting changes.
Training on augumented user 109943 34/50 current_auc = 0.6094182825484764
User 109943 AUC after training: 0.5941828254847645
User 109943 does not improve AUC. Reverting changes.
Training on augumented user 105498 35/50 current_auc = 0.6094182825484764
User 105498 AUC after training: 0.6080332409972299
User 105498 does not improve AUC. Reverting changes.
Training on augumented user 68332 36/50 current_auc = 0.6094182825484764
User 68332 AUC after training: 0.6094182825484764
User 68332 does not improve AUC. Reverting changes.
Training on augumented user 12643 37/50 current_auc = 0.6094182825484764
User 12643 AUC after training: 0.6066481994459834
User 12643 does not improve AUC. Reverting changes.
Training on augumented user 83157 38/50 current_auc = 0.6094182825484764
User 83157 AUC after training: 0.6052631578947367
User 83157 does not improve AUC. Reverting changes.
Training on augumented user 92740 39/50 current_auc = 0.6094182825484764
User 92740 AUC after training: 0.6066481994459834
User 92740 does not improve AUC. Reverting changes.
Training on augumented user 27226 40/50 current_auc = 0.6094182825484764
User 27226 AUC after training: 0.6094182825484764
User 27226 does not improve AUC. Reverting changes.
Training on augumented user 36500 41/50 current_auc = 0.6094182825484764
User 36500 AUC after training: 0.6052631578947367
User 36500 does not improve AUC. Reverting changes.
Training on augumented user 115439 42/50 current_auc = 0.6094182825484764
User 115439 AUC after training: 0.610803324099723
User 115439 improves AUC. Keeping the model.
Training on augumented user 83642 43/50 current_auc = 0.610803324099723
User 83642 AUC after training: 0.6024930747922437
User 83642 does not improve AUC. Reverting changes.
Training on augumented user 102865 44/50 current_auc = 0.610803324099723
User 102865 AUC after training: 0.5969529085872576
User 102865 does not improve AUC. Reverting changes.
Training on augumented user 133138 45/50 current_auc = 0.610803324099723
User 133138 AUC after training: 0.6052631578947368
User 133138 does not improve AUC. Reverting changes.
Training on augumented user 129951 46/50 current_auc = 0.610803324099723
User 129951 AUC after training: 0.6094182825484764
User 129951 does not improve AUC. Reverting changes.
Training on augumented user 10216 47/50 current_auc = 0.610803324099723
User 10216 AUC after training: 0.6038781163434903
User 10216 does not improve AUC. Reverting changes.
Training on augumented user 81926 48/50 current_auc = 0.610803324099723
User 81926 AUC after training: 0.6038781163434903
User 81926 does not improve AUC. Reverting changes.
Training on augumented user 71251 49/50 current_auc = 0.610803324099723
User 71251 AUC after training: 0.5997229916897506
User 71251 does not improve AUC. Reverting changes.
[2024-12-02 20:13:42.890128] start test user 131261 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:43.316626] start test user 131261 287/567 recall augumented users by random, augumented_users = [23279, 48792, 83583, 37293, 47933, 22061, 97326, 79360, 89340, 112615, 69305, 131172, 33132, 59277, 56372, 25889, 41551, 114765, 88184, 119858, 54554, 37588, 137578, 119961, 38011, 29594, 548, 70931, 79042, 117018, 15035, 118123, 50652, 136737, 90246, 39120, 105722, 49371, 111931, 26646, 42614, 26601, 39386, 85379, 24316, 114160, 70662, 132787, 48953, 128495]
[2024-12-02 20:13:43.331500] user = 131261 Cloud 287/567
[2024-12-02 20:13:43.350369] user = 131261 Local 287/567
[2024-12-02 20:13:43.547781] user = 131261 Local+ 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:45.997919] user = 131261 MPDA- 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.559442364786369
Training on augumented user 23279 0/50 current_auc = 0.559442364786369
User 23279 AUC after training: 0.559700529237124
User 23279 improves AUC. Keeping the model.
Training on augumented user 48792 1/50 current_auc = 0.559700529237124
User 48792 AUC after training: 0.5600877759132568
User 48792 improves AUC. Keeping the model.
Training on augumented user 83583 2/50 current_auc = 0.5600877759132568
User 83583 AUC after training: 0.5608622692655222
User 83583 improves AUC. Keeping the model.
Training on augumented user 37293 3/50 current_auc = 0.5608622692655222
User 37293 AUC after training: 0.5622821737446754
User 37293 improves AUC. Keeping the model.
Training on augumented user 47933 4/50 current_auc = 0.5622821737446754
User 47933 AUC after training: 0.5616367626177875
User 47933 does not improve AUC. Reverting changes.
Training on augumented user 22061 5/50 current_auc = 0.5622821737446754
User 22061 AUC after training: 0.5594423647863689
User 22061 does not improve AUC. Reverting changes.
Training on augumented user 97326 6/50 current_auc = 0.5622821737446754
User 97326 AUC after training: 0.5618949270685427
User 97326 does not improve AUC. Reverting changes.
Training on augumented user 79360 7/50 current_auc = 0.5622821737446754
User 79360 AUC after training: 0.558796953659481
User 79360 does not improve AUC. Reverting changes.
Training on augumented user 89340 8/50 current_auc = 0.5622821737446754
User 89340 AUC after training: 0.5613785981670324
User 89340 does not improve AUC. Reverting changes.
Training on augumented user 112615 9/50 current_auc = 0.5622821737446754
User 112615 AUC after training: 0.5627985026461857
User 112615 improves AUC. Keeping the model.
Training on augumented user 69305 10/50 current_auc = 0.5627985026461857
User 69305 AUC after training: 0.5630566670969408
User 69305 improves AUC. Keeping the model.
Training on augumented user 131172 11/50 current_auc = 0.5630566670969408
User 131172 AUC after training: 0.5634439137730735
User 131172 improves AUC. Keeping the model.
Training on augumented user 33132 12/50 current_auc = 0.5634439137730735
User 33132 AUC after training: 0.562669420420808
User 33132 does not improve AUC. Reverting changes.
Training on augumented user 59277 13/50 current_auc = 0.5634439137730735
User 59277 AUC after training: 0.5631857493223182
User 59277 does not improve AUC. Reverting changes.
Training on augumented user 56372 14/50 current_auc = 0.5634439137730735
User 56372 AUC after training: 0.5621530915192978
User 56372 does not improve AUC. Reverting changes.
Training on augumented user 25889 15/50 current_auc = 0.5634439137730735
User 25889 AUC after training: 0.5599586936878792
User 25889 does not improve AUC. Reverting changes.
Training on augumented user 41551 16/50 current_auc = 0.5634439137730735
User 41551 AUC after training: 0.5647347360268491
User 41551 improves AUC. Keeping the model.
Training on augumented user 114765 17/50 current_auc = 0.5647347360268491
User 114765 AUC after training: 0.5637020782238287
User 114765 does not improve AUC. Reverting changes.
Training on augumented user 88184 18/50 current_auc = 0.5647347360268491
User 88184 AUC after training: 0.5638311604492061
User 88184 does not improve AUC. Reverting changes.
Training on augumented user 119858 19/50 current_auc = 0.5647347360268491
User 119858 AUC after training: 0.56150768039241
User 119858 does not improve AUC. Reverting changes.
Training on augumented user 54554 20/50 current_auc = 0.5647347360268491
User 54554 AUC after training: 0.5633148315476959
User 54554 does not improve AUC. Reverting changes.
Training on augumented user 37588 21/50 current_auc = 0.5647347360268491
User 37588 AUC after training: 0.564476571576094
User 37588 does not improve AUC. Reverting changes.
Training on augumented user 137578 22/50 current_auc = 0.5647347360268491
User 137578 AUC after training: 0.5642184071253389
User 137578 does not improve AUC. Reverting changes.
Training on augumented user 119961 23/50 current_auc = 0.5647347360268491
User 119961 AUC after training: 0.5651219827029819
User 119961 improves AUC. Keeping the model.
Training on augumented user 38011 24/50 current_auc = 0.5651219827029819
User 38011 AUC after training: 0.5638311604492061
User 38011 does not improve AUC. Reverting changes.
Training on augumented user 29594 25/50 current_auc = 0.5651219827029819
User 29594 AUC after training: 0.5643474893507164
User 29594 does not improve AUC. Reverting changes.
Training on augumented user 548 26/50 current_auc = 0.5651219827029819
User 548 AUC after training: 0.564476571576094
User 548 does not improve AUC. Reverting changes.
Training on augumented user 70931 27/50 current_auc = 0.5651219827029819
User 70931 AUC after training: 0.5637020782238286
User 70931 does not improve AUC. Reverting changes.
Training on augumented user 79042 28/50 current_auc = 0.5651219827029819
User 79042 AUC after training: 0.5646056538014715
User 79042 does not improve AUC. Reverting changes.
Training on augumented user 117018 29/50 current_auc = 0.5651219827029819
User 117018 AUC after training: 0.564476571576094
User 117018 does not improve AUC. Reverting changes.
Training on augumented user 15035 30/50 current_auc = 0.5651219827029819
User 15035 AUC after training: 0.5640893248999612
User 15035 does not improve AUC. Reverting changes.
Training on augumented user 118123 31/50 current_auc = 0.5651219827029819
User 118123 AUC after training: 0.5640893248999612
User 118123 does not improve AUC. Reverting changes.
Training on augumented user 50652 32/50 current_auc = 0.5651219827029819
User 50652 AUC after training: 0.5682199561120433
User 50652 improves AUC. Keeping the model.
Training on augumented user 136737 33/50 current_auc = 0.5682199561120433
User 136737 AUC after training: 0.5669291338582677
User 136737 does not improve AUC. Reverting changes.
Training on augumented user 90246 34/50 current_auc = 0.5682199561120433
User 90246 AUC after training: 0.5687362850135537
User 90246 improves AUC. Keeping the model.
Training on augumented user 39120 35/50 current_auc = 0.5687362850135537
User 39120 AUC after training: 0.5689944494643088
User 39120 improves AUC. Keeping the model.
Training on augumented user 105722 36/50 current_auc = 0.5689944494643088
User 105722 AUC after training: 0.5678327094359107
User 105722 does not improve AUC. Reverting changes.
Training on augumented user 49371 37/50 current_auc = 0.5689944494643088
User 49371 AUC after training: 0.5688653672389312
User 49371 does not improve AUC. Reverting changes.
Training on augumented user 111931 38/50 current_auc = 0.5689944494643088
User 111931 AUC after training: 0.5652510649283594
User 111931 does not improve AUC. Reverting changes.
Training on augumented user 26646 39/50 current_auc = 0.5689944494643088
User 26646 AUC after training: 0.5658964760552472
User 26646 does not improve AUC. Reverting changes.
Training on augumented user 42614 40/50 current_auc = 0.5689944494643088
User 42614 AUC after training: 0.5682199561120435
User 42614 does not improve AUC. Reverting changes.
Training on augumented user 26601 41/50 current_auc = 0.5689944494643088
User 26601 AUC after training: 0.5675745449851556
User 26601 does not improve AUC. Reverting changes.
Training on augumented user 39386 42/50 current_auc = 0.5689944494643088
User 39386 AUC after training: 0.5693816961404414
User 39386 improves AUC. Keeping the model.
Training on augumented user 85379 43/50 current_auc = 0.5693816961404414
User 85379 AUC after training: 0.5683490383374209
User 85379 does not improve AUC. Reverting changes.
Training on augumented user 24316 44/50 current_auc = 0.5693816961404414
User 24316 AUC after training: 0.5698980250419518
User 24316 improves AUC. Keeping the model.
Training on augumented user 114160 45/50 current_auc = 0.5698980250419518
User 114160 AUC after training: 0.5673163805344005
User 114160 does not improve AUC. Reverting changes.
Training on augumented user 70662 46/50 current_auc = 0.5698980250419518
User 70662 AUC after training: 0.5706725183942172
User 70662 improves AUC. Keeping the model.
Training on augumented user 132787 47/50 current_auc = 0.5706725183942172
User 132787 AUC after training: 0.5720924228733704
User 132787 improves AUC. Keeping the model.
Training on augumented user 48953 48/50 current_auc = 0.5720924228733704
User 48953 AUC after training: 0.5736414095779011
User 48953 improves AUC. Keeping the model.
Training on augumented user 128495 49/50 current_auc = 0.5736414095779011
User 128495 AUC after training: 0.5738995740286563
User 128495 improves AUC. Keeping the model.
[2024-12-02 20:14:13.170546] start test user 131320 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:13.818027] start test user 131320 288/567 recall augumented users by random, augumented_users = [4191, 114820, 18191, 74143, 56436, 42658, 82143, 136671, 50453, 99836, 55773, 57157, 123593, 40804, 76056, 85565, 137734, 102634, 80065, 71510, 23724, 68158, 87846, 106858, 20016, 111889, 49209, 86986, 60780, 68562, 8714, 113022, 51011, 122449, 109026, 117757, 131600, 77537, 83570, 41348, 75723, 73263, 102162, 118753, 135158, 48391, 40697, 74506, 4199, 138384]
[2024-12-02 20:14:13.833593] user = 131320 Cloud 288/567
[2024-12-02 20:14:13.844509] user = 131320 Local 288/567
[2024-12-02 20:14:13.883458] user = 131320 Local+ 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:16.219895] user = 131320 MPDA- 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 4191 0/50 current_auc = 0.5625
User 4191 AUC after training: 0.5625
User 4191 does not improve AUC. Reverting changes.
Training on augumented user 114820 1/50 current_auc = 0.5625
User 114820 AUC after training: 0.5681818181818181
User 114820 improves AUC. Keeping the model.
Training on augumented user 18191 2/50 current_auc = 0.5681818181818181
User 18191 AUC after training: 0.5681818181818182
User 18191 improves AUC. Keeping the model.
Training on augumented user 74143 3/50 current_auc = 0.5681818181818182
User 74143 AUC after training: 0.5681818181818182
User 74143 does not improve AUC. Reverting changes.
Training on augumented user 56436 4/50 current_auc = 0.5681818181818182
User 56436 AUC after training: 0.5681818181818182
User 56436 does not improve AUC. Reverting changes.
Training on augumented user 42658 5/50 current_auc = 0.5681818181818182
User 42658 AUC after training: 0.5681818181818182
User 42658 does not improve AUC. Reverting changes.
Training on augumented user 82143 6/50 current_auc = 0.5681818181818182
User 82143 AUC after training: 0.5625
User 82143 does not improve AUC. Reverting changes.
Training on augumented user 136671 7/50 current_auc = 0.5681818181818182
User 136671 AUC after training: 0.5681818181818182
User 136671 does not improve AUC. Reverting changes.
Training on augumented user 50453 8/50 current_auc = 0.5681818181818182
User 50453 AUC after training: 0.5795454545454546
User 50453 improves AUC. Keeping the model.
Training on augumented user 99836 9/50 current_auc = 0.5795454545454546
User 99836 AUC after training: 0.5681818181818182
User 99836 does not improve AUC. Reverting changes.
Training on augumented user 55773 10/50 current_auc = 0.5795454545454546
User 55773 AUC after training: 0.5795454545454546
User 55773 does not improve AUC. Reverting changes.
Training on augumented user 57157 11/50 current_auc = 0.5795454545454546
User 57157 AUC after training: 0.5795454545454546
User 57157 does not improve AUC. Reverting changes.
Training on augumented user 123593 12/50 current_auc = 0.5795454545454546
User 123593 AUC after training: 0.5738636363636364
User 123593 does not improve AUC. Reverting changes.
Training on augumented user 40804 13/50 current_auc = 0.5795454545454546
User 40804 AUC after training: 0.5852272727272727
User 40804 improves AUC. Keeping the model.
Training on augumented user 76056 14/50 current_auc = 0.5852272727272727
User 76056 AUC after training: 0.5852272727272727
User 76056 does not improve AUC. Reverting changes.
Training on augumented user 85565 15/50 current_auc = 0.5852272727272727
User 85565 AUC after training: 0.5852272727272727
User 85565 does not improve AUC. Reverting changes.
Training on augumented user 137734 16/50 current_auc = 0.5852272727272727
User 137734 AUC after training: 0.5738636363636365
User 137734 does not improve AUC. Reverting changes.
Training on augumented user 102634 17/50 current_auc = 0.5852272727272727
User 102634 AUC after training: 0.5852272727272727
User 102634 does not improve AUC. Reverting changes.
Training on augumented user 80065 18/50 current_auc = 0.5852272727272727
User 80065 AUC after training: 0.5852272727272727
User 80065 does not improve AUC. Reverting changes.
Training on augumented user 71510 19/50 current_auc = 0.5852272727272727
User 71510 AUC after training: 0.5852272727272727
User 71510 does not improve AUC. Reverting changes.
Training on augumented user 23724 20/50 current_auc = 0.5852272727272727
User 23724 AUC after training: 0.5852272727272727
User 23724 does not improve AUC. Reverting changes.
Training on augumented user 68158 21/50 current_auc = 0.5852272727272727
User 68158 AUC after training: 0.5681818181818182
User 68158 does not improve AUC. Reverting changes.
Training on augumented user 87846 22/50 current_auc = 0.5852272727272727
User 87846 AUC after training: 0.5795454545454546
User 87846 does not improve AUC. Reverting changes.
Training on augumented user 106858 23/50 current_auc = 0.5852272727272727
User 106858 AUC after training: 0.5795454545454546
User 106858 does not improve AUC. Reverting changes.
Training on augumented user 20016 24/50 current_auc = 0.5852272727272727
User 20016 AUC after training: 0.5852272727272727
User 20016 does not improve AUC. Reverting changes.
Training on augumented user 111889 25/50 current_auc = 0.5852272727272727
User 111889 AUC after training: 0.5852272727272727
User 111889 does not improve AUC. Reverting changes.
Training on augumented user 49209 26/50 current_auc = 0.5852272727272727
User 49209 AUC after training: 0.5852272727272727
User 49209 does not improve AUC. Reverting changes.
Training on augumented user 86986 27/50 current_auc = 0.5852272727272727
User 86986 AUC after training: 0.5852272727272727
User 86986 does not improve AUC. Reverting changes.
Training on augumented user 60780 28/50 current_auc = 0.5852272727272727
User 60780 AUC after training: 0.5852272727272727
User 60780 does not improve AUC. Reverting changes.
Training on augumented user 68562 29/50 current_auc = 0.5852272727272727
User 68562 AUC after training: 0.5852272727272727
User 68562 does not improve AUC. Reverting changes.
Training on augumented user 8714 30/50 current_auc = 0.5852272727272727
User 8714 AUC after training: 0.5852272727272727
User 8714 does not improve AUC. Reverting changes.
Training on augumented user 113022 31/50 current_auc = 0.5852272727272727
User 113022 AUC after training: 0.5852272727272727
User 113022 does not improve AUC. Reverting changes.
Training on augumented user 51011 32/50 current_auc = 0.5852272727272727
User 51011 AUC after training: 0.5852272727272727
User 51011 does not improve AUC. Reverting changes.
Training on augumented user 122449 33/50 current_auc = 0.5852272727272727
User 122449 AUC after training: 0.5852272727272727
User 122449 does not improve AUC. Reverting changes.
Training on augumented user 109026 34/50 current_auc = 0.5852272727272727
User 109026 AUC after training: 0.5852272727272727
User 109026 does not improve AUC. Reverting changes.
Training on augumented user 117757 35/50 current_auc = 0.5852272727272727
User 117757 AUC after training: 0.5852272727272727
User 117757 does not improve AUC. Reverting changes.
Training on augumented user 131600 36/50 current_auc = 0.5852272727272727
User 131600 AUC after training: 0.5852272727272727
User 131600 does not improve AUC. Reverting changes.
Training on augumented user 77537 37/50 current_auc = 0.5852272727272727
User 77537 AUC after training: 0.5852272727272727
User 77537 does not improve AUC. Reverting changes.
Training on augumented user 83570 38/50 current_auc = 0.5852272727272727
User 83570 AUC after training: 0.5681818181818182
User 83570 does not improve AUC. Reverting changes.
Training on augumented user 41348 39/50 current_auc = 0.5852272727272727
User 41348 AUC after training: 0.5852272727272727
User 41348 does not improve AUC. Reverting changes.
Training on augumented user 75723 40/50 current_auc = 0.5852272727272727
User 75723 AUC after training: 0.5852272727272727
User 75723 does not improve AUC. Reverting changes.
Training on augumented user 73263 41/50 current_auc = 0.5852272727272727
User 73263 AUC after training: 0.5852272727272727
User 73263 does not improve AUC. Reverting changes.
Training on augumented user 102162 42/50 current_auc = 0.5852272727272727
User 102162 AUC after training: 0.5852272727272727
User 102162 does not improve AUC. Reverting changes.
Training on augumented user 118753 43/50 current_auc = 0.5852272727272727
User 118753 AUC after training: 0.5852272727272727
User 118753 does not improve AUC. Reverting changes.
Training on augumented user 135158 44/50 current_auc = 0.5852272727272727
User 135158 AUC after training: 0.5852272727272727
User 135158 does not improve AUC. Reverting changes.
Training on augumented user 48391 45/50 current_auc = 0.5852272727272727
User 48391 AUC after training: 0.5852272727272727
User 48391 does not improve AUC. Reverting changes.
Training on augumented user 40697 46/50 current_auc = 0.5852272727272727
User 40697 AUC after training: 0.5852272727272727
User 40697 does not improve AUC. Reverting changes.
Training on augumented user 74506 47/50 current_auc = 0.5852272727272727
User 74506 AUC after training: 0.5852272727272727
User 74506 does not improve AUC. Reverting changes.
Training on augumented user 4199 48/50 current_auc = 0.5852272727272727
User 4199 AUC after training: 0.5852272727272727
User 4199 does not improve AUC. Reverting changes.
Training on augumented user 138384 49/50 current_auc = 0.5852272727272727
User 138384 AUC after training: 0.5852272727272727
User 138384 does not improve AUC. Reverting changes.
[2024-12-02 20:14:48.913870] start test user 131342 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:49.496465] start test user 131342 289/567 recall augumented users by random, augumented_users = [85857, 131284, 91854, 10106, 16031, 99108, 28064, 119714, 31191, 88623, 86458, 85388, 114209, 29733, 50150, 70843, 138108, 78990, 83801, 97363, 14179, 8532, 62122, 45383, 122229, 28576, 62950, 74037, 70028, 36637, 104535, 130134, 24980, 66889, 10430, 34046, 131560, 20377, 31487, 56806, 33255, 37256, 37051, 129370, 1850, 22732, 14847, 16418, 30818, 92340]
[2024-12-02 20:14:49.512437] user = 131342 Cloud 289/567
[2024-12-02 20:14:49.523360] user = 131342 Local 289/567
[2024-12-02 20:14:49.543547] user = 131342 Local+ 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:51.785907] user = 131342 MPDA- 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 85857 0/50 current_auc = 0.6
User 85857 AUC after training: 0.6
User 85857 does not improve AUC. Reverting changes.
Training on augumented user 131284 1/50 current_auc = 0.6
User 131284 AUC after training: 0.6
User 131284 does not improve AUC. Reverting changes.
Training on augumented user 91854 2/50 current_auc = 0.6
User 91854 AUC after training: 0.6
User 91854 does not improve AUC. Reverting changes.
Training on augumented user 10106 3/50 current_auc = 0.6
User 10106 AUC after training: 0.6
User 10106 does not improve AUC. Reverting changes.
Training on augumented user 16031 4/50 current_auc = 0.6
User 16031 AUC after training: 0.6
User 16031 does not improve AUC. Reverting changes.
Training on augumented user 99108 5/50 current_auc = 0.6
User 99108 AUC after training: 0.6
User 99108 does not improve AUC. Reverting changes.
Training on augumented user 28064 6/50 current_auc = 0.6
User 28064 AUC after training: 0.6
User 28064 does not improve AUC. Reverting changes.
Training on augumented user 119714 7/50 current_auc = 0.6
User 119714 AUC after training: 0.6
User 119714 does not improve AUC. Reverting changes.
Training on augumented user 31191 8/50 current_auc = 0.6
User 31191 AUC after training: 0.6
User 31191 does not improve AUC. Reverting changes.
Training on augumented user 88623 9/50 current_auc = 0.6
User 88623 AUC after training: 0.6
User 88623 does not improve AUC. Reverting changes.
Training on augumented user 86458 10/50 current_auc = 0.6
User 86458 AUC after training: 0.6
User 86458 does not improve AUC. Reverting changes.
Training on augumented user 85388 11/50 current_auc = 0.6
User 85388 AUC after training: 0.6
User 85388 does not improve AUC. Reverting changes.
Training on augumented user 114209 12/50 current_auc = 0.6
User 114209 AUC after training: 0.6
User 114209 does not improve AUC. Reverting changes.
Training on augumented user 29733 13/50 current_auc = 0.6
User 29733 AUC after training: 0.6
User 29733 does not improve AUC. Reverting changes.
Training on augumented user 50150 14/50 current_auc = 0.6
User 50150 AUC after training: 0.6
User 50150 does not improve AUC. Reverting changes.
Training on augumented user 70843 15/50 current_auc = 0.6
User 70843 AUC after training: 0.6
User 70843 does not improve AUC. Reverting changes.
Training on augumented user 138108 16/50 current_auc = 0.6
User 138108 AUC after training: 0.6
User 138108 does not improve AUC. Reverting changes.
Training on augumented user 78990 17/50 current_auc = 0.6
User 78990 AUC after training: 0.6
User 78990 does not improve AUC. Reverting changes.
Training on augumented user 83801 18/50 current_auc = 0.6
User 83801 AUC after training: 0.6
User 83801 does not improve AUC. Reverting changes.
Training on augumented user 97363 19/50 current_auc = 0.6
User 97363 AUC after training: 0.6
User 97363 does not improve AUC. Reverting changes.
Training on augumented user 14179 20/50 current_auc = 0.6
User 14179 AUC after training: 0.6
User 14179 does not improve AUC. Reverting changes.
Training on augumented user 8532 21/50 current_auc = 0.6
User 8532 AUC after training: 0.6
User 8532 does not improve AUC. Reverting changes.
Training on augumented user 62122 22/50 current_auc = 0.6
User 62122 AUC after training: 0.6
User 62122 does not improve AUC. Reverting changes.
Training on augumented user 45383 23/50 current_auc = 0.6
User 45383 AUC after training: 0.6
User 45383 does not improve AUC. Reverting changes.
Training on augumented user 122229 24/50 current_auc = 0.6
User 122229 AUC after training: 0.6
User 122229 does not improve AUC. Reverting changes.
Training on augumented user 28576 25/50 current_auc = 0.6
User 28576 AUC after training: 0.6
User 28576 does not improve AUC. Reverting changes.
Training on augumented user 62950 26/50 current_auc = 0.6
User 62950 AUC after training: 0.6
User 62950 does not improve AUC. Reverting changes.
Training on augumented user 74037 27/50 current_auc = 0.6
User 74037 AUC after training: 0.6
User 74037 does not improve AUC. Reverting changes.
Training on augumented user 70028 28/50 current_auc = 0.6
User 70028 AUC after training: 0.6
User 70028 does not improve AUC. Reverting changes.
Training on augumented user 36637 29/50 current_auc = 0.6
User 36637 AUC after training: 0.6
User 36637 does not improve AUC. Reverting changes.
Training on augumented user 104535 30/50 current_auc = 0.6
User 104535 AUC after training: 0.6
User 104535 does not improve AUC. Reverting changes.
Training on augumented user 130134 31/50 current_auc = 0.6
User 130134 AUC after training: 0.6
User 130134 does not improve AUC. Reverting changes.
Training on augumented user 24980 32/50 current_auc = 0.6
User 24980 AUC after training: 0.6
User 24980 does not improve AUC. Reverting changes.
Training on augumented user 66889 33/50 current_auc = 0.6
User 66889 AUC after training: 0.6
User 66889 does not improve AUC. Reverting changes.
Training on augumented user 10430 34/50 current_auc = 0.6
User 10430 AUC after training: 0.6
User 10430 does not improve AUC. Reverting changes.
Training on augumented user 34046 35/50 current_auc = 0.6
User 34046 AUC after training: 0.6
User 34046 does not improve AUC. Reverting changes.
Training on augumented user 131560 36/50 current_auc = 0.6
User 131560 AUC after training: 0.6
User 131560 does not improve AUC. Reverting changes.
Training on augumented user 20377 37/50 current_auc = 0.6
User 20377 AUC after training: 0.6
User 20377 does not improve AUC. Reverting changes.
Training on augumented user 31487 38/50 current_auc = 0.6
User 31487 AUC after training: 0.6
User 31487 does not improve AUC. Reverting changes.
Training on augumented user 56806 39/50 current_auc = 0.6
User 56806 AUC after training: 0.6
User 56806 does not improve AUC. Reverting changes.
Training on augumented user 33255 40/50 current_auc = 0.6
User 33255 AUC after training: 0.6
User 33255 does not improve AUC. Reverting changes.
Training on augumented user 37256 41/50 current_auc = 0.6
User 37256 AUC after training: 0.6
User 37256 does not improve AUC. Reverting changes.
Training on augumented user 37051 42/50 current_auc = 0.6
User 37051 AUC after training: 0.6
User 37051 does not improve AUC. Reverting changes.
Training on augumented user 129370 43/50 current_auc = 0.6
User 129370 AUC after training: 0.6
User 129370 does not improve AUC. Reverting changes.
Training on augumented user 1850 44/50 current_auc = 0.6
User 1850 AUC after training: 0.6
User 1850 does not improve AUC. Reverting changes.
Training on augumented user 22732 45/50 current_auc = 0.6
User 22732 AUC after training: 0.6
User 22732 does not improve AUC. Reverting changes.
Training on augumented user 14847 46/50 current_auc = 0.6
User 14847 AUC after training: 0.6
User 14847 does not improve AUC. Reverting changes.
Training on augumented user 16418 47/50 current_auc = 0.6
User 16418 AUC after training: 0.6
User 16418 does not improve AUC. Reverting changes.
Training on augumented user 30818 48/50 current_auc = 0.6
User 30818 AUC after training: 0.6
User 30818 does not improve AUC. Reverting changes.
Training on augumented user 92340 49/50 current_auc = 0.6
User 92340 AUC after training: 0.6
User 92340 does not improve AUC. Reverting changes.
[2024-12-02 20:15:15.817062] start test user 131347 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:16.424153] start test user 131347 290/567 recall augumented users by random, augumented_users = [88924, 48256, 101754, 31579, 100861, 17319, 100672, 42892, 77703, 95641, 75595, 20962, 113763, 46284, 64719, 63186, 97847, 18912, 126111, 86607, 22968, 50710, 49638, 49554, 7971, 20893, 43075, 32846, 72731, 85138, 101654, 122709, 732, 46419, 1040, 103398, 131019, 102956, 129109, 71664, 47163, 31978, 76904, 3286, 23283, 64403, 122367, 118338, 66240, 112388]
[2024-12-02 20:15:16.445043] user = 131347 Cloud 290/567
[2024-12-02 20:15:16.608014] user = 131347 Local 290/567
[2024-12-02 20:15:16.945299] user = 131347 Local+ 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:19.840436] user = 131347 MPDA- 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7450886717096911
Training on augumented user 88924 0/50 current_auc = 0.7450886717096911
User 88924 AUC after training: 0.7449837005395683
User 88924 does not improve AUC. Reverting changes.
Training on augumented user 48256 1/50 current_auc = 0.7450886717096911
User 48256 AUC after training: 0.7451324785759628
User 48256 improves AUC. Keeping the model.
Training on augumented user 101754 2/50 current_auc = 0.7451324785759628
User 101754 AUC after training: 0.7450316401290731
User 101754 does not improve AUC. Reverting changes.
Training on augumented user 31579 3/50 current_auc = 0.7451324785759628
User 31579 AUC after training: 0.7452523275497249
User 31579 improves AUC. Keeping the model.
Training on augumented user 100861 4/50 current_auc = 0.7452523275497249
User 100861 AUC after training: 0.7452969609606432
User 100861 improves AUC. Keeping the model.
Training on augumented user 17319 5/50 current_auc = 0.7452969609606432
User 17319 AUC after training: 0.7453118387642828
User 17319 improves AUC. Keeping the model.
Training on augumented user 100672 6/50 current_auc = 0.7453118387642828
User 100672 AUC after training: 0.7453763092467203
User 100672 improves AUC. Keeping the model.
Training on augumented user 42892 7/50 current_auc = 0.7453763092467203
User 42892 AUC after training: 0.7452126534066864
User 42892 does not improve AUC. Reverting changes.
Training on augumented user 77703 8/50 current_auc = 0.7453763092467203
User 77703 AUC after training: 0.7453531659966145
User 77703 does not improve AUC. Reverting changes.
Training on augumented user 95641 9/50 current_auc = 0.7453763092467203
User 95641 AUC after training: 0.7455217811045283
User 95641 improves AUC. Keeping the model.
Training on augumented user 75595 10/50 current_auc = 0.7455217811045283
User 75595 AUC after training: 0.7457523870609395
User 75595 improves AUC. Keeping the model.
Training on augumented user 20962 11/50 current_auc = 0.7457523870609395
User 20962 AUC after training: 0.7456581609712232
User 20962 does not improve AUC. Reverting changes.
Training on augumented user 113763 12/50 current_auc = 0.7457523870609395
User 113763 AUC after training: 0.745676344953449
User 113763 does not improve AUC. Reverting changes.
Training on augumented user 46284 13/50 current_auc = 0.7457523870609395
User 46284 AUC after training: 0.7454151568451122
User 46284 does not improve AUC. Reverting changes.
Training on augumented user 64719 14/50 current_auc = 0.7457523870609395
User 64719 AUC after training: 0.7457862753914516
User 64719 improves AUC. Keeping the model.
Training on augumented user 63186 15/50 current_auc = 0.7457862753914516
User 63186 AUC after training: 0.7459383596064324
User 63186 improves AUC. Keeping the model.
Training on augumented user 97847 16/50 current_auc = 0.7459383596064324
User 97847 AUC after training: 0.7456573344265764
User 97847 does not improve AUC. Reverting changes.
Training on augumented user 18912 17/50 current_auc = 0.7459383596064324
User 18912 AUC after training: 0.7459681152137114
User 18912 improves AUC. Keeping the model.
Training on augumented user 126111 18/50 current_auc = 0.7459681152137114
User 126111 AUC after training: 0.7458813280258145
User 126111 does not improve AUC. Reverting changes.
Training on augumented user 86607 19/50 current_auc = 0.7459681152137114
User 86607 AUC after training: 0.7457887550253914
User 86607 does not improve AUC. Reverting changes.
Training on augumented user 22968 20/50 current_auc = 0.7459681152137114
User 22968 AUC after training: 0.7460276264282691
User 22968 improves AUC. Keeping the model.
Training on augumented user 50710 21/50 current_auc = 0.7460276264282691
User 50710 AUC after training: 0.7459160429009734
User 50710 does not improve AUC. Reverting changes.
Training on augumented user 49638 22/50 current_auc = 0.7460276264282691
User 49638 AUC after training: 0.7459499312314855
User 49638 does not improve AUC. Reverting changes.
Training on augumented user 49554 23/50 current_auc = 0.7460276264282691
User 49554 AUC after training: 0.7474997024439272
User 49554 improves AUC. Keeping the model.
Training on augumented user 7971 24/50 current_auc = 0.7474997024439272
User 7971 AUC after training: 0.7474773857384681
User 7971 does not improve AUC. Reverting changes.
Training on augumented user 20893 25/50 current_auc = 0.7474997024439272
User 20893 AUC after training: 0.7473335669699536
User 20893 does not improve AUC. Reverting changes.
Training on augumented user 43075 26/50 current_auc = 0.7474997024439272
User 43075 AUC after training: 0.7472376877909437
User 43075 does not improve AUC. Reverting changes.
Training on augumented user 32846 27/50 current_auc = 0.7474997024439272
User 32846 AUC after training: 0.7475311111404993
User 32846 improves AUC. Keeping the model.
Training on augumented user 72731 28/50 current_auc = 0.7475311111404993
User 72731 AUC after training: 0.7476269903195091
User 72731 improves AUC. Keeping the model.
Training on augumented user 85138 29/50 current_auc = 0.7476269903195091
User 85138 AUC after training: 0.7476269903195091
User 85138 does not improve AUC. Reverting changes.
Training on augumented user 101654 30/50 current_auc = 0.7476269903195091
User 101654 AUC after training: 0.747565826015658
User 101654 does not improve AUC. Reverting changes.
Training on augumented user 122709 31/50 current_auc = 0.7476269903195091
User 122709 AUC after training: 0.7474269665150233
User 122709 does not improve AUC. Reverting changes.
Training on augumented user 732 32/50 current_auc = 0.7476269903195091
User 732 AUC after training: 0.7476484804803216
User 732 improves AUC. Keeping the model.
Training on augumented user 46419 33/50 current_auc = 0.7476484804803216
User 46419 AUC after training: 0.7477294818556919
User 46419 improves AUC. Keeping the model.
Training on augumented user 1040 34/50 current_auc = 0.7477294818556919
User 1040 AUC after training: 0.7477972585167161
User 1040 improves AUC. Keeping the model.
Training on augumented user 103398 35/50 current_auc = 0.7477972585167161
User 103398 AUC after training: 0.7477311349449852
User 103398 does not improve AUC. Reverting changes.
Training on augumented user 131019 36/50 current_auc = 0.7477972585167161
User 131019 AUC after training: 0.7477427065700382
User 131019 does not improve AUC. Reverting changes.
Training on augumented user 102956 37/50 current_auc = 0.7477972585167161
User 102956 AUC after training: 0.7478666882670335
User 102956 improves AUC. Keeping the model.
Training on augumented user 129109 38/50 current_auc = 0.7478666882670335
User 129109 AUC after training: 0.7478551166419805
User 129109 does not improve AUC. Reverting changes.
Training on augumented user 71664 39/50 current_auc = 0.7478666882670335
User 71664 AUC after training: 0.7479204136690648
User 71664 improves AUC. Keeping the model.
Training on augumented user 47163 40/50 current_auc = 0.7479204136690648
User 47163 AUC after training: 0.747806350507829
User 47163 does not improve AUC. Reverting changes.
Training on augumented user 31978 41/50 current_auc = 0.7479204136690648
User 31978 AUC after training: 0.7480105070355481
User 31978 improves AUC. Keeping the model.
Training on augumented user 76904 42/50 current_auc = 0.7480105070355481
User 76904 AUC after training: 0.7479774452496826
User 76904 does not improve AUC. Reverting changes.
Training on augumented user 3286 43/50 current_auc = 0.7480105070355481
User 3286 AUC after training: 0.7481692036077021
User 3286 improves AUC. Keeping the model.
Training on augumented user 23283 44/50 current_auc = 0.7481692036077021
User 23283 AUC after training: 0.7480691917054592
User 23283 does not improve AUC. Reverting changes.
Training on augumented user 64403 45/50 current_auc = 0.7481692036077021
User 64403 AUC after training: 0.7482055715721541
User 64403 improves AUC. Keeping the model.
Training on augumented user 122367 46/50 current_auc = 0.7482055715721541
User 122367 AUC after training: 0.7481452338129497
User 122367 does not improve AUC. Reverting changes.
Training on augumented user 118338 47/50 current_auc = 0.7482055715721541
User 118338 AUC after training: 0.748071671339399
User 118338 does not improve AUC. Reverting changes.
Training on augumented user 66240 48/50 current_auc = 0.7482055715721541
User 66240 AUC after training: 0.7480708447947524
User 66240 does not improve AUC. Reverting changes.
Training on augumented user 112388 49/50 current_auc = 0.7482055715721541
User 112388 AUC after training: 0.7482030919382141
User 112388 does not improve AUC. Reverting changes.
[2024-12-02 20:15:57.065625] start test user 131357 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:57.949049] start test user 131357 291/567 recall augumented users by random, augumented_users = [100016, 16972, 5796, 65571, 25872, 50344, 115194, 25190, 66524, 121094, 80919, 67348, 55639, 87174, 137912, 77661, 59905, 27986, 121344, 230, 74233, 101010, 81051, 94747, 54778, 104059, 4639, 112569, 74004, 28998, 120027, 81564, 102101, 45454, 22433, 137473, 121111, 110061, 20460, 69652, 59879, 129502, 124828, 63074, 48853, 37848, 12498, 76317, 91623, 44142]
[2024-12-02 20:15:57.966109] user = 131357 Cloud 291/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:57.972461] user = 131357 Local 291/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:58.003639] user = 131357 Local+ 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:00.282413] user = 131357 MPDA- 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 100016 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100016 AUC after training: 0.5
User 100016 does not improve AUC. Reverting changes.
Training on augumented user 16972 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16972 AUC after training: 0.5
User 16972 does not improve AUC. Reverting changes.
Training on augumented user 5796 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5796 AUC after training: 0.5
User 5796 does not improve AUC. Reverting changes.
Training on augumented user 65571 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65571 AUC after training: 0.5
User 65571 does not improve AUC. Reverting changes.
Training on augumented user 25872 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25872 AUC after training: 0.5
User 25872 does not improve AUC. Reverting changes.
Training on augumented user 50344 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50344 AUC after training: 0.5
User 50344 does not improve AUC. Reverting changes.
Training on augumented user 115194 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115194 AUC after training: 0.5
User 115194 does not improve AUC. Reverting changes.
Training on augumented user 25190 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25190 AUC after training: 0.5
User 25190 does not improve AUC. Reverting changes.
Training on augumented user 66524 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66524 AUC after training: 0.5
User 66524 does not improve AUC. Reverting changes.
Training on augumented user 121094 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121094 AUC after training: 0.5
User 121094 does not improve AUC. Reverting changes.
Training on augumented user 80919 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80919 AUC after training: 0.5
User 80919 does not improve AUC. Reverting changes.
Training on augumented user 67348 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67348 AUC after training: 0.5
User 67348 does not improve AUC. Reverting changes.
Training on augumented user 55639 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55639 AUC after training: 0.5
User 55639 does not improve AUC. Reverting changes.
Training on augumented user 87174 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87174 AUC after training: 0.5
User 87174 does not improve AUC. Reverting changes.
Training on augumented user 137912 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137912 AUC after training: 0.5
User 137912 does not improve AUC. Reverting changes.
Training on augumented user 77661 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77661 AUC after training: 0.5
User 77661 does not improve AUC. Reverting changes.
Training on augumented user 59905 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59905 AUC after training: 0.5
User 59905 does not improve AUC. Reverting changes.
Training on augumented user 27986 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27986 AUC after training: 0.5
User 27986 does not improve AUC. Reverting changes.
Training on augumented user 121344 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121344 AUC after training: 0.5
User 121344 does not improve AUC. Reverting changes.
Training on augumented user 230 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 230 AUC after training: 0.5
User 230 does not improve AUC. Reverting changes.
Training on augumented user 74233 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74233 AUC after training: 0.5
User 74233 does not improve AUC. Reverting changes.
Training on augumented user 101010 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101010 AUC after training: 0.5
User 101010 does not improve AUC. Reverting changes.
Training on augumented user 81051 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81051 AUC after training: 0.5
User 81051 does not improve AUC. Reverting changes.
Training on augumented user 94747 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94747 AUC after training: 0.5
User 94747 does not improve AUC. Reverting changes.
Training on augumented user 54778 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54778 AUC after training: 0.5
User 54778 does not improve AUC. Reverting changes.
Training on augumented user 104059 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104059 AUC after training: 0.5
User 104059 does not improve AUC. Reverting changes.
Training on augumented user 4639 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4639 AUC after training: 0.5
User 4639 does not improve AUC. Reverting changes.
Training on augumented user 112569 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112569 AUC after training: 0.5
User 112569 does not improve AUC. Reverting changes.
Training on augumented user 74004 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74004 AUC after training: 0.5
User 74004 does not improve AUC. Reverting changes.
Training on augumented user 28998 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28998 AUC after training: 0.5
User 28998 does not improve AUC. Reverting changes.
Training on augumented user 120027 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120027 AUC after training: 0.5
User 120027 does not improve AUC. Reverting changes.
Training on augumented user 81564 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81564 AUC after training: 0.5
User 81564 does not improve AUC. Reverting changes.
Training on augumented user 102101 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102101 AUC after training: 0.5
User 102101 does not improve AUC. Reverting changes.
Training on augumented user 45454 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45454 AUC after training: 0.5
User 45454 does not improve AUC. Reverting changes.
Training on augumented user 22433 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22433 AUC after training: 0.5
User 22433 does not improve AUC. Reverting changes.
Training on augumented user 137473 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137473 AUC after training: 0.5
User 137473 does not improve AUC. Reverting changes.
Training on augumented user 121111 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121111 AUC after training: 0.5
User 121111 does not improve AUC. Reverting changes.
Training on augumented user 110061 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110061 AUC after training: 0.5
User 110061 does not improve AUC. Reverting changes.
Training on augumented user 20460 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20460 AUC after training: 0.5
User 20460 does not improve AUC. Reverting changes.
Training on augumented user 69652 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69652 AUC after training: 0.5
User 69652 does not improve AUC. Reverting changes.
Training on augumented user 59879 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59879 AUC after training: 0.5
User 59879 does not improve AUC. Reverting changes.
Training on augumented user 129502 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129502 AUC after training: 0.5
User 129502 does not improve AUC. Reverting changes.
Training on augumented user 124828 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124828 AUC after training: 0.5
User 124828 does not improve AUC. Reverting changes.
Training on augumented user 63074 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63074 AUC after training: 0.5
User 63074 does not improve AUC. Reverting changes.
Training on augumented user 48853 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48853 AUC after training: 0.5
User 48853 does not improve AUC. Reverting changes.
Training on augumented user 37848 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37848 AUC after training: 0.5
User 37848 does not improve AUC. Reverting changes.
Training on augumented user 12498 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12498 AUC after training: 0.5
User 12498 does not improve AUC. Reverting changes.
Training on augumented user 76317 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76317 AUC after training: 0.5
User 76317 does not improve AUC. Reverting changes.
Training on augumented user 91623 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91623 AUC after training: 0.5
User 91623 does not improve AUC. Reverting changes.
Training on augumented user 44142 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44142 AUC after training: 0.5
User 44142 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:31.763566] start test user 131364 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:32.280087] start test user 131364 292/567 recall augumented users by random, augumented_users = [72653, 109144, 83533, 4417, 18478, 94204, 33614, 91018, 49199, 123161, 105505, 7150, 56791, 131946, 88867, 2812, 99790, 82818, 66737, 79937, 8895, 123969, 112202, 93852, 54057, 36157, 22606, 20010, 5481, 109074, 130395, 82951, 135520, 116235, 45788, 57496, 67564, 110647, 59015, 82959, 43020, 69869, 55712, 39209, 102234, 90533, 31749, 25653, 134870, 84118]
[2024-12-02 20:16:32.302049] user = 131364 Cloud 292/567
[2024-12-02 20:16:32.312815] user = 131364 Local 292/567
[2024-12-02 20:16:32.363640] user = 131364 Local+ 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:35.722058] user = 131364 MPDA- 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7291666666666667
Training on augumented user 72653 0/50 current_auc = 0.7291666666666667
User 72653 AUC after training: 0.7291666666666667
User 72653 does not improve AUC. Reverting changes.
Training on augumented user 109144 1/50 current_auc = 0.7291666666666667
User 109144 AUC after training: 0.7291666666666667
User 109144 does not improve AUC. Reverting changes.
Training on augumented user 83533 2/50 current_auc = 0.7291666666666667
User 83533 AUC after training: 0.7291666666666667
User 83533 does not improve AUC. Reverting changes.
Training on augumented user 4417 3/50 current_auc = 0.7291666666666667
User 4417 AUC after training: 0.7222222222222222
User 4417 does not improve AUC. Reverting changes.
Training on augumented user 18478 4/50 current_auc = 0.7291666666666667
User 18478 AUC after training: 0.7291666666666667
User 18478 does not improve AUC. Reverting changes.
Training on augumented user 94204 5/50 current_auc = 0.7291666666666667
User 94204 AUC after training: 0.7291666666666667
User 94204 does not improve AUC. Reverting changes.
Training on augumented user 33614 6/50 current_auc = 0.7291666666666667
User 33614 AUC after training: 0.7222222222222222
User 33614 does not improve AUC. Reverting changes.
Training on augumented user 91018 7/50 current_auc = 0.7291666666666667
User 91018 AUC after training: 0.7291666666666667
User 91018 does not improve AUC. Reverting changes.
Training on augumented user 49199 8/50 current_auc = 0.7291666666666667
User 49199 AUC after training: 0.7291666666666667
User 49199 does not improve AUC. Reverting changes.
Training on augumented user 123161 9/50 current_auc = 0.7291666666666667
User 123161 AUC after training: 0.7291666666666667
User 123161 does not improve AUC. Reverting changes.
Training on augumented user 105505 10/50 current_auc = 0.7291666666666667
User 105505 AUC after training: 0.7291666666666667
User 105505 does not improve AUC. Reverting changes.
Training on augumented user 7150 11/50 current_auc = 0.7291666666666667
User 7150 AUC after training: 0.7291666666666667
User 7150 does not improve AUC. Reverting changes.
Training on augumented user 56791 12/50 current_auc = 0.7291666666666667
User 56791 AUC after training: 0.7291666666666667
User 56791 does not improve AUC. Reverting changes.
Training on augumented user 131946 13/50 current_auc = 0.7291666666666667
User 131946 AUC after training: 0.7222222222222223
User 131946 does not improve AUC. Reverting changes.
Training on augumented user 88867 14/50 current_auc = 0.7291666666666667
User 88867 AUC after training: 0.7291666666666667
User 88867 does not improve AUC. Reverting changes.
Training on augumented user 2812 15/50 current_auc = 0.7291666666666667
User 2812 AUC after training: 0.7222222222222222
User 2812 does not improve AUC. Reverting changes.
Training on augumented user 99790 16/50 current_auc = 0.7291666666666667
User 99790 AUC after training: 0.7291666666666667
User 99790 does not improve AUC. Reverting changes.
Training on augumented user 82818 17/50 current_auc = 0.7291666666666667
User 82818 AUC after training: 0.7291666666666667
User 82818 does not improve AUC. Reverting changes.
Training on augumented user 66737 18/50 current_auc = 0.7291666666666667
User 66737 AUC after training: 0.7291666666666667
User 66737 does not improve AUC. Reverting changes.
Training on augumented user 79937 19/50 current_auc = 0.7291666666666667
User 79937 AUC after training: 0.7291666666666667
User 79937 does not improve AUC. Reverting changes.
Training on augumented user 8895 20/50 current_auc = 0.7291666666666667
User 8895 AUC after training: 0.7291666666666667
User 8895 does not improve AUC. Reverting changes.
Training on augumented user 123969 21/50 current_auc = 0.7291666666666667
User 123969 AUC after training: 0.7291666666666667
User 123969 does not improve AUC. Reverting changes.
Training on augumented user 112202 22/50 current_auc = 0.7291666666666667
User 112202 AUC after training: 0.7291666666666667
User 112202 does not improve AUC. Reverting changes.
Training on augumented user 93852 23/50 current_auc = 0.7291666666666667
User 93852 AUC after training: 0.7291666666666667
User 93852 does not improve AUC. Reverting changes.
Training on augumented user 54057 24/50 current_auc = 0.7291666666666667
User 54057 AUC after training: 0.7291666666666667
User 54057 does not improve AUC. Reverting changes.
Training on augumented user 36157 25/50 current_auc = 0.7291666666666667
User 36157 AUC after training: 0.7291666666666667
User 36157 does not improve AUC. Reverting changes.
Training on augumented user 22606 26/50 current_auc = 0.7291666666666667
User 22606 AUC after training: 0.7291666666666667
User 22606 does not improve AUC. Reverting changes.
Training on augumented user 20010 27/50 current_auc = 0.7291666666666667
User 20010 AUC after training: 0.7291666666666667
User 20010 does not improve AUC. Reverting changes.
Training on augumented user 5481 28/50 current_auc = 0.7291666666666667
User 5481 AUC after training: 0.7291666666666667
User 5481 does not improve AUC. Reverting changes.
Training on augumented user 109074 29/50 current_auc = 0.7291666666666667
User 109074 AUC after training: 0.7291666666666667
User 109074 does not improve AUC. Reverting changes.
Training on augumented user 130395 30/50 current_auc = 0.7291666666666667
User 130395 AUC after training: 0.7291666666666667
User 130395 does not improve AUC. Reverting changes.
Training on augumented user 82951 31/50 current_auc = 0.7291666666666667
User 82951 AUC after training: 0.7291666666666667
User 82951 does not improve AUC. Reverting changes.
Training on augumented user 135520 32/50 current_auc = 0.7291666666666667
User 135520 AUC after training: 0.7291666666666667
User 135520 does not improve AUC. Reverting changes.
Training on augumented user 116235 33/50 current_auc = 0.7291666666666667
User 116235 AUC after training: 0.7291666666666667
User 116235 does not improve AUC. Reverting changes.
Training on augumented user 45788 34/50 current_auc = 0.7291666666666667
User 45788 AUC after training: 0.7291666666666667
User 45788 does not improve AUC. Reverting changes.
Training on augumented user 57496 35/50 current_auc = 0.7291666666666667
User 57496 AUC after training: 0.7291666666666667
User 57496 does not improve AUC. Reverting changes.
Training on augumented user 67564 36/50 current_auc = 0.7291666666666667
User 67564 AUC after training: 0.7291666666666667
User 67564 does not improve AUC. Reverting changes.
Training on augumented user 110647 37/50 current_auc = 0.7291666666666667
User 110647 AUC after training: 0.7291666666666667
User 110647 does not improve AUC. Reverting changes.
Training on augumented user 59015 38/50 current_auc = 0.7291666666666667
User 59015 AUC after training: 0.7291666666666667
User 59015 does not improve AUC. Reverting changes.
Training on augumented user 82959 39/50 current_auc = 0.7291666666666667
User 82959 AUC after training: 0.7291666666666667
User 82959 does not improve AUC. Reverting changes.
Training on augumented user 43020 40/50 current_auc = 0.7291666666666667
User 43020 AUC after training: 0.7291666666666667
User 43020 does not improve AUC. Reverting changes.
Training on augumented user 69869 41/50 current_auc = 0.7291666666666667
User 69869 AUC after training: 0.7291666666666667
User 69869 does not improve AUC. Reverting changes.
Training on augumented user 55712 42/50 current_auc = 0.7291666666666667
User 55712 AUC after training: 0.7291666666666667
User 55712 does not improve AUC. Reverting changes.
Training on augumented user 39209 43/50 current_auc = 0.7291666666666667
User 39209 AUC after training: 0.7291666666666667
User 39209 does not improve AUC. Reverting changes.
Training on augumented user 102234 44/50 current_auc = 0.7291666666666667
User 102234 AUC after training: 0.7291666666666667
User 102234 does not improve AUC. Reverting changes.
Training on augumented user 90533 45/50 current_auc = 0.7291666666666667
User 90533 AUC after training: 0.7291666666666667
User 90533 does not improve AUC. Reverting changes.
Training on augumented user 31749 46/50 current_auc = 0.7291666666666667
User 31749 AUC after training: 0.7291666666666667
User 31749 does not improve AUC. Reverting changes.
Training on augumented user 25653 47/50 current_auc = 0.7291666666666667
User 25653 AUC after training: 0.7152777777777778
User 25653 does not improve AUC. Reverting changes.
Training on augumented user 134870 48/50 current_auc = 0.7291666666666667
User 134870 AUC after training: 0.7291666666666667
User 134870 does not improve AUC. Reverting changes.
Training on augumented user 84118 49/50 current_auc = 0.7291666666666667
User 84118 AUC after training: 0.7291666666666667
User 84118 does not improve AUC. Reverting changes.
[2024-12-02 20:17:03.158109] start test user 131366 293/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:03.605288] start test user 131366 293/567 recall augumented users by random, augumented_users = [44428, 60281, 70686, 89070, 23317, 94980, 118083, 63284, 124716, 84699, 108935, 38623, 99421, 14388, 36783, 87201, 56282, 134083, 116285, 5276, 99883, 92331, 23988, 57895, 90206, 9886, 48805, 110072, 78904, 25258, 71835, 131005, 13872, 121058, 99740, 29280, 95789, 77315, 114167, 105613, 95349, 9220, 95938, 122797, 77035, 37322, 117170, 67291, 36089, 64298]
[2024-12-02 20:17:03.622842] user = 131366 Cloud 293/567
[2024-12-02 20:17:03.637106] user = 131366 Local 293/567
[2024-12-02 20:17:03.709795] user = 131366 Local+ 293/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:06.385248] user = 131366 MPDA- 293/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6406417112299465
Training on augumented user 44428 0/50 current_auc = 0.6406417112299465
User 44428 AUC after training: 0.6406417112299464
User 44428 does not improve AUC. Reverting changes.
Training on augumented user 60281 1/50 current_auc = 0.6406417112299465
User 60281 AUC after training: 0.6406417112299465
User 60281 does not improve AUC. Reverting changes.
Training on augumented user 70686 2/50 current_auc = 0.6406417112299465
User 70686 AUC after training: 0.6401069518716577
User 70686 does not improve AUC. Reverting changes.
Training on augumented user 89070 3/50 current_auc = 0.6406417112299465
User 89070 AUC after training: 0.6385026737967914
User 89070 does not improve AUC. Reverting changes.
Training on augumented user 23317 4/50 current_auc = 0.6406417112299465
User 23317 AUC after training: 0.6385026737967914
User 23317 does not improve AUC. Reverting changes.
Training on augumented user 94980 5/50 current_auc = 0.6406417112299465
User 94980 AUC after training: 0.6385026737967914
User 94980 does not improve AUC. Reverting changes.
Training on augumented user 118083 6/50 current_auc = 0.6406417112299465
User 118083 AUC after training: 0.6406417112299465
User 118083 does not improve AUC. Reverting changes.
Training on augumented user 63284 7/50 current_auc = 0.6406417112299465
User 63284 AUC after training: 0.6379679144385026
User 63284 does not improve AUC. Reverting changes.
Training on augumented user 124716 8/50 current_auc = 0.6406417112299465
User 124716 AUC after training: 0.6406417112299465
User 124716 does not improve AUC. Reverting changes.
Training on augumented user 84699 9/50 current_auc = 0.6406417112299465
User 84699 AUC after training: 0.6368983957219251
User 84699 does not improve AUC. Reverting changes.
Training on augumented user 108935 10/50 current_auc = 0.6406417112299465
User 108935 AUC after training: 0.6401069518716578
User 108935 does not improve AUC. Reverting changes.
Training on augumented user 38623 11/50 current_auc = 0.6406417112299465
User 38623 AUC after training: 0.641711229946524
User 38623 improves AUC. Keeping the model.
Training on augumented user 99421 12/50 current_auc = 0.641711229946524
User 99421 AUC after training: 0.6422459893048127
User 99421 improves AUC. Keeping the model.
Training on augumented user 14388 13/50 current_auc = 0.6422459893048127
User 14388 AUC after training: 0.6401069518716577
User 14388 does not improve AUC. Reverting changes.
Training on augumented user 36783 14/50 current_auc = 0.6422459893048127
User 36783 AUC after training: 0.6433155080213903
User 36783 improves AUC. Keeping the model.
Training on augumented user 87201 15/50 current_auc = 0.6433155080213903
User 87201 AUC after training: 0.6427807486631015
User 87201 does not improve AUC. Reverting changes.
Training on augumented user 56282 16/50 current_auc = 0.6433155080213903
User 56282 AUC after training: 0.6427807486631015
User 56282 does not improve AUC. Reverting changes.
Training on augumented user 134083 17/50 current_auc = 0.6433155080213903
User 134083 AUC after training: 0.6406417112299465
User 134083 does not improve AUC. Reverting changes.
Training on augumented user 116285 18/50 current_auc = 0.6433155080213903
User 116285 AUC after training: 0.6406417112299464
User 116285 does not improve AUC. Reverting changes.
Training on augumented user 5276 19/50 current_auc = 0.6433155080213903
User 5276 AUC after training: 0.6401069518716578
User 5276 does not improve AUC. Reverting changes.
Training on augumented user 99883 20/50 current_auc = 0.6433155080213903
User 99883 AUC after training: 0.6406417112299465
User 99883 does not improve AUC. Reverting changes.
Training on augumented user 92331 21/50 current_auc = 0.6433155080213903
User 92331 AUC after training: 0.6411764705882352
User 92331 does not improve AUC. Reverting changes.
Training on augumented user 23988 22/50 current_auc = 0.6433155080213903
User 23988 AUC after training: 0.6427807486631015
User 23988 does not improve AUC. Reverting changes.
Training on augumented user 57895 23/50 current_auc = 0.6433155080213903
User 57895 AUC after training: 0.6406417112299466
User 57895 does not improve AUC. Reverting changes.
Training on augumented user 90206 24/50 current_auc = 0.6433155080213903
User 90206 AUC after training: 0.6422459893048128
User 90206 does not improve AUC. Reverting changes.
Training on augumented user 9886 25/50 current_auc = 0.6433155080213903
User 9886 AUC after training: 0.6422459893048128
User 9886 does not improve AUC. Reverting changes.
Training on augumented user 48805 26/50 current_auc = 0.6433155080213903
User 48805 AUC after training: 0.6433155080213903
User 48805 does not improve AUC. Reverting changes.
Training on augumented user 110072 27/50 current_auc = 0.6433155080213903
User 110072 AUC after training: 0.6427807486631015
User 110072 does not improve AUC. Reverting changes.
Training on augumented user 78904 28/50 current_auc = 0.6433155080213903
User 78904 AUC after training: 0.6406417112299466
User 78904 does not improve AUC. Reverting changes.
Training on augumented user 25258 29/50 current_auc = 0.6433155080213903
User 25258 AUC after training: 0.641711229946524
User 25258 does not improve AUC. Reverting changes.
Training on augumented user 71835 30/50 current_auc = 0.6433155080213903
User 71835 AUC after training: 0.6401069518716577
User 71835 does not improve AUC. Reverting changes.
Training on augumented user 131005 31/50 current_auc = 0.6433155080213903
User 131005 AUC after training: 0.6387700534759357
User 131005 does not improve AUC. Reverting changes.
Training on augumented user 13872 32/50 current_auc = 0.6433155080213903
User 13872 AUC after training: 0.641711229946524
User 13872 does not improve AUC. Reverting changes.
Training on augumented user 121058 33/50 current_auc = 0.6433155080213903
User 121058 AUC after training: 0.6401069518716577
User 121058 does not improve AUC. Reverting changes.
Training on augumented user 99740 34/50 current_auc = 0.6433155080213903
User 99740 AUC after training: 0.6438502673796791
User 99740 improves AUC. Keeping the model.
Training on augumented user 29280 35/50 current_auc = 0.6438502673796791
User 29280 AUC after training: 0.6433155080213903
User 29280 does not improve AUC. Reverting changes.
Training on augumented user 95789 36/50 current_auc = 0.6438502673796791
User 95789 AUC after training: 0.6363636363636362
User 95789 does not improve AUC. Reverting changes.
Training on augumented user 77315 37/50 current_auc = 0.6438502673796791
User 77315 AUC after training: 0.6443850267379679
User 77315 improves AUC. Keeping the model.
Training on augumented user 114167 38/50 current_auc = 0.6443850267379679
User 114167 AUC after training: 0.6438502673796791
User 114167 does not improve AUC. Reverting changes.
Training on augumented user 105613 39/50 current_auc = 0.6443850267379679
User 105613 AUC after training: 0.6406417112299465
User 105613 does not improve AUC. Reverting changes.
Training on augumented user 95349 40/50 current_auc = 0.6443850267379679
User 95349 AUC after training: 0.6449197860962567
User 95349 improves AUC. Keeping the model.
Training on augumented user 9220 41/50 current_auc = 0.6449197860962567
User 9220 AUC after training: 0.6449197860962567
User 9220 does not improve AUC. Reverting changes.
Training on augumented user 95938 42/50 current_auc = 0.6449197860962567
User 95938 AUC after training: 0.6459893048128342
User 95938 improves AUC. Keeping the model.
Training on augumented user 122797 43/50 current_auc = 0.6459893048128342
User 122797 AUC after training: 0.6454545454545453
User 122797 does not improve AUC. Reverting changes.
Training on augumented user 77035 44/50 current_auc = 0.6459893048128342
User 77035 AUC after training: 0.6377005347593583
User 77035 does not improve AUC. Reverting changes.
Training on augumented user 37322 45/50 current_auc = 0.6459893048128342
User 37322 AUC after training: 0.6454545454545454
User 37322 does not improve AUC. Reverting changes.
Training on augumented user 117170 46/50 current_auc = 0.6459893048128342
User 117170 AUC after training: 0.6454545454545454
User 117170 does not improve AUC. Reverting changes.
Training on augumented user 67291 47/50 current_auc = 0.6459893048128342
User 67291 AUC after training: 0.6443850267379678
User 67291 does not improve AUC. Reverting changes.
Training on augumented user 36089 48/50 current_auc = 0.6459893048128342
User 36089 AUC after training: 0.6454545454545454
User 36089 does not improve AUC. Reverting changes.
Training on augumented user 64298 49/50 current_auc = 0.6459893048128342
User 64298 AUC after training: 0.6427807486631015
User 64298 does not improve AUC. Reverting changes.
[2024-12-02 20:17:41.812267] start test user 131393 294/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:42.382627] start test user 131393 294/567 recall augumented users by random, augumented_users = [13619, 78225, 72959, 55691, 63336, 39605, 41739, 45347, 73548, 78071, 70178, 120050, 74800, 70138, 135374, 132325, 14838, 42638, 77820, 110630, 121895, 71680, 26082, 84747, 42280, 100733, 23924, 35004, 96884, 53484, 136664, 34703, 78691, 1556, 2520, 95281, 90780, 97830, 53002, 115764, 84175, 79459, 97818, 129502, 135551, 34834, 25416, 116088, 68048, 120405]
[2024-12-02 20:17:42.397666] user = 131393 Cloud 294/567
[2024-12-02 20:17:42.408407] user = 131393 Local 294/567
[2024-12-02 20:17:42.456250] user = 131393 Local+ 294/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:44.462047] user = 131393 MPDA- 294/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5454545454545454
Training on augumented user 13619 0/50 current_auc = 0.5454545454545454
User 13619 AUC after training: 0.562200956937799
User 13619 improves AUC. Keeping the model.
Training on augumented user 78225 1/50 current_auc = 0.562200956937799
User 78225 AUC after training: 0.5502392344497606
User 78225 does not improve AUC. Reverting changes.
Training on augumented user 72959 2/50 current_auc = 0.562200956937799
User 72959 AUC after training: 0.5598086124401914
User 72959 does not improve AUC. Reverting changes.
Training on augumented user 55691 3/50 current_auc = 0.562200956937799
User 55691 AUC after training: 0.5598086124401913
User 55691 does not improve AUC. Reverting changes.
Training on augumented user 63336 4/50 current_auc = 0.562200956937799
User 63336 AUC after training: 0.5598086124401914
User 63336 does not improve AUC. Reverting changes.
Training on augumented user 39605 5/50 current_auc = 0.562200956937799
User 39605 AUC after training: 0.5598086124401914
User 39605 does not improve AUC. Reverting changes.
Training on augumented user 41739 6/50 current_auc = 0.562200956937799
User 41739 AUC after training: 0.5598086124401914
User 41739 does not improve AUC. Reverting changes.
Training on augumented user 45347 7/50 current_auc = 0.562200956937799
User 45347 AUC after training: 0.5574162679425837
User 45347 does not improve AUC. Reverting changes.
Training on augumented user 73548 8/50 current_auc = 0.562200956937799
User 73548 AUC after training: 0.562200956937799
User 73548 does not improve AUC. Reverting changes.
Training on augumented user 78071 9/50 current_auc = 0.562200956937799
User 78071 AUC after training: 0.5645933014354068
User 78071 improves AUC. Keeping the model.
Training on augumented user 70178 10/50 current_auc = 0.5645933014354068
User 70178 AUC after training: 0.569377990430622
User 70178 improves AUC. Keeping the model.
Training on augumented user 120050 11/50 current_auc = 0.569377990430622
User 120050 AUC after training: 0.5598086124401913
User 120050 does not improve AUC. Reverting changes.
Training on augumented user 74800 12/50 current_auc = 0.569377990430622
User 74800 AUC after training: 0.569377990430622
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 70138 13/50 current_auc = 0.569377990430622
User 70138 AUC after training: 0.5669856459330144
User 70138 does not improve AUC. Reverting changes.
Training on augumented user 135374 14/50 current_auc = 0.569377990430622
User 135374 AUC after training: 0.5717703349282297
User 135374 improves AUC. Keeping the model.
Training on augumented user 132325 15/50 current_auc = 0.5717703349282297
User 132325 AUC after training: 0.569377990430622
User 132325 does not improve AUC. Reverting changes.
Training on augumented user 14838 16/50 current_auc = 0.5717703349282297
User 14838 AUC after training: 0.569377990430622
User 14838 does not improve AUC. Reverting changes.
Training on augumented user 42638 17/50 current_auc = 0.5717703349282297
User 42638 AUC after training: 0.5645933014354066
User 42638 does not improve AUC. Reverting changes.
Training on augumented user 77820 18/50 current_auc = 0.5717703349282297
User 77820 AUC after training: 0.5645933014354066
User 77820 does not improve AUC. Reverting changes.
Training on augumented user 110630 19/50 current_auc = 0.5717703349282297
User 110630 AUC after training: 0.5669856459330143
User 110630 does not improve AUC. Reverting changes.
Training on augumented user 121895 20/50 current_auc = 0.5717703349282297
User 121895 AUC after training: 0.569377990430622
User 121895 does not improve AUC. Reverting changes.
Training on augumented user 71680 21/50 current_auc = 0.5717703349282297
User 71680 AUC after training: 0.5526315789473684
User 71680 does not improve AUC. Reverting changes.
Training on augumented user 26082 22/50 current_auc = 0.5717703349282297
User 26082 AUC after training: 0.5669856459330143
User 26082 does not improve AUC. Reverting changes.
Training on augumented user 84747 23/50 current_auc = 0.5717703349282297
User 84747 AUC after training: 0.5598086124401914
User 84747 does not improve AUC. Reverting changes.
Training on augumented user 42280 24/50 current_auc = 0.5717703349282297
User 42280 AUC after training: 0.5741626794258373
User 42280 improves AUC. Keeping the model.
Training on augumented user 100733 25/50 current_auc = 0.5741626794258373
User 100733 AUC after training: 0.5645933014354066
User 100733 does not improve AUC. Reverting changes.
Training on augumented user 23924 26/50 current_auc = 0.5741626794258373
User 23924 AUC after training: 0.569377990430622
User 23924 does not improve AUC. Reverting changes.
Training on augumented user 35004 27/50 current_auc = 0.5741626794258373
User 35004 AUC after training: 0.5502392344497608
User 35004 does not improve AUC. Reverting changes.
Training on augumented user 96884 28/50 current_auc = 0.5741626794258373
User 96884 AUC after training: 0.5550239234449761
User 96884 does not improve AUC. Reverting changes.
Training on augumented user 53484 29/50 current_auc = 0.5741626794258373
User 53484 AUC after training: 0.562200956937799
User 53484 does not improve AUC. Reverting changes.
Training on augumented user 136664 30/50 current_auc = 0.5741626794258373
User 136664 AUC after training: 0.5598086124401914
User 136664 does not improve AUC. Reverting changes.
Training on augumented user 34703 31/50 current_auc = 0.5741626794258373
User 34703 AUC after training: 0.569377990430622
User 34703 does not improve AUC. Reverting changes.
Training on augumented user 78691 32/50 current_auc = 0.5741626794258373
User 78691 AUC after training: 0.5741626794258373
User 78691 does not improve AUC. Reverting changes.
Training on augumented user 1556 33/50 current_auc = 0.5741626794258373
User 1556 AUC after training: 0.5717703349282296
User 1556 does not improve AUC. Reverting changes.
Training on augumented user 2520 34/50 current_auc = 0.5741626794258373
User 2520 AUC after training: 0.569377990430622
User 2520 does not improve AUC. Reverting changes.
Training on augumented user 95281 35/50 current_auc = 0.5741626794258373
User 95281 AUC after training: 0.569377990430622
User 95281 does not improve AUC. Reverting changes.
Training on augumented user 90780 36/50 current_auc = 0.5741626794258373
User 90780 AUC after training: 0.5574162679425837
User 90780 does not improve AUC. Reverting changes.
Training on augumented user 97830 37/50 current_auc = 0.5741626794258373
User 97830 AUC after training: 0.5717703349282297
User 97830 does not improve AUC. Reverting changes.
Training on augumented user 53002 38/50 current_auc = 0.5741626794258373
User 53002 AUC after training: 0.5574162679425837
User 53002 does not improve AUC. Reverting changes.
Training on augumented user 115764 39/50 current_auc = 0.5741626794258373
User 115764 AUC after training: 0.5645933014354066
User 115764 does not improve AUC. Reverting changes.
Training on augumented user 84175 40/50 current_auc = 0.5741626794258373
User 84175 AUC after training: 0.5741626794258373
User 84175 does not improve AUC. Reverting changes.
Training on augumented user 79459 41/50 current_auc = 0.5741626794258373
User 79459 AUC after training: 0.5645933014354066
User 79459 does not improve AUC. Reverting changes.
Training on augumented user 97818 42/50 current_auc = 0.5741626794258373
User 97818 AUC after training: 0.5669856459330143
User 97818 does not improve AUC. Reverting changes.
Training on augumented user 129502 43/50 current_auc = 0.5741626794258373
User 129502 AUC after training: 0.562200956937799
User 129502 does not improve AUC. Reverting changes.
Training on augumented user 135551 44/50 current_auc = 0.5741626794258373
User 135551 AUC after training: 0.5645933014354066
User 135551 does not improve AUC. Reverting changes.
Training on augumented user 34834 45/50 current_auc = 0.5741626794258373
User 34834 AUC after training: 0.5669856459330143
User 34834 does not improve AUC. Reverting changes.
Training on augumented user 25416 46/50 current_auc = 0.5741626794258373
User 25416 AUC after training: 0.5645933014354066
User 25416 does not improve AUC. Reverting changes.
Training on augumented user 116088 47/50 current_auc = 0.5741626794258373
User 116088 AUC after training: 0.569377990430622
User 116088 does not improve AUC. Reverting changes.
Training on augumented user 68048 48/50 current_auc = 0.5741626794258373
User 68048 AUC after training: 0.5669856459330143
User 68048 does not improve AUC. Reverting changes.
Training on augumented user 120405 49/50 current_auc = 0.5741626794258373
User 120405 AUC after training: 0.5598086124401914
User 120405 does not improve AUC. Reverting changes.
[2024-12-02 20:18:11.891776] start test user 131400 295/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:12.427082] start test user 131400 295/567 recall augumented users by random, augumented_users = [109348, 26799, 68643, 127122, 119530, 126567, 53001, 136179, 84528, 71254, 100324, 40945, 91459, 123184, 91233, 46740, 17706, 116423, 125530, 7302, 123769, 132233, 105573, 80082, 606, 98660, 43740, 129927, 36996, 68783, 19119, 67597, 21774, 67858, 122526, 47067, 125008, 34385, 6462, 104092, 103303, 136545, 49297, 29202, 101612, 46370, 56152, 71768, 35254, 28061]
[2024-12-02 20:18:12.444520] user = 131400 Cloud 295/567
[2024-12-02 20:18:12.483160] user = 131400 Local 295/567
[2024-12-02 20:18:12.566335] user = 131400 Local+ 295/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:15.281433] user = 131400 MPDA- 295/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7371794871794872
Training on augumented user 109348 0/50 current_auc = 0.7371794871794872
User 109348 AUC after training: 0.7373303167420815
User 109348 improves AUC. Keeping the model.
Training on augumented user 26799 1/50 current_auc = 0.7373303167420815
User 26799 AUC after training: 0.73763197586727
User 26799 improves AUC. Keeping the model.
Training on augumented user 68643 2/50 current_auc = 0.73763197586727
User 68643 AUC after training: 0.7373303167420814
User 68643 does not improve AUC. Reverting changes.
Training on augumented user 127122 3/50 current_auc = 0.73763197586727
User 127122 AUC after training: 0.7383861236802413
User 127122 improves AUC. Keeping the model.
Training on augumented user 119530 4/50 current_auc = 0.7383861236802413
User 119530 AUC after training: 0.7377828054298643
User 119530 does not improve AUC. Reverting changes.
Training on augumented user 126567 5/50 current_auc = 0.7383861236802413
User 126567 AUC after training: 0.7380844645550527
User 126567 does not improve AUC. Reverting changes.
Training on augumented user 53001 6/50 current_auc = 0.7383861236802413
User 53001 AUC after training: 0.7384615384615384
User 53001 improves AUC. Keeping the model.
Training on augumented user 136179 7/50 current_auc = 0.7384615384615384
User 136179 AUC after training: 0.738763197586727
User 136179 improves AUC. Keeping the model.
Training on augumented user 84528 8/50 current_auc = 0.738763197586727
User 84528 AUC after training: 0.7389140271493212
User 84528 improves AUC. Keeping the model.
Training on augumented user 71254 9/50 current_auc = 0.7389140271493212
User 71254 AUC after training: 0.7392911010558069
User 71254 improves AUC. Keeping the model.
Training on augumented user 100324 10/50 current_auc = 0.7392911010558069
User 100324 AUC after training: 0.7391402714932126
User 100324 does not improve AUC. Reverting changes.
Training on augumented user 40945 11/50 current_auc = 0.7392911010558069
User 40945 AUC after training: 0.739291101055807
User 40945 improves AUC. Keeping the model.
Training on augumented user 91459 12/50 current_auc = 0.739291101055807
User 91459 AUC after training: 0.7388386123680242
User 91459 does not improve AUC. Reverting changes.
Training on augumented user 123184 13/50 current_auc = 0.739291101055807
User 123184 AUC after training: 0.7394419306184012
User 123184 improves AUC. Keeping the model.
Training on augumented user 91233 14/50 current_auc = 0.7394419306184012
User 91233 AUC after training: 0.7388386123680242
User 91233 does not improve AUC. Reverting changes.
Training on augumented user 46740 15/50 current_auc = 0.7394419306184012
User 46740 AUC after training: 0.7398190045248869
User 46740 improves AUC. Keeping the model.
Training on augumented user 17706 16/50 current_auc = 0.7398190045248869
User 17706 AUC after training: 0.7389140271493212
User 17706 does not improve AUC. Reverting changes.
Training on augumented user 116423 17/50 current_auc = 0.7398190045248869
User 116423 AUC after training: 0.7397435897435897
User 116423 does not improve AUC. Reverting changes.
Training on augumented user 125530 18/50 current_auc = 0.7398190045248869
User 125530 AUC after training: 0.7391402714932126
User 125530 does not improve AUC. Reverting changes.
Training on augumented user 7302 19/50 current_auc = 0.7398190045248869
User 7302 AUC after training: 0.7395173453996983
User 7302 does not improve AUC. Reverting changes.
Training on augumented user 123769 20/50 current_auc = 0.7398190045248869
User 123769 AUC after training: 0.7397435897435898
User 123769 does not improve AUC. Reverting changes.
Training on augumented user 132233 21/50 current_auc = 0.7398190045248869
User 132233 AUC after training: 0.7396681749622926
User 132233 does not improve AUC. Reverting changes.
Training on augumented user 105573 22/50 current_auc = 0.7398190045248869
User 105573 AUC after training: 0.7393665158371041
User 105573 does not improve AUC. Reverting changes.
Training on augumented user 80082 23/50 current_auc = 0.7398190045248869
User 80082 AUC after training: 0.7389140271493213
User 80082 does not improve AUC. Reverting changes.
Training on augumented user 606 24/50 current_auc = 0.7398190045248869
User 606 AUC after training: 0.7394419306184012
User 606 does not improve AUC. Reverting changes.
Training on augumented user 98660 25/50 current_auc = 0.7398190045248869
User 98660 AUC after training: 0.7393665158371041
User 98660 does not improve AUC. Reverting changes.
Training on augumented user 43740 26/50 current_auc = 0.7398190045248869
User 43740 AUC after training: 0.7397435897435898
User 43740 does not improve AUC. Reverting changes.
Training on augumented user 129927 27/50 current_auc = 0.7398190045248869
User 129927 AUC after training: 0.7389894419306183
User 129927 does not improve AUC. Reverting changes.
Training on augumented user 36996 28/50 current_auc = 0.7398190045248869
User 36996 AUC after training: 0.739894419306184
User 36996 improves AUC. Keeping the model.
Training on augumented user 68783 29/50 current_auc = 0.739894419306184
User 68783 AUC after training: 0.7397435897435898
User 68783 does not improve AUC. Reverting changes.
Training on augumented user 19119 30/50 current_auc = 0.739894419306184
User 19119 AUC after training: 0.7394419306184011
User 19119 does not improve AUC. Reverting changes.
Training on augumented user 67597 31/50 current_auc = 0.739894419306184
User 67597 AUC after training: 0.739366515837104
User 67597 does not improve AUC. Reverting changes.
Training on augumented user 21774 32/50 current_auc = 0.739894419306184
User 21774 AUC after training: 0.7394419306184011
User 21774 does not improve AUC. Reverting changes.
Training on augumented user 67858 33/50 current_auc = 0.739894419306184
User 67858 AUC after training: 0.7396681749622926
User 67858 does not improve AUC. Reverting changes.
Training on augumented user 122526 34/50 current_auc = 0.739894419306184
User 122526 AUC after training: 0.7391402714932126
User 122526 does not improve AUC. Reverting changes.
Training on augumented user 47067 35/50 current_auc = 0.739894419306184
User 47067 AUC after training: 0.7397435897435897
User 47067 does not improve AUC. Reverting changes.
Training on augumented user 125008 36/50 current_auc = 0.739894419306184
User 125008 AUC after training: 0.739555052790347
User 125008 does not improve AUC. Reverting changes.
Training on augumented user 34385 37/50 current_auc = 0.739894419306184
User 34385 AUC after training: 0.7395173453996983
User 34385 does not improve AUC. Reverting changes.
Training on augumented user 6462 38/50 current_auc = 0.739894419306184
User 6462 AUC after training: 0.7393665158371041
User 6462 does not improve AUC. Reverting changes.
Training on augumented user 104092 39/50 current_auc = 0.739894419306184
User 104092 AUC after training: 0.7397435897435898
User 104092 does not improve AUC. Reverting changes.
Training on augumented user 103303 40/50 current_auc = 0.739894419306184
User 103303 AUC after training: 0.7399698340874812
User 103303 improves AUC. Keeping the model.
Training on augumented user 136545 41/50 current_auc = 0.7399698340874812
User 136545 AUC after training: 0.7396681749622925
User 136545 does not improve AUC. Reverting changes.
Training on augumented user 49297 42/50 current_auc = 0.7399698340874812
User 49297 AUC after training: 0.739894419306184
User 49297 does not improve AUC. Reverting changes.
Training on augumented user 29202 43/50 current_auc = 0.7399698340874812
User 29202 AUC after training: 0.7398190045248868
User 29202 does not improve AUC. Reverting changes.
Training on augumented user 101612 44/50 current_auc = 0.7399698340874812
User 101612 AUC after training: 0.7395927601809955
User 101612 does not improve AUC. Reverting changes.
Training on augumented user 46370 45/50 current_auc = 0.7399698340874812
User 46370 AUC after training: 0.7380090497737556
User 46370 does not improve AUC. Reverting changes.
Training on augumented user 56152 46/50 current_auc = 0.7399698340874812
User 56152 AUC after training: 0.7394419306184012
User 56152 does not improve AUC. Reverting changes.
Training on augumented user 71768 47/50 current_auc = 0.7399698340874812
User 71768 AUC after training: 0.7400452488687783
User 71768 improves AUC. Keeping the model.
Training on augumented user 35254 48/50 current_auc = 0.7400452488687783
User 35254 AUC after training: 0.740422322775264
User 35254 improves AUC. Keeping the model.
Training on augumented user 28061 49/50 current_auc = 0.740422322775264
User 28061 AUC after training: 0.7400075414781296
User 28061 does not improve AUC. Reverting changes.
[2024-12-02 20:18:47.410940] start test user 131403 296/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:47.815315] start test user 131403 296/567 recall augumented users by random, augumented_users = [42358, 75314, 20940, 43102, 51402, 85943, 122682, 19014, 87944, 43384, 28786, 88099, 96242, 134052, 128809, 83660, 7619, 77711, 21414, 13319, 135944, 69670, 120506, 93483, 15807, 54364, 28296, 90970, 4638, 60158, 52255, 45720, 21450, 122634, 12363, 121941, 52987, 80938, 73621, 34843, 33922, 127029, 125871, 127378, 46833, 89264, 105771, 95386, 129557, 65588]
[2024-12-02 20:18:47.830819] user = 131403 Cloud 296/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:47.837832] user = 131403 Local 296/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:47.883795] user = 131403 Local+ 296/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:49.988940] user = 131403 MPDA- 296/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 42358 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42358 AUC after training: 0.5
User 42358 does not improve AUC. Reverting changes.
Training on augumented user 75314 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75314 AUC after training: 0.5
User 75314 does not improve AUC. Reverting changes.
Training on augumented user 20940 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20940 AUC after training: 0.5
User 20940 does not improve AUC. Reverting changes.
Training on augumented user 43102 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43102 AUC after training: 0.5
User 43102 does not improve AUC. Reverting changes.
Training on augumented user 51402 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51402 AUC after training: 0.5
User 51402 does not improve AUC. Reverting changes.
Training on augumented user 85943 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85943 AUC after training: 0.5
User 85943 does not improve AUC. Reverting changes.
Training on augumented user 122682 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122682 AUC after training: 0.5
User 122682 does not improve AUC. Reverting changes.
Training on augumented user 19014 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19014 AUC after training: 0.5
User 19014 does not improve AUC. Reverting changes.
Training on augumented user 87944 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87944 AUC after training: 0.5
User 87944 does not improve AUC. Reverting changes.
Training on augumented user 43384 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43384 AUC after training: 0.5
User 43384 does not improve AUC. Reverting changes.
Training on augumented user 28786 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28786 AUC after training: 0.5
User 28786 does not improve AUC. Reverting changes.
Training on augumented user 88099 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88099 AUC after training: 0.5
User 88099 does not improve AUC. Reverting changes.
Training on augumented user 96242 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96242 AUC after training: 0.5
User 96242 does not improve AUC. Reverting changes.
Training on augumented user 134052 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134052 AUC after training: 0.5
User 134052 does not improve AUC. Reverting changes.
Training on augumented user 128809 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128809 AUC after training: 0.5
User 128809 does not improve AUC. Reverting changes.
Training on augumented user 83660 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83660 AUC after training: 0.5
User 83660 does not improve AUC. Reverting changes.
Training on augumented user 7619 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7619 AUC after training: 0.5
User 7619 does not improve AUC. Reverting changes.
Training on augumented user 77711 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77711 AUC after training: 0.5
User 77711 does not improve AUC. Reverting changes.
Training on augumented user 21414 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21414 AUC after training: 0.5
User 21414 does not improve AUC. Reverting changes.
Training on augumented user 13319 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13319 AUC after training: 0.5
User 13319 does not improve AUC. Reverting changes.
Training on augumented user 135944 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135944 AUC after training: 0.5
User 135944 does not improve AUC. Reverting changes.
Training on augumented user 69670 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69670 AUC after training: 0.5
User 69670 does not improve AUC. Reverting changes.
Training on augumented user 120506 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120506 AUC after training: 0.5
User 120506 does not improve AUC. Reverting changes.
Training on augumented user 93483 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93483 AUC after training: 0.5
User 93483 does not improve AUC. Reverting changes.
Training on augumented user 15807 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15807 AUC after training: 0.5
User 15807 does not improve AUC. Reverting changes.
Training on augumented user 54364 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54364 AUC after training: 0.5
User 54364 does not improve AUC. Reverting changes.
Training on augumented user 28296 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28296 AUC after training: 0.5
User 28296 does not improve AUC. Reverting changes.
Training on augumented user 90970 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90970 AUC after training: 0.5
User 90970 does not improve AUC. Reverting changes.
Training on augumented user 4638 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4638 AUC after training: 0.5
User 4638 does not improve AUC. Reverting changes.
Training on augumented user 60158 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60158 AUC after training: 0.5
User 60158 does not improve AUC. Reverting changes.
Training on augumented user 52255 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52255 AUC after training: 0.5
User 52255 does not improve AUC. Reverting changes.
Training on augumented user 45720 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45720 AUC after training: 0.5
User 45720 does not improve AUC. Reverting changes.
Training on augumented user 21450 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21450 AUC after training: 0.5
User 21450 does not improve AUC. Reverting changes.
Training on augumented user 122634 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122634 AUC after training: 0.5
User 122634 does not improve AUC. Reverting changes.
Training on augumented user 12363 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12363 AUC after training: 0.5
User 12363 does not improve AUC. Reverting changes.
Training on augumented user 121941 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121941 AUC after training: 0.5
User 121941 does not improve AUC. Reverting changes.
Training on augumented user 52987 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52987 AUC after training: 0.5
User 52987 does not improve AUC. Reverting changes.
Training on augumented user 80938 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80938 AUC after training: 0.5
User 80938 does not improve AUC. Reverting changes.
Training on augumented user 73621 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73621 AUC after training: 0.5
User 73621 does not improve AUC. Reverting changes.
Training on augumented user 34843 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34843 AUC after training: 0.5
User 34843 does not improve AUC. Reverting changes.
Training on augumented user 33922 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33922 AUC after training: 0.5
User 33922 does not improve AUC. Reverting changes.
Training on augumented user 127029 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127029 AUC after training: 0.5
User 127029 does not improve AUC. Reverting changes.
Training on augumented user 125871 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125871 AUC after training: 0.5
User 125871 does not improve AUC. Reverting changes.
Training on augumented user 127378 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127378 AUC after training: 0.5
User 127378 does not improve AUC. Reverting changes.
Training on augumented user 46833 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46833 AUC after training: 0.5
User 46833 does not improve AUC. Reverting changes.
Training on augumented user 89264 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89264 AUC after training: 0.5
User 89264 does not improve AUC. Reverting changes.
Training on augumented user 105771 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105771 AUC after training: 0.5
User 105771 does not improve AUC. Reverting changes.
Training on augumented user 95386 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95386 AUC after training: 0.5
User 95386 does not improve AUC. Reverting changes.
Training on augumented user 129557 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129557 AUC after training: 0.5
User 129557 does not improve AUC. Reverting changes.
Training on augumented user 65588 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65588 AUC after training: 0.5
User 65588 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:19.067630] start test user 131422 297/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:19.739202] start test user 131422 297/567 recall augumented users by random, augumented_users = [48185, 77863, 114723, 114474, 6675, 576, 87144, 97946, 55780, 60327, 39034, 40812, 92852, 95095, 3361, 25839, 58567, 16053, 9915, 132783, 34678, 71849, 14894, 113565, 18979, 54253, 108279, 66151, 27501, 79673, 47996, 36083, 114832, 18039, 71116, 27744, 126094, 54564, 46407, 96142, 51448, 13785, 60929, 21771, 138370, 116357, 100942, 102360, 123803, 105250]
[2024-12-02 20:19:19.778557] user = 131422 Cloud 297/567
[2024-12-02 20:19:19.799216] user = 131422 Local 297/567
[2024-12-02 20:19:19.989964] user = 131422 Local+ 297/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:22.297995] user = 131422 MPDA- 297/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7818740399385561
Training on augumented user 48185 0/50 current_auc = 0.7818740399385561
User 48185 AUC after training: 0.7788018433179724
User 48185 does not improve AUC. Reverting changes.
Training on augumented user 77863 1/50 current_auc = 0.7818740399385561
User 77863 AUC after training: 0.7803379416282641
User 77863 does not improve AUC. Reverting changes.
Training on augumented user 114723 2/50 current_auc = 0.7818740399385561
User 114723 AUC after training: 0.7803379416282641
User 114723 does not improve AUC. Reverting changes.
Training on augumented user 114474 3/50 current_auc = 0.7818740399385561
User 114474 AUC after training: 0.7803379416282641
User 114474 does not improve AUC. Reverting changes.
Training on augumented user 6675 4/50 current_auc = 0.7818740399385561
User 6675 AUC after training: 0.783410138248848
User 6675 improves AUC. Keeping the model.
Training on augumented user 576 5/50 current_auc = 0.783410138248848
User 576 AUC after training: 0.7772657450076805
User 576 does not improve AUC. Reverting changes.
Training on augumented user 87144 6/50 current_auc = 0.783410138248848
User 87144 AUC after training: 0.783410138248848
User 87144 does not improve AUC. Reverting changes.
Training on augumented user 97946 7/50 current_auc = 0.783410138248848
User 97946 AUC after training: 0.7818740399385561
User 97946 does not improve AUC. Reverting changes.
Training on augumented user 55780 8/50 current_auc = 0.783410138248848
User 55780 AUC after training: 0.7834101382488479
User 55780 does not improve AUC. Reverting changes.
Training on augumented user 60327 9/50 current_auc = 0.783410138248848
User 60327 AUC after training: 0.7741935483870968
User 60327 does not improve AUC. Reverting changes.
Training on augumented user 39034 10/50 current_auc = 0.783410138248848
User 39034 AUC after training: 0.7818740399385561
User 39034 does not improve AUC. Reverting changes.
Training on augumented user 40812 11/50 current_auc = 0.783410138248848
User 40812 AUC after training: 0.781874039938556
User 40812 does not improve AUC. Reverting changes.
Training on augumented user 92852 12/50 current_auc = 0.783410138248848
User 92852 AUC after training: 0.7788018433179724
User 92852 does not improve AUC. Reverting changes.
Training on augumented user 95095 13/50 current_auc = 0.783410138248848
User 95095 AUC after training: 0.783410138248848
User 95095 does not improve AUC. Reverting changes.
Training on augumented user 3361 14/50 current_auc = 0.783410138248848
User 3361 AUC after training: 0.7788018433179724
User 3361 does not improve AUC. Reverting changes.
Training on augumented user 25839 15/50 current_auc = 0.783410138248848
User 25839 AUC after training: 0.7803379416282641
User 25839 does not improve AUC. Reverting changes.
Training on augumented user 58567 16/50 current_auc = 0.783410138248848
User 58567 AUC after training: 0.7818740399385561
User 58567 does not improve AUC. Reverting changes.
Training on augumented user 16053 17/50 current_auc = 0.783410138248848
User 16053 AUC after training: 0.781874039938556
User 16053 does not improve AUC. Reverting changes.
Training on augumented user 9915 18/50 current_auc = 0.783410138248848
User 9915 AUC after training: 0.7803379416282641
User 9915 does not improve AUC. Reverting changes.
Training on augumented user 132783 19/50 current_auc = 0.783410138248848
User 132783 AUC after training: 0.7803379416282642
User 132783 does not improve AUC. Reverting changes.
Training on augumented user 34678 20/50 current_auc = 0.783410138248848
User 34678 AUC after training: 0.7772657450076805
User 34678 does not improve AUC. Reverting changes.
Training on augumented user 71849 21/50 current_auc = 0.783410138248848
User 71849 AUC after training: 0.7757296466973886
User 71849 does not improve AUC. Reverting changes.
Training on augumented user 14894 22/50 current_auc = 0.783410138248848
User 14894 AUC after training: 0.7788018433179722
User 14894 does not improve AUC. Reverting changes.
Training on augumented user 113565 23/50 current_auc = 0.783410138248848
User 113565 AUC after training: 0.7788018433179723
User 113565 does not improve AUC. Reverting changes.
Training on augumented user 18979 24/50 current_auc = 0.783410138248848
User 18979 AUC after training: 0.7757296466973886
User 18979 does not improve AUC. Reverting changes.
Training on augumented user 54253 25/50 current_auc = 0.783410138248848
User 54253 AUC after training: 0.7803379416282642
User 54253 does not improve AUC. Reverting changes.
Training on augumented user 108279 26/50 current_auc = 0.783410138248848
User 108279 AUC after training: 0.7772657450076805
User 108279 does not improve AUC. Reverting changes.
Training on augumented user 66151 27/50 current_auc = 0.783410138248848
User 66151 AUC after training: 0.7803379416282641
User 66151 does not improve AUC. Reverting changes.
Training on augumented user 27501 28/50 current_auc = 0.783410138248848
User 27501 AUC after training: 0.783410138248848
User 27501 does not improve AUC. Reverting changes.
Training on augumented user 79673 29/50 current_auc = 0.783410138248848
User 79673 AUC after training: 0.7803379416282641
User 79673 does not improve AUC. Reverting changes.
Training on augumented user 47996 30/50 current_auc = 0.783410138248848
User 47996 AUC after training: 0.7772657450076805
User 47996 does not improve AUC. Reverting changes.
Training on augumented user 36083 31/50 current_auc = 0.783410138248848
User 36083 AUC after training: 0.7818740399385561
User 36083 does not improve AUC. Reverting changes.
Training on augumented user 114832 32/50 current_auc = 0.783410138248848
User 114832 AUC after training: 0.783410138248848
User 114832 does not improve AUC. Reverting changes.
Training on augumented user 18039 33/50 current_auc = 0.783410138248848
User 18039 AUC after training: 0.7818740399385561
User 18039 does not improve AUC. Reverting changes.
Training on augumented user 71116 34/50 current_auc = 0.783410138248848
User 71116 AUC after training: 0.7757296466973886
User 71116 does not improve AUC. Reverting changes.
Training on augumented user 27744 35/50 current_auc = 0.783410138248848
User 27744 AUC after training: 0.7788018433179723
User 27744 does not improve AUC. Reverting changes.
Training on augumented user 126094 36/50 current_auc = 0.783410138248848
User 126094 AUC after training: 0.7803379416282642
User 126094 does not improve AUC. Reverting changes.
Training on augumented user 54564 37/50 current_auc = 0.783410138248848
User 54564 AUC after training: 0.7757296466973886
User 54564 does not improve AUC. Reverting changes.
Training on augumented user 46407 38/50 current_auc = 0.783410138248848
User 46407 AUC after training: 0.7757296466973886
User 46407 does not improve AUC. Reverting changes.
Training on augumented user 96142 39/50 current_auc = 0.783410138248848
User 96142 AUC after training: 0.7772657450076805
User 96142 does not improve AUC. Reverting changes.
Training on augumented user 51448 40/50 current_auc = 0.783410138248848
User 51448 AUC after training: 0.781874039938556
User 51448 does not improve AUC. Reverting changes.
Training on augumented user 13785 41/50 current_auc = 0.783410138248848
User 13785 AUC after training: 0.7818740399385561
User 13785 does not improve AUC. Reverting changes.
Training on augumented user 60929 42/50 current_auc = 0.783410138248848
User 60929 AUC after training: 0.7834101382488479
User 60929 does not improve AUC. Reverting changes.
Training on augumented user 21771 43/50 current_auc = 0.783410138248848
User 21771 AUC after training: 0.7818740399385561
User 21771 does not improve AUC. Reverting changes.
Training on augumented user 138370 44/50 current_auc = 0.783410138248848
User 138370 AUC after training: 0.783410138248848
User 138370 does not improve AUC. Reverting changes.
Training on augumented user 116357 45/50 current_auc = 0.783410138248848
User 116357 AUC after training: 0.783410138248848
User 116357 does not improve AUC. Reverting changes.
Training on augumented user 100942 46/50 current_auc = 0.783410138248848
User 100942 AUC after training: 0.7772657450076805
User 100942 does not improve AUC. Reverting changes.
Training on augumented user 102360 47/50 current_auc = 0.783410138248848
User 102360 AUC after training: 0.7818740399385561
User 102360 does not improve AUC. Reverting changes.
Training on augumented user 123803 48/50 current_auc = 0.783410138248848
User 123803 AUC after training: 0.7757296466973886
User 123803 does not improve AUC. Reverting changes.
Training on augumented user 105250 49/50 current_auc = 0.783410138248848
User 105250 AUC after training: 0.7788018433179724
User 105250 does not improve AUC. Reverting changes.
[2024-12-02 20:19:52.422865] start test user 131439 298/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:53.179781] start test user 131439 298/567 recall augumented users by random, augumented_users = [27889, 73976, 123532, 1118, 33825, 63815, 66945, 76784, 114793, 66369, 41010, 18699, 102062, 45429, 48638, 109387, 42612, 93427, 108532, 99259, 133328, 96509, 112442, 19244, 86790, 41228, 110298, 86890, 121611, 11116, 50171, 119347, 122972, 56182, 81130, 133001, 116971, 4920, 46424, 96618, 114033, 69821, 74359, 19409, 41214, 25206, 48756, 50168, 130235, 62153]
[2024-12-02 20:19:53.204450] user = 131439 Cloud 298/567
[2024-12-02 20:19:53.243788] user = 131439 Local 298/567
[2024-12-02 20:19:53.371797] user = 131439 Local+ 298/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:56.513422] user = 131439 MPDA- 298/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4166666666666667
Training on augumented user 27889 0/50 current_auc = 0.4166666666666667
User 27889 AUC after training: 0.4166666666666667
User 27889 does not improve AUC. Reverting changes.
Training on augumented user 73976 1/50 current_auc = 0.4166666666666667
User 73976 AUC after training: 0.4166666666666667
User 73976 does not improve AUC. Reverting changes.
Training on augumented user 123532 2/50 current_auc = 0.4166666666666667
User 123532 AUC after training: 0.4166666666666667
User 123532 does not improve AUC. Reverting changes.
Training on augumented user 1118 3/50 current_auc = 0.4166666666666667
User 1118 AUC after training: 0.4166666666666667
User 1118 does not improve AUC. Reverting changes.
Training on augumented user 33825 4/50 current_auc = 0.4166666666666667
User 33825 AUC after training: 0.4166666666666667
User 33825 does not improve AUC. Reverting changes.
Training on augumented user 63815 5/50 current_auc = 0.4166666666666667
User 63815 AUC after training: 0.4166666666666667
User 63815 does not improve AUC. Reverting changes.
Training on augumented user 66945 6/50 current_auc = 0.4166666666666667
User 66945 AUC after training: 0.4166666666666667
User 66945 does not improve AUC. Reverting changes.
Training on augumented user 76784 7/50 current_auc = 0.4166666666666667
User 76784 AUC after training: 0.4166666666666667
User 76784 does not improve AUC. Reverting changes.
Training on augumented user 114793 8/50 current_auc = 0.4166666666666667
User 114793 AUC after training: 0.4166666666666667
User 114793 does not improve AUC. Reverting changes.
Training on augumented user 66369 9/50 current_auc = 0.4166666666666667
User 66369 AUC after training: 0.4166666666666667
User 66369 does not improve AUC. Reverting changes.
Training on augumented user 41010 10/50 current_auc = 0.4166666666666667
User 41010 AUC after training: 0.4166666666666667
User 41010 does not improve AUC. Reverting changes.
Training on augumented user 18699 11/50 current_auc = 0.4166666666666667
User 18699 AUC after training: 0.4166666666666667
User 18699 does not improve AUC. Reverting changes.
Training on augumented user 102062 12/50 current_auc = 0.4166666666666667
User 102062 AUC after training: 0.4166666666666667
User 102062 does not improve AUC. Reverting changes.
Training on augumented user 45429 13/50 current_auc = 0.4166666666666667
User 45429 AUC after training: 0.4166666666666667
User 45429 does not improve AUC. Reverting changes.
Training on augumented user 48638 14/50 current_auc = 0.4166666666666667
User 48638 AUC after training: 0.4166666666666667
User 48638 does not improve AUC. Reverting changes.
Training on augumented user 109387 15/50 current_auc = 0.4166666666666667
User 109387 AUC after training: 0.4166666666666667
User 109387 does not improve AUC. Reverting changes.
Training on augumented user 42612 16/50 current_auc = 0.4166666666666667
User 42612 AUC after training: 0.4166666666666667
User 42612 does not improve AUC. Reverting changes.
Training on augumented user 93427 17/50 current_auc = 0.4166666666666667
User 93427 AUC after training: 0.4166666666666667
User 93427 does not improve AUC. Reverting changes.
Training on augumented user 108532 18/50 current_auc = 0.4166666666666667
User 108532 AUC after training: 0.4166666666666667
User 108532 does not improve AUC. Reverting changes.
Training on augumented user 99259 19/50 current_auc = 0.4166666666666667
User 99259 AUC after training: 0.4166666666666667
User 99259 does not improve AUC. Reverting changes.
Training on augumented user 133328 20/50 current_auc = 0.4166666666666667
User 133328 AUC after training: 0.4166666666666667
User 133328 does not improve AUC. Reverting changes.
Training on augumented user 96509 21/50 current_auc = 0.4166666666666667
User 96509 AUC after training: 0.4166666666666667
User 96509 does not improve AUC. Reverting changes.
Training on augumented user 112442 22/50 current_auc = 0.4166666666666667
User 112442 AUC after training: 0.4166666666666667
User 112442 does not improve AUC. Reverting changes.
Training on augumented user 19244 23/50 current_auc = 0.4166666666666667
User 19244 AUC after training: 0.4166666666666667
User 19244 does not improve AUC. Reverting changes.
Training on augumented user 86790 24/50 current_auc = 0.4166666666666667
User 86790 AUC after training: 0.4166666666666667
User 86790 does not improve AUC. Reverting changes.
Training on augumented user 41228 25/50 current_auc = 0.4166666666666667
User 41228 AUC after training: 0.4166666666666667
User 41228 does not improve AUC. Reverting changes.
Training on augumented user 110298 26/50 current_auc = 0.4166666666666667
User 110298 AUC after training: 0.4166666666666667
User 110298 does not improve AUC. Reverting changes.
Training on augumented user 86890 27/50 current_auc = 0.4166666666666667
User 86890 AUC after training: 0.4166666666666667
User 86890 does not improve AUC. Reverting changes.
Training on augumented user 121611 28/50 current_auc = 0.4166666666666667
User 121611 AUC after training: 0.4166666666666667
User 121611 does not improve AUC. Reverting changes.
Training on augumented user 11116 29/50 current_auc = 0.4166666666666667
User 11116 AUC after training: 0.4166666666666667
User 11116 does not improve AUC. Reverting changes.
Training on augumented user 50171 30/50 current_auc = 0.4166666666666667
User 50171 AUC after training: 0.4166666666666667
User 50171 does not improve AUC. Reverting changes.
Training on augumented user 119347 31/50 current_auc = 0.4166666666666667
User 119347 AUC after training: 0.4166666666666667
User 119347 does not improve AUC. Reverting changes.
Training on augumented user 122972 32/50 current_auc = 0.4166666666666667
User 122972 AUC after training: 0.4166666666666667
User 122972 does not improve AUC. Reverting changes.
Training on augumented user 56182 33/50 current_auc = 0.4166666666666667
User 56182 AUC after training: 0.4166666666666667
User 56182 does not improve AUC. Reverting changes.
Training on augumented user 81130 34/50 current_auc = 0.4166666666666667
User 81130 AUC after training: 0.4166666666666667
User 81130 does not improve AUC. Reverting changes.
Training on augumented user 133001 35/50 current_auc = 0.4166666666666667
User 133001 AUC after training: 0.4166666666666667
User 133001 does not improve AUC. Reverting changes.
Training on augumented user 116971 36/50 current_auc = 0.4166666666666667
User 116971 AUC after training: 0.4166666666666667
User 116971 does not improve AUC. Reverting changes.
Training on augumented user 4920 37/50 current_auc = 0.4166666666666667
User 4920 AUC after training: 0.4583333333333333
User 4920 improves AUC. Keeping the model.
Training on augumented user 46424 38/50 current_auc = 0.4583333333333333
User 46424 AUC after training: 0.4166666666666667
User 46424 does not improve AUC. Reverting changes.
Training on augumented user 96618 39/50 current_auc = 0.4583333333333333
User 96618 AUC after training: 0.4583333333333333
User 96618 does not improve AUC. Reverting changes.
Training on augumented user 114033 40/50 current_auc = 0.4583333333333333
User 114033 AUC after training: 0.4166666666666667
User 114033 does not improve AUC. Reverting changes.
Training on augumented user 69821 41/50 current_auc = 0.4583333333333333
User 69821 AUC after training: 0.4583333333333333
User 69821 does not improve AUC. Reverting changes.
Training on augumented user 74359 42/50 current_auc = 0.4583333333333333
User 74359 AUC after training: 0.4166666666666667
User 74359 does not improve AUC. Reverting changes.
Training on augumented user 19409 43/50 current_auc = 0.4583333333333333
User 19409 AUC after training: 0.4166666666666667
User 19409 does not improve AUC. Reverting changes.
Training on augumented user 41214 44/50 current_auc = 0.4583333333333333
User 41214 AUC after training: 0.4166666666666667
User 41214 does not improve AUC. Reverting changes.
Training on augumented user 25206 45/50 current_auc = 0.4583333333333333
User 25206 AUC after training: 0.4166666666666667
User 25206 does not improve AUC. Reverting changes.
Training on augumented user 48756 46/50 current_auc = 0.4583333333333333
User 48756 AUC after training: 0.4583333333333333
User 48756 does not improve AUC. Reverting changes.
Training on augumented user 50168 47/50 current_auc = 0.4583333333333333
User 50168 AUC after training: 0.4166666666666667
User 50168 does not improve AUC. Reverting changes.
Training on augumented user 130235 48/50 current_auc = 0.4583333333333333
User 130235 AUC after training: 0.4166666666666667
User 130235 does not improve AUC. Reverting changes.
Training on augumented user 62153 49/50 current_auc = 0.4583333333333333
User 62153 AUC after training: 0.4583333333333333
User 62153 does not improve AUC. Reverting changes.
[2024-12-02 20:20:32.155437] start test user 131501 299/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:32.848334] start test user 131501 299/567 recall augumented users by random, augumented_users = [48092, 59260, 41462, 104281, 112749, 101480, 17300, 125489, 51648, 15219, 13345, 43163, 3008, 16786, 97518, 18146, 83231, 124390, 100403, 108629, 38288, 58826, 134413, 57657, 54526, 110192, 5196, 14156, 55897, 6687, 67567, 135816, 74934, 14273, 49645, 137458, 7275, 13520, 24381, 117007, 55937, 87485, 129120, 123122, 74816, 37877, 122585, 29549, 11561, 97476]
[2024-12-02 20:20:32.863031] user = 131501 Cloud 299/567
[2024-12-02 20:20:32.886108] user = 131501 Local 299/567
[2024-12-02 20:20:32.983948] user = 131501 Local+ 299/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:35.348209] user = 131501 MPDA- 299/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6339285714285714
Training on augumented user 48092 0/50 current_auc = 0.6339285714285714
User 48092 AUC after training: 0.6339285714285714
User 48092 does not improve AUC. Reverting changes.
Training on augumented user 59260 1/50 current_auc = 0.6339285714285714
User 59260 AUC after training: 0.6339285714285714
User 59260 does not improve AUC. Reverting changes.
Training on augumented user 41462 2/50 current_auc = 0.6339285714285714
User 41462 AUC after training: 0.6339285714285714
User 41462 does not improve AUC. Reverting changes.
Training on augumented user 104281 3/50 current_auc = 0.6339285714285714
User 104281 AUC after training: 0.6339285714285714
User 104281 does not improve AUC. Reverting changes.
Training on augumented user 112749 4/50 current_auc = 0.6339285714285714
User 112749 AUC after training: 0.6339285714285714
User 112749 does not improve AUC. Reverting changes.
Training on augumented user 101480 5/50 current_auc = 0.6339285714285714
User 101480 AUC after training: 0.6339285714285714
User 101480 does not improve AUC. Reverting changes.
Training on augumented user 17300 6/50 current_auc = 0.6339285714285714
User 17300 AUC after training: 0.6339285714285714
User 17300 does not improve AUC. Reverting changes.
Training on augumented user 125489 7/50 current_auc = 0.6339285714285714
User 125489 AUC after training: 0.6339285714285714
User 125489 does not improve AUC. Reverting changes.
Training on augumented user 51648 8/50 current_auc = 0.6339285714285714
User 51648 AUC after training: 0.6339285714285714
User 51648 does not improve AUC. Reverting changes.
Training on augumented user 15219 9/50 current_auc = 0.6339285714285714
User 15219 AUC after training: 0.6339285714285714
User 15219 does not improve AUC. Reverting changes.
Training on augumented user 13345 10/50 current_auc = 0.6339285714285714
User 13345 AUC after training: 0.6339285714285714
User 13345 does not improve AUC. Reverting changes.
Training on augumented user 43163 11/50 current_auc = 0.6339285714285714
User 43163 AUC after training: 0.6339285714285714
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 3008 12/50 current_auc = 0.6339285714285714
User 3008 AUC after training: 0.6339285714285714
User 3008 does not improve AUC. Reverting changes.
Training on augumented user 16786 13/50 current_auc = 0.6339285714285714
User 16786 AUC after training: 0.6339285714285714
User 16786 does not improve AUC. Reverting changes.
Training on augumented user 97518 14/50 current_auc = 0.6339285714285714
User 97518 AUC after training: 0.6339285714285714
User 97518 does not improve AUC. Reverting changes.
Training on augumented user 18146 15/50 current_auc = 0.6339285714285714
User 18146 AUC after training: 0.6339285714285714
User 18146 does not improve AUC. Reverting changes.
Training on augumented user 83231 16/50 current_auc = 0.6339285714285714
User 83231 AUC after training: 0.6339285714285714
User 83231 does not improve AUC. Reverting changes.
Training on augumented user 124390 17/50 current_auc = 0.6339285714285714
User 124390 AUC after training: 0.6339285714285714
User 124390 does not improve AUC. Reverting changes.
Training on augumented user 100403 18/50 current_auc = 0.6339285714285714
User 100403 AUC after training: 0.6339285714285714
User 100403 does not improve AUC. Reverting changes.
Training on augumented user 108629 19/50 current_auc = 0.6339285714285714
User 108629 AUC after training: 0.6339285714285714
User 108629 does not improve AUC. Reverting changes.
Training on augumented user 38288 20/50 current_auc = 0.6339285714285714
User 38288 AUC after training: 0.6339285714285714
User 38288 does not improve AUC. Reverting changes.
Training on augumented user 58826 21/50 current_auc = 0.6339285714285714
User 58826 AUC after training: 0.6339285714285714
User 58826 does not improve AUC. Reverting changes.
Training on augumented user 134413 22/50 current_auc = 0.6339285714285714
User 134413 AUC after training: 0.6339285714285714
User 134413 does not improve AUC. Reverting changes.
Training on augumented user 57657 23/50 current_auc = 0.6339285714285714
User 57657 AUC after training: 0.6339285714285714
User 57657 does not improve AUC. Reverting changes.
Training on augumented user 54526 24/50 current_auc = 0.6339285714285714
User 54526 AUC after training: 0.6339285714285714
User 54526 does not improve AUC. Reverting changes.
Training on augumented user 110192 25/50 current_auc = 0.6339285714285714
User 110192 AUC after training: 0.6339285714285714
User 110192 does not improve AUC. Reverting changes.
Training on augumented user 5196 26/50 current_auc = 0.6339285714285714
User 5196 AUC after training: 0.6339285714285714
User 5196 does not improve AUC. Reverting changes.
Training on augumented user 14156 27/50 current_auc = 0.6339285714285714
User 14156 AUC after training: 0.6339285714285714
User 14156 does not improve AUC. Reverting changes.
Training on augumented user 55897 28/50 current_auc = 0.6339285714285714
User 55897 AUC after training: 0.6339285714285714
User 55897 does not improve AUC. Reverting changes.
Training on augumented user 6687 29/50 current_auc = 0.6339285714285714
User 6687 AUC after training: 0.6339285714285714
User 6687 does not improve AUC. Reverting changes.
Training on augumented user 67567 30/50 current_auc = 0.6339285714285714
User 67567 AUC after training: 0.6339285714285714
User 67567 does not improve AUC. Reverting changes.
Training on augumented user 135816 31/50 current_auc = 0.6339285714285714
User 135816 AUC after training: 0.6339285714285714
User 135816 does not improve AUC. Reverting changes.
Training on augumented user 74934 32/50 current_auc = 0.6339285714285714
User 74934 AUC after training: 0.6339285714285714
User 74934 does not improve AUC. Reverting changes.
Training on augumented user 14273 33/50 current_auc = 0.6339285714285714
User 14273 AUC after training: 0.6339285714285714
User 14273 does not improve AUC. Reverting changes.
Training on augumented user 49645 34/50 current_auc = 0.6339285714285714
User 49645 AUC after training: 0.6339285714285714
User 49645 does not improve AUC. Reverting changes.
Training on augumented user 137458 35/50 current_auc = 0.6339285714285714
User 137458 AUC after training: 0.6339285714285714
User 137458 does not improve AUC. Reverting changes.
Training on augumented user 7275 36/50 current_auc = 0.6339285714285714
User 7275 AUC after training: 0.6339285714285714
User 7275 does not improve AUC. Reverting changes.
Training on augumented user 13520 37/50 current_auc = 0.6339285714285714
User 13520 AUC after training: 0.6339285714285714
User 13520 does not improve AUC. Reverting changes.
Training on augumented user 24381 38/50 current_auc = 0.6339285714285714
User 24381 AUC after training: 0.6339285714285714
User 24381 does not improve AUC. Reverting changes.
Training on augumented user 117007 39/50 current_auc = 0.6339285714285714
User 117007 AUC after training: 0.6339285714285714
User 117007 does not improve AUC. Reverting changes.
Training on augumented user 55937 40/50 current_auc = 0.6339285714285714
User 55937 AUC after training: 0.6339285714285714
User 55937 does not improve AUC. Reverting changes.
Training on augumented user 87485 41/50 current_auc = 0.6339285714285714
User 87485 AUC after training: 0.6339285714285714
User 87485 does not improve AUC. Reverting changes.
Training on augumented user 129120 42/50 current_auc = 0.6339285714285714
User 129120 AUC after training: 0.6339285714285714
User 129120 does not improve AUC. Reverting changes.
Training on augumented user 123122 43/50 current_auc = 0.6339285714285714
User 123122 AUC after training: 0.6339285714285714
User 123122 does not improve AUC. Reverting changes.
Training on augumented user 74816 44/50 current_auc = 0.6339285714285714
User 74816 AUC after training: 0.6339285714285714
User 74816 does not improve AUC. Reverting changes.
Training on augumented user 37877 45/50 current_auc = 0.6339285714285714
User 37877 AUC after training: 0.6339285714285714
User 37877 does not improve AUC. Reverting changes.
Training on augumented user 122585 46/50 current_auc = 0.6339285714285714
User 122585 AUC after training: 0.6339285714285714
User 122585 does not improve AUC. Reverting changes.
Training on augumented user 29549 47/50 current_auc = 0.6339285714285714
User 29549 AUC after training: 0.6339285714285714
User 29549 does not improve AUC. Reverting changes.
Training on augumented user 11561 48/50 current_auc = 0.6339285714285714
User 11561 AUC after training: 0.6339285714285714
User 11561 does not improve AUC. Reverting changes.
Training on augumented user 97476 49/50 current_auc = 0.6339285714285714
User 97476 AUC after training: 0.6339285714285714
User 97476 does not improve AUC. Reverting changes.
[2024-12-02 20:21:05.252030] start test user 131514 300/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:06.000148] start test user 131514 300/567 recall augumented users by random, augumented_users = [77191, 57320, 67516, 69251, 52159, 137763, 81947, 84024, 45177, 55885, 36969, 85133, 50759, 108293, 81372, 117403, 120481, 39187, 33495, 68032, 109128, 10363, 119999, 89460, 121961, 49115, 121210, 123378, 37079, 125940, 50349, 11192, 36012, 56160, 53349, 26211, 90769, 94259, 135975, 125399, 93143, 21647, 21860, 96468, 72920, 32859, 39634, 111287, 129106, 37229]
[2024-12-02 20:21:06.029204] user = 131514 Cloud 300/567
[2024-12-02 20:21:06.061885] user = 131514 Local 300/567
[2024-12-02 20:21:06.116026] user = 131514 Local+ 300/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:09.556711] user = 131514 MPDA- 300/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7026412643429314
Training on augumented user 77191 0/50 current_auc = 0.7026412643429314
User 77191 AUC after training: 0.702424767265642
User 77191 does not improve AUC. Reverting changes.
Training on augumented user 57320 1/50 current_auc = 0.7026412643429314
User 57320 AUC after training: 0.7022082701883525
User 57320 does not improve AUC. Reverting changes.
Training on augumented user 67516 2/50 current_auc = 0.7026412643429314
User 67516 AUC after training: 0.7030742584975103
User 67516 improves AUC. Keeping the model.
Training on augumented user 69251 3/50 current_auc = 0.7030742584975103
User 69251 AUC after training: 0.7027495128815762
User 69251 does not improve AUC. Reverting changes.
Training on augumented user 52159 4/50 current_auc = 0.7030742584975103
User 52159 AUC after training: 0.7029660099588656
User 52159 does not improve AUC. Reverting changes.
Training on augumented user 137763 5/50 current_auc = 0.7030742584975103
User 137763 AUC after training: 0.7029660099588655
User 137763 does not improve AUC. Reverting changes.
Training on augumented user 81947 6/50 current_auc = 0.7030742584975103
User 81947 AUC after training: 0.7021000216497078
User 81947 does not improve AUC. Reverting changes.
Training on augumented user 84024 7/50 current_auc = 0.7030742584975103
User 84024 AUC after training: 0.7027495128815762
User 84024 does not improve AUC. Reverting changes.
Training on augumented user 45177 8/50 current_auc = 0.7030742584975103
User 45177 AUC after training: 0.7028577614202208
User 45177 does not improve AUC. Reverting changes.
Training on augumented user 55885 9/50 current_auc = 0.7030742584975103
User 55885 AUC after training: 0.702424767265642
User 55885 does not improve AUC. Reverting changes.
Training on augumented user 36969 10/50 current_auc = 0.7030742584975103
User 36969 AUC after training: 0.7025330158042866
User 36969 does not improve AUC. Reverting changes.
Training on augumented user 85133 11/50 current_auc = 0.7030742584975103
User 85133 AUC after training: 0.7015587789564841
User 85133 does not improve AUC. Reverting changes.
Training on augumented user 50759 12/50 current_auc = 0.7030742584975103
User 50759 AUC after training: 0.7025330158042867
User 50759 does not improve AUC. Reverting changes.
Training on augumented user 108293 13/50 current_auc = 0.7030742584975103
User 108293 AUC after training: 0.702749512881576
User 108293 does not improve AUC. Reverting changes.
Training on augumented user 81372 14/50 current_auc = 0.7030742584975103
User 81372 AUC after training: 0.702424767265642
User 81372 does not improve AUC. Reverting changes.
Training on augumented user 117403 15/50 current_auc = 0.7030742584975103
User 117403 AUC after training: 0.7023165187269972
User 117403 does not improve AUC. Reverting changes.
Training on augumented user 120481 16/50 current_auc = 0.7030742584975103
User 120481 AUC after training: 0.7028577614202208
User 120481 does not improve AUC. Reverting changes.
Training on augumented user 39187 17/50 current_auc = 0.7030742584975103
User 39187 AUC after training: 0.7028036371508984
User 39187 does not improve AUC. Reverting changes.
Training on augumented user 33495 18/50 current_auc = 0.7030742584975103
User 33495 AUC after training: 0.7028577614202209
User 33495 does not improve AUC. Reverting changes.
Training on augumented user 68032 19/50 current_auc = 0.7030742584975103
User 68032 AUC after training: 0.7029660099588656
User 68032 does not improve AUC. Reverting changes.
Training on augumented user 109128 20/50 current_auc = 0.7030742584975103
User 109128 AUC after training: 0.7029118856895431
User 109128 does not improve AUC. Reverting changes.
Training on augumented user 10363 21/50 current_auc = 0.7030742584975103
User 10363 AUC after training: 0.7024247672656418
User 10363 does not improve AUC. Reverting changes.
Training on augumented user 119999 22/50 current_auc = 0.7030742584975103
User 119999 AUC after training: 0.7029660099588656
User 119999 does not improve AUC. Reverting changes.
Training on augumented user 89460 23/50 current_auc = 0.7030742584975103
User 89460 AUC after training: 0.7018835245724183
User 89460 does not improve AUC. Reverting changes.
Training on augumented user 121961 24/50 current_auc = 0.7030742584975103
User 121961 AUC after training: 0.7023165187269973
User 121961 does not improve AUC. Reverting changes.
Training on augumented user 49115 25/50 current_auc = 0.7030742584975103
User 49115 AUC after training: 0.7029660099588655
User 49115 does not improve AUC. Reverting changes.
Training on augumented user 121210 26/50 current_auc = 0.7030742584975103
User 121210 AUC after training: 0.7028036371508984
User 121210 does not improve AUC. Reverting changes.
Training on augumented user 123378 27/50 current_auc = 0.7030742584975103
User 123378 AUC after training: 0.7018835245724183
User 123378 does not improve AUC. Reverting changes.
Training on augumented user 37079 28/50 current_auc = 0.7030742584975103
User 37079 AUC after training: 0.7028577614202208
User 37079 does not improve AUC. Reverting changes.
Training on augumented user 125940 29/50 current_auc = 0.7030742584975103
User 125940 AUC after training: 0.7017211517644512
User 125940 does not improve AUC. Reverting changes.
Training on augumented user 50349 30/50 current_auc = 0.7030742584975103
User 50349 AUC after training: 0.7021000216497078
User 50349 does not improve AUC. Reverting changes.
Training on augumented user 11192 31/50 current_auc = 0.7030742584975103
User 11192 AUC after training: 0.7023165187269973
User 11192 does not improve AUC. Reverting changes.
Training on augumented user 36012 32/50 current_auc = 0.7030742584975103
User 36012 AUC after training: 0.703182507036155
User 36012 improves AUC. Keeping the model.
Training on augumented user 56160 33/50 current_auc = 0.703182507036155
User 56160 AUC after training: 0.7026412643429314
User 56160 does not improve AUC. Reverting changes.
Training on augumented user 53349 34/50 current_auc = 0.703182507036155
User 53349 AUC after training: 0.7022082701883524
User 53349 does not improve AUC. Reverting changes.
Training on augumented user 26211 35/50 current_auc = 0.703182507036155
User 26211 AUC after training: 0.7032907555747998
User 26211 improves AUC. Keeping the model.
Training on augumented user 90769 36/50 current_auc = 0.7032907555747998
User 90769 AUC after training: 0.702749512881576
User 90769 does not improve AUC. Reverting changes.
Training on augumented user 94259 37/50 current_auc = 0.7032907555747998
User 94259 AUC after training: 0.7018835245724183
User 94259 does not improve AUC. Reverting changes.
Training on augumented user 135975 38/50 current_auc = 0.7032907555747998
User 135975 AUC after training: 0.7037237497293786
User 135975 improves AUC. Keeping the model.
Training on augumented user 125399 39/50 current_auc = 0.7037237497293786
User 125399 AUC after training: 0.7037237497293787
User 125399 improves AUC. Keeping the model.
Training on augumented user 93143 40/50 current_auc = 0.7037237497293787
User 93143 AUC after training: 0.7026412643429314
User 93143 does not improve AUC. Reverting changes.
Training on augumented user 21647 41/50 current_auc = 0.7037237497293787
User 21647 AUC after training: 0.7033448798441221
User 21647 does not improve AUC. Reverting changes.
Training on augumented user 21860 42/50 current_auc = 0.7037237497293787
User 21860 AUC after training: 0.703182507036155
User 21860 does not improve AUC. Reverting changes.
Training on augumented user 96468 43/50 current_auc = 0.7037237497293787
User 96468 AUC after training: 0.7029660099588656
User 96468 does not improve AUC. Reverting changes.
Training on augumented user 72920 44/50 current_auc = 0.7037237497293787
User 72920 AUC after training: 0.7035072526520892
User 72920 does not improve AUC. Reverting changes.
Training on augumented user 32859 45/50 current_auc = 0.7037237497293787
User 32859 AUC after training: 0.7029118856895432
User 32859 does not improve AUC. Reverting changes.
Training on augumented user 39634 46/50 current_auc = 0.7037237497293787
User 39634 AUC after training: 0.7029118856895432
User 39634 does not improve AUC. Reverting changes.
Training on augumented user 111287 47/50 current_auc = 0.7037237497293787
User 111287 AUC after training: 0.703182507036155
User 111287 does not improve AUC. Reverting changes.
Training on augumented user 129106 48/50 current_auc = 0.7037237497293787
User 129106 AUC after training: 0.7034531283827669
User 129106 does not improve AUC. Reverting changes.
Training on augumented user 37229 49/50 current_auc = 0.7037237497293787
User 37229 AUC after training: 0.7022082701883524
User 37229 does not improve AUC. Reverting changes.
[2024-12-02 20:21:38.942162] start test user 131515 301/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:39.647566] start test user 131515 301/567 recall augumented users by random, augumented_users = [10790, 88732, 102320, 135473, 23270, 105187, 118245, 56486, 20484, 58462, 89373, 24961, 110022, 100253, 6271, 106725, 40386, 126259, 13226, 133197, 136530, 102021, 82761, 8931, 83592, 1939, 52803, 45569, 82819, 54680, 95202, 68795, 61620, 59498, 78210, 88071, 98521, 35073, 80935, 28085, 7360, 1601, 25674, 2196, 93051, 35891, 15411, 54658, 53351, 102784]
[2024-12-02 20:21:39.664927] user = 131515 Cloud 301/567
[2024-12-02 20:21:39.681382] user = 131515 Local 301/567
[2024-12-02 20:21:39.744400] user = 131515 Local+ 301/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:41.904999] user = 131515 MPDA- 301/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7891210090658258
Training on augumented user 10790 0/50 current_auc = 0.7891210090658258
User 10790 AUC after training: 0.7891210090658258
User 10790 does not improve AUC. Reverting changes.
Training on augumented user 88732 1/50 current_auc = 0.7891210090658258
User 88732 AUC after training: 0.7895151754040205
User 88732 improves AUC. Keeping the model.
Training on augumented user 102320 2/50 current_auc = 0.7895151754040205
User 102320 AUC after training: 0.7883326763894364
User 102320 does not improve AUC. Reverting changes.
Training on augumented user 135473 3/50 current_auc = 0.7895151754040205
User 135473 AUC after training: 0.7891210090658258
User 135473 does not improve AUC. Reverting changes.
Training on augumented user 23270 4/50 current_auc = 0.7895151754040205
User 23270 AUC after training: 0.7883326763894363
User 23270 does not improve AUC. Reverting changes.
Training on augumented user 105187 5/50 current_auc = 0.7895151754040205
User 105187 AUC after training: 0.7879385100512416
User 105187 does not improve AUC. Reverting changes.
Training on augumented user 118245 6/50 current_auc = 0.7895151754040205
User 118245 AUC after training: 0.7883326763894363
User 118245 does not improve AUC. Reverting changes.
Training on augumented user 56486 7/50 current_auc = 0.7895151754040205
User 56486 AUC after training: 0.7891210090658258
User 56486 does not improve AUC. Reverting changes.
Training on augumented user 20484 8/50 current_auc = 0.7895151754040205
User 20484 AUC after training: 0.7899093417422152
User 20484 improves AUC. Keeping the model.
Training on augumented user 58462 9/50 current_auc = 0.7899093417422152
User 58462 AUC after training: 0.788726842727631
User 58462 does not improve AUC. Reverting changes.
Training on augumented user 89373 10/50 current_auc = 0.7899093417422152
User 89373 AUC after training: 0.7883326763894363
User 89373 does not improve AUC. Reverting changes.
Training on augumented user 24961 11/50 current_auc = 0.7899093417422152
User 24961 AUC after training: 0.788726842727631
User 24961 does not improve AUC. Reverting changes.
Training on augumented user 110022 12/50 current_auc = 0.7899093417422152
User 110022 AUC after training: 0.7899093417422152
User 110022 does not improve AUC. Reverting changes.
Training on augumented user 100253 13/50 current_auc = 0.7899093417422152
User 100253 AUC after training: 0.7891210090658258
User 100253 does not improve AUC. Reverting changes.
Training on augumented user 6271 14/50 current_auc = 0.7899093417422152
User 6271 AUC after training: 0.7891210090658257
User 6271 does not improve AUC. Reverting changes.
Training on augumented user 106725 15/50 current_auc = 0.7899093417422152
User 106725 AUC after training: 0.7895151754040205
User 106725 does not improve AUC. Reverting changes.
Training on augumented user 40386 16/50 current_auc = 0.7899093417422152
User 40386 AUC after training: 0.7883326763894364
User 40386 does not improve AUC. Reverting changes.
Training on augumented user 126259 17/50 current_auc = 0.7899093417422152
User 126259 AUC after training: 0.7891210090658258
User 126259 does not improve AUC. Reverting changes.
Training on augumented user 13226 18/50 current_auc = 0.7899093417422152
User 13226 AUC after training: 0.7899093417422152
User 13226 does not improve AUC. Reverting changes.
Training on augumented user 133197 19/50 current_auc = 0.7899093417422152
User 133197 AUC after training: 0.788726842727631
User 133197 does not improve AUC. Reverting changes.
Training on augumented user 136530 20/50 current_auc = 0.7899093417422152
User 136530 AUC after training: 0.7891210090658258
User 136530 does not improve AUC. Reverting changes.
Training on augumented user 102021 21/50 current_auc = 0.7899093417422152
User 102021 AUC after training: 0.7879385100512416
User 102021 does not improve AUC. Reverting changes.
Training on augumented user 82761 22/50 current_auc = 0.7899093417422152
User 82761 AUC after training: 0.7903035080804099
User 82761 improves AUC. Keeping the model.
Training on augumented user 8931 23/50 current_auc = 0.7903035080804099
User 8931 AUC after training: 0.7903035080804099
User 8931 does not improve AUC. Reverting changes.
Training on augumented user 83592 24/50 current_auc = 0.7903035080804099
User 83592 AUC after training: 0.7879385100512416
User 83592 does not improve AUC. Reverting changes.
Training on augumented user 1939 25/50 current_auc = 0.7903035080804099
User 1939 AUC after training: 0.7906976744186046
User 1939 improves AUC. Keeping the model.
Training on augumented user 52803 26/50 current_auc = 0.7906976744186046
User 52803 AUC after training: 0.7899093417422152
User 52803 does not improve AUC. Reverting changes.
Training on augumented user 45569 27/50 current_auc = 0.7906976744186046
User 45569 AUC after training: 0.7903035080804099
User 45569 does not improve AUC. Reverting changes.
Training on augumented user 82819 28/50 current_auc = 0.7906976744186046
User 82819 AUC after training: 0.7895151754040205
User 82819 does not improve AUC. Reverting changes.
Training on augumented user 54680 29/50 current_auc = 0.7906976744186046
User 54680 AUC after training: 0.7895151754040205
User 54680 does not improve AUC. Reverting changes.
Training on augumented user 95202 30/50 current_auc = 0.7906976744186046
User 95202 AUC after training: 0.7918801734331888
User 95202 improves AUC. Keeping the model.
Training on augumented user 68795 31/50 current_auc = 0.7918801734331888
User 68795 AUC after training: 0.7922743397713835
User 68795 improves AUC. Keeping the model.
Training on augumented user 61620 32/50 current_auc = 0.7922743397713835
User 61620 AUC after training: 0.7914860070949941
User 61620 does not improve AUC. Reverting changes.
Training on augumented user 59498 33/50 current_auc = 0.7922743397713835
User 59498 AUC after training: 0.7914860070949941
User 59498 does not improve AUC. Reverting changes.
Training on augumented user 78210 34/50 current_auc = 0.7922743397713835
User 78210 AUC after training: 0.7918801734331888
User 78210 does not improve AUC. Reverting changes.
Training on augumented user 88071 35/50 current_auc = 0.7922743397713835
User 88071 AUC after training: 0.793062672447773
User 88071 improves AUC. Keeping the model.
Training on augumented user 98521 36/50 current_auc = 0.793062672447773
User 98521 AUC after training: 0.7918801734331887
User 98521 does not improve AUC. Reverting changes.
Training on augumented user 35073 37/50 current_auc = 0.793062672447773
User 35073 AUC after training: 0.7914860070949941
User 35073 does not improve AUC. Reverting changes.
Training on augumented user 80935 38/50 current_auc = 0.793062672447773
User 80935 AUC after training: 0.7926685061095783
User 80935 does not improve AUC. Reverting changes.
Training on augumented user 28085 39/50 current_auc = 0.793062672447773
User 28085 AUC after training: 0.7922743397713835
User 28085 does not improve AUC. Reverting changes.
Training on augumented user 7360 40/50 current_auc = 0.793062672447773
User 7360 AUC after training: 0.793062672447773
User 7360 does not improve AUC. Reverting changes.
Training on augumented user 1601 41/50 current_auc = 0.793062672447773
User 1601 AUC after training: 0.7910918407567994
User 1601 does not improve AUC. Reverting changes.
Training on augumented user 25674 42/50 current_auc = 0.793062672447773
User 25674 AUC after training: 0.7922743397713835
User 25674 does not improve AUC. Reverting changes.
Training on augumented user 2196 43/50 current_auc = 0.793062672447773
User 2196 AUC after training: 0.793062672447773
User 2196 does not improve AUC. Reverting changes.
Training on augumented user 93051 44/50 current_auc = 0.793062672447773
User 93051 AUC after training: 0.7906976744186046
User 93051 does not improve AUC. Reverting changes.
Training on augumented user 35891 45/50 current_auc = 0.793062672447773
User 35891 AUC after training: 0.7922743397713835
User 35891 does not improve AUC. Reverting changes.
Training on augumented user 15411 46/50 current_auc = 0.793062672447773
User 15411 AUC after training: 0.7918801734331888
User 15411 does not improve AUC. Reverting changes.
Training on augumented user 54658 47/50 current_auc = 0.793062672447773
User 54658 AUC after training: 0.7922743397713835
User 54658 does not improve AUC. Reverting changes.
Training on augumented user 53351 48/50 current_auc = 0.793062672447773
User 53351 AUC after training: 0.7926685061095783
User 53351 does not improve AUC. Reverting changes.
Training on augumented user 102784 49/50 current_auc = 0.793062672447773
User 102784 AUC after training: 0.7906976744186046
User 102784 does not improve AUC. Reverting changes.
[2024-12-02 20:22:03.925774] start test user 131520 302/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:04.340451] start test user 131520 302/567 recall augumented users by random, augumented_users = [51401, 25291, 18743, 44407, 124988, 39341, 22685, 57608, 38156, 43438, 22672, 25275, 90224, 46794, 26029, 100351, 26323, 81265, 6616, 72970, 712, 22811, 30332, 103112, 76964, 117995, 22087, 123779, 56079, 97182, 97447, 66241, 38706, 83636, 14834, 91172, 23509, 51766, 24173, 20572, 85751, 26573, 38508, 3723, 46771, 127186, 89649, 10851, 109315, 116525]
[2024-12-02 20:22:04.354662] user = 131520 Cloud 302/567
[2024-12-02 20:22:04.363763] user = 131520 Local 302/567
[2024-12-02 20:22:04.382048] user = 131520 Local+ 302/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:06.639274] user = 131520 MPDA- 302/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 51401 0/50 current_auc = 0.0
User 51401 AUC after training: 0.0
User 51401 does not improve AUC. Reverting changes.
Training on augumented user 25291 1/50 current_auc = 0.0
User 25291 AUC after training: 0.0
User 25291 does not improve AUC. Reverting changes.
Training on augumented user 18743 2/50 current_auc = 0.0
User 18743 AUC after training: 0.0
User 18743 does not improve AUC. Reverting changes.
Training on augumented user 44407 3/50 current_auc = 0.0
User 44407 AUC after training: 0.0
User 44407 does not improve AUC. Reverting changes.
Training on augumented user 124988 4/50 current_auc = 0.0
User 124988 AUC after training: 0.0
User 124988 does not improve AUC. Reverting changes.
Training on augumented user 39341 5/50 current_auc = 0.0
User 39341 AUC after training: 0.0
User 39341 does not improve AUC. Reverting changes.
Training on augumented user 22685 6/50 current_auc = 0.0
User 22685 AUC after training: 0.0
User 22685 does not improve AUC. Reverting changes.
Training on augumented user 57608 7/50 current_auc = 0.0
User 57608 AUC after training: 0.0
User 57608 does not improve AUC. Reverting changes.
Training on augumented user 38156 8/50 current_auc = 0.0
User 38156 AUC after training: 0.0
User 38156 does not improve AUC. Reverting changes.
Training on augumented user 43438 9/50 current_auc = 0.0
User 43438 AUC after training: 0.0
User 43438 does not improve AUC. Reverting changes.
Training on augumented user 22672 10/50 current_auc = 0.0
User 22672 AUC after training: 0.0
User 22672 does not improve AUC. Reverting changes.
Training on augumented user 25275 11/50 current_auc = 0.0
User 25275 AUC after training: 0.0
User 25275 does not improve AUC. Reverting changes.
Training on augumented user 90224 12/50 current_auc = 0.0
User 90224 AUC after training: 0.0
User 90224 does not improve AUC. Reverting changes.
Training on augumented user 46794 13/50 current_auc = 0.0
User 46794 AUC after training: 0.0
User 46794 does not improve AUC. Reverting changes.
Training on augumented user 26029 14/50 current_auc = 0.0
User 26029 AUC after training: 0.0
User 26029 does not improve AUC. Reverting changes.
Training on augumented user 100351 15/50 current_auc = 0.0
User 100351 AUC after training: 0.0
User 100351 does not improve AUC. Reverting changes.
Training on augumented user 26323 16/50 current_auc = 0.0
User 26323 AUC after training: 0.0
User 26323 does not improve AUC. Reverting changes.
Training on augumented user 81265 17/50 current_auc = 0.0
User 81265 AUC after training: 0.0
User 81265 does not improve AUC. Reverting changes.
Training on augumented user 6616 18/50 current_auc = 0.0
User 6616 AUC after training: 0.0
User 6616 does not improve AUC. Reverting changes.
Training on augumented user 72970 19/50 current_auc = 0.0
User 72970 AUC after training: 0.0
User 72970 does not improve AUC. Reverting changes.
Training on augumented user 712 20/50 current_auc = 0.0
User 712 AUC after training: 0.0
User 712 does not improve AUC. Reverting changes.
Training on augumented user 22811 21/50 current_auc = 0.0
User 22811 AUC after training: 0.0
User 22811 does not improve AUC. Reverting changes.
Training on augumented user 30332 22/50 current_auc = 0.0
User 30332 AUC after training: 0.0
User 30332 does not improve AUC. Reverting changes.
Training on augumented user 103112 23/50 current_auc = 0.0
User 103112 AUC after training: 0.0
User 103112 does not improve AUC. Reverting changes.
Training on augumented user 76964 24/50 current_auc = 0.0
User 76964 AUC after training: 0.0
User 76964 does not improve AUC. Reverting changes.
Training on augumented user 117995 25/50 current_auc = 0.0
User 117995 AUC after training: 0.0
User 117995 does not improve AUC. Reverting changes.
Training on augumented user 22087 26/50 current_auc = 0.0
User 22087 AUC after training: 0.0
User 22087 does not improve AUC. Reverting changes.
Training on augumented user 123779 27/50 current_auc = 0.0
User 123779 AUC after training: 0.0
User 123779 does not improve AUC. Reverting changes.
Training on augumented user 56079 28/50 current_auc = 0.0
User 56079 AUC after training: 0.0
User 56079 does not improve AUC. Reverting changes.
Training on augumented user 97182 29/50 current_auc = 0.0
User 97182 AUC after training: 0.0
User 97182 does not improve AUC. Reverting changes.
Training on augumented user 97447 30/50 current_auc = 0.0
User 97447 AUC after training: 0.0
User 97447 does not improve AUC. Reverting changes.
Training on augumented user 66241 31/50 current_auc = 0.0
User 66241 AUC after training: 0.0
User 66241 does not improve AUC. Reverting changes.
Training on augumented user 38706 32/50 current_auc = 0.0
User 38706 AUC after training: 0.0
User 38706 does not improve AUC. Reverting changes.
Training on augumented user 83636 33/50 current_auc = 0.0
User 83636 AUC after training: 0.0
User 83636 does not improve AUC. Reverting changes.
Training on augumented user 14834 34/50 current_auc = 0.0
User 14834 AUC after training: 0.0
User 14834 does not improve AUC. Reverting changes.
Training on augumented user 91172 35/50 current_auc = 0.0
User 91172 AUC after training: 0.0
User 91172 does not improve AUC. Reverting changes.
Training on augumented user 23509 36/50 current_auc = 0.0
User 23509 AUC after training: 0.0
User 23509 does not improve AUC. Reverting changes.
Training on augumented user 51766 37/50 current_auc = 0.0
User 51766 AUC after training: 0.0
User 51766 does not improve AUC. Reverting changes.
Training on augumented user 24173 38/50 current_auc = 0.0
User 24173 AUC after training: 0.0
User 24173 does not improve AUC. Reverting changes.
Training on augumented user 20572 39/50 current_auc = 0.0
User 20572 AUC after training: 0.0
User 20572 does not improve AUC. Reverting changes.
Training on augumented user 85751 40/50 current_auc = 0.0
User 85751 AUC after training: 0.0
User 85751 does not improve AUC. Reverting changes.
Training on augumented user 26573 41/50 current_auc = 0.0
User 26573 AUC after training: 0.0
User 26573 does not improve AUC. Reverting changes.
Training on augumented user 38508 42/50 current_auc = 0.0
User 38508 AUC after training: 0.0
User 38508 does not improve AUC. Reverting changes.
Training on augumented user 3723 43/50 current_auc = 0.0
User 3723 AUC after training: 0.0
User 3723 does not improve AUC. Reverting changes.
Training on augumented user 46771 44/50 current_auc = 0.0
User 46771 AUC after training: 0.0
User 46771 does not improve AUC. Reverting changes.
Training on augumented user 127186 45/50 current_auc = 0.0
User 127186 AUC after training: 0.0
User 127186 does not improve AUC. Reverting changes.
Training on augumented user 89649 46/50 current_auc = 0.0
User 89649 AUC after training: 0.0
User 89649 does not improve AUC. Reverting changes.
Training on augumented user 10851 47/50 current_auc = 0.0
User 10851 AUC after training: 0.0
User 10851 does not improve AUC. Reverting changes.
Training on augumented user 109315 48/50 current_auc = 0.0
User 109315 AUC after training: 0.0
User 109315 does not improve AUC. Reverting changes.
Training on augumented user 116525 49/50 current_auc = 0.0
User 116525 AUC after training: 0.0
User 116525 does not improve AUC. Reverting changes.
[2024-12-02 20:22:30.918144] start test user 131545 303/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:31.307081] start test user 131545 303/567 recall augumented users by random, augumented_users = [7204, 120492, 40983, 83090, 46040, 88540, 132921, 54073, 101188, 90062, 54540, 73711, 50206, 40039, 128223, 50407, 123960, 9490, 68655, 67281, 61526, 44404, 118812, 97948, 11172, 42097, 97118, 43668, 117448, 67171, 34037, 89709, 110055, 56724, 79096, 50383, 1867, 108221, 74500, 39610, 70051, 58801, 87760, 73733, 68665, 134768, 105927, 19314, 36506, 26802]
[2024-12-02 20:22:31.321295] user = 131545 Cloud 303/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:31.328008] user = 131545 Local 303/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:31.349898] user = 131545 Local+ 303/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:33.704510] user = 131545 MPDA- 303/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 7204 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7204 AUC after training: 0.5
User 7204 does not improve AUC. Reverting changes.
Training on augumented user 120492 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120492 AUC after training: 0.5
User 120492 does not improve AUC. Reverting changes.
Training on augumented user 40983 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40983 AUC after training: 0.5
User 40983 does not improve AUC. Reverting changes.
Training on augumented user 83090 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83090 AUC after training: 0.5
User 83090 does not improve AUC. Reverting changes.
Training on augumented user 46040 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46040 AUC after training: 0.5
User 46040 does not improve AUC. Reverting changes.
Training on augumented user 88540 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88540 AUC after training: 0.5
User 88540 does not improve AUC. Reverting changes.
Training on augumented user 132921 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132921 AUC after training: 0.5
User 132921 does not improve AUC. Reverting changes.
Training on augumented user 54073 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54073 AUC after training: 0.5
User 54073 does not improve AUC. Reverting changes.
Training on augumented user 101188 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101188 AUC after training: 0.5
User 101188 does not improve AUC. Reverting changes.
Training on augumented user 90062 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90062 AUC after training: 0.5
User 90062 does not improve AUC. Reverting changes.
Training on augumented user 54540 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54540 AUC after training: 0.5
User 54540 does not improve AUC. Reverting changes.
Training on augumented user 73711 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73711 AUC after training: 0.5
User 73711 does not improve AUC. Reverting changes.
Training on augumented user 50206 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50206 AUC after training: 0.5
User 50206 does not improve AUC. Reverting changes.
Training on augumented user 40039 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40039 AUC after training: 0.5
User 40039 does not improve AUC. Reverting changes.
Training on augumented user 128223 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128223 AUC after training: 0.5
User 128223 does not improve AUC. Reverting changes.
Training on augumented user 50407 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50407 AUC after training: 0.5
User 50407 does not improve AUC. Reverting changes.
Training on augumented user 123960 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123960 AUC after training: 0.5
User 123960 does not improve AUC. Reverting changes.
Training on augumented user 9490 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9490 AUC after training: 0.5
User 9490 does not improve AUC. Reverting changes.
Training on augumented user 68655 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68655 AUC after training: 0.5
User 68655 does not improve AUC. Reverting changes.
Training on augumented user 67281 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67281 AUC after training: 0.5
User 67281 does not improve AUC. Reverting changes.
Training on augumented user 61526 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61526 AUC after training: 0.5
User 61526 does not improve AUC. Reverting changes.
Training on augumented user 44404 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44404 AUC after training: 0.5
User 44404 does not improve AUC. Reverting changes.
Training on augumented user 118812 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118812 AUC after training: 0.5
User 118812 does not improve AUC. Reverting changes.
Training on augumented user 97948 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97948 AUC after training: 0.5
User 97948 does not improve AUC. Reverting changes.
Training on augumented user 11172 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11172 AUC after training: 0.5
User 11172 does not improve AUC. Reverting changes.
Training on augumented user 42097 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42097 AUC after training: 0.5
User 42097 does not improve AUC. Reverting changes.
Training on augumented user 97118 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97118 AUC after training: 0.5
User 97118 does not improve AUC. Reverting changes.
Training on augumented user 43668 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43668 AUC after training: 0.5
User 43668 does not improve AUC. Reverting changes.
Training on augumented user 117448 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117448 AUC after training: 0.5
User 117448 does not improve AUC. Reverting changes.
Training on augumented user 67171 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67171 AUC after training: 0.5
User 67171 does not improve AUC. Reverting changes.
Training on augumented user 34037 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34037 AUC after training: 0.5
User 34037 does not improve AUC. Reverting changes.
Training on augumented user 89709 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89709 AUC after training: 0.5
User 89709 does not improve AUC. Reverting changes.
Training on augumented user 110055 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110055 AUC after training: 0.5
User 110055 does not improve AUC. Reverting changes.
Training on augumented user 56724 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56724 AUC after training: 0.5
User 56724 does not improve AUC. Reverting changes.
Training on augumented user 79096 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79096 AUC after training: 0.5
User 79096 does not improve AUC. Reverting changes.
Training on augumented user 50383 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50383 AUC after training: 0.5
User 50383 does not improve AUC. Reverting changes.
Training on augumented user 1867 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1867 AUC after training: 0.5
User 1867 does not improve AUC. Reverting changes.
Training on augumented user 108221 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108221 AUC after training: 0.5
User 108221 does not improve AUC. Reverting changes.
Training on augumented user 74500 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74500 AUC after training: 0.5
User 74500 does not improve AUC. Reverting changes.
Training on augumented user 39610 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39610 AUC after training: 0.5
User 39610 does not improve AUC. Reverting changes.
Training on augumented user 70051 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70051 AUC after training: 0.5
User 70051 does not improve AUC. Reverting changes.
Training on augumented user 58801 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58801 AUC after training: 0.5
User 58801 does not improve AUC. Reverting changes.
Training on augumented user 87760 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87760 AUC after training: 0.5
User 87760 does not improve AUC. Reverting changes.
Training on augumented user 73733 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73733 AUC after training: 0.5
User 73733 does not improve AUC. Reverting changes.
Training on augumented user 68665 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68665 AUC after training: 0.5
User 68665 does not improve AUC. Reverting changes.
Training on augumented user 134768 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134768 AUC after training: 0.5
User 134768 does not improve AUC. Reverting changes.
Training on augumented user 105927 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105927 AUC after training: 0.5
User 105927 does not improve AUC. Reverting changes.
Training on augumented user 19314 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19314 AUC after training: 0.5
User 19314 does not improve AUC. Reverting changes.
Training on augumented user 36506 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36506 AUC after training: 0.5
User 36506 does not improve AUC. Reverting changes.
Training on augumented user 26802 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26802 AUC after training: 0.5
User 26802 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:02.570583] start test user 131585 304/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:03.049653] start test user 131585 304/567 recall augumented users by random, augumented_users = [55382, 134885, 64019, 43080, 19931, 10562, 51576, 69889, 111609, 77716, 52588, 20716, 18916, 91417, 58108, 24736, 79743, 77063, 27729, 35041, 57924, 37473, 96395, 44651, 77676, 3232, 848, 26, 113035, 68977, 80102, 92240, 100754, 98912, 34478, 41952, 81156, 131535, 34308, 45139, 57735, 55765, 25359, 134284, 51426, 40945, 57456, 9593, 21941, 95975]
[2024-12-02 20:23:03.077862] user = 131585 Cloud 304/567
[2024-12-02 20:23:03.101820] user = 131585 Local 304/567
[2024-12-02 20:23:03.188414] user = 131585 Local+ 304/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:05.652529] user = 131585 MPDA- 304/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.476797385620915
Training on augumented user 55382 0/50 current_auc = 0.476797385620915
User 55382 AUC after training: 0.4745098039215686
User 55382 does not improve AUC. Reverting changes.
Training on augumented user 134885 1/50 current_auc = 0.476797385620915
User 134885 AUC after training: 0.4764705882352941
User 134885 does not improve AUC. Reverting changes.
Training on augumented user 64019 2/50 current_auc = 0.476797385620915
User 64019 AUC after training: 0.4771241830065359
User 64019 improves AUC. Keeping the model.
Training on augumented user 43080 3/50 current_auc = 0.4771241830065359
User 43080 AUC after training: 0.476797385620915
User 43080 does not improve AUC. Reverting changes.
Training on augumented user 19931 4/50 current_auc = 0.4771241830065359
User 19931 AUC after training: 0.4764705882352941
User 19931 does not improve AUC. Reverting changes.
Training on augumented user 10562 5/50 current_auc = 0.4771241830065359
User 10562 AUC after training: 0.476797385620915
User 10562 does not improve AUC. Reverting changes.
Training on augumented user 51576 6/50 current_auc = 0.4771241830065359
User 51576 AUC after training: 0.47581699346405226
User 51576 does not improve AUC. Reverting changes.
Training on augumented user 69889 7/50 current_auc = 0.4771241830065359
User 69889 AUC after training: 0.476797385620915
User 69889 does not improve AUC. Reverting changes.
Training on augumented user 111609 8/50 current_auc = 0.4771241830065359
User 111609 AUC after training: 0.4764705882352941
User 111609 does not improve AUC. Reverting changes.
Training on augumented user 77716 9/50 current_auc = 0.4771241830065359
User 77716 AUC after training: 0.4764705882352941
User 77716 does not improve AUC. Reverting changes.
Training on augumented user 52588 10/50 current_auc = 0.4771241830065359
User 52588 AUC after training: 0.4764705882352941
User 52588 does not improve AUC. Reverting changes.
Training on augumented user 20716 11/50 current_auc = 0.4771241830065359
User 20716 AUC after training: 0.4764705882352941
User 20716 does not improve AUC. Reverting changes.
Training on augumented user 18916 12/50 current_auc = 0.4771241830065359
User 18916 AUC after training: 0.4764705882352941
User 18916 does not improve AUC. Reverting changes.
Training on augumented user 91417 13/50 current_auc = 0.4771241830065359
User 91417 AUC after training: 0.47581699346405226
User 91417 does not improve AUC. Reverting changes.
Training on augumented user 58108 14/50 current_auc = 0.4771241830065359
User 58108 AUC after training: 0.47581699346405226
User 58108 does not improve AUC. Reverting changes.
Training on augumented user 24736 15/50 current_auc = 0.4771241830065359
User 24736 AUC after training: 0.4764705882352941
User 24736 does not improve AUC. Reverting changes.
Training on augumented user 79743 16/50 current_auc = 0.4771241830065359
User 79743 AUC after training: 0.476797385620915
User 79743 does not improve AUC. Reverting changes.
Training on augumented user 77063 17/50 current_auc = 0.4771241830065359
User 77063 AUC after training: 0.476797385620915
User 77063 does not improve AUC. Reverting changes.
Training on augumented user 27729 18/50 current_auc = 0.4771241830065359
User 27729 AUC after training: 0.47352941176470587
User 27729 does not improve AUC. Reverting changes.
Training on augumented user 35041 19/50 current_auc = 0.4771241830065359
User 35041 AUC after training: 0.47777777777777775
User 35041 improves AUC. Keeping the model.
Training on augumented user 57924 20/50 current_auc = 0.47777777777777775
User 57924 AUC after training: 0.4722222222222222
User 57924 does not improve AUC. Reverting changes.
Training on augumented user 37473 21/50 current_auc = 0.47777777777777775
User 37473 AUC after training: 0.47810457516339866
User 37473 improves AUC. Keeping the model.
Training on augumented user 96395 22/50 current_auc = 0.47810457516339866
User 96395 AUC after training: 0.4748366013071895
User 96395 does not improve AUC. Reverting changes.
Training on augumented user 44651 23/50 current_auc = 0.47810457516339866
User 44651 AUC after training: 0.4784313725490196
User 44651 improves AUC. Keeping the model.
Training on augumented user 77676 24/50 current_auc = 0.4784313725490196
User 77676 AUC after training: 0.476797385620915
User 77676 does not improve AUC. Reverting changes.
Training on augumented user 3232 25/50 current_auc = 0.4784313725490196
User 3232 AUC after training: 0.4771241830065359
User 3232 does not improve AUC. Reverting changes.
Training on augumented user 848 26/50 current_auc = 0.4784313725490196
User 848 AUC after training: 0.47777777777777775
User 848 does not improve AUC. Reverting changes.
Training on augumented user 26 27/50 current_auc = 0.4784313725490196
User 26 AUC after training: 0.47810457516339866
User 26 does not improve AUC. Reverting changes.
Training on augumented user 113035 28/50 current_auc = 0.4784313725490196
User 113035 AUC after training: 0.476797385620915
User 113035 does not improve AUC. Reverting changes.
Training on augumented user 68977 29/50 current_auc = 0.4784313725490196
User 68977 AUC after training: 0.4784313725490196
User 68977 does not improve AUC. Reverting changes.
Training on augumented user 80102 30/50 current_auc = 0.4784313725490196
User 80102 AUC after training: 0.47745098039215683
User 80102 does not improve AUC. Reverting changes.
Training on augumented user 92240 31/50 current_auc = 0.4784313725490196
User 92240 AUC after training: 0.47777777777777775
User 92240 does not improve AUC. Reverting changes.
Training on augumented user 100754 32/50 current_auc = 0.4784313725490196
User 100754 AUC after training: 0.47745098039215683
User 100754 does not improve AUC. Reverting changes.
Training on augumented user 98912 33/50 current_auc = 0.4784313725490196
User 98912 AUC after training: 0.4784313725490196
User 98912 does not improve AUC. Reverting changes.
Training on augumented user 34478 34/50 current_auc = 0.4784313725490196
User 34478 AUC after training: 0.4787581699346405
User 34478 improves AUC. Keeping the model.
Training on augumented user 41952 35/50 current_auc = 0.4787581699346405
User 41952 AUC after training: 0.47973856209150323
User 41952 improves AUC. Keeping the model.
Training on augumented user 81156 36/50 current_auc = 0.47973856209150323
User 81156 AUC after training: 0.4800653594771242
User 81156 improves AUC. Keeping the model.
Training on augumented user 131535 37/50 current_auc = 0.4800653594771242
User 131535 AUC after training: 0.4771241830065359
User 131535 does not improve AUC. Reverting changes.
Training on augumented user 34308 38/50 current_auc = 0.4800653594771242
User 34308 AUC after training: 0.480718954248366
User 34308 improves AUC. Keeping the model.
Training on augumented user 45139 39/50 current_auc = 0.480718954248366
User 45139 AUC after training: 0.4797385620915033
User 45139 does not improve AUC. Reverting changes.
Training on augumented user 57735 40/50 current_auc = 0.480718954248366
User 57735 AUC after training: 0.47483660130718963
User 57735 does not improve AUC. Reverting changes.
Training on augumented user 55765 41/50 current_auc = 0.480718954248366
User 55765 AUC after training: 0.46895424836601307
User 55765 does not improve AUC. Reverting changes.
Training on augumented user 25359 42/50 current_auc = 0.480718954248366
User 25359 AUC after training: 0.4800653594771242
User 25359 does not improve AUC. Reverting changes.
Training on augumented user 134284 43/50 current_auc = 0.480718954248366
User 134284 AUC after training: 0.4794117647058823
User 134284 does not improve AUC. Reverting changes.
Training on augumented user 51426 44/50 current_auc = 0.480718954248366
User 51426 AUC after training: 0.48006535947712425
User 51426 does not improve AUC. Reverting changes.
Training on augumented user 40945 45/50 current_auc = 0.480718954248366
User 40945 AUC after training: 0.4784313725490196
User 40945 does not improve AUC. Reverting changes.
Training on augumented user 57456 46/50 current_auc = 0.480718954248366
User 57456 AUC after training: 0.4790849673202614
User 57456 does not improve AUC. Reverting changes.
Training on augumented user 9593 47/50 current_auc = 0.480718954248366
User 9593 AUC after training: 0.4807189542483661
User 9593 improves AUC. Keeping the model.
Training on augumented user 21941 48/50 current_auc = 0.4807189542483661
User 21941 AUC after training: 0.480718954248366
User 21941 does not improve AUC. Reverting changes.
Training on augumented user 95975 49/50 current_auc = 0.4807189542483661
User 95975 AUC after training: 0.47973856209150323
User 95975 does not improve AUC. Reverting changes.
[2024-12-02 20:23:31.771857] start test user 131611 305/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:32.174080] start test user 131611 305/567 recall augumented users by random, augumented_users = [7151, 133848, 9009, 89988, 3148, 9811, 28706, 24406, 77366, 13405, 69140, 102113, 99711, 89709, 86317, 132200, 18812, 131627, 132505, 30535, 119761, 14143, 66934, 6440, 117785, 28370, 127395, 125308, 52007, 135420, 80693, 18946, 120542, 23393, 107994, 117476, 65540, 121835, 132757, 61903, 3946, 78455, 67723, 23057, 83453, 105189, 30442, 109998, 101058, 118633]
[2024-12-02 20:23:32.188762] user = 131611 Cloud 305/567
[2024-12-02 20:23:32.197996] user = 131611 Local 305/567
[2024-12-02 20:23:32.254032] user = 131611 Local+ 305/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:34.119431] user = 131611 MPDA- 305/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5679012345679012
Training on augumented user 7151 0/50 current_auc = 0.5679012345679012
User 7151 AUC after training: 0.5679012345679012
User 7151 does not improve AUC. Reverting changes.
Training on augumented user 133848 1/50 current_auc = 0.5679012345679012
User 133848 AUC after training: 0.5679012345679012
User 133848 does not improve AUC. Reverting changes.
Training on augumented user 9009 2/50 current_auc = 0.5679012345679012
User 9009 AUC after training: 0.5679012345679012
User 9009 does not improve AUC. Reverting changes.
Training on augumented user 89988 3/50 current_auc = 0.5679012345679012
User 89988 AUC after training: 0.5679012345679012
User 89988 does not improve AUC. Reverting changes.
Training on augumented user 3148 4/50 current_auc = 0.5679012345679012
User 3148 AUC after training: 0.5679012345679012
User 3148 does not improve AUC. Reverting changes.
Training on augumented user 9811 5/50 current_auc = 0.5679012345679012
User 9811 AUC after training: 0.5679012345679012
User 9811 does not improve AUC. Reverting changes.
Training on augumented user 28706 6/50 current_auc = 0.5679012345679012
User 28706 AUC after training: 0.5679012345679012
User 28706 does not improve AUC. Reverting changes.
Training on augumented user 24406 7/50 current_auc = 0.5679012345679012
User 24406 AUC after training: 0.5679012345679012
User 24406 does not improve AUC. Reverting changes.
Training on augumented user 77366 8/50 current_auc = 0.5679012345679012
User 77366 AUC after training: 0.5679012345679012
User 77366 does not improve AUC. Reverting changes.
Training on augumented user 13405 9/50 current_auc = 0.5679012345679012
User 13405 AUC after training: 0.5679012345679012
User 13405 does not improve AUC. Reverting changes.
Training on augumented user 69140 10/50 current_auc = 0.5679012345679012
User 69140 AUC after training: 0.5679012345679012
User 69140 does not improve AUC. Reverting changes.
Training on augumented user 102113 11/50 current_auc = 0.5679012345679012
User 102113 AUC after training: 0.5679012345679012
User 102113 does not improve AUC. Reverting changes.
Training on augumented user 99711 12/50 current_auc = 0.5679012345679012
User 99711 AUC after training: 0.5679012345679012
User 99711 does not improve AUC. Reverting changes.
Training on augumented user 89709 13/50 current_auc = 0.5679012345679012
User 89709 AUC after training: 0.5679012345679012
User 89709 does not improve AUC. Reverting changes.
Training on augumented user 86317 14/50 current_auc = 0.5679012345679012
User 86317 AUC after training: 0.5679012345679012
User 86317 does not improve AUC. Reverting changes.
Training on augumented user 132200 15/50 current_auc = 0.5679012345679012
User 132200 AUC after training: 0.5679012345679012
User 132200 does not improve AUC. Reverting changes.
Training on augumented user 18812 16/50 current_auc = 0.5679012345679012
User 18812 AUC after training: 0.5679012345679012
User 18812 does not improve AUC. Reverting changes.
Training on augumented user 131627 17/50 current_auc = 0.5679012345679012
User 131627 AUC after training: 0.5679012345679012
User 131627 does not improve AUC. Reverting changes.
Training on augumented user 132505 18/50 current_auc = 0.5679012345679012
User 132505 AUC after training: 0.5679012345679012
User 132505 does not improve AUC. Reverting changes.
Training on augumented user 30535 19/50 current_auc = 0.5679012345679012
User 30535 AUC after training: 0.5679012345679012
User 30535 does not improve AUC. Reverting changes.
Training on augumented user 119761 20/50 current_auc = 0.5679012345679012
User 119761 AUC after training: 0.5679012345679012
User 119761 does not improve AUC. Reverting changes.
Training on augumented user 14143 21/50 current_auc = 0.5679012345679012
User 14143 AUC after training: 0.5679012345679012
User 14143 does not improve AUC. Reverting changes.
Training on augumented user 66934 22/50 current_auc = 0.5679012345679012
User 66934 AUC after training: 0.5679012345679012
User 66934 does not improve AUC. Reverting changes.
Training on augumented user 6440 23/50 current_auc = 0.5679012345679012
User 6440 AUC after training: 0.5679012345679012
User 6440 does not improve AUC. Reverting changes.
Training on augumented user 117785 24/50 current_auc = 0.5679012345679012
User 117785 AUC after training: 0.5679012345679012
User 117785 does not improve AUC. Reverting changes.
Training on augumented user 28370 25/50 current_auc = 0.5679012345679012
User 28370 AUC after training: 0.5679012345679012
User 28370 does not improve AUC. Reverting changes.
Training on augumented user 127395 26/50 current_auc = 0.5679012345679012
User 127395 AUC after training: 0.5679012345679012
User 127395 does not improve AUC. Reverting changes.
Training on augumented user 125308 27/50 current_auc = 0.5679012345679012
User 125308 AUC after training: 0.5679012345679012
User 125308 does not improve AUC. Reverting changes.
Training on augumented user 52007 28/50 current_auc = 0.5679012345679012
User 52007 AUC after training: 0.5679012345679012
User 52007 does not improve AUC. Reverting changes.
Training on augumented user 135420 29/50 current_auc = 0.5679012345679012
User 135420 AUC after training: 0.5679012345679012
User 135420 does not improve AUC. Reverting changes.
Training on augumented user 80693 30/50 current_auc = 0.5679012345679012
User 80693 AUC after training: 0.5679012345679012
User 80693 does not improve AUC. Reverting changes.
Training on augumented user 18946 31/50 current_auc = 0.5679012345679012
User 18946 AUC after training: 0.5679012345679012
User 18946 does not improve AUC. Reverting changes.
Training on augumented user 120542 32/50 current_auc = 0.5679012345679012
User 120542 AUC after training: 0.5679012345679012
User 120542 does not improve AUC. Reverting changes.
Training on augumented user 23393 33/50 current_auc = 0.5679012345679012
User 23393 AUC after training: 0.5679012345679012
User 23393 does not improve AUC. Reverting changes.
Training on augumented user 107994 34/50 current_auc = 0.5679012345679012
User 107994 AUC after training: 0.5679012345679012
User 107994 does not improve AUC. Reverting changes.
Training on augumented user 117476 35/50 current_auc = 0.5679012345679012
User 117476 AUC after training: 0.5679012345679012
User 117476 does not improve AUC. Reverting changes.
Training on augumented user 65540 36/50 current_auc = 0.5679012345679012
User 65540 AUC after training: 0.5679012345679012
User 65540 does not improve AUC. Reverting changes.
Training on augumented user 121835 37/50 current_auc = 0.5679012345679012
User 121835 AUC after training: 0.5679012345679012
User 121835 does not improve AUC. Reverting changes.
Training on augumented user 132757 38/50 current_auc = 0.5679012345679012
User 132757 AUC after training: 0.5679012345679012
User 132757 does not improve AUC. Reverting changes.
Training on augumented user 61903 39/50 current_auc = 0.5679012345679012
User 61903 AUC after training: 0.5679012345679012
User 61903 does not improve AUC. Reverting changes.
Training on augumented user 3946 40/50 current_auc = 0.5679012345679012
User 3946 AUC after training: 0.5679012345679012
User 3946 does not improve AUC. Reverting changes.
Training on augumented user 78455 41/50 current_auc = 0.5679012345679012
User 78455 AUC after training: 0.5679012345679012
User 78455 does not improve AUC. Reverting changes.
Training on augumented user 67723 42/50 current_auc = 0.5679012345679012
User 67723 AUC after training: 0.5679012345679012
User 67723 does not improve AUC. Reverting changes.
Training on augumented user 23057 43/50 current_auc = 0.5679012345679012
User 23057 AUC after training: 0.5679012345679012
User 23057 does not improve AUC. Reverting changes.
Training on augumented user 83453 44/50 current_auc = 0.5679012345679012
User 83453 AUC after training: 0.5679012345679012
User 83453 does not improve AUC. Reverting changes.
Training on augumented user 105189 45/50 current_auc = 0.5679012345679012
User 105189 AUC after training: 0.5679012345679012
User 105189 does not improve AUC. Reverting changes.
Training on augumented user 30442 46/50 current_auc = 0.5679012345679012
User 30442 AUC after training: 0.5679012345679012
User 30442 does not improve AUC. Reverting changes.
Training on augumented user 109998 47/50 current_auc = 0.5679012345679012
User 109998 AUC after training: 0.5679012345679012
User 109998 does not improve AUC. Reverting changes.
Training on augumented user 101058 48/50 current_auc = 0.5679012345679012
User 101058 AUC after training: 0.5679012345679012
User 101058 does not improve AUC. Reverting changes.
Training on augumented user 118633 49/50 current_auc = 0.5679012345679012
User 118633 AUC after training: 0.5679012345679012
User 118633 does not improve AUC. Reverting changes.
[2024-12-02 20:24:03.108510] start test user 131615 306/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:24:03.777234] start test user 131615 306/567 recall augumented users by random, augumented_users = [4346, 86391, 42981, 27232, 95183, 131709, 100403, 89083, 28739, 19388, 52528, 7677, 60625, 71811, 71277, 42879, 99700, 49931, 88239, 20638, 58875, 41075, 117273, 125406, 81666, 52903, 106706, 64301, 133084, 44008, 63568, 53665, 50477, 81938, 97268, 116714, 93566, 104922, 13449, 33204, 136300, 49650, 53884, 96533, 85151, 48216, 43722, 63814, 12553, 93952]
[2024-12-02 20:24:03.792542] user = 131615 Cloud 306/567
[2024-12-02 20:24:03.821577] user = 131615 Local 306/567
