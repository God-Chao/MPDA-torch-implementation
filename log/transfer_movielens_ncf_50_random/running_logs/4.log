[2024-12-02 17:37:38.047488] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 4, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['55981' '56034' '56039' '56083' '56149' '56167' '56182' '56218' '56221'
 '56222' '56257' '56258' '56273' '56305' '56325' '56342' '56358' '56367'
 '56372' '56402' '56425' '56428' '56451' '56474' '56488' '56506' '56509'
 '56518' '56520' '56521' '56574' '56595' '56621' '56662' '56727' '56792'
 '56817' '56822' '56829' '56847' '56866' '56879' '56883' '56926' '56953'
 '56957' '56959' '56976' '56978' '57002' '57013' '57018' '57053' '57072'
 '57081' '57099' '57143' '57152' '57171' '57191' '57218' '57220' '57242'
 '57251' '57349' '57358' '57385' '57398' '57441' '57458' '57479' '57484'
 '57505' '57516' '57518' '57587' '57626' '57628' '57671' '57689' '57701'
 '57727' '57760' '57770' '57791' '57818' '57830' '57887' '57921' '57943'
 '57969' '57978' '57984' '57995' '58021' '58069' '58125' '58156' '58166'
 '58296' '58309' '58315' '58346' '58373' '58415' '58445' '58483' '58498'
 '58519' '58612' '58628' '58657' '58662' '58667' '58676' '58700' '58706'
 '58730' '58766' '58831' '58888' '58894' '58905' '58920' '58921' '58922'
 '58953' '58970' '58987' '59047' '59097' '59117' '59122' '59151' '59178'
 '59203' '59205' '59215' '59230' '59253' '59257' '59276' '59308' '59341'
 '59352' '59359' '59407' '59409' '59414' '59447' '59466' '59477' '59491'
 '59576' '59613' '59675' '59714' '59749' '59781' '59812' '59816' '59830'
 '59849' '59852' '59853' '59858' '59873' '59909' '59920' '59923' '59971'
 '59981' '60020' '60022' '60135' '60138' '60159' '60205' '60265' '60290'
 '60294' '60361' '60398' '60407' '60408' '60427' '60441' '60457' '60482'
 '60491' '60501' '60510' '60519' '60533' '60562' '60653' '60654' '60655'
 '60665' '60666' '60722' '60726' '60752' '60773' '60777' '60805' '60814'
 '60848' '60887' '60971' '61030' '61049' '61053' '61060' '61062' '61112'
 '61145' '61162' '61168' '61204' '61215' '61240' '61258' '61298' '61302'
 '61303' '61305' '61310' '61331' '61342' '61374' '61394' '61398' '61408'
 '61451' '61470' '61481' '61493' '61495' '61527' '61552' '61563' '61589'
 '61603' '61610' '61627' '61628' '61661' '61699' '61739' '61841' '61843'
 '61902' '61939' '61947' '61951' '61962' '61968' '62022' '62070' '62111'
 '62144' '62160' '62193' '62217' '62218' '62234' '62243' '62259' '62340'
 '62342' '62348' '62349' '62357' '62368' '62383' '62387' '62408' '62430'
 '62467' '62505' '62511' '62571' '62606' '62614' '62681' '62693' '62714'
 '62719' '62734' '62755' '62756' '62769' '62797' '62800' '62805' '62810'
 '62812' '62829' '62859' '62868' '62876' '62892' '62925' '62984' '63046'
 '63071' '63080' '63147' '63154' '63165' '63174' '63184' '63186' '63189'
 '63200' '63244' '63249' '63254' '63266' '63273' '63295' '63377' '63457'
 '63462' '63546' '63570' '63597' '63643' '63705' '63779' '63799' '63828'
 '63834' '63885' '63914' '63950' '63957' '64043' '64060' '64110' '64150'
 '64154' '64170' '64175' '64191' '64214' '64232' '64319' '64342' '64346'
 '64349' '64363' '64383' '64385' '64403' '64408' '64460' '64487' '64498'
 '64503' '64557' '64559' '64608' '64617' '64640' '64655' '64718' '64754'
 '64787' '64843' '64857' '64860' '64866' '64882' '64918' '64934' '64949'
 '65017' '65019' '65034' '65043' '65072' '65129' '65133' '65147' '65180'
 '65182' '65185' '65204' '65232' '65279' '65285' '65322' '65343' '65358'
 '65367' '65401' '65409' '65431' '65444' '65455' '65456' '65474' '65529'
 '65534' '65539' '65542' '65544' '65581' '65659' '65664' '65666' '65670'
 '65709' '65758' '65826' '65842' '65908' '65919' '65938' '65945' '65959'
 '65976' '65978' '66011' '66023' '66028' '66049' '66088' '66112' '66163'
 '66179' '66181' '66241' '66247' '66261' '66263' '66282' '66305' '66354'
 '66401' '66423' '66484' '66499' '66561' '66568' '66617' '66620' '66649'
 '66678' '66763' '66813' '66834' '66836' '66837' '66899' '66911' '66987'
 '67030' '67068' '67075' '67077' '67101' '67105' '67112' '67145' '67147'
 '67149' '67161' '67167' '67244' '67245' '67252' '67283' '67286' '67288'
 '67301' '67317' '67341' '67346' '67386' '67387' '67419' '67443' '67477'
 '67480' '67493' '67494' '67518' '67525' '67532' '67544' '67568' '67569'
 '67584' '67587' '67602' '67618' '67629' '67670' '67671' '67673' '67709'
 '67825' '67967' '67979' '67987' '67996' '67999' '68008' '68019' '68026'
 '68068' '68099' '68146' '68161' '68167' '68180' '68226' '68293' '68328'
 '68358' '68367' '68415' '68430' '68433' '68463' '68491' '68507' '68548'
 '68617' '68693' '68744' '68782' '68789' '68835' '68892' '68914' '68942'
 '68961' '68974' '69021' '69078' '69157' '69180' '69219' '69225' '69261'
 '69265' '69290' '69291' '69310' '69314' '69378' '69426' '69473' '69483'
 '69494' '69496' '69566' '69577' '69632' '69635' '69645' '69672' '69684'
 '69699']
[2024-12-02 17:37:38.060895] start test on test users
[2024-12-02 17:37:38.060946] start test user 55981 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:40.045007] start test user 55981 0/568 recall augumented users by random, augumented_users = [46134, 97714, 472, 74820, 92051, 53267, 33338, 20882, 131676, 43761, 71267, 38074, 97126, 2946, 9782, 116555, 125360, 45113, 87096, 9463, 100649, 84904, 20679, 85442, 105809, 53211, 75601, 138387, 72470, 135927, 97287, 25817, 45717, 66241, 25081, 96853, 124329, 49675, 24968, 34466, 131300, 53299, 78575, 76134, 80476, 9072, 128178, 17287, 76705, 114733]
[2024-12-02 17:37:40.079386] user = 55981 Cloud 0/568
[2024-12-02 17:37:44.905796] user = 55981 Local 0/568
[2024-12-02 17:37:45.524394] user = 55981 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:48.780300] user = 55981 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7333333333333333
Training on augumented user 46134 0/50 current_auc = 0.7333333333333333
User 46134 AUC after training: 0.7333333333333333
User 46134 does not improve AUC. Reverting changes.
Training on augumented user 97714 1/50 current_auc = 0.7333333333333333
User 97714 AUC after training: 0.7
User 97714 does not improve AUC. Reverting changes.
Training on augumented user 472 2/50 current_auc = 0.7333333333333333
User 472 AUC after training: 0.7
User 472 does not improve AUC. Reverting changes.
Training on augumented user 74820 3/50 current_auc = 0.7333333333333333
User 74820 AUC after training: 0.7333333333333333
User 74820 does not improve AUC. Reverting changes.
Training on augumented user 92051 4/50 current_auc = 0.7333333333333333
User 92051 AUC after training: 0.7333333333333333
User 92051 does not improve AUC. Reverting changes.
Training on augumented user 53267 5/50 current_auc = 0.7333333333333333
User 53267 AUC after training: 0.7333333333333333
User 53267 does not improve AUC. Reverting changes.
Training on augumented user 33338 6/50 current_auc = 0.7333333333333333
User 33338 AUC after training: 0.7
User 33338 does not improve AUC. Reverting changes.
Training on augumented user 20882 7/50 current_auc = 0.7333333333333333
User 20882 AUC after training: 0.7333333333333333
User 20882 does not improve AUC. Reverting changes.
Training on augumented user 131676 8/50 current_auc = 0.7333333333333333
User 131676 AUC after training: 0.7
User 131676 does not improve AUC. Reverting changes.
Training on augumented user 43761 9/50 current_auc = 0.7333333333333333
User 43761 AUC after training: 0.7999999999999999
User 43761 improves AUC. Keeping the model.
Training on augumented user 71267 10/50 current_auc = 0.7999999999999999
User 71267 AUC after training: 0.7999999999999999
User 71267 does not improve AUC. Reverting changes.
Training on augumented user 38074 11/50 current_auc = 0.7999999999999999
User 38074 AUC after training: 0.7333333333333333
User 38074 does not improve AUC. Reverting changes.
Training on augumented user 97126 12/50 current_auc = 0.7999999999999999
User 97126 AUC after training: 0.7333333333333333
User 97126 does not improve AUC. Reverting changes.
Training on augumented user 2946 13/50 current_auc = 0.7999999999999999
User 2946 AUC after training: 0.7666666666666666
User 2946 does not improve AUC. Reverting changes.
Training on augumented user 9782 14/50 current_auc = 0.7999999999999999
User 9782 AUC after training: 0.7999999999999999
User 9782 does not improve AUC. Reverting changes.
Training on augumented user 116555 15/50 current_auc = 0.7999999999999999
User 116555 AUC after training: 0.7999999999999999
User 116555 does not improve AUC. Reverting changes.
Training on augumented user 125360 16/50 current_auc = 0.7999999999999999
User 125360 AUC after training: 0.7333333333333333
User 125360 does not improve AUC. Reverting changes.
Training on augumented user 45113 17/50 current_auc = 0.7999999999999999
User 45113 AUC after training: 0.7999999999999999
User 45113 does not improve AUC. Reverting changes.
Training on augumented user 87096 18/50 current_auc = 0.7999999999999999
User 87096 AUC after training: 0.7666666666666666
User 87096 does not improve AUC. Reverting changes.
Training on augumented user 9463 19/50 current_auc = 0.7999999999999999
User 9463 AUC after training: 0.7666666666666666
User 9463 does not improve AUC. Reverting changes.
Training on augumented user 100649 20/50 current_auc = 0.7999999999999999
User 100649 AUC after training: 0.7333333333333333
User 100649 does not improve AUC. Reverting changes.
Training on augumented user 84904 21/50 current_auc = 0.7999999999999999
User 84904 AUC after training: 0.7999999999999999
User 84904 does not improve AUC. Reverting changes.
Training on augumented user 20679 22/50 current_auc = 0.7999999999999999
User 20679 AUC after training: 0.7666666666666666
User 20679 does not improve AUC. Reverting changes.
Training on augumented user 85442 23/50 current_auc = 0.7999999999999999
User 85442 AUC after training: 0.7999999999999999
User 85442 does not improve AUC. Reverting changes.
Training on augumented user 105809 24/50 current_auc = 0.7999999999999999
User 105809 AUC after training: 0.7666666666666666
User 105809 does not improve AUC. Reverting changes.
Training on augumented user 53211 25/50 current_auc = 0.7999999999999999
User 53211 AUC after training: 0.7999999999999999
User 53211 does not improve AUC. Reverting changes.
Training on augumented user 75601 26/50 current_auc = 0.7999999999999999
User 75601 AUC after training: 0.7999999999999999
User 75601 does not improve AUC. Reverting changes.
Training on augumented user 138387 27/50 current_auc = 0.7999999999999999
User 138387 AUC after training: 0.7666666666666666
User 138387 does not improve AUC. Reverting changes.
Training on augumented user 72470 28/50 current_auc = 0.7999999999999999
User 72470 AUC after training: 0.7666666666666666
User 72470 does not improve AUC. Reverting changes.
Training on augumented user 135927 29/50 current_auc = 0.7999999999999999
User 135927 AUC after training: 0.7666666666666666
User 135927 does not improve AUC. Reverting changes.
Training on augumented user 97287 30/50 current_auc = 0.7999999999999999
User 97287 AUC after training: 0.7666666666666666
User 97287 does not improve AUC. Reverting changes.
Training on augumented user 25817 31/50 current_auc = 0.7999999999999999
User 25817 AUC after training: 0.7999999999999999
User 25817 does not improve AUC. Reverting changes.
Training on augumented user 45717 32/50 current_auc = 0.7999999999999999
User 45717 AUC after training: 0.7333333333333333
User 45717 does not improve AUC. Reverting changes.
Training on augumented user 66241 33/50 current_auc = 0.7999999999999999
User 66241 AUC after training: 0.7666666666666666
User 66241 does not improve AUC. Reverting changes.
Training on augumented user 25081 34/50 current_auc = 0.7999999999999999
User 25081 AUC after training: 0.7666666666666666
User 25081 does not improve AUC. Reverting changes.
Training on augumented user 96853 35/50 current_auc = 0.7999999999999999
User 96853 AUC after training: 0.7999999999999999
User 96853 does not improve AUC. Reverting changes.
Training on augumented user 124329 36/50 current_auc = 0.7999999999999999
User 124329 AUC after training: 0.7999999999999999
User 124329 does not improve AUC. Reverting changes.
Training on augumented user 49675 37/50 current_auc = 0.7999999999999999
User 49675 AUC after training: 0.7999999999999999
User 49675 does not improve AUC. Reverting changes.
Training on augumented user 24968 38/50 current_auc = 0.7999999999999999
User 24968 AUC after training: 0.7999999999999999
User 24968 does not improve AUC. Reverting changes.
Training on augumented user 34466 39/50 current_auc = 0.7999999999999999
User 34466 AUC after training: 0.7999999999999999
User 34466 does not improve AUC. Reverting changes.
Training on augumented user 131300 40/50 current_auc = 0.7999999999999999
User 131300 AUC after training: 0.7999999999999999
User 131300 does not improve AUC. Reverting changes.
Training on augumented user 53299 41/50 current_auc = 0.7999999999999999
User 53299 AUC after training: 0.7666666666666666
User 53299 does not improve AUC. Reverting changes.
Training on augumented user 78575 42/50 current_auc = 0.7999999999999999
User 78575 AUC after training: 0.8333333333333334
User 78575 improves AUC. Keeping the model.
Training on augumented user 76134 43/50 current_auc = 0.8333333333333334
User 76134 AUC after training: 0.8333333333333334
User 76134 does not improve AUC. Reverting changes.
Training on augumented user 80476 44/50 current_auc = 0.8333333333333334
User 80476 AUC after training: 0.7666666666666666
User 80476 does not improve AUC. Reverting changes.
Training on augumented user 9072 45/50 current_auc = 0.8333333333333334
User 9072 AUC after training: 0.7999999999999999
User 9072 does not improve AUC. Reverting changes.
Training on augumented user 128178 46/50 current_auc = 0.8333333333333334
User 128178 AUC after training: 0.8333333333333334
User 128178 does not improve AUC. Reverting changes.
Training on augumented user 17287 47/50 current_auc = 0.8333333333333334
User 17287 AUC after training: 0.7666666666666666
User 17287 does not improve AUC. Reverting changes.
Training on augumented user 76705 48/50 current_auc = 0.8333333333333334
User 76705 AUC after training: 0.8333333333333334
User 76705 does not improve AUC. Reverting changes.
Training on augumented user 114733 49/50 current_auc = 0.8333333333333334
User 114733 AUC after training: 0.7999999999999999
User 114733 does not improve AUC. Reverting changes.
[2024-12-02 17:38:22.145374] start test user 56034 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:22.814495] start test user 56034 1/568 recall augumented users by random, augumented_users = [42725, 37305, 88020, 88676, 120355, 105357, 101679, 111438, 45211, 109612, 82909, 101932, 70686, 22068, 128978, 14310, 63537, 63125, 83629, 24214, 36785, 118975, 103616, 86181, 29761, 108831, 63314, 47116, 105259, 45946, 1973, 78610, 64004, 50991, 73078, 60473, 1188, 118182, 8927, 9932, 54680, 23328, 53967, 137963, 33487, 63450, 137033, 116416, 132568, 95056]
[2024-12-02 17:38:22.830809] user = 56034 Cloud 1/568
[2024-12-02 17:38:22.843028] user = 56034 Local 1/568
[2024-12-02 17:38:23.001898] user = 56034 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:25.554980] user = 56034 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6932565789473685
Training on augumented user 42725 0/50 current_auc = 0.6932565789473685
User 42725 AUC after training: 0.6949013157894737
User 42725 improves AUC. Keeping the model.
Training on augumented user 37305 1/50 current_auc = 0.6949013157894737
User 37305 AUC after training: 0.6924342105263158
User 37305 does not improve AUC. Reverting changes.
Training on augumented user 88020 2/50 current_auc = 0.6949013157894737
User 88020 AUC after training: 0.6949013157894737
User 88020 does not improve AUC. Reverting changes.
Training on augumented user 88676 3/50 current_auc = 0.6949013157894737
User 88676 AUC after training: 0.6932565789473685
User 88676 does not improve AUC. Reverting changes.
Training on augumented user 120355 4/50 current_auc = 0.6949013157894737
User 120355 AUC after training: 0.6949013157894737
User 120355 does not improve AUC. Reverting changes.
Training on augumented user 105357 5/50 current_auc = 0.6949013157894737
User 105357 AUC after training: 0.6973684210526316
User 105357 improves AUC. Keeping the model.
Training on augumented user 101679 6/50 current_auc = 0.6973684210526316
User 101679 AUC after training: 0.6973684210526316
User 101679 does not improve AUC. Reverting changes.
Training on augumented user 111438 7/50 current_auc = 0.6973684210526316
User 111438 AUC after training: 0.6973684210526316
User 111438 does not improve AUC. Reverting changes.
Training on augumented user 45211 8/50 current_auc = 0.6973684210526316
User 45211 AUC after training: 0.6973684210526316
User 45211 does not improve AUC. Reverting changes.
Training on augumented user 109612 9/50 current_auc = 0.6973684210526316
User 109612 AUC after training: 0.6990131578947368
User 109612 improves AUC. Keeping the model.
Training on augumented user 82909 10/50 current_auc = 0.6990131578947368
User 82909 AUC after training: 0.699013157894737
User 82909 improves AUC. Keeping the model.
Training on augumented user 101932 11/50 current_auc = 0.699013157894737
User 101932 AUC after training: 0.699013157894737
User 101932 does not improve AUC. Reverting changes.
Training on augumented user 70686 12/50 current_auc = 0.699013157894737
User 70686 AUC after training: 0.699013157894737
User 70686 does not improve AUC. Reverting changes.
Training on augumented user 22068 13/50 current_auc = 0.699013157894737
User 22068 AUC after training: 0.699013157894737
User 22068 does not improve AUC. Reverting changes.
Training on augumented user 128978 14/50 current_auc = 0.699013157894737
User 128978 AUC after training: 0.6990131578947368
User 128978 does not improve AUC. Reverting changes.
Training on augumented user 14310 15/50 current_auc = 0.699013157894737
User 14310 AUC after training: 0.699013157894737
User 14310 does not improve AUC. Reverting changes.
Training on augumented user 63537 16/50 current_auc = 0.699013157894737
User 63537 AUC after training: 0.6990131578947368
User 63537 does not improve AUC. Reverting changes.
Training on augumented user 63125 17/50 current_auc = 0.699013157894737
User 63125 AUC after training: 0.699013157894737
User 63125 does not improve AUC. Reverting changes.
Training on augumented user 83629 18/50 current_auc = 0.699013157894737
User 83629 AUC after training: 0.7006578947368421
User 83629 improves AUC. Keeping the model.
Training on augumented user 24214 19/50 current_auc = 0.7006578947368421
User 24214 AUC after training: 0.6990131578947368
User 24214 does not improve AUC. Reverting changes.
Training on augumented user 36785 20/50 current_auc = 0.7006578947368421
User 36785 AUC after training: 0.6973684210526316
User 36785 does not improve AUC. Reverting changes.
Training on augumented user 118975 21/50 current_auc = 0.7006578947368421
User 118975 AUC after training: 0.6990131578947368
User 118975 does not improve AUC. Reverting changes.
Training on augumented user 103616 22/50 current_auc = 0.7006578947368421
User 103616 AUC after training: 0.7006578947368421
User 103616 does not improve AUC. Reverting changes.
Training on augumented user 86181 23/50 current_auc = 0.7006578947368421
User 86181 AUC after training: 0.6990131578947368
User 86181 does not improve AUC. Reverting changes.
Training on augumented user 29761 24/50 current_auc = 0.7006578947368421
User 29761 AUC after training: 0.699013157894737
User 29761 does not improve AUC. Reverting changes.
Training on augumented user 108831 25/50 current_auc = 0.7006578947368421
User 108831 AUC after training: 0.699013157894737
User 108831 does not improve AUC. Reverting changes.
Training on augumented user 63314 26/50 current_auc = 0.7006578947368421
User 63314 AUC after training: 0.699013157894737
User 63314 does not improve AUC. Reverting changes.
Training on augumented user 47116 27/50 current_auc = 0.7006578947368421
User 47116 AUC after training: 0.6973684210526315
User 47116 does not improve AUC. Reverting changes.
Training on augumented user 105259 28/50 current_auc = 0.7006578947368421
User 105259 AUC after training: 0.6990131578947368
User 105259 does not improve AUC. Reverting changes.
Training on augumented user 45946 29/50 current_auc = 0.7006578947368421
User 45946 AUC after training: 0.699013157894737
User 45946 does not improve AUC. Reverting changes.
Training on augumented user 1973 30/50 current_auc = 0.7006578947368421
User 1973 AUC after training: 0.7023026315789473
User 1973 improves AUC. Keeping the model.
Training on augumented user 78610 31/50 current_auc = 0.7023026315789473
User 78610 AUC after training: 0.7023026315789473
User 78610 does not improve AUC. Reverting changes.
Training on augumented user 64004 32/50 current_auc = 0.7023026315789473
User 64004 AUC after training: 0.7006578947368421
User 64004 does not improve AUC. Reverting changes.
Training on augumented user 50991 33/50 current_auc = 0.7023026315789473
User 50991 AUC after training: 0.6973684210526316
User 50991 does not improve AUC. Reverting changes.
Training on augumented user 73078 34/50 current_auc = 0.7023026315789473
User 73078 AUC after training: 0.699013157894737
User 73078 does not improve AUC. Reverting changes.
Training on augumented user 60473 35/50 current_auc = 0.7023026315789473
User 60473 AUC after training: 0.6990131578947368
User 60473 does not improve AUC. Reverting changes.
Training on augumented user 1188 36/50 current_auc = 0.7023026315789473
User 1188 AUC after training: 0.6990131578947368
User 1188 does not improve AUC. Reverting changes.
Training on augumented user 118182 37/50 current_auc = 0.7023026315789473
User 118182 AUC after training: 0.699013157894737
User 118182 does not improve AUC. Reverting changes.
Training on augumented user 8927 38/50 current_auc = 0.7023026315789473
User 8927 AUC after training: 0.7006578947368421
User 8927 does not improve AUC. Reverting changes.
Training on augumented user 9932 39/50 current_auc = 0.7023026315789473
User 9932 AUC after training: 0.7006578947368421
User 9932 does not improve AUC. Reverting changes.
Training on augumented user 54680 40/50 current_auc = 0.7023026315789473
User 54680 AUC after training: 0.7023026315789473
User 54680 does not improve AUC. Reverting changes.
Training on augumented user 23328 41/50 current_auc = 0.7023026315789473
User 23328 AUC after training: 0.6990131578947368
User 23328 does not improve AUC. Reverting changes.
Training on augumented user 53967 42/50 current_auc = 0.7023026315789473
User 53967 AUC after training: 0.6990131578947368
User 53967 does not improve AUC. Reverting changes.
Training on augumented user 137963 43/50 current_auc = 0.7023026315789473
User 137963 AUC after training: 0.7006578947368421
User 137963 does not improve AUC. Reverting changes.
Training on augumented user 33487 44/50 current_auc = 0.7023026315789473
User 33487 AUC after training: 0.6990131578947368
User 33487 does not improve AUC. Reverting changes.
Training on augumented user 63450 45/50 current_auc = 0.7023026315789473
User 63450 AUC after training: 0.7006578947368421
User 63450 does not improve AUC. Reverting changes.
Training on augumented user 137033 46/50 current_auc = 0.7023026315789473
User 137033 AUC after training: 0.7023026315789473
User 137033 does not improve AUC. Reverting changes.
Training on augumented user 116416 47/50 current_auc = 0.7023026315789473
User 116416 AUC after training: 0.699013157894737
User 116416 does not improve AUC. Reverting changes.
Training on augumented user 132568 48/50 current_auc = 0.7023026315789473
User 132568 AUC after training: 0.6990131578947368
User 132568 does not improve AUC. Reverting changes.
Training on augumented user 95056 49/50 current_auc = 0.7023026315789473
User 95056 AUC after training: 0.699013157894737
User 95056 does not improve AUC. Reverting changes.
[2024-12-02 17:38:58.471083] start test user 56039 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:59.176523] start test user 56039 2/568 recall augumented users by random, augumented_users = [76220, 82024, 69520, 517, 33925, 42429, 764, 19793, 114774, 29468, 66737, 40821, 125106, 132747, 134652, 27110, 136117, 66765, 106079, 112665, 88680, 134041, 36057, 52326, 115582, 91337, 136378, 63289, 45383, 16965, 30586, 29429, 69828, 137285, 110461, 126275, 129129, 63667, 94856, 36389, 126641, 123596, 105372, 125751, 119131, 113811, 39098, 36191, 6349, 96887]
[2024-12-02 17:38:59.205593] user = 56039 Cloud 2/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:59.218610] user = 56039 Local 2/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:59.273865] user = 56039 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:02.319923] user = 56039 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 76220 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76220 AUC after training: 0.5
User 76220 does not improve AUC. Reverting changes.
Training on augumented user 82024 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82024 AUC after training: 0.5
User 82024 does not improve AUC. Reverting changes.
Training on augumented user 69520 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69520 AUC after training: 0.5
User 69520 does not improve AUC. Reverting changes.
Training on augumented user 517 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 517 AUC after training: 0.5
User 517 does not improve AUC. Reverting changes.
Training on augumented user 33925 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33925 AUC after training: 0.5
User 33925 does not improve AUC. Reverting changes.
Training on augumented user 42429 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42429 AUC after training: 0.5
User 42429 does not improve AUC. Reverting changes.
Training on augumented user 764 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 764 AUC after training: 0.5
User 764 does not improve AUC. Reverting changes.
Training on augumented user 19793 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19793 AUC after training: 0.5
User 19793 does not improve AUC. Reverting changes.
Training on augumented user 114774 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114774 AUC after training: 0.5
User 114774 does not improve AUC. Reverting changes.
Training on augumented user 29468 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29468 AUC after training: 0.5
User 29468 does not improve AUC. Reverting changes.
Training on augumented user 66737 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66737 AUC after training: 0.5
User 66737 does not improve AUC. Reverting changes.
Training on augumented user 40821 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40821 AUC after training: 0.5
User 40821 does not improve AUC. Reverting changes.
Training on augumented user 125106 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125106 AUC after training: 0.5
User 125106 does not improve AUC. Reverting changes.
Training on augumented user 132747 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132747 AUC after training: 0.5
User 132747 does not improve AUC. Reverting changes.
Training on augumented user 134652 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134652 AUC after training: 0.5
User 134652 does not improve AUC. Reverting changes.
Training on augumented user 27110 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27110 AUC after training: 0.5
User 27110 does not improve AUC. Reverting changes.
Training on augumented user 136117 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136117 AUC after training: 0.5
User 136117 does not improve AUC. Reverting changes.
Training on augumented user 66765 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66765 AUC after training: 0.5
User 66765 does not improve AUC. Reverting changes.
Training on augumented user 106079 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106079 AUC after training: 0.5
User 106079 does not improve AUC. Reverting changes.
Training on augumented user 112665 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112665 AUC after training: 0.5
User 112665 does not improve AUC. Reverting changes.
Training on augumented user 88680 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88680 AUC after training: 0.5
User 88680 does not improve AUC. Reverting changes.
Training on augumented user 134041 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134041 AUC after training: 0.5
User 134041 does not improve AUC. Reverting changes.
Training on augumented user 36057 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36057 AUC after training: 0.5
User 36057 does not improve AUC. Reverting changes.
Training on augumented user 52326 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52326 AUC after training: 0.5
User 52326 does not improve AUC. Reverting changes.
Training on augumented user 115582 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115582 AUC after training: 0.5
User 115582 does not improve AUC. Reverting changes.
Training on augumented user 91337 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91337 AUC after training: 0.5
User 91337 does not improve AUC. Reverting changes.
Training on augumented user 136378 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136378 AUC after training: 0.5
User 136378 does not improve AUC. Reverting changes.
Training on augumented user 63289 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63289 AUC after training: 0.5
User 63289 does not improve AUC. Reverting changes.
Training on augumented user 45383 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45383 AUC after training: 0.5
User 45383 does not improve AUC. Reverting changes.
Training on augumented user 16965 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16965 AUC after training: 0.5
User 16965 does not improve AUC. Reverting changes.
Training on augumented user 30586 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30586 AUC after training: 0.5
User 30586 does not improve AUC. Reverting changes.
Training on augumented user 29429 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29429 AUC after training: 0.5
User 29429 does not improve AUC. Reverting changes.
Training on augumented user 69828 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69828 AUC after training: 0.5
User 69828 does not improve AUC. Reverting changes.
Training on augumented user 137285 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137285 AUC after training: 0.5
User 137285 does not improve AUC. Reverting changes.
Training on augumented user 110461 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110461 AUC after training: 0.5
User 110461 does not improve AUC. Reverting changes.
Training on augumented user 126275 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126275 AUC after training: 0.5
User 126275 does not improve AUC. Reverting changes.
Training on augumented user 129129 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129129 AUC after training: 0.5
User 129129 does not improve AUC. Reverting changes.
Training on augumented user 63667 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63667 AUC after training: 0.5
User 63667 does not improve AUC. Reverting changes.
Training on augumented user 94856 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94856 AUC after training: 0.5
User 94856 does not improve AUC. Reverting changes.
Training on augumented user 36389 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36389 AUC after training: 0.5
User 36389 does not improve AUC. Reverting changes.
Training on augumented user 126641 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126641 AUC after training: 0.5
User 126641 does not improve AUC. Reverting changes.
Training on augumented user 123596 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123596 AUC after training: 0.5
User 123596 does not improve AUC. Reverting changes.
Training on augumented user 105372 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105372 AUC after training: 0.5
User 105372 does not improve AUC. Reverting changes.
Training on augumented user 125751 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125751 AUC after training: 0.5
User 125751 does not improve AUC. Reverting changes.
Training on augumented user 119131 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119131 AUC after training: 0.5
User 119131 does not improve AUC. Reverting changes.
Training on augumented user 113811 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113811 AUC after training: 0.5
User 113811 does not improve AUC. Reverting changes.
Training on augumented user 39098 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39098 AUC after training: 0.5
User 39098 does not improve AUC. Reverting changes.
Training on augumented user 36191 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36191 AUC after training: 0.5
User 36191 does not improve AUC. Reverting changes.
Training on augumented user 6349 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6349 AUC after training: 0.5
User 6349 does not improve AUC. Reverting changes.
Training on augumented user 96887 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96887 AUC after training: 0.5
User 96887 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:30.785467] start test user 56083 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:31.568842] start test user 56083 3/568 recall augumented users by random, augumented_users = [30116, 17072, 117372, 13010, 95586, 110542, 108535, 3806, 4110, 7938, 28699, 104766, 71953, 103436, 56608, 123467, 128073, 2654, 38650, 133573, 59658, 113595, 24038, 70946, 1248, 91602, 134353, 21786, 10238, 24585, 37074, 131925, 54245, 12542, 50978, 18856, 102495, 94824, 20955, 98821, 104358, 121123, 128762, 24006, 16565, 114552, 42700, 55758, 136971, 120984]
[2024-12-02 17:39:31.586988] user = 56083 Cloud 3/568
[2024-12-02 17:39:31.623201] user = 56083 Local 3/568
[2024-12-02 17:39:31.880254] user = 56083 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:34.143315] user = 56083 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 30116 0/50 current_auc = 0.75
User 30116 AUC after training: 0.75
User 30116 does not improve AUC. Reverting changes.
Training on augumented user 17072 1/50 current_auc = 0.75
User 17072 AUC after training: 0.75
User 17072 does not improve AUC. Reverting changes.
Training on augumented user 117372 2/50 current_auc = 0.75
User 117372 AUC after training: 0.75
User 117372 does not improve AUC. Reverting changes.
Training on augumented user 13010 3/50 current_auc = 0.75
User 13010 AUC after training: 0.75
User 13010 does not improve AUC. Reverting changes.
Training on augumented user 95586 4/50 current_auc = 0.75
User 95586 AUC after training: 0.75
User 95586 does not improve AUC. Reverting changes.
Training on augumented user 110542 5/50 current_auc = 0.75
User 110542 AUC after training: 0.75
User 110542 does not improve AUC. Reverting changes.
Training on augumented user 108535 6/50 current_auc = 0.75
User 108535 AUC after training: 0.75
User 108535 does not improve AUC. Reverting changes.
Training on augumented user 3806 7/50 current_auc = 0.75
User 3806 AUC after training: 0.75
User 3806 does not improve AUC. Reverting changes.
Training on augumented user 4110 8/50 current_auc = 0.75
User 4110 AUC after training: 0.75
User 4110 does not improve AUC. Reverting changes.
Training on augumented user 7938 9/50 current_auc = 0.75
User 7938 AUC after training: 0.75
User 7938 does not improve AUC. Reverting changes.
Training on augumented user 28699 10/50 current_auc = 0.75
User 28699 AUC after training: 0.75
User 28699 does not improve AUC. Reverting changes.
Training on augumented user 104766 11/50 current_auc = 0.75
User 104766 AUC after training: 0.75
User 104766 does not improve AUC. Reverting changes.
Training on augumented user 71953 12/50 current_auc = 0.75
User 71953 AUC after training: 0.75
User 71953 does not improve AUC. Reverting changes.
Training on augumented user 103436 13/50 current_auc = 0.75
User 103436 AUC after training: 0.75
User 103436 does not improve AUC. Reverting changes.
Training on augumented user 56608 14/50 current_auc = 0.75
User 56608 AUC after training: 0.75
User 56608 does not improve AUC. Reverting changes.
Training on augumented user 123467 15/50 current_auc = 0.75
User 123467 AUC after training: 0.75
User 123467 does not improve AUC. Reverting changes.
Training on augumented user 128073 16/50 current_auc = 0.75
User 128073 AUC after training: 0.75
User 128073 does not improve AUC. Reverting changes.
Training on augumented user 2654 17/50 current_auc = 0.75
User 2654 AUC after training: 0.75
User 2654 does not improve AUC. Reverting changes.
Training on augumented user 38650 18/50 current_auc = 0.75
User 38650 AUC after training: 0.75
User 38650 does not improve AUC. Reverting changes.
Training on augumented user 133573 19/50 current_auc = 0.75
User 133573 AUC after training: 0.75
User 133573 does not improve AUC. Reverting changes.
Training on augumented user 59658 20/50 current_auc = 0.75
User 59658 AUC after training: 0.75
User 59658 does not improve AUC. Reverting changes.
Training on augumented user 113595 21/50 current_auc = 0.75
User 113595 AUC after training: 0.75
User 113595 does not improve AUC. Reverting changes.
Training on augumented user 24038 22/50 current_auc = 0.75
User 24038 AUC after training: 0.75
User 24038 does not improve AUC. Reverting changes.
Training on augumented user 70946 23/50 current_auc = 0.75
User 70946 AUC after training: 0.75
User 70946 does not improve AUC. Reverting changes.
Training on augumented user 1248 24/50 current_auc = 0.75
User 1248 AUC after training: 0.75
User 1248 does not improve AUC. Reverting changes.
Training on augumented user 91602 25/50 current_auc = 0.75
User 91602 AUC after training: 0.75
User 91602 does not improve AUC. Reverting changes.
Training on augumented user 134353 26/50 current_auc = 0.75
User 134353 AUC after training: 0.75
User 134353 does not improve AUC. Reverting changes.
Training on augumented user 21786 27/50 current_auc = 0.75
User 21786 AUC after training: 0.75
User 21786 does not improve AUC. Reverting changes.
Training on augumented user 10238 28/50 current_auc = 0.75
User 10238 AUC after training: 0.75
User 10238 does not improve AUC. Reverting changes.
Training on augumented user 24585 29/50 current_auc = 0.75
User 24585 AUC after training: 0.75
User 24585 does not improve AUC. Reverting changes.
Training on augumented user 37074 30/50 current_auc = 0.75
User 37074 AUC after training: 0.75
User 37074 does not improve AUC. Reverting changes.
Training on augumented user 131925 31/50 current_auc = 0.75
User 131925 AUC after training: 0.75
User 131925 does not improve AUC. Reverting changes.
Training on augumented user 54245 32/50 current_auc = 0.75
User 54245 AUC after training: 0.75
User 54245 does not improve AUC. Reverting changes.
Training on augumented user 12542 33/50 current_auc = 0.75
User 12542 AUC after training: 0.75
User 12542 does not improve AUC. Reverting changes.
Training on augumented user 50978 34/50 current_auc = 0.75
User 50978 AUC after training: 0.75
User 50978 does not improve AUC. Reverting changes.
Training on augumented user 18856 35/50 current_auc = 0.75
User 18856 AUC after training: 0.75
User 18856 does not improve AUC. Reverting changes.
Training on augumented user 102495 36/50 current_auc = 0.75
User 102495 AUC after training: 0.75
User 102495 does not improve AUC. Reverting changes.
Training on augumented user 94824 37/50 current_auc = 0.75
User 94824 AUC after training: 0.75
User 94824 does not improve AUC. Reverting changes.
Training on augumented user 20955 38/50 current_auc = 0.75
User 20955 AUC after training: 0.75
User 20955 does not improve AUC. Reverting changes.
Training on augumented user 98821 39/50 current_auc = 0.75
User 98821 AUC after training: 0.75
User 98821 does not improve AUC. Reverting changes.
Training on augumented user 104358 40/50 current_auc = 0.75
User 104358 AUC after training: 0.75
User 104358 does not improve AUC. Reverting changes.
Training on augumented user 121123 41/50 current_auc = 0.75
User 121123 AUC after training: 0.75
User 121123 does not improve AUC. Reverting changes.
Training on augumented user 128762 42/50 current_auc = 0.75
User 128762 AUC after training: 0.75
User 128762 does not improve AUC. Reverting changes.
Training on augumented user 24006 43/50 current_auc = 0.75
User 24006 AUC after training: 0.75
User 24006 does not improve AUC. Reverting changes.
Training on augumented user 16565 44/50 current_auc = 0.75
User 16565 AUC after training: 0.75
User 16565 does not improve AUC. Reverting changes.
Training on augumented user 114552 45/50 current_auc = 0.75
User 114552 AUC after training: 0.75
User 114552 does not improve AUC. Reverting changes.
Training on augumented user 42700 46/50 current_auc = 0.75
User 42700 AUC after training: 0.75
User 42700 does not improve AUC. Reverting changes.
Training on augumented user 55758 47/50 current_auc = 0.75
User 55758 AUC after training: 0.75
User 55758 does not improve AUC. Reverting changes.
Training on augumented user 136971 48/50 current_auc = 0.75
User 136971 AUC after training: 0.75
User 136971 does not improve AUC. Reverting changes.
Training on augumented user 120984 49/50 current_auc = 0.75
User 120984 AUC after training: 0.75
User 120984 does not improve AUC. Reverting changes.
[2024-12-02 17:40:03.093613] start test user 56149 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:03.902798] start test user 56149 4/568 recall augumented users by random, augumented_users = [57126, 127100, 64099, 70115, 53111, 31886, 117846, 123003, 24996, 121141, 57524, 102167, 62158, 24420, 99157, 21290, 102590, 70687, 71216, 119582, 73413, 48550, 62991, 76458, 109861, 113032, 13344, 88117, 81937, 24585, 75304, 82871, 132926, 72983, 89380, 30407, 61598, 73846, 92648, 20268, 30330, 11208, 95895, 26540, 31466, 50166, 61095, 134145, 105879, 82154]
[2024-12-02 17:40:03.918415] user = 56149 Cloud 4/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:40:03.925792] user = 56149 Local 4/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:40:03.952599] user = 56149 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:40:06.757610] user = 56149 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 57126 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57126 AUC after training: 0.5
User 57126 does not improve AUC. Reverting changes.
Training on augumented user 127100 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127100 AUC after training: 0.5
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 64099 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64099 AUC after training: 0.5
User 64099 does not improve AUC. Reverting changes.
Training on augumented user 70115 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70115 AUC after training: 0.5
User 70115 does not improve AUC. Reverting changes.
Training on augumented user 53111 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53111 AUC after training: 0.5
User 53111 does not improve AUC. Reverting changes.
Training on augumented user 31886 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31886 AUC after training: 0.5
User 31886 does not improve AUC. Reverting changes.
Training on augumented user 117846 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117846 AUC after training: 0.5
User 117846 does not improve AUC. Reverting changes.
Training on augumented user 123003 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123003 AUC after training: 0.5
User 123003 does not improve AUC. Reverting changes.
Training on augumented user 24996 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24996 AUC after training: 0.5
User 24996 does not improve AUC. Reverting changes.
Training on augumented user 121141 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121141 AUC after training: 0.5
User 121141 does not improve AUC. Reverting changes.
Training on augumented user 57524 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57524 AUC after training: 0.5
User 57524 does not improve AUC. Reverting changes.
Training on augumented user 102167 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102167 AUC after training: 0.5
User 102167 does not improve AUC. Reverting changes.
Training on augumented user 62158 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62158 AUC after training: 0.5
User 62158 does not improve AUC. Reverting changes.
Training on augumented user 24420 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24420 AUC after training: 0.5
User 24420 does not improve AUC. Reverting changes.
Training on augumented user 99157 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99157 AUC after training: 0.5
User 99157 does not improve AUC. Reverting changes.
Training on augumented user 21290 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21290 AUC after training: 0.5
User 21290 does not improve AUC. Reverting changes.
Training on augumented user 102590 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102590 AUC after training: 0.5
User 102590 does not improve AUC. Reverting changes.
Training on augumented user 70687 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70687 AUC after training: 0.5
User 70687 does not improve AUC. Reverting changes.
Training on augumented user 71216 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71216 AUC after training: 0.5
User 71216 does not improve AUC. Reverting changes.
Training on augumented user 119582 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119582 AUC after training: 0.5
User 119582 does not improve AUC. Reverting changes.
Training on augumented user 73413 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73413 AUC after training: 0.5
User 73413 does not improve AUC. Reverting changes.
Training on augumented user 48550 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48550 AUC after training: 0.5
User 48550 does not improve AUC. Reverting changes.
Training on augumented user 62991 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62991 AUC after training: 0.5
User 62991 does not improve AUC. Reverting changes.
Training on augumented user 76458 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76458 AUC after training: 0.5
User 76458 does not improve AUC. Reverting changes.
Training on augumented user 109861 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109861 AUC after training: 0.5
User 109861 does not improve AUC. Reverting changes.
Training on augumented user 113032 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113032 AUC after training: 0.5
User 113032 does not improve AUC. Reverting changes.
Training on augumented user 13344 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13344 AUC after training: 0.5
User 13344 does not improve AUC. Reverting changes.
Training on augumented user 88117 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88117 AUC after training: 0.5
User 88117 does not improve AUC. Reverting changes.
Training on augumented user 81937 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81937 AUC after training: 0.5
User 81937 does not improve AUC. Reverting changes.
Training on augumented user 24585 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24585 AUC after training: 0.5
User 24585 does not improve AUC. Reverting changes.
Training on augumented user 75304 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75304 AUC after training: 0.5
User 75304 does not improve AUC. Reverting changes.
Training on augumented user 82871 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82871 AUC after training: 0.5
User 82871 does not improve AUC. Reverting changes.
Training on augumented user 132926 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132926 AUC after training: 0.5
User 132926 does not improve AUC. Reverting changes.
Training on augumented user 72983 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72983 AUC after training: 0.5
User 72983 does not improve AUC. Reverting changes.
Training on augumented user 89380 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89380 AUC after training: 0.5
User 89380 does not improve AUC. Reverting changes.
Training on augumented user 30407 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30407 AUC after training: 0.5
User 30407 does not improve AUC. Reverting changes.
Training on augumented user 61598 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61598 AUC after training: 0.5
User 61598 does not improve AUC. Reverting changes.
Training on augumented user 73846 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73846 AUC after training: 0.5
User 73846 does not improve AUC. Reverting changes.
Training on augumented user 92648 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92648 AUC after training: 0.5
User 92648 does not improve AUC. Reverting changes.
Training on augumented user 20268 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20268 AUC after training: 0.5
User 20268 does not improve AUC. Reverting changes.
Training on augumented user 30330 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30330 AUC after training: 0.5
User 30330 does not improve AUC. Reverting changes.
Training on augumented user 11208 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11208 AUC after training: 0.5
User 11208 does not improve AUC. Reverting changes.
Training on augumented user 95895 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95895 AUC after training: 0.5
User 95895 does not improve AUC. Reverting changes.
Training on augumented user 26540 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26540 AUC after training: 0.5
User 26540 does not improve AUC. Reverting changes.
Training on augumented user 31466 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31466 AUC after training: 0.5
User 31466 does not improve AUC. Reverting changes.
Training on augumented user 50166 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50166 AUC after training: 0.5
User 50166 does not improve AUC. Reverting changes.
Training on augumented user 61095 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61095 AUC after training: 0.5
User 61095 does not improve AUC. Reverting changes.
Training on augumented user 134145 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134145 AUC after training: 0.5
User 134145 does not improve AUC. Reverting changes.
Training on augumented user 105879 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105879 AUC after training: 0.5
User 105879 does not improve AUC. Reverting changes.
Training on augumented user 82154 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82154 AUC after training: 0.5
User 82154 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:40:34.551950] start test user 56167 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:34.981869] start test user 56167 5/568 recall augumented users by random, augumented_users = [57729, 43137, 95933, 73497, 85882, 122252, 73176, 32814, 83490, 34441, 102904, 5879, 3825, 10836, 75541, 106039, 54640, 40901, 93281, 68835, 19749, 48530, 73357, 117769, 125009, 8023, 95725, 20969, 104146, 15029, 128780, 88728, 104712, 102293, 101913, 93333, 54188, 99800, 96426, 95811, 84062, 50218, 69230, 136448, 117833, 23353, 39941, 114641, 70586, 136757]
[2024-12-02 17:40:34.997998] user = 56167 Cloud 5/568
[2024-12-02 17:40:35.061406] user = 56167 Local 5/568
[2024-12-02 17:40:35.138630] user = 56167 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:37.355963] user = 56167 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5689029595902105
Training on augumented user 57729 0/50 current_auc = 0.5689029595902105
User 57729 AUC after training: 0.5693298235628913
User 57729 improves AUC. Keeping the model.
Training on augumented user 43137 1/50 current_auc = 0.5693298235628913
User 43137 AUC after training: 0.5691519635742743
User 43137 does not improve AUC. Reverting changes.
Training on augumented user 95933 2/50 current_auc = 0.5693298235628913
User 95933 AUC after training: 0.5685828116107001
User 95933 does not improve AUC. Reverting changes.
Training on augumented user 73497 3/50 current_auc = 0.5693298235628913
User 73497 AUC after training: 0.5689385315879341
User 73497 does not improve AUC. Reverting changes.
Training on augumented user 85882 4/50 current_auc = 0.5693298235628913
User 85882 AUC after training: 0.5696499715424018
User 85882 improves AUC. Keeping the model.
Training on augumented user 122252 5/50 current_auc = 0.5696499715424018
User 122252 AUC after training: 0.5691163915765509
User 122252 does not improve AUC. Reverting changes.
Training on augumented user 73176 6/50 current_auc = 0.5696499715424018
User 73176 AUC after training: 0.5699345475241889
User 73176 improves AUC. Keeping the model.
Training on augumented user 32814 7/50 current_auc = 0.5699345475241889
User 32814 AUC after training: 0.5694721115537849
User 32814 does not improve AUC. Reverting changes.
Training on augumented user 83490 8/50 current_auc = 0.5699345475241889
User 83490 AUC after training: 0.5692586795674445
User 83490 does not improve AUC. Reverting changes.
Training on augumented user 34441 9/50 current_auc = 0.5699345475241889
User 34441 AUC after training: 0.5694365395560615
User 34441 does not improve AUC. Reverting changes.
Training on augumented user 102904 10/50 current_auc = 0.5699345475241889
User 102904 AUC after training: 0.5697922595332954
User 102904 does not improve AUC. Reverting changes.
Training on augumented user 5879 11/50 current_auc = 0.5699345475241889
User 5879 AUC after training: 0.5696855435401252
User 5879 does not improve AUC. Reverting changes.
Training on augumented user 3825 12/50 current_auc = 0.5699345475241889
User 3825 AUC after training: 0.5700056915196358
User 3825 improves AUC. Keeping the model.
Training on augumented user 10836 13/50 current_auc = 0.5700056915196358
User 10836 AUC after training: 0.5696499715424017
User 10836 does not improve AUC. Reverting changes.
Training on augumented user 75541 14/50 current_auc = 0.5700056915196358
User 75541 AUC after training: 0.5693298235628913
User 75541 does not improve AUC. Reverting changes.
Training on augumented user 106039 15/50 current_auc = 0.5700056915196358
User 106039 AUC after training: 0.5699345475241889
User 106039 does not improve AUC. Reverting changes.
Training on augumented user 54640 16/50 current_auc = 0.5700056915196358
User 54640 AUC after training: 0.5698634035287422
User 54640 does not improve AUC. Reverting changes.
Training on augumented user 40901 17/50 current_auc = 0.5700056915196358
User 40901 AUC after training: 0.570219123505976
User 40901 improves AUC. Keeping the model.
Training on augumented user 93281 18/50 current_auc = 0.570219123505976
User 93281 AUC after training: 0.5710728514513375
User 93281 improves AUC. Keeping the model.
Training on augumented user 68835 19/50 current_auc = 0.5710728514513375
User 68835 AUC after training: 0.5696855435401251
User 68835 does not improve AUC. Reverting changes.
Training on augumented user 19749 20/50 current_auc = 0.5710728514513375
User 19749 AUC after training: 0.5708238474672738
User 19749 does not improve AUC. Reverting changes.
Training on augumented user 48530 21/50 current_auc = 0.5710728514513375
User 48530 AUC after training: 0.5715708594194651
User 48530 improves AUC. Keeping the model.
Training on augumented user 73357 22/50 current_auc = 0.5715708594194651
User 73357 AUC after training: 0.5712862834376778
User 73357 does not improve AUC. Reverting changes.
Training on augumented user 117769 23/50 current_auc = 0.5715708594194651
User 117769 AUC after training: 0.57057484348321
User 117769 does not improve AUC. Reverting changes.
Training on augumented user 125009 24/50 current_auc = 0.5715708594194651
User 125009 AUC after training: 0.571392999430848
User 125009 does not improve AUC. Reverting changes.
Training on augumented user 8023 25/50 current_auc = 0.5715708594194651
User 8023 AUC after training: 0.5721755833807627
User 8023 improves AUC. Keeping the model.
Training on augumented user 95725 26/50 current_auc = 0.5721755833807627
User 95725 AUC after training: 0.5718554354012522
User 95725 does not improve AUC. Reverting changes.
Training on augumented user 20969 27/50 current_auc = 0.5721755833807627
User 20969 AUC after training: 0.5711795674445077
User 20969 does not improve AUC. Reverting changes.
Training on augumented user 104146 28/50 current_auc = 0.5721755833807627
User 104146 AUC after training: 0.5723178713716562
User 104146 improves AUC. Keeping the model.
Training on augumented user 15029 29/50 current_auc = 0.5723178713716562
User 15029 AUC after training: 0.5718910073989756
User 15029 does not improve AUC. Reverting changes.
Training on augumented user 128780 30/50 current_auc = 0.5723178713716562
User 128780 AUC after training: 0.5720332953898691
User 128780 does not improve AUC. Reverting changes.
Training on augumented user 88728 31/50 current_auc = 0.5723178713716562
User 88728 AUC after training: 0.5719621513944223
User 88728 does not improve AUC. Reverting changes.
Training on augumented user 104712 32/50 current_auc = 0.5723178713716562
User 104712 AUC after training: 0.5719621513944224
User 104712 does not improve AUC. Reverting changes.
Training on augumented user 102293 33/50 current_auc = 0.5723178713716562
User 102293 AUC after training: 0.572922595332954
User 102293 improves AUC. Keeping the model.
Training on augumented user 101913 34/50 current_auc = 0.572922595332954
User 101913 AUC after training: 0.5722467273762094
User 101913 does not improve AUC. Reverting changes.
Training on augumented user 93333 35/50 current_auc = 0.572922595332954
User 93333 AUC after training: 0.573029311326124
User 93333 improves AUC. Keeping the model.
Training on augumented user 54188 36/50 current_auc = 0.573029311326124
User 54188 AUC after training: 0.5743810472396129
User 54188 improves AUC. Keeping the model.
Training on augumented user 99800 37/50 current_auc = 0.5743810472396129
User 99800 AUC after training: 0.5745944792259534
User 99800 improves AUC. Keeping the model.
Training on augumented user 96426 38/50 current_auc = 0.5745944792259534
User 96426 AUC after training: 0.575021343198634
User 96426 improves AUC. Keeping the model.
Training on augumented user 95811 39/50 current_auc = 0.575021343198634
User 95811 AUC after training: 0.5746300512236768
User 95811 does not improve AUC. Reverting changes.
Training on augumented user 84062 40/50 current_auc = 0.575021343198634
User 84062 AUC after training: 0.5754837791690381
User 84062 improves AUC. Keeping the model.
Training on augumented user 50218 41/50 current_auc = 0.5754837791690381
User 50218 AUC after training: 0.5753059191804213
User 50218 does not improve AUC. Reverting changes.
Training on augumented user 69230 42/50 current_auc = 0.5754837791690381
User 69230 AUC after training: 0.5753059191804212
User 69230 does not improve AUC. Reverting changes.
Training on augumented user 136448 43/50 current_auc = 0.5754837791690381
User 136448 AUC after training: 0.5754482071713148
User 136448 does not improve AUC. Reverting changes.
Training on augumented user 117833 44/50 current_auc = 0.5754837791690381
User 117833 AUC after training: 0.5756260671599316
User 117833 improves AUC. Keeping the model.
Training on augumented user 23353 45/50 current_auc = 0.5756260671599316
User 23353 AUC after training: 0.576373079112123
User 23353 improves AUC. Keeping the model.
Training on augumented user 39941 46/50 current_auc = 0.576373079112123
User 39941 AUC after training: 0.5760529311326125
User 39941 does not improve AUC. Reverting changes.
Training on augumented user 114641 47/50 current_auc = 0.576373079112123
User 114641 AUC after training: 0.5764442231075697
User 114641 improves AUC. Keeping the model.
Training on augumented user 70586 48/50 current_auc = 0.5764442231075697
User 70586 AUC after training: 0.5760529311326125
User 70586 does not improve AUC. Reverting changes.
Training on augumented user 136757 49/50 current_auc = 0.5764442231075697
User 136757 AUC after training: 0.5766576550939101
User 136757 improves AUC. Keeping the model.
[2024-12-02 17:41:07.393247] start test user 56182 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:07.972636] start test user 56182 6/568 recall augumented users by random, augumented_users = [41575, 72963, 71337, 93403, 116718, 17393, 20267, 123581, 57758, 65199, 20622, 115583, 89848, 124232, 128801, 62251, 15481, 63900, 17293, 78035, 132, 137684, 87040, 116167, 52992, 15883, 66655, 24064, 35407, 107021, 8648, 37453, 56282, 13869, 35318, 113752, 25572, 65741, 21627, 23556, 135418, 4649, 48621, 91470, 78055, 137646, 49795, 56058, 2466, 10566]
[2024-12-02 17:41:07.994475] user = 56182 Cloud 6/568
[2024-12-02 17:41:08.004965] user = 56182 Local 6/568
[2024-12-02 17:41:08.040408] user = 56182 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:10.366866] user = 56182 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3928571428571429
Training on augumented user 41575 0/50 current_auc = 0.3928571428571429
User 41575 AUC after training: 0.3928571428571429
User 41575 does not improve AUC. Reverting changes.
Training on augumented user 72963 1/50 current_auc = 0.3928571428571429
User 72963 AUC after training: 0.3928571428571429
User 72963 does not improve AUC. Reverting changes.
Training on augumented user 71337 2/50 current_auc = 0.3928571428571429
User 71337 AUC after training: 0.3928571428571429
User 71337 does not improve AUC. Reverting changes.
Training on augumented user 93403 3/50 current_auc = 0.3928571428571429
User 93403 AUC after training: 0.3928571428571429
User 93403 does not improve AUC. Reverting changes.
Training on augumented user 116718 4/50 current_auc = 0.3928571428571429
User 116718 AUC after training: 0.3928571428571429
User 116718 does not improve AUC. Reverting changes.
Training on augumented user 17393 5/50 current_auc = 0.3928571428571429
User 17393 AUC after training: 0.3928571428571429
User 17393 does not improve AUC. Reverting changes.
Training on augumented user 20267 6/50 current_auc = 0.3928571428571429
User 20267 AUC after training: 0.3928571428571429
User 20267 does not improve AUC. Reverting changes.
Training on augumented user 123581 7/50 current_auc = 0.3928571428571429
User 123581 AUC after training: 0.3928571428571429
User 123581 does not improve AUC. Reverting changes.
Training on augumented user 57758 8/50 current_auc = 0.3928571428571429
User 57758 AUC after training: 0.3928571428571429
User 57758 does not improve AUC. Reverting changes.
Training on augumented user 65199 9/50 current_auc = 0.3928571428571429
User 65199 AUC after training: 0.3928571428571429
User 65199 does not improve AUC. Reverting changes.
Training on augumented user 20622 10/50 current_auc = 0.3928571428571429
User 20622 AUC after training: 0.3928571428571429
User 20622 does not improve AUC. Reverting changes.
Training on augumented user 115583 11/50 current_auc = 0.3928571428571429
User 115583 AUC after training: 0.3928571428571429
User 115583 does not improve AUC. Reverting changes.
Training on augumented user 89848 12/50 current_auc = 0.3928571428571429
User 89848 AUC after training: 0.35714285714285715
User 89848 does not improve AUC. Reverting changes.
Training on augumented user 124232 13/50 current_auc = 0.3928571428571429
User 124232 AUC after training: 0.3928571428571429
User 124232 does not improve AUC. Reverting changes.
Training on augumented user 128801 14/50 current_auc = 0.3928571428571429
User 128801 AUC after training: 0.3928571428571429
User 128801 does not improve AUC. Reverting changes.
Training on augumented user 62251 15/50 current_auc = 0.3928571428571429
User 62251 AUC after training: 0.3928571428571429
User 62251 does not improve AUC. Reverting changes.
Training on augumented user 15481 16/50 current_auc = 0.3928571428571429
User 15481 AUC after training: 0.3928571428571429
User 15481 does not improve AUC. Reverting changes.
Training on augumented user 63900 17/50 current_auc = 0.3928571428571429
User 63900 AUC after training: 0.3928571428571429
User 63900 does not improve AUC. Reverting changes.
Training on augumented user 17293 18/50 current_auc = 0.3928571428571429
User 17293 AUC after training: 0.3928571428571429
User 17293 does not improve AUC. Reverting changes.
Training on augumented user 78035 19/50 current_auc = 0.3928571428571429
User 78035 AUC after training: 0.35714285714285715
User 78035 does not improve AUC. Reverting changes.
Training on augumented user 132 20/50 current_auc = 0.3928571428571429
User 132 AUC after training: 0.3928571428571429
User 132 does not improve AUC. Reverting changes.
Training on augumented user 137684 21/50 current_auc = 0.3928571428571429
User 137684 AUC after training: 0.3928571428571429
User 137684 does not improve AUC. Reverting changes.
Training on augumented user 87040 22/50 current_auc = 0.3928571428571429
User 87040 AUC after training: 0.3928571428571429
User 87040 does not improve AUC. Reverting changes.
Training on augumented user 116167 23/50 current_auc = 0.3928571428571429
User 116167 AUC after training: 0.3928571428571429
User 116167 does not improve AUC. Reverting changes.
Training on augumented user 52992 24/50 current_auc = 0.3928571428571429
User 52992 AUC after training: 0.3928571428571429
User 52992 does not improve AUC. Reverting changes.
Training on augumented user 15883 25/50 current_auc = 0.3928571428571429
User 15883 AUC after training: 0.3928571428571429
User 15883 does not improve AUC. Reverting changes.
Training on augumented user 66655 26/50 current_auc = 0.3928571428571429
User 66655 AUC after training: 0.3928571428571429
User 66655 does not improve AUC. Reverting changes.
Training on augumented user 24064 27/50 current_auc = 0.3928571428571429
User 24064 AUC after training: 0.3928571428571429
User 24064 does not improve AUC. Reverting changes.
Training on augumented user 35407 28/50 current_auc = 0.3928571428571429
User 35407 AUC after training: 0.3928571428571429
User 35407 does not improve AUC. Reverting changes.
Training on augumented user 107021 29/50 current_auc = 0.3928571428571429
User 107021 AUC after training: 0.3928571428571429
User 107021 does not improve AUC. Reverting changes.
Training on augumented user 8648 30/50 current_auc = 0.3928571428571429
User 8648 AUC after training: 0.3928571428571429
User 8648 does not improve AUC. Reverting changes.
Training on augumented user 37453 31/50 current_auc = 0.3928571428571429
User 37453 AUC after training: 0.3928571428571429
User 37453 does not improve AUC. Reverting changes.
Training on augumented user 56282 32/50 current_auc = 0.3928571428571429
User 56282 AUC after training: 0.3928571428571429
User 56282 does not improve AUC. Reverting changes.
Training on augumented user 13869 33/50 current_auc = 0.3928571428571429
User 13869 AUC after training: 0.3928571428571429
User 13869 does not improve AUC. Reverting changes.
Training on augumented user 35318 34/50 current_auc = 0.3928571428571429
User 35318 AUC after training: 0.3928571428571429
User 35318 does not improve AUC. Reverting changes.
Training on augumented user 113752 35/50 current_auc = 0.3928571428571429
User 113752 AUC after training: 0.3928571428571429
User 113752 does not improve AUC. Reverting changes.
Training on augumented user 25572 36/50 current_auc = 0.3928571428571429
User 25572 AUC after training: 0.3928571428571429
User 25572 does not improve AUC. Reverting changes.
Training on augumented user 65741 37/50 current_auc = 0.3928571428571429
User 65741 AUC after training: 0.3928571428571429
User 65741 does not improve AUC. Reverting changes.
Training on augumented user 21627 38/50 current_auc = 0.3928571428571429
User 21627 AUC after training: 0.35714285714285715
User 21627 does not improve AUC. Reverting changes.
Training on augumented user 23556 39/50 current_auc = 0.3928571428571429
User 23556 AUC after training: 0.3928571428571429
User 23556 does not improve AUC. Reverting changes.
Training on augumented user 135418 40/50 current_auc = 0.3928571428571429
User 135418 AUC after training: 0.3928571428571429
User 135418 does not improve AUC. Reverting changes.
Training on augumented user 4649 41/50 current_auc = 0.3928571428571429
User 4649 AUC after training: 0.3928571428571429
User 4649 does not improve AUC. Reverting changes.
Training on augumented user 48621 42/50 current_auc = 0.3928571428571429
User 48621 AUC after training: 0.3928571428571429
User 48621 does not improve AUC. Reverting changes.
Training on augumented user 91470 43/50 current_auc = 0.3928571428571429
User 91470 AUC after training: 0.3928571428571429
User 91470 does not improve AUC. Reverting changes.
Training on augumented user 78055 44/50 current_auc = 0.3928571428571429
User 78055 AUC after training: 0.35714285714285715
User 78055 does not improve AUC. Reverting changes.
Training on augumented user 137646 45/50 current_auc = 0.3928571428571429
User 137646 AUC after training: 0.3928571428571429
User 137646 does not improve AUC. Reverting changes.
Training on augumented user 49795 46/50 current_auc = 0.3928571428571429
User 49795 AUC after training: 0.3928571428571429
User 49795 does not improve AUC. Reverting changes.
Training on augumented user 56058 47/50 current_auc = 0.3928571428571429
User 56058 AUC after training: 0.3928571428571429
User 56058 does not improve AUC. Reverting changes.
Training on augumented user 2466 48/50 current_auc = 0.3928571428571429
User 2466 AUC after training: 0.3928571428571429
User 2466 does not improve AUC. Reverting changes.
Training on augumented user 10566 49/50 current_auc = 0.3928571428571429
User 10566 AUC after training: 0.3928571428571429
User 10566 does not improve AUC. Reverting changes.
[2024-12-02 17:41:42.410626] start test user 56218 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:42.820362] start test user 56218 7/568 recall augumented users by random, augumented_users = [67768, 86006, 112114, 135096, 72633, 37687, 44849, 137559, 73597, 97481, 49475, 83751, 93211, 137562, 41548, 122667, 26546, 29298, 135971, 19701, 93808, 114939, 128097, 46193, 23892, 12946, 77372, 111352, 122512, 130144, 75394, 34567, 94344, 121168, 14218, 72628, 56764, 49159, 97188, 100860, 132284, 27271, 14243, 116460, 136012, 25072, 7106, 123846, 9084, 51888]
[2024-12-02 17:41:42.836650] user = 56218 Cloud 7/568
[2024-12-02 17:41:42.862850] user = 56218 Local 7/568
[2024-12-02 17:41:43.095141] user = 56218 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:45.502873] user = 56218 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7027777777777778
Training on augumented user 67768 0/50 current_auc = 0.7027777777777778
User 67768 AUC after training: 0.7023148148148148
User 67768 does not improve AUC. Reverting changes.
Training on augumented user 86006 1/50 current_auc = 0.7027777777777778
User 86006 AUC after training: 0.7023148148148148
User 86006 does not improve AUC. Reverting changes.
Training on augumented user 112114 2/50 current_auc = 0.7027777777777778
User 112114 AUC after training: 0.7032407407407407
User 112114 improves AUC. Keeping the model.
Training on augumented user 135096 3/50 current_auc = 0.7032407407407407
User 135096 AUC after training: 0.7027777777777778
User 135096 does not improve AUC. Reverting changes.
Training on augumented user 72633 4/50 current_auc = 0.7032407407407407
User 72633 AUC after training: 0.7027777777777778
User 72633 does not improve AUC. Reverting changes.
Training on augumented user 37687 5/50 current_auc = 0.7032407407407407
User 37687 AUC after training: 0.7027777777777777
User 37687 does not improve AUC. Reverting changes.
Training on augumented user 44849 6/50 current_auc = 0.7032407407407407
User 44849 AUC after training: 0.7037037037037037
User 44849 improves AUC. Keeping the model.
Training on augumented user 137559 7/50 current_auc = 0.7037037037037037
User 137559 AUC after training: 0.7032407407407407
User 137559 does not improve AUC. Reverting changes.
Training on augumented user 73597 8/50 current_auc = 0.7037037037037037
User 73597 AUC after training: 0.7032407407407407
User 73597 does not improve AUC. Reverting changes.
Training on augumented user 97481 9/50 current_auc = 0.7037037037037037
User 97481 AUC after training: 0.7032407407407407
User 97481 does not improve AUC. Reverting changes.
Training on augumented user 49475 10/50 current_auc = 0.7037037037037037
User 49475 AUC after training: 0.7046296296296296
User 49475 improves AUC. Keeping the model.
Training on augumented user 83751 11/50 current_auc = 0.7046296296296296
User 83751 AUC after training: 0.7041666666666667
User 83751 does not improve AUC. Reverting changes.
Training on augumented user 93211 12/50 current_auc = 0.7046296296296296
User 93211 AUC after training: 0.7041666666666666
User 93211 does not improve AUC. Reverting changes.
Training on augumented user 137562 13/50 current_auc = 0.7046296296296296
User 137562 AUC after training: 0.7037037037037037
User 137562 does not improve AUC. Reverting changes.
Training on augumented user 41548 14/50 current_auc = 0.7046296296296296
User 41548 AUC after training: 0.7041666666666666
User 41548 does not improve AUC. Reverting changes.
Training on augumented user 122667 15/50 current_auc = 0.7046296296296296
User 122667 AUC after training: 0.7041666666666666
User 122667 does not improve AUC. Reverting changes.
Training on augumented user 26546 16/50 current_auc = 0.7046296296296296
User 26546 AUC after training: 0.7046296296296296
User 26546 does not improve AUC. Reverting changes.
Training on augumented user 29298 17/50 current_auc = 0.7046296296296296
User 29298 AUC after training: 0.7037037037037037
User 29298 does not improve AUC. Reverting changes.
Training on augumented user 135971 18/50 current_auc = 0.7046296296296296
User 135971 AUC after training: 0.7050925925925926
User 135971 improves AUC. Keeping the model.
Training on augumented user 19701 19/50 current_auc = 0.7050925925925926
User 19701 AUC after training: 0.7037037037037037
User 19701 does not improve AUC. Reverting changes.
Training on augumented user 93808 20/50 current_auc = 0.7050925925925926
User 93808 AUC after training: 0.7050925925925926
User 93808 does not improve AUC. Reverting changes.
Training on augumented user 114939 21/50 current_auc = 0.7050925925925926
User 114939 AUC after training: 0.7041666666666666
User 114939 does not improve AUC. Reverting changes.
Training on augumented user 128097 22/50 current_auc = 0.7050925925925926
User 128097 AUC after training: 0.7041666666666667
User 128097 does not improve AUC. Reverting changes.
Training on augumented user 46193 23/50 current_auc = 0.7050925925925926
User 46193 AUC after training: 0.7046296296296297
User 46193 does not improve AUC. Reverting changes.
Training on augumented user 23892 24/50 current_auc = 0.7050925925925926
User 23892 AUC after training: 0.7041666666666666
User 23892 does not improve AUC. Reverting changes.
Training on augumented user 12946 25/50 current_auc = 0.7050925925925926
User 12946 AUC after training: 0.7037037037037037
User 12946 does not improve AUC. Reverting changes.
Training on augumented user 77372 26/50 current_auc = 0.7050925925925926
User 77372 AUC after training: 0.7046296296296296
User 77372 does not improve AUC. Reverting changes.
Training on augumented user 111352 27/50 current_auc = 0.7050925925925926
User 111352 AUC after training: 0.7046296296296296
User 111352 does not improve AUC. Reverting changes.
Training on augumented user 122512 28/50 current_auc = 0.7050925925925926
User 122512 AUC after training: 0.7055555555555555
User 122512 improves AUC. Keeping the model.
Training on augumented user 130144 29/50 current_auc = 0.7055555555555555
User 130144 AUC after training: 0.7050925925925926
User 130144 does not improve AUC. Reverting changes.
Training on augumented user 75394 30/50 current_auc = 0.7055555555555555
User 75394 AUC after training: 0.7050925925925926
User 75394 does not improve AUC. Reverting changes.
Training on augumented user 34567 31/50 current_auc = 0.7055555555555555
User 34567 AUC after training: 0.7046296296296297
User 34567 does not improve AUC. Reverting changes.
Training on augumented user 94344 32/50 current_auc = 0.7055555555555555
User 94344 AUC after training: 0.7041666666666666
User 94344 does not improve AUC. Reverting changes.
Training on augumented user 121168 33/50 current_auc = 0.7055555555555555
User 121168 AUC after training: 0.7050925925925926
User 121168 does not improve AUC. Reverting changes.
Training on augumented user 14218 34/50 current_auc = 0.7055555555555555
User 14218 AUC after training: 0.7050925925925926
User 14218 does not improve AUC. Reverting changes.
Training on augumented user 72628 35/50 current_auc = 0.7055555555555555
User 72628 AUC after training: 0.7055555555555555
User 72628 does not improve AUC. Reverting changes.
Training on augumented user 56764 36/50 current_auc = 0.7055555555555555
User 56764 AUC after training: 0.7050925925925926
User 56764 does not improve AUC. Reverting changes.
Training on augumented user 49159 37/50 current_auc = 0.7055555555555555
User 49159 AUC after training: 0.7046296296296297
User 49159 does not improve AUC. Reverting changes.
Training on augumented user 97188 38/50 current_auc = 0.7055555555555555
User 97188 AUC after training: 0.7050925925925926
User 97188 does not improve AUC. Reverting changes.
Training on augumented user 100860 39/50 current_auc = 0.7055555555555555
User 100860 AUC after training: 0.7055555555555555
User 100860 does not improve AUC. Reverting changes.
Training on augumented user 132284 40/50 current_auc = 0.7055555555555555
User 132284 AUC after training: 0.7060185185185185
User 132284 improves AUC. Keeping the model.
Training on augumented user 27271 41/50 current_auc = 0.7060185185185185
User 27271 AUC after training: 0.7050925925925926
User 27271 does not improve AUC. Reverting changes.
Training on augumented user 14243 42/50 current_auc = 0.7060185185185185
User 14243 AUC after training: 0.7055555555555555
User 14243 does not improve AUC. Reverting changes.
Training on augumented user 116460 43/50 current_auc = 0.7060185185185185
User 116460 AUC after training: 0.7041666666666667
User 116460 does not improve AUC. Reverting changes.
Training on augumented user 136012 44/50 current_auc = 0.7060185185185185
User 136012 AUC after training: 0.7050925925925926
User 136012 does not improve AUC. Reverting changes.
Training on augumented user 25072 45/50 current_auc = 0.7060185185185185
User 25072 AUC after training: 0.7060185185185185
User 25072 does not improve AUC. Reverting changes.
Training on augumented user 7106 46/50 current_auc = 0.7060185185185185
User 7106 AUC after training: 0.7055555555555555
User 7106 does not improve AUC. Reverting changes.
Training on augumented user 123846 47/50 current_auc = 0.7060185185185185
User 123846 AUC after training: 0.7055555555555555
User 123846 does not improve AUC. Reverting changes.
Training on augumented user 9084 48/50 current_auc = 0.7060185185185185
User 9084 AUC after training: 0.7050925925925926
User 9084 does not improve AUC. Reverting changes.
Training on augumented user 51888 49/50 current_auc = 0.7060185185185185
User 51888 AUC after training: 0.7055555555555555
User 51888 does not improve AUC. Reverting changes.
[2024-12-02 17:42:19.793995] start test user 56221 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:20.305848] start test user 56221 8/568 recall augumented users by random, augumented_users = [36844, 39768, 102840, 21218, 97859, 76919, 56238, 107806, 45224, 38250, 82696, 43667, 5711, 56423, 91379, 138411, 26798, 96755, 115087, 101478, 53319, 9651, 86353, 51071, 103356, 105988, 3806, 121542, 109212, 126720, 35900, 72832, 62621, 62174, 80797, 24482, 36985, 91468, 119095, 26951, 52535, 44959, 117565, 41241, 37033, 42564, 50212, 95056, 87289, 96439]
[2024-12-02 17:42:20.321610] user = 56221 Cloud 8/568
[2024-12-02 17:42:20.336253] user = 56221 Local 8/568
[2024-12-02 17:42:20.485161] user = 56221 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:22.935661] user = 56221 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5996503496503497
Training on augumented user 36844 0/50 current_auc = 0.5996503496503497
User 36844 AUC after training: 0.5996503496503497
User 36844 does not improve AUC. Reverting changes.
Training on augumented user 39768 1/50 current_auc = 0.5996503496503497
User 39768 AUC after training: 0.5984848484848485
User 39768 does not improve AUC. Reverting changes.
Training on augumented user 102840 2/50 current_auc = 0.5996503496503497
User 102840 AUC after training: 0.6002331002331003
User 102840 improves AUC. Keeping the model.
Training on augumented user 21218 3/50 current_auc = 0.6002331002331003
User 21218 AUC after training: 0.6013986013986015
User 21218 improves AUC. Keeping the model.
Training on augumented user 97859 4/50 current_auc = 0.6013986013986015
User 97859 AUC after training: 0.6025641025641025
User 97859 improves AUC. Keeping the model.
Training on augumented user 76919 5/50 current_auc = 0.6025641025641025
User 76919 AUC after training: 0.6008158508158508
User 76919 does not improve AUC. Reverting changes.
Training on augumented user 56238 6/50 current_auc = 0.6025641025641025
User 56238 AUC after training: 0.6019813519813519
User 56238 does not improve AUC. Reverting changes.
Training on augumented user 107806 7/50 current_auc = 0.6025641025641025
User 107806 AUC after training: 0.5996503496503496
User 107806 does not improve AUC. Reverting changes.
Training on augumented user 45224 8/50 current_auc = 0.6025641025641025
User 45224 AUC after training: 0.6031468531468531
User 45224 improves AUC. Keeping the model.
Training on augumented user 38250 9/50 current_auc = 0.6031468531468531
User 38250 AUC after training: 0.6043123543123543
User 38250 improves AUC. Keeping the model.
Training on augumented user 82696 10/50 current_auc = 0.6043123543123543
User 82696 AUC after training: 0.5973193473193472
User 82696 does not improve AUC. Reverting changes.
Training on augumented user 43667 11/50 current_auc = 0.6043123543123543
User 43667 AUC after training: 0.6019813519813519
User 43667 does not improve AUC. Reverting changes.
Training on augumented user 5711 12/50 current_auc = 0.6043123543123543
User 5711 AUC after training: 0.6019813519813519
User 5711 does not improve AUC. Reverting changes.
Training on augumented user 56423 13/50 current_auc = 0.6043123543123543
User 56423 AUC after training: 0.6043123543123543
User 56423 does not improve AUC. Reverting changes.
Training on augumented user 91379 14/50 current_auc = 0.6043123543123543
User 91379 AUC after training: 0.6043123543123543
User 91379 does not improve AUC. Reverting changes.
Training on augumented user 138411 15/50 current_auc = 0.6043123543123543
User 138411 AUC after training: 0.6019813519813519
User 138411 does not improve AUC. Reverting changes.
Training on augumented user 26798 16/50 current_auc = 0.6043123543123543
User 26798 AUC after training: 0.6043123543123543
User 26798 does not improve AUC. Reverting changes.
Training on augumented user 96755 17/50 current_auc = 0.6043123543123543
User 96755 AUC after training: 0.6025641025641025
User 96755 does not improve AUC. Reverting changes.
Training on augumented user 115087 18/50 current_auc = 0.6043123543123543
User 115087 AUC after training: 0.6043123543123543
User 115087 does not improve AUC. Reverting changes.
Training on augumented user 101478 19/50 current_auc = 0.6043123543123543
User 101478 AUC after training: 0.6013986013986014
User 101478 does not improve AUC. Reverting changes.
Training on augumented user 53319 20/50 current_auc = 0.6043123543123543
User 53319 AUC after training: 0.6043123543123543
User 53319 does not improve AUC. Reverting changes.
Training on augumented user 9651 21/50 current_auc = 0.6043123543123543
User 9651 AUC after training: 0.6031468531468531
User 9651 does not improve AUC. Reverting changes.
Training on augumented user 86353 22/50 current_auc = 0.6043123543123543
User 86353 AUC after training: 0.6008158508158508
User 86353 does not improve AUC. Reverting changes.
Training on augumented user 51071 23/50 current_auc = 0.6043123543123543
User 51071 AUC after training: 0.6025641025641026
User 51071 does not improve AUC. Reverting changes.
Training on augumented user 103356 24/50 current_auc = 0.6043123543123543
User 103356 AUC after training: 0.6025641025641025
User 103356 does not improve AUC. Reverting changes.
Training on augumented user 105988 25/50 current_auc = 0.6043123543123543
User 105988 AUC after training: 0.6037296037296037
User 105988 does not improve AUC. Reverting changes.
Training on augumented user 3806 26/50 current_auc = 0.6043123543123543
User 3806 AUC after training: 0.6031468531468531
User 3806 does not improve AUC. Reverting changes.
Training on augumented user 121542 27/50 current_auc = 0.6043123543123543
User 121542 AUC after training: 0.6037296037296037
User 121542 does not improve AUC. Reverting changes.
Training on augumented user 109212 28/50 current_auc = 0.6043123543123543
User 109212 AUC after training: 0.6019813519813519
User 109212 does not improve AUC. Reverting changes.
Training on augumented user 126720 29/50 current_auc = 0.6043123543123543
User 126720 AUC after training: 0.6037296037296037
User 126720 does not improve AUC. Reverting changes.
Training on augumented user 35900 30/50 current_auc = 0.6043123543123543
User 35900 AUC after training: 0.6037296037296037
User 35900 does not improve AUC. Reverting changes.
Training on augumented user 72832 31/50 current_auc = 0.6043123543123543
User 72832 AUC after training: 0.5979020979020979
User 72832 does not improve AUC. Reverting changes.
Training on augumented user 62621 32/50 current_auc = 0.6043123543123543
User 62621 AUC after training: 0.6031468531468531
User 62621 does not improve AUC. Reverting changes.
Training on augumented user 62174 33/50 current_auc = 0.6043123543123543
User 62174 AUC after training: 0.6025641025641025
User 62174 does not improve AUC. Reverting changes.
Training on augumented user 80797 34/50 current_auc = 0.6043123543123543
User 80797 AUC after training: 0.6025641025641025
User 80797 does not improve AUC. Reverting changes.
Training on augumented user 24482 35/50 current_auc = 0.6043123543123543
User 24482 AUC after training: 0.6019813519813519
User 24482 does not improve AUC. Reverting changes.
Training on augumented user 36985 36/50 current_auc = 0.6043123543123543
User 36985 AUC after training: 0.5996503496503497
User 36985 does not improve AUC. Reverting changes.
Training on augumented user 91468 37/50 current_auc = 0.6043123543123543
User 91468 AUC after training: 0.6025641025641025
User 91468 does not improve AUC. Reverting changes.
Training on augumented user 119095 38/50 current_auc = 0.6043123543123543
User 119095 AUC after training: 0.6031468531468531
User 119095 does not improve AUC. Reverting changes.
Training on augumented user 26951 39/50 current_auc = 0.6043123543123543
User 26951 AUC after training: 0.6037296037296037
User 26951 does not improve AUC. Reverting changes.
Training on augumented user 52535 40/50 current_auc = 0.6043123543123543
User 52535 AUC after training: 0.6031468531468531
User 52535 does not improve AUC. Reverting changes.
Training on augumented user 44959 41/50 current_auc = 0.6043123543123543
User 44959 AUC after training: 0.6025641025641025
User 44959 does not improve AUC. Reverting changes.
Training on augumented user 117565 42/50 current_auc = 0.6043123543123543
User 117565 AUC after training: 0.5996503496503496
User 117565 does not improve AUC. Reverting changes.
Training on augumented user 41241 43/50 current_auc = 0.6043123543123543
User 41241 AUC after training: 0.6031468531468531
User 41241 does not improve AUC. Reverting changes.
Training on augumented user 37033 44/50 current_auc = 0.6043123543123543
User 37033 AUC after training: 0.6031468531468531
User 37033 does not improve AUC. Reverting changes.
Training on augumented user 42564 45/50 current_auc = 0.6043123543123543
User 42564 AUC after training: 0.6031468531468531
User 42564 does not improve AUC. Reverting changes.
Training on augumented user 50212 46/50 current_auc = 0.6043123543123543
User 50212 AUC after training: 0.6002331002331003
User 50212 does not improve AUC. Reverting changes.
Training on augumented user 95056 47/50 current_auc = 0.6043123543123543
User 95056 AUC after training: 0.6031468531468531
User 95056 does not improve AUC. Reverting changes.
Training on augumented user 87289 48/50 current_auc = 0.6043123543123543
User 87289 AUC after training: 0.6031468531468531
User 87289 does not improve AUC. Reverting changes.
Training on augumented user 96439 49/50 current_auc = 0.6043123543123543
User 96439 AUC after training: 0.6031468531468531
User 96439 does not improve AUC. Reverting changes.
[2024-12-02 17:42:53.087848] start test user 56222 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:53.791235] start test user 56222 9/568 recall augumented users by random, augumented_users = [69943, 83541, 106094, 73581, 4346, 3458, 127776, 61590, 16416, 137779, 22480, 54511, 92016, 5861, 114921, 19462, 89461, 63266, 68813, 8024, 77563, 19093, 5226, 20095, 80118, 27086, 40337, 136582, 62053, 129932, 59273, 97229, 54173, 50481, 21563, 118252, 95736, 110963, 61053, 86733, 103657, 64918, 91195, 109809, 59251, 106782, 12236, 128170, 15977, 108364]
[2024-12-02 17:42:53.813761] user = 56222 Cloud 9/568
[2024-12-02 17:42:53.833553] user = 56222 Local 9/568
[2024-12-02 17:42:53.906222] user = 56222 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:56.466552] user = 56222 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6059113300492611
Training on augumented user 69943 0/50 current_auc = 0.6059113300492611
User 69943 AUC after training: 0.6075533661740558
User 69943 improves AUC. Keeping the model.
Training on augumented user 83541 1/50 current_auc = 0.6075533661740558
User 83541 AUC after training: 0.6075533661740559
User 83541 improves AUC. Keeping the model.
Training on augumented user 106094 2/50 current_auc = 0.6075533661740559
User 106094 AUC after training: 0.6083743842364532
User 106094 improves AUC. Keeping the model.
Training on augumented user 73581 3/50 current_auc = 0.6083743842364532
User 73581 AUC after training: 0.6067323481116584
User 73581 does not improve AUC. Reverting changes.
Training on augumented user 4346 4/50 current_auc = 0.6083743842364532
User 4346 AUC after training: 0.6083743842364532
User 4346 does not improve AUC. Reverting changes.
Training on augumented user 3458 5/50 current_auc = 0.6083743842364532
User 3458 AUC after training: 0.6083743842364532
User 3458 does not improve AUC. Reverting changes.
Training on augumented user 127776 6/50 current_auc = 0.6083743842364532
User 127776 AUC after training: 0.6091954022988506
User 127776 improves AUC. Keeping the model.
Training on augumented user 61590 7/50 current_auc = 0.6091954022988506
User 61590 AUC after training: 0.6091954022988506
User 61590 does not improve AUC. Reverting changes.
Training on augumented user 16416 8/50 current_auc = 0.6091954022988506
User 16416 AUC after training: 0.6100164203612479
User 16416 improves AUC. Keeping the model.
Training on augumented user 137779 9/50 current_auc = 0.6100164203612479
User 137779 AUC after training: 0.6083743842364532
User 137779 does not improve AUC. Reverting changes.
Training on augumented user 22480 10/50 current_auc = 0.6100164203612479
User 22480 AUC after training: 0.6100164203612479
User 22480 does not improve AUC. Reverting changes.
Training on augumented user 54511 11/50 current_auc = 0.6100164203612479
User 54511 AUC after training: 0.6091954022988506
User 54511 does not improve AUC. Reverting changes.
Training on augumented user 92016 12/50 current_auc = 0.6100164203612479
User 92016 AUC after training: 0.6100164203612479
User 92016 does not improve AUC. Reverting changes.
Training on augumented user 5861 13/50 current_auc = 0.6100164203612479
User 5861 AUC after training: 0.6133004926108374
User 5861 improves AUC. Keeping the model.
Training on augumented user 114921 14/50 current_auc = 0.6133004926108374
User 114921 AUC after training: 0.6120689655172413
User 114921 does not improve AUC. Reverting changes.
Training on augumented user 19462 15/50 current_auc = 0.6133004926108374
User 19462 AUC after training: 0.6133004926108374
User 19462 does not improve AUC. Reverting changes.
Training on augumented user 89461 16/50 current_auc = 0.6133004926108374
User 89461 AUC after training: 0.6124794745484401
User 89461 does not improve AUC. Reverting changes.
Training on augumented user 63266 17/50 current_auc = 0.6133004926108374
User 63266 AUC after training: 0.6100164203612479
User 63266 does not improve AUC. Reverting changes.
Training on augumented user 68813 18/50 current_auc = 0.6133004926108374
User 68813 AUC after training: 0.6145320197044335
User 68813 improves AUC. Keeping the model.
Training on augumented user 8024 19/50 current_auc = 0.6145320197044335
User 8024 AUC after training: 0.6124794745484401
User 8024 does not improve AUC. Reverting changes.
Training on augumented user 77563 20/50 current_auc = 0.6145320197044335
User 77563 AUC after training: 0.6133004926108374
User 77563 does not improve AUC. Reverting changes.
Training on augumented user 19093 21/50 current_auc = 0.6145320197044335
User 19093 AUC after training: 0.6124794745484401
User 19093 does not improve AUC. Reverting changes.
Training on augumented user 5226 22/50 current_auc = 0.6145320197044335
User 5226 AUC after training: 0.6124794745484401
User 5226 does not improve AUC. Reverting changes.
Training on augumented user 20095 23/50 current_auc = 0.6145320197044335
User 20095 AUC after training: 0.6124794745484401
User 20095 does not improve AUC. Reverting changes.
Training on augumented user 80118 24/50 current_auc = 0.6145320197044335
User 80118 AUC after training: 0.6124794745484401
User 80118 does not improve AUC. Reverting changes.
Training on augumented user 27086 25/50 current_auc = 0.6145320197044335
User 27086 AUC after training: 0.6145320197044335
User 27086 does not improve AUC. Reverting changes.
Training on augumented user 40337 26/50 current_auc = 0.6145320197044335
User 40337 AUC after training: 0.6141215106732347
User 40337 does not improve AUC. Reverting changes.
Training on augumented user 136582 27/50 current_auc = 0.6145320197044335
User 136582 AUC after training: 0.6116584564860428
User 136582 does not improve AUC. Reverting changes.
Training on augumented user 62053 28/50 current_auc = 0.6145320197044335
User 62053 AUC after training: 0.6124794745484401
User 62053 does not improve AUC. Reverting changes.
Training on augumented user 129932 29/50 current_auc = 0.6145320197044335
User 129932 AUC after training: 0.6133004926108374
User 129932 does not improve AUC. Reverting changes.
Training on augumented user 59273 30/50 current_auc = 0.6145320197044335
User 59273 AUC after training: 0.6120689655172413
User 59273 does not improve AUC. Reverting changes.
Training on augumented user 97229 31/50 current_auc = 0.6145320197044335
User 97229 AUC after training: 0.6153530377668308
User 97229 improves AUC. Keeping the model.
Training on augumented user 54173 32/50 current_auc = 0.6153530377668308
User 54173 AUC after training: 0.6116584564860428
User 54173 does not improve AUC. Reverting changes.
Training on augumented user 50481 33/50 current_auc = 0.6153530377668308
User 50481 AUC after training: 0.6169950738916257
User 50481 improves AUC. Keeping the model.
Training on augumented user 21563 34/50 current_auc = 0.6169950738916257
User 21563 AUC after training: 0.6116584564860428
User 21563 does not improve AUC. Reverting changes.
Training on augumented user 118252 35/50 current_auc = 0.6169950738916257
User 118252 AUC after training: 0.6141215106732347
User 118252 does not improve AUC. Reverting changes.
Training on augumented user 95736 36/50 current_auc = 0.6169950738916257
User 95736 AUC after training: 0.6169950738916257
User 95736 does not improve AUC. Reverting changes.
Training on augumented user 110963 37/50 current_auc = 0.6169950738916257
User 110963 AUC after training: 0.6169950738916257
User 110963 does not improve AUC. Reverting changes.
Training on augumented user 61053 38/50 current_auc = 0.6169950738916257
User 61053 AUC after training: 0.6091954022988506
User 61053 does not improve AUC. Reverting changes.
Training on augumented user 86733 39/50 current_auc = 0.6169950738916257
User 86733 AUC after training: 0.6165845648604269
User 86733 does not improve AUC. Reverting changes.
Training on augumented user 103657 40/50 current_auc = 0.6169950738916257
User 103657 AUC after training: 0.6157635467980296
User 103657 does not improve AUC. Reverting changes.
Training on augumented user 64918 41/50 current_auc = 0.6169950738916257
User 64918 AUC after training: 0.617816091954023
User 64918 improves AUC. Keeping the model.
Training on augumented user 91195 42/50 current_auc = 0.617816091954023
User 91195 AUC after training: 0.6169950738916257
User 91195 does not improve AUC. Reverting changes.
Training on augumented user 109809 43/50 current_auc = 0.617816091954023
User 109809 AUC after training: 0.6169950738916257
User 109809 does not improve AUC. Reverting changes.
Training on augumented user 59251 44/50 current_auc = 0.617816091954023
User 59251 AUC after training: 0.6169950738916257
User 59251 does not improve AUC. Reverting changes.
Training on augumented user 106782 45/50 current_auc = 0.617816091954023
User 106782 AUC after training: 0.6219211822660099
User 106782 improves AUC. Keeping the model.
Training on augumented user 12236 46/50 current_auc = 0.6219211822660099
User 12236 AUC after training: 0.624384236453202
User 12236 improves AUC. Keeping the model.
Training on augumented user 128170 47/50 current_auc = 0.624384236453202
User 128170 AUC after training: 0.6186371100164203
User 128170 does not improve AUC. Reverting changes.
Training on augumented user 15977 48/50 current_auc = 0.624384236453202
User 15977 AUC after training: 0.624384236453202
User 15977 does not improve AUC. Reverting changes.
Training on augumented user 108364 49/50 current_auc = 0.624384236453202
User 108364 AUC after training: 0.6260262725779967
User 108364 improves AUC. Keeping the model.
[2024-12-02 17:43:20.675813] start test user 56257 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:21.083596] start test user 56257 10/568 recall augumented users by random, augumented_users = [13828, 137242, 97730, 87997, 85235, 57739, 19803, 74460, 112314, 67958, 9412, 118614, 2439, 85260, 88040, 109052, 28935, 84966, 6992, 88486, 46273, 133128, 30581, 48923, 58830, 6907, 125361, 16301, 122189, 76210, 111130, 93948, 118034, 70360, 30136, 86495, 12817, 84104, 45027, 67928, 48745, 77065, 21535, 72284, 22215, 87471, 104335, 54624, 59748, 124867]
[2024-12-02 17:43:21.100526] user = 56257 Cloud 10/568
[2024-12-02 17:43:21.127896] user = 56257 Local 10/568
[2024-12-02 17:43:21.367114] user = 56257 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:24.111549] user = 56257 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.751753008895866
Training on augumented user 13828 0/50 current_auc = 0.751753008895866
User 13828 AUC after training: 0.7524856096284668
User 13828 improves AUC. Keeping the model.
Training on augumented user 137242 1/50 current_auc = 0.7524856096284668
User 137242 AUC after training: 0.752276295133438
User 137242 does not improve AUC. Reverting changes.
Training on augumented user 97730 2/50 current_auc = 0.7524856096284668
User 97730 AUC after training: 0.7514390371533229
User 97730 does not improve AUC. Reverting changes.
Training on augumented user 87997 3/50 current_auc = 0.7524856096284668
User 87997 AUC after training: 0.7526949241234956
User 87997 improves AUC. Keeping the model.
Training on augumented user 85235 4/50 current_auc = 0.7526949241234956
User 85235 AUC after training: 0.7529042386185244
User 85235 improves AUC. Keeping the model.
Training on augumented user 57739 5/50 current_auc = 0.7529042386185244
User 57739 AUC after training: 0.7526949241234956
User 57739 does not improve AUC. Reverting changes.
Training on augumented user 19803 6/50 current_auc = 0.7529042386185244
User 19803 AUC after training: 0.7531135531135531
User 19803 improves AUC. Keeping the model.
Training on augumented user 74460 7/50 current_auc = 0.7531135531135531
User 74460 AUC after training: 0.7529042386185243
User 74460 does not improve AUC. Reverting changes.
Training on augumented user 112314 8/50 current_auc = 0.7531135531135531
User 112314 AUC after training: 0.7532182103610675
User 112314 improves AUC. Keeping the model.
Training on augumented user 67958 9/50 current_auc = 0.7532182103610675
User 67958 AUC after training: 0.7533228676085819
User 67958 improves AUC. Keeping the model.
Training on augumented user 9412 10/50 current_auc = 0.7533228676085819
User 9412 AUC after training: 0.7531135531135532
User 9412 does not improve AUC. Reverting changes.
Training on augumented user 118614 11/50 current_auc = 0.7533228676085819
User 118614 AUC after training: 0.7533228676085819
User 118614 does not improve AUC. Reverting changes.
Training on augumented user 2439 12/50 current_auc = 0.7533228676085819
User 2439 AUC after training: 0.7531135531135531
User 2439 does not improve AUC. Reverting changes.
Training on augumented user 85260 13/50 current_auc = 0.7533228676085819
User 85260 AUC after training: 0.7533228676085819
User 85260 does not improve AUC. Reverting changes.
Training on augumented user 88040 14/50 current_auc = 0.7533228676085819
User 88040 AUC after training: 0.7530088958660387
User 88040 does not improve AUC. Reverting changes.
Training on augumented user 109052 15/50 current_auc = 0.7533228676085819
User 109052 AUC after training: 0.7535321821036107
User 109052 improves AUC. Keeping the model.
Training on augumented user 28935 16/50 current_auc = 0.7535321821036107
User 28935 AUC after training: 0.7533228676085819
User 28935 does not improve AUC. Reverting changes.
Training on augumented user 84966 17/50 current_auc = 0.7535321821036107
User 84966 AUC after training: 0.7535321821036106
User 84966 does not improve AUC. Reverting changes.
Training on augumented user 6992 18/50 current_auc = 0.7535321821036107
User 6992 AUC after training: 0.7535321821036106
User 6992 does not improve AUC. Reverting changes.
Training on augumented user 88486 19/50 current_auc = 0.7535321821036107
User 88486 AUC after training: 0.7531135531135531
User 88486 does not improve AUC. Reverting changes.
Training on augumented user 46273 20/50 current_auc = 0.7535321821036107
User 46273 AUC after training: 0.7533228676085819
User 46273 does not improve AUC. Reverting changes.
Training on augumented user 133128 21/50 current_auc = 0.7535321821036107
User 133128 AUC after training: 0.7524856096284668
User 133128 does not improve AUC. Reverting changes.
Training on augumented user 30581 22/50 current_auc = 0.7535321821036107
User 30581 AUC after training: 0.7530088958660387
User 30581 does not improve AUC. Reverting changes.
Training on augumented user 48923 23/50 current_auc = 0.7535321821036107
User 48923 AUC after training: 0.7533228676085819
User 48923 does not improve AUC. Reverting changes.
Training on augumented user 58830 24/50 current_auc = 0.7535321821036107
User 58830 AUC after training: 0.7531135531135531
User 58830 does not improve AUC. Reverting changes.
Training on augumented user 6907 25/50 current_auc = 0.7535321821036107
User 6907 AUC after training: 0.7533228676085819
User 6907 does not improve AUC. Reverting changes.
Training on augumented user 125361 26/50 current_auc = 0.7535321821036107
User 125361 AUC after training: 0.7535321821036106
User 125361 does not improve AUC. Reverting changes.
Training on augumented user 16301 27/50 current_auc = 0.7535321821036107
User 16301 AUC after training: 0.7529042386185243
User 16301 does not improve AUC. Reverting changes.
Training on augumented user 122189 28/50 current_auc = 0.7535321821036107
User 122189 AUC after training: 0.7530088958660387
User 122189 does not improve AUC. Reverting changes.
Training on augumented user 76210 29/50 current_auc = 0.7535321821036107
User 76210 AUC after training: 0.7532182103610675
User 76210 does not improve AUC. Reverting changes.
Training on augumented user 111130 30/50 current_auc = 0.7535321821036107
User 111130 AUC after training: 0.7533228676085819
User 111130 does not improve AUC. Reverting changes.
Training on augumented user 93948 31/50 current_auc = 0.7535321821036107
User 93948 AUC after training: 0.7534275248560963
User 93948 does not improve AUC. Reverting changes.
Training on augumented user 118034 32/50 current_auc = 0.7535321821036107
User 118034 AUC after training: 0.7535321821036106
User 118034 does not improve AUC. Reverting changes.
Training on augumented user 70360 33/50 current_auc = 0.7535321821036107
User 70360 AUC after training: 0.7534275248560963
User 70360 does not improve AUC. Reverting changes.
Training on augumented user 30136 34/50 current_auc = 0.7535321821036107
User 30136 AUC after training: 0.7521716378859236
User 30136 does not improve AUC. Reverting changes.
Training on augumented user 86495 35/50 current_auc = 0.7535321821036107
User 86495 AUC after training: 0.7532182103610675
User 86495 does not improve AUC. Reverting changes.
Training on augumented user 12817 36/50 current_auc = 0.7535321821036107
User 12817 AUC after training: 0.7532182103610675
User 12817 does not improve AUC. Reverting changes.
Training on augumented user 84104 37/50 current_auc = 0.7535321821036107
User 84104 AUC after training: 0.753636839351125
User 84104 improves AUC. Keeping the model.
Training on augumented user 45027 38/50 current_auc = 0.753636839351125
User 45027 AUC after training: 0.7507064364207221
User 45027 does not improve AUC. Reverting changes.
Training on augumented user 67928 39/50 current_auc = 0.753636839351125
User 67928 AUC after training: 0.7535321821036107
User 67928 does not improve AUC. Reverting changes.
Training on augumented user 48745 40/50 current_auc = 0.753636839351125
User 48745 AUC after training: 0.7534275248560963
User 48745 does not improve AUC. Reverting changes.
Training on augumented user 77065 41/50 current_auc = 0.753636839351125
User 77065 AUC after training: 0.7527995813710099
User 77065 does not improve AUC. Reverting changes.
Training on augumented user 21535 42/50 current_auc = 0.753636839351125
User 21535 AUC after training: 0.7537414965986394
User 21535 improves AUC. Keeping the model.
Training on augumented user 72284 43/50 current_auc = 0.7537414965986394
User 72284 AUC after training: 0.7525902668759811
User 72284 does not improve AUC. Reverting changes.
Training on augumented user 22215 44/50 current_auc = 0.7537414965986394
User 22215 AUC after training: 0.7532182103610675
User 22215 does not improve AUC. Reverting changes.
Training on augumented user 87471 45/50 current_auc = 0.7537414965986394
User 87471 AUC after training: 0.7533228676085819
User 87471 does not improve AUC. Reverting changes.
Training on augumented user 104335 46/50 current_auc = 0.7537414965986394
User 104335 AUC after training: 0.7532182103610675
User 104335 does not improve AUC. Reverting changes.
Training on augumented user 54624 47/50 current_auc = 0.7537414965986394
User 54624 AUC after training: 0.7534275248560963
User 54624 does not improve AUC. Reverting changes.
Training on augumented user 59748 48/50 current_auc = 0.7537414965986394
User 59748 AUC after training: 0.7534275248560963
User 59748 does not improve AUC. Reverting changes.
Training on augumented user 124867 49/50 current_auc = 0.7537414965986394
User 124867 AUC after training: 0.7533228676085819
User 124867 does not improve AUC. Reverting changes.
[2024-12-02 17:43:57.143088] start test user 56258 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:57.614000] start test user 56258 11/568 recall augumented users by random, augumented_users = [2955, 57608, 129523, 81278, 102284, 34378, 51218, 64227, 20416, 42970, 106996, 103322, 97290, 125375, 2288, 37742, 35327, 39115, 16083, 11367, 69816, 108939, 6817, 27501, 73319, 92245, 93628, 80801, 59232, 96447, 15229, 46761, 129605, 83764, 129258, 120375, 95452, 12182, 35173, 69959, 70779, 65691, 127476, 64253, 29856, 38099, 46804, 13753, 50611, 2257]
[2024-12-02 17:43:57.629118] user = 56258 Cloud 11/568
[2024-12-02 17:43:57.638744] user = 56258 Local 11/568
[2024-12-02 17:43:57.685792] user = 56258 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:00.505002] user = 56258 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 2955 0/50 current_auc = 0.5
User 2955 AUC after training: 0.5
User 2955 does not improve AUC. Reverting changes.
Training on augumented user 57608 1/50 current_auc = 0.5
User 57608 AUC after training: 0.5
User 57608 does not improve AUC. Reverting changes.
Training on augumented user 129523 2/50 current_auc = 0.5
User 129523 AUC after training: 0.5
User 129523 does not improve AUC. Reverting changes.
Training on augumented user 81278 3/50 current_auc = 0.5
User 81278 AUC after training: 0.5
User 81278 does not improve AUC. Reverting changes.
Training on augumented user 102284 4/50 current_auc = 0.5
User 102284 AUC after training: 0.5
User 102284 does not improve AUC. Reverting changes.
Training on augumented user 34378 5/50 current_auc = 0.5
User 34378 AUC after training: 0.5
User 34378 does not improve AUC. Reverting changes.
Training on augumented user 51218 6/50 current_auc = 0.5
User 51218 AUC after training: 0.5
User 51218 does not improve AUC. Reverting changes.
Training on augumented user 64227 7/50 current_auc = 0.5
User 64227 AUC after training: 0.5
User 64227 does not improve AUC. Reverting changes.
Training on augumented user 20416 8/50 current_auc = 0.5
User 20416 AUC after training: 0.5
User 20416 does not improve AUC. Reverting changes.
Training on augumented user 42970 9/50 current_auc = 0.5
User 42970 AUC after training: 0.5
User 42970 does not improve AUC. Reverting changes.
Training on augumented user 106996 10/50 current_auc = 0.5
User 106996 AUC after training: 0.5
User 106996 does not improve AUC. Reverting changes.
Training on augumented user 103322 11/50 current_auc = 0.5
User 103322 AUC after training: 0.5
User 103322 does not improve AUC. Reverting changes.
Training on augumented user 97290 12/50 current_auc = 0.5
User 97290 AUC after training: 0.5
User 97290 does not improve AUC. Reverting changes.
Training on augumented user 125375 13/50 current_auc = 0.5
User 125375 AUC after training: 0.5
User 125375 does not improve AUC. Reverting changes.
Training on augumented user 2288 14/50 current_auc = 0.5
User 2288 AUC after training: 0.5
User 2288 does not improve AUC. Reverting changes.
Training on augumented user 37742 15/50 current_auc = 0.5
User 37742 AUC after training: 0.5
User 37742 does not improve AUC. Reverting changes.
Training on augumented user 35327 16/50 current_auc = 0.5
User 35327 AUC after training: 0.5
User 35327 does not improve AUC. Reverting changes.
Training on augumented user 39115 17/50 current_auc = 0.5
User 39115 AUC after training: 0.5
User 39115 does not improve AUC. Reverting changes.
Training on augumented user 16083 18/50 current_auc = 0.5
User 16083 AUC after training: 0.5
User 16083 does not improve AUC. Reverting changes.
Training on augumented user 11367 19/50 current_auc = 0.5
User 11367 AUC after training: 0.5
User 11367 does not improve AUC. Reverting changes.
Training on augumented user 69816 20/50 current_auc = 0.5
User 69816 AUC after training: 0.5
User 69816 does not improve AUC. Reverting changes.
Training on augumented user 108939 21/50 current_auc = 0.5
User 108939 AUC after training: 0.5
User 108939 does not improve AUC. Reverting changes.
Training on augumented user 6817 22/50 current_auc = 0.5
User 6817 AUC after training: 0.5
User 6817 does not improve AUC. Reverting changes.
Training on augumented user 27501 23/50 current_auc = 0.5
User 27501 AUC after training: 0.5
User 27501 does not improve AUC. Reverting changes.
Training on augumented user 73319 24/50 current_auc = 0.5
User 73319 AUC after training: 0.5
User 73319 does not improve AUC. Reverting changes.
Training on augumented user 92245 25/50 current_auc = 0.5
User 92245 AUC after training: 0.5
User 92245 does not improve AUC. Reverting changes.
Training on augumented user 93628 26/50 current_auc = 0.5
User 93628 AUC after training: 0.5
User 93628 does not improve AUC. Reverting changes.
Training on augumented user 80801 27/50 current_auc = 0.5
User 80801 AUC after training: 0.5
User 80801 does not improve AUC. Reverting changes.
Training on augumented user 59232 28/50 current_auc = 0.5
User 59232 AUC after training: 0.5
User 59232 does not improve AUC. Reverting changes.
Training on augumented user 96447 29/50 current_auc = 0.5
User 96447 AUC after training: 0.5
User 96447 does not improve AUC. Reverting changes.
Training on augumented user 15229 30/50 current_auc = 0.5
User 15229 AUC after training: 0.5
User 15229 does not improve AUC. Reverting changes.
Training on augumented user 46761 31/50 current_auc = 0.5
User 46761 AUC after training: 0.5
User 46761 does not improve AUC. Reverting changes.
Training on augumented user 129605 32/50 current_auc = 0.5
User 129605 AUC after training: 0.5
User 129605 does not improve AUC. Reverting changes.
Training on augumented user 83764 33/50 current_auc = 0.5
User 83764 AUC after training: 0.5
User 83764 does not improve AUC. Reverting changes.
Training on augumented user 129258 34/50 current_auc = 0.5
User 129258 AUC after training: 0.5
User 129258 does not improve AUC. Reverting changes.
Training on augumented user 120375 35/50 current_auc = 0.5
User 120375 AUC after training: 0.5
User 120375 does not improve AUC. Reverting changes.
Training on augumented user 95452 36/50 current_auc = 0.5
User 95452 AUC after training: 0.5
User 95452 does not improve AUC. Reverting changes.
Training on augumented user 12182 37/50 current_auc = 0.5
User 12182 AUC after training: 0.5
User 12182 does not improve AUC. Reverting changes.
Training on augumented user 35173 38/50 current_auc = 0.5
User 35173 AUC after training: 0.5
User 35173 does not improve AUC. Reverting changes.
Training on augumented user 69959 39/50 current_auc = 0.5
User 69959 AUC after training: 0.5
User 69959 does not improve AUC. Reverting changes.
Training on augumented user 70779 40/50 current_auc = 0.5
User 70779 AUC after training: 0.5
User 70779 does not improve AUC. Reverting changes.
Training on augumented user 65691 41/50 current_auc = 0.5
User 65691 AUC after training: 0.5
User 65691 does not improve AUC. Reverting changes.
Training on augumented user 127476 42/50 current_auc = 0.5
User 127476 AUC after training: 0.5
User 127476 does not improve AUC. Reverting changes.
Training on augumented user 64253 43/50 current_auc = 0.5
User 64253 AUC after training: 0.5
User 64253 does not improve AUC. Reverting changes.
Training on augumented user 29856 44/50 current_auc = 0.5
User 29856 AUC after training: 0.5
User 29856 does not improve AUC. Reverting changes.
Training on augumented user 38099 45/50 current_auc = 0.5
User 38099 AUC after training: 0.5
User 38099 does not improve AUC. Reverting changes.
Training on augumented user 46804 46/50 current_auc = 0.5
User 46804 AUC after training: 0.5
User 46804 does not improve AUC. Reverting changes.
Training on augumented user 13753 47/50 current_auc = 0.5
User 13753 AUC after training: 0.5
User 13753 does not improve AUC. Reverting changes.
Training on augumented user 50611 48/50 current_auc = 0.5
User 50611 AUC after training: 0.5
User 50611 does not improve AUC. Reverting changes.
Training on augumented user 2257 49/50 current_auc = 0.5
User 2257 AUC after training: 0.5
User 2257 does not improve AUC. Reverting changes.
[2024-12-02 17:44:27.845227] start test user 56273 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:28.245256] start test user 56273 12/568 recall augumented users by random, augumented_users = [63538, 114855, 88568, 42159, 17897, 42187, 72584, 118036, 38464, 129525, 127768, 102922, 97185, 125498, 74330, 91309, 65801, 102220, 127318, 101624, 75126, 105524, 68097, 946, 743, 13737, 6460, 86704, 34123, 35003, 82821, 110375, 80485, 17922, 46614, 52007, 105310, 36196, 114919, 32719, 85239, 137208, 90251, 29085, 34624, 116883, 122047, 82439, 76802, 14788]
[2024-12-02 17:44:28.259846] user = 56273 Cloud 12/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:28.278595] user = 56273 Local 12/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:28.329239] user = 56273 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:30.053361] user = 56273 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 63538 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63538 AUC after training: 0.5
User 63538 does not improve AUC. Reverting changes.
Training on augumented user 114855 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114855 AUC after training: 0.5
User 114855 does not improve AUC. Reverting changes.
Training on augumented user 88568 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88568 AUC after training: 0.5
User 88568 does not improve AUC. Reverting changes.
Training on augumented user 42159 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42159 AUC after training: 0.5
User 42159 does not improve AUC. Reverting changes.
Training on augumented user 17897 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17897 AUC after training: 0.5
User 17897 does not improve AUC. Reverting changes.
Training on augumented user 42187 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42187 AUC after training: 0.5
User 42187 does not improve AUC. Reverting changes.
Training on augumented user 72584 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72584 AUC after training: 0.5
User 72584 does not improve AUC. Reverting changes.
Training on augumented user 118036 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118036 AUC after training: 0.5
User 118036 does not improve AUC. Reverting changes.
Training on augumented user 38464 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38464 AUC after training: 0.5
User 38464 does not improve AUC. Reverting changes.
Training on augumented user 129525 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129525 AUC after training: 0.5
User 129525 does not improve AUC. Reverting changes.
Training on augumented user 127768 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127768 AUC after training: 0.5
User 127768 does not improve AUC. Reverting changes.
Training on augumented user 102922 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102922 AUC after training: 0.5
User 102922 does not improve AUC. Reverting changes.
Training on augumented user 97185 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97185 AUC after training: 0.5
User 97185 does not improve AUC. Reverting changes.
Training on augumented user 125498 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125498 AUC after training: 0.5
User 125498 does not improve AUC. Reverting changes.
Training on augumented user 74330 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74330 AUC after training: 0.5
User 74330 does not improve AUC. Reverting changes.
Training on augumented user 91309 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91309 AUC after training: 0.5
User 91309 does not improve AUC. Reverting changes.
Training on augumented user 65801 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65801 AUC after training: 0.5
User 65801 does not improve AUC. Reverting changes.
Training on augumented user 102220 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102220 AUC after training: 0.5
User 102220 does not improve AUC. Reverting changes.
Training on augumented user 127318 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127318 AUC after training: 0.5
User 127318 does not improve AUC. Reverting changes.
Training on augumented user 101624 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101624 AUC after training: 0.5
User 101624 does not improve AUC. Reverting changes.
Training on augumented user 75126 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75126 AUC after training: 0.5
User 75126 does not improve AUC. Reverting changes.
Training on augumented user 105524 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105524 AUC after training: 0.5
User 105524 does not improve AUC. Reverting changes.
Training on augumented user 68097 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68097 AUC after training: 0.5
User 68097 does not improve AUC. Reverting changes.
Training on augumented user 946 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 946 AUC after training: 0.5
User 946 does not improve AUC. Reverting changes.
Training on augumented user 743 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 743 AUC after training: 0.5
User 743 does not improve AUC. Reverting changes.
Training on augumented user 13737 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13737 AUC after training: 0.5
User 13737 does not improve AUC. Reverting changes.
Training on augumented user 6460 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6460 AUC after training: 0.5
User 6460 does not improve AUC. Reverting changes.
Training on augumented user 86704 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86704 AUC after training: 0.5
User 86704 does not improve AUC. Reverting changes.
Training on augumented user 34123 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34123 AUC after training: 0.5
User 34123 does not improve AUC. Reverting changes.
Training on augumented user 35003 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35003 AUC after training: 0.5
User 35003 does not improve AUC. Reverting changes.
Training on augumented user 82821 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82821 AUC after training: 0.5
User 82821 does not improve AUC. Reverting changes.
Training on augumented user 110375 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110375 AUC after training: 0.5
User 110375 does not improve AUC. Reverting changes.
Training on augumented user 80485 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80485 AUC after training: 0.5
User 80485 does not improve AUC. Reverting changes.
Training on augumented user 17922 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17922 AUC after training: 0.5
User 17922 does not improve AUC. Reverting changes.
Training on augumented user 46614 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46614 AUC after training: 0.5
User 46614 does not improve AUC. Reverting changes.
Training on augumented user 52007 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52007 AUC after training: 0.5
User 52007 does not improve AUC. Reverting changes.
Training on augumented user 105310 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105310 AUC after training: 0.5
User 105310 does not improve AUC. Reverting changes.
Training on augumented user 36196 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36196 AUC after training: 0.5
User 36196 does not improve AUC. Reverting changes.
Training on augumented user 114919 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114919 AUC after training: 0.5
User 114919 does not improve AUC. Reverting changes.
Training on augumented user 32719 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32719 AUC after training: 0.5
User 32719 does not improve AUC. Reverting changes.
Training on augumented user 85239 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85239 AUC after training: 0.5
User 85239 does not improve AUC. Reverting changes.
Training on augumented user 137208 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137208 AUC after training: 0.5
User 137208 does not improve AUC. Reverting changes.
Training on augumented user 90251 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90251 AUC after training: 0.5
User 90251 does not improve AUC. Reverting changes.
Training on augumented user 29085 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29085 AUC after training: 0.5
User 29085 does not improve AUC. Reverting changes.
Training on augumented user 34624 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34624 AUC after training: 0.5
User 34624 does not improve AUC. Reverting changes.
Training on augumented user 116883 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116883 AUC after training: 0.5
User 116883 does not improve AUC. Reverting changes.
Training on augumented user 122047 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122047 AUC after training: 0.5
User 122047 does not improve AUC. Reverting changes.
Training on augumented user 82439 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82439 AUC after training: 0.5
User 82439 does not improve AUC. Reverting changes.
Training on augumented user 76802 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76802 AUC after training: 0.5
User 76802 does not improve AUC. Reverting changes.
Training on augumented user 14788 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14788 AUC after training: 0.5
User 14788 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:58.721112] start test user 56305 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:59.155540] start test user 56305 13/568 recall augumented users by random, augumented_users = [94550, 70784, 101509, 130340, 131396, 128495, 118283, 23712, 3669, 74526, 132816, 59671, 76195, 50641, 127491, 75700, 17440, 106625, 9857, 10014, 97628, 86444, 131155, 80795, 5717, 28847, 4702, 61426, 63584, 69571, 136956, 33251, 44486, 120897, 44730, 119817, 115867, 103345, 91002, 12243, 31464, 72975, 52671, 6287, 94534, 81410, 99207, 106123, 9463, 27160]
[2024-12-02 17:44:59.170430] user = 56305 Cloud 13/568
[2024-12-02 17:44:59.191799] user = 56305 Local 13/568
[2024-12-02 17:44:59.263370] user = 56305 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:01.245775] user = 56305 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6145092460881935
Training on augumented user 94550 0/50 current_auc = 0.6145092460881935
User 94550 AUC after training: 0.6159317211948792
User 94550 improves AUC. Keeping the model.
Training on augumented user 70784 1/50 current_auc = 0.6159317211948792
User 70784 AUC after training: 0.6145092460881935
User 70784 does not improve AUC. Reverting changes.
Training on augumented user 101509 2/50 current_auc = 0.6159317211948792
User 101509 AUC after training: 0.6130867709815079
User 101509 does not improve AUC. Reverting changes.
Training on augumented user 130340 3/50 current_auc = 0.6159317211948792
User 130340 AUC after training: 0.6159317211948792
User 130340 does not improve AUC. Reverting changes.
Training on augumented user 131396 4/50 current_auc = 0.6159317211948792
User 131396 AUC after training: 0.6159317211948792
User 131396 does not improve AUC. Reverting changes.
Training on augumented user 128495 5/50 current_auc = 0.6159317211948792
User 128495 AUC after training: 0.6159317211948792
User 128495 does not improve AUC. Reverting changes.
Training on augumented user 118283 6/50 current_auc = 0.6159317211948792
User 118283 AUC after training: 0.6145092460881935
User 118283 does not improve AUC. Reverting changes.
Training on augumented user 23712 7/50 current_auc = 0.6159317211948792
User 23712 AUC after training: 0.6145092460881935
User 23712 does not improve AUC. Reverting changes.
Training on augumented user 3669 8/50 current_auc = 0.6159317211948792
User 3669 AUC after training: 0.6145092460881935
User 3669 does not improve AUC. Reverting changes.
Training on augumented user 74526 9/50 current_auc = 0.6159317211948792
User 74526 AUC after training: 0.6130867709815079
User 74526 does not improve AUC. Reverting changes.
Training on augumented user 132816 10/50 current_auc = 0.6159317211948792
User 132816 AUC after training: 0.6159317211948792
User 132816 does not improve AUC. Reverting changes.
Training on augumented user 59671 11/50 current_auc = 0.6159317211948792
User 59671 AUC after training: 0.6130867709815079
User 59671 does not improve AUC. Reverting changes.
Training on augumented user 76195 12/50 current_auc = 0.6159317211948792
User 76195 AUC after training: 0.6145092460881935
User 76195 does not improve AUC. Reverting changes.
Training on augumented user 50641 13/50 current_auc = 0.6159317211948792
User 50641 AUC after training: 0.6116642958748222
User 50641 does not improve AUC. Reverting changes.
Training on augumented user 127491 14/50 current_auc = 0.6159317211948792
User 127491 AUC after training: 0.6145092460881935
User 127491 does not improve AUC. Reverting changes.
Training on augumented user 75700 15/50 current_auc = 0.6159317211948792
User 75700 AUC after training: 0.6145092460881935
User 75700 does not improve AUC. Reverting changes.
Training on augumented user 17440 16/50 current_auc = 0.6159317211948792
User 17440 AUC after training: 0.6159317211948792
User 17440 does not improve AUC. Reverting changes.
Training on augumented user 106625 17/50 current_auc = 0.6159317211948792
User 106625 AUC after training: 0.6145092460881935
User 106625 does not improve AUC. Reverting changes.
Training on augumented user 9857 18/50 current_auc = 0.6159317211948792
User 9857 AUC after training: 0.6130867709815079
User 9857 does not improve AUC. Reverting changes.
Training on augumented user 10014 19/50 current_auc = 0.6159317211948792
User 10014 AUC after training: 0.6145092460881935
User 10014 does not improve AUC. Reverting changes.
Training on augumented user 97628 20/50 current_auc = 0.6159317211948792
User 97628 AUC after training: 0.6145092460881935
User 97628 does not improve AUC. Reverting changes.
Training on augumented user 86444 21/50 current_auc = 0.6159317211948792
User 86444 AUC after training: 0.620199146514936
User 86444 improves AUC. Keeping the model.
Training on augumented user 131155 22/50 current_auc = 0.620199146514936
User 131155 AUC after training: 0.620199146514936
User 131155 does not improve AUC. Reverting changes.
Training on augumented user 80795 23/50 current_auc = 0.620199146514936
User 80795 AUC after training: 0.6187766714082503
User 80795 does not improve AUC. Reverting changes.
Training on augumented user 5717 24/50 current_auc = 0.620199146514936
User 5717 AUC after training: 0.6187766714082503
User 5717 does not improve AUC. Reverting changes.
Training on augumented user 28847 25/50 current_auc = 0.620199146514936
User 28847 AUC after training: 0.6187766714082503
User 28847 does not improve AUC. Reverting changes.
Training on augumented user 4702 26/50 current_auc = 0.620199146514936
User 4702 AUC after training: 0.620199146514936
User 4702 does not improve AUC. Reverting changes.
Training on augumented user 61426 27/50 current_auc = 0.620199146514936
User 61426 AUC after training: 0.620199146514936
User 61426 does not improve AUC. Reverting changes.
Training on augumented user 63584 28/50 current_auc = 0.620199146514936
User 63584 AUC after training: 0.6187766714082503
User 63584 does not improve AUC. Reverting changes.
Training on augumented user 69571 29/50 current_auc = 0.620199146514936
User 69571 AUC after training: 0.620199146514936
User 69571 does not improve AUC. Reverting changes.
Training on augumented user 136956 30/50 current_auc = 0.620199146514936
User 136956 AUC after training: 0.620199146514936
User 136956 does not improve AUC. Reverting changes.
Training on augumented user 33251 31/50 current_auc = 0.620199146514936
User 33251 AUC after training: 0.6187766714082503
User 33251 does not improve AUC. Reverting changes.
Training on augumented user 44486 32/50 current_auc = 0.620199146514936
User 44486 AUC after training: 0.6173541963015647
User 44486 does not improve AUC. Reverting changes.
Training on augumented user 120897 33/50 current_auc = 0.620199146514936
User 120897 AUC after training: 0.6187766714082503
User 120897 does not improve AUC. Reverting changes.
Training on augumented user 44730 34/50 current_auc = 0.620199146514936
User 44730 AUC after training: 0.6187766714082503
User 44730 does not improve AUC. Reverting changes.
Training on augumented user 119817 35/50 current_auc = 0.620199146514936
User 119817 AUC after training: 0.620199146514936
User 119817 does not improve AUC. Reverting changes.
Training on augumented user 115867 36/50 current_auc = 0.620199146514936
User 115867 AUC after training: 0.6187766714082504
User 115867 does not improve AUC. Reverting changes.
Training on augumented user 103345 37/50 current_auc = 0.620199146514936
User 103345 AUC after training: 0.6173541963015647
User 103345 does not improve AUC. Reverting changes.
Training on augumented user 91002 38/50 current_auc = 0.620199146514936
User 91002 AUC after training: 0.620199146514936
User 91002 does not improve AUC. Reverting changes.
Training on augumented user 12243 39/50 current_auc = 0.620199146514936
User 12243 AUC after training: 0.620199146514936
User 12243 does not improve AUC. Reverting changes.
Training on augumented user 31464 40/50 current_auc = 0.620199146514936
User 31464 AUC after training: 0.620199146514936
User 31464 does not improve AUC. Reverting changes.
Training on augumented user 72975 41/50 current_auc = 0.620199146514936
User 72975 AUC after training: 0.6216216216216217
User 72975 improves AUC. Keeping the model.
Training on augumented user 52671 42/50 current_auc = 0.6216216216216217
User 52671 AUC after training: 0.6244665718349929
User 52671 improves AUC. Keeping the model.
Training on augumented user 6287 43/50 current_auc = 0.6244665718349929
User 6287 AUC after training: 0.6230440967283073
User 6287 does not improve AUC. Reverting changes.
Training on augumented user 94534 44/50 current_auc = 0.6244665718349929
User 94534 AUC after training: 0.6187766714082504
User 94534 does not improve AUC. Reverting changes.
Training on augumented user 81410 45/50 current_auc = 0.6244665718349929
User 81410 AUC after training: 0.6216216216216217
User 81410 does not improve AUC. Reverting changes.
Training on augumented user 99207 46/50 current_auc = 0.6244665718349929
User 99207 AUC after training: 0.6216216216216217
User 99207 does not improve AUC. Reverting changes.
Training on augumented user 106123 47/50 current_auc = 0.6244665718349929
User 106123 AUC after training: 0.6187766714082504
User 106123 does not improve AUC. Reverting changes.
Training on augumented user 9463 48/50 current_auc = 0.6244665718349929
User 9463 AUC after training: 0.6230440967283073
User 9463 does not improve AUC. Reverting changes.
Training on augumented user 27160 49/50 current_auc = 0.6244665718349929
User 27160 AUC after training: 0.6173541963015647
User 27160 does not improve AUC. Reverting changes.
[2024-12-02 17:45:30.188373] start test user 56325 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:30.760392] start test user 56325 14/568 recall augumented users by random, augumented_users = [66333, 56523, 85260, 92324, 1109, 45775, 80670, 5225, 85216, 4607, 138031, 33725, 66864, 86541, 88713, 95128, 12037, 117906, 60518, 27434, 47011, 111700, 70575, 94460, 37991, 64694, 12332, 50669, 87720, 82421, 40378, 90330, 51963, 124052, 39505, 88112, 98326, 126085, 76984, 50982, 84147, 78308, 84602, 118580, 84289, 85248, 76300, 52678, 33779, 100534]
[2024-12-02 17:45:30.794316] user = 56325 Cloud 14/568
[2024-12-02 17:45:30.803935] user = 56325 Local 14/568
[2024-12-02 17:45:30.830353] user = 56325 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:34.613875] user = 56325 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 66333 0/50 current_auc = 0.625
User 66333 AUC after training: 0.625
User 66333 does not improve AUC. Reverting changes.
Training on augumented user 56523 1/50 current_auc = 0.625
User 56523 AUC after training: 0.625
User 56523 does not improve AUC. Reverting changes.
Training on augumented user 85260 2/50 current_auc = 0.625
User 85260 AUC after training: 0.625
User 85260 does not improve AUC. Reverting changes.
Training on augumented user 92324 3/50 current_auc = 0.625
User 92324 AUC after training: 0.625
User 92324 does not improve AUC. Reverting changes.
Training on augumented user 1109 4/50 current_auc = 0.625
User 1109 AUC after training: 0.625
User 1109 does not improve AUC. Reverting changes.
Training on augumented user 45775 5/50 current_auc = 0.625
User 45775 AUC after training: 0.625
User 45775 does not improve AUC. Reverting changes.
Training on augumented user 80670 6/50 current_auc = 0.625
User 80670 AUC after training: 0.625
User 80670 does not improve AUC. Reverting changes.
Training on augumented user 5225 7/50 current_auc = 0.625
User 5225 AUC after training: 0.625
User 5225 does not improve AUC. Reverting changes.
Training on augumented user 85216 8/50 current_auc = 0.625
User 85216 AUC after training: 0.625
User 85216 does not improve AUC. Reverting changes.
Training on augumented user 4607 9/50 current_auc = 0.625
User 4607 AUC after training: 0.625
User 4607 does not improve AUC. Reverting changes.
Training on augumented user 138031 10/50 current_auc = 0.625
User 138031 AUC after training: 0.625
User 138031 does not improve AUC. Reverting changes.
Training on augumented user 33725 11/50 current_auc = 0.625
User 33725 AUC after training: 0.625
User 33725 does not improve AUC. Reverting changes.
Training on augumented user 66864 12/50 current_auc = 0.625
User 66864 AUC after training: 0.625
User 66864 does not improve AUC. Reverting changes.
Training on augumented user 86541 13/50 current_auc = 0.625
User 86541 AUC after training: 0.625
User 86541 does not improve AUC. Reverting changes.
Training on augumented user 88713 14/50 current_auc = 0.625
User 88713 AUC after training: 0.625
User 88713 does not improve AUC. Reverting changes.
Training on augumented user 95128 15/50 current_auc = 0.625
User 95128 AUC after training: 0.625
User 95128 does not improve AUC. Reverting changes.
Training on augumented user 12037 16/50 current_auc = 0.625
User 12037 AUC after training: 0.625
User 12037 does not improve AUC. Reverting changes.
Training on augumented user 117906 17/50 current_auc = 0.625
User 117906 AUC after training: 0.625
User 117906 does not improve AUC. Reverting changes.
Training on augumented user 60518 18/50 current_auc = 0.625
User 60518 AUC after training: 0.625
User 60518 does not improve AUC. Reverting changes.
Training on augumented user 27434 19/50 current_auc = 0.625
User 27434 AUC after training: 0.625
User 27434 does not improve AUC. Reverting changes.
Training on augumented user 47011 20/50 current_auc = 0.625
User 47011 AUC after training: 0.625
User 47011 does not improve AUC. Reverting changes.
Training on augumented user 111700 21/50 current_auc = 0.625
User 111700 AUC after training: 0.625
User 111700 does not improve AUC. Reverting changes.
Training on augumented user 70575 22/50 current_auc = 0.625
User 70575 AUC after training: 0.625
User 70575 does not improve AUC. Reverting changes.
Training on augumented user 94460 23/50 current_auc = 0.625
User 94460 AUC after training: 0.625
User 94460 does not improve AUC. Reverting changes.
Training on augumented user 37991 24/50 current_auc = 0.625
User 37991 AUC after training: 0.625
User 37991 does not improve AUC. Reverting changes.
Training on augumented user 64694 25/50 current_auc = 0.625
User 64694 AUC after training: 0.625
User 64694 does not improve AUC. Reverting changes.
Training on augumented user 12332 26/50 current_auc = 0.625
User 12332 AUC after training: 0.625
User 12332 does not improve AUC. Reverting changes.
Training on augumented user 50669 27/50 current_auc = 0.625
User 50669 AUC after training: 0.625
User 50669 does not improve AUC. Reverting changes.
Training on augumented user 87720 28/50 current_auc = 0.625
User 87720 AUC after training: 0.625
User 87720 does not improve AUC. Reverting changes.
Training on augumented user 82421 29/50 current_auc = 0.625
User 82421 AUC after training: 0.625
User 82421 does not improve AUC. Reverting changes.
Training on augumented user 40378 30/50 current_auc = 0.625
User 40378 AUC after training: 0.625
User 40378 does not improve AUC. Reverting changes.
Training on augumented user 90330 31/50 current_auc = 0.625
User 90330 AUC after training: 0.625
User 90330 does not improve AUC. Reverting changes.
Training on augumented user 51963 32/50 current_auc = 0.625
User 51963 AUC after training: 0.625
User 51963 does not improve AUC. Reverting changes.
Training on augumented user 124052 33/50 current_auc = 0.625
User 124052 AUC after training: 0.625
User 124052 does not improve AUC. Reverting changes.
Training on augumented user 39505 34/50 current_auc = 0.625
User 39505 AUC after training: 0.625
User 39505 does not improve AUC. Reverting changes.
Training on augumented user 88112 35/50 current_auc = 0.625
User 88112 AUC after training: 0.625
User 88112 does not improve AUC. Reverting changes.
Training on augumented user 98326 36/50 current_auc = 0.625
User 98326 AUC after training: 0.625
User 98326 does not improve AUC. Reverting changes.
Training on augumented user 126085 37/50 current_auc = 0.625
User 126085 AUC after training: 0.625
User 126085 does not improve AUC. Reverting changes.
Training on augumented user 76984 38/50 current_auc = 0.625
User 76984 AUC after training: 0.625
User 76984 does not improve AUC. Reverting changes.
Training on augumented user 50982 39/50 current_auc = 0.625
User 50982 AUC after training: 0.625
User 50982 does not improve AUC. Reverting changes.
Training on augumented user 84147 40/50 current_auc = 0.625
User 84147 AUC after training: 0.625
User 84147 does not improve AUC. Reverting changes.
Training on augumented user 78308 41/50 current_auc = 0.625
User 78308 AUC after training: 0.625
User 78308 does not improve AUC. Reverting changes.
Training on augumented user 84602 42/50 current_auc = 0.625
User 84602 AUC after training: 0.625
User 84602 does not improve AUC. Reverting changes.
Training on augumented user 118580 43/50 current_auc = 0.625
User 118580 AUC after training: 0.625
User 118580 does not improve AUC. Reverting changes.
Training on augumented user 84289 44/50 current_auc = 0.625
User 84289 AUC after training: 0.625
User 84289 does not improve AUC. Reverting changes.
Training on augumented user 85248 45/50 current_auc = 0.625
User 85248 AUC after training: 0.625
User 85248 does not improve AUC. Reverting changes.
Training on augumented user 76300 46/50 current_auc = 0.625
User 76300 AUC after training: 0.625
User 76300 does not improve AUC. Reverting changes.
Training on augumented user 52678 47/50 current_auc = 0.625
User 52678 AUC after training: 0.625
User 52678 does not improve AUC. Reverting changes.
Training on augumented user 33779 48/50 current_auc = 0.625
User 33779 AUC after training: 0.625
User 33779 does not improve AUC. Reverting changes.
Training on augumented user 100534 49/50 current_auc = 0.625
User 100534 AUC after training: 0.625
User 100534 does not improve AUC. Reverting changes.
[2024-12-02 17:46:02.213496] start test user 56342 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:02.616644] start test user 56342 15/568 recall augumented users by random, augumented_users = [83432, 101302, 66834, 46220, 36856, 58892, 46418, 74188, 122850, 91044, 51772, 56824, 29344, 138438, 94422, 50423, 130727, 97320, 23509, 127334, 97274, 3256, 115189, 103373, 11955, 127297, 120680, 64427, 95976, 900, 113340, 38782, 25996, 26583, 51649, 133677, 135746, 137265, 65718, 79469, 99154, 2440, 6725, 3504, 23833, 36593, 125507, 3560, 132922, 93217]
[2024-12-02 17:46:02.632309] user = 56342 Cloud 15/568
[2024-12-02 17:46:02.641512] user = 56342 Local 15/568
[2024-12-02 17:46:02.709819] user = 56342 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:04.794449] user = 56342 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 83432 0/50 current_auc = 1.0
User 83432 AUC after training: 1.0
User 83432 does not improve AUC. Reverting changes.
Training on augumented user 101302 1/50 current_auc = 1.0
User 101302 AUC after training: 1.0
User 101302 does not improve AUC. Reverting changes.
Training on augumented user 66834 2/50 current_auc = 1.0
User 66834 AUC after training: 1.0
User 66834 does not improve AUC. Reverting changes.
Training on augumented user 46220 3/50 current_auc = 1.0
User 46220 AUC after training: 1.0
User 46220 does not improve AUC. Reverting changes.
Training on augumented user 36856 4/50 current_auc = 1.0
User 36856 AUC after training: 1.0
User 36856 does not improve AUC. Reverting changes.
Training on augumented user 58892 5/50 current_auc = 1.0
User 58892 AUC after training: 1.0
User 58892 does not improve AUC. Reverting changes.
Training on augumented user 46418 6/50 current_auc = 1.0
User 46418 AUC after training: 1.0
User 46418 does not improve AUC. Reverting changes.
Training on augumented user 74188 7/50 current_auc = 1.0
User 74188 AUC after training: 1.0
User 74188 does not improve AUC. Reverting changes.
Training on augumented user 122850 8/50 current_auc = 1.0
User 122850 AUC after training: 1.0
User 122850 does not improve AUC. Reverting changes.
Training on augumented user 91044 9/50 current_auc = 1.0
User 91044 AUC after training: 1.0
User 91044 does not improve AUC. Reverting changes.
Training on augumented user 51772 10/50 current_auc = 1.0
User 51772 AUC after training: 1.0
User 51772 does not improve AUC. Reverting changes.
Training on augumented user 56824 11/50 current_auc = 1.0
User 56824 AUC after training: 1.0
User 56824 does not improve AUC. Reverting changes.
Training on augumented user 29344 12/50 current_auc = 1.0
User 29344 AUC after training: 1.0
User 29344 does not improve AUC. Reverting changes.
Training on augumented user 138438 13/50 current_auc = 1.0
User 138438 AUC after training: 1.0
User 138438 does not improve AUC. Reverting changes.
Training on augumented user 94422 14/50 current_auc = 1.0
User 94422 AUC after training: 1.0
User 94422 does not improve AUC. Reverting changes.
Training on augumented user 50423 15/50 current_auc = 1.0
User 50423 AUC after training: 1.0
User 50423 does not improve AUC. Reverting changes.
Training on augumented user 130727 16/50 current_auc = 1.0
User 130727 AUC after training: 1.0
User 130727 does not improve AUC. Reverting changes.
Training on augumented user 97320 17/50 current_auc = 1.0
User 97320 AUC after training: 1.0
User 97320 does not improve AUC. Reverting changes.
Training on augumented user 23509 18/50 current_auc = 1.0
User 23509 AUC after training: 1.0
User 23509 does not improve AUC. Reverting changes.
Training on augumented user 127334 19/50 current_auc = 1.0
User 127334 AUC after training: 1.0
User 127334 does not improve AUC. Reverting changes.
Training on augumented user 97274 20/50 current_auc = 1.0
User 97274 AUC after training: 1.0
User 97274 does not improve AUC. Reverting changes.
Training on augumented user 3256 21/50 current_auc = 1.0
User 3256 AUC after training: 1.0
User 3256 does not improve AUC. Reverting changes.
Training on augumented user 115189 22/50 current_auc = 1.0
User 115189 AUC after training: 1.0
User 115189 does not improve AUC. Reverting changes.
Training on augumented user 103373 23/50 current_auc = 1.0
User 103373 AUC after training: 1.0
User 103373 does not improve AUC. Reverting changes.
Training on augumented user 11955 24/50 current_auc = 1.0
User 11955 AUC after training: 1.0
User 11955 does not improve AUC. Reverting changes.
Training on augumented user 127297 25/50 current_auc = 1.0
User 127297 AUC after training: 1.0
User 127297 does not improve AUC. Reverting changes.
Training on augumented user 120680 26/50 current_auc = 1.0
User 120680 AUC after training: 1.0
User 120680 does not improve AUC. Reverting changes.
Training on augumented user 64427 27/50 current_auc = 1.0
User 64427 AUC after training: 1.0
User 64427 does not improve AUC. Reverting changes.
Training on augumented user 95976 28/50 current_auc = 1.0
User 95976 AUC after training: 1.0
User 95976 does not improve AUC. Reverting changes.
Training on augumented user 900 29/50 current_auc = 1.0
User 900 AUC after training: 1.0
User 900 does not improve AUC. Reverting changes.
Training on augumented user 113340 30/50 current_auc = 1.0
User 113340 AUC after training: 1.0
User 113340 does not improve AUC. Reverting changes.
Training on augumented user 38782 31/50 current_auc = 1.0
User 38782 AUC after training: 1.0
User 38782 does not improve AUC. Reverting changes.
Training on augumented user 25996 32/50 current_auc = 1.0
User 25996 AUC after training: 1.0
User 25996 does not improve AUC. Reverting changes.
Training on augumented user 26583 33/50 current_auc = 1.0
User 26583 AUC after training: 1.0
User 26583 does not improve AUC. Reverting changes.
Training on augumented user 51649 34/50 current_auc = 1.0
User 51649 AUC after training: 1.0
User 51649 does not improve AUC. Reverting changes.
Training on augumented user 133677 35/50 current_auc = 1.0
User 133677 AUC after training: 1.0
User 133677 does not improve AUC. Reverting changes.
Training on augumented user 135746 36/50 current_auc = 1.0
User 135746 AUC after training: 1.0
User 135746 does not improve AUC. Reverting changes.
Training on augumented user 137265 37/50 current_auc = 1.0
User 137265 AUC after training: 1.0
User 137265 does not improve AUC. Reverting changes.
Training on augumented user 65718 38/50 current_auc = 1.0
User 65718 AUC after training: 1.0
User 65718 does not improve AUC. Reverting changes.
Training on augumented user 79469 39/50 current_auc = 1.0
User 79469 AUC after training: 1.0
User 79469 does not improve AUC. Reverting changes.
Training on augumented user 99154 40/50 current_auc = 1.0
User 99154 AUC after training: 1.0
User 99154 does not improve AUC. Reverting changes.
Training on augumented user 2440 41/50 current_auc = 1.0
User 2440 AUC after training: 1.0
User 2440 does not improve AUC. Reverting changes.
Training on augumented user 6725 42/50 current_auc = 1.0
User 6725 AUC after training: 1.0
User 6725 does not improve AUC. Reverting changes.
Training on augumented user 3504 43/50 current_auc = 1.0
User 3504 AUC after training: 1.0
User 3504 does not improve AUC. Reverting changes.
Training on augumented user 23833 44/50 current_auc = 1.0
User 23833 AUC after training: 1.0
User 23833 does not improve AUC. Reverting changes.
Training on augumented user 36593 45/50 current_auc = 1.0
User 36593 AUC after training: 1.0
User 36593 does not improve AUC. Reverting changes.
Training on augumented user 125507 46/50 current_auc = 1.0
User 125507 AUC after training: 1.0
User 125507 does not improve AUC. Reverting changes.
Training on augumented user 3560 47/50 current_auc = 1.0
User 3560 AUC after training: 1.0
User 3560 does not improve AUC. Reverting changes.
Training on augumented user 132922 48/50 current_auc = 1.0
User 132922 AUC after training: 1.0
User 132922 does not improve AUC. Reverting changes.
Training on augumented user 93217 49/50 current_auc = 1.0
User 93217 AUC after training: 1.0
User 93217 does not improve AUC. Reverting changes.
[2024-12-02 17:46:34.215090] start test user 56358 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:34.690800] start test user 56358 16/568 recall augumented users by random, augumented_users = [73034, 23602, 111246, 776, 53508, 23877, 36265, 94653, 59885, 98786, 25467, 75213, 95255, 55219, 37311, 8450, 121098, 126590, 109369, 300, 123201, 2703, 131688, 54220, 56780, 124785, 87188, 113874, 3927, 130209, 82928, 62987, 107038, 33948, 4975, 51594, 3063, 111766, 133750, 32331, 127175, 137026, 89620, 4139, 62081, 41454, 61097, 43299, 71589, 11672]
[2024-12-02 17:46:34.706521] user = 56358 Cloud 16/568
[2024-12-02 17:46:34.716624] user = 56358 Local 16/568
[2024-12-02 17:46:34.846977] user = 56358 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:37.435084] user = 56358 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 73034 0/50 current_auc = 0.8333333333333334
User 73034 AUC after training: 0.8333333333333334
User 73034 does not improve AUC. Reverting changes.
Training on augumented user 23602 1/50 current_auc = 0.8333333333333334
User 23602 AUC after training: 0.8333333333333334
User 23602 does not improve AUC. Reverting changes.
Training on augumented user 111246 2/50 current_auc = 0.8333333333333334
User 111246 AUC after training: 0.8333333333333334
User 111246 does not improve AUC. Reverting changes.
Training on augumented user 776 3/50 current_auc = 0.8333333333333334
User 776 AUC after training: 0.8333333333333334
User 776 does not improve AUC. Reverting changes.
Training on augumented user 53508 4/50 current_auc = 0.8333333333333334
User 53508 AUC after training: 0.8333333333333334
User 53508 does not improve AUC. Reverting changes.
Training on augumented user 23877 5/50 current_auc = 0.8333333333333334
User 23877 AUC after training: 0.8333333333333334
User 23877 does not improve AUC. Reverting changes.
Training on augumented user 36265 6/50 current_auc = 0.8333333333333334
User 36265 AUC after training: 0.8333333333333334
User 36265 does not improve AUC. Reverting changes.
Training on augumented user 94653 7/50 current_auc = 0.8333333333333334
User 94653 AUC after training: 0.8333333333333334
User 94653 does not improve AUC. Reverting changes.
Training on augumented user 59885 8/50 current_auc = 0.8333333333333334
User 59885 AUC after training: 0.8333333333333334
User 59885 does not improve AUC. Reverting changes.
Training on augumented user 98786 9/50 current_auc = 0.8333333333333334
User 98786 AUC after training: 0.8333333333333334
User 98786 does not improve AUC. Reverting changes.
Training on augumented user 25467 10/50 current_auc = 0.8333333333333334
User 25467 AUC after training: 0.8333333333333334
User 25467 does not improve AUC. Reverting changes.
Training on augumented user 75213 11/50 current_auc = 0.8333333333333334
User 75213 AUC after training: 0.8333333333333334
User 75213 does not improve AUC. Reverting changes.
Training on augumented user 95255 12/50 current_auc = 0.8333333333333334
User 95255 AUC after training: 0.8333333333333334
User 95255 does not improve AUC. Reverting changes.
Training on augumented user 55219 13/50 current_auc = 0.8333333333333334
User 55219 AUC after training: 0.8333333333333334
User 55219 does not improve AUC. Reverting changes.
Training on augumented user 37311 14/50 current_auc = 0.8333333333333334
User 37311 AUC after training: 0.8333333333333334
User 37311 does not improve AUC. Reverting changes.
Training on augumented user 8450 15/50 current_auc = 0.8333333333333334
User 8450 AUC after training: 0.8333333333333334
User 8450 does not improve AUC. Reverting changes.
Training on augumented user 121098 16/50 current_auc = 0.8333333333333334
User 121098 AUC after training: 0.8333333333333334
User 121098 does not improve AUC. Reverting changes.
Training on augumented user 126590 17/50 current_auc = 0.8333333333333334
User 126590 AUC after training: 0.8333333333333334
User 126590 does not improve AUC. Reverting changes.
Training on augumented user 109369 18/50 current_auc = 0.8333333333333334
User 109369 AUC after training: 0.8333333333333334
User 109369 does not improve AUC. Reverting changes.
Training on augumented user 300 19/50 current_auc = 0.8333333333333334
User 300 AUC after training: 0.8333333333333334
User 300 does not improve AUC. Reverting changes.
Training on augumented user 123201 20/50 current_auc = 0.8333333333333334
User 123201 AUC after training: 0.8333333333333334
User 123201 does not improve AUC. Reverting changes.
Training on augumented user 2703 21/50 current_auc = 0.8333333333333334
User 2703 AUC after training: 0.8333333333333334
User 2703 does not improve AUC. Reverting changes.
Training on augumented user 131688 22/50 current_auc = 0.8333333333333334
User 131688 AUC after training: 0.8333333333333334
User 131688 does not improve AUC. Reverting changes.
Training on augumented user 54220 23/50 current_auc = 0.8333333333333334
User 54220 AUC after training: 0.8333333333333334
User 54220 does not improve AUC. Reverting changes.
Training on augumented user 56780 24/50 current_auc = 0.8333333333333334
User 56780 AUC after training: 0.8333333333333334
User 56780 does not improve AUC. Reverting changes.
Training on augumented user 124785 25/50 current_auc = 0.8333333333333334
User 124785 AUC after training: 0.8333333333333334
User 124785 does not improve AUC. Reverting changes.
Training on augumented user 87188 26/50 current_auc = 0.8333333333333334
User 87188 AUC after training: 0.8333333333333334
User 87188 does not improve AUC. Reverting changes.
Training on augumented user 113874 27/50 current_auc = 0.8333333333333334
User 113874 AUC after training: 0.8333333333333334
User 113874 does not improve AUC. Reverting changes.
Training on augumented user 3927 28/50 current_auc = 0.8333333333333334
User 3927 AUC after training: 0.8333333333333334
User 3927 does not improve AUC. Reverting changes.
Training on augumented user 130209 29/50 current_auc = 0.8333333333333334
User 130209 AUC after training: 0.8333333333333334
User 130209 does not improve AUC. Reverting changes.
Training on augumented user 82928 30/50 current_auc = 0.8333333333333334
User 82928 AUC after training: 0.8333333333333334
User 82928 does not improve AUC. Reverting changes.
Training on augumented user 62987 31/50 current_auc = 0.8333333333333334
User 62987 AUC after training: 0.8333333333333334
User 62987 does not improve AUC. Reverting changes.
Training on augumented user 107038 32/50 current_auc = 0.8333333333333334
User 107038 AUC after training: 0.8333333333333334
User 107038 does not improve AUC. Reverting changes.
Training on augumented user 33948 33/50 current_auc = 0.8333333333333334
User 33948 AUC after training: 0.8333333333333334
User 33948 does not improve AUC. Reverting changes.
Training on augumented user 4975 34/50 current_auc = 0.8333333333333334
User 4975 AUC after training: 0.8333333333333334
User 4975 does not improve AUC. Reverting changes.
Training on augumented user 51594 35/50 current_auc = 0.8333333333333334
User 51594 AUC after training: 0.8333333333333334
User 51594 does not improve AUC. Reverting changes.
Training on augumented user 3063 36/50 current_auc = 0.8333333333333334
User 3063 AUC after training: 0.8333333333333334
User 3063 does not improve AUC. Reverting changes.
Training on augumented user 111766 37/50 current_auc = 0.8333333333333334
User 111766 AUC after training: 0.8333333333333334
User 111766 does not improve AUC. Reverting changes.
Training on augumented user 133750 38/50 current_auc = 0.8333333333333334
User 133750 AUC after training: 0.8333333333333334
User 133750 does not improve AUC. Reverting changes.
Training on augumented user 32331 39/50 current_auc = 0.8333333333333334
User 32331 AUC after training: 0.8333333333333334
User 32331 does not improve AUC. Reverting changes.
Training on augumented user 127175 40/50 current_auc = 0.8333333333333334
User 127175 AUC after training: 0.8333333333333334
User 127175 does not improve AUC. Reverting changes.
Training on augumented user 137026 41/50 current_auc = 0.8333333333333334
User 137026 AUC after training: 0.8333333333333334
User 137026 does not improve AUC. Reverting changes.
Training on augumented user 89620 42/50 current_auc = 0.8333333333333334
User 89620 AUC after training: 0.8333333333333334
User 89620 does not improve AUC. Reverting changes.
Training on augumented user 4139 43/50 current_auc = 0.8333333333333334
User 4139 AUC after training: 0.8333333333333334
User 4139 does not improve AUC. Reverting changes.
Training on augumented user 62081 44/50 current_auc = 0.8333333333333334
User 62081 AUC after training: 0.8333333333333334
User 62081 does not improve AUC. Reverting changes.
Training on augumented user 41454 45/50 current_auc = 0.8333333333333334
User 41454 AUC after training: 0.8333333333333334
User 41454 does not improve AUC. Reverting changes.
Training on augumented user 61097 46/50 current_auc = 0.8333333333333334
User 61097 AUC after training: 0.8333333333333334
User 61097 does not improve AUC. Reverting changes.
Training on augumented user 43299 47/50 current_auc = 0.8333333333333334
User 43299 AUC after training: 0.8333333333333334
User 43299 does not improve AUC. Reverting changes.
Training on augumented user 71589 48/50 current_auc = 0.8333333333333334
User 71589 AUC after training: 0.8333333333333334
User 71589 does not improve AUC. Reverting changes.
Training on augumented user 11672 49/50 current_auc = 0.8333333333333334
User 11672 AUC after training: 0.8333333333333334
User 11672 does not improve AUC. Reverting changes.
[2024-12-02 17:47:05.910920] start test user 56367 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:06.746851] start test user 56367 17/568 recall augumented users by random, augumented_users = [9705, 29515, 79099, 49273, 31071, 86532, 44381, 36422, 45130, 64110, 119033, 46427, 81702, 49509, 20608, 11827, 97689, 25343, 105721, 82430, 44806, 4297, 3817, 5730, 55365, 126764, 31584, 130494, 75026, 114505, 32956, 47604, 34666, 19422, 128761, 71674, 15356, 33930, 124293, 3369, 26628, 24086, 108485, 102252, 26289, 129038, 114511, 133122, 12069, 104588]
[2024-12-02 17:47:06.772110] user = 56367 Cloud 17/568
[2024-12-02 17:47:06.796900] user = 56367 Local 17/568
[2024-12-02 17:47:06.923597] user = 56367 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:09.781963] user = 56367 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.557960381511372
Training on augumented user 9705 0/50 current_auc = 0.557960381511372
User 9705 AUC after training: 0.5561261922230374
User 9705 does not improve AUC. Reverting changes.
Training on augumented user 29515 1/50 current_auc = 0.557960381511372
User 29515 AUC after training: 0.5571349963316214
User 29515 does not improve AUC. Reverting changes.
Training on augumented user 79099 2/50 current_auc = 0.557960381511372
User 79099 AUC after training: 0.5574101247248716
User 79099 does not improve AUC. Reverting changes.
Training on augumented user 49273 3/50 current_auc = 0.557960381511372
User 49273 AUC after training: 0.5550256786500367
User 49273 does not improve AUC. Reverting changes.
Training on augumented user 31071 4/50 current_auc = 0.557960381511372
User 31071 AUC after training: 0.5563096111518708
User 31071 does not improve AUC. Reverting changes.
Training on augumented user 86532 5/50 current_auc = 0.557960381511372
User 86532 AUC after training: 0.5585106382978724
User 86532 improves AUC. Keeping the model.
Training on augumented user 44381 6/50 current_auc = 0.5585106382978724
User 44381 AUC after training: 0.5582355099046222
User 44381 does not improve AUC. Reverting changes.
Training on augumented user 36422 7/50 current_auc = 0.5585106382978724
User 36422 AUC after training: 0.5580520909757887
User 36422 does not improve AUC. Reverting changes.
Training on augumented user 45130 8/50 current_auc = 0.5585106382978724
User 45130 AUC after training: 0.558327219369039
User 45130 does not improve AUC. Reverting changes.
Training on augumented user 64110 9/50 current_auc = 0.5585106382978724
User 64110 AUC after training: 0.5579603815113721
User 64110 does not improve AUC. Reverting changes.
Training on augumented user 119033 10/50 current_auc = 0.5585106382978724
User 119033 AUC after training: 0.5576852531181218
User 119033 does not improve AUC. Reverting changes.
Training on augumented user 46427 11/50 current_auc = 0.5585106382978724
User 46427 AUC after training: 0.5563096111518708
User 46427 does not improve AUC. Reverting changes.
Training on augumented user 81702 12/50 current_auc = 0.5585106382978724
User 81702 AUC after training: 0.557960381511372
User 81702 does not improve AUC. Reverting changes.
Training on augumented user 49509 13/50 current_auc = 0.5585106382978724
User 49509 AUC after training: 0.5582355099046221
User 49509 does not improve AUC. Reverting changes.
Training on augumented user 20608 14/50 current_auc = 0.5585106382978724
User 20608 AUC after training: 0.5580520909757887
User 20608 does not improve AUC. Reverting changes.
Training on augumented user 11827 15/50 current_auc = 0.5585106382978724
User 11827 AUC after training: 0.5571349963316213
User 11827 does not improve AUC. Reverting changes.
Training on augumented user 97689 16/50 current_auc = 0.5585106382978724
User 97689 AUC after training: 0.5579603815113721
User 97689 does not improve AUC. Reverting changes.
Training on augumented user 25343 17/50 current_auc = 0.5585106382978724
User 25343 AUC after training: 0.557960381511372
User 25343 does not improve AUC. Reverting changes.
Training on augumented user 105721 18/50 current_auc = 0.5585106382978724
User 105721 AUC after training: 0.5588774761555393
User 105721 improves AUC. Keeping the model.
Training on augumented user 82430 19/50 current_auc = 0.5588774761555393
User 82430 AUC after training: 0.5591526045487893
User 82430 improves AUC. Keeping the model.
Training on augumented user 44806 20/50 current_auc = 0.5591526045487893
User 44806 AUC after training: 0.5591526045487895
User 44806 improves AUC. Keeping the model.
Training on augumented user 4297 21/50 current_auc = 0.5591526045487895
User 4297 AUC after training: 0.5588774761555393
User 4297 does not improve AUC. Reverting changes.
Training on augumented user 3817 22/50 current_auc = 0.5591526045487895
User 3817 AUC after training: 0.5589691856199559
User 3817 does not improve AUC. Reverting changes.
Training on augumented user 5730 23/50 current_auc = 0.5591526045487895
User 5730 AUC after training: 0.5590608950843727
User 5730 does not improve AUC. Reverting changes.
Training on augumented user 55365 24/50 current_auc = 0.5591526045487895
User 55365 AUC after training: 0.5587857666911225
User 55365 does not improve AUC. Reverting changes.
Training on augumented user 126764 25/50 current_auc = 0.5591526045487895
User 126764 AUC after training: 0.558969185619956
User 126764 does not improve AUC. Reverting changes.
Training on augumented user 31584 26/50 current_auc = 0.5591526045487895
User 31584 AUC after training: 0.5591526045487895
User 31584 does not improve AUC. Reverting changes.
Training on augumented user 130494 27/50 current_auc = 0.5591526045487895
User 130494 AUC after training: 0.558969185619956
User 130494 does not improve AUC. Reverting changes.
Training on augumented user 75026 28/50 current_auc = 0.5591526045487895
User 75026 AUC after training: 0.5556676449009538
User 75026 does not improve AUC. Reverting changes.
Training on augumented user 114505 29/50 current_auc = 0.5591526045487895
User 114505 AUC after training: 0.558969185619956
User 114505 does not improve AUC. Reverting changes.
Training on augumented user 32956 30/50 current_auc = 0.5591526045487895
User 32956 AUC after training: 0.5587857666911225
User 32956 does not improve AUC. Reverting changes.
Training on augumented user 47604 31/50 current_auc = 0.5591526045487895
User 47604 AUC after training: 0.5596111518708731
User 47604 improves AUC. Keeping the model.
Training on augumented user 34666 32/50 current_auc = 0.5596111518708731
User 34666 AUC after training: 0.5595194424064563
User 34666 does not improve AUC. Reverting changes.
Training on augumented user 19422 33/50 current_auc = 0.5596111518708731
User 19422 AUC after training: 0.5591526045487895
User 19422 does not improve AUC. Reverting changes.
Training on augumented user 128761 34/50 current_auc = 0.5596111518708731
User 128761 AUC after training: 0.5597945707997065
User 128761 improves AUC. Keeping the model.
Training on augumented user 71674 35/50 current_auc = 0.5597945707997065
User 71674 AUC after training: 0.5595194424064563
User 71674 does not improve AUC. Reverting changes.
Training on augumented user 15356 36/50 current_auc = 0.5597945707997065
User 15356 AUC after training: 0.559106749816581
User 15356 does not improve AUC. Reverting changes.
Training on augumented user 33930 37/50 current_auc = 0.5597945707997065
User 33930 AUC after training: 0.5595194424064563
User 33930 does not improve AUC. Reverting changes.
Training on augumented user 124293 38/50 current_auc = 0.5597945707997065
User 124293 AUC after training: 0.5591526045487895
User 124293 does not improve AUC. Reverting changes.
Training on augumented user 3369 39/50 current_auc = 0.5597945707997065
User 3369 AUC after training: 0.5593360234776228
User 3369 does not improve AUC. Reverting changes.
Training on augumented user 26628 40/50 current_auc = 0.5597945707997065
User 26628 AUC after training: 0.5598862802641233
User 26628 improves AUC. Keeping the model.
Training on augumented user 24086 41/50 current_auc = 0.5598862802641233
User 24086 AUC after training: 0.558327219369039
User 24086 does not improve AUC. Reverting changes.
Training on augumented user 108485 42/50 current_auc = 0.5598862802641233
User 108485 AUC after training: 0.5586482024944974
User 108485 does not improve AUC. Reverting changes.
Training on augumented user 102252 43/50 current_auc = 0.5598862802641233
User 102252 AUC after training: 0.553558327219369
User 102252 does not improve AUC. Reverting changes.
Training on augumented user 26289 44/50 current_auc = 0.5598862802641233
User 26289 AUC after training: 0.5605282465150404
User 26289 improves AUC. Keeping the model.
Training on augumented user 129038 45/50 current_auc = 0.5605282465150404
User 129038 AUC after training: 0.5603448275862069
User 129038 does not improve AUC. Reverting changes.
Training on augumented user 114511 46/50 current_auc = 0.5605282465150404
User 114511 AUC after training: 0.5608033749082906
User 114511 improves AUC. Keeping the model.
Training on augumented user 133122 47/50 current_auc = 0.5608033749082906
User 133122 AUC after training: 0.560986793837124
User 133122 improves AUC. Keeping the model.
Training on augumented user 12069 48/50 current_auc = 0.560986793837124
User 12069 AUC after training: 0.560986793837124
User 12069 does not improve AUC. Reverting changes.
Training on augumented user 104588 49/50 current_auc = 0.560986793837124
User 104588 AUC after training: 0.5594277329420397
User 104588 does not improve AUC. Reverting changes.
[2024-12-02 17:47:40.644650] start test user 56372 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:41.405468] start test user 56372 18/568 recall augumented users by random, augumented_users = [126489, 24473, 34621, 74313, 104079, 44967, 38996, 73142, 91356, 39236, 49774, 51955, 77302, 29193, 10909, 63056, 102444, 47646, 62242, 33402, 70979, 30945, 46357, 134104, 9847, 55758, 51549, 116465, 126298, 130827, 98071, 118191, 134227, 119622, 40924, 117102, 103935, 32396, 95121, 123081, 125721, 106455, 60018, 24738, 128578, 136539, 7787, 118007, 50543, 52177]
[2024-12-02 17:47:41.427066] user = 56372 Cloud 18/568
[2024-12-02 17:47:41.460265] user = 56372 Local 18/568
[2024-12-02 17:47:41.554709] user = 56372 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:44.168719] user = 56372 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.55875
Training on augumented user 126489 0/50 current_auc = 0.55875
User 126489 AUC after training: 0.5574999999999999
User 126489 does not improve AUC. Reverting changes.
Training on augumented user 24473 1/50 current_auc = 0.55875
User 24473 AUC after training: 0.5574999999999999
User 24473 does not improve AUC. Reverting changes.
Training on augumented user 34621 2/50 current_auc = 0.55875
User 34621 AUC after training: 0.5599999999999999
User 34621 improves AUC. Keeping the model.
Training on augumented user 74313 3/50 current_auc = 0.5599999999999999
User 74313 AUC after training: 0.55875
User 74313 does not improve AUC. Reverting changes.
Training on augumented user 104079 4/50 current_auc = 0.5599999999999999
User 104079 AUC after training: 0.55875
User 104079 does not improve AUC. Reverting changes.
Training on augumented user 44967 5/50 current_auc = 0.5599999999999999
User 44967 AUC after training: 0.5625
User 44967 improves AUC. Keeping the model.
Training on augumented user 38996 6/50 current_auc = 0.5625
User 38996 AUC after training: 0.56125
User 38996 does not improve AUC. Reverting changes.
Training on augumented user 73142 7/50 current_auc = 0.5625
User 73142 AUC after training: 0.56375
User 73142 improves AUC. Keeping the model.
Training on augumented user 91356 8/50 current_auc = 0.56375
User 91356 AUC after training: 0.5575000000000001
User 91356 does not improve AUC. Reverting changes.
Training on augumented user 39236 9/50 current_auc = 0.56375
User 39236 AUC after training: 0.56375
User 39236 does not improve AUC. Reverting changes.
Training on augumented user 49774 10/50 current_auc = 0.56375
User 49774 AUC after training: 0.5625
User 49774 does not improve AUC. Reverting changes.
Training on augumented user 51955 11/50 current_auc = 0.56375
User 51955 AUC after training: 0.56125
User 51955 does not improve AUC. Reverting changes.
Training on augumented user 77302 12/50 current_auc = 0.56375
User 77302 AUC after training: 0.56375
User 77302 does not improve AUC. Reverting changes.
Training on augumented user 29193 13/50 current_auc = 0.56375
User 29193 AUC after training: 0.5625
User 29193 does not improve AUC. Reverting changes.
Training on augumented user 10909 14/50 current_auc = 0.56375
User 10909 AUC after training: 0.5625
User 10909 does not improve AUC. Reverting changes.
Training on augumented user 63056 15/50 current_auc = 0.56375
User 63056 AUC after training: 0.5625
User 63056 does not improve AUC. Reverting changes.
Training on augumented user 102444 16/50 current_auc = 0.56375
User 102444 AUC after training: 0.56375
User 102444 does not improve AUC. Reverting changes.
Training on augumented user 47646 17/50 current_auc = 0.56375
User 47646 AUC after training: 0.56375
User 47646 does not improve AUC. Reverting changes.
Training on augumented user 62242 18/50 current_auc = 0.56375
User 62242 AUC after training: 0.5625
User 62242 does not improve AUC. Reverting changes.
Training on augumented user 33402 19/50 current_auc = 0.56375
User 33402 AUC after training: 0.5575
User 33402 does not improve AUC. Reverting changes.
Training on augumented user 70979 20/50 current_auc = 0.56375
User 70979 AUC after training: 0.5625
User 70979 does not improve AUC. Reverting changes.
Training on augumented user 30945 21/50 current_auc = 0.56375
User 30945 AUC after training: 0.5625
User 30945 does not improve AUC. Reverting changes.
Training on augumented user 46357 22/50 current_auc = 0.56375
User 46357 AUC after training: 0.5625
User 46357 does not improve AUC. Reverting changes.
Training on augumented user 134104 23/50 current_auc = 0.56375
User 134104 AUC after training: 0.56375
User 134104 does not improve AUC. Reverting changes.
Training on augumented user 9847 24/50 current_auc = 0.56375
User 9847 AUC after training: 0.5625
User 9847 does not improve AUC. Reverting changes.
Training on augumented user 55758 25/50 current_auc = 0.56375
User 55758 AUC after training: 0.56125
User 55758 does not improve AUC. Reverting changes.
Training on augumented user 51549 26/50 current_auc = 0.56375
User 51549 AUC after training: 0.55875
User 51549 does not improve AUC. Reverting changes.
Training on augumented user 116465 27/50 current_auc = 0.56375
User 116465 AUC after training: 0.5625
User 116465 does not improve AUC. Reverting changes.
Training on augumented user 126298 28/50 current_auc = 0.56375
User 126298 AUC after training: 0.5587500000000001
User 126298 does not improve AUC. Reverting changes.
Training on augumented user 130827 29/50 current_auc = 0.56375
User 130827 AUC after training: 0.5575
User 130827 does not improve AUC. Reverting changes.
Training on augumented user 98071 30/50 current_auc = 0.56375
User 98071 AUC after training: 0.5587500000000001
User 98071 does not improve AUC. Reverting changes.
Training on augumented user 118191 31/50 current_auc = 0.56375
User 118191 AUC after training: 0.56
User 118191 does not improve AUC. Reverting changes.
Training on augumented user 134227 32/50 current_auc = 0.56375
User 134227 AUC after training: 0.5625
User 134227 does not improve AUC. Reverting changes.
Training on augumented user 119622 33/50 current_auc = 0.56375
User 119622 AUC after training: 0.56375
User 119622 does not improve AUC. Reverting changes.
Training on augumented user 40924 34/50 current_auc = 0.56375
User 40924 AUC after training: 0.5575
User 40924 does not improve AUC. Reverting changes.
Training on augumented user 117102 35/50 current_auc = 0.56375
User 117102 AUC after training: 0.56125
User 117102 does not improve AUC. Reverting changes.
Training on augumented user 103935 36/50 current_auc = 0.56375
User 103935 AUC after training: 0.5625
User 103935 does not improve AUC. Reverting changes.
Training on augumented user 32396 37/50 current_auc = 0.56375
User 32396 AUC after training: 0.5625
User 32396 does not improve AUC. Reverting changes.
Training on augumented user 95121 38/50 current_auc = 0.56375
User 95121 AUC after training: 0.5625
User 95121 does not improve AUC. Reverting changes.
Training on augumented user 123081 39/50 current_auc = 0.56375
User 123081 AUC after training: 0.5625
User 123081 does not improve AUC. Reverting changes.
Training on augumented user 125721 40/50 current_auc = 0.56375
User 125721 AUC after training: 0.5662499999999999
User 125721 improves AUC. Keeping the model.
Training on augumented user 106455 41/50 current_auc = 0.5662499999999999
User 106455 AUC after training: 0.56625
User 106455 improves AUC. Keeping the model.
Training on augumented user 60018 42/50 current_auc = 0.56625
User 60018 AUC after training: 0.56625
User 60018 does not improve AUC. Reverting changes.
Training on augumented user 24738 43/50 current_auc = 0.56625
User 24738 AUC after training: 0.5625000000000001
User 24738 does not improve AUC. Reverting changes.
Training on augumented user 128578 44/50 current_auc = 0.56625
User 128578 AUC after training: 0.5687500000000001
User 128578 improves AUC. Keeping the model.
Training on augumented user 136539 45/50 current_auc = 0.5687500000000001
User 136539 AUC after training: 0.56625
User 136539 does not improve AUC. Reverting changes.
Training on augumented user 7787 46/50 current_auc = 0.5687500000000001
User 7787 AUC after training: 0.57625
User 7787 improves AUC. Keeping the model.
Training on augumented user 118007 47/50 current_auc = 0.57625
User 118007 AUC after training: 0.57375
User 118007 does not improve AUC. Reverting changes.
Training on augumented user 50543 48/50 current_auc = 0.57625
User 50543 AUC after training: 0.5725
User 50543 does not improve AUC. Reverting changes.
Training on augumented user 52177 49/50 current_auc = 0.57625
User 52177 AUC after training: 0.5725
User 52177 does not improve AUC. Reverting changes.
[2024-12-02 17:48:14.360666] start test user 56402 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:14.999488] start test user 56402 19/568 recall augumented users by random, augumented_users = [37643, 3477, 13610, 29426, 70580, 92585, 127577, 40645, 79786, 130314, 54506, 35593, 9504, 43528, 136448, 74324, 11150, 37829, 16371, 96470, 5655, 48963, 56964, 33872, 10855, 11436, 42930, 65096, 128381, 603, 55749, 17830, 131833, 136870, 14088, 59744, 106196, 57468, 86303, 69821, 134976, 45661, 123779, 105607, 104725, 98672, 60432, 25946, 120889, 136996]
[2024-12-02 17:48:15.014388] user = 56402 Cloud 19/568
[2024-12-02 17:48:15.037150] user = 56402 Local 19/568
[2024-12-02 17:48:15.133051] user = 56402 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:17.713758] user = 56402 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 37643 0/50 current_auc = 1.0
User 37643 AUC after training: 1.0
User 37643 does not improve AUC. Reverting changes.
Training on augumented user 3477 1/50 current_auc = 1.0
User 3477 AUC after training: 1.0
User 3477 does not improve AUC. Reverting changes.
Training on augumented user 13610 2/50 current_auc = 1.0
User 13610 AUC after training: 1.0
User 13610 does not improve AUC. Reverting changes.
Training on augumented user 29426 3/50 current_auc = 1.0
User 29426 AUC after training: 1.0
User 29426 does not improve AUC. Reverting changes.
Training on augumented user 70580 4/50 current_auc = 1.0
User 70580 AUC after training: 1.0
User 70580 does not improve AUC. Reverting changes.
Training on augumented user 92585 5/50 current_auc = 1.0
User 92585 AUC after training: 1.0
User 92585 does not improve AUC. Reverting changes.
Training on augumented user 127577 6/50 current_auc = 1.0
User 127577 AUC after training: 1.0
User 127577 does not improve AUC. Reverting changes.
Training on augumented user 40645 7/50 current_auc = 1.0
User 40645 AUC after training: 1.0
User 40645 does not improve AUC. Reverting changes.
Training on augumented user 79786 8/50 current_auc = 1.0
User 79786 AUC after training: 1.0
User 79786 does not improve AUC. Reverting changes.
Training on augumented user 130314 9/50 current_auc = 1.0
User 130314 AUC after training: 1.0
User 130314 does not improve AUC. Reverting changes.
Training on augumented user 54506 10/50 current_auc = 1.0
User 54506 AUC after training: 1.0
User 54506 does not improve AUC. Reverting changes.
Training on augumented user 35593 11/50 current_auc = 1.0
User 35593 AUC after training: 1.0
User 35593 does not improve AUC. Reverting changes.
Training on augumented user 9504 12/50 current_auc = 1.0
User 9504 AUC after training: 1.0
User 9504 does not improve AUC. Reverting changes.
Training on augumented user 43528 13/50 current_auc = 1.0
User 43528 AUC after training: 1.0
User 43528 does not improve AUC. Reverting changes.
Training on augumented user 136448 14/50 current_auc = 1.0
User 136448 AUC after training: 1.0
User 136448 does not improve AUC. Reverting changes.
Training on augumented user 74324 15/50 current_auc = 1.0
User 74324 AUC after training: 1.0
User 74324 does not improve AUC. Reverting changes.
Training on augumented user 11150 16/50 current_auc = 1.0
User 11150 AUC after training: 1.0
User 11150 does not improve AUC. Reverting changes.
Training on augumented user 37829 17/50 current_auc = 1.0
User 37829 AUC after training: 1.0
User 37829 does not improve AUC. Reverting changes.
Training on augumented user 16371 18/50 current_auc = 1.0
User 16371 AUC after training: 1.0
User 16371 does not improve AUC. Reverting changes.
Training on augumented user 96470 19/50 current_auc = 1.0
User 96470 AUC after training: 1.0
User 96470 does not improve AUC. Reverting changes.
Training on augumented user 5655 20/50 current_auc = 1.0
User 5655 AUC after training: 1.0
User 5655 does not improve AUC. Reverting changes.
Training on augumented user 48963 21/50 current_auc = 1.0
User 48963 AUC after training: 1.0
User 48963 does not improve AUC. Reverting changes.
Training on augumented user 56964 22/50 current_auc = 1.0
User 56964 AUC after training: 1.0
User 56964 does not improve AUC. Reverting changes.
Training on augumented user 33872 23/50 current_auc = 1.0
User 33872 AUC after training: 1.0
User 33872 does not improve AUC. Reverting changes.
Training on augumented user 10855 24/50 current_auc = 1.0
User 10855 AUC after training: 1.0
User 10855 does not improve AUC. Reverting changes.
Training on augumented user 11436 25/50 current_auc = 1.0
User 11436 AUC after training: 1.0
User 11436 does not improve AUC. Reverting changes.
Training on augumented user 42930 26/50 current_auc = 1.0
User 42930 AUC after training: 1.0
User 42930 does not improve AUC. Reverting changes.
Training on augumented user 65096 27/50 current_auc = 1.0
User 65096 AUC after training: 1.0
User 65096 does not improve AUC. Reverting changes.
Training on augumented user 128381 28/50 current_auc = 1.0
User 128381 AUC after training: 1.0
User 128381 does not improve AUC. Reverting changes.
Training on augumented user 603 29/50 current_auc = 1.0
User 603 AUC after training: 1.0
User 603 does not improve AUC. Reverting changes.
Training on augumented user 55749 30/50 current_auc = 1.0
User 55749 AUC after training: 1.0
User 55749 does not improve AUC. Reverting changes.
Training on augumented user 17830 31/50 current_auc = 1.0
User 17830 AUC after training: 1.0
User 17830 does not improve AUC. Reverting changes.
Training on augumented user 131833 32/50 current_auc = 1.0
User 131833 AUC after training: 1.0
User 131833 does not improve AUC. Reverting changes.
Training on augumented user 136870 33/50 current_auc = 1.0
User 136870 AUC after training: 1.0
User 136870 does not improve AUC. Reverting changes.
Training on augumented user 14088 34/50 current_auc = 1.0
User 14088 AUC after training: 1.0
User 14088 does not improve AUC. Reverting changes.
Training on augumented user 59744 35/50 current_auc = 1.0
User 59744 AUC after training: 1.0
User 59744 does not improve AUC. Reverting changes.
Training on augumented user 106196 36/50 current_auc = 1.0
User 106196 AUC after training: 1.0
User 106196 does not improve AUC. Reverting changes.
Training on augumented user 57468 37/50 current_auc = 1.0
User 57468 AUC after training: 1.0
User 57468 does not improve AUC. Reverting changes.
Training on augumented user 86303 38/50 current_auc = 1.0
User 86303 AUC after training: 1.0
User 86303 does not improve AUC. Reverting changes.
Training on augumented user 69821 39/50 current_auc = 1.0
User 69821 AUC after training: 1.0
User 69821 does not improve AUC. Reverting changes.
Training on augumented user 134976 40/50 current_auc = 1.0
User 134976 AUC after training: 1.0
User 134976 does not improve AUC. Reverting changes.
Training on augumented user 45661 41/50 current_auc = 1.0
User 45661 AUC after training: 1.0
User 45661 does not improve AUC. Reverting changes.
Training on augumented user 123779 42/50 current_auc = 1.0
User 123779 AUC after training: 1.0
User 123779 does not improve AUC. Reverting changes.
Training on augumented user 105607 43/50 current_auc = 1.0
User 105607 AUC after training: 1.0
User 105607 does not improve AUC. Reverting changes.
Training on augumented user 104725 44/50 current_auc = 1.0
User 104725 AUC after training: 1.0
User 104725 does not improve AUC. Reverting changes.
Training on augumented user 98672 45/50 current_auc = 1.0
User 98672 AUC after training: 1.0
User 98672 does not improve AUC. Reverting changes.
Training on augumented user 60432 46/50 current_auc = 1.0
User 60432 AUC after training: 1.0
User 60432 does not improve AUC. Reverting changes.
Training on augumented user 25946 47/50 current_auc = 1.0
User 25946 AUC after training: 1.0
User 25946 does not improve AUC. Reverting changes.
Training on augumented user 120889 48/50 current_auc = 1.0
User 120889 AUC after training: 1.0
User 120889 does not improve AUC. Reverting changes.
Training on augumented user 136996 49/50 current_auc = 1.0
User 136996 AUC after training: 1.0
User 136996 does not improve AUC. Reverting changes.
[2024-12-02 17:48:46.228570] start test user 56425 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:46.629152] start test user 56425 20/568 recall augumented users by random, augumented_users = [15519, 77822, 75948, 64158, 137017, 123806, 111086, 86489, 86015, 17568, 86922, 72121, 121923, 16606, 6501, 100336, 125457, 89799, 19385, 27627, 121802, 38094, 32316, 73985, 49935, 120196, 76049, 44190, 29924, 85561, 110503, 19201, 71721, 105749, 23169, 33757, 7562, 97131, 53200, 87071, 27850, 64637, 84919, 74152, 124306, 49764, 95782, 97680, 118531, 24628]
[2024-12-02 17:48:46.642925] user = 56425 Cloud 20/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:48:46.648881] user = 56425 Local 20/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:48:46.683327] user = 56425 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:48:48.428443] user = 56425 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 15519 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15519 AUC after training: 0.5
User 15519 does not improve AUC. Reverting changes.
Training on augumented user 77822 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77822 AUC after training: 0.5
User 77822 does not improve AUC. Reverting changes.
Training on augumented user 75948 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75948 AUC after training: 0.5
User 75948 does not improve AUC. Reverting changes.
Training on augumented user 64158 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64158 AUC after training: 0.5
User 64158 does not improve AUC. Reverting changes.
Training on augumented user 137017 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137017 AUC after training: 0.5
User 137017 does not improve AUC. Reverting changes.
Training on augumented user 123806 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123806 AUC after training: 0.5
User 123806 does not improve AUC. Reverting changes.
Training on augumented user 111086 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111086 AUC after training: 0.5
User 111086 does not improve AUC. Reverting changes.
Training on augumented user 86489 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86489 AUC after training: 0.5
User 86489 does not improve AUC. Reverting changes.
Training on augumented user 86015 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86015 AUC after training: 0.5
User 86015 does not improve AUC. Reverting changes.
Training on augumented user 17568 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17568 AUC after training: 0.5
User 17568 does not improve AUC. Reverting changes.
Training on augumented user 86922 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86922 AUC after training: 0.5
User 86922 does not improve AUC. Reverting changes.
Training on augumented user 72121 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72121 AUC after training: 0.5
User 72121 does not improve AUC. Reverting changes.
Training on augumented user 121923 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121923 AUC after training: 0.5
User 121923 does not improve AUC. Reverting changes.
Training on augumented user 16606 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16606 AUC after training: 0.5
User 16606 does not improve AUC. Reverting changes.
Training on augumented user 6501 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6501 AUC after training: 0.5
User 6501 does not improve AUC. Reverting changes.
Training on augumented user 100336 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100336 AUC after training: 0.5
User 100336 does not improve AUC. Reverting changes.
Training on augumented user 125457 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125457 AUC after training: 0.5
User 125457 does not improve AUC. Reverting changes.
Training on augumented user 89799 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89799 AUC after training: 0.5
User 89799 does not improve AUC. Reverting changes.
Training on augumented user 19385 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19385 AUC after training: 0.5
User 19385 does not improve AUC. Reverting changes.
Training on augumented user 27627 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27627 AUC after training: 0.5
User 27627 does not improve AUC. Reverting changes.
Training on augumented user 121802 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121802 AUC after training: 0.5
User 121802 does not improve AUC. Reverting changes.
Training on augumented user 38094 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38094 AUC after training: 0.5
User 38094 does not improve AUC. Reverting changes.
Training on augumented user 32316 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32316 AUC after training: 0.5
User 32316 does not improve AUC. Reverting changes.
Training on augumented user 73985 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73985 AUC after training: 0.5
User 73985 does not improve AUC. Reverting changes.
Training on augumented user 49935 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49935 AUC after training: 0.5
User 49935 does not improve AUC. Reverting changes.
Training on augumented user 120196 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120196 AUC after training: 0.5
User 120196 does not improve AUC. Reverting changes.
Training on augumented user 76049 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76049 AUC after training: 0.5
User 76049 does not improve AUC. Reverting changes.
Training on augumented user 44190 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44190 AUC after training: 0.5
User 44190 does not improve AUC. Reverting changes.
Training on augumented user 29924 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29924 AUC after training: 0.5
User 29924 does not improve AUC. Reverting changes.
Training on augumented user 85561 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85561 AUC after training: 0.5
User 85561 does not improve AUC. Reverting changes.
Training on augumented user 110503 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110503 AUC after training: 0.5
User 110503 does not improve AUC. Reverting changes.
Training on augumented user 19201 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19201 AUC after training: 0.5
User 19201 does not improve AUC. Reverting changes.
Training on augumented user 71721 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71721 AUC after training: 0.5
User 71721 does not improve AUC. Reverting changes.
Training on augumented user 105749 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105749 AUC after training: 0.5
User 105749 does not improve AUC. Reverting changes.
Training on augumented user 23169 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23169 AUC after training: 0.5
User 23169 does not improve AUC. Reverting changes.
Training on augumented user 33757 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33757 AUC after training: 0.5
User 33757 does not improve AUC. Reverting changes.
Training on augumented user 7562 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7562 AUC after training: 0.5
User 7562 does not improve AUC. Reverting changes.
Training on augumented user 97131 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97131 AUC after training: 0.5
User 97131 does not improve AUC. Reverting changes.
Training on augumented user 53200 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53200 AUC after training: 0.5
User 53200 does not improve AUC. Reverting changes.
Training on augumented user 87071 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87071 AUC after training: 0.5
User 87071 does not improve AUC. Reverting changes.
Training on augumented user 27850 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27850 AUC after training: 0.5
User 27850 does not improve AUC. Reverting changes.
Training on augumented user 64637 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64637 AUC after training: 0.5
User 64637 does not improve AUC. Reverting changes.
Training on augumented user 84919 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84919 AUC after training: 0.5
User 84919 does not improve AUC. Reverting changes.
Training on augumented user 74152 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74152 AUC after training: 0.5
User 74152 does not improve AUC. Reverting changes.
Training on augumented user 124306 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124306 AUC after training: 0.5
User 124306 does not improve AUC. Reverting changes.
Training on augumented user 49764 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49764 AUC after training: 0.5
User 49764 does not improve AUC. Reverting changes.
Training on augumented user 95782 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95782 AUC after training: 0.5
User 95782 does not improve AUC. Reverting changes.
Training on augumented user 97680 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97680 AUC after training: 0.5
User 97680 does not improve AUC. Reverting changes.
Training on augumented user 118531 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118531 AUC after training: 0.5
User 118531 does not improve AUC. Reverting changes.
Training on augumented user 24628 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24628 AUC after training: 0.5
User 24628 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:49:21.351239] start test user 56428 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:22.274781] start test user 56428 21/568 recall augumented users by random, augumented_users = [49336, 3897, 109978, 115124, 80409, 20954, 35880, 56449, 5944, 135643, 15874, 98262, 68151, 72249, 110493, 50291, 78449, 111377, 17620, 29426, 39825, 27729, 105267, 32097, 95098, 51471, 98691, 137080, 43073, 120293, 85179, 112784, 38074, 94614, 91536, 45541, 118596, 75092, 106285, 57167, 39441, 40570, 27542, 128657, 108032, 12237, 7332, 104523, 54240, 133969]
[2024-12-02 17:49:22.291839] user = 56428 Cloud 21/568
[2024-12-02 17:49:22.313418] user = 56428 Local 21/568
[2024-12-02 17:49:22.355447] user = 56428 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:25.004600] user = 56428 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6944444444444444
Training on augumented user 49336 0/50 current_auc = 0.6944444444444444
User 49336 AUC after training: 0.6666666666666666
User 49336 does not improve AUC. Reverting changes.
Training on augumented user 3897 1/50 current_auc = 0.6944444444444444
User 3897 AUC after training: 0.6944444444444444
User 3897 does not improve AUC. Reverting changes.
Training on augumented user 109978 2/50 current_auc = 0.6944444444444444
User 109978 AUC after training: 0.6944444444444444
User 109978 does not improve AUC. Reverting changes.
Training on augumented user 115124 3/50 current_auc = 0.6944444444444444
User 115124 AUC after training: 0.6944444444444444
User 115124 does not improve AUC. Reverting changes.
Training on augumented user 80409 4/50 current_auc = 0.6944444444444444
User 80409 AUC after training: 0.6944444444444444
User 80409 does not improve AUC. Reverting changes.
Training on augumented user 20954 5/50 current_auc = 0.6944444444444444
User 20954 AUC after training: 0.6944444444444444
User 20954 does not improve AUC. Reverting changes.
Training on augumented user 35880 6/50 current_auc = 0.6944444444444444
User 35880 AUC after training: 0.6944444444444444
User 35880 does not improve AUC. Reverting changes.
Training on augumented user 56449 7/50 current_auc = 0.6944444444444444
User 56449 AUC after training: 0.6944444444444444
User 56449 does not improve AUC. Reverting changes.
Training on augumented user 5944 8/50 current_auc = 0.6944444444444444
User 5944 AUC after training: 0.6944444444444444
User 5944 does not improve AUC. Reverting changes.
Training on augumented user 135643 9/50 current_auc = 0.6944444444444444
User 135643 AUC after training: 0.6944444444444444
User 135643 does not improve AUC. Reverting changes.
Training on augumented user 15874 10/50 current_auc = 0.6944444444444444
User 15874 AUC after training: 0.6944444444444444
User 15874 does not improve AUC. Reverting changes.
Training on augumented user 98262 11/50 current_auc = 0.6944444444444444
User 98262 AUC after training: 0.6944444444444444
User 98262 does not improve AUC. Reverting changes.
Training on augumented user 68151 12/50 current_auc = 0.6944444444444444
User 68151 AUC after training: 0.6944444444444444
User 68151 does not improve AUC. Reverting changes.
Training on augumented user 72249 13/50 current_auc = 0.6944444444444444
User 72249 AUC after training: 0.6944444444444444
User 72249 does not improve AUC. Reverting changes.
Training on augumented user 110493 14/50 current_auc = 0.6944444444444444
User 110493 AUC after training: 0.6944444444444444
User 110493 does not improve AUC. Reverting changes.
Training on augumented user 50291 15/50 current_auc = 0.6944444444444444
User 50291 AUC after training: 0.6944444444444444
User 50291 does not improve AUC. Reverting changes.
Training on augumented user 78449 16/50 current_auc = 0.6944444444444444
User 78449 AUC after training: 0.6944444444444444
User 78449 does not improve AUC. Reverting changes.
Training on augumented user 111377 17/50 current_auc = 0.6944444444444444
User 111377 AUC after training: 0.6944444444444444
User 111377 does not improve AUC. Reverting changes.
Training on augumented user 17620 18/50 current_auc = 0.6944444444444444
User 17620 AUC after training: 0.6944444444444444
User 17620 does not improve AUC. Reverting changes.
Training on augumented user 29426 19/50 current_auc = 0.6944444444444444
User 29426 AUC after training: 0.6944444444444444
User 29426 does not improve AUC. Reverting changes.
Training on augumented user 39825 20/50 current_auc = 0.6944444444444444
User 39825 AUC after training: 0.6944444444444444
User 39825 does not improve AUC. Reverting changes.
Training on augumented user 27729 21/50 current_auc = 0.6944444444444444
User 27729 AUC after training: 0.6944444444444444
User 27729 does not improve AUC. Reverting changes.
Training on augumented user 105267 22/50 current_auc = 0.6944444444444444
User 105267 AUC after training: 0.6944444444444444
User 105267 does not improve AUC. Reverting changes.
Training on augumented user 32097 23/50 current_auc = 0.6944444444444444
User 32097 AUC after training: 0.6944444444444444
User 32097 does not improve AUC. Reverting changes.
Training on augumented user 95098 24/50 current_auc = 0.6944444444444444
User 95098 AUC after training: 0.6944444444444444
User 95098 does not improve AUC. Reverting changes.
Training on augumented user 51471 25/50 current_auc = 0.6944444444444444
User 51471 AUC after training: 0.6944444444444444
User 51471 does not improve AUC. Reverting changes.
Training on augumented user 98691 26/50 current_auc = 0.6944444444444444
User 98691 AUC after training: 0.6944444444444444
User 98691 does not improve AUC. Reverting changes.
Training on augumented user 137080 27/50 current_auc = 0.6944444444444444
User 137080 AUC after training: 0.6944444444444444
User 137080 does not improve AUC. Reverting changes.
Training on augumented user 43073 28/50 current_auc = 0.6944444444444444
User 43073 AUC after training: 0.6944444444444444
User 43073 does not improve AUC. Reverting changes.
Training on augumented user 120293 29/50 current_auc = 0.6944444444444444
User 120293 AUC after training: 0.6944444444444444
User 120293 does not improve AUC. Reverting changes.
Training on augumented user 85179 30/50 current_auc = 0.6944444444444444
User 85179 AUC after training: 0.6944444444444444
User 85179 does not improve AUC. Reverting changes.
Training on augumented user 112784 31/50 current_auc = 0.6944444444444444
User 112784 AUC after training: 0.6944444444444444
User 112784 does not improve AUC. Reverting changes.
Training on augumented user 38074 32/50 current_auc = 0.6944444444444444
User 38074 AUC after training: 0.6944444444444444
User 38074 does not improve AUC. Reverting changes.
Training on augumented user 94614 33/50 current_auc = 0.6944444444444444
User 94614 AUC after training: 0.6944444444444444
User 94614 does not improve AUC. Reverting changes.
Training on augumented user 91536 34/50 current_auc = 0.6944444444444444
User 91536 AUC after training: 0.6944444444444444
User 91536 does not improve AUC. Reverting changes.
Training on augumented user 45541 35/50 current_auc = 0.6944444444444444
User 45541 AUC after training: 0.6944444444444444
User 45541 does not improve AUC. Reverting changes.
Training on augumented user 118596 36/50 current_auc = 0.6944444444444444
User 118596 AUC after training: 0.6944444444444444
User 118596 does not improve AUC. Reverting changes.
Training on augumented user 75092 37/50 current_auc = 0.6944444444444444
User 75092 AUC after training: 0.6944444444444444
User 75092 does not improve AUC. Reverting changes.
Training on augumented user 106285 38/50 current_auc = 0.6944444444444444
User 106285 AUC after training: 0.6944444444444444
User 106285 does not improve AUC. Reverting changes.
Training on augumented user 57167 39/50 current_auc = 0.6944444444444444
User 57167 AUC after training: 0.6944444444444444
User 57167 does not improve AUC. Reverting changes.
Training on augumented user 39441 40/50 current_auc = 0.6944444444444444
User 39441 AUC after training: 0.6944444444444444
User 39441 does not improve AUC. Reverting changes.
Training on augumented user 40570 41/50 current_auc = 0.6944444444444444
User 40570 AUC after training: 0.6944444444444444
User 40570 does not improve AUC. Reverting changes.
Training on augumented user 27542 42/50 current_auc = 0.6944444444444444
User 27542 AUC after training: 0.6944444444444444
User 27542 does not improve AUC. Reverting changes.
Training on augumented user 128657 43/50 current_auc = 0.6944444444444444
User 128657 AUC after training: 0.6944444444444444
User 128657 does not improve AUC. Reverting changes.
Training on augumented user 108032 44/50 current_auc = 0.6944444444444444
User 108032 AUC after training: 0.6944444444444444
User 108032 does not improve AUC. Reverting changes.
Training on augumented user 12237 45/50 current_auc = 0.6944444444444444
User 12237 AUC after training: 0.6944444444444444
User 12237 does not improve AUC. Reverting changes.
Training on augumented user 7332 46/50 current_auc = 0.6944444444444444
User 7332 AUC after training: 0.6944444444444444
User 7332 does not improve AUC. Reverting changes.
Training on augumented user 104523 47/50 current_auc = 0.6944444444444444
User 104523 AUC after training: 0.6944444444444444
User 104523 does not improve AUC. Reverting changes.
Training on augumented user 54240 48/50 current_auc = 0.6944444444444444
User 54240 AUC after training: 0.6944444444444444
User 54240 does not improve AUC. Reverting changes.
Training on augumented user 133969 49/50 current_auc = 0.6944444444444444
User 133969 AUC after training: 0.6944444444444444
User 133969 does not improve AUC. Reverting changes.
[2024-12-02 17:49:55.973906] start test user 56451 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:56.416474] start test user 56451 22/568 recall augumented users by random, augumented_users = [21107, 108404, 110923, 52640, 117804, 45970, 22162, 47083, 18578, 54183, 21366, 43974, 116425, 15990, 128083, 25053, 52856, 70451, 130554, 27868, 78705, 113633, 66851, 125865, 33609, 28874, 123493, 32008, 15145, 122449, 44145, 73962, 117597, 1830, 105444, 101868, 14968, 43390, 76529, 128187, 34016, 132615, 84240, 64530, 90890, 110866, 101924, 38875, 77298, 134885]
[2024-12-02 17:49:56.431833] user = 56451 Cloud 22/568
[2024-12-02 17:49:56.449973] user = 56451 Local 22/568
[2024-12-02 17:49:56.540443] user = 56451 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:58.692429] user = 56451 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.630656108597285
Training on augumented user 21107 0/50 current_auc = 0.630656108597285
User 21107 AUC after training: 0.6304675716440422
User 21107 does not improve AUC. Reverting changes.
Training on augumented user 108404 1/50 current_auc = 0.630656108597285
User 108404 AUC after training: 0.630656108597285
User 108404 does not improve AUC. Reverting changes.
Training on augumented user 110923 2/50 current_auc = 0.630656108597285
User 110923 AUC after training: 0.6304675716440422
User 110923 does not improve AUC. Reverting changes.
Training on augumented user 52640 3/50 current_auc = 0.630656108597285
User 52640 AUC after training: 0.6302790346907994
User 52640 does not improve AUC. Reverting changes.
Training on augumented user 117804 4/50 current_auc = 0.630656108597285
User 117804 AUC after training: 0.6308446455505279
User 117804 improves AUC. Keeping the model.
Training on augumented user 45970 5/50 current_auc = 0.6308446455505279
User 45970 AUC after training: 0.6331070889894419
User 45970 improves AUC. Keeping the model.
Training on augumented user 22162 6/50 current_auc = 0.6331070889894419
User 22162 AUC after training: 0.6325414781297134
User 22162 does not improve AUC. Reverting changes.
Training on augumented user 47083 7/50 current_auc = 0.6331070889894419
User 47083 AUC after training: 0.6329185520361991
User 47083 does not improve AUC. Reverting changes.
Training on augumented user 18578 8/50 current_auc = 0.6331070889894419
User 18578 AUC after training: 0.6323529411764706
User 18578 does not improve AUC. Reverting changes.
Training on augumented user 54183 9/50 current_auc = 0.6331070889894419
User 54183 AUC after training: 0.6323529411764706
User 54183 does not improve AUC. Reverting changes.
Training on augumented user 21366 10/50 current_auc = 0.6331070889894419
User 21366 AUC after training: 0.6331070889894419
User 21366 does not improve AUC. Reverting changes.
Training on augumented user 43974 11/50 current_auc = 0.6331070889894419
User 43974 AUC after training: 0.6338612368024132
User 43974 improves AUC. Keeping the model.
Training on augumented user 116425 12/50 current_auc = 0.6338612368024132
User 116425 AUC after training: 0.6340497737556561
User 116425 improves AUC. Keeping the model.
Training on augumented user 15990 13/50 current_auc = 0.6340497737556561
User 15990 AUC after training: 0.6327300150829562
User 15990 does not improve AUC. Reverting changes.
Training on augumented user 128083 14/50 current_auc = 0.6340497737556561
User 128083 AUC after training: 0.6338612368024132
User 128083 does not improve AUC. Reverting changes.
Training on augumented user 25053 15/50 current_auc = 0.6340497737556561
User 25053 AUC after training: 0.6340497737556561
User 25053 does not improve AUC. Reverting changes.
Training on augumented user 52856 16/50 current_auc = 0.6340497737556561
User 52856 AUC after training: 0.6353695324283559
User 52856 improves AUC. Keeping the model.
Training on augumented user 70451 17/50 current_auc = 0.6353695324283559
User 70451 AUC after training: 0.6340497737556561
User 70451 does not improve AUC. Reverting changes.
Training on augumented user 130554 18/50 current_auc = 0.6353695324283559
User 130554 AUC after training: 0.6346153846153846
User 130554 does not improve AUC. Reverting changes.
Training on augumented user 27868 19/50 current_auc = 0.6353695324283559
User 27868 AUC after training: 0.6342383107088989
User 27868 does not improve AUC. Reverting changes.
Training on augumented user 78705 20/50 current_auc = 0.6353695324283559
User 78705 AUC after training: 0.6346153846153846
User 78705 does not improve AUC. Reverting changes.
Training on augumented user 113633 21/50 current_auc = 0.6353695324283559
User 113633 AUC after training: 0.6338612368024132
User 113633 does not improve AUC. Reverting changes.
Training on augumented user 66851 22/50 current_auc = 0.6353695324283559
User 66851 AUC after training: 0.6344268476621417
User 66851 does not improve AUC. Reverting changes.
Training on augumented user 125865 23/50 current_auc = 0.6353695324283559
User 125865 AUC after training: 0.6331070889894419
User 125865 does not improve AUC. Reverting changes.
Training on augumented user 33609 24/50 current_auc = 0.6353695324283559
User 33609 AUC after training: 0.6355580693815988
User 33609 improves AUC. Keeping the model.
Training on augumented user 28874 25/50 current_auc = 0.6355580693815988
User 28874 AUC after training: 0.6338612368024132
User 28874 does not improve AUC. Reverting changes.
Training on augumented user 123493 26/50 current_auc = 0.6355580693815988
User 123493 AUC after training: 0.6355580693815988
User 123493 does not improve AUC. Reverting changes.
Training on augumented user 32008 27/50 current_auc = 0.6355580693815988
User 32008 AUC after training: 0.6349924585218703
User 32008 does not improve AUC. Reverting changes.
Training on augumented user 15145 28/50 current_auc = 0.6355580693815988
User 15145 AUC after training: 0.6346153846153846
User 15145 does not improve AUC. Reverting changes.
Training on augumented user 122449 29/50 current_auc = 0.6355580693815988
User 122449 AUC after training: 0.6344268476621417
User 122449 does not improve AUC. Reverting changes.
Training on augumented user 44145 30/50 current_auc = 0.6355580693815988
User 44145 AUC after training: 0.6351809954751131
User 44145 does not improve AUC. Reverting changes.
Training on augumented user 73962 31/50 current_auc = 0.6355580693815988
User 73962 AUC after training: 0.6344268476621417
User 73962 does not improve AUC. Reverting changes.
Training on augumented user 117597 32/50 current_auc = 0.6355580693815988
User 117597 AUC after training: 0.6344268476621417
User 117597 does not improve AUC. Reverting changes.
Training on augumented user 1830 33/50 current_auc = 0.6355580693815988
User 1830 AUC after training: 0.6342383107088989
User 1830 does not improve AUC. Reverting changes.
Training on augumented user 105444 34/50 current_auc = 0.6355580693815988
User 105444 AUC after training: 0.6349924585218703
User 105444 does not improve AUC. Reverting changes.
Training on augumented user 101868 35/50 current_auc = 0.6355580693815988
User 101868 AUC after training: 0.6348039215686274
User 101868 does not improve AUC. Reverting changes.
Training on augumented user 14968 36/50 current_auc = 0.6355580693815988
User 14968 AUC after training: 0.6349924585218703
User 14968 does not improve AUC. Reverting changes.
Training on augumented user 43390 37/50 current_auc = 0.6355580693815988
User 43390 AUC after training: 0.6340497737556561
User 43390 does not improve AUC. Reverting changes.
Training on augumented user 76529 38/50 current_auc = 0.6355580693815988
User 76529 AUC after training: 0.6338612368024132
User 76529 does not improve AUC. Reverting changes.
Training on augumented user 128187 39/50 current_auc = 0.6355580693815988
User 128187 AUC after training: 0.6329185520361991
User 128187 does not improve AUC. Reverting changes.
Training on augumented user 34016 40/50 current_auc = 0.6355580693815988
User 34016 AUC after training: 0.6357466063348416
User 34016 improves AUC. Keeping the model.
Training on augumented user 132615 41/50 current_auc = 0.6357466063348416
User 132615 AUC after training: 0.6346153846153846
User 132615 does not improve AUC. Reverting changes.
Training on augumented user 84240 42/50 current_auc = 0.6357466063348416
User 84240 AUC after training: 0.6338612368024132
User 84240 does not improve AUC. Reverting changes.
Training on augumented user 64530 43/50 current_auc = 0.6357466063348416
User 64530 AUC after training: 0.6357466063348416
User 64530 does not improve AUC. Reverting changes.
Training on augumented user 90890 44/50 current_auc = 0.6357466063348416
User 90890 AUC after training: 0.6344268476621417
User 90890 does not improve AUC. Reverting changes.
Training on augumented user 110866 45/50 current_auc = 0.6357466063348416
User 110866 AUC after training: 0.6351809954751131
User 110866 does not improve AUC. Reverting changes.
Training on augumented user 101924 46/50 current_auc = 0.6357466063348416
User 101924 AUC after training: 0.6348039215686274
User 101924 does not improve AUC. Reverting changes.
Training on augumented user 38875 47/50 current_auc = 0.6357466063348416
User 38875 AUC after training: 0.6346153846153846
User 38875 does not improve AUC. Reverting changes.
Training on augumented user 77298 48/50 current_auc = 0.6357466063348416
User 77298 AUC after training: 0.6346153846153846
User 77298 does not improve AUC. Reverting changes.
Training on augumented user 134885 49/50 current_auc = 0.6357466063348416
User 134885 AUC after training: 0.6351809954751131
User 134885 does not improve AUC. Reverting changes.
[2024-12-02 17:50:25.177831] start test user 56474 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:25.829971] start test user 56474 23/568 recall augumented users by random, augumented_users = [96023, 43761, 56136, 70812, 87569, 31864, 74322, 69923, 33576, 6305, 34415, 42001, 24096, 104059, 109724, 34737, 93012, 122785, 77732, 87017, 103250, 80611, 116424, 72643, 99814, 20664, 34564, 47916, 46947, 80914, 2358, 52925, 91023, 118512, 20752, 36859, 106678, 49659, 115457, 58052, 125211, 43789, 43090, 55891, 48305, 74191, 114256, 80772, 135713, 27331]
[2024-12-02 17:50:25.852230] user = 56474 Cloud 23/568
[2024-12-02 17:50:25.869651] user = 56474 Local 23/568
[2024-12-02 17:50:26.008251] user = 56474 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:27.631478] user = 56474 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8095238095238095
Training on augumented user 96023 0/50 current_auc = 0.8095238095238095
User 96023 AUC after training: 0.8095238095238095
User 96023 does not improve AUC. Reverting changes.
Training on augumented user 43761 1/50 current_auc = 0.8095238095238095
User 43761 AUC after training: 0.8095238095238095
User 43761 does not improve AUC. Reverting changes.
Training on augumented user 56136 2/50 current_auc = 0.8095238095238095
User 56136 AUC after training: 0.8095238095238095
User 56136 does not improve AUC. Reverting changes.
Training on augumented user 70812 3/50 current_auc = 0.8095238095238095
User 70812 AUC after training: 0.8095238095238095
User 70812 does not improve AUC. Reverting changes.
Training on augumented user 87569 4/50 current_auc = 0.8095238095238095
User 87569 AUC after training: 0.8095238095238095
User 87569 does not improve AUC. Reverting changes.
Training on augumented user 31864 5/50 current_auc = 0.8095238095238095
User 31864 AUC after training: 0.8095238095238095
User 31864 does not improve AUC. Reverting changes.
Training on augumented user 74322 6/50 current_auc = 0.8095238095238095
User 74322 AUC after training: 0.8095238095238095
User 74322 does not improve AUC. Reverting changes.
Training on augumented user 69923 7/50 current_auc = 0.8095238095238095
User 69923 AUC after training: 0.8095238095238095
User 69923 does not improve AUC. Reverting changes.
Training on augumented user 33576 8/50 current_auc = 0.8095238095238095
User 33576 AUC after training: 0.8095238095238095
User 33576 does not improve AUC. Reverting changes.
Training on augumented user 6305 9/50 current_auc = 0.8095238095238095
User 6305 AUC after training: 0.8095238095238095
User 6305 does not improve AUC. Reverting changes.
Training on augumented user 34415 10/50 current_auc = 0.8095238095238095
User 34415 AUC after training: 0.8095238095238095
User 34415 does not improve AUC. Reverting changes.
Training on augumented user 42001 11/50 current_auc = 0.8095238095238095
User 42001 AUC after training: 0.8095238095238095
User 42001 does not improve AUC. Reverting changes.
Training on augumented user 24096 12/50 current_auc = 0.8095238095238095
User 24096 AUC after training: 0.8095238095238095
User 24096 does not improve AUC. Reverting changes.
Training on augumented user 104059 13/50 current_auc = 0.8095238095238095
User 104059 AUC after training: 0.8095238095238095
User 104059 does not improve AUC. Reverting changes.
Training on augumented user 109724 14/50 current_auc = 0.8095238095238095
User 109724 AUC after training: 0.8095238095238095
User 109724 does not improve AUC. Reverting changes.
Training on augumented user 34737 15/50 current_auc = 0.8095238095238095
User 34737 AUC after training: 0.8095238095238095
User 34737 does not improve AUC. Reverting changes.
Training on augumented user 93012 16/50 current_auc = 0.8095238095238095
User 93012 AUC after training: 0.8095238095238095
User 93012 does not improve AUC. Reverting changes.
Training on augumented user 122785 17/50 current_auc = 0.8095238095238095
User 122785 AUC after training: 0.8095238095238095
User 122785 does not improve AUC. Reverting changes.
Training on augumented user 77732 18/50 current_auc = 0.8095238095238095
User 77732 AUC after training: 0.8095238095238095
User 77732 does not improve AUC. Reverting changes.
Training on augumented user 87017 19/50 current_auc = 0.8095238095238095
User 87017 AUC after training: 0.8095238095238095
User 87017 does not improve AUC. Reverting changes.
Training on augumented user 103250 20/50 current_auc = 0.8095238095238095
User 103250 AUC after training: 0.8095238095238095
User 103250 does not improve AUC. Reverting changes.
Training on augumented user 80611 21/50 current_auc = 0.8095238095238095
User 80611 AUC after training: 0.8095238095238095
User 80611 does not improve AUC. Reverting changes.
Training on augumented user 116424 22/50 current_auc = 0.8095238095238095
User 116424 AUC after training: 0.8095238095238095
User 116424 does not improve AUC. Reverting changes.
Training on augumented user 72643 23/50 current_auc = 0.8095238095238095
User 72643 AUC after training: 0.8095238095238095
User 72643 does not improve AUC. Reverting changes.
Training on augumented user 99814 24/50 current_auc = 0.8095238095238095
User 99814 AUC after training: 0.8095238095238095
User 99814 does not improve AUC. Reverting changes.
Training on augumented user 20664 25/50 current_auc = 0.8095238095238095
User 20664 AUC after training: 0.8095238095238095
User 20664 does not improve AUC. Reverting changes.
Training on augumented user 34564 26/50 current_auc = 0.8095238095238095
User 34564 AUC after training: 0.8095238095238095
User 34564 does not improve AUC. Reverting changes.
Training on augumented user 47916 27/50 current_auc = 0.8095238095238095
User 47916 AUC after training: 0.8095238095238095
User 47916 does not improve AUC. Reverting changes.
Training on augumented user 46947 28/50 current_auc = 0.8095238095238095
User 46947 AUC after training: 0.8095238095238095
User 46947 does not improve AUC. Reverting changes.
Training on augumented user 80914 29/50 current_auc = 0.8095238095238095
User 80914 AUC after training: 0.8095238095238095
User 80914 does not improve AUC. Reverting changes.
Training on augumented user 2358 30/50 current_auc = 0.8095238095238095
User 2358 AUC after training: 0.8095238095238095
User 2358 does not improve AUC. Reverting changes.
Training on augumented user 52925 31/50 current_auc = 0.8095238095238095
User 52925 AUC after training: 0.8095238095238095
User 52925 does not improve AUC. Reverting changes.
Training on augumented user 91023 32/50 current_auc = 0.8095238095238095
User 91023 AUC after training: 0.8095238095238095
User 91023 does not improve AUC. Reverting changes.
Training on augumented user 118512 33/50 current_auc = 0.8095238095238095
User 118512 AUC after training: 0.8095238095238095
User 118512 does not improve AUC. Reverting changes.
Training on augumented user 20752 34/50 current_auc = 0.8095238095238095
User 20752 AUC after training: 0.8095238095238095
User 20752 does not improve AUC. Reverting changes.
Training on augumented user 36859 35/50 current_auc = 0.8095238095238095
User 36859 AUC after training: 0.8095238095238095
User 36859 does not improve AUC. Reverting changes.
Training on augumented user 106678 36/50 current_auc = 0.8095238095238095
User 106678 AUC after training: 0.8095238095238095
User 106678 does not improve AUC. Reverting changes.
Training on augumented user 49659 37/50 current_auc = 0.8095238095238095
User 49659 AUC after training: 0.8095238095238095
User 49659 does not improve AUC. Reverting changes.
Training on augumented user 115457 38/50 current_auc = 0.8095238095238095
User 115457 AUC after training: 0.8095238095238095
User 115457 does not improve AUC. Reverting changes.
Training on augumented user 58052 39/50 current_auc = 0.8095238095238095
User 58052 AUC after training: 0.8095238095238095
User 58052 does not improve AUC. Reverting changes.
Training on augumented user 125211 40/50 current_auc = 0.8095238095238095
User 125211 AUC after training: 0.8095238095238095
User 125211 does not improve AUC. Reverting changes.
Training on augumented user 43789 41/50 current_auc = 0.8095238095238095
User 43789 AUC after training: 0.8095238095238095
User 43789 does not improve AUC. Reverting changes.
Training on augumented user 43090 42/50 current_auc = 0.8095238095238095
User 43090 AUC after training: 0.8095238095238095
User 43090 does not improve AUC. Reverting changes.
Training on augumented user 55891 43/50 current_auc = 0.8095238095238095
User 55891 AUC after training: 0.8095238095238095
User 55891 does not improve AUC. Reverting changes.
Training on augumented user 48305 44/50 current_auc = 0.8095238095238095
User 48305 AUC after training: 0.8095238095238095
User 48305 does not improve AUC. Reverting changes.
Training on augumented user 74191 45/50 current_auc = 0.8095238095238095
User 74191 AUC after training: 0.8095238095238095
User 74191 does not improve AUC. Reverting changes.
Training on augumented user 114256 46/50 current_auc = 0.8095238095238095
User 114256 AUC after training: 0.8095238095238095
User 114256 does not improve AUC. Reverting changes.
Training on augumented user 80772 47/50 current_auc = 0.8095238095238095
User 80772 AUC after training: 0.8095238095238095
User 80772 does not improve AUC. Reverting changes.
Training on augumented user 135713 48/50 current_auc = 0.8095238095238095
User 135713 AUC after training: 0.8095238095238095
User 135713 does not improve AUC. Reverting changes.
Training on augumented user 27331 49/50 current_auc = 0.8095238095238095
User 27331 AUC after training: 0.8095238095238095
User 27331 does not improve AUC. Reverting changes.
[2024-12-02 17:50:53.363910] start test user 56488 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:53.814061] start test user 56488 24/568 recall augumented users by random, augumented_users = [56389, 99357, 104204, 137494, 104186, 27429, 112782, 55420, 12724, 38272, 126566, 73563, 104565, 95466, 87509, 53123, 61628, 116667, 105777, 16032, 48267, 98638, 43284, 138284, 68263, 85248, 80362, 6329, 126371, 94468, 71619, 44920, 116294, 108410, 128808, 12154, 36987, 126558, 21810, 41396, 95329, 81225, 30758, 65489, 48677, 136576, 448, 11956, 40021, 35039]
[2024-12-02 17:50:53.829411] user = 56488 Cloud 24/568
[2024-12-02 17:50:53.839541] user = 56488 Local 24/568
[2024-12-02 17:50:53.910395] user = 56488 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:56.268416] user = 56488 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6428571428571428
Training on augumented user 56389 0/50 current_auc = 0.6428571428571428
User 56389 AUC after training: 0.6402116402116402
User 56389 does not improve AUC. Reverting changes.
Training on augumented user 99357 1/50 current_auc = 0.6428571428571428
User 99357 AUC after training: 0.6402116402116402
User 99357 does not improve AUC. Reverting changes.
Training on augumented user 104204 2/50 current_auc = 0.6428571428571428
User 104204 AUC after training: 0.6455026455026455
User 104204 improves AUC. Keeping the model.
Training on augumented user 137494 3/50 current_auc = 0.6455026455026455
User 137494 AUC after training: 0.6455026455026455
User 137494 does not improve AUC. Reverting changes.
Training on augumented user 104186 4/50 current_auc = 0.6455026455026455
User 104186 AUC after training: 0.6402116402116402
User 104186 does not improve AUC. Reverting changes.
Training on augumented user 27429 5/50 current_auc = 0.6455026455026455
User 27429 AUC after training: 0.6455026455026455
User 27429 does not improve AUC. Reverting changes.
Training on augumented user 112782 6/50 current_auc = 0.6455026455026455
User 112782 AUC after training: 0.6375661375661376
User 112782 does not improve AUC. Reverting changes.
Training on augumented user 55420 7/50 current_auc = 0.6455026455026455
User 55420 AUC after training: 0.6402116402116402
User 55420 does not improve AUC. Reverting changes.
Training on augumented user 12724 8/50 current_auc = 0.6455026455026455
User 12724 AUC after training: 0.6455026455026455
User 12724 does not improve AUC. Reverting changes.
Training on augumented user 38272 9/50 current_auc = 0.6455026455026455
User 38272 AUC after training: 0.6428571428571428
User 38272 does not improve AUC. Reverting changes.
Training on augumented user 126566 10/50 current_auc = 0.6455026455026455
User 126566 AUC after training: 0.6455026455026455
User 126566 does not improve AUC. Reverting changes.
Training on augumented user 73563 11/50 current_auc = 0.6455026455026455
User 73563 AUC after training: 0.6375661375661376
User 73563 does not improve AUC. Reverting changes.
Training on augumented user 104565 12/50 current_auc = 0.6455026455026455
User 104565 AUC after training: 0.6428571428571428
User 104565 does not improve AUC. Reverting changes.
Training on augumented user 95466 13/50 current_auc = 0.6455026455026455
User 95466 AUC after training: 0.6402116402116402
User 95466 does not improve AUC. Reverting changes.
Training on augumented user 87509 14/50 current_auc = 0.6455026455026455
User 87509 AUC after training: 0.6428571428571428
User 87509 does not improve AUC. Reverting changes.
Training on augumented user 53123 15/50 current_auc = 0.6455026455026455
User 53123 AUC after training: 0.6455026455026456
User 53123 improves AUC. Keeping the model.
Training on augumented user 61628 16/50 current_auc = 0.6455026455026456
User 61628 AUC after training: 0.6428571428571428
User 61628 does not improve AUC. Reverting changes.
Training on augumented user 116667 17/50 current_auc = 0.6455026455026456
User 116667 AUC after training: 0.6428571428571428
User 116667 does not improve AUC. Reverting changes.
Training on augumented user 105777 18/50 current_auc = 0.6455026455026456
User 105777 AUC after training: 0.6455026455026456
User 105777 does not improve AUC. Reverting changes.
Training on augumented user 16032 19/50 current_auc = 0.6455026455026456
User 16032 AUC after training: 0.6455026455026456
User 16032 does not improve AUC. Reverting changes.
Training on augumented user 48267 20/50 current_auc = 0.6455026455026456
User 48267 AUC after training: 0.6455026455026456
User 48267 does not improve AUC. Reverting changes.
Training on augumented user 98638 21/50 current_auc = 0.6455026455026456
User 98638 AUC after training: 0.6428571428571428
User 98638 does not improve AUC. Reverting changes.
Training on augumented user 43284 22/50 current_auc = 0.6455026455026456
User 43284 AUC after training: 0.6428571428571428
User 43284 does not improve AUC. Reverting changes.
Training on augumented user 138284 23/50 current_auc = 0.6455026455026456
User 138284 AUC after training: 0.6428571428571428
User 138284 does not improve AUC. Reverting changes.
Training on augumented user 68263 24/50 current_auc = 0.6455026455026456
User 68263 AUC after training: 0.6455026455026456
User 68263 does not improve AUC. Reverting changes.
Training on augumented user 85248 25/50 current_auc = 0.6455026455026456
User 85248 AUC after training: 0.6349206349206349
User 85248 does not improve AUC. Reverting changes.
Training on augumented user 80362 26/50 current_auc = 0.6455026455026456
User 80362 AUC after training: 0.6455026455026456
User 80362 does not improve AUC. Reverting changes.
Training on augumented user 6329 27/50 current_auc = 0.6455026455026456
User 6329 AUC after training: 0.6455026455026456
User 6329 does not improve AUC. Reverting changes.
Training on augumented user 126371 28/50 current_auc = 0.6455026455026456
User 126371 AUC after training: 0.6455026455026456
User 126371 does not improve AUC. Reverting changes.
Training on augumented user 94468 29/50 current_auc = 0.6455026455026456
User 94468 AUC after training: 0.6455026455026456
User 94468 does not improve AUC. Reverting changes.
Training on augumented user 71619 30/50 current_auc = 0.6455026455026456
User 71619 AUC after training: 0.6455026455026456
User 71619 does not improve AUC. Reverting changes.
Training on augumented user 44920 31/50 current_auc = 0.6455026455026456
User 44920 AUC after training: 0.6455026455026456
User 44920 does not improve AUC. Reverting changes.
Training on augumented user 116294 32/50 current_auc = 0.6455026455026456
User 116294 AUC after training: 0.6428571428571428
User 116294 does not improve AUC. Reverting changes.
Training on augumented user 108410 33/50 current_auc = 0.6455026455026456
User 108410 AUC after training: 0.6455026455026456
User 108410 does not improve AUC. Reverting changes.
Training on augumented user 128808 34/50 current_auc = 0.6455026455026456
User 128808 AUC after training: 0.6428571428571428
User 128808 does not improve AUC. Reverting changes.
Training on augumented user 12154 35/50 current_auc = 0.6455026455026456
User 12154 AUC after training: 0.6455026455026456
User 12154 does not improve AUC. Reverting changes.
Training on augumented user 36987 36/50 current_auc = 0.6455026455026456
User 36987 AUC after training: 0.6455026455026456
User 36987 does not improve AUC. Reverting changes.
Training on augumented user 126558 37/50 current_auc = 0.6455026455026456
User 126558 AUC after training: 0.6428571428571428
User 126558 does not improve AUC. Reverting changes.
Training on augumented user 21810 38/50 current_auc = 0.6455026455026456
User 21810 AUC after training: 0.6428571428571428
User 21810 does not improve AUC. Reverting changes.
Training on augumented user 41396 39/50 current_auc = 0.6455026455026456
User 41396 AUC after training: 0.6455026455026456
User 41396 does not improve AUC. Reverting changes.
Training on augumented user 95329 40/50 current_auc = 0.6455026455026456
User 95329 AUC after training: 0.6428571428571428
User 95329 does not improve AUC. Reverting changes.
Training on augumented user 81225 41/50 current_auc = 0.6455026455026456
User 81225 AUC after training: 0.6428571428571428
User 81225 does not improve AUC. Reverting changes.
Training on augumented user 30758 42/50 current_auc = 0.6455026455026456
User 30758 AUC after training: 0.6455026455026456
User 30758 does not improve AUC. Reverting changes.
Training on augumented user 65489 43/50 current_auc = 0.6455026455026456
User 65489 AUC after training: 0.6428571428571428
User 65489 does not improve AUC. Reverting changes.
Training on augumented user 48677 44/50 current_auc = 0.6455026455026456
User 48677 AUC after training: 0.6349206349206349
User 48677 does not improve AUC. Reverting changes.
Training on augumented user 136576 45/50 current_auc = 0.6455026455026456
User 136576 AUC after training: 0.6455026455026456
User 136576 does not improve AUC. Reverting changes.
Training on augumented user 448 46/50 current_auc = 0.6455026455026456
User 448 AUC after training: 0.6428571428571428
User 448 does not improve AUC. Reverting changes.
Training on augumented user 11956 47/50 current_auc = 0.6455026455026456
User 11956 AUC after training: 0.6428571428571428
User 11956 does not improve AUC. Reverting changes.
Training on augumented user 40021 48/50 current_auc = 0.6455026455026456
User 40021 AUC after training: 0.6428571428571428
User 40021 does not improve AUC. Reverting changes.
Training on augumented user 35039 49/50 current_auc = 0.6455026455026456
User 35039 AUC after training: 0.6428571428571428
User 35039 does not improve AUC. Reverting changes.
[2024-12-02 17:51:21.664797] start test user 56506 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:22.396645] start test user 56506 25/568 recall augumented users by random, augumented_users = [58326, 83559, 16176, 96049, 1375, 131239, 51585, 123443, 42196, 50719, 24296, 38443, 37731, 110872, 77838, 21128, 13430, 54890, 18661, 129249, 84161, 44907, 118970, 68491, 51208, 55000, 28678, 129397, 136750, 112241, 30291, 102184, 134826, 41318, 80986, 11193, 76069, 110886, 73232, 117072, 101113, 9370, 120275, 81966, 127116, 13279, 112068, 122942, 85965, 86362]
[2024-12-02 17:51:22.413931] user = 56506 Cloud 25/568
[2024-12-02 17:51:22.440646] user = 56506 Local 25/568
[2024-12-02 17:51:22.469934] user = 56506 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:25.453844] user = 56506 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9022222222222223
Training on augumented user 58326 0/50 current_auc = 0.9022222222222223
User 58326 AUC after training: 0.9022222222222223
User 58326 does not improve AUC. Reverting changes.
Training on augumented user 83559 1/50 current_auc = 0.9022222222222223
User 83559 AUC after training: 0.9022222222222223
User 83559 does not improve AUC. Reverting changes.
Training on augumented user 16176 2/50 current_auc = 0.9022222222222223
User 16176 AUC after training: 0.9022222222222223
User 16176 does not improve AUC. Reverting changes.
Training on augumented user 96049 3/50 current_auc = 0.9022222222222223
User 96049 AUC after training: 0.9022222222222223
User 96049 does not improve AUC. Reverting changes.
Training on augumented user 1375 4/50 current_auc = 0.9022222222222223
User 1375 AUC after training: 0.9022222222222223
User 1375 does not improve AUC. Reverting changes.
Training on augumented user 131239 5/50 current_auc = 0.9022222222222223
User 131239 AUC after training: 0.9022222222222223
User 131239 does not improve AUC. Reverting changes.
Training on augumented user 51585 6/50 current_auc = 0.9022222222222223
User 51585 AUC after training: 0.9022222222222223
User 51585 does not improve AUC. Reverting changes.
Training on augumented user 123443 7/50 current_auc = 0.9022222222222223
User 123443 AUC after training: 0.9022222222222223
User 123443 does not improve AUC. Reverting changes.
Training on augumented user 42196 8/50 current_auc = 0.9022222222222223
User 42196 AUC after training: 0.9022222222222223
User 42196 does not improve AUC. Reverting changes.
Training on augumented user 50719 9/50 current_auc = 0.9022222222222223
User 50719 AUC after training: 0.9022222222222223
User 50719 does not improve AUC. Reverting changes.
Training on augumented user 24296 10/50 current_auc = 0.9022222222222223
User 24296 AUC after training: 0.9022222222222223
User 24296 does not improve AUC. Reverting changes.
Training on augumented user 38443 11/50 current_auc = 0.9022222222222223
User 38443 AUC after training: 0.9022222222222223
User 38443 does not improve AUC. Reverting changes.
Training on augumented user 37731 12/50 current_auc = 0.9022222222222223
User 37731 AUC after training: 0.9022222222222223
User 37731 does not improve AUC. Reverting changes.
Training on augumented user 110872 13/50 current_auc = 0.9022222222222223
User 110872 AUC after training: 0.9022222222222223
User 110872 does not improve AUC. Reverting changes.
Training on augumented user 77838 14/50 current_auc = 0.9022222222222223
User 77838 AUC after training: 0.9022222222222223
User 77838 does not improve AUC. Reverting changes.
Training on augumented user 21128 15/50 current_auc = 0.9022222222222223
User 21128 AUC after training: 0.9022222222222223
User 21128 does not improve AUC. Reverting changes.
Training on augumented user 13430 16/50 current_auc = 0.9022222222222223
User 13430 AUC after training: 0.9022222222222223
User 13430 does not improve AUC. Reverting changes.
Training on augumented user 54890 17/50 current_auc = 0.9022222222222223
User 54890 AUC after training: 0.9022222222222223
User 54890 does not improve AUC. Reverting changes.
Training on augumented user 18661 18/50 current_auc = 0.9022222222222223
User 18661 AUC after training: 0.9022222222222223
User 18661 does not improve AUC. Reverting changes.
Training on augumented user 129249 19/50 current_auc = 0.9022222222222223
User 129249 AUC after training: 0.9022222222222223
User 129249 does not improve AUC. Reverting changes.
Training on augumented user 84161 20/50 current_auc = 0.9022222222222223
User 84161 AUC after training: 0.9022222222222223
User 84161 does not improve AUC. Reverting changes.
Training on augumented user 44907 21/50 current_auc = 0.9022222222222223
User 44907 AUC after training: 0.9022222222222223
User 44907 does not improve AUC. Reverting changes.
Training on augumented user 118970 22/50 current_auc = 0.9022222222222223
User 118970 AUC after training: 0.9022222222222223
User 118970 does not improve AUC. Reverting changes.
Training on augumented user 68491 23/50 current_auc = 0.9022222222222223
User 68491 AUC after training: 0.9022222222222223
User 68491 does not improve AUC. Reverting changes.
Training on augumented user 51208 24/50 current_auc = 0.9022222222222223
User 51208 AUC after training: 0.9022222222222223
User 51208 does not improve AUC. Reverting changes.
Training on augumented user 55000 25/50 current_auc = 0.9022222222222223
User 55000 AUC after training: 0.9022222222222223
User 55000 does not improve AUC. Reverting changes.
Training on augumented user 28678 26/50 current_auc = 0.9022222222222223
User 28678 AUC after training: 0.9022222222222223
User 28678 does not improve AUC. Reverting changes.
Training on augumented user 129397 27/50 current_auc = 0.9022222222222223
User 129397 AUC after training: 0.9022222222222223
User 129397 does not improve AUC. Reverting changes.
Training on augumented user 136750 28/50 current_auc = 0.9022222222222223
User 136750 AUC after training: 0.9022222222222223
User 136750 does not improve AUC. Reverting changes.
Training on augumented user 112241 29/50 current_auc = 0.9022222222222223
User 112241 AUC after training: 0.9022222222222223
User 112241 does not improve AUC. Reverting changes.
Training on augumented user 30291 30/50 current_auc = 0.9022222222222223
User 30291 AUC after training: 0.9022222222222223
User 30291 does not improve AUC. Reverting changes.
Training on augumented user 102184 31/50 current_auc = 0.9022222222222223
User 102184 AUC after training: 0.9022222222222223
User 102184 does not improve AUC. Reverting changes.
Training on augumented user 134826 32/50 current_auc = 0.9022222222222223
User 134826 AUC after training: 0.9022222222222223
User 134826 does not improve AUC. Reverting changes.
Training on augumented user 41318 33/50 current_auc = 0.9022222222222223
User 41318 AUC after training: 0.9022222222222223
User 41318 does not improve AUC. Reverting changes.
Training on augumented user 80986 34/50 current_auc = 0.9022222222222223
User 80986 AUC after training: 0.9022222222222223
User 80986 does not improve AUC. Reverting changes.
Training on augumented user 11193 35/50 current_auc = 0.9022222222222223
User 11193 AUC after training: 0.9022222222222223
User 11193 does not improve AUC. Reverting changes.
Training on augumented user 76069 36/50 current_auc = 0.9022222222222223
User 76069 AUC after training: 0.9022222222222223
User 76069 does not improve AUC. Reverting changes.
Training on augumented user 110886 37/50 current_auc = 0.9022222222222223
User 110886 AUC after training: 0.9022222222222223
User 110886 does not improve AUC. Reverting changes.
Training on augumented user 73232 38/50 current_auc = 0.9022222222222223
User 73232 AUC after training: 0.9022222222222223
User 73232 does not improve AUC. Reverting changes.
Training on augumented user 117072 39/50 current_auc = 0.9022222222222223
User 117072 AUC after training: 0.9022222222222223
User 117072 does not improve AUC. Reverting changes.
Training on augumented user 101113 40/50 current_auc = 0.9022222222222223
User 101113 AUC after training: 0.9066666666666667
User 101113 improves AUC. Keeping the model.
Training on augumented user 9370 41/50 current_auc = 0.9066666666666667
User 9370 AUC after training: 0.9022222222222223
User 9370 does not improve AUC. Reverting changes.
Training on augumented user 120275 42/50 current_auc = 0.9066666666666667
User 120275 AUC after training: 0.9022222222222223
User 120275 does not improve AUC. Reverting changes.
Training on augumented user 81966 43/50 current_auc = 0.9066666666666667
User 81966 AUC after training: 0.9066666666666667
User 81966 does not improve AUC. Reverting changes.
Training on augumented user 127116 44/50 current_auc = 0.9066666666666667
User 127116 AUC after training: 0.9022222222222223
User 127116 does not improve AUC. Reverting changes.
Training on augumented user 13279 45/50 current_auc = 0.9066666666666667
User 13279 AUC after training: 0.9022222222222223
User 13279 does not improve AUC. Reverting changes.
Training on augumented user 112068 46/50 current_auc = 0.9066666666666667
User 112068 AUC after training: 0.9022222222222223
User 112068 does not improve AUC. Reverting changes.
Training on augumented user 122942 47/50 current_auc = 0.9066666666666667
User 122942 AUC after training: 0.9066666666666667
User 122942 does not improve AUC. Reverting changes.
Training on augumented user 85965 48/50 current_auc = 0.9066666666666667
User 85965 AUC after training: 0.9066666666666667
User 85965 does not improve AUC. Reverting changes.
Training on augumented user 86362 49/50 current_auc = 0.9066666666666667
User 86362 AUC after training: 0.9066666666666667
User 86362 does not improve AUC. Reverting changes.
[2024-12-02 17:51:54.538823] start test user 56509 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:54.966254] start test user 56509 26/568 recall augumented users by random, augumented_users = [137771, 77619, 13476, 74090, 119483, 110210, 98988, 13623, 77303, 96302, 736, 101595, 93837, 107086, 131074, 89485, 87302, 41998, 134738, 2029, 64311, 100731, 76473, 8030, 88170, 83873, 94927, 88544, 100229, 85126, 45499, 121804, 11930, 18561, 21874, 54388, 57281, 133209, 63574, 33897, 88588, 51356, 37851, 127962, 74714, 9229, 109065, 90217, 9914, 21404]
[2024-12-02 17:51:54.980828] user = 56509 Cloud 26/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:54.987471] user = 56509 Local 26/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:55.009735] user = 56509 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:57.440780] user = 56509 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 137771 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137771 AUC after training: 0.5
User 137771 does not improve AUC. Reverting changes.
Training on augumented user 77619 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77619 AUC after training: 0.5
User 77619 does not improve AUC. Reverting changes.
Training on augumented user 13476 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13476 AUC after training: 0.5
User 13476 does not improve AUC. Reverting changes.
Training on augumented user 74090 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74090 AUC after training: 0.5
User 74090 does not improve AUC. Reverting changes.
Training on augumented user 119483 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119483 AUC after training: 0.5
User 119483 does not improve AUC. Reverting changes.
Training on augumented user 110210 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110210 AUC after training: 0.5
User 110210 does not improve AUC. Reverting changes.
Training on augumented user 98988 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98988 AUC after training: 0.5
User 98988 does not improve AUC. Reverting changes.
Training on augumented user 13623 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13623 AUC after training: 0.5
User 13623 does not improve AUC. Reverting changes.
Training on augumented user 77303 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77303 AUC after training: 0.5
User 77303 does not improve AUC. Reverting changes.
Training on augumented user 96302 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96302 AUC after training: 0.5
User 96302 does not improve AUC. Reverting changes.
Training on augumented user 736 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 736 AUC after training: 0.5
User 736 does not improve AUC. Reverting changes.
Training on augumented user 101595 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101595 AUC after training: 0.5
User 101595 does not improve AUC. Reverting changes.
Training on augumented user 93837 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93837 AUC after training: 0.5
User 93837 does not improve AUC. Reverting changes.
Training on augumented user 107086 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107086 AUC after training: 0.5
User 107086 does not improve AUC. Reverting changes.
Training on augumented user 131074 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131074 AUC after training: 0.5
User 131074 does not improve AUC. Reverting changes.
Training on augumented user 89485 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89485 AUC after training: 0.5
User 89485 does not improve AUC. Reverting changes.
Training on augumented user 87302 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87302 AUC after training: 0.5
User 87302 does not improve AUC. Reverting changes.
Training on augumented user 41998 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41998 AUC after training: 0.5
User 41998 does not improve AUC. Reverting changes.
Training on augumented user 134738 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134738 AUC after training: 0.5
User 134738 does not improve AUC. Reverting changes.
Training on augumented user 2029 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2029 AUC after training: 0.5
User 2029 does not improve AUC. Reverting changes.
Training on augumented user 64311 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64311 AUC after training: 0.5
User 64311 does not improve AUC. Reverting changes.
Training on augumented user 100731 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100731 AUC after training: 0.5
User 100731 does not improve AUC. Reverting changes.
Training on augumented user 76473 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76473 AUC after training: 0.5
User 76473 does not improve AUC. Reverting changes.
Training on augumented user 8030 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8030 AUC after training: 0.5
User 8030 does not improve AUC. Reverting changes.
Training on augumented user 88170 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88170 AUC after training: 0.5
User 88170 does not improve AUC. Reverting changes.
Training on augumented user 83873 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83873 AUC after training: 0.5
User 83873 does not improve AUC. Reverting changes.
Training on augumented user 94927 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94927 AUC after training: 0.5
User 94927 does not improve AUC. Reverting changes.
Training on augumented user 88544 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88544 AUC after training: 0.5
User 88544 does not improve AUC. Reverting changes.
Training on augumented user 100229 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100229 AUC after training: 0.5
User 100229 does not improve AUC. Reverting changes.
Training on augumented user 85126 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85126 AUC after training: 0.5
User 85126 does not improve AUC. Reverting changes.
Training on augumented user 45499 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45499 AUC after training: 0.5
User 45499 does not improve AUC. Reverting changes.
Training on augumented user 121804 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121804 AUC after training: 0.5
User 121804 does not improve AUC. Reverting changes.
Training on augumented user 11930 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11930 AUC after training: 0.5
User 11930 does not improve AUC. Reverting changes.
Training on augumented user 18561 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18561 AUC after training: 0.5
User 18561 does not improve AUC. Reverting changes.
Training on augumented user 21874 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21874 AUC after training: 0.5
User 21874 does not improve AUC. Reverting changes.
Training on augumented user 54388 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54388 AUC after training: 0.5
User 54388 does not improve AUC. Reverting changes.
Training on augumented user 57281 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57281 AUC after training: 0.5
User 57281 does not improve AUC. Reverting changes.
Training on augumented user 133209 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133209 AUC after training: 0.5
User 133209 does not improve AUC. Reverting changes.
Training on augumented user 63574 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63574 AUC after training: 0.5
User 63574 does not improve AUC. Reverting changes.
Training on augumented user 33897 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33897 AUC after training: 0.5
User 33897 does not improve AUC. Reverting changes.
Training on augumented user 88588 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88588 AUC after training: 0.5
User 88588 does not improve AUC. Reverting changes.
Training on augumented user 51356 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51356 AUC after training: 0.5
User 51356 does not improve AUC. Reverting changes.
Training on augumented user 37851 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37851 AUC after training: 0.5
User 37851 does not improve AUC. Reverting changes.
Training on augumented user 127962 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127962 AUC after training: 0.5
User 127962 does not improve AUC. Reverting changes.
Training on augumented user 74714 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74714 AUC after training: 0.5
User 74714 does not improve AUC. Reverting changes.
Training on augumented user 9229 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9229 AUC after training: 0.5
User 9229 does not improve AUC. Reverting changes.
Training on augumented user 109065 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109065 AUC after training: 0.5
User 109065 does not improve AUC. Reverting changes.
Training on augumented user 90217 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90217 AUC after training: 0.5
User 90217 does not improve AUC. Reverting changes.
Training on augumented user 9914 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9914 AUC after training: 0.5
User 9914 does not improve AUC. Reverting changes.
Training on augumented user 21404 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21404 AUC after training: 0.5
User 21404 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:52:28.125900] start test user 56518 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:29.032451] start test user 56518 27/568 recall augumented users by random, augumented_users = [74511, 86489, 51885, 71651, 25226, 94831, 121571, 111295, 115979, 6416, 71413, 51075, 126042, 80000, 5237, 64554, 5113, 131441, 12539, 32447, 88990, 29574, 66415, 32371, 82602, 121735, 70470, 127236, 127543, 84614, 73745, 49724, 80045, 133222, 132979, 19822, 101250, 39480, 8, 38724, 80751, 63340, 123138, 70282, 82844, 75475, 119943, 53272, 126435, 92310]
[2024-12-02 17:52:29.076596] user = 56518 Cloud 27/568
[2024-12-02 17:52:29.116158] user = 56518 Local 27/568
[2024-12-02 17:52:29.179639] user = 56518 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:32.323545] user = 56518 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8532196969696969
Training on augumented user 74511 0/50 current_auc = 0.8532196969696969
User 74511 AUC after training: 0.8532196969696969
User 74511 does not improve AUC. Reverting changes.
Training on augumented user 86489 1/50 current_auc = 0.8532196969696969
User 86489 AUC after training: 0.8541666666666667
User 86489 improves AUC. Keeping the model.
Training on augumented user 51885 2/50 current_auc = 0.8541666666666667
User 51885 AUC after training: 0.8532196969696969
User 51885 does not improve AUC. Reverting changes.
Training on augumented user 71651 3/50 current_auc = 0.8541666666666667
User 71651 AUC after training: 0.8532196969696969
User 71651 does not improve AUC. Reverting changes.
Training on augumented user 25226 4/50 current_auc = 0.8541666666666667
User 25226 AUC after training: 0.8541666666666667
User 25226 does not improve AUC. Reverting changes.
Training on augumented user 94831 5/50 current_auc = 0.8541666666666667
User 94831 AUC after training: 0.8541666666666667
User 94831 does not improve AUC. Reverting changes.
Training on augumented user 121571 6/50 current_auc = 0.8541666666666667
User 121571 AUC after training: 0.8541666666666667
User 121571 does not improve AUC. Reverting changes.
Training on augumented user 111295 7/50 current_auc = 0.8541666666666667
User 111295 AUC after training: 0.8541666666666667
User 111295 does not improve AUC. Reverting changes.
Training on augumented user 115979 8/50 current_auc = 0.8541666666666667
User 115979 AUC after training: 0.8532196969696969
User 115979 does not improve AUC. Reverting changes.
Training on augumented user 6416 9/50 current_auc = 0.8541666666666667
User 6416 AUC after training: 0.8541666666666667
User 6416 does not improve AUC. Reverting changes.
Training on augumented user 71413 10/50 current_auc = 0.8541666666666667
User 71413 AUC after training: 0.8532196969696969
User 71413 does not improve AUC. Reverting changes.
Training on augumented user 51075 11/50 current_auc = 0.8541666666666667
User 51075 AUC after training: 0.8565340909090909
User 51075 improves AUC. Keeping the model.
Training on augumented user 126042 12/50 current_auc = 0.8565340909090909
User 126042 AUC after training: 0.8555871212121211
User 126042 does not improve AUC. Reverting changes.
Training on augumented user 80000 13/50 current_auc = 0.8565340909090909
User 80000 AUC after training: 0.8555871212121212
User 80000 does not improve AUC. Reverting changes.
Training on augumented user 5237 14/50 current_auc = 0.8565340909090909
User 5237 AUC after training: 0.8565340909090909
User 5237 does not improve AUC. Reverting changes.
Training on augumented user 64554 15/50 current_auc = 0.8565340909090909
User 64554 AUC after training: 0.8555871212121211
User 64554 does not improve AUC. Reverting changes.
Training on augumented user 5113 16/50 current_auc = 0.8565340909090909
User 5113 AUC after training: 0.8555871212121211
User 5113 does not improve AUC. Reverting changes.
Training on augumented user 131441 17/50 current_auc = 0.8565340909090909
User 131441 AUC after training: 0.8565340909090909
User 131441 does not improve AUC. Reverting changes.
Training on augumented user 12539 18/50 current_auc = 0.8565340909090909
User 12539 AUC after training: 0.8579545454545454
User 12539 improves AUC. Keeping the model.
Training on augumented user 32447 19/50 current_auc = 0.8579545454545454
User 32447 AUC after training: 0.8579545454545454
User 32447 does not improve AUC. Reverting changes.
Training on augumented user 88990 20/50 current_auc = 0.8579545454545454
User 88990 AUC after training: 0.8555871212121211
User 88990 does not improve AUC. Reverting changes.
Training on augumented user 29574 21/50 current_auc = 0.8579545454545454
User 29574 AUC after training: 0.8626893939393939
User 29574 improves AUC. Keeping the model.
Training on augumented user 66415 22/50 current_auc = 0.8626893939393939
User 66415 AUC after training: 0.8617424242424243
User 66415 does not improve AUC. Reverting changes.
Training on augumented user 32371 23/50 current_auc = 0.8626893939393939
User 32371 AUC after training: 0.8617424242424241
User 32371 does not improve AUC. Reverting changes.
Training on augumented user 82602 24/50 current_auc = 0.8626893939393939
User 82602 AUC after training: 0.8617424242424243
User 82602 does not improve AUC. Reverting changes.
Training on augumented user 121735 25/50 current_auc = 0.8626893939393939
User 121735 AUC after training: 0.8598484848484849
User 121735 does not improve AUC. Reverting changes.
Training on augumented user 70470 26/50 current_auc = 0.8626893939393939
User 70470 AUC after training: 0.8598484848484848
User 70470 does not improve AUC. Reverting changes.
Training on augumented user 127236 27/50 current_auc = 0.8626893939393939
User 127236 AUC after training: 0.8617424242424241
User 127236 does not improve AUC. Reverting changes.
Training on augumented user 127543 28/50 current_auc = 0.8626893939393939
User 127543 AUC after training: 0.8607954545454546
User 127543 does not improve AUC. Reverting changes.
Training on augumented user 84614 29/50 current_auc = 0.8626893939393939
User 84614 AUC after training: 0.8598484848484849
User 84614 does not improve AUC. Reverting changes.
Training on augumented user 73745 30/50 current_auc = 0.8626893939393939
User 73745 AUC after training: 0.8626893939393939
User 73745 does not improve AUC. Reverting changes.
Training on augumented user 49724 31/50 current_auc = 0.8626893939393939
User 49724 AUC after training: 0.8617424242424243
User 49724 does not improve AUC. Reverting changes.
Training on augumented user 80045 32/50 current_auc = 0.8626893939393939
User 80045 AUC after training: 0.8598484848484848
User 80045 does not improve AUC. Reverting changes.
Training on augumented user 133222 33/50 current_auc = 0.8626893939393939
User 133222 AUC after training: 0.8617424242424242
User 133222 does not improve AUC. Reverting changes.
Training on augumented user 132979 34/50 current_auc = 0.8626893939393939
User 132979 AUC after training: 0.8617424242424242
User 132979 does not improve AUC. Reverting changes.
Training on augumented user 19822 35/50 current_auc = 0.8626893939393939
User 19822 AUC after training: 0.8626893939393939
User 19822 does not improve AUC. Reverting changes.
Training on augumented user 101250 36/50 current_auc = 0.8626893939393939
User 101250 AUC after training: 0.8598484848484849
User 101250 does not improve AUC. Reverting changes.
Training on augumented user 39480 37/50 current_auc = 0.8626893939393939
User 39480 AUC after training: 0.8598484848484849
User 39480 does not improve AUC. Reverting changes.
Training on augumented user 8 38/50 current_auc = 0.8626893939393939
User 8 AUC after training: 0.8607954545454546
User 8 does not improve AUC. Reverting changes.
Training on augumented user 38724 39/50 current_auc = 0.8626893939393939
User 38724 AUC after training: 0.8607954545454546
User 38724 does not improve AUC. Reverting changes.
Training on augumented user 80751 40/50 current_auc = 0.8626893939393939
User 80751 AUC after training: 0.8598484848484849
User 80751 does not improve AUC. Reverting changes.
Training on augumented user 63340 41/50 current_auc = 0.8626893939393939
User 63340 AUC after training: 0.8598484848484849
User 63340 does not improve AUC. Reverting changes.
Training on augumented user 123138 42/50 current_auc = 0.8626893939393939
User 123138 AUC after training: 0.8626893939393939
User 123138 does not improve AUC. Reverting changes.
Training on augumented user 70282 43/50 current_auc = 0.8626893939393939
User 70282 AUC after training: 0.856060606060606
User 70282 does not improve AUC. Reverting changes.
Training on augumented user 82844 44/50 current_auc = 0.8626893939393939
User 82844 AUC after training: 0.8589015151515151
User 82844 does not improve AUC. Reverting changes.
Training on augumented user 75475 45/50 current_auc = 0.8626893939393939
User 75475 AUC after training: 0.8579545454545454
User 75475 does not improve AUC. Reverting changes.
Training on augumented user 119943 46/50 current_auc = 0.8626893939393939
User 119943 AUC after training: 0.8589015151515151
User 119943 does not improve AUC. Reverting changes.
Training on augumented user 53272 47/50 current_auc = 0.8626893939393939
User 53272 AUC after training: 0.859375
User 53272 does not improve AUC. Reverting changes.
Training on augumented user 126435 48/50 current_auc = 0.8626893939393939
User 126435 AUC after training: 0.8607954545454545
User 126435 does not improve AUC. Reverting changes.
Training on augumented user 92310 49/50 current_auc = 0.8626893939393939
User 92310 AUC after training: 0.8598484848484849
User 92310 does not improve AUC. Reverting changes.
[2024-12-02 17:53:02.259501] start test user 56520 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:02.683654] start test user 56520 28/568 recall augumented users by random, augumented_users = [30355, 10161, 63508, 104574, 52805, 34885, 108921, 70898, 106470, 21562, 99099, 53042, 63681, 72161, 67662, 76163, 58296, 74086, 129613, 91219, 25062, 3775, 96836, 101345, 120674, 18957, 12924, 123486, 92516, 101306, 70496, 22655, 1915, 98268, 46615, 58506, 118034, 54183, 138196, 55771, 93049, 75226, 64808, 76064, 7680, 12773, 49925, 98245, 4200, 1485]
[2024-12-02 17:53:02.699589] user = 56520 Cloud 28/568
[2024-12-02 17:53:02.788052] user = 56520 Local 28/568
[2024-12-02 17:53:02.911093] user = 56520 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:05.430586] user = 56520 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.909785058183208
Training on augumented user 30355 0/50 current_auc = 0.909785058183208
User 30355 AUC after training: 0.90953993753377
User 30355 does not improve AUC. Reverting changes.
Training on augumented user 10161 1/50 current_auc = 0.909785058183208
User 10161 AUC after training: 0.9093633452379385
User 10161 does not improve AUC. Reverting changes.
Training on augumented user 63508 2/50 current_auc = 0.909785058183208
User 63508 AUC after training: 0.9099352934199603
User 63508 improves AUC. Keeping the model.
Training on augumented user 104574 3/50 current_auc = 0.9099352934199603
User 104574 AUC after training: 0.9093738880615702
User 104574 does not improve AUC. Reverting changes.
Training on augumented user 52805 4/50 current_auc = 0.9099352934199603
User 52805 AUC after training: 0.9104255347188361
User 52805 improves AUC. Keeping the model.
Training on augumented user 34885 5/50 current_auc = 0.9104255347188361
User 34885 AUC after training: 0.9104176276011122
User 34885 does not improve AUC. Reverting changes.
Training on augumented user 108921 6/50 current_auc = 0.9104255347188361
User 108921 AUC after training: 0.910146149892595
User 108921 does not improve AUC. Reverting changes.
Training on augumented user 70898 7/50 current_auc = 0.9104255347188361
User 70898 AUC after training: 0.9103332850120583
User 70898 does not improve AUC. Reverting changes.
Training on augumented user 106470 8/50 current_auc = 0.9104255347188361
User 106470 AUC after training: 0.9107563158102818
User 106470 improves AUC. Keeping the model.
Training on augumented user 21562 9/50 current_auc = 0.9107563158102818
User 21562 AUC after training: 0.9117776518496066
User 21562 improves AUC. Keeping the model.
Training on augumented user 99099 10/50 current_auc = 0.9117776518496066
User 99099 AUC after training: 0.9121901398241985
User 99099 improves AUC. Keeping the model.
Training on augumented user 53042 11/50 current_auc = 0.9121901398241985
User 53042 AUC after training: 0.91204781170517
User 53042 does not improve AUC. Reverting changes.
Training on augumented user 63681 12/50 current_auc = 0.9121901398241985
User 63681 AUC after training: 0.9124194462381887
User 63681 improves AUC. Keeping the model.
Training on augumented user 72161 13/50 current_auc = 0.9124194462381887
User 72161 AUC after training: 0.911923933527497
User 72161 does not improve AUC. Reverting changes.
Training on augumented user 67662 14/50 current_auc = 0.9124194462381887
User 67662 AUC after training: 0.9118356373795813
User 67662 does not improve AUC. Reverting changes.
Training on augumented user 76163 15/50 current_auc = 0.9124194462381887
User 76163 AUC after training: 0.9127792200946219
User 76163 improves AUC. Keeping the model.
Training on augumented user 58296 16/50 current_auc = 0.9127792200946219
User 58296 AUC after training: 0.9118936229095558
User 58296 does not improve AUC. Reverting changes.
Training on augumented user 74086 17/50 current_auc = 0.9127792200946219
User 74086 AUC after training: 0.9132536471580501
User 74086 improves AUC. Keeping the model.
Training on augumented user 129613 18/50 current_auc = 0.9132536471580501
User 129613 AUC after training: 0.9130665120385868
User 129613 does not improve AUC. Reverting changes.
Training on augumented user 91219 19/50 current_auc = 0.9132536471580501
User 91219 AUC after training: 0.913058604920863
User 91219 does not improve AUC. Reverting changes.
Training on augumented user 25062 20/50 current_auc = 0.9132536471580501
User 25062 AUC after training: 0.9132536471580501
User 25062 does not improve AUC. Reverting changes.
Training on augumented user 3775 21/50 current_auc = 0.9132536471580501
User 3775 AUC after training: 0.9123944070320633
User 3775 does not improve AUC. Reverting changes.
Training on augumented user 96836 22/50 current_auc = 0.9132536471580501
User 96836 AUC after training: 0.9131930259221677
User 96836 does not improve AUC. Reverting changes.
Training on augumented user 101345 23/50 current_auc = 0.9132536471580501
User 101345 AUC after training: 0.9119937797340573
User 101345 does not improve AUC. Reverting changes.
Training on augumented user 120674 24/50 current_auc = 0.9132536471580501
User 120674 AUC after training: 0.9141392443431162
User 120674 improves AUC. Keeping the model.
Training on augumented user 18957 25/50 current_auc = 0.9141392443431162
User 18957 AUC after training: 0.9140838945190496
User 18957 does not improve AUC. Reverting changes.
Training on augumented user 12924 26/50 current_auc = 0.9141392443431162
User 12924 AUC after training: 0.9142394011676178
User 12924 improves AUC. Keeping the model.
Training on augumented user 123486 27/50 current_auc = 0.9142394011676178
User 123486 AUC after training: 0.9141919584612749
User 123486 does not improve AUC. Reverting changes.
Training on augumented user 92516 28/50 current_auc = 0.9142394011676178
User 92516 AUC after training: 0.9124734782093014
User 92516 does not improve AUC. Reverting changes.
Training on augumented user 101306 29/50 current_auc = 0.9142394011676178
User 101306 AUC after training: 0.9136450494853784
User 101306 does not improve AUC. Reverting changes.
Training on augumented user 70496 30/50 current_auc = 0.9142394011676178
User 70496 AUC after training: 0.9148666991737062
User 70496 improves AUC. Keeping the model.
Training on augumented user 22655 31/50 current_auc = 0.9148666991737062
User 22655 AUC after training: 0.9145029717584112
User 22655 does not improve AUC. Reverting changes.
Training on augumented user 1915 32/50 current_auc = 0.9148666991737062
User 1915 AUC after training: 0.9148192564673634
User 1915 does not improve AUC. Reverting changes.
Training on augumented user 98268 33/50 current_auc = 0.9148666991737062
User 98268 AUC after training: 0.9148640634677984
User 98268 does not improve AUC. Reverting changes.
Training on augumented user 46615 34/50 current_auc = 0.9148666991737062
User 46615 AUC after training: 0.9149049169093713
User 46615 improves AUC. Keeping the model.
Training on augumented user 58506 35/50 current_auc = 0.9149049169093713
User 58506 AUC after training: 0.9143922721102781
User 58506 does not improve AUC. Reverting changes.
Training on augumented user 118034 36/50 current_auc = 0.9149049169093713
User 118034 AUC after training: 0.9149589488804839
User 118034 improves AUC. Keeping the model.
Training on augumented user 54183 37/50 current_auc = 0.9149589488804839
User 54183 AUC after training: 0.9150841449111108
User 54183 improves AUC. Keeping the model.
Training on augumented user 138196 38/50 current_auc = 0.9150841449111108
User 138196 AUC after training: 0.9151249983526837
User 138196 improves AUC. Keeping the model.
Training on augumented user 55771 39/50 current_auc = 0.9151249983526837
User 55771 AUC after training: 0.9149497239098061
User 55771 does not improve AUC. Reverting changes.
Training on augumented user 93049 40/50 current_auc = 0.9151249983526837
User 93049 AUC after training: 0.9148021243789619
User 93049 does not improve AUC. Reverting changes.
Training on augumented user 75226 41/50 current_auc = 0.9151249983526837
User 75226 AUC after training: 0.9150643771168014
User 75226 does not improve AUC. Reverting changes.
Training on augumented user 64808 42/50 current_auc = 0.9151249983526837
User 64808 AUC after training: 0.9150696485286173
User 64808 does not improve AUC. Reverting changes.
Training on augumented user 76064 43/50 current_auc = 0.9151249983526837
User 76064 AUC after training: 0.9152225194712773
User 76064 improves AUC. Keeping the model.
Training on augumented user 7680 44/50 current_auc = 0.9152225194712773
User 7680 AUC after training: 0.9146980139955984
User 7680 does not improve AUC. Reverting changes.
Training on augumented user 12773 45/50 current_auc = 0.9152225194712773
User 12773 AUC after training: 0.9151803481767505
User 12773 does not improve AUC. Reverting changes.
Training on augumented user 49925 46/50 current_auc = 0.9152225194712773
User 49925 AUC after training: 0.9147981708201
User 49925 does not improve AUC. Reverting changes.
Training on augumented user 98245 47/50 current_auc = 0.9152225194712773
User 98245 AUC after training: 0.9147863101435142
User 98245 does not improve AUC. Reverting changes.
Training on augumented user 4200 48/50 current_auc = 0.9152225194712773
User 4200 AUC after training: 0.9154043831789249
User 4200 improves AUC. Keeping the model.
Training on augumented user 1485 49/50 current_auc = 0.9154043831789249
User 1485 AUC after training: 0.9153793439727995
User 1485 does not improve AUC. Reverting changes.
[2024-12-02 17:53:35.318058] start test user 56521 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:36.058062] start test user 56521 29/568 recall augumented users by random, augumented_users = [389, 24648, 40711, 114271, 129088, 24136, 113469, 2229, 38140, 128290, 52633, 134209, 61560, 126208, 116350, 24696, 33920, 93327, 38948, 15168, 32003, 75406, 70597, 99978, 65506, 114145, 28981, 71670, 61817, 57664, 25433, 97715, 1838, 45749, 104618, 100435, 42724, 12921, 67687, 99348, 7228, 123843, 72106, 72844, 8993, 107665, 33272, 99149, 71099, 106880]
[2024-12-02 17:53:36.090842] user = 56521 Cloud 29/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:53:36.097149] user = 56521 Local 29/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:53:36.217632] user = 56521 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:53:38.511337] user = 56521 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 389 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 389 AUC after training: 0.5
User 389 does not improve AUC. Reverting changes.
Training on augumented user 24648 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24648 AUC after training: 0.5
User 24648 does not improve AUC. Reverting changes.
Training on augumented user 40711 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40711 AUC after training: 0.5
User 40711 does not improve AUC. Reverting changes.
Training on augumented user 114271 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114271 AUC after training: 0.5
User 114271 does not improve AUC. Reverting changes.
Training on augumented user 129088 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129088 AUC after training: 0.5
User 129088 does not improve AUC. Reverting changes.
Training on augumented user 24136 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24136 AUC after training: 0.5
User 24136 does not improve AUC. Reverting changes.
Training on augumented user 113469 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113469 AUC after training: 0.5
User 113469 does not improve AUC. Reverting changes.
Training on augumented user 2229 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2229 AUC after training: 0.5
User 2229 does not improve AUC. Reverting changes.
Training on augumented user 38140 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38140 AUC after training: 0.5
User 38140 does not improve AUC. Reverting changes.
Training on augumented user 128290 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128290 AUC after training: 0.5
User 128290 does not improve AUC. Reverting changes.
Training on augumented user 52633 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52633 AUC after training: 0.5
User 52633 does not improve AUC. Reverting changes.
Training on augumented user 134209 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134209 AUC after training: 0.5
User 134209 does not improve AUC. Reverting changes.
Training on augumented user 61560 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61560 AUC after training: 0.5
User 61560 does not improve AUC. Reverting changes.
Training on augumented user 126208 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126208 AUC after training: 0.5
User 126208 does not improve AUC. Reverting changes.
Training on augumented user 116350 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116350 AUC after training: 0.5
User 116350 does not improve AUC. Reverting changes.
Training on augumented user 24696 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24696 AUC after training: 0.5
User 24696 does not improve AUC. Reverting changes.
Training on augumented user 33920 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33920 AUC after training: 0.5
User 33920 does not improve AUC. Reverting changes.
Training on augumented user 93327 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93327 AUC after training: 0.5
User 93327 does not improve AUC. Reverting changes.
Training on augumented user 38948 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38948 AUC after training: 0.5
User 38948 does not improve AUC. Reverting changes.
Training on augumented user 15168 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15168 AUC after training: 0.5
User 15168 does not improve AUC. Reverting changes.
Training on augumented user 32003 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32003 AUC after training: 0.5
User 32003 does not improve AUC. Reverting changes.
Training on augumented user 75406 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75406 AUC after training: 0.5
User 75406 does not improve AUC. Reverting changes.
Training on augumented user 70597 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70597 AUC after training: 0.5
User 70597 does not improve AUC. Reverting changes.
Training on augumented user 99978 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99978 AUC after training: 0.5
User 99978 does not improve AUC. Reverting changes.
Training on augumented user 65506 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65506 AUC after training: 0.5
User 65506 does not improve AUC. Reverting changes.
Training on augumented user 114145 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114145 AUC after training: 0.5
User 114145 does not improve AUC. Reverting changes.
Training on augumented user 28981 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28981 AUC after training: 0.5
User 28981 does not improve AUC. Reverting changes.
Training on augumented user 71670 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71670 AUC after training: 0.5
User 71670 does not improve AUC. Reverting changes.
Training on augumented user 61817 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61817 AUC after training: 0.5
User 61817 does not improve AUC. Reverting changes.
Training on augumented user 57664 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57664 AUC after training: 0.5
User 57664 does not improve AUC. Reverting changes.
Training on augumented user 25433 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25433 AUC after training: 0.5
User 25433 does not improve AUC. Reverting changes.
Training on augumented user 97715 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97715 AUC after training: 0.5
User 97715 does not improve AUC. Reverting changes.
Training on augumented user 1838 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1838 AUC after training: 0.5
User 1838 does not improve AUC. Reverting changes.
Training on augumented user 45749 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45749 AUC after training: 0.5
User 45749 does not improve AUC. Reverting changes.
Training on augumented user 104618 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104618 AUC after training: 0.5
User 104618 does not improve AUC. Reverting changes.
Training on augumented user 100435 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100435 AUC after training: 0.5
User 100435 does not improve AUC. Reverting changes.
Training on augumented user 42724 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42724 AUC after training: 0.5
User 42724 does not improve AUC. Reverting changes.
Training on augumented user 12921 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12921 AUC after training: 0.5
User 12921 does not improve AUC. Reverting changes.
Training on augumented user 67687 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67687 AUC after training: 0.5
User 67687 does not improve AUC. Reverting changes.
Training on augumented user 99348 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99348 AUC after training: 0.5
User 99348 does not improve AUC. Reverting changes.
Training on augumented user 7228 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7228 AUC after training: 0.5
User 7228 does not improve AUC. Reverting changes.
Training on augumented user 123843 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123843 AUC after training: 0.5
User 123843 does not improve AUC. Reverting changes.
Training on augumented user 72106 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72106 AUC after training: 0.5
User 72106 does not improve AUC. Reverting changes.
Training on augumented user 72844 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72844 AUC after training: 0.5
User 72844 does not improve AUC. Reverting changes.
Training on augumented user 8993 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8993 AUC after training: 0.5
User 8993 does not improve AUC. Reverting changes.
Training on augumented user 107665 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107665 AUC after training: 0.5
User 107665 does not improve AUC. Reverting changes.
Training on augumented user 33272 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33272 AUC after training: 0.5
User 33272 does not improve AUC. Reverting changes.
Training on augumented user 99149 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99149 AUC after training: 0.5
User 99149 does not improve AUC. Reverting changes.
Training on augumented user 71099 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71099 AUC after training: 0.5
User 71099 does not improve AUC. Reverting changes.
Training on augumented user 106880 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106880 AUC after training: 0.5
User 106880 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:54:11.544877] start test user 56574 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:12.247962] start test user 56574 30/568 recall augumented users by random, augumented_users = [17494, 85386, 26968, 11713, 123446, 96455, 63623, 19336, 135694, 34509, 8456, 12314, 128050, 11024, 33744, 5265, 25948, 11387, 22466, 91641, 19007, 13594, 84538, 98288, 101188, 124264, 96586, 83657, 81642, 126996, 39990, 125679, 96728, 105747, 49292, 136787, 114453, 105061, 38411, 91658, 132821, 30799, 46713, 82556, 74738, 79833, 5434, 116234, 9136, 88033]
[2024-12-02 17:54:12.264067] user = 56574 Cloud 30/568
[2024-12-02 17:54:12.285634] user = 56574 Local 30/568
[2024-12-02 17:54:12.419677] user = 56574 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:15.719027] user = 56574 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6069958847736625
Training on augumented user 17494 0/50 current_auc = 0.6069958847736625
User 17494 AUC after training: 0.6072530864197532
User 17494 improves AUC. Keeping the model.
Training on augumented user 85386 1/50 current_auc = 0.6072530864197532
User 85386 AUC after training: 0.6100823045267489
User 85386 improves AUC. Keeping the model.
Training on augumented user 26968 2/50 current_auc = 0.6100823045267489
User 26968 AUC after training: 0.6098251028806585
User 26968 does not improve AUC. Reverting changes.
Training on augumented user 11713 3/50 current_auc = 0.6100823045267489
User 11713 AUC after training: 0.6093106995884774
User 11713 does not improve AUC. Reverting changes.
Training on augumented user 123446 4/50 current_auc = 0.6100823045267489
User 123446 AUC after training: 0.6098251028806585
User 123446 does not improve AUC. Reverting changes.
Training on augumented user 96455 5/50 current_auc = 0.6100823045267489
User 96455 AUC after training: 0.6095679012345679
User 96455 does not improve AUC. Reverting changes.
Training on augumented user 63623 6/50 current_auc = 0.6100823045267489
User 63623 AUC after training: 0.6082818930041153
User 63623 does not improve AUC. Reverting changes.
Training on augumented user 19336 7/50 current_auc = 0.6100823045267489
User 19336 AUC after training: 0.6090534979423867
User 19336 does not improve AUC. Reverting changes.
Training on augumented user 135694 8/50 current_auc = 0.6100823045267489
User 135694 AUC after training: 0.6077674897119342
User 135694 does not improve AUC. Reverting changes.
Training on augumented user 34509 9/50 current_auc = 0.6100823045267489
User 34509 AUC after training: 0.6103395061728395
User 34509 improves AUC. Keeping the model.
Training on augumented user 8456 10/50 current_auc = 0.6103395061728395
User 8456 AUC after training: 0.6100823045267489
User 8456 does not improve AUC. Reverting changes.
Training on augumented user 12314 11/50 current_auc = 0.6103395061728395
User 12314 AUC after training: 0.6082818930041152
User 12314 does not improve AUC. Reverting changes.
Training on augumented user 128050 12/50 current_auc = 0.6103395061728395
User 128050 AUC after training: 0.6103395061728395
User 128050 does not improve AUC. Reverting changes.
Training on augumented user 11024 13/50 current_auc = 0.6103395061728395
User 11024 AUC after training: 0.6095679012345679
User 11024 does not improve AUC. Reverting changes.
Training on augumented user 33744 14/50 current_auc = 0.6103395061728395
User 33744 AUC after training: 0.6098251028806585
User 33744 does not improve AUC. Reverting changes.
Training on augumented user 5265 15/50 current_auc = 0.6103395061728395
User 5265 AUC after training: 0.6098251028806585
User 5265 does not improve AUC. Reverting changes.
Training on augumented user 25948 16/50 current_auc = 0.6103395061728395
User 25948 AUC after training: 0.6103395061728395
User 25948 does not improve AUC. Reverting changes.
Training on augumented user 11387 17/50 current_auc = 0.6103395061728395
User 11387 AUC after training: 0.6098251028806585
User 11387 does not improve AUC. Reverting changes.
Training on augumented user 22466 18/50 current_auc = 0.6103395061728395
User 22466 AUC after training: 0.6085390946502057
User 22466 does not improve AUC. Reverting changes.
Training on augumented user 91641 19/50 current_auc = 0.6103395061728395
User 91641 AUC after training: 0.61059670781893
User 91641 improves AUC. Keeping the model.
Training on augumented user 19007 20/50 current_auc = 0.61059670781893
User 19007 AUC after training: 0.6098251028806585
User 19007 does not improve AUC. Reverting changes.
Training on augumented user 13594 21/50 current_auc = 0.61059670781893
User 13594 AUC after training: 0.6098251028806585
User 13594 does not improve AUC. Reverting changes.
Training on augumented user 84538 22/50 current_auc = 0.61059670781893
User 84538 AUC after training: 0.6108539094650206
User 84538 improves AUC. Keeping the model.
Training on augumented user 98288 23/50 current_auc = 0.6108539094650206
User 98288 AUC after training: 0.6090534979423868
User 98288 does not improve AUC. Reverting changes.
Training on augumented user 101188 24/50 current_auc = 0.6108539094650206
User 101188 AUC after training: 0.6100823045267489
User 101188 does not improve AUC. Reverting changes.
Training on augumented user 124264 25/50 current_auc = 0.6108539094650206
User 124264 AUC after training: 0.6087962962962963
User 124264 does not improve AUC. Reverting changes.
Training on augumented user 96586 26/50 current_auc = 0.6108539094650206
User 96586 AUC after training: 0.6108539094650205
User 96586 does not improve AUC. Reverting changes.
Training on augumented user 83657 27/50 current_auc = 0.6108539094650206
User 83657 AUC after training: 0.6108539094650206
User 83657 does not improve AUC. Reverting changes.
Training on augumented user 81642 28/50 current_auc = 0.6108539094650206
User 81642 AUC after training: 0.61059670781893
User 81642 does not improve AUC. Reverting changes.
Training on augumented user 126996 29/50 current_auc = 0.6108539094650206
User 126996 AUC after training: 0.6093106995884774
User 126996 does not improve AUC. Reverting changes.
Training on augumented user 39990 30/50 current_auc = 0.6108539094650206
User 39990 AUC after training: 0.6113683127572016
User 39990 improves AUC. Keeping the model.
Training on augumented user 125679 31/50 current_auc = 0.6113683127572016
User 125679 AUC after training: 0.6098251028806585
User 125679 does not improve AUC. Reverting changes.
Training on augumented user 96728 32/50 current_auc = 0.6113683127572016
User 96728 AUC after training: 0.61059670781893
User 96728 does not improve AUC. Reverting changes.
Training on augumented user 105747 33/50 current_auc = 0.6113683127572016
User 105747 AUC after training: 0.6093106995884774
User 105747 does not improve AUC. Reverting changes.
Training on augumented user 49292 34/50 current_auc = 0.6113683127572016
User 49292 AUC after training: 0.6103395061728396
User 49292 does not improve AUC. Reverting changes.
Training on augumented user 136787 35/50 current_auc = 0.6113683127572016
User 136787 AUC after training: 0.6111111111111112
User 136787 does not improve AUC. Reverting changes.
Training on augumented user 114453 36/50 current_auc = 0.6113683127572016
User 114453 AUC after training: 0.6087962962962963
User 114453 does not improve AUC. Reverting changes.
Training on augumented user 105061 37/50 current_auc = 0.6113683127572016
User 105061 AUC after training: 0.6108539094650206
User 105061 does not improve AUC. Reverting changes.
Training on augumented user 38411 38/50 current_auc = 0.6113683127572016
User 38411 AUC after training: 0.6103395061728395
User 38411 does not improve AUC. Reverting changes.
Training on augumented user 91658 39/50 current_auc = 0.6113683127572016
User 91658 AUC after training: 0.6103395061728395
User 91658 does not improve AUC. Reverting changes.
Training on augumented user 132821 40/50 current_auc = 0.6113683127572016
User 132821 AUC after training: 0.6108539094650205
User 132821 does not improve AUC. Reverting changes.
Training on augumented user 30799 41/50 current_auc = 0.6113683127572016
User 30799 AUC after training: 0.6077674897119342
User 30799 does not improve AUC. Reverting changes.
Training on augumented user 46713 42/50 current_auc = 0.6113683127572016
User 46713 AUC after training: 0.6113683127572017
User 46713 improves AUC. Keeping the model.
Training on augumented user 82556 43/50 current_auc = 0.6113683127572017
User 82556 AUC after training: 0.6069958847736625
User 82556 does not improve AUC. Reverting changes.
Training on augumented user 74738 44/50 current_auc = 0.6113683127572017
User 74738 AUC after training: 0.6111111111111112
User 74738 does not improve AUC. Reverting changes.
Training on augumented user 79833 45/50 current_auc = 0.6113683127572017
User 79833 AUC after training: 0.6072530864197532
User 79833 does not improve AUC. Reverting changes.
Training on augumented user 5434 46/50 current_auc = 0.6113683127572017
User 5434 AUC after training: 0.6103395061728395
User 5434 does not improve AUC. Reverting changes.
Training on augumented user 116234 47/50 current_auc = 0.6113683127572017
User 116234 AUC after training: 0.61059670781893
User 116234 does not improve AUC. Reverting changes.
Training on augumented user 9136 48/50 current_auc = 0.6113683127572017
User 9136 AUC after training: 0.6093106995884774
User 9136 does not improve AUC. Reverting changes.
Training on augumented user 88033 49/50 current_auc = 0.6113683127572017
User 88033 AUC after training: 0.6118827160493827
User 88033 improves AUC. Keeping the model.
[2024-12-02 17:54:48.778932] start test user 56595 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:49.271368] start test user 56595 31/568 recall augumented users by random, augumented_users = [66232, 77661, 17389, 80339, 48489, 92125, 83056, 37655, 16485, 69323, 128426, 1169, 134799, 126916, 136604, 135076, 88459, 63775, 73484, 53825, 50392, 67042, 4114, 74568, 3078, 33240, 126795, 114696, 38739, 43313, 21232, 16505, 57926, 65518, 120807, 40543, 68220, 90555, 133888, 9862, 38335, 118607, 71016, 62411, 80953, 92420, 32648, 47443, 99795, 35643]
[2024-12-02 17:54:49.286254] user = 56595 Cloud 31/568
[2024-12-02 17:54:49.301705] user = 56595 Local 31/568
[2024-12-02 17:54:49.355893] user = 56595 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:51.645264] user = 56595 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5873882820258193
Training on augumented user 66232 0/50 current_auc = 0.5873882820258193
User 66232 AUC after training: 0.5873882820258193
User 66232 does not improve AUC. Reverting changes.
Training on augumented user 77661 1/50 current_auc = 0.5873882820258193
User 77661 AUC after training: 0.5873882820258193
User 77661 does not improve AUC. Reverting changes.
Training on augumented user 17389 2/50 current_auc = 0.5873882820258193
User 17389 AUC after training: 0.586395233366435
User 17389 does not improve AUC. Reverting changes.
Training on augumented user 80339 3/50 current_auc = 0.5873882820258193
User 80339 AUC after training: 0.5883813306852036
User 80339 improves AUC. Keeping the model.
Training on augumented user 48489 4/50 current_auc = 0.5883813306852036
User 48489 AUC after training: 0.5883813306852036
User 48489 does not improve AUC. Reverting changes.
Training on augumented user 92125 5/50 current_auc = 0.5883813306852036
User 92125 AUC after training: 0.58987090367428
User 92125 improves AUC. Keeping the model.
Training on augumented user 83056 6/50 current_auc = 0.58987090367428
User 83056 AUC after training: 0.5903674280039721
User 83056 improves AUC. Keeping the model.
Training on augumented user 37655 7/50 current_auc = 0.5903674280039721
User 37655 AUC after training: 0.58987090367428
User 37655 does not improve AUC. Reverting changes.
Training on augumented user 16485 8/50 current_auc = 0.5903674280039721
User 16485 AUC after training: 0.5908639523336644
User 16485 improves AUC. Keeping the model.
Training on augumented user 69323 9/50 current_auc = 0.5908639523336644
User 69323 AUC after training: 0.5908639523336643
User 69323 does not improve AUC. Reverting changes.
Training on augumented user 128426 10/50 current_auc = 0.5908639523336644
User 128426 AUC after training: 0.5918570009930486
User 128426 improves AUC. Keeping the model.
Training on augumented user 1169 11/50 current_auc = 0.5918570009930486
User 1169 AUC after training: 0.5953326713008936
User 1169 improves AUC. Keeping the model.
Training on augumented user 134799 12/50 current_auc = 0.5953326713008936
User 134799 AUC after training: 0.5948361469712016
User 134799 does not improve AUC. Reverting changes.
Training on augumented user 126916 13/50 current_auc = 0.5953326713008936
User 126916 AUC after training: 0.5948361469712016
User 126916 does not improve AUC. Reverting changes.
Training on augumented user 136604 14/50 current_auc = 0.5953326713008936
User 136604 AUC after training: 0.5938430983118173
User 136604 does not improve AUC. Reverting changes.
Training on augumented user 135076 15/50 current_auc = 0.5953326713008936
User 135076 AUC after training: 0.5948361469712015
User 135076 does not improve AUC. Reverting changes.
Training on augumented user 88459 16/50 current_auc = 0.5953326713008936
User 88459 AUC after training: 0.5943396226415094
User 88459 does not improve AUC. Reverting changes.
Training on augumented user 63775 17/50 current_auc = 0.5953326713008936
User 63775 AUC after training: 0.5943396226415094
User 63775 does not improve AUC. Reverting changes.
Training on augumented user 73484 18/50 current_auc = 0.5953326713008936
User 73484 AUC after training: 0.5943396226415094
User 73484 does not improve AUC. Reverting changes.
Training on augumented user 53825 19/50 current_auc = 0.5953326713008936
User 53825 AUC after training: 0.596325719960278
User 53825 improves AUC. Keeping the model.
Training on augumented user 50392 20/50 current_auc = 0.596325719960278
User 50392 AUC after training: 0.5963257199602781
User 50392 improves AUC. Keeping the model.
Training on augumented user 67042 21/50 current_auc = 0.5963257199602781
User 67042 AUC after training: 0.5963257199602781
User 67042 does not improve AUC. Reverting changes.
Training on augumented user 4114 22/50 current_auc = 0.5963257199602781
User 4114 AUC after training: 0.58987090367428
User 4114 does not improve AUC. Reverting changes.
Training on augumented user 74568 23/50 current_auc = 0.5963257199602781
User 74568 AUC after training: 0.5953326713008937
User 74568 does not improve AUC. Reverting changes.
Training on augumented user 3078 24/50 current_auc = 0.5963257199602781
User 3078 AUC after training: 0.5933465739821251
User 3078 does not improve AUC. Reverting changes.
Training on augumented user 33240 25/50 current_auc = 0.5963257199602781
User 33240 AUC after training: 0.5958291956305859
User 33240 does not improve AUC. Reverting changes.
Training on augumented user 126795 26/50 current_auc = 0.5963257199602781
User 126795 AUC after training: 0.5948361469712015
User 126795 does not improve AUC. Reverting changes.
Training on augumented user 114696 27/50 current_auc = 0.5963257199602781
User 114696 AUC after training: 0.5918570009930486
User 114696 does not improve AUC. Reverting changes.
Training on augumented user 38739 28/50 current_auc = 0.5963257199602781
User 38739 AUC after training: 0.5958291956305859
User 38739 does not improve AUC. Reverting changes.
Training on augumented user 43313 29/50 current_auc = 0.5963257199602781
User 43313 AUC after training: 0.5953326713008937
User 43313 does not improve AUC. Reverting changes.
Training on augumented user 21232 30/50 current_auc = 0.5963257199602781
User 21232 AUC after training: 0.5953326713008937
User 21232 does not improve AUC. Reverting changes.
Training on augumented user 16505 31/50 current_auc = 0.5963257199602781
User 16505 AUC after training: 0.5958291956305859
User 16505 does not improve AUC. Reverting changes.
Training on augumented user 57926 32/50 current_auc = 0.5963257199602781
User 57926 AUC after training: 0.5973187686196623
User 57926 improves AUC. Keeping the model.
Training on augumented user 65518 33/50 current_auc = 0.5973187686196623
User 65518 AUC after training: 0.5973187686196623
User 65518 does not improve AUC. Reverting changes.
Training on augumented user 120807 34/50 current_auc = 0.5973187686196623
User 120807 AUC after training: 0.5963257199602781
User 120807 does not improve AUC. Reverting changes.
Training on augumented user 40543 35/50 current_auc = 0.5973187686196623
User 40543 AUC after training: 0.5963257199602781
User 40543 does not improve AUC. Reverting changes.
Training on augumented user 68220 36/50 current_auc = 0.5973187686196623
User 68220 AUC after training: 0.5978152929493545
User 68220 improves AUC. Keeping the model.
Training on augumented user 90555 37/50 current_auc = 0.5978152929493545
User 90555 AUC after training: 0.5968222442899701
User 90555 does not improve AUC. Reverting changes.
Training on augumented user 133888 38/50 current_auc = 0.5978152929493545
User 133888 AUC after training: 0.5968222442899702
User 133888 does not improve AUC. Reverting changes.
Training on augumented user 9862 39/50 current_auc = 0.5978152929493545
User 9862 AUC after training: 0.5973187686196623
User 9862 does not improve AUC. Reverting changes.
Training on augumented user 38335 40/50 current_auc = 0.5978152929493545
User 38335 AUC after training: 0.5913604766633564
User 38335 does not improve AUC. Reverting changes.
Training on augumented user 118607 41/50 current_auc = 0.5978152929493545
User 118607 AUC after training: 0.5983118172790467
User 118607 improves AUC. Keeping the model.
Training on augumented user 71016 42/50 current_auc = 0.5983118172790467
User 71016 AUC after training: 0.5978152929493545
User 71016 does not improve AUC. Reverting changes.
Training on augumented user 62411 43/50 current_auc = 0.5983118172790467
User 62411 AUC after training: 0.5978152929493544
User 62411 does not improve AUC. Reverting changes.
Training on augumented user 80953 44/50 current_auc = 0.5983118172790467
User 80953 AUC after training: 0.5978152929493544
User 80953 does not improve AUC. Reverting changes.
Training on augumented user 92420 45/50 current_auc = 0.5983118172790467
User 92420 AUC after training: 0.5973187686196623
User 92420 does not improve AUC. Reverting changes.
Training on augumented user 32648 46/50 current_auc = 0.5983118172790467
User 32648 AUC after training: 0.5968222442899702
User 32648 does not improve AUC. Reverting changes.
Training on augumented user 47443 47/50 current_auc = 0.5983118172790467
User 47443 AUC after training: 0.5988083416087389
User 47443 improves AUC. Keeping the model.
Training on augumented user 99795 48/50 current_auc = 0.5988083416087389
User 99795 AUC after training: 0.5908639523336643
User 99795 does not improve AUC. Reverting changes.
Training on augumented user 35643 49/50 current_auc = 0.5988083416087389
User 35643 AUC after training: 0.5958291956305858
User 35643 does not improve AUC. Reverting changes.
[2024-12-02 17:55:14.869447] start test user 56621 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:15.669840] start test user 56621 32/568 recall augumented users by random, augumented_users = [66638, 61443, 98298, 64219, 118438, 51846, 10322, 82172, 47795, 108405, 117848, 63157, 95697, 59611, 86897, 132660, 28310, 104946, 81374, 101355, 36484, 111933, 62651, 74949, 10962, 137136, 119544, 66765, 22569, 9776, 38998, 56771, 30541, 130346, 48079, 51384, 37707, 26347, 16731, 3552, 67628, 57055, 108558, 97043, 1229, 118867, 84368, 4886, 16734, 94853]
[2024-12-02 17:55:15.683954] user = 56621 Cloud 32/568
[2024-12-02 17:55:15.693831] user = 56621 Local 32/568
[2024-12-02 17:55:15.715262] user = 56621 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:18.606728] user = 56621 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.39772727272727276
Training on augumented user 66638 0/50 current_auc = 0.39772727272727276
User 66638 AUC after training: 0.3863636363636364
User 66638 does not improve AUC. Reverting changes.
Training on augumented user 61443 1/50 current_auc = 0.39772727272727276
User 61443 AUC after training: 0.39772727272727276
User 61443 does not improve AUC. Reverting changes.
Training on augumented user 98298 2/50 current_auc = 0.39772727272727276
User 98298 AUC after training: 0.39772727272727276
User 98298 does not improve AUC. Reverting changes.
Training on augumented user 64219 3/50 current_auc = 0.39772727272727276
User 64219 AUC after training: 0.39772727272727276
User 64219 does not improve AUC. Reverting changes.
Training on augumented user 118438 4/50 current_auc = 0.39772727272727276
User 118438 AUC after training: 0.39772727272727276
User 118438 does not improve AUC. Reverting changes.
Training on augumented user 51846 5/50 current_auc = 0.39772727272727276
User 51846 AUC after training: 0.39772727272727276
User 51846 does not improve AUC. Reverting changes.
Training on augumented user 10322 6/50 current_auc = 0.39772727272727276
User 10322 AUC after training: 0.39772727272727276
User 10322 does not improve AUC. Reverting changes.
Training on augumented user 82172 7/50 current_auc = 0.39772727272727276
User 82172 AUC after training: 0.39772727272727276
User 82172 does not improve AUC. Reverting changes.
Training on augumented user 47795 8/50 current_auc = 0.39772727272727276
User 47795 AUC after training: 0.39204545454545453
User 47795 does not improve AUC. Reverting changes.
Training on augumented user 108405 9/50 current_auc = 0.39772727272727276
User 108405 AUC after training: 0.4034090909090909
User 108405 improves AUC. Keeping the model.
Training on augumented user 117848 10/50 current_auc = 0.4034090909090909
User 117848 AUC after training: 0.39772727272727276
User 117848 does not improve AUC. Reverting changes.
Training on augumented user 63157 11/50 current_auc = 0.4034090909090909
User 63157 AUC after training: 0.39772727272727276
User 63157 does not improve AUC. Reverting changes.
Training on augumented user 95697 12/50 current_auc = 0.4034090909090909
User 95697 AUC after training: 0.39772727272727276
User 95697 does not improve AUC. Reverting changes.
Training on augumented user 59611 13/50 current_auc = 0.4034090909090909
User 59611 AUC after training: 0.39204545454545453
User 59611 does not improve AUC. Reverting changes.
Training on augumented user 86897 14/50 current_auc = 0.4034090909090909
User 86897 AUC after training: 0.39772727272727276
User 86897 does not improve AUC. Reverting changes.
Training on augumented user 132660 15/50 current_auc = 0.4034090909090909
User 132660 AUC after training: 0.4034090909090909
User 132660 does not improve AUC. Reverting changes.
Training on augumented user 28310 16/50 current_auc = 0.4034090909090909
User 28310 AUC after training: 0.4034090909090909
User 28310 does not improve AUC. Reverting changes.
Training on augumented user 104946 17/50 current_auc = 0.4034090909090909
User 104946 AUC after training: 0.39772727272727276
User 104946 does not improve AUC. Reverting changes.
Training on augumented user 81374 18/50 current_auc = 0.4034090909090909
User 81374 AUC after training: 0.4034090909090909
User 81374 does not improve AUC. Reverting changes.
Training on augumented user 101355 19/50 current_auc = 0.4034090909090909
User 101355 AUC after training: 0.4034090909090909
User 101355 does not improve AUC. Reverting changes.
Training on augumented user 36484 20/50 current_auc = 0.4034090909090909
User 36484 AUC after training: 0.3863636363636364
User 36484 does not improve AUC. Reverting changes.
Training on augumented user 111933 21/50 current_auc = 0.4034090909090909
User 111933 AUC after training: 0.3863636363636364
User 111933 does not improve AUC. Reverting changes.
Training on augumented user 62651 22/50 current_auc = 0.4034090909090909
User 62651 AUC after training: 0.39204545454545453
User 62651 does not improve AUC. Reverting changes.
Training on augumented user 74949 23/50 current_auc = 0.4034090909090909
User 74949 AUC after training: 0.39204545454545453
User 74949 does not improve AUC. Reverting changes.
Training on augumented user 10962 24/50 current_auc = 0.4034090909090909
User 10962 AUC after training: 0.39772727272727276
User 10962 does not improve AUC. Reverting changes.
Training on augumented user 137136 25/50 current_auc = 0.4034090909090909
User 137136 AUC after training: 0.4034090909090909
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 119544 26/50 current_auc = 0.4034090909090909
User 119544 AUC after training: 0.39772727272727276
User 119544 does not improve AUC. Reverting changes.
Training on augumented user 66765 27/50 current_auc = 0.4034090909090909
User 66765 AUC after training: 0.39772727272727276
User 66765 does not improve AUC. Reverting changes.
Training on augumented user 22569 28/50 current_auc = 0.4034090909090909
User 22569 AUC after training: 0.39772727272727276
User 22569 does not improve AUC. Reverting changes.
Training on augumented user 9776 29/50 current_auc = 0.4034090909090909
User 9776 AUC after training: 0.4034090909090909
User 9776 does not improve AUC. Reverting changes.
Training on augumented user 38998 30/50 current_auc = 0.4034090909090909
User 38998 AUC after training: 0.39204545454545453
User 38998 does not improve AUC. Reverting changes.
Training on augumented user 56771 31/50 current_auc = 0.4034090909090909
User 56771 AUC after training: 0.4034090909090909
User 56771 does not improve AUC. Reverting changes.
Training on augumented user 30541 32/50 current_auc = 0.4034090909090909
User 30541 AUC after training: 0.39772727272727276
User 30541 does not improve AUC. Reverting changes.
Training on augumented user 130346 33/50 current_auc = 0.4034090909090909
User 130346 AUC after training: 0.4034090909090909
User 130346 does not improve AUC. Reverting changes.
Training on augumented user 48079 34/50 current_auc = 0.4034090909090909
User 48079 AUC after training: 0.4034090909090909
User 48079 does not improve AUC. Reverting changes.
Training on augumented user 51384 35/50 current_auc = 0.4034090909090909
User 51384 AUC after training: 0.4034090909090909
User 51384 does not improve AUC. Reverting changes.
Training on augumented user 37707 36/50 current_auc = 0.4034090909090909
User 37707 AUC after training: 0.4034090909090909
User 37707 does not improve AUC. Reverting changes.
Training on augumented user 26347 37/50 current_auc = 0.4034090909090909
User 26347 AUC after training: 0.4034090909090909
User 26347 does not improve AUC. Reverting changes.
Training on augumented user 16731 38/50 current_auc = 0.4034090909090909
User 16731 AUC after training: 0.4034090909090909
User 16731 does not improve AUC. Reverting changes.
Training on augumented user 3552 39/50 current_auc = 0.4034090909090909
User 3552 AUC after training: 0.39772727272727276
User 3552 does not improve AUC. Reverting changes.
Training on augumented user 67628 40/50 current_auc = 0.4034090909090909
User 67628 AUC after training: 0.39772727272727276
User 67628 does not improve AUC. Reverting changes.
Training on augumented user 57055 41/50 current_auc = 0.4034090909090909
User 57055 AUC after training: 0.39772727272727276
User 57055 does not improve AUC. Reverting changes.
Training on augumented user 108558 42/50 current_auc = 0.4034090909090909
User 108558 AUC after training: 0.39772727272727276
User 108558 does not improve AUC. Reverting changes.
Training on augumented user 97043 43/50 current_auc = 0.4034090909090909
User 97043 AUC after training: 0.4034090909090909
User 97043 does not improve AUC. Reverting changes.
Training on augumented user 1229 44/50 current_auc = 0.4034090909090909
User 1229 AUC after training: 0.39772727272727276
User 1229 does not improve AUC. Reverting changes.
Training on augumented user 118867 45/50 current_auc = 0.4034090909090909
User 118867 AUC after training: 0.39772727272727276
User 118867 does not improve AUC. Reverting changes.
Training on augumented user 84368 46/50 current_auc = 0.4034090909090909
User 84368 AUC after training: 0.39772727272727276
User 84368 does not improve AUC. Reverting changes.
Training on augumented user 4886 47/50 current_auc = 0.4034090909090909
User 4886 AUC after training: 0.4090909090909091
User 4886 improves AUC. Keeping the model.
Training on augumented user 16734 48/50 current_auc = 0.4090909090909091
User 16734 AUC after training: 0.39204545454545453
User 16734 does not improve AUC. Reverting changes.
Training on augumented user 94853 49/50 current_auc = 0.4090909090909091
User 94853 AUC after training: 0.4090909090909091
User 94853 does not improve AUC. Reverting changes.
[2024-12-02 17:55:46.949377] start test user 56662 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:47.730791] start test user 56662 33/568 recall augumented users by random, augumented_users = [54201, 118609, 130723, 43343, 110171, 82629, 71832, 15418, 81702, 137218, 88328, 131249, 21535, 100316, 48968, 72347, 27961, 116577, 117686, 9812, 59259, 115538, 109149, 71980, 108477, 69031, 30541, 32396, 79283, 62951, 133231, 119429, 81882, 103105, 82004, 80118, 15852, 52184, 65544, 55954, 48003, 78466, 128699, 92921, 59038, 100921, 14457, 8604, 72729, 95787]
[2024-12-02 17:55:47.759410] user = 56662 Cloud 33/568
[2024-12-02 17:55:47.787207] user = 56662 Local 33/568
[2024-12-02 17:55:47.838492] user = 56662 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:50.119166] user = 56662 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4938914609053498
Training on augumented user 54201 0/50 current_auc = 0.4938914609053498
User 54201 AUC after training: 0.49832818930041156
User 54201 improves AUC. Keeping the model.
Training on augumented user 118609 1/50 current_auc = 0.49832818930041156
User 118609 AUC after training: 0.4974279835390947
User 118609 does not improve AUC. Reverting changes.
Training on augumented user 130723 2/50 current_auc = 0.49832818930041156
User 130723 AUC after training: 0.4979423868312758
User 130723 does not improve AUC. Reverting changes.
Training on augumented user 43343 3/50 current_auc = 0.49832818930041156
User 43343 AUC after training: 0.4976208847736626
User 43343 does not improve AUC. Reverting changes.
Training on augumented user 110171 4/50 current_auc = 0.49832818930041156
User 110171 AUC after training: 0.49884259259259256
User 110171 improves AUC. Keeping the model.
Training on augumented user 82629 5/50 current_auc = 0.49884259259259256
User 82629 AUC after training: 0.4989068930041152
User 82629 improves AUC. Keeping the model.
Training on augumented user 71832 6/50 current_auc = 0.4989068930041152
User 71832 AUC after training: 0.4985853909465021
User 71832 does not improve AUC. Reverting changes.
Training on augumented user 15418 7/50 current_auc = 0.4989068930041152
User 15418 AUC after training: 0.4971707818930041
User 15418 does not improve AUC. Reverting changes.
Training on augumented user 81702 8/50 current_auc = 0.4989068930041152
User 81702 AUC after training: 0.4981995884773663
User 81702 does not improve AUC. Reverting changes.
Training on augumented user 137218 9/50 current_auc = 0.4989068930041152
User 137218 AUC after training: 0.498070987654321
User 137218 does not improve AUC. Reverting changes.
Training on augumented user 88328 10/50 current_auc = 0.4989068930041152
User 88328 AUC after training: 0.4992605452674897
User 88328 improves AUC. Keeping the model.
Training on augumented user 131249 11/50 current_auc = 0.4992605452674897
User 131249 AUC after training: 0.4989068930041153
User 131249 does not improve AUC. Reverting changes.
Training on augumented user 21535 12/50 current_auc = 0.4992605452674897
User 21535 AUC after training: 0.4988425925925926
User 21535 does not improve AUC. Reverting changes.
Training on augumented user 100316 13/50 current_auc = 0.4992605452674897
User 100316 AUC after training: 0.49762088477366256
User 100316 does not improve AUC. Reverting changes.
Training on augumented user 48968 14/50 current_auc = 0.4992605452674897
User 48968 AUC after training: 0.4993569958847736
User 48968 improves AUC. Keeping the model.
Training on augumented user 72347 15/50 current_auc = 0.4993569958847736
User 72347 AUC after training: 0.4985210905349795
User 72347 does not improve AUC. Reverting changes.
Training on augumented user 27961 16/50 current_auc = 0.4993569958847736
User 27961 AUC after training: 0.4985210905349794
User 27961 does not improve AUC. Reverting changes.
Training on augumented user 116577 17/50 current_auc = 0.4993569958847736
User 116577 AUC after training: 0.49832818930041156
User 116577 does not improve AUC. Reverting changes.
Training on augumented user 117686 18/50 current_auc = 0.4993569958847736
User 117686 AUC after training: 0.49884259259259256
User 117686 does not improve AUC. Reverting changes.
Training on augumented user 9812 19/50 current_auc = 0.4993569958847736
User 9812 AUC after training: 0.4997427983539095
User 9812 improves AUC. Keeping the model.
Training on augumented user 59259 20/50 current_auc = 0.4997427983539095
User 59259 AUC after training: 0.4992283950617284
User 59259 does not improve AUC. Reverting changes.
Training on augumented user 115538 21/50 current_auc = 0.4997427983539095
User 115538 AUC after training: 0.5001286008230452
User 115538 improves AUC. Keeping the model.
Training on augumented user 109149 22/50 current_auc = 0.5001286008230452
User 109149 AUC after training: 0.500192901234568
User 109149 improves AUC. Keeping the model.
Training on augumented user 71980 23/50 current_auc = 0.500192901234568
User 71980 AUC after training: 0.4996141975308643
User 71980 does not improve AUC. Reverting changes.
Training on augumented user 108477 24/50 current_auc = 0.500192901234568
User 108477 AUC after training: 0.5022505144032923
User 108477 improves AUC. Keeping the model.
Training on augumented user 69031 25/50 current_auc = 0.5022505144032923
User 69031 AUC after training: 0.5020576131687243
User 69031 does not improve AUC. Reverting changes.
Training on augumented user 30541 26/50 current_auc = 0.5022505144032923
User 30541 AUC after training: 0.5034079218106996
User 30541 improves AUC. Keeping the model.
Training on augumented user 32396 27/50 current_auc = 0.5034079218106996
User 32396 AUC after training: 0.5030864197530864
User 32396 does not improve AUC. Reverting changes.
Training on augumented user 79283 28/50 current_auc = 0.5034079218106996
User 79283 AUC after training: 0.5019933127572016
User 79283 does not improve AUC. Reverting changes.
Training on augumented user 62951 29/50 current_auc = 0.5034079218106996
User 62951 AUC after training: 0.501929012345679
User 62951 does not improve AUC. Reverting changes.
Training on augumented user 133231 30/50 current_auc = 0.5034079218106996
User 133231 AUC after training: 0.5028935185185185
User 133231 does not improve AUC. Reverting changes.
Training on augumented user 119429 31/50 current_auc = 0.5034079218106996
User 119429 AUC after training: 0.5009002057613169
User 119429 does not improve AUC. Reverting changes.
Training on augumented user 81882 32/50 current_auc = 0.5034079218106996
User 81882 AUC after training: 0.5021862139917697
User 81882 does not improve AUC. Reverting changes.
Training on augumented user 103105 33/50 current_auc = 0.5034079218106996
User 103105 AUC after training: 0.5034722222222223
User 103105 improves AUC. Keeping the model.
Training on augumented user 82004 34/50 current_auc = 0.5034722222222223
User 82004 AUC after training: 0.503343621399177
User 82004 does not improve AUC. Reverting changes.
Training on augumented user 80118 35/50 current_auc = 0.5034722222222223
User 80118 AUC after training: 0.5029578189300412
User 80118 does not improve AUC. Reverting changes.
Training on augumented user 15852 36/50 current_auc = 0.5034722222222223
User 15852 AUC after training: 0.5034722222222222
User 15852 does not improve AUC. Reverting changes.
Training on augumented user 52184 37/50 current_auc = 0.5034722222222223
User 52184 AUC after training: 0.5023791152263375
User 52184 does not improve AUC. Reverting changes.
Training on augumented user 65544 38/50 current_auc = 0.5034722222222223
User 65544 AUC after training: 0.5005787037037037
User 65544 does not improve AUC. Reverting changes.
Training on augumented user 55954 39/50 current_auc = 0.5034722222222223
User 55954 AUC after training: 0.5032150205761317
User 55954 does not improve AUC. Reverting changes.
Training on augumented user 48003 40/50 current_auc = 0.5034722222222223
User 48003 AUC after training: 0.5030864197530864
User 48003 does not improve AUC. Reverting changes.
Training on augumented user 78466 41/50 current_auc = 0.5034722222222223
User 78466 AUC after training: 0.5028935185185185
User 78466 does not improve AUC. Reverting changes.
Training on augumented user 128699 42/50 current_auc = 0.5034722222222223
User 128699 AUC after training: 0.5036008230452675
User 128699 improves AUC. Keeping the model.
Training on augumented user 92921 43/50 current_auc = 0.5036008230452675
User 92921 AUC after training: 0.503858024691358
User 92921 improves AUC. Keeping the model.
Training on augumented user 59038 44/50 current_auc = 0.503858024691358
User 59038 AUC after training: 0.50366512345679
User 59038 does not improve AUC. Reverting changes.
Training on augumented user 100921 45/50 current_auc = 0.503858024691358
User 100921 AUC after training: 0.5028935185185186
User 100921 does not improve AUC. Reverting changes.
Training on augumented user 14457 46/50 current_auc = 0.503858024691358
User 14457 AUC after training: 0.5034079218106995
User 14457 does not improve AUC. Reverting changes.
Training on augumented user 8604 47/50 current_auc = 0.503858024691358
User 8604 AUC after training: 0.5034079218106996
User 8604 does not improve AUC. Reverting changes.
Training on augumented user 72729 48/50 current_auc = 0.503858024691358
User 72729 AUC after training: 0.5027006172839505
User 72729 does not improve AUC. Reverting changes.
Training on augumented user 95787 49/50 current_auc = 0.503858024691358
User 95787 AUC after training: 0.5039223251028807
User 95787 improves AUC. Keeping the model.
[2024-12-02 17:56:15.503396] start test user 56727 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:16.094409] start test user 56727 34/568 recall augumented users by random, augumented_users = [102640, 95180, 50743, 43980, 107322, 37001, 38084, 83760, 41030, 33934, 131831, 114003, 69487, 87723, 80236, 64778, 66333, 94756, 119526, 49945, 86484, 72025, 131456, 126818, 13735, 114785, 30392, 118902, 19457, 12045, 78855, 113550, 29500, 39232, 89364, 123824, 70440, 11304, 62466, 52583, 21533, 63706, 51068, 108697, 5996, 80335, 28280, 73459, 59542, 116977]
[2024-12-02 17:56:16.109234] user = 56727 Cloud 34/568
[2024-12-02 17:56:16.123343] user = 56727 Local 34/568
[2024-12-02 17:56:16.221852] user = 56727 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:19.725102] user = 56727 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 102640 0/50 current_auc = 0.6666666666666667
User 102640 AUC after training: 0.6666666666666667
User 102640 does not improve AUC. Reverting changes.
Training on augumented user 95180 1/50 current_auc = 0.6666666666666667
User 95180 AUC after training: 0.6666666666666667
User 95180 does not improve AUC. Reverting changes.
Training on augumented user 50743 2/50 current_auc = 0.6666666666666667
User 50743 AUC after training: 0.6666666666666667
User 50743 does not improve AUC. Reverting changes.
Training on augumented user 43980 3/50 current_auc = 0.6666666666666667
User 43980 AUC after training: 0.6666666666666667
User 43980 does not improve AUC. Reverting changes.
Training on augumented user 107322 4/50 current_auc = 0.6666666666666667
User 107322 AUC after training: 0.6666666666666667
User 107322 does not improve AUC. Reverting changes.
Training on augumented user 37001 5/50 current_auc = 0.6666666666666667
User 37001 AUC after training: 0.6666666666666667
User 37001 does not improve AUC. Reverting changes.
Training on augumented user 38084 6/50 current_auc = 0.6666666666666667
User 38084 AUC after training: 0.6666666666666667
User 38084 does not improve AUC. Reverting changes.
Training on augumented user 83760 7/50 current_auc = 0.6666666666666667
User 83760 AUC after training: 0.6666666666666667
User 83760 does not improve AUC. Reverting changes.
Training on augumented user 41030 8/50 current_auc = 0.6666666666666667
User 41030 AUC after training: 0.6666666666666667
User 41030 does not improve AUC. Reverting changes.
Training on augumented user 33934 9/50 current_auc = 0.6666666666666667
User 33934 AUC after training: 0.6666666666666667
User 33934 does not improve AUC. Reverting changes.
Training on augumented user 131831 10/50 current_auc = 0.6666666666666667
User 131831 AUC after training: 0.6666666666666667
User 131831 does not improve AUC. Reverting changes.
Training on augumented user 114003 11/50 current_auc = 0.6666666666666667
User 114003 AUC after training: 0.6666666666666667
User 114003 does not improve AUC. Reverting changes.
Training on augumented user 69487 12/50 current_auc = 0.6666666666666667
User 69487 AUC after training: 0.6666666666666667
User 69487 does not improve AUC. Reverting changes.
Training on augumented user 87723 13/50 current_auc = 0.6666666666666667
User 87723 AUC after training: 0.6666666666666667
User 87723 does not improve AUC. Reverting changes.
Training on augumented user 80236 14/50 current_auc = 0.6666666666666667
User 80236 AUC after training: 0.6666666666666667
User 80236 does not improve AUC. Reverting changes.
Training on augumented user 64778 15/50 current_auc = 0.6666666666666667
User 64778 AUC after training: 0.6428571428571428
User 64778 does not improve AUC. Reverting changes.
Training on augumented user 66333 16/50 current_auc = 0.6666666666666667
User 66333 AUC after training: 0.6666666666666667
User 66333 does not improve AUC. Reverting changes.
Training on augumented user 94756 17/50 current_auc = 0.6666666666666667
User 94756 AUC after training: 0.6666666666666667
User 94756 does not improve AUC. Reverting changes.
Training on augumented user 119526 18/50 current_auc = 0.6666666666666667
User 119526 AUC after training: 0.6666666666666667
User 119526 does not improve AUC. Reverting changes.
Training on augumented user 49945 19/50 current_auc = 0.6666666666666667
User 49945 AUC after training: 0.6666666666666667
User 49945 does not improve AUC. Reverting changes.
Training on augumented user 86484 20/50 current_auc = 0.6666666666666667
User 86484 AUC after training: 0.6666666666666667
User 86484 does not improve AUC. Reverting changes.
Training on augumented user 72025 21/50 current_auc = 0.6666666666666667
User 72025 AUC after training: 0.6428571428571428
User 72025 does not improve AUC. Reverting changes.
Training on augumented user 131456 22/50 current_auc = 0.6666666666666667
User 131456 AUC after training: 0.6666666666666667
User 131456 does not improve AUC. Reverting changes.
Training on augumented user 126818 23/50 current_auc = 0.6666666666666667
User 126818 AUC after training: 0.6666666666666667
User 126818 does not improve AUC. Reverting changes.
Training on augumented user 13735 24/50 current_auc = 0.6666666666666667
User 13735 AUC after training: 0.6666666666666667
User 13735 does not improve AUC. Reverting changes.
Training on augumented user 114785 25/50 current_auc = 0.6666666666666667
User 114785 AUC after training: 0.6428571428571428
User 114785 does not improve AUC. Reverting changes.
Training on augumented user 30392 26/50 current_auc = 0.6666666666666667
User 30392 AUC after training: 0.6666666666666667
User 30392 does not improve AUC. Reverting changes.
Training on augumented user 118902 27/50 current_auc = 0.6666666666666667
User 118902 AUC after training: 0.6666666666666667
User 118902 does not improve AUC. Reverting changes.
Training on augumented user 19457 28/50 current_auc = 0.6666666666666667
User 19457 AUC after training: 0.6666666666666667
User 19457 does not improve AUC. Reverting changes.
Training on augumented user 12045 29/50 current_auc = 0.6666666666666667
User 12045 AUC after training: 0.6666666666666667
User 12045 does not improve AUC. Reverting changes.
Training on augumented user 78855 30/50 current_auc = 0.6666666666666667
User 78855 AUC after training: 0.6666666666666667
User 78855 does not improve AUC. Reverting changes.
Training on augumented user 113550 31/50 current_auc = 0.6666666666666667
User 113550 AUC after training: 0.6666666666666667
User 113550 does not improve AUC. Reverting changes.
Training on augumented user 29500 32/50 current_auc = 0.6666666666666667
User 29500 AUC after training: 0.6666666666666667
User 29500 does not improve AUC. Reverting changes.
Training on augumented user 39232 33/50 current_auc = 0.6666666666666667
User 39232 AUC after training: 0.6666666666666667
User 39232 does not improve AUC. Reverting changes.
Training on augumented user 89364 34/50 current_auc = 0.6666666666666667
User 89364 AUC after training: 0.6666666666666667
User 89364 does not improve AUC. Reverting changes.
Training on augumented user 123824 35/50 current_auc = 0.6666666666666667
User 123824 AUC after training: 0.6666666666666667
User 123824 does not improve AUC. Reverting changes.
Training on augumented user 70440 36/50 current_auc = 0.6666666666666667
User 70440 AUC after training: 0.6666666666666667
User 70440 does not improve AUC. Reverting changes.
Training on augumented user 11304 37/50 current_auc = 0.6666666666666667
User 11304 AUC after training: 0.6666666666666667
User 11304 does not improve AUC. Reverting changes.
Training on augumented user 62466 38/50 current_auc = 0.6666666666666667
User 62466 AUC after training: 0.6666666666666667
User 62466 does not improve AUC. Reverting changes.
Training on augumented user 52583 39/50 current_auc = 0.6666666666666667
User 52583 AUC after training: 0.6666666666666667
User 52583 does not improve AUC. Reverting changes.
Training on augumented user 21533 40/50 current_auc = 0.6666666666666667
User 21533 AUC after training: 0.6666666666666667
User 21533 does not improve AUC. Reverting changes.
Training on augumented user 63706 41/50 current_auc = 0.6666666666666667
User 63706 AUC after training: 0.6666666666666667
User 63706 does not improve AUC. Reverting changes.
Training on augumented user 51068 42/50 current_auc = 0.6666666666666667
User 51068 AUC after training: 0.6666666666666667
User 51068 does not improve AUC. Reverting changes.
Training on augumented user 108697 43/50 current_auc = 0.6666666666666667
User 108697 AUC after training: 0.6666666666666667
User 108697 does not improve AUC. Reverting changes.
Training on augumented user 5996 44/50 current_auc = 0.6666666666666667
User 5996 AUC after training: 0.6666666666666667
User 5996 does not improve AUC. Reverting changes.
Training on augumented user 80335 45/50 current_auc = 0.6666666666666667
User 80335 AUC after training: 0.6666666666666667
User 80335 does not improve AUC. Reverting changes.
Training on augumented user 28280 46/50 current_auc = 0.6666666666666667
User 28280 AUC after training: 0.6666666666666667
User 28280 does not improve AUC. Reverting changes.
Training on augumented user 73459 47/50 current_auc = 0.6666666666666667
User 73459 AUC after training: 0.6666666666666667
User 73459 does not improve AUC. Reverting changes.
Training on augumented user 59542 48/50 current_auc = 0.6666666666666667
User 59542 AUC after training: 0.6666666666666667
User 59542 does not improve AUC. Reverting changes.
Training on augumented user 116977 49/50 current_auc = 0.6666666666666667
User 116977 AUC after training: 0.6666666666666667
User 116977 does not improve AUC. Reverting changes.
[2024-12-02 17:56:43.012790] start test user 56792 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:43.435415] start test user 56792 35/568 recall augumented users by random, augumented_users = [54685, 24951, 6383, 2840, 17334, 103270, 13261, 125920, 100147, 8146, 94796, 35505, 70326, 75749, 119890, 55717, 98687, 61906, 85329, 34065, 4814, 111002, 33214, 32284, 20366, 49095, 94011, 8871, 133642, 96230, 127700, 111385, 83271, 19496, 64146, 95245, 106252, 41814, 32712, 120727, 78770, 110890, 79517, 118273, 134955, 71525, 98452, 12242, 24612, 61708]
[2024-12-02 17:56:43.450119] user = 56792 Cloud 35/568
[2024-12-02 17:56:43.473583] user = 56792 Local 35/568
[2024-12-02 17:56:43.517330] user = 56792 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:46.225600] user = 56792 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7137042062415196
Training on augumented user 54685 0/50 current_auc = 0.7137042062415196
User 54685 AUC after training: 0.7133165342120567
User 54685 does not improve AUC. Reverting changes.
Training on augumented user 24951 1/50 current_auc = 0.7137042062415196
User 24951 AUC after training: 0.7137042062415196
User 24951 does not improve AUC. Reverting changes.
Training on augumented user 6383 2/50 current_auc = 0.7137042062415196
User 6383 AUC after training: 0.7137042062415196
User 6383 does not improve AUC. Reverting changes.
Training on augumented user 2840 3/50 current_auc = 0.7137042062415196
User 2840 AUC after training: 0.713607288234154
User 2840 does not improve AUC. Reverting changes.
Training on augumented user 17334 4/50 current_auc = 0.7137042062415196
User 17334 AUC after training: 0.7138011242488854
User 17334 improves AUC. Keeping the model.
Training on augumented user 103270 5/50 current_auc = 0.7138011242488854
User 103270 AUC after training: 0.7136072882341539
User 103270 does not improve AUC. Reverting changes.
Training on augumented user 13261 6/50 current_auc = 0.7138011242488854
User 13261 AUC after training: 0.7132196162046908
User 13261 does not improve AUC. Reverting changes.
Training on augumented user 125920 7/50 current_auc = 0.7138011242488854
User 125920 AUC after training: 0.7134134522194223
User 125920 does not improve AUC. Reverting changes.
Training on augumented user 100147 8/50 current_auc = 0.7138011242488854
User 100147 AUC after training: 0.713607288234154
User 100147 does not improve AUC. Reverting changes.
Training on augumented user 8146 9/50 current_auc = 0.7138011242488854
User 8146 AUC after training: 0.7135103702267881
User 8146 does not improve AUC. Reverting changes.
Training on augumented user 94796 10/50 current_auc = 0.7138011242488854
User 94796 AUC after training: 0.7137042062415196
User 94796 does not improve AUC. Reverting changes.
Training on augumented user 35505 11/50 current_auc = 0.7138011242488854
User 35505 AUC after training: 0.7135103702267881
User 35505 does not improve AUC. Reverting changes.
Training on augumented user 70326 12/50 current_auc = 0.7138011242488854
User 70326 AUC after training: 0.7137042062415196
User 70326 does not improve AUC. Reverting changes.
Training on augumented user 75749 13/50 current_auc = 0.7138011242488854
User 75749 AUC after training: 0.7134134522194224
User 75749 does not improve AUC. Reverting changes.
Training on augumented user 119890 14/50 current_auc = 0.7138011242488854
User 119890 AUC after training: 0.7131226981973251
User 119890 does not improve AUC. Reverting changes.
Training on augumented user 55717 15/50 current_auc = 0.7138011242488854
User 55717 AUC after training: 0.7135103702267881
User 55717 does not improve AUC. Reverting changes.
Training on augumented user 98687 16/50 current_auc = 0.7138011242488854
User 98687 AUC after training: 0.7130742391936422
User 98687 does not improve AUC. Reverting changes.
Training on augumented user 61906 17/50 current_auc = 0.7138011242488854
User 61906 AUC after training: 0.7131226981973251
User 61906 does not improve AUC. Reverting changes.
Training on augumented user 85329 18/50 current_auc = 0.7138011242488854
User 85329 AUC after training: 0.7130257801899593
User 85329 does not improve AUC. Reverting changes.
Training on augumented user 34065 19/50 current_auc = 0.7138011242488854
User 34065 AUC after training: 0.7135103702267881
User 34065 does not improve AUC. Reverting changes.
Training on augumented user 4814 20/50 current_auc = 0.7138011242488854
User 4814 AUC after training: 0.7133165342120565
User 4814 does not improve AUC. Reverting changes.
Training on augumented user 111002 21/50 current_auc = 0.7138011242488854
User 111002 AUC after training: 0.7135103702267881
User 111002 does not improve AUC. Reverting changes.
Training on augumented user 33214 22/50 current_auc = 0.7138011242488854
User 33214 AUC after training: 0.7137042062415196
User 33214 does not improve AUC. Reverting changes.
Training on augumented user 32284 23/50 current_auc = 0.7138011242488854
User 32284 AUC after training: 0.7135103702267881
User 32284 does not improve AUC. Reverting changes.
Training on augumented user 20366 24/50 current_auc = 0.7138011242488854
User 20366 AUC after training: 0.7135103702267882
User 20366 does not improve AUC. Reverting changes.
Training on augumented user 49095 25/50 current_auc = 0.7138011242488854
User 49095 AUC after training: 0.7133165342120567
User 49095 does not improve AUC. Reverting changes.
Training on augumented user 94011 26/50 current_auc = 0.7138011242488854
User 94011 AUC after training: 0.7134134522194223
User 94011 does not improve AUC. Reverting changes.
Training on augumented user 8871 27/50 current_auc = 0.7138011242488854
User 8871 AUC after training: 0.7134134522194223
User 8871 does not improve AUC. Reverting changes.
Training on augumented user 133642 28/50 current_auc = 0.7138011242488854
User 133642 AUC after training: 0.713607288234154
User 133642 does not improve AUC. Reverting changes.
Training on augumented user 96230 29/50 current_auc = 0.7138011242488854
User 96230 AUC after training: 0.713122698197325
User 96230 does not improve AUC. Reverting changes.
Training on augumented user 127700 30/50 current_auc = 0.7138011242488854
User 127700 AUC after training: 0.713122698197325
User 127700 does not improve AUC. Reverting changes.
Training on augumented user 111385 31/50 current_auc = 0.7138011242488854
User 111385 AUC after training: 0.7136072882341539
User 111385 does not improve AUC. Reverting changes.
Training on augumented user 83271 32/50 current_auc = 0.7138011242488854
User 83271 AUC after training: 0.7137042062415196
User 83271 does not improve AUC. Reverting changes.
Training on augumented user 19496 33/50 current_auc = 0.7138011242488854
User 19496 AUC after training: 0.7134134522194224
User 19496 does not improve AUC. Reverting changes.
Training on augumented user 64146 34/50 current_auc = 0.7138011242488854
User 64146 AUC after training: 0.7137042062415196
User 64146 does not improve AUC. Reverting changes.
Training on augumented user 95245 35/50 current_auc = 0.7138011242488854
User 95245 AUC after training: 0.7135103702267881
User 95245 does not improve AUC. Reverting changes.
Training on augumented user 106252 36/50 current_auc = 0.7138011242488854
User 106252 AUC after training: 0.7137042062415196
User 106252 does not improve AUC. Reverting changes.
Training on augumented user 41814 37/50 current_auc = 0.7138011242488854
User 41814 AUC after training: 0.7133165342120567
User 41814 does not improve AUC. Reverting changes.
Training on augumented user 32712 38/50 current_auc = 0.7138011242488854
User 32712 AUC after training: 0.7137042062415196
User 32712 does not improve AUC. Reverting changes.
Training on augumented user 120727 39/50 current_auc = 0.7138011242488854
User 120727 AUC after training: 0.7133165342120567
User 120727 does not improve AUC. Reverting changes.
Training on augumented user 78770 40/50 current_auc = 0.7138011242488854
User 78770 AUC after training: 0.7132680752083738
User 78770 does not improve AUC. Reverting changes.
Training on augumented user 110890 41/50 current_auc = 0.7138011242488854
User 110890 AUC after training: 0.7132196162046909
User 110890 does not improve AUC. Reverting changes.
Training on augumented user 79517 42/50 current_auc = 0.7138011242488854
User 79517 AUC after training: 0.7135103702267882
User 79517 does not improve AUC. Reverting changes.
Training on augumented user 118273 43/50 current_auc = 0.7138011242488854
User 118273 AUC after training: 0.7137042062415198
User 118273 does not improve AUC. Reverting changes.
Training on augumented user 134955 44/50 current_auc = 0.7138011242488854
User 134955 AUC after training: 0.7134134522194223
User 134955 does not improve AUC. Reverting changes.
Training on augumented user 71525 45/50 current_auc = 0.7138011242488854
User 71525 AUC after training: 0.7134134522194223
User 71525 does not improve AUC. Reverting changes.
Training on augumented user 98452 46/50 current_auc = 0.7138011242488854
User 98452 AUC after training: 0.7135103702267882
User 98452 does not improve AUC. Reverting changes.
Training on augumented user 12242 47/50 current_auc = 0.7138011242488854
User 12242 AUC after training: 0.7132196162046909
User 12242 does not improve AUC. Reverting changes.
Training on augumented user 24612 48/50 current_auc = 0.7138011242488854
User 24612 AUC after training: 0.7131226981973251
User 24612 does not improve AUC. Reverting changes.
Training on augumented user 61708 49/50 current_auc = 0.7138011242488854
User 61708 AUC after training: 0.7128319441752277
User 61708 does not improve AUC. Reverting changes.
[2024-12-02 17:57:17.016441] start test user 56817 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:17.686274] start test user 56817 36/568 recall augumented users by random, augumented_users = [57777, 42072, 60863, 112146, 94747, 126773, 32699, 118038, 89219, 4527, 108, 25363, 10928, 42497, 104421, 62319, 124776, 96319, 118290, 98351, 29036, 21382, 130129, 14229, 129241, 53484, 46321, 45892, 63260, 38285, 6661, 135554, 100895, 137114, 31050, 26540, 85330, 47062, 10147, 51321, 129228, 95397, 127127, 133561, 5320, 66423, 6925, 44743, 134344, 58845]
[2024-12-02 17:57:17.703189] user = 56817 Cloud 36/568
[2024-12-02 17:57:17.717214] user = 56817 Local 36/568
[2024-12-02 17:57:17.749080] user = 56817 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:20.424785] user = 56817 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4166666666666667
Training on augumented user 57777 0/50 current_auc = 0.4166666666666667
User 57777 AUC after training: 0.4166666666666667
User 57777 does not improve AUC. Reverting changes.
Training on augumented user 42072 1/50 current_auc = 0.4166666666666667
User 42072 AUC after training: 0.4166666666666667
User 42072 does not improve AUC. Reverting changes.
Training on augumented user 60863 2/50 current_auc = 0.4166666666666667
User 60863 AUC after training: 0.4166666666666667
User 60863 does not improve AUC. Reverting changes.
Training on augumented user 112146 3/50 current_auc = 0.4166666666666667
User 112146 AUC after training: 0.4166666666666667
User 112146 does not improve AUC. Reverting changes.
Training on augumented user 94747 4/50 current_auc = 0.4166666666666667
User 94747 AUC after training: 0.4166666666666667
User 94747 does not improve AUC. Reverting changes.
Training on augumented user 126773 5/50 current_auc = 0.4166666666666667
User 126773 AUC after training: 0.4166666666666667
User 126773 does not improve AUC. Reverting changes.
Training on augumented user 32699 6/50 current_auc = 0.4166666666666667
User 32699 AUC after training: 0.4166666666666667
User 32699 does not improve AUC. Reverting changes.
Training on augumented user 118038 7/50 current_auc = 0.4166666666666667
User 118038 AUC after training: 0.4166666666666667
User 118038 does not improve AUC. Reverting changes.
Training on augumented user 89219 8/50 current_auc = 0.4166666666666667
User 89219 AUC after training: 0.43333333333333335
User 89219 improves AUC. Keeping the model.
Training on augumented user 4527 9/50 current_auc = 0.43333333333333335
User 4527 AUC after training: 0.4166666666666667
User 4527 does not improve AUC. Reverting changes.
Training on augumented user 108 10/50 current_auc = 0.43333333333333335
User 108 AUC after training: 0.43333333333333335
User 108 does not improve AUC. Reverting changes.
Training on augumented user 25363 11/50 current_auc = 0.43333333333333335
User 25363 AUC after training: 0.4166666666666667
User 25363 does not improve AUC. Reverting changes.
Training on augumented user 10928 12/50 current_auc = 0.43333333333333335
User 10928 AUC after training: 0.43333333333333335
User 10928 does not improve AUC. Reverting changes.
Training on augumented user 42497 13/50 current_auc = 0.43333333333333335
User 42497 AUC after training: 0.4166666666666667
User 42497 does not improve AUC. Reverting changes.
Training on augumented user 104421 14/50 current_auc = 0.43333333333333335
User 104421 AUC after training: 0.4166666666666667
User 104421 does not improve AUC. Reverting changes.
Training on augumented user 62319 15/50 current_auc = 0.43333333333333335
User 62319 AUC after training: 0.4166666666666667
User 62319 does not improve AUC. Reverting changes.
Training on augumented user 124776 16/50 current_auc = 0.43333333333333335
User 124776 AUC after training: 0.4166666666666667
User 124776 does not improve AUC. Reverting changes.
Training on augumented user 96319 17/50 current_auc = 0.43333333333333335
User 96319 AUC after training: 0.44999999999999996
User 96319 improves AUC. Keeping the model.
Training on augumented user 118290 18/50 current_auc = 0.44999999999999996
User 118290 AUC after training: 0.43333333333333335
User 118290 does not improve AUC. Reverting changes.
Training on augumented user 98351 19/50 current_auc = 0.44999999999999996
User 98351 AUC after training: 0.43333333333333335
User 98351 does not improve AUC. Reverting changes.
Training on augumented user 29036 20/50 current_auc = 0.44999999999999996
User 29036 AUC after training: 0.43333333333333335
User 29036 does not improve AUC. Reverting changes.
Training on augumented user 21382 21/50 current_auc = 0.44999999999999996
User 21382 AUC after training: 0.43333333333333335
User 21382 does not improve AUC. Reverting changes.
Training on augumented user 130129 22/50 current_auc = 0.44999999999999996
User 130129 AUC after training: 0.43333333333333335
User 130129 does not improve AUC. Reverting changes.
Training on augumented user 14229 23/50 current_auc = 0.44999999999999996
User 14229 AUC after training: 0.4166666666666667
User 14229 does not improve AUC. Reverting changes.
Training on augumented user 129241 24/50 current_auc = 0.44999999999999996
User 129241 AUC after training: 0.43333333333333335
User 129241 does not improve AUC. Reverting changes.
Training on augumented user 53484 25/50 current_auc = 0.44999999999999996
User 53484 AUC after training: 0.43333333333333335
User 53484 does not improve AUC. Reverting changes.
Training on augumented user 46321 26/50 current_auc = 0.44999999999999996
User 46321 AUC after training: 0.43333333333333335
User 46321 does not improve AUC. Reverting changes.
Training on augumented user 45892 27/50 current_auc = 0.44999999999999996
User 45892 AUC after training: 0.4166666666666667
User 45892 does not improve AUC. Reverting changes.
Training on augumented user 63260 28/50 current_auc = 0.44999999999999996
User 63260 AUC after training: 0.4166666666666667
User 63260 does not improve AUC. Reverting changes.
Training on augumented user 38285 29/50 current_auc = 0.44999999999999996
User 38285 AUC after training: 0.43333333333333335
User 38285 does not improve AUC. Reverting changes.
Training on augumented user 6661 30/50 current_auc = 0.44999999999999996
User 6661 AUC after training: 0.4166666666666667
User 6661 does not improve AUC. Reverting changes.
Training on augumented user 135554 31/50 current_auc = 0.44999999999999996
User 135554 AUC after training: 0.4166666666666667
User 135554 does not improve AUC. Reverting changes.
Training on augumented user 100895 32/50 current_auc = 0.44999999999999996
User 100895 AUC after training: 0.44999999999999996
User 100895 does not improve AUC. Reverting changes.
Training on augumented user 137114 33/50 current_auc = 0.44999999999999996
User 137114 AUC after training: 0.43333333333333335
User 137114 does not improve AUC. Reverting changes.
Training on augumented user 31050 34/50 current_auc = 0.44999999999999996
User 31050 AUC after training: 0.43333333333333335
User 31050 does not improve AUC. Reverting changes.
Training on augumented user 26540 35/50 current_auc = 0.44999999999999996
User 26540 AUC after training: 0.43333333333333335
User 26540 does not improve AUC. Reverting changes.
Training on augumented user 85330 36/50 current_auc = 0.44999999999999996
User 85330 AUC after training: 0.4166666666666667
User 85330 does not improve AUC. Reverting changes.
Training on augumented user 47062 37/50 current_auc = 0.44999999999999996
User 47062 AUC after training: 0.43333333333333335
User 47062 does not improve AUC. Reverting changes.
Training on augumented user 10147 38/50 current_auc = 0.44999999999999996
User 10147 AUC after training: 0.43333333333333335
User 10147 does not improve AUC. Reverting changes.
Training on augumented user 51321 39/50 current_auc = 0.44999999999999996
User 51321 AUC after training: 0.43333333333333335
User 51321 does not improve AUC. Reverting changes.
Training on augumented user 129228 40/50 current_auc = 0.44999999999999996
User 129228 AUC after training: 0.43333333333333335
User 129228 does not improve AUC. Reverting changes.
Training on augumented user 95397 41/50 current_auc = 0.44999999999999996
User 95397 AUC after training: 0.43333333333333335
User 95397 does not improve AUC. Reverting changes.
Training on augumented user 127127 42/50 current_auc = 0.44999999999999996
User 127127 AUC after training: 0.43333333333333335
User 127127 does not improve AUC. Reverting changes.
Training on augumented user 133561 43/50 current_auc = 0.44999999999999996
User 133561 AUC after training: 0.43333333333333335
User 133561 does not improve AUC. Reverting changes.
Training on augumented user 5320 44/50 current_auc = 0.44999999999999996
User 5320 AUC after training: 0.43333333333333335
User 5320 does not improve AUC. Reverting changes.
Training on augumented user 66423 45/50 current_auc = 0.44999999999999996
User 66423 AUC after training: 0.4166666666666667
User 66423 does not improve AUC. Reverting changes.
Training on augumented user 6925 46/50 current_auc = 0.44999999999999996
User 6925 AUC after training: 0.43333333333333335
User 6925 does not improve AUC. Reverting changes.
Training on augumented user 44743 47/50 current_auc = 0.44999999999999996
User 44743 AUC after training: 0.43333333333333335
User 44743 does not improve AUC. Reverting changes.
Training on augumented user 134344 48/50 current_auc = 0.44999999999999996
User 134344 AUC after training: 0.4166666666666667
User 134344 does not improve AUC. Reverting changes.
Training on augumented user 58845 49/50 current_auc = 0.44999999999999996
User 58845 AUC after training: 0.43333333333333335
User 58845 does not improve AUC. Reverting changes.
[2024-12-02 17:57:53.507807] start test user 56822 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:54.050986] start test user 56822 37/568 recall augumented users by random, augumented_users = [2641, 38819, 50696, 15747, 28194, 41840, 123945, 33732, 21453, 137298, 40413, 77709, 1166, 119297, 86115, 6923, 95484, 45456, 14544, 93340, 112948, 92255, 112992, 41107, 48594, 118450, 135112, 37369, 51118, 78576, 96407, 66856, 53695, 8965, 99661, 136085, 67792, 30223, 64566, 55487, 20314, 70181, 48166, 107825, 925, 36830, 82578, 61371, 137671, 72602]
[2024-12-02 17:57:54.066050] user = 56822 Cloud 37/568
[2024-12-02 17:57:54.079332] user = 56822 Local 37/568
[2024-12-02 17:57:54.116774] user = 56822 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:56.726733] user = 56822 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 2641 0/50 current_auc = 0.5
User 2641 AUC after training: 0.5
User 2641 does not improve AUC. Reverting changes.
Training on augumented user 38819 1/50 current_auc = 0.5
User 38819 AUC after training: 0.5
User 38819 does not improve AUC. Reverting changes.
Training on augumented user 50696 2/50 current_auc = 0.5
User 50696 AUC after training: 0.5
User 50696 does not improve AUC. Reverting changes.
Training on augumented user 15747 3/50 current_auc = 0.5
User 15747 AUC after training: 0.5
User 15747 does not improve AUC. Reverting changes.
Training on augumented user 28194 4/50 current_auc = 0.5
User 28194 AUC after training: 0.5
User 28194 does not improve AUC. Reverting changes.
Training on augumented user 41840 5/50 current_auc = 0.5
User 41840 AUC after training: 0.5
User 41840 does not improve AUC. Reverting changes.
Training on augumented user 123945 6/50 current_auc = 0.5
User 123945 AUC after training: 0.5
User 123945 does not improve AUC. Reverting changes.
Training on augumented user 33732 7/50 current_auc = 0.5
User 33732 AUC after training: 0.5
User 33732 does not improve AUC. Reverting changes.
Training on augumented user 21453 8/50 current_auc = 0.5
User 21453 AUC after training: 0.5
User 21453 does not improve AUC. Reverting changes.
Training on augumented user 137298 9/50 current_auc = 0.5
User 137298 AUC after training: 0.5
User 137298 does not improve AUC. Reverting changes.
Training on augumented user 40413 10/50 current_auc = 0.5
User 40413 AUC after training: 0.5
User 40413 does not improve AUC. Reverting changes.
Training on augumented user 77709 11/50 current_auc = 0.5
User 77709 AUC after training: 0.5
User 77709 does not improve AUC. Reverting changes.
Training on augumented user 1166 12/50 current_auc = 0.5
User 1166 AUC after training: 0.5
User 1166 does not improve AUC. Reverting changes.
Training on augumented user 119297 13/50 current_auc = 0.5
User 119297 AUC after training: 0.5
User 119297 does not improve AUC. Reverting changes.
Training on augumented user 86115 14/50 current_auc = 0.5
User 86115 AUC after training: 0.5
User 86115 does not improve AUC. Reverting changes.
Training on augumented user 6923 15/50 current_auc = 0.5
User 6923 AUC after training: 0.5
User 6923 does not improve AUC. Reverting changes.
Training on augumented user 95484 16/50 current_auc = 0.5
User 95484 AUC after training: 0.5
User 95484 does not improve AUC. Reverting changes.
Training on augumented user 45456 17/50 current_auc = 0.5
User 45456 AUC after training: 0.5
User 45456 does not improve AUC. Reverting changes.
Training on augumented user 14544 18/50 current_auc = 0.5
User 14544 AUC after training: 0.5
User 14544 does not improve AUC. Reverting changes.
Training on augumented user 93340 19/50 current_auc = 0.5
User 93340 AUC after training: 0.5
User 93340 does not improve AUC. Reverting changes.
Training on augumented user 112948 20/50 current_auc = 0.5
User 112948 AUC after training: 0.5
User 112948 does not improve AUC. Reverting changes.
Training on augumented user 92255 21/50 current_auc = 0.5
User 92255 AUC after training: 0.5
User 92255 does not improve AUC. Reverting changes.
Training on augumented user 112992 22/50 current_auc = 0.5
User 112992 AUC after training: 0.5
User 112992 does not improve AUC. Reverting changes.
Training on augumented user 41107 23/50 current_auc = 0.5
User 41107 AUC after training: 0.5
User 41107 does not improve AUC. Reverting changes.
Training on augumented user 48594 24/50 current_auc = 0.5
User 48594 AUC after training: 0.5
User 48594 does not improve AUC. Reverting changes.
Training on augumented user 118450 25/50 current_auc = 0.5
User 118450 AUC after training: 0.5
User 118450 does not improve AUC. Reverting changes.
Training on augumented user 135112 26/50 current_auc = 0.5
User 135112 AUC after training: 0.5
User 135112 does not improve AUC. Reverting changes.
Training on augumented user 37369 27/50 current_auc = 0.5
User 37369 AUC after training: 0.5
User 37369 does not improve AUC. Reverting changes.
Training on augumented user 51118 28/50 current_auc = 0.5
User 51118 AUC after training: 0.5
User 51118 does not improve AUC. Reverting changes.
Training on augumented user 78576 29/50 current_auc = 0.5
User 78576 AUC after training: 0.5
User 78576 does not improve AUC. Reverting changes.
Training on augumented user 96407 30/50 current_auc = 0.5
User 96407 AUC after training: 0.5
User 96407 does not improve AUC. Reverting changes.
Training on augumented user 66856 31/50 current_auc = 0.5
User 66856 AUC after training: 0.5
User 66856 does not improve AUC. Reverting changes.
Training on augumented user 53695 32/50 current_auc = 0.5
User 53695 AUC after training: 0.5
User 53695 does not improve AUC. Reverting changes.
Training on augumented user 8965 33/50 current_auc = 0.5
User 8965 AUC after training: 0.5
User 8965 does not improve AUC. Reverting changes.
Training on augumented user 99661 34/50 current_auc = 0.5
User 99661 AUC after training: 0.5
User 99661 does not improve AUC. Reverting changes.
Training on augumented user 136085 35/50 current_auc = 0.5
User 136085 AUC after training: 0.5
User 136085 does not improve AUC. Reverting changes.
Training on augumented user 67792 36/50 current_auc = 0.5
User 67792 AUC after training: 0.5
User 67792 does not improve AUC. Reverting changes.
Training on augumented user 30223 37/50 current_auc = 0.5
User 30223 AUC after training: 0.5
User 30223 does not improve AUC. Reverting changes.
Training on augumented user 64566 38/50 current_auc = 0.5
User 64566 AUC after training: 0.5
User 64566 does not improve AUC. Reverting changes.
Training on augumented user 55487 39/50 current_auc = 0.5
User 55487 AUC after training: 0.5
User 55487 does not improve AUC. Reverting changes.
Training on augumented user 20314 40/50 current_auc = 0.5
User 20314 AUC after training: 0.5
User 20314 does not improve AUC. Reverting changes.
Training on augumented user 70181 41/50 current_auc = 0.5
User 70181 AUC after training: 0.5
User 70181 does not improve AUC. Reverting changes.
Training on augumented user 48166 42/50 current_auc = 0.5
User 48166 AUC after training: 0.5
User 48166 does not improve AUC. Reverting changes.
Training on augumented user 107825 43/50 current_auc = 0.5
User 107825 AUC after training: 0.5
User 107825 does not improve AUC. Reverting changes.
Training on augumented user 925 44/50 current_auc = 0.5
User 925 AUC after training: 0.5
User 925 does not improve AUC. Reverting changes.
Training on augumented user 36830 45/50 current_auc = 0.5
User 36830 AUC after training: 0.5
User 36830 does not improve AUC. Reverting changes.
Training on augumented user 82578 46/50 current_auc = 0.5
User 82578 AUC after training: 0.5
User 82578 does not improve AUC. Reverting changes.
Training on augumented user 61371 47/50 current_auc = 0.5
User 61371 AUC after training: 0.5
User 61371 does not improve AUC. Reverting changes.
Training on augumented user 137671 48/50 current_auc = 0.5
User 137671 AUC after training: 0.5
User 137671 does not improve AUC. Reverting changes.
Training on augumented user 72602 49/50 current_auc = 0.5
User 72602 AUC after training: 0.5
User 72602 does not improve AUC. Reverting changes.
[2024-12-02 17:58:22.311893] start test user 56829 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:22.736323] start test user 56829 38/568 recall augumented users by random, augumented_users = [11352, 134492, 131047, 30554, 124918, 39196, 27587, 63453, 45373, 54581, 56632, 5508, 16431, 46018, 125003, 7674, 102771, 89991, 95711, 8398, 136446, 48305, 18069, 67318, 7253, 111055, 38318, 50104, 33230, 40087, 33584, 21725, 49278, 116813, 26560, 66615, 29319, 133265, 106492, 42276, 60219, 59302, 14877, 10597, 79879, 86384, 55065, 461, 57919, 50175]
[2024-12-02 17:58:22.751454] user = 56829 Cloud 38/568
[2024-12-02 17:58:22.761321] user = 56829 Local 38/568
[2024-12-02 17:58:22.791777] user = 56829 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:25.068542] user = 56829 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3333333333333333
Training on augumented user 11352 0/50 current_auc = 0.3333333333333333
User 11352 AUC after training: 0.3333333333333333
User 11352 does not improve AUC. Reverting changes.
Training on augumented user 134492 1/50 current_auc = 0.3333333333333333
User 134492 AUC after training: 0.3333333333333333
User 134492 does not improve AUC. Reverting changes.
Training on augumented user 131047 2/50 current_auc = 0.3333333333333333
User 131047 AUC after training: 0.3333333333333333
User 131047 does not improve AUC. Reverting changes.
Training on augumented user 30554 3/50 current_auc = 0.3333333333333333
User 30554 AUC after training: 0.3333333333333333
User 30554 does not improve AUC. Reverting changes.
Training on augumented user 124918 4/50 current_auc = 0.3333333333333333
User 124918 AUC after training: 0.3333333333333333
User 124918 does not improve AUC. Reverting changes.
Training on augumented user 39196 5/50 current_auc = 0.3333333333333333
User 39196 AUC after training: 0.3333333333333333
User 39196 does not improve AUC. Reverting changes.
Training on augumented user 27587 6/50 current_auc = 0.3333333333333333
User 27587 AUC after training: 0.3333333333333333
User 27587 does not improve AUC. Reverting changes.
Training on augumented user 63453 7/50 current_auc = 0.3333333333333333
User 63453 AUC after training: 0.3333333333333333
User 63453 does not improve AUC. Reverting changes.
Training on augumented user 45373 8/50 current_auc = 0.3333333333333333
User 45373 AUC after training: 0.3333333333333333
User 45373 does not improve AUC. Reverting changes.
Training on augumented user 54581 9/50 current_auc = 0.3333333333333333
User 54581 AUC after training: 0.3333333333333333
User 54581 does not improve AUC. Reverting changes.
Training on augumented user 56632 10/50 current_auc = 0.3333333333333333
User 56632 AUC after training: 0.3333333333333333
User 56632 does not improve AUC. Reverting changes.
Training on augumented user 5508 11/50 current_auc = 0.3333333333333333
User 5508 AUC after training: 0.3333333333333333
User 5508 does not improve AUC. Reverting changes.
Training on augumented user 16431 12/50 current_auc = 0.3333333333333333
User 16431 AUC after training: 0.3333333333333333
User 16431 does not improve AUC. Reverting changes.
Training on augumented user 46018 13/50 current_auc = 0.3333333333333333
User 46018 AUC after training: 0.3333333333333333
User 46018 does not improve AUC. Reverting changes.
Training on augumented user 125003 14/50 current_auc = 0.3333333333333333
User 125003 AUC after training: 0.3333333333333333
User 125003 does not improve AUC. Reverting changes.
Training on augumented user 7674 15/50 current_auc = 0.3333333333333333
User 7674 AUC after training: 0.3333333333333333
User 7674 does not improve AUC. Reverting changes.
Training on augumented user 102771 16/50 current_auc = 0.3333333333333333
User 102771 AUC after training: 0.3333333333333333
User 102771 does not improve AUC. Reverting changes.
Training on augumented user 89991 17/50 current_auc = 0.3333333333333333
User 89991 AUC after training: 0.3333333333333333
User 89991 does not improve AUC. Reverting changes.
Training on augumented user 95711 18/50 current_auc = 0.3333333333333333
User 95711 AUC after training: 0.3333333333333333
User 95711 does not improve AUC. Reverting changes.
Training on augumented user 8398 19/50 current_auc = 0.3333333333333333
User 8398 AUC after training: 0.3333333333333333
User 8398 does not improve AUC. Reverting changes.
Training on augumented user 136446 20/50 current_auc = 0.3333333333333333
User 136446 AUC after training: 0.3333333333333333
User 136446 does not improve AUC. Reverting changes.
Training on augumented user 48305 21/50 current_auc = 0.3333333333333333
User 48305 AUC after training: 0.3333333333333333
User 48305 does not improve AUC. Reverting changes.
Training on augumented user 18069 22/50 current_auc = 0.3333333333333333
User 18069 AUC after training: 0.3333333333333333
User 18069 does not improve AUC. Reverting changes.
Training on augumented user 67318 23/50 current_auc = 0.3333333333333333
User 67318 AUC after training: 0.3125
User 67318 does not improve AUC. Reverting changes.
Training on augumented user 7253 24/50 current_auc = 0.3333333333333333
User 7253 AUC after training: 0.3333333333333333
User 7253 does not improve AUC. Reverting changes.
Training on augumented user 111055 25/50 current_auc = 0.3333333333333333
User 111055 AUC after training: 0.3333333333333333
User 111055 does not improve AUC. Reverting changes.
Training on augumented user 38318 26/50 current_auc = 0.3333333333333333
User 38318 AUC after training: 0.3333333333333333
User 38318 does not improve AUC. Reverting changes.
Training on augumented user 50104 27/50 current_auc = 0.3333333333333333
User 50104 AUC after training: 0.3125
User 50104 does not improve AUC. Reverting changes.
Training on augumented user 33230 28/50 current_auc = 0.3333333333333333
User 33230 AUC after training: 0.3333333333333333
User 33230 does not improve AUC. Reverting changes.
Training on augumented user 40087 29/50 current_auc = 0.3333333333333333
User 40087 AUC after training: 0.3125
User 40087 does not improve AUC. Reverting changes.
Training on augumented user 33584 30/50 current_auc = 0.3333333333333333
User 33584 AUC after training: 0.3333333333333333
User 33584 does not improve AUC. Reverting changes.
Training on augumented user 21725 31/50 current_auc = 0.3333333333333333
User 21725 AUC after training: 0.3333333333333333
User 21725 does not improve AUC. Reverting changes.
Training on augumented user 49278 32/50 current_auc = 0.3333333333333333
User 49278 AUC after training: 0.3333333333333333
User 49278 does not improve AUC. Reverting changes.
Training on augumented user 116813 33/50 current_auc = 0.3333333333333333
User 116813 AUC after training: 0.3333333333333333
User 116813 does not improve AUC. Reverting changes.
Training on augumented user 26560 34/50 current_auc = 0.3333333333333333
User 26560 AUC after training: 0.3333333333333333
User 26560 does not improve AUC. Reverting changes.
Training on augumented user 66615 35/50 current_auc = 0.3333333333333333
User 66615 AUC after training: 0.3333333333333333
User 66615 does not improve AUC. Reverting changes.
Training on augumented user 29319 36/50 current_auc = 0.3333333333333333
User 29319 AUC after training: 0.3333333333333333
User 29319 does not improve AUC. Reverting changes.
Training on augumented user 133265 37/50 current_auc = 0.3333333333333333
User 133265 AUC after training: 0.3333333333333333
User 133265 does not improve AUC. Reverting changes.
Training on augumented user 106492 38/50 current_auc = 0.3333333333333333
User 106492 AUC after training: 0.3125
User 106492 does not improve AUC. Reverting changes.
Training on augumented user 42276 39/50 current_auc = 0.3333333333333333
User 42276 AUC after training: 0.3333333333333333
User 42276 does not improve AUC. Reverting changes.
Training on augumented user 60219 40/50 current_auc = 0.3333333333333333
User 60219 AUC after training: 0.3333333333333333
User 60219 does not improve AUC. Reverting changes.
Training on augumented user 59302 41/50 current_auc = 0.3333333333333333
User 59302 AUC after training: 0.3333333333333333
User 59302 does not improve AUC. Reverting changes.
Training on augumented user 14877 42/50 current_auc = 0.3333333333333333
User 14877 AUC after training: 0.3333333333333333
User 14877 does not improve AUC. Reverting changes.
Training on augumented user 10597 43/50 current_auc = 0.3333333333333333
User 10597 AUC after training: 0.3333333333333333
User 10597 does not improve AUC. Reverting changes.
Training on augumented user 79879 44/50 current_auc = 0.3333333333333333
User 79879 AUC after training: 0.3333333333333333
User 79879 does not improve AUC. Reverting changes.
Training on augumented user 86384 45/50 current_auc = 0.3333333333333333
User 86384 AUC after training: 0.3333333333333333
User 86384 does not improve AUC. Reverting changes.
Training on augumented user 55065 46/50 current_auc = 0.3333333333333333
User 55065 AUC after training: 0.3333333333333333
User 55065 does not improve AUC. Reverting changes.
Training on augumented user 461 47/50 current_auc = 0.3333333333333333
User 461 AUC after training: 0.3125
User 461 does not improve AUC. Reverting changes.
Training on augumented user 57919 48/50 current_auc = 0.3333333333333333
User 57919 AUC after training: 0.3333333333333333
User 57919 does not improve AUC. Reverting changes.
Training on augumented user 50175 49/50 current_auc = 0.3333333333333333
User 50175 AUC after training: 0.3333333333333333
User 50175 does not improve AUC. Reverting changes.
[2024-12-02 17:58:53.838197] start test user 56847 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:54.256709] start test user 56847 39/568 recall augumented users by random, augumented_users = [24945, 31462, 55488, 25078, 75419, 107193, 23216, 134410, 109379, 22423, 10871, 73641, 112239, 27541, 123313, 19545, 33974, 126781, 25946, 62625, 5332, 20241, 27160, 25054, 7260, 80771, 41187, 24726, 90752, 19843, 194, 26495, 32615, 62583, 126901, 15096, 138144, 91855, 110983, 83533, 127341, 83969, 93265, 134284, 119646, 116792, 111467, 9782, 37301, 82369]
[2024-12-02 17:58:54.272852] user = 56847 Cloud 39/568
[2024-12-02 17:58:54.309202] user = 56847 Local 39/568
[2024-12-02 17:58:54.475196] user = 56847 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:57.255700] user = 56847 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.553848075962019
Training on augumented user 24945 0/50 current_auc = 0.553848075962019
User 24945 AUC after training: 0.5540444063682445
User 24945 improves AUC. Keeping the model.
Training on augumented user 31462 1/50 current_auc = 0.5540444063682445
User 31462 AUC after training: 0.553616049118298
User 31462 does not improve AUC. Reverting changes.
Training on augumented user 55488 2/50 current_auc = 0.5540444063682445
User 55488 AUC after training: 0.5542585849932177
User 55488 improves AUC. Keeping the model.
Training on augumented user 25078 3/50 current_auc = 0.5542585849932177
User 25078 AUC after training: 0.5546512458056686
User 25078 improves AUC. Keeping the model.
Training on augumented user 75419 4/50 current_auc = 0.5546512458056686
User 75419 AUC after training: 0.5542407367744699
User 75419 does not improve AUC. Reverting changes.
Training on augumented user 107193 5/50 current_auc = 0.5546512458056686
User 107193 AUC after training: 0.5547404868994075
User 107193 improves AUC. Keeping the model.
Training on augumented user 23216 6/50 current_auc = 0.5547404868994075
User 23216 AUC after training: 0.5542228885557221
User 23216 does not improve AUC. Reverting changes.
Training on augumented user 134410 7/50 current_auc = 0.5547404868994075
User 134410 AUC after training: 0.5551688441493539
User 134410 improves AUC. Keeping the model.
Training on augumented user 109379 8/50 current_auc = 0.5551688441493539
User 109379 AUC after training: 0.5535982008995501
User 109379 does not improve AUC. Reverting changes.
Training on augumented user 22423 9/50 current_auc = 0.5551688441493539
User 22423 AUC after training: 0.5550439066181195
User 22423 does not improve AUC. Reverting changes.
Training on augumented user 10871 10/50 current_auc = 0.5551688441493539
User 10871 AUC after training: 0.5552045405868495
User 10871 improves AUC. Keeping the model.
Training on augumented user 73641 11/50 current_auc = 0.5552045405868495
User 73641 AUC after training: 0.5555972013993005
User 73641 improves AUC. Keeping the model.
Training on augumented user 112239 12/50 current_auc = 0.5555972013993005
User 112239 AUC after training: 0.5555615049618049
User 112239 does not improve AUC. Reverting changes.
Training on augumented user 27541 13/50 current_auc = 0.5555972013993005
User 27541 AUC after training: 0.5555615049618048
User 27541 does not improve AUC. Reverting changes.
Training on augumented user 123313 14/50 current_auc = 0.5555972013993005
User 123313 AUC after training: 0.5554187192118226
User 123313 does not improve AUC. Reverting changes.
Training on augumented user 19545 15/50 current_auc = 0.5555972013993005
User 19545 AUC after training: 0.5551866923681017
User 19545 does not improve AUC. Reverting changes.
Training on augumented user 33974 16/50 current_auc = 0.5555972013993005
User 33974 AUC after training: 0.5552580852430928
User 33974 does not improve AUC. Reverting changes.
Training on augumented user 126781 17/50 current_auc = 0.5555972013993005
User 126781 AUC after training: 0.5545620047119297
User 126781 does not improve AUC. Reverting changes.
Training on augumented user 25946 18/50 current_auc = 0.5555972013993005
User 25946 AUC after training: 0.5543478260869565
User 25946 does not improve AUC. Reverting changes.
Training on augumented user 62625 19/50 current_auc = 0.5555972013993005
User 62625 AUC after training: 0.5559720139930036
User 62625 improves AUC. Keeping the model.
Training on augumented user 5332 20/50 current_auc = 0.5559720139930036
User 5332 AUC after training: 0.5548921967587634
User 5332 does not improve AUC. Reverting changes.
Training on augumented user 20241 21/50 current_auc = 0.5559720139930036
User 20241 AUC after training: 0.5558292282430214
User 20241 does not improve AUC. Reverting changes.
Training on augumented user 27160 22/50 current_auc = 0.5559720139930036
User 27160 AUC after training: 0.5554722638680659
User 27160 does not improve AUC. Reverting changes.
Training on augumented user 25054 23/50 current_auc = 0.5559720139930036
User 25054 AUC after training: 0.5558470764617691
User 25054 does not improve AUC. Reverting changes.
Training on augumented user 7260 24/50 current_auc = 0.5559720139930036
User 7260 AUC after training: 0.5567484115085315
User 7260 improves AUC. Keeping the model.
Training on augumented user 80771 25/50 current_auc = 0.5567484115085315
User 80771 AUC after training: 0.5585332333833084
User 80771 improves AUC. Keeping the model.
Training on augumented user 41187 26/50 current_auc = 0.5585332333833084
User 41187 AUC after training: 0.5586224744770472
User 41187 improves AUC. Keeping the model.
Training on augumented user 24726 27/50 current_auc = 0.5586224744770472
User 24726 AUC after training: 0.5590686799457414
User 24726 improves AUC. Keeping the model.
Training on augumented user 90752 28/50 current_auc = 0.5590686799457414
User 90752 AUC after training: 0.5589794388520025
User 90752 does not improve AUC. Reverting changes.
Training on augumented user 19843 29/50 current_auc = 0.5590686799457414
User 19843 AUC after training: 0.5585510816020561
User 19843 does not improve AUC. Reverting changes.
Training on augumented user 194 30/50 current_auc = 0.5590686799457414
User 194 AUC after training: 0.5587831084457772
User 194 does not improve AUC. Reverting changes.
Training on augumented user 26495 31/50 current_auc = 0.5590686799457414
User 26495 AUC after training: 0.558872349539516
User 26495 does not improve AUC. Reverting changes.
Training on augumented user 32615 32/50 current_auc = 0.5590686799457414
User 32615 AUC after training: 0.558863425430142
User 32615 does not improve AUC. Reverting changes.
Training on augumented user 62583 33/50 current_auc = 0.5590686799457414
User 62583 AUC after training: 0.5586938673520383
User 62583 does not improve AUC. Reverting changes.
Training on augumented user 126901 34/50 current_auc = 0.5590686799457414
User 126901 AUC after training: 0.5586938673520383
User 126901 does not improve AUC. Reverting changes.
Training on augumented user 15096 35/50 current_auc = 0.5590686799457414
User 15096 AUC after training: 0.5588545013207681
User 15096 does not improve AUC. Reverting changes.
Training on augumented user 138144 36/50 current_auc = 0.5590686799457414
User 138144 AUC after training: 0.5569358178053829
User 138144 does not improve AUC. Reverting changes.
Training on augumented user 91855 37/50 current_auc = 0.5590686799457414
User 91855 AUC after training: 0.5588009566645248
User 91855 does not improve AUC. Reverting changes.
Training on augumented user 110983 38/50 current_auc = 0.5590686799457414
User 110983 AUC after training: 0.5578371528521453
User 110983 does not improve AUC. Reverting changes.
Training on augumented user 83533 39/50 current_auc = 0.5590686799457414
User 83533 AUC after training: 0.5587295637895338
User 83533 does not improve AUC. Reverting changes.
Training on augumented user 127341 40/50 current_auc = 0.5590686799457414
User 127341 AUC after training: 0.5593899478832012
User 127341 improves AUC. Keeping the model.
Training on augumented user 83969 41/50 current_auc = 0.5593899478832012
User 83969 AUC after training: 0.5596576711644178
User 83969 improves AUC. Keeping the model.
Training on augumented user 93265 42/50 current_auc = 0.5596576711644178
User 93265 AUC after training: 0.5599253944456344
User 93265 improves AUC. Keeping the model.
Training on augumented user 134284 43/50 current_auc = 0.5599253944456344
User 134284 AUC after training: 0.5584975369458127
User 134284 does not improve AUC. Reverting changes.
Training on augumented user 119646 44/50 current_auc = 0.5599253944456344
User 119646 AUC after training: 0.5588723495395159
User 119646 does not improve AUC. Reverting changes.
Training on augumented user 116792 45/50 current_auc = 0.5599253944456344
User 116792 AUC after training: 0.5600146355393731
User 116792 improves AUC. Keeping the model.
Training on augumented user 111467 46/50 current_auc = 0.5600146355393731
User 111467 AUC after training: 0.5594256443206969
User 111467 does not improve AUC. Reverting changes.
Training on augumented user 9782 47/50 current_auc = 0.5600146355393731
User 9782 AUC after training: 0.559791532805026
User 9782 does not improve AUC. Reverting changes.
Training on augumented user 37301 48/50 current_auc = 0.5600146355393731
User 37301 AUC after training: 0.5592203898050975
User 37301 does not improve AUC. Reverting changes.
Training on augumented user 82369 49/50 current_auc = 0.5600146355393731
User 82369 AUC after training: 0.5598986221175126
User 82369 does not improve AUC. Reverting changes.
[2024-12-02 17:59:24.793129] start test user 56866 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:25.236676] start test user 56866 40/568 recall augumented users by random, augumented_users = [2866, 6917, 15219, 9551, 82213, 59486, 89086, 125218, 99850, 115826, 29207, 111156, 103593, 12278, 80706, 6418, 49609, 47070, 17092, 84063, 52110, 49518, 60648, 20924, 122767, 95695, 56663, 117162, 72234, 2361, 25763, 114003, 63995, 64146, 127998, 63826, 63755, 12296, 32089, 61479, 1437, 98636, 93603, 14108, 84059, 37978, 64118, 112029, 67450, 30439]
[2024-12-02 17:59:25.250720] user = 56866 Cloud 40/568
[2024-12-02 17:59:25.273029] user = 56866 Local 40/568
[2024-12-02 17:59:25.321952] user = 56866 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:27.383245] user = 56866 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5902366863905325
Training on augumented user 2866 0/50 current_auc = 0.5902366863905325
User 2866 AUC after training: 0.5907746100053792
User 2866 improves AUC. Keeping the model.
Training on augumented user 6917 1/50 current_auc = 0.5907746100053792
User 6917 AUC after training: 0.5901694459386767
User 6917 does not improve AUC. Reverting changes.
Training on augumented user 15219 2/50 current_auc = 0.5907746100053792
User 15219 AUC after training: 0.5905728886498117
User 15219 does not improve AUC. Reverting changes.
Training on augumented user 9551 3/50 current_auc = 0.5907746100053792
User 9551 AUC after training: 0.5905728886498117
User 9551 does not improve AUC. Reverting changes.
Training on augumented user 82213 4/50 current_auc = 0.5907746100053792
User 82213 AUC after training: 0.5909763313609468
User 82213 improves AUC. Keeping the model.
Training on augumented user 59486 5/50 current_auc = 0.5909763313609468
User 59486 AUC after training: 0.5907073695535234
User 59486 does not improve AUC. Reverting changes.
Training on augumented user 89086 6/50 current_auc = 0.5909763313609468
User 89086 AUC after training: 0.5907746100053792
User 89086 does not improve AUC. Reverting changes.
Training on augumented user 125218 7/50 current_auc = 0.5909763313609468
User 125218 AUC after training: 0.5909090909090908
User 125218 does not improve AUC. Reverting changes.
Training on augumented user 99850 8/50 current_auc = 0.5909763313609468
User 99850 AUC after training: 0.5911108122646584
User 99850 improves AUC. Keeping the model.
Training on augumented user 115826 9/50 current_auc = 0.5911108122646584
User 115826 AUC after training: 0.5918504572350727
User 115826 improves AUC. Keeping the model.
Training on augumented user 29207 10/50 current_auc = 0.5918504572350727
User 29207 AUC after training: 0.5917832167832168
User 29207 does not improve AUC. Reverting changes.
Training on augumented user 111156 11/50 current_auc = 0.5918504572350727
User 111156 AUC after training: 0.5915814954276493
User 111156 does not improve AUC. Reverting changes.
Training on augumented user 103593 12/50 current_auc = 0.5918504572350727
User 103593 AUC after training: 0.5917159763313609
User 103593 does not improve AUC. Reverting changes.
Training on augumented user 12278 13/50 current_auc = 0.5918504572350727
User 12278 AUC after training: 0.5916487358795051
User 12278 does not improve AUC. Reverting changes.
Training on augumented user 80706 14/50 current_auc = 0.5918504572350727
User 80706 AUC after training: 0.5920521785906401
User 80706 improves AUC. Keeping the model.
Training on augumented user 6418 15/50 current_auc = 0.5920521785906401
User 6418 AUC after training: 0.5922538999462077
User 6418 improves AUC. Keeping the model.
Training on augumented user 49609 16/50 current_auc = 0.5922538999462077
User 49609 AUC after training: 0.5921866594943519
User 49609 does not improve AUC. Reverting changes.
Training on augumented user 47070 17/50 current_auc = 0.5922538999462077
User 47070 AUC after training: 0.5915142549757935
User 47070 does not improve AUC. Reverting changes.
Training on augumented user 17092 18/50 current_auc = 0.5922538999462077
User 17092 AUC after training: 0.5919176976869285
User 17092 does not improve AUC. Reverting changes.
Training on augumented user 84063 19/50 current_auc = 0.5922538999462077
User 84063 AUC after training: 0.5901694459386767
User 84063 does not improve AUC. Reverting changes.
Training on augumented user 52110 20/50 current_auc = 0.5922538999462077
User 52110 AUC after training: 0.5919849381387843
User 52110 does not improve AUC. Reverting changes.
Training on augumented user 49518 21/50 current_auc = 0.5922538999462077
User 49518 AUC after training: 0.5921866594943518
User 49518 does not improve AUC. Reverting changes.
Training on augumented user 60648 22/50 current_auc = 0.5922538999462077
User 60648 AUC after training: 0.5924556213017752
User 60648 improves AUC. Keeping the model.
Training on augumented user 20924 23/50 current_auc = 0.5924556213017752
User 20924 AUC after training: 0.5923211403980635
User 20924 does not improve AUC. Reverting changes.
Training on augumented user 122767 24/50 current_auc = 0.5924556213017752
User 122767 AUC after training: 0.5922538999462077
User 122767 does not improve AUC. Reverting changes.
Training on augumented user 95695 25/50 current_auc = 0.5924556213017752
User 95695 AUC after training: 0.5922538999462077
User 95695 does not improve AUC. Reverting changes.
Training on augumented user 56663 26/50 current_auc = 0.5924556213017752
User 56663 AUC after training: 0.592119419042496
User 56663 does not improve AUC. Reverting changes.
Training on augumented user 117162 27/50 current_auc = 0.5924556213017752
User 117162 AUC after training: 0.5926573426573427
User 117162 improves AUC. Keeping the model.
Training on augumented user 72234 28/50 current_auc = 0.5926573426573427
User 72234 AUC after training: 0.5917832167832168
User 72234 does not improve AUC. Reverting changes.
Training on augumented user 2361 29/50 current_auc = 0.5926573426573427
User 2361 AUC after training: 0.5924220010758472
User 2361 does not improve AUC. Reverting changes.
Training on augumented user 25763 30/50 current_auc = 0.5926573426573427
User 25763 AUC after training: 0.5924556213017751
User 25763 does not improve AUC. Reverting changes.
Training on augumented user 114003 31/50 current_auc = 0.5926573426573427
User 114003 AUC after training: 0.5925901022054867
User 114003 does not improve AUC. Reverting changes.
Training on augumented user 63995 32/50 current_auc = 0.5926573426573427
User 63995 AUC after training: 0.5928590640129101
User 63995 improves AUC. Keeping the model.
Training on augumented user 64146 33/50 current_auc = 0.5928590640129101
User 64146 AUC after training: 0.5933969876277568
User 64146 improves AUC. Keeping the model.
Training on augumented user 127998 34/50 current_auc = 0.5933969876277568
User 127998 AUC after training: 0.5907073695535234
User 127998 does not improve AUC. Reverting changes.
Training on augumented user 63826 35/50 current_auc = 0.5933969876277568
User 63826 AUC after training: 0.5928590640129101
User 63826 does not improve AUC. Reverting changes.
Training on augumented user 63755 36/50 current_auc = 0.5933969876277568
User 63755 AUC after training: 0.5913797740720818
User 63755 does not improve AUC. Reverting changes.
Training on augumented user 12296 37/50 current_auc = 0.5933969876277568
User 12296 AUC after training: 0.590841850457235
User 12296 does not improve AUC. Reverting changes.
Training on augumented user 32089 38/50 current_auc = 0.5933969876277568
User 32089 AUC after training: 0.5927918235610543
User 32089 does not improve AUC. Reverting changes.
Training on augumented user 61479 39/50 current_auc = 0.5933969876277568
User 61479 AUC after training: 0.5929263044647659
User 61479 does not improve AUC. Reverting changes.
Training on augumented user 1437 40/50 current_auc = 0.5933969876277568
User 1437 AUC after training: 0.5919849381387843
User 1437 does not improve AUC. Reverting changes.
Training on augumented user 98636 41/50 current_auc = 0.5933969876277568
User 98636 AUC after training: 0.5929935449166218
User 98636 does not improve AUC. Reverting changes.
Training on augumented user 93603 42/50 current_auc = 0.5933969876277568
User 93603 AUC after training: 0.5930607853684776
User 93603 does not improve AUC. Reverting changes.
Training on augumented user 14108 43/50 current_auc = 0.5933969876277568
User 14108 AUC after training: 0.5922538999462077
User 14108 does not improve AUC. Reverting changes.
Training on augumented user 84059 44/50 current_auc = 0.5933969876277568
User 84059 AUC after training: 0.5924556213017752
User 84059 does not improve AUC. Reverting changes.
Training on augumented user 37978 45/50 current_auc = 0.5933969876277568
User 37978 AUC after training: 0.5922538999462076
User 37978 does not improve AUC. Reverting changes.
Training on augumented user 64118 46/50 current_auc = 0.5933969876277568
User 64118 AUC after training: 0.5926573426573426
User 64118 does not improve AUC. Reverting changes.
Training on augumented user 112029 47/50 current_auc = 0.5933969876277568
User 112029 AUC after training: 0.5927245831091984
User 112029 does not improve AUC. Reverting changes.
Training on augumented user 67450 48/50 current_auc = 0.5933969876277568
User 67450 AUC after training: 0.5928590640129102
User 67450 does not improve AUC. Reverting changes.
Training on augumented user 30439 49/50 current_auc = 0.5933969876277568
User 30439 AUC after training: 0.5927918235610543
User 30439 does not improve AUC. Reverting changes.
[2024-12-02 18:00:01.833744] start test user 56879 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:02.290792] start test user 56879 41/568 recall augumented users by random, augumented_users = [95760, 111770, 71100, 90830, 46071, 103233, 100454, 56811, 14824, 131414, 16771, 40829, 58366, 35577, 47764, 95909, 23883, 52930, 81772, 117351, 93495, 94860, 60439, 78445, 123493, 125446, 129851, 77206, 19135, 39182, 124615, 24194, 77479, 65398, 32551, 38519, 57541, 98928, 130500, 75149, 27415, 77741, 114274, 102496, 79030, 61686, 29118, 17616, 55043, 66448]
[2024-12-02 18:00:02.314427] user = 56879 Cloud 41/568
[2024-12-02 18:00:02.344793] user = 56879 Local 41/568
[2024-12-02 18:00:02.734719] user = 56879 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:04.671791] user = 56879 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5813618925831202
Training on augumented user 95760 0/50 current_auc = 0.5813618925831202
User 95760 AUC after training: 0.5820012787723785
User 95760 improves AUC. Keeping the model.
Training on augumented user 111770 1/50 current_auc = 0.5820012787723785
User 111770 AUC after training: 0.5809622762148338
User 111770 does not improve AUC. Reverting changes.
Training on augumented user 71100 2/50 current_auc = 0.5820012787723785
User 71100 AUC after training: 0.5812020460358057
User 71100 does not improve AUC. Reverting changes.
Training on augumented user 90830 3/50 current_auc = 0.5820012787723785
User 90830 AUC after training: 0.5813618925831202
User 90830 does not improve AUC. Reverting changes.
Training on augumented user 46071 4/50 current_auc = 0.5820012787723785
User 46071 AUC after training: 0.5808823529411764
User 46071 does not improve AUC. Reverting changes.
Training on augumented user 103233 5/50 current_auc = 0.5820012787723785
User 103233 AUC after training: 0.5817615089514065
User 103233 does not improve AUC. Reverting changes.
Training on augumented user 100454 6/50 current_auc = 0.5820012787723785
User 100454 AUC after training: 0.5812020460358056
User 100454 does not improve AUC. Reverting changes.
Training on augumented user 56811 7/50 current_auc = 0.5820012787723785
User 56811 AUC after training: 0.5813618925831202
User 56811 does not improve AUC. Reverting changes.
Training on augumented user 14824 8/50 current_auc = 0.5820012787723785
User 14824 AUC after training: 0.5815217391304347
User 14824 does not improve AUC. Reverting changes.
Training on augumented user 131414 9/50 current_auc = 0.5820012787723785
User 131414 AUC after training: 0.5811221227621484
User 131414 does not improve AUC. Reverting changes.
Training on augumented user 16771 10/50 current_auc = 0.5820012787723785
User 16771 AUC after training: 0.5814418158567775
User 16771 does not improve AUC. Reverting changes.
Training on augumented user 40829 11/50 current_auc = 0.5820012787723785
User 40829 AUC after training: 0.5811221227621484
User 40829 does not improve AUC. Reverting changes.
Training on augumented user 58366 12/50 current_auc = 0.5820012787723785
User 58366 AUC after training: 0.5809622762148338
User 58366 does not improve AUC. Reverting changes.
Training on augumented user 35577 13/50 current_auc = 0.5820012787723785
User 35577 AUC after training: 0.582161125319693
User 35577 improves AUC. Keeping the model.
Training on augumented user 47764 14/50 current_auc = 0.582161125319693
User 47764 AUC after training: 0.5820012787723784
User 47764 does not improve AUC. Reverting changes.
Training on augumented user 95909 15/50 current_auc = 0.582161125319693
User 95909 AUC after training: 0.5808024296675192
User 95909 does not improve AUC. Reverting changes.
Training on augumented user 23883 16/50 current_auc = 0.582161125319693
User 23883 AUC after training: 0.5819613171355498
User 23883 does not improve AUC. Reverting changes.
Training on augumented user 52930 17/50 current_auc = 0.582161125319693
User 52930 AUC after training: 0.5810821611253197
User 52930 does not improve AUC. Reverting changes.
Training on augumented user 81772 18/50 current_auc = 0.582161125319693
User 81772 AUC after training: 0.5820012787723785
User 81772 does not improve AUC. Reverting changes.
Training on augumented user 117351 19/50 current_auc = 0.582161125319693
User 117351 AUC after training: 0.5815217391304348
User 117351 does not improve AUC. Reverting changes.
Training on augumented user 93495 20/50 current_auc = 0.582161125319693
User 93495 AUC after training: 0.5814817774936062
User 93495 does not improve AUC. Reverting changes.
Training on augumented user 94860 21/50 current_auc = 0.582161125319693
User 94860 AUC after training: 0.5816416240409207
User 94860 does not improve AUC. Reverting changes.
Training on augumented user 60439 22/50 current_auc = 0.582161125319693
User 60439 AUC after training: 0.5818813938618926
User 60439 does not improve AUC. Reverting changes.
Training on augumented user 78445 23/50 current_auc = 0.582161125319693
User 78445 AUC after training: 0.5819213554987213
User 78445 does not improve AUC. Reverting changes.
Training on augumented user 123493 24/50 current_auc = 0.582161125319693
User 123493 AUC after training: 0.5812020460358056
User 123493 does not improve AUC. Reverting changes.
Training on augumented user 125446 25/50 current_auc = 0.582161125319693
User 125446 AUC after training: 0.5812819693094629
User 125446 does not improve AUC. Reverting changes.
Training on augumented user 129851 26/50 current_auc = 0.582161125319693
User 129851 AUC after training: 0.5821211636828645
User 129851 does not improve AUC. Reverting changes.
Training on augumented user 77206 27/50 current_auc = 0.582161125319693
User 77206 AUC after training: 0.5820012787723785
User 77206 does not improve AUC. Reverting changes.
Training on augumented user 19135 28/50 current_auc = 0.582161125319693
User 19135 AUC after training: 0.581042199488491
User 19135 does not improve AUC. Reverting changes.
Training on augumented user 39182 29/50 current_auc = 0.582161125319693
User 39182 AUC after training: 0.581841432225064
User 39182 does not improve AUC. Reverting changes.
Training on augumented user 124615 30/50 current_auc = 0.582161125319693
User 124615 AUC after training: 0.5810022378516624
User 124615 does not improve AUC. Reverting changes.
Training on augumented user 24194 31/50 current_auc = 0.582161125319693
User 24194 AUC after training: 0.5816416240409207
User 24194 does not improve AUC. Reverting changes.
Training on augumented user 77479 32/50 current_auc = 0.582161125319693
User 77479 AUC after training: 0.5816815856777494
User 77479 does not improve AUC. Reverting changes.
Training on augumented user 65398 33/50 current_auc = 0.582161125319693
User 65398 AUC after training: 0.5818014705882353
User 65398 does not improve AUC. Reverting changes.
Training on augumented user 32551 34/50 current_auc = 0.582161125319693
User 32551 AUC after training: 0.5820412404092071
User 32551 does not improve AUC. Reverting changes.
Training on augumented user 38519 35/50 current_auc = 0.582161125319693
User 38519 AUC after training: 0.5813219309462915
User 38519 does not improve AUC. Reverting changes.
Training on augumented user 57541 36/50 current_auc = 0.582161125319693
User 57541 AUC after training: 0.5819213554987211
User 57541 does not improve AUC. Reverting changes.
Training on augumented user 98928 37/50 current_auc = 0.582161125319693
User 98928 AUC after training: 0.5816016624040921
User 98928 does not improve AUC. Reverting changes.
Training on augumented user 130500 38/50 current_auc = 0.582161125319693
User 130500 AUC after training: 0.5817615089514067
User 130500 does not improve AUC. Reverting changes.
Training on augumented user 75149 39/50 current_auc = 0.582161125319693
User 75149 AUC after training: 0.5820012787723785
User 75149 does not improve AUC. Reverting changes.
Training on augumented user 27415 40/50 current_auc = 0.582161125319693
User 27415 AUC after training: 0.5815617007672634
User 27415 does not improve AUC. Reverting changes.
Training on augumented user 77741 41/50 current_auc = 0.582161125319693
User 77741 AUC after training: 0.5815217391304348
User 77741 does not improve AUC. Reverting changes.
Training on augumented user 114274 42/50 current_auc = 0.582161125319693
User 114274 AUC after training: 0.5825607416879796
User 114274 improves AUC. Keeping the model.
Training on augumented user 102496 43/50 current_auc = 0.5825607416879796
User 102496 AUC after training: 0.5816815856777493
User 102496 does not improve AUC. Reverting changes.
Training on augumented user 79030 44/50 current_auc = 0.5825607416879796
User 79030 AUC after training: 0.5825207800511508
User 79030 does not improve AUC. Reverting changes.
Training on augumented user 61686 45/50 current_auc = 0.5825607416879796
User 61686 AUC after training: 0.581042199488491
User 61686 does not improve AUC. Reverting changes.
Training on augumented user 29118 46/50 current_auc = 0.5825607416879796
User 29118 AUC after training: 0.582161125319693
User 29118 does not improve AUC. Reverting changes.
Training on augumented user 17616 47/50 current_auc = 0.5825607416879796
User 17616 AUC after training: 0.5803228900255755
User 17616 does not improve AUC. Reverting changes.
Training on augumented user 55043 48/50 current_auc = 0.5825607416879796
User 55043 AUC after training: 0.5816016624040921
User 55043 does not improve AUC. Reverting changes.
Training on augumented user 66448 49/50 current_auc = 0.5825607416879796
User 66448 AUC after training: 0.582400895140665
User 66448 does not improve AUC. Reverting changes.
[2024-12-02 18:00:34.483080] start test user 56883 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:35.015068] start test user 56883 42/568 recall augumented users by random, augumented_users = [97058, 91344, 38914, 63300, 58887, 70927, 87284, 83534, 101341, 22973, 101331, 87017, 38615, 421, 122690, 76774, 112517, 21624, 21826, 38460, 75777, 46765, 43786, 96333, 112758, 24604, 38123, 110440, 108694, 64013, 8496, 48947, 2419, 10433, 133862, 57392, 100334, 2701, 80397, 81938, 6177, 18070, 74204, 39231, 73574, 82317, 63673, 59554, 113142, 127528]
[2024-12-02 18:00:35.030888] user = 56883 Cloud 42/568
[2024-12-02 18:00:35.044826] user = 56883 Local 42/568
[2024-12-02 18:00:35.194797] user = 56883 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:36.942744] user = 56883 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4624505928853755
Training on augumented user 97058 0/50 current_auc = 0.4624505928853755
User 97058 AUC after training: 0.4624505928853755
User 97058 does not improve AUC. Reverting changes.
Training on augumented user 91344 1/50 current_auc = 0.4624505928853755
User 91344 AUC after training: 0.46047430830039526
User 91344 does not improve AUC. Reverting changes.
Training on augumented user 38914 2/50 current_auc = 0.4624505928853755
User 38914 AUC after training: 0.45849802371541504
User 38914 does not improve AUC. Reverting changes.
Training on augumented user 63300 3/50 current_auc = 0.4624505928853755
User 63300 AUC after training: 0.4624505928853755
User 63300 does not improve AUC. Reverting changes.
Training on augumented user 58887 4/50 current_auc = 0.4624505928853755
User 58887 AUC after training: 0.45948616600790515
User 58887 does not improve AUC. Reverting changes.
Training on augumented user 70927 5/50 current_auc = 0.4624505928853755
User 70927 AUC after training: 0.4624505928853755
User 70927 does not improve AUC. Reverting changes.
Training on augumented user 87284 6/50 current_auc = 0.4624505928853755
User 87284 AUC after training: 0.4624505928853755
User 87284 does not improve AUC. Reverting changes.
Training on augumented user 83534 7/50 current_auc = 0.4624505928853755
User 83534 AUC after training: 0.45652173913043476
User 83534 does not improve AUC. Reverting changes.
Training on augumented user 101341 8/50 current_auc = 0.4624505928853755
User 101341 AUC after training: 0.45652173913043476
User 101341 does not improve AUC. Reverting changes.
Training on augumented user 22973 9/50 current_auc = 0.4624505928853755
User 22973 AUC after training: 0.46047430830039526
User 22973 does not improve AUC. Reverting changes.
Training on augumented user 101331 10/50 current_auc = 0.4624505928853755
User 101331 AUC after training: 0.4644268774703557
User 101331 improves AUC. Keeping the model.
Training on augumented user 87017 11/50 current_auc = 0.4644268774703557
User 87017 AUC after training: 0.4634387351778656
User 87017 does not improve AUC. Reverting changes.
Training on augumented user 38615 12/50 current_auc = 0.4644268774703557
User 38615 AUC after training: 0.46047430830039526
User 38615 does not improve AUC. Reverting changes.
Training on augumented user 421 13/50 current_auc = 0.4644268774703557
User 421 AUC after training: 0.4644268774703557
User 421 does not improve AUC. Reverting changes.
Training on augumented user 122690 14/50 current_auc = 0.4644268774703557
User 122690 AUC after training: 0.4604743083003952
User 122690 does not improve AUC. Reverting changes.
Training on augumented user 76774 15/50 current_auc = 0.4644268774703557
User 76774 AUC after training: 0.4634387351778656
User 76774 does not improve AUC. Reverting changes.
Training on augumented user 112517 16/50 current_auc = 0.4644268774703557
User 112517 AUC after training: 0.45948616600790515
User 112517 does not improve AUC. Reverting changes.
Training on augumented user 21624 17/50 current_auc = 0.4644268774703557
User 21624 AUC after training: 0.45849802371541504
User 21624 does not improve AUC. Reverting changes.
Training on augumented user 21826 18/50 current_auc = 0.4644268774703557
User 21826 AUC after training: 0.4673913043478261
User 21826 improves AUC. Keeping the model.
Training on augumented user 38460 19/50 current_auc = 0.4673913043478261
User 38460 AUC after training: 0.4673913043478261
User 38460 does not improve AUC. Reverting changes.
Training on augumented user 75777 20/50 current_auc = 0.4673913043478261
User 75777 AUC after training: 0.4634387351778656
User 75777 does not improve AUC. Reverting changes.
Training on augumented user 46765 21/50 current_auc = 0.4673913043478261
User 46765 AUC after training: 0.4634387351778656
User 46765 does not improve AUC. Reverting changes.
Training on augumented user 43786 22/50 current_auc = 0.4673913043478261
User 43786 AUC after training: 0.4644268774703557
User 43786 does not improve AUC. Reverting changes.
Training on augumented user 96333 23/50 current_auc = 0.4673913043478261
User 96333 AUC after training: 0.4634387351778656
User 96333 does not improve AUC. Reverting changes.
Training on augumented user 112758 24/50 current_auc = 0.4673913043478261
User 112758 AUC after training: 0.46640316205533594
User 112758 does not improve AUC. Reverting changes.
Training on augumented user 24604 25/50 current_auc = 0.4673913043478261
User 24604 AUC after training: 0.46640316205533594
User 24604 does not improve AUC. Reverting changes.
Training on augumented user 38123 26/50 current_auc = 0.4673913043478261
User 38123 AUC after training: 0.46640316205533594
User 38123 does not improve AUC. Reverting changes.
Training on augumented user 110440 27/50 current_auc = 0.4673913043478261
User 110440 AUC after training: 0.4634387351778656
User 110440 does not improve AUC. Reverting changes.
Training on augumented user 108694 28/50 current_auc = 0.4673913043478261
User 108694 AUC after training: 0.4644268774703557
User 108694 does not improve AUC. Reverting changes.
Training on augumented user 64013 29/50 current_auc = 0.4673913043478261
User 64013 AUC after training: 0.4673913043478261
User 64013 does not improve AUC. Reverting changes.
Training on augumented user 8496 30/50 current_auc = 0.4673913043478261
User 8496 AUC after training: 0.46739130434782605
User 8496 does not improve AUC. Reverting changes.
Training on augumented user 48947 31/50 current_auc = 0.4673913043478261
User 48947 AUC after training: 0.4634387351778656
User 48947 does not improve AUC. Reverting changes.
Training on augumented user 2419 32/50 current_auc = 0.4673913043478261
User 2419 AUC after training: 0.4673913043478261
User 2419 does not improve AUC. Reverting changes.
Training on augumented user 10433 33/50 current_auc = 0.4673913043478261
User 10433 AUC after training: 0.4654150197628458
User 10433 does not improve AUC. Reverting changes.
Training on augumented user 133862 34/50 current_auc = 0.4673913043478261
User 133862 AUC after training: 0.46640316205533594
User 133862 does not improve AUC. Reverting changes.
Training on augumented user 57392 35/50 current_auc = 0.4673913043478261
User 57392 AUC after training: 0.4634387351778656
User 57392 does not improve AUC. Reverting changes.
Training on augumented user 100334 36/50 current_auc = 0.4673913043478261
User 100334 AUC after training: 0.4624505928853755
User 100334 does not improve AUC. Reverting changes.
Training on augumented user 2701 37/50 current_auc = 0.4673913043478261
User 2701 AUC after training: 0.46640316205533594
User 2701 does not improve AUC. Reverting changes.
Training on augumented user 80397 38/50 current_auc = 0.4673913043478261
User 80397 AUC after training: 0.4654150197628458
User 80397 does not improve AUC. Reverting changes.
Training on augumented user 81938 39/50 current_auc = 0.4673913043478261
User 81938 AUC after training: 0.4624505928853755
User 81938 does not improve AUC. Reverting changes.
Training on augumented user 6177 40/50 current_auc = 0.4673913043478261
User 6177 AUC after training: 0.46640316205533594
User 6177 does not improve AUC. Reverting changes.
Training on augumented user 18070 41/50 current_auc = 0.4673913043478261
User 18070 AUC after training: 0.46640316205533594
User 18070 does not improve AUC. Reverting changes.
Training on augumented user 74204 42/50 current_auc = 0.4673913043478261
User 74204 AUC after training: 0.4654150197628459
User 74204 does not improve AUC. Reverting changes.
Training on augumented user 39231 43/50 current_auc = 0.4673913043478261
User 39231 AUC after training: 0.4683794466403162
User 39231 improves AUC. Keeping the model.
Training on augumented user 73574 44/50 current_auc = 0.4683794466403162
User 73574 AUC after training: 0.46640316205533594
User 73574 does not improve AUC. Reverting changes.
Training on augumented user 82317 45/50 current_auc = 0.4683794466403162
User 82317 AUC after training: 0.4673913043478261
User 82317 does not improve AUC. Reverting changes.
Training on augumented user 63673 46/50 current_auc = 0.4683794466403162
User 63673 AUC after training: 0.46640316205533594
User 63673 does not improve AUC. Reverting changes.
Training on augumented user 59554 47/50 current_auc = 0.4683794466403162
User 59554 AUC after training: 0.4644268774703557
User 59554 does not improve AUC. Reverting changes.
Training on augumented user 113142 48/50 current_auc = 0.4683794466403162
User 113142 AUC after training: 0.4673913043478261
User 113142 does not improve AUC. Reverting changes.
Training on augumented user 127528 49/50 current_auc = 0.4683794466403162
User 127528 AUC after training: 0.4654150197628459
User 127528 does not improve AUC. Reverting changes.
[2024-12-02 18:01:07.276389] start test user 56926 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:08.137103] start test user 56926 43/568 recall augumented users by random, augumented_users = [124421, 21936, 113481, 76867, 23378, 104271, 126194, 40939, 96635, 125963, 89692, 26941, 50892, 79898, 92759, 16722, 1808, 132069, 76554, 127707, 87652, 103267, 62075, 69310, 111715, 9281, 113106, 90532, 122712, 13346, 301, 61110, 80762, 37200, 108724, 29087, 1904, 79130, 11639, 130243, 98597, 52376, 103433, 19528, 84517, 48010, 133502, 44659, 19943, 4047]
[2024-12-02 18:01:08.154268] user = 56926 Cloud 43/568
[2024-12-02 18:01:08.178933] user = 56926 Local 43/568
[2024-12-02 18:01:08.297785] user = 56926 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:11.295311] user = 56926 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6964285714285714
Training on augumented user 124421 0/50 current_auc = 0.6964285714285714
User 124421 AUC after training: 0.6964285714285714
User 124421 does not improve AUC. Reverting changes.
Training on augumented user 21936 1/50 current_auc = 0.6964285714285714
User 21936 AUC after training: 0.6964285714285714
User 21936 does not improve AUC. Reverting changes.
Training on augumented user 113481 2/50 current_auc = 0.6964285714285714
User 113481 AUC after training: 0.6964285714285714
User 113481 does not improve AUC. Reverting changes.
Training on augumented user 76867 3/50 current_auc = 0.6964285714285714
User 76867 AUC after training: 0.6964285714285714
User 76867 does not improve AUC. Reverting changes.
Training on augumented user 23378 4/50 current_auc = 0.6964285714285714
User 23378 AUC after training: 0.6964285714285714
User 23378 does not improve AUC. Reverting changes.
Training on augumented user 104271 5/50 current_auc = 0.6964285714285714
User 104271 AUC after training: 0.6964285714285714
User 104271 does not improve AUC. Reverting changes.
Training on augumented user 126194 6/50 current_auc = 0.6964285714285714
User 126194 AUC after training: 0.6964285714285714
User 126194 does not improve AUC. Reverting changes.
Training on augumented user 40939 7/50 current_auc = 0.6964285714285714
User 40939 AUC after training: 0.6964285714285714
User 40939 does not improve AUC. Reverting changes.
Training on augumented user 96635 8/50 current_auc = 0.6964285714285714
User 96635 AUC after training: 0.6964285714285714
User 96635 does not improve AUC. Reverting changes.
Training on augumented user 125963 9/50 current_auc = 0.6964285714285714
User 125963 AUC after training: 0.6964285714285714
User 125963 does not improve AUC. Reverting changes.
Training on augumented user 89692 10/50 current_auc = 0.6964285714285714
User 89692 AUC after training: 0.6964285714285714
User 89692 does not improve AUC. Reverting changes.
Training on augumented user 26941 11/50 current_auc = 0.6964285714285714
User 26941 AUC after training: 0.6964285714285714
User 26941 does not improve AUC. Reverting changes.
Training on augumented user 50892 12/50 current_auc = 0.6964285714285714
User 50892 AUC after training: 0.6964285714285714
User 50892 does not improve AUC. Reverting changes.
Training on augumented user 79898 13/50 current_auc = 0.6964285714285714
User 79898 AUC after training: 0.6964285714285714
User 79898 does not improve AUC. Reverting changes.
Training on augumented user 92759 14/50 current_auc = 0.6964285714285714
User 92759 AUC after training: 0.6964285714285714
User 92759 does not improve AUC. Reverting changes.
Training on augumented user 16722 15/50 current_auc = 0.6964285714285714
User 16722 AUC after training: 0.6964285714285714
User 16722 does not improve AUC. Reverting changes.
Training on augumented user 1808 16/50 current_auc = 0.6964285714285714
User 1808 AUC after training: 0.6964285714285714
User 1808 does not improve AUC. Reverting changes.
Training on augumented user 132069 17/50 current_auc = 0.6964285714285714
User 132069 AUC after training: 0.6964285714285714
User 132069 does not improve AUC. Reverting changes.
Training on augumented user 76554 18/50 current_auc = 0.6964285714285714
User 76554 AUC after training: 0.6964285714285714
User 76554 does not improve AUC. Reverting changes.
Training on augumented user 127707 19/50 current_auc = 0.6964285714285714
User 127707 AUC after training: 0.6964285714285714
User 127707 does not improve AUC. Reverting changes.
Training on augumented user 87652 20/50 current_auc = 0.6964285714285714
User 87652 AUC after training: 0.6964285714285714
User 87652 does not improve AUC. Reverting changes.
Training on augumented user 103267 21/50 current_auc = 0.6964285714285714
User 103267 AUC after training: 0.6964285714285714
User 103267 does not improve AUC. Reverting changes.
Training on augumented user 62075 22/50 current_auc = 0.6964285714285714
User 62075 AUC after training: 0.6964285714285714
User 62075 does not improve AUC. Reverting changes.
Training on augumented user 69310 23/50 current_auc = 0.6964285714285714
User 69310 AUC after training: 0.6964285714285714
User 69310 does not improve AUC. Reverting changes.
Training on augumented user 111715 24/50 current_auc = 0.6964285714285714
User 111715 AUC after training: 0.6964285714285714
User 111715 does not improve AUC. Reverting changes.
Training on augumented user 9281 25/50 current_auc = 0.6964285714285714
User 9281 AUC after training: 0.6964285714285714
User 9281 does not improve AUC. Reverting changes.
Training on augumented user 113106 26/50 current_auc = 0.6964285714285714
User 113106 AUC after training: 0.6964285714285714
User 113106 does not improve AUC. Reverting changes.
Training on augumented user 90532 27/50 current_auc = 0.6964285714285714
User 90532 AUC after training: 0.6964285714285714
User 90532 does not improve AUC. Reverting changes.
Training on augumented user 122712 28/50 current_auc = 0.6964285714285714
User 122712 AUC after training: 0.6964285714285714
User 122712 does not improve AUC. Reverting changes.
Training on augumented user 13346 29/50 current_auc = 0.6964285714285714
User 13346 AUC after training: 0.6964285714285714
User 13346 does not improve AUC. Reverting changes.
Training on augumented user 301 30/50 current_auc = 0.6964285714285714
User 301 AUC after training: 0.6964285714285714
User 301 does not improve AUC. Reverting changes.
Training on augumented user 61110 31/50 current_auc = 0.6964285714285714
User 61110 AUC after training: 0.6964285714285714
User 61110 does not improve AUC. Reverting changes.
Training on augumented user 80762 32/50 current_auc = 0.6964285714285714
User 80762 AUC after training: 0.6964285714285714
User 80762 does not improve AUC. Reverting changes.
Training on augumented user 37200 33/50 current_auc = 0.6964285714285714
User 37200 AUC after training: 0.6964285714285714
User 37200 does not improve AUC. Reverting changes.
Training on augumented user 108724 34/50 current_auc = 0.6964285714285714
User 108724 AUC after training: 0.6964285714285714
User 108724 does not improve AUC. Reverting changes.
Training on augumented user 29087 35/50 current_auc = 0.6964285714285714
User 29087 AUC after training: 0.6964285714285714
User 29087 does not improve AUC. Reverting changes.
Training on augumented user 1904 36/50 current_auc = 0.6964285714285714
User 1904 AUC after training: 0.6964285714285714
User 1904 does not improve AUC. Reverting changes.
Training on augumented user 79130 37/50 current_auc = 0.6964285714285714
User 79130 AUC after training: 0.6964285714285714
User 79130 does not improve AUC. Reverting changes.
Training on augumented user 11639 38/50 current_auc = 0.6964285714285714
User 11639 AUC after training: 0.6964285714285714
User 11639 does not improve AUC. Reverting changes.
Training on augumented user 130243 39/50 current_auc = 0.6964285714285714
User 130243 AUC after training: 0.6964285714285714
User 130243 does not improve AUC. Reverting changes.
Training on augumented user 98597 40/50 current_auc = 0.6964285714285714
User 98597 AUC after training: 0.6964285714285714
User 98597 does not improve AUC. Reverting changes.
Training on augumented user 52376 41/50 current_auc = 0.6964285714285714
User 52376 AUC after training: 0.6964285714285714
User 52376 does not improve AUC. Reverting changes.
Training on augumented user 103433 42/50 current_auc = 0.6964285714285714
User 103433 AUC after training: 0.6964285714285714
User 103433 does not improve AUC. Reverting changes.
Training on augumented user 19528 43/50 current_auc = 0.6964285714285714
User 19528 AUC after training: 0.6964285714285714
User 19528 does not improve AUC. Reverting changes.
Training on augumented user 84517 44/50 current_auc = 0.6964285714285714
User 84517 AUC after training: 0.6964285714285714
User 84517 does not improve AUC. Reverting changes.
Training on augumented user 48010 45/50 current_auc = 0.6964285714285714
User 48010 AUC after training: 0.6964285714285714
User 48010 does not improve AUC. Reverting changes.
Training on augumented user 133502 46/50 current_auc = 0.6964285714285714
User 133502 AUC after training: 0.6964285714285714
User 133502 does not improve AUC. Reverting changes.
Training on augumented user 44659 47/50 current_auc = 0.6964285714285714
User 44659 AUC after training: 0.6964285714285714
User 44659 does not improve AUC. Reverting changes.
Training on augumented user 19943 48/50 current_auc = 0.6964285714285714
User 19943 AUC after training: 0.6964285714285714
User 19943 does not improve AUC. Reverting changes.
Training on augumented user 4047 49/50 current_auc = 0.6964285714285714
User 4047 AUC after training: 0.6964285714285714
User 4047 does not improve AUC. Reverting changes.
[2024-12-02 18:01:40.456564] start test user 56953 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:41.254632] start test user 56953 44/568 recall augumented users by random, augumented_users = [118940, 24262, 93930, 28202, 33849, 27147, 137646, 112153, 90174, 9618, 2643, 110514, 37216, 106598, 127599, 111747, 136769, 132048, 1288, 54799, 57180, 21403, 127186, 40015, 76378, 66122, 112942, 74477, 35786, 4936, 23502, 128546, 72723, 46133, 47509, 8134, 31804, 55133, 72796, 112337, 31465, 21369, 82596, 134929, 16549, 46679, 8294, 62925, 41550, 99344]
[2024-12-02 18:01:41.273579] user = 56953 Cloud 44/568
[2024-12-02 18:01:41.300323] user = 56953 Local 44/568
[2024-12-02 18:01:41.424699] user = 56953 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:44.013861] user = 56953 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5641025641025641
Training on augumented user 118940 0/50 current_auc = 0.5641025641025641
User 118940 AUC after training: 0.5623543123543123
User 118940 does not improve AUC. Reverting changes.
Training on augumented user 24262 1/50 current_auc = 0.5641025641025641
User 24262 AUC after training: 0.5623543123543123
User 24262 does not improve AUC. Reverting changes.
Training on augumented user 93930 2/50 current_auc = 0.5641025641025641
User 93930 AUC after training: 0.5635198135198135
User 93930 does not improve AUC. Reverting changes.
Training on augumented user 28202 3/50 current_auc = 0.5641025641025641
User 28202 AUC after training: 0.5635198135198135
User 28202 does not improve AUC. Reverting changes.
Training on augumented user 33849 4/50 current_auc = 0.5641025641025641
User 33849 AUC after training: 0.5629370629370629
User 33849 does not improve AUC. Reverting changes.
Training on augumented user 27147 5/50 current_auc = 0.5641025641025641
User 27147 AUC after training: 0.5641025641025641
User 27147 does not improve AUC. Reverting changes.
Training on augumented user 137646 6/50 current_auc = 0.5641025641025641
User 137646 AUC after training: 0.5646853146853147
User 137646 improves AUC. Keeping the model.
Training on augumented user 112153 7/50 current_auc = 0.5646853146853147
User 112153 AUC after training: 0.5658508158508159
User 112153 improves AUC. Keeping the model.
Training on augumented user 90174 8/50 current_auc = 0.5658508158508159
User 90174 AUC after training: 0.5658508158508159
User 90174 does not improve AUC. Reverting changes.
Training on augumented user 9618 9/50 current_auc = 0.5658508158508159
User 9618 AUC after training: 0.5617715617715617
User 9618 does not improve AUC. Reverting changes.
Training on augumented user 2643 10/50 current_auc = 0.5658508158508159
User 2643 AUC after training: 0.5646853146853147
User 2643 does not improve AUC. Reverting changes.
Training on augumented user 110514 11/50 current_auc = 0.5658508158508159
User 110514 AUC after training: 0.5658508158508159
User 110514 does not improve AUC. Reverting changes.
Training on augumented user 37216 12/50 current_auc = 0.5658508158508159
User 37216 AUC after training: 0.5658508158508159
User 37216 does not improve AUC. Reverting changes.
Training on augumented user 106598 13/50 current_auc = 0.5658508158508159
User 106598 AUC after training: 0.5652680652680653
User 106598 does not improve AUC. Reverting changes.
Training on augumented user 127599 14/50 current_auc = 0.5658508158508159
User 127599 AUC after training: 0.5664335664335665
User 127599 improves AUC. Keeping the model.
Training on augumented user 111747 15/50 current_auc = 0.5664335664335665
User 111747 AUC after training: 0.5652680652680653
User 111747 does not improve AUC. Reverting changes.
Training on augumented user 136769 16/50 current_auc = 0.5664335664335665
User 136769 AUC after training: 0.5664335664335665
User 136769 does not improve AUC. Reverting changes.
Training on augumented user 132048 17/50 current_auc = 0.5664335664335665
User 132048 AUC after training: 0.5652680652680653
User 132048 does not improve AUC. Reverting changes.
Training on augumented user 1288 18/50 current_auc = 0.5664335664335665
User 1288 AUC after training: 0.5629370629370629
User 1288 does not improve AUC. Reverting changes.
Training on augumented user 54799 19/50 current_auc = 0.5664335664335665
User 54799 AUC after training: 0.5652680652680653
User 54799 does not improve AUC. Reverting changes.
Training on augumented user 57180 20/50 current_auc = 0.5664335664335665
User 57180 AUC after training: 0.5641025641025641
User 57180 does not improve AUC. Reverting changes.
Training on augumented user 21403 21/50 current_auc = 0.5664335664335665
User 21403 AUC after training: 0.567016317016317
User 21403 improves AUC. Keeping the model.
Training on augumented user 127186 22/50 current_auc = 0.567016317016317
User 127186 AUC after training: 0.5652680652680653
User 127186 does not improve AUC. Reverting changes.
Training on augumented user 40015 23/50 current_auc = 0.567016317016317
User 40015 AUC after training: 0.5658508158508159
User 40015 does not improve AUC. Reverting changes.
Training on augumented user 76378 24/50 current_auc = 0.567016317016317
User 76378 AUC after training: 0.5664335664335665
User 76378 does not improve AUC. Reverting changes.
Training on augumented user 66122 25/50 current_auc = 0.567016317016317
User 66122 AUC after training: 0.5664335664335665
User 66122 does not improve AUC. Reverting changes.
Training on augumented user 112942 26/50 current_auc = 0.567016317016317
User 112942 AUC after training: 0.567016317016317
User 112942 does not improve AUC. Reverting changes.
Training on augumented user 74477 27/50 current_auc = 0.567016317016317
User 74477 AUC after training: 0.5658508158508159
User 74477 does not improve AUC. Reverting changes.
Training on augumented user 35786 28/50 current_auc = 0.567016317016317
User 35786 AUC after training: 0.5658508158508159
User 35786 does not improve AUC. Reverting changes.
Training on augumented user 4936 29/50 current_auc = 0.567016317016317
User 4936 AUC after training: 0.5664335664335665
User 4936 does not improve AUC. Reverting changes.
Training on augumented user 23502 30/50 current_auc = 0.567016317016317
User 23502 AUC after training: 0.567016317016317
User 23502 does not improve AUC. Reverting changes.
Training on augumented user 128546 31/50 current_auc = 0.567016317016317
User 128546 AUC after training: 0.5664335664335665
User 128546 does not improve AUC. Reverting changes.
Training on augumented user 72723 32/50 current_auc = 0.567016317016317
User 72723 AUC after training: 0.567016317016317
User 72723 does not improve AUC. Reverting changes.
Training on augumented user 46133 33/50 current_auc = 0.567016317016317
User 46133 AUC after training: 0.567016317016317
User 46133 does not improve AUC. Reverting changes.
Training on augumented user 47509 34/50 current_auc = 0.567016317016317
User 47509 AUC after training: 0.5658508158508159
User 47509 does not improve AUC. Reverting changes.
Training on augumented user 8134 35/50 current_auc = 0.567016317016317
User 8134 AUC after training: 0.567016317016317
User 8134 does not improve AUC. Reverting changes.
Training on augumented user 31804 36/50 current_auc = 0.567016317016317
User 31804 AUC after training: 0.5646853146853147
User 31804 does not improve AUC. Reverting changes.
Training on augumented user 55133 37/50 current_auc = 0.567016317016317
User 55133 AUC after training: 0.5646853146853147
User 55133 does not improve AUC. Reverting changes.
Training on augumented user 72796 38/50 current_auc = 0.567016317016317
User 72796 AUC after training: 0.5658508158508159
User 72796 does not improve AUC. Reverting changes.
Training on augumented user 112337 39/50 current_auc = 0.567016317016317
User 112337 AUC after training: 0.5646853146853147
User 112337 does not improve AUC. Reverting changes.
Training on augumented user 31465 40/50 current_auc = 0.567016317016317
User 31465 AUC after training: 0.567016317016317
User 31465 does not improve AUC. Reverting changes.
Training on augumented user 21369 41/50 current_auc = 0.567016317016317
User 21369 AUC after training: 0.5664335664335665
User 21369 does not improve AUC. Reverting changes.
Training on augumented user 82596 42/50 current_auc = 0.567016317016317
User 82596 AUC after training: 0.567016317016317
User 82596 does not improve AUC. Reverting changes.
Training on augumented user 134929 43/50 current_auc = 0.567016317016317
User 134929 AUC after training: 0.5646853146853147
User 134929 does not improve AUC. Reverting changes.
Training on augumented user 16549 44/50 current_auc = 0.567016317016317
User 16549 AUC after training: 0.567016317016317
User 16549 does not improve AUC. Reverting changes.
Training on augumented user 46679 45/50 current_auc = 0.567016317016317
User 46679 AUC after training: 0.5658508158508159
User 46679 does not improve AUC. Reverting changes.
Training on augumented user 8294 46/50 current_auc = 0.567016317016317
User 8294 AUC after training: 0.5664335664335665
User 8294 does not improve AUC. Reverting changes.
Training on augumented user 62925 47/50 current_auc = 0.567016317016317
User 62925 AUC after training: 0.5623543123543123
User 62925 does not improve AUC. Reverting changes.
Training on augumented user 41550 48/50 current_auc = 0.567016317016317
User 41550 AUC after training: 0.5652680652680653
User 41550 does not improve AUC. Reverting changes.
Training on augumented user 99344 49/50 current_auc = 0.567016317016317
User 99344 AUC after training: 0.5658508158508159
User 99344 does not improve AUC. Reverting changes.
[2024-12-02 18:02:16.644658] start test user 56957 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:17.518597] start test user 56957 45/568 recall augumented users by random, augumented_users = [9939, 111558, 39812, 41798, 115386, 119672, 133294, 25486, 118604, 119485, 32135, 127439, 20826, 111354, 18486, 113595, 119575, 23607, 8985, 99294, 13495, 25186, 91281, 79355, 8895, 116715, 40292, 120350, 5487, 87134, 96285, 116680, 92699, 130052, 101632, 25440, 38964, 13918, 47697, 83975, 111130, 15046, 135138, 46140, 37422, 82870, 129778, 57816, 114528, 37618]
[2024-12-02 18:02:17.546856] user = 56957 Cloud 45/568
[2024-12-02 18:02:17.557303] user = 56957 Local 45/568
[2024-12-02 18:02:17.622884] user = 56957 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:20.566709] user = 56957 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5873015873015873
Training on augumented user 9939 0/50 current_auc = 0.5873015873015873
User 9939 AUC after training: 0.5873015873015873
User 9939 does not improve AUC. Reverting changes.
Training on augumented user 111558 1/50 current_auc = 0.5873015873015873
User 111558 AUC after training: 0.5873015873015873
User 111558 does not improve AUC. Reverting changes.
Training on augumented user 39812 2/50 current_auc = 0.5873015873015873
User 39812 AUC after training: 0.5873015873015873
User 39812 does not improve AUC. Reverting changes.
Training on augumented user 41798 3/50 current_auc = 0.5873015873015873
User 41798 AUC after training: 0.5873015873015873
User 41798 does not improve AUC. Reverting changes.
Training on augumented user 115386 4/50 current_auc = 0.5873015873015873
User 115386 AUC after training: 0.5873015873015873
User 115386 does not improve AUC. Reverting changes.
Training on augumented user 119672 5/50 current_auc = 0.5873015873015873
User 119672 AUC after training: 0.5873015873015873
User 119672 does not improve AUC. Reverting changes.
Training on augumented user 133294 6/50 current_auc = 0.5873015873015873
User 133294 AUC after training: 0.5873015873015873
User 133294 does not improve AUC. Reverting changes.
Training on augumented user 25486 7/50 current_auc = 0.5873015873015873
User 25486 AUC after training: 0.5873015873015873
User 25486 does not improve AUC. Reverting changes.
Training on augumented user 118604 8/50 current_auc = 0.5873015873015873
User 118604 AUC after training: 0.5873015873015873
User 118604 does not improve AUC. Reverting changes.
Training on augumented user 119485 9/50 current_auc = 0.5873015873015873
User 119485 AUC after training: 0.5873015873015873
User 119485 does not improve AUC. Reverting changes.
Training on augumented user 32135 10/50 current_auc = 0.5873015873015873
User 32135 AUC after training: 0.5873015873015873
User 32135 does not improve AUC. Reverting changes.
Training on augumented user 127439 11/50 current_auc = 0.5873015873015873
User 127439 AUC after training: 0.5873015873015873
User 127439 does not improve AUC. Reverting changes.
Training on augumented user 20826 12/50 current_auc = 0.5873015873015873
User 20826 AUC after training: 0.5873015873015873
User 20826 does not improve AUC. Reverting changes.
Training on augumented user 111354 13/50 current_auc = 0.5873015873015873
User 111354 AUC after training: 0.5873015873015873
User 111354 does not improve AUC. Reverting changes.
Training on augumented user 18486 14/50 current_auc = 0.5873015873015873
User 18486 AUC after training: 0.5873015873015873
User 18486 does not improve AUC. Reverting changes.
Training on augumented user 113595 15/50 current_auc = 0.5873015873015873
User 113595 AUC after training: 0.5873015873015873
User 113595 does not improve AUC. Reverting changes.
Training on augumented user 119575 16/50 current_auc = 0.5873015873015873
User 119575 AUC after training: 0.5873015873015873
User 119575 does not improve AUC. Reverting changes.
Training on augumented user 23607 17/50 current_auc = 0.5873015873015873
User 23607 AUC after training: 0.5873015873015873
User 23607 does not improve AUC. Reverting changes.
Training on augumented user 8985 18/50 current_auc = 0.5873015873015873
User 8985 AUC after training: 0.5873015873015873
User 8985 does not improve AUC. Reverting changes.
Training on augumented user 99294 19/50 current_auc = 0.5873015873015873
User 99294 AUC after training: 0.5873015873015873
User 99294 does not improve AUC. Reverting changes.
Training on augumented user 13495 20/50 current_auc = 0.5873015873015873
User 13495 AUC after training: 0.5873015873015873
User 13495 does not improve AUC. Reverting changes.
Training on augumented user 25186 21/50 current_auc = 0.5873015873015873
User 25186 AUC after training: 0.5873015873015873
User 25186 does not improve AUC. Reverting changes.
Training on augumented user 91281 22/50 current_auc = 0.5873015873015873
User 91281 AUC after training: 0.5873015873015873
User 91281 does not improve AUC. Reverting changes.
Training on augumented user 79355 23/50 current_auc = 0.5873015873015873
User 79355 AUC after training: 0.5873015873015873
User 79355 does not improve AUC. Reverting changes.
Training on augumented user 8895 24/50 current_auc = 0.5873015873015873
User 8895 AUC after training: 0.5873015873015873
User 8895 does not improve AUC. Reverting changes.
Training on augumented user 116715 25/50 current_auc = 0.5873015873015873
User 116715 AUC after training: 0.5873015873015873
User 116715 does not improve AUC. Reverting changes.
Training on augumented user 40292 26/50 current_auc = 0.5873015873015873
User 40292 AUC after training: 0.5873015873015873
User 40292 does not improve AUC. Reverting changes.
Training on augumented user 120350 27/50 current_auc = 0.5873015873015873
User 120350 AUC after training: 0.5952380952380952
User 120350 improves AUC. Keeping the model.
Training on augumented user 5487 28/50 current_auc = 0.5952380952380952
User 5487 AUC after training: 0.5873015873015873
User 5487 does not improve AUC. Reverting changes.
Training on augumented user 87134 29/50 current_auc = 0.5952380952380952
User 87134 AUC after training: 0.5952380952380952
User 87134 does not improve AUC. Reverting changes.
Training on augumented user 96285 30/50 current_auc = 0.5952380952380952
User 96285 AUC after training: 0.5873015873015873
User 96285 does not improve AUC. Reverting changes.
Training on augumented user 116680 31/50 current_auc = 0.5952380952380952
User 116680 AUC after training: 0.5873015873015873
User 116680 does not improve AUC. Reverting changes.
Training on augumented user 92699 32/50 current_auc = 0.5952380952380952
User 92699 AUC after training: 0.5873015873015873
User 92699 does not improve AUC. Reverting changes.
Training on augumented user 130052 33/50 current_auc = 0.5952380952380952
User 130052 AUC after training: 0.5873015873015873
User 130052 does not improve AUC. Reverting changes.
Training on augumented user 101632 34/50 current_auc = 0.5952380952380952
User 101632 AUC after training: 0.5952380952380952
User 101632 does not improve AUC. Reverting changes.
Training on augumented user 25440 35/50 current_auc = 0.5952380952380952
User 25440 AUC after training: 0.5873015873015873
User 25440 does not improve AUC. Reverting changes.
Training on augumented user 38964 36/50 current_auc = 0.5952380952380952
User 38964 AUC after training: 0.5873015873015873
User 38964 does not improve AUC. Reverting changes.
Training on augumented user 13918 37/50 current_auc = 0.5952380952380952
User 13918 AUC after training: 0.5952380952380952
User 13918 does not improve AUC. Reverting changes.
Training on augumented user 47697 38/50 current_auc = 0.5952380952380952
User 47697 AUC after training: 0.5873015873015873
User 47697 does not improve AUC. Reverting changes.
Training on augumented user 83975 39/50 current_auc = 0.5952380952380952
User 83975 AUC after training: 0.5873015873015873
User 83975 does not improve AUC. Reverting changes.
Training on augumented user 111130 40/50 current_auc = 0.5952380952380952
User 111130 AUC after training: 0.5952380952380952
User 111130 does not improve AUC. Reverting changes.
Training on augumented user 15046 41/50 current_auc = 0.5952380952380952
User 15046 AUC after training: 0.5873015873015873
User 15046 does not improve AUC. Reverting changes.
Training on augumented user 135138 42/50 current_auc = 0.5952380952380952
User 135138 AUC after training: 0.5873015873015873
User 135138 does not improve AUC. Reverting changes.
Training on augumented user 46140 43/50 current_auc = 0.5952380952380952
User 46140 AUC after training: 0.5873015873015873
User 46140 does not improve AUC. Reverting changes.
Training on augumented user 37422 44/50 current_auc = 0.5952380952380952
User 37422 AUC after training: 0.5873015873015873
User 37422 does not improve AUC. Reverting changes.
Training on augumented user 82870 45/50 current_auc = 0.5952380952380952
User 82870 AUC after training: 0.5873015873015873
User 82870 does not improve AUC. Reverting changes.
Training on augumented user 129778 46/50 current_auc = 0.5952380952380952
User 129778 AUC after training: 0.5873015873015873
User 129778 does not improve AUC. Reverting changes.
Training on augumented user 57816 47/50 current_auc = 0.5952380952380952
User 57816 AUC after training: 0.5952380952380952
User 57816 does not improve AUC. Reverting changes.
Training on augumented user 114528 48/50 current_auc = 0.5952380952380952
User 114528 AUC after training: 0.5873015873015873
User 114528 does not improve AUC. Reverting changes.
Training on augumented user 37618 49/50 current_auc = 0.5952380952380952
User 37618 AUC after training: 0.5952380952380952
User 37618 does not improve AUC. Reverting changes.
[2024-12-02 18:02:52.291469] start test user 56959 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:53.183916] start test user 56959 46/568 recall augumented users by random, augumented_users = [60935, 129426, 132485, 4277, 52662, 73220, 78885, 68683, 130534, 28096, 42823, 6368, 70492, 94446, 114473, 104048, 22380, 121388, 119390, 8723, 120249, 80114, 41960, 135742, 75407, 16734, 39919, 105374, 33218, 5977, 2873, 46341, 101792, 94426, 78372, 98030, 93521, 9709, 131311, 44079, 136429, 29120, 73287, 85774, 127143, 46276, 92125, 1329, 8371, 51679]
[2024-12-02 18:02:53.197638] user = 56959 Cloud 46/568
[2024-12-02 18:02:53.218737] user = 56959 Local 46/568
[2024-12-02 18:02:53.237475] user = 56959 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:55.903135] user = 56959 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333333
Training on augumented user 60935 0/50 current_auc = 0.5833333333333333
User 60935 AUC after training: 0.5833333333333333
User 60935 does not improve AUC. Reverting changes.
Training on augumented user 129426 1/50 current_auc = 0.5833333333333333
User 129426 AUC after training: 0.5833333333333333
User 129426 does not improve AUC. Reverting changes.
Training on augumented user 132485 2/50 current_auc = 0.5833333333333333
User 132485 AUC after training: 0.5833333333333333
User 132485 does not improve AUC. Reverting changes.
Training on augumented user 4277 3/50 current_auc = 0.5833333333333333
User 4277 AUC after training: 0.5833333333333333
User 4277 does not improve AUC. Reverting changes.
Training on augumented user 52662 4/50 current_auc = 0.5833333333333333
User 52662 AUC after training: 0.5833333333333333
User 52662 does not improve AUC. Reverting changes.
Training on augumented user 73220 5/50 current_auc = 0.5833333333333333
User 73220 AUC after training: 0.5833333333333333
User 73220 does not improve AUC. Reverting changes.
Training on augumented user 78885 6/50 current_auc = 0.5833333333333333
User 78885 AUC after training: 0.5833333333333333
User 78885 does not improve AUC. Reverting changes.
Training on augumented user 68683 7/50 current_auc = 0.5833333333333333
User 68683 AUC after training: 0.5833333333333333
User 68683 does not improve AUC. Reverting changes.
Training on augumented user 130534 8/50 current_auc = 0.5833333333333333
User 130534 AUC after training: 0.5833333333333333
User 130534 does not improve AUC. Reverting changes.
Training on augumented user 28096 9/50 current_auc = 0.5833333333333333
User 28096 AUC after training: 0.5833333333333333
User 28096 does not improve AUC. Reverting changes.
Training on augumented user 42823 10/50 current_auc = 0.5833333333333333
User 42823 AUC after training: 0.5833333333333333
User 42823 does not improve AUC. Reverting changes.
Training on augumented user 6368 11/50 current_auc = 0.5833333333333333
User 6368 AUC after training: 0.5833333333333333
User 6368 does not improve AUC. Reverting changes.
Training on augumented user 70492 12/50 current_auc = 0.5833333333333333
User 70492 AUC after training: 0.5833333333333333
User 70492 does not improve AUC. Reverting changes.
Training on augumented user 94446 13/50 current_auc = 0.5833333333333333
User 94446 AUC after training: 0.5833333333333333
User 94446 does not improve AUC. Reverting changes.
Training on augumented user 114473 14/50 current_auc = 0.5833333333333333
User 114473 AUC after training: 0.5833333333333333
User 114473 does not improve AUC. Reverting changes.
Training on augumented user 104048 15/50 current_auc = 0.5833333333333333
User 104048 AUC after training: 0.5833333333333333
User 104048 does not improve AUC. Reverting changes.
Training on augumented user 22380 16/50 current_auc = 0.5833333333333333
User 22380 AUC after training: 0.5833333333333333
User 22380 does not improve AUC. Reverting changes.
Training on augumented user 121388 17/50 current_auc = 0.5833333333333333
User 121388 AUC after training: 0.5833333333333333
User 121388 does not improve AUC. Reverting changes.
Training on augumented user 119390 18/50 current_auc = 0.5833333333333333
User 119390 AUC after training: 0.5833333333333333
User 119390 does not improve AUC. Reverting changes.
Training on augumented user 8723 19/50 current_auc = 0.5833333333333333
User 8723 AUC after training: 0.5833333333333333
User 8723 does not improve AUC. Reverting changes.
Training on augumented user 120249 20/50 current_auc = 0.5833333333333333
User 120249 AUC after training: 0.5833333333333333
User 120249 does not improve AUC. Reverting changes.
Training on augumented user 80114 21/50 current_auc = 0.5833333333333333
User 80114 AUC after training: 0.5833333333333333
User 80114 does not improve AUC. Reverting changes.
Training on augumented user 41960 22/50 current_auc = 0.5833333333333333
User 41960 AUC after training: 0.5833333333333333
User 41960 does not improve AUC. Reverting changes.
Training on augumented user 135742 23/50 current_auc = 0.5833333333333333
User 135742 AUC after training: 0.5833333333333333
User 135742 does not improve AUC. Reverting changes.
Training on augumented user 75407 24/50 current_auc = 0.5833333333333333
User 75407 AUC after training: 0.5833333333333333
User 75407 does not improve AUC. Reverting changes.
Training on augumented user 16734 25/50 current_auc = 0.5833333333333333
User 16734 AUC after training: 0.5833333333333333
User 16734 does not improve AUC. Reverting changes.
Training on augumented user 39919 26/50 current_auc = 0.5833333333333333
User 39919 AUC after training: 0.5833333333333333
User 39919 does not improve AUC. Reverting changes.
Training on augumented user 105374 27/50 current_auc = 0.5833333333333333
User 105374 AUC after training: 0.5833333333333333
User 105374 does not improve AUC. Reverting changes.
Training on augumented user 33218 28/50 current_auc = 0.5833333333333333
User 33218 AUC after training: 0.5833333333333333
User 33218 does not improve AUC. Reverting changes.
Training on augumented user 5977 29/50 current_auc = 0.5833333333333333
User 5977 AUC after training: 0.5833333333333333
User 5977 does not improve AUC. Reverting changes.
Training on augumented user 2873 30/50 current_auc = 0.5833333333333333
User 2873 AUC after training: 0.5833333333333333
User 2873 does not improve AUC. Reverting changes.
Training on augumented user 46341 31/50 current_auc = 0.5833333333333333
User 46341 AUC after training: 0.5833333333333333
User 46341 does not improve AUC. Reverting changes.
Training on augumented user 101792 32/50 current_auc = 0.5833333333333333
User 101792 AUC after training: 0.5833333333333333
User 101792 does not improve AUC. Reverting changes.
Training on augumented user 94426 33/50 current_auc = 0.5833333333333333
User 94426 AUC after training: 0.5833333333333333
User 94426 does not improve AUC. Reverting changes.
Training on augumented user 78372 34/50 current_auc = 0.5833333333333333
User 78372 AUC after training: 0.5833333333333333
User 78372 does not improve AUC. Reverting changes.
Training on augumented user 98030 35/50 current_auc = 0.5833333333333333
User 98030 AUC after training: 0.5833333333333333
User 98030 does not improve AUC. Reverting changes.
Training on augumented user 93521 36/50 current_auc = 0.5833333333333333
User 93521 AUC after training: 0.5833333333333333
User 93521 does not improve AUC. Reverting changes.
Training on augumented user 9709 37/50 current_auc = 0.5833333333333333
User 9709 AUC after training: 0.5833333333333333
User 9709 does not improve AUC. Reverting changes.
Training on augumented user 131311 38/50 current_auc = 0.5833333333333333
User 131311 AUC after training: 0.5833333333333333
User 131311 does not improve AUC. Reverting changes.
Training on augumented user 44079 39/50 current_auc = 0.5833333333333333
User 44079 AUC after training: 0.5833333333333333
User 44079 does not improve AUC. Reverting changes.
Training on augumented user 136429 40/50 current_auc = 0.5833333333333333
User 136429 AUC after training: 0.5833333333333333
User 136429 does not improve AUC. Reverting changes.
Training on augumented user 29120 41/50 current_auc = 0.5833333333333333
User 29120 AUC after training: 0.5833333333333333
User 29120 does not improve AUC. Reverting changes.
Training on augumented user 73287 42/50 current_auc = 0.5833333333333333
User 73287 AUC after training: 0.5833333333333333
User 73287 does not improve AUC. Reverting changes.
Training on augumented user 85774 43/50 current_auc = 0.5833333333333333
User 85774 AUC after training: 0.5833333333333333
User 85774 does not improve AUC. Reverting changes.
Training on augumented user 127143 44/50 current_auc = 0.5833333333333333
User 127143 AUC after training: 0.5833333333333333
User 127143 does not improve AUC. Reverting changes.
Training on augumented user 46276 45/50 current_auc = 0.5833333333333333
User 46276 AUC after training: 0.5833333333333333
User 46276 does not improve AUC. Reverting changes.
Training on augumented user 92125 46/50 current_auc = 0.5833333333333333
User 92125 AUC after training: 0.5833333333333333
User 92125 does not improve AUC. Reverting changes.
Training on augumented user 1329 47/50 current_auc = 0.5833333333333333
User 1329 AUC after training: 0.5833333333333333
User 1329 does not improve AUC. Reverting changes.
Training on augumented user 8371 48/50 current_auc = 0.5833333333333333
User 8371 AUC after training: 0.5833333333333333
User 8371 does not improve AUC. Reverting changes.
Training on augumented user 51679 49/50 current_auc = 0.5833333333333333
User 51679 AUC after training: 0.5833333333333333
User 51679 does not improve AUC. Reverting changes.
[2024-12-02 18:03:26.129682] start test user 56976 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:26.683129] start test user 56976 47/568 recall augumented users by random, augumented_users = [71125, 25086, 121446, 51659, 39054, 57917, 16579, 90844, 108776, 93687, 17270, 31713, 97307, 30127, 35171, 17558, 99235, 80310, 70332, 78960, 101340, 29167, 9926, 120624, 7000, 65907, 105997, 30288, 37495, 52940, 1058, 41966, 50235, 99353, 40108, 44536, 8114, 34545, 130275, 19292, 135678, 91184, 114861, 81236, 51440, 1007, 60506, 121827, 78767, 125721]
[2024-12-02 18:03:26.698350] user = 56976 Cloud 47/568
[2024-12-02 18:03:26.709531] user = 56976 Local 47/568
[2024-12-02 18:03:26.744053] user = 56976 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:28.912701] user = 56976 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4761904761904762
Training on augumented user 71125 0/50 current_auc = 0.4761904761904762
User 71125 AUC after training: 0.4761904761904762
User 71125 does not improve AUC. Reverting changes.
Training on augumented user 25086 1/50 current_auc = 0.4761904761904762
User 25086 AUC after training: 0.4761904761904762
User 25086 does not improve AUC. Reverting changes.
Training on augumented user 121446 2/50 current_auc = 0.4761904761904762
User 121446 AUC after training: 0.4761904761904762
User 121446 does not improve AUC. Reverting changes.
Training on augumented user 51659 3/50 current_auc = 0.4761904761904762
User 51659 AUC after training: 0.4761904761904762
User 51659 does not improve AUC. Reverting changes.
Training on augumented user 39054 4/50 current_auc = 0.4761904761904762
User 39054 AUC after training: 0.4761904761904762
User 39054 does not improve AUC. Reverting changes.
Training on augumented user 57917 5/50 current_auc = 0.4761904761904762
User 57917 AUC after training: 0.4761904761904762
User 57917 does not improve AUC. Reverting changes.
Training on augumented user 16579 6/50 current_auc = 0.4761904761904762
User 16579 AUC after training: 0.4761904761904762
User 16579 does not improve AUC. Reverting changes.
Training on augumented user 90844 7/50 current_auc = 0.4761904761904762
User 90844 AUC after training: 0.4761904761904762
User 90844 does not improve AUC. Reverting changes.
Training on augumented user 108776 8/50 current_auc = 0.4761904761904762
User 108776 AUC after training: 0.4761904761904762
User 108776 does not improve AUC. Reverting changes.
Training on augumented user 93687 9/50 current_auc = 0.4761904761904762
User 93687 AUC after training: 0.4761904761904762
User 93687 does not improve AUC. Reverting changes.
Training on augumented user 17270 10/50 current_auc = 0.4761904761904762
User 17270 AUC after training: 0.4761904761904762
User 17270 does not improve AUC. Reverting changes.
Training on augumented user 31713 11/50 current_auc = 0.4761904761904762
User 31713 AUC after training: 0.4761904761904762
User 31713 does not improve AUC. Reverting changes.
Training on augumented user 97307 12/50 current_auc = 0.4761904761904762
User 97307 AUC after training: 0.4761904761904762
User 97307 does not improve AUC. Reverting changes.
Training on augumented user 30127 13/50 current_auc = 0.4761904761904762
User 30127 AUC after training: 0.4761904761904762
User 30127 does not improve AUC. Reverting changes.
Training on augumented user 35171 14/50 current_auc = 0.4761904761904762
User 35171 AUC after training: 0.4761904761904762
User 35171 does not improve AUC. Reverting changes.
Training on augumented user 17558 15/50 current_auc = 0.4761904761904762
User 17558 AUC after training: 0.4761904761904762
User 17558 does not improve AUC. Reverting changes.
Training on augumented user 99235 16/50 current_auc = 0.4761904761904762
User 99235 AUC after training: 0.4761904761904762
User 99235 does not improve AUC. Reverting changes.
Training on augumented user 80310 17/50 current_auc = 0.4761904761904762
User 80310 AUC after training: 0.4761904761904762
User 80310 does not improve AUC. Reverting changes.
Training on augumented user 70332 18/50 current_auc = 0.4761904761904762
User 70332 AUC after training: 0.4761904761904762
User 70332 does not improve AUC. Reverting changes.
Training on augumented user 78960 19/50 current_auc = 0.4761904761904762
User 78960 AUC after training: 0.4761904761904762
User 78960 does not improve AUC. Reverting changes.
Training on augumented user 101340 20/50 current_auc = 0.4761904761904762
User 101340 AUC after training: 0.4761904761904762
User 101340 does not improve AUC. Reverting changes.
Training on augumented user 29167 21/50 current_auc = 0.4761904761904762
User 29167 AUC after training: 0.4761904761904762
User 29167 does not improve AUC. Reverting changes.
Training on augumented user 9926 22/50 current_auc = 0.4761904761904762
User 9926 AUC after training: 0.4761904761904762
User 9926 does not improve AUC. Reverting changes.
Training on augumented user 120624 23/50 current_auc = 0.4761904761904762
User 120624 AUC after training: 0.4761904761904762
User 120624 does not improve AUC. Reverting changes.
Training on augumented user 7000 24/50 current_auc = 0.4761904761904762
User 7000 AUC after training: 0.4761904761904762
User 7000 does not improve AUC. Reverting changes.
Training on augumented user 65907 25/50 current_auc = 0.4761904761904762
User 65907 AUC after training: 0.4761904761904762
User 65907 does not improve AUC. Reverting changes.
Training on augumented user 105997 26/50 current_auc = 0.4761904761904762
User 105997 AUC after training: 0.4761904761904762
User 105997 does not improve AUC. Reverting changes.
Training on augumented user 30288 27/50 current_auc = 0.4761904761904762
User 30288 AUC after training: 0.4761904761904762
User 30288 does not improve AUC. Reverting changes.
Training on augumented user 37495 28/50 current_auc = 0.4761904761904762
User 37495 AUC after training: 0.4761904761904762
User 37495 does not improve AUC. Reverting changes.
Training on augumented user 52940 29/50 current_auc = 0.4761904761904762
User 52940 AUC after training: 0.4761904761904762
User 52940 does not improve AUC. Reverting changes.
Training on augumented user 1058 30/50 current_auc = 0.4761904761904762
User 1058 AUC after training: 0.5
User 1058 improves AUC. Keeping the model.
Training on augumented user 41966 31/50 current_auc = 0.5
User 41966 AUC after training: 0.5
User 41966 does not improve AUC. Reverting changes.
Training on augumented user 50235 32/50 current_auc = 0.5
User 50235 AUC after training: 0.4761904761904762
User 50235 does not improve AUC. Reverting changes.
Training on augumented user 99353 33/50 current_auc = 0.5
User 99353 AUC after training: 0.5
User 99353 does not improve AUC. Reverting changes.
Training on augumented user 40108 34/50 current_auc = 0.5
User 40108 AUC after training: 0.4761904761904762
User 40108 does not improve AUC. Reverting changes.
Training on augumented user 44536 35/50 current_auc = 0.5
User 44536 AUC after training: 0.4761904761904762
User 44536 does not improve AUC. Reverting changes.
Training on augumented user 8114 36/50 current_auc = 0.5
User 8114 AUC after training: 0.4761904761904762
User 8114 does not improve AUC. Reverting changes.
Training on augumented user 34545 37/50 current_auc = 0.5
User 34545 AUC after training: 0.5
User 34545 does not improve AUC. Reverting changes.
Training on augumented user 130275 38/50 current_auc = 0.5
User 130275 AUC after training: 0.4761904761904762
User 130275 does not improve AUC. Reverting changes.
Training on augumented user 19292 39/50 current_auc = 0.5
User 19292 AUC after training: 0.4761904761904762
User 19292 does not improve AUC. Reverting changes.
Training on augumented user 135678 40/50 current_auc = 0.5
User 135678 AUC after training: 0.5
User 135678 does not improve AUC. Reverting changes.
Training on augumented user 91184 41/50 current_auc = 0.5
User 91184 AUC after training: 0.5
User 91184 does not improve AUC. Reverting changes.
Training on augumented user 114861 42/50 current_auc = 0.5
User 114861 AUC after training: 0.5
User 114861 does not improve AUC. Reverting changes.
Training on augumented user 81236 43/50 current_auc = 0.5
User 81236 AUC after training: 0.4761904761904762
User 81236 does not improve AUC. Reverting changes.
Training on augumented user 51440 44/50 current_auc = 0.5
User 51440 AUC after training: 0.4761904761904762
User 51440 does not improve AUC. Reverting changes.
Training on augumented user 1007 45/50 current_auc = 0.5
User 1007 AUC after training: 0.4761904761904762
User 1007 does not improve AUC. Reverting changes.
Training on augumented user 60506 46/50 current_auc = 0.5
User 60506 AUC after training: 0.4761904761904762
User 60506 does not improve AUC. Reverting changes.
Training on augumented user 121827 47/50 current_auc = 0.5
User 121827 AUC after training: 0.5
User 121827 does not improve AUC. Reverting changes.
Training on augumented user 78767 48/50 current_auc = 0.5
User 78767 AUC after training: 0.4761904761904762
User 78767 does not improve AUC. Reverting changes.
Training on augumented user 125721 49/50 current_auc = 0.5
User 125721 AUC after training: 0.5
User 125721 does not improve AUC. Reverting changes.
[2024-12-02 18:04:02.403210] start test user 56978 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:03.049328] start test user 56978 48/568 recall augumented users by random, augumented_users = [62139, 21346, 45263, 13531, 76947, 54314, 70863, 124944, 45171, 46084, 87200, 107350, 98333, 123440, 21619, 48877, 51350, 41011, 87872, 36255, 126257, 115747, 133593, 133287, 42699, 20368, 123779, 94388, 110888, 131158, 85659, 114511, 88948, 127005, 77520, 95537, 7305, 15382, 108071, 11330, 98898, 25226, 106244, 18246, 43405, 111747, 67934, 27463, 30397, 104342]
[2024-12-02 18:04:03.065502] user = 56978 Cloud 48/568
[2024-12-02 18:04:03.089673] user = 56978 Local 48/568
[2024-12-02 18:04:03.315349] user = 56978 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:05.201802] user = 56978 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7573333333333334
Training on augumented user 62139 0/50 current_auc = 0.7573333333333334
User 62139 AUC after training: 0.7573333333333334
User 62139 does not improve AUC. Reverting changes.
Training on augumented user 21346 1/50 current_auc = 0.7573333333333334
User 21346 AUC after training: 0.7626666666666667
User 21346 improves AUC. Keeping the model.
Training on augumented user 45263 2/50 current_auc = 0.7626666666666667
User 45263 AUC after training: 0.7613333333333334
User 45263 does not improve AUC. Reverting changes.
Training on augumented user 13531 3/50 current_auc = 0.7626666666666667
User 13531 AUC after training: 0.7653333333333333
User 13531 improves AUC. Keeping the model.
Training on augumented user 76947 4/50 current_auc = 0.7653333333333333
User 76947 AUC after training: 0.7733333333333334
User 76947 improves AUC. Keeping the model.
Training on augumented user 54314 5/50 current_auc = 0.7733333333333334
User 54314 AUC after training: 0.7666666666666667
User 54314 does not improve AUC. Reverting changes.
Training on augumented user 70863 6/50 current_auc = 0.7733333333333334
User 70863 AUC after training: 0.7706666666666667
User 70863 does not improve AUC. Reverting changes.
Training on augumented user 124944 7/50 current_auc = 0.7733333333333334
User 124944 AUC after training: 0.776
User 124944 improves AUC. Keeping the model.
Training on augumented user 45171 8/50 current_auc = 0.776
User 45171 AUC after training: 0.7733333333333333
User 45171 does not improve AUC. Reverting changes.
Training on augumented user 46084 9/50 current_auc = 0.776
User 46084 AUC after training: 0.776
User 46084 does not improve AUC. Reverting changes.
Training on augumented user 87200 10/50 current_auc = 0.776
User 87200 AUC after training: 0.772
User 87200 does not improve AUC. Reverting changes.
Training on augumented user 107350 11/50 current_auc = 0.776
User 107350 AUC after training: 0.7746666666666667
User 107350 does not improve AUC. Reverting changes.
Training on augumented user 98333 12/50 current_auc = 0.776
User 98333 AUC after training: 0.7746666666666667
User 98333 does not improve AUC. Reverting changes.
Training on augumented user 123440 13/50 current_auc = 0.776
User 123440 AUC after training: 0.7746666666666666
User 123440 does not improve AUC. Reverting changes.
Training on augumented user 21619 14/50 current_auc = 0.776
User 21619 AUC after training: 0.772
User 21619 does not improve AUC. Reverting changes.
Training on augumented user 48877 15/50 current_auc = 0.776
User 48877 AUC after training: 0.776
User 48877 does not improve AUC. Reverting changes.
Training on augumented user 51350 16/50 current_auc = 0.776
User 51350 AUC after training: 0.7746666666666666
User 51350 does not improve AUC. Reverting changes.
Training on augumented user 41011 17/50 current_auc = 0.776
User 41011 AUC after training: 0.776
User 41011 does not improve AUC. Reverting changes.
Training on augumented user 87872 18/50 current_auc = 0.776
User 87872 AUC after training: 0.7773333333333334
User 87872 improves AUC. Keeping the model.
Training on augumented user 36255 19/50 current_auc = 0.7773333333333334
User 36255 AUC after training: 0.7613333333333333
User 36255 does not improve AUC. Reverting changes.
Training on augumented user 126257 20/50 current_auc = 0.7773333333333334
User 126257 AUC after training: 0.776
User 126257 does not improve AUC. Reverting changes.
Training on augumented user 115747 21/50 current_auc = 0.7773333333333334
User 115747 AUC after training: 0.7746666666666667
User 115747 does not improve AUC. Reverting changes.
Training on augumented user 133593 22/50 current_auc = 0.7773333333333334
User 133593 AUC after training: 0.7773333333333334
User 133593 does not improve AUC. Reverting changes.
Training on augumented user 133287 23/50 current_auc = 0.7773333333333334
User 133287 AUC after training: 0.7733333333333334
User 133287 does not improve AUC. Reverting changes.
Training on augumented user 42699 24/50 current_auc = 0.7773333333333334
User 42699 AUC after training: 0.776
User 42699 does not improve AUC. Reverting changes.
Training on augumented user 20368 25/50 current_auc = 0.7773333333333334
User 20368 AUC after training: 0.776
User 20368 does not improve AUC. Reverting changes.
Training on augumented user 123779 26/50 current_auc = 0.7773333333333334
User 123779 AUC after training: 0.7740000000000001
User 123779 does not improve AUC. Reverting changes.
Training on augumented user 94388 27/50 current_auc = 0.7773333333333334
User 94388 AUC after training: 0.7773333333333334
User 94388 does not improve AUC. Reverting changes.
Training on augumented user 110888 28/50 current_auc = 0.7773333333333334
User 110888 AUC after training: 0.7786666666666667
User 110888 improves AUC. Keeping the model.
Training on augumented user 131158 29/50 current_auc = 0.7786666666666667
User 131158 AUC after training: 0.7773333333333334
User 131158 does not improve AUC. Reverting changes.
Training on augumented user 85659 30/50 current_auc = 0.7786666666666667
User 85659 AUC after training: 0.7773333333333334
User 85659 does not improve AUC. Reverting changes.
Training on augumented user 114511 31/50 current_auc = 0.7786666666666667
User 114511 AUC after training: 0.7773333333333334
User 114511 does not improve AUC. Reverting changes.
Training on augumented user 88948 32/50 current_auc = 0.7786666666666667
User 88948 AUC after training: 0.7773333333333334
User 88948 does not improve AUC. Reverting changes.
Training on augumented user 127005 33/50 current_auc = 0.7786666666666667
User 127005 AUC after training: 0.774
User 127005 does not improve AUC. Reverting changes.
Training on augumented user 77520 34/50 current_auc = 0.7786666666666667
User 77520 AUC after training: 0.7746666666666667
User 77520 does not improve AUC. Reverting changes.
Training on augumented user 95537 35/50 current_auc = 0.7786666666666667
User 95537 AUC after training: 0.776
User 95537 does not improve AUC. Reverting changes.
Training on augumented user 7305 36/50 current_auc = 0.7786666666666667
User 7305 AUC after training: 0.7773333333333334
User 7305 does not improve AUC. Reverting changes.
Training on augumented user 15382 37/50 current_auc = 0.7786666666666667
User 15382 AUC after training: 0.7786666666666667
User 15382 does not improve AUC. Reverting changes.
Training on augumented user 108071 38/50 current_auc = 0.7786666666666667
User 108071 AUC after training: 0.7773333333333334
User 108071 does not improve AUC. Reverting changes.
Training on augumented user 11330 39/50 current_auc = 0.7786666666666667
User 11330 AUC after training: 0.7786666666666667
User 11330 does not improve AUC. Reverting changes.
Training on augumented user 98898 40/50 current_auc = 0.7786666666666667
User 98898 AUC after training: 0.7753333333333333
User 98898 does not improve AUC. Reverting changes.
Training on augumented user 25226 41/50 current_auc = 0.7786666666666667
User 25226 AUC after training: 0.776
User 25226 does not improve AUC. Reverting changes.
Training on augumented user 106244 42/50 current_auc = 0.7786666666666667
User 106244 AUC after training: 0.778
User 106244 does not improve AUC. Reverting changes.
Training on augumented user 18246 43/50 current_auc = 0.7786666666666667
User 18246 AUC after training: 0.778
User 18246 does not improve AUC. Reverting changes.
Training on augumented user 43405 44/50 current_auc = 0.7786666666666667
User 43405 AUC after training: 0.776
User 43405 does not improve AUC. Reverting changes.
Training on augumented user 111747 45/50 current_auc = 0.7786666666666667
User 111747 AUC after training: 0.7773333333333334
User 111747 does not improve AUC. Reverting changes.
Training on augumented user 67934 46/50 current_auc = 0.7786666666666667
User 67934 AUC after training: 0.7746666666666667
User 67934 does not improve AUC. Reverting changes.
Training on augumented user 27463 47/50 current_auc = 0.7786666666666667
User 27463 AUC after training: 0.7713333333333334
User 27463 does not improve AUC. Reverting changes.
Training on augumented user 30397 48/50 current_auc = 0.7786666666666667
User 30397 AUC after training: 0.776
User 30397 does not improve AUC. Reverting changes.
Training on augumented user 104342 49/50 current_auc = 0.7786666666666667
User 104342 AUC after training: 0.7773333333333334
User 104342 does not improve AUC. Reverting changes.
[2024-12-02 18:04:35.987873] start test user 57002 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:36.784458] start test user 57002 49/568 recall augumented users by random, augumented_users = [38351, 80473, 13091, 24865, 123622, 207, 26235, 63275, 124505, 82246, 34621, 125284, 92862, 59022, 113820, 45151, 92271, 87630, 30588, 134955, 11812, 26854, 57522, 44582, 69775, 35900, 80653, 4621, 117361, 114850, 8748, 129393, 8454, 34915, 45073, 9829, 106936, 78989, 9675, 90923, 110419, 23363, 124035, 93507, 21948, 69703, 89006, 19695, 89673, 138000]
[2024-12-02 18:04:36.799842] user = 57002 Cloud 49/568
[2024-12-02 18:04:36.819596] user = 57002 Local 49/568
[2024-12-02 18:04:36.882820] user = 57002 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:39.441841] user = 57002 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4
Training on augumented user 38351 0/50 current_auc = 0.4
User 38351 AUC after training: 0.4
User 38351 does not improve AUC. Reverting changes.
Training on augumented user 80473 1/50 current_auc = 0.4
User 80473 AUC after training: 0.4
User 80473 does not improve AUC. Reverting changes.
Training on augumented user 13091 2/50 current_auc = 0.4
User 13091 AUC after training: 0.4
User 13091 does not improve AUC. Reverting changes.
Training on augumented user 24865 3/50 current_auc = 0.4
User 24865 AUC after training: 0.4
User 24865 does not improve AUC. Reverting changes.
Training on augumented user 123622 4/50 current_auc = 0.4
User 123622 AUC after training: 0.4
User 123622 does not improve AUC. Reverting changes.
Training on augumented user 207 5/50 current_auc = 0.4
User 207 AUC after training: 0.4
User 207 does not improve AUC. Reverting changes.
Training on augumented user 26235 6/50 current_auc = 0.4
User 26235 AUC after training: 0.4
User 26235 does not improve AUC. Reverting changes.
Training on augumented user 63275 7/50 current_auc = 0.4
User 63275 AUC after training: 0.6
User 63275 improves AUC. Keeping the model.
Training on augumented user 124505 8/50 current_auc = 0.6
User 124505 AUC after training: 0.6
User 124505 does not improve AUC. Reverting changes.
Training on augumented user 82246 9/50 current_auc = 0.6
User 82246 AUC after training: 0.6
User 82246 does not improve AUC. Reverting changes.
Training on augumented user 34621 10/50 current_auc = 0.6
User 34621 AUC after training: 0.6
User 34621 does not improve AUC. Reverting changes.
Training on augumented user 125284 11/50 current_auc = 0.6
User 125284 AUC after training: 0.6
User 125284 does not improve AUC. Reverting changes.
Training on augumented user 92862 12/50 current_auc = 0.6
User 92862 AUC after training: 0.6
User 92862 does not improve AUC. Reverting changes.
Training on augumented user 59022 13/50 current_auc = 0.6
User 59022 AUC after training: 0.4
User 59022 does not improve AUC. Reverting changes.
Training on augumented user 113820 14/50 current_auc = 0.6
User 113820 AUC after training: 0.6
User 113820 does not improve AUC. Reverting changes.
Training on augumented user 45151 15/50 current_auc = 0.6
User 45151 AUC after training: 0.6
User 45151 does not improve AUC. Reverting changes.
Training on augumented user 92271 16/50 current_auc = 0.6
User 92271 AUC after training: 0.4
User 92271 does not improve AUC. Reverting changes.
Training on augumented user 87630 17/50 current_auc = 0.6
User 87630 AUC after training: 0.6
User 87630 does not improve AUC. Reverting changes.
Training on augumented user 30588 18/50 current_auc = 0.6
User 30588 AUC after training: 0.6
User 30588 does not improve AUC. Reverting changes.
Training on augumented user 134955 19/50 current_auc = 0.6
User 134955 AUC after training: 0.6
User 134955 does not improve AUC. Reverting changes.
Training on augumented user 11812 20/50 current_auc = 0.6
User 11812 AUC after training: 0.6
User 11812 does not improve AUC. Reverting changes.
Training on augumented user 26854 21/50 current_auc = 0.6
User 26854 AUC after training: 0.6
User 26854 does not improve AUC. Reverting changes.
Training on augumented user 57522 22/50 current_auc = 0.6
User 57522 AUC after training: 0.6
User 57522 does not improve AUC. Reverting changes.
Training on augumented user 44582 23/50 current_auc = 0.6
User 44582 AUC after training: 0.6
User 44582 does not improve AUC. Reverting changes.
Training on augumented user 69775 24/50 current_auc = 0.6
User 69775 AUC after training: 0.6
User 69775 does not improve AUC. Reverting changes.
Training on augumented user 35900 25/50 current_auc = 0.6
User 35900 AUC after training: 0.6
User 35900 does not improve AUC. Reverting changes.
Training on augumented user 80653 26/50 current_auc = 0.6
User 80653 AUC after training: 0.6
User 80653 does not improve AUC. Reverting changes.
Training on augumented user 4621 27/50 current_auc = 0.6
User 4621 AUC after training: 0.6
User 4621 does not improve AUC. Reverting changes.
Training on augumented user 117361 28/50 current_auc = 0.6
User 117361 AUC after training: 0.6
User 117361 does not improve AUC. Reverting changes.
Training on augumented user 114850 29/50 current_auc = 0.6
User 114850 AUC after training: 0.6
User 114850 does not improve AUC. Reverting changes.
Training on augumented user 8748 30/50 current_auc = 0.6
User 8748 AUC after training: 0.6
User 8748 does not improve AUC. Reverting changes.
Training on augumented user 129393 31/50 current_auc = 0.6
User 129393 AUC after training: 0.4
User 129393 does not improve AUC. Reverting changes.
Training on augumented user 8454 32/50 current_auc = 0.6
User 8454 AUC after training: 0.6
User 8454 does not improve AUC. Reverting changes.
Training on augumented user 34915 33/50 current_auc = 0.6
User 34915 AUC after training: 0.6
User 34915 does not improve AUC. Reverting changes.
Training on augumented user 45073 34/50 current_auc = 0.6
User 45073 AUC after training: 0.6
User 45073 does not improve AUC. Reverting changes.
Training on augumented user 9829 35/50 current_auc = 0.6
User 9829 AUC after training: 0.6
User 9829 does not improve AUC. Reverting changes.
Training on augumented user 106936 36/50 current_auc = 0.6
User 106936 AUC after training: 0.6
User 106936 does not improve AUC. Reverting changes.
Training on augumented user 78989 37/50 current_auc = 0.6
User 78989 AUC after training: 0.6
User 78989 does not improve AUC. Reverting changes.
Training on augumented user 9675 38/50 current_auc = 0.6
User 9675 AUC after training: 0.6
User 9675 does not improve AUC. Reverting changes.
Training on augumented user 90923 39/50 current_auc = 0.6
User 90923 AUC after training: 0.6
User 90923 does not improve AUC. Reverting changes.
Training on augumented user 110419 40/50 current_auc = 0.6
User 110419 AUC after training: 0.4
User 110419 does not improve AUC. Reverting changes.
Training on augumented user 23363 41/50 current_auc = 0.6
User 23363 AUC after training: 0.6
User 23363 does not improve AUC. Reverting changes.
Training on augumented user 124035 42/50 current_auc = 0.6
User 124035 AUC after training: 0.6
User 124035 does not improve AUC. Reverting changes.
Training on augumented user 93507 43/50 current_auc = 0.6
User 93507 AUC after training: 0.6
User 93507 does not improve AUC. Reverting changes.
Training on augumented user 21948 44/50 current_auc = 0.6
User 21948 AUC after training: 0.6
User 21948 does not improve AUC. Reverting changes.
Training on augumented user 69703 45/50 current_auc = 0.6
User 69703 AUC after training: 0.6
User 69703 does not improve AUC. Reverting changes.
Training on augumented user 89006 46/50 current_auc = 0.6
User 89006 AUC after training: 0.4
User 89006 does not improve AUC. Reverting changes.
Training on augumented user 19695 47/50 current_auc = 0.6
User 19695 AUC after training: 0.6
User 19695 does not improve AUC. Reverting changes.
Training on augumented user 89673 48/50 current_auc = 0.6
User 89673 AUC after training: 0.6
User 89673 does not improve AUC. Reverting changes.
Training on augumented user 138000 49/50 current_auc = 0.6
User 138000 AUC after training: 0.6
User 138000 does not improve AUC. Reverting changes.
[2024-12-02 18:05:06.630350] start test user 57013 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:07.153763] start test user 57013 50/568 recall augumented users by random, augumented_users = [5948, 49455, 133175, 68770, 45031, 131790, 68608, 34188, 126079, 13030, 20738, 38245, 119449, 41746, 63909, 5339, 87892, 4967, 50256, 116650, 61903, 59623, 80761, 60282, 126969, 131449, 33471, 34007, 111031, 99369, 5729, 100147, 7887, 39502, 42002, 108457, 126984, 14330, 76073, 94842, 43401, 14771, 31770, 107825, 38026, 29795, 77396, 96694, 82781, 25197]
[2024-12-02 18:05:07.169815] user = 57013 Cloud 50/568
[2024-12-02 18:05:07.210684] user = 57013 Local 50/568
[2024-12-02 18:05:07.309269] user = 57013 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:09.172994] user = 57013 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6658032808660423
Training on augumented user 5948 0/50 current_auc = 0.6658032808660423
User 5948 AUC after training: 0.6657700737198645
User 5948 does not improve AUC. Reverting changes.
Training on augumented user 49455 1/50 current_auc = 0.6658032808660423
User 49455 AUC after training: 0.666135352327821
User 49455 improves AUC. Keeping the model.
Training on augumented user 133175 2/50 current_auc = 0.666135352327821
User 133175 AUC after training: 0.6661021451816431
User 133175 does not improve AUC. Reverting changes.
Training on augumented user 68770 3/50 current_auc = 0.666135352327821
User 68770 AUC after training: 0.6666334595204888
User 68770 improves AUC. Keeping the model.
Training on augumented user 45031 4/50 current_auc = 0.6666334595204888
User 45031 AUC after training: 0.6661685594739988
User 45031 does not improve AUC. Reverting changes.
Training on augumented user 131790 5/50 current_auc = 0.6666334595204888
User 131790 AUC after training: 0.6667662881052003
User 131790 improves AUC. Keeping the model.
Training on augumented user 68608 6/50 current_auc = 0.6667662881052003
User 68608 AUC after training: 0.6668991166899116
User 68608 improves AUC. Keeping the model.
Training on augumented user 34188 7/50 current_auc = 0.6668991166899116
User 34188 AUC after training: 0.6668991166899118
User 34188 improves AUC. Keeping the model.
Training on augumented user 126079 8/50 current_auc = 0.6668991166899118
User 126079 AUC after training: 0.6670319452746231
User 126079 improves AUC. Keeping the model.
Training on augumented user 13030 9/50 current_auc = 0.6670319452746231
User 13030 AUC after training: 0.6666002523743111
User 13030 does not improve AUC. Reverting changes.
Training on augumented user 20738 10/50 current_auc = 0.6670319452746231
User 20738 AUC after training: 0.666832702397556
User 20738 does not improve AUC. Reverting changes.
Training on augumented user 38245 11/50 current_auc = 0.6670319452746231
User 38245 AUC after training: 0.6670319452746232
User 38245 improves AUC. Keeping the model.
Training on augumented user 119449 12/50 current_auc = 0.6670319452746232
User 119449 AUC after training: 0.6672311881516904
User 119449 improves AUC. Keeping the model.
Training on augumented user 41746 13/50 current_auc = 0.6672311881516904
User 41746 AUC after training: 0.667297602444046
User 41746 improves AUC. Keeping the model.
Training on augumented user 63909 14/50 current_auc = 0.667297602444046
User 63909 AUC after training: 0.6676628810520024
User 63909 improves AUC. Keeping the model.
Training on augumented user 5339 15/50 current_auc = 0.6676628810520024
User 5339 AUC after training: 0.6677292953443581
User 5339 improves AUC. Keeping the model.
Training on augumented user 87892 16/50 current_auc = 0.6677292953443581
User 87892 AUC after training: 0.6675300524672909
User 87892 does not improve AUC. Reverting changes.
Training on augumented user 4967 17/50 current_auc = 0.6677292953443581
User 4967 AUC after training: 0.6685428704257156
User 4967 improves AUC. Keeping the model.
Training on augumented user 50256 18/50 current_auc = 0.6685428704257156
User 50256 AUC after training: 0.6684930597064488
User 50256 does not improve AUC. Reverting changes.
Training on augumented user 116650 19/50 current_auc = 0.6685428704257156
User 116650 AUC after training: 0.6685760775718935
User 116650 improves AUC. Keeping the model.
Training on augumented user 61903 20/50 current_auc = 0.6685760775718935
User 61903 AUC after training: 0.6687919240220495
User 61903 improves AUC. Keeping the model.
Training on augumented user 59623 21/50 current_auc = 0.6687919240220495
User 59623 AUC after training: 0.668924752606761
User 59623 improves AUC. Keeping the model.
Training on augumented user 80761 22/50 current_auc = 0.668924752606761
User 80761 AUC after training: 0.6685262668526267
User 80761 does not improve AUC. Reverting changes.
Training on augumented user 60282 23/50 current_auc = 0.668924752606761
User 60282 AUC after training: 0.6689579597529388
User 60282 improves AUC. Keeping the model.
Training on augumented user 126969 24/50 current_auc = 0.6689579597529388
User 126969 AUC after training: 0.6691738062030949
User 126969 improves AUC. Keeping the model.
Training on augumented user 131449 25/50 current_auc = 0.6691738062030949
User 131449 AUC after training: 0.6688417347413165
User 131449 does not improve AUC. Reverting changes.
Training on augumented user 33471 26/50 current_auc = 0.6691738062030949
User 33471 AUC after training: 0.6685428704257156
User 33471 does not improve AUC. Reverting changes.
Training on augumented user 34007 27/50 current_auc = 0.6691738062030949
User 34007 AUC after training: 0.668459852560271
User 34007 does not improve AUC. Reverting changes.
Training on augumented user 111031 28/50 current_auc = 0.6691738062030949
User 111031 AUC after training: 0.6689081490336721
User 111031 does not improve AUC. Reverting changes.
Training on augumented user 99369 29/50 current_auc = 0.6691738062030949
User 99369 AUC after training: 0.669140599056917
User 99369 does not improve AUC. Reverting changes.
Training on augumented user 5729 30/50 current_auc = 0.6691738062030949
User 5729 AUC after training: 0.6686590954373381
User 5729 does not improve AUC. Reverting changes.
Training on augumented user 100147 31/50 current_auc = 0.6691738062030949
User 100147 AUC after training: 0.6684266454140931
User 100147 does not improve AUC. Reverting changes.
Training on augumented user 7887 32/50 current_auc = 0.6691738062030949
User 7887 AUC after training: 0.6687421133027829
User 7887 does not improve AUC. Reverting changes.
Training on augumented user 39502 33/50 current_auc = 0.6691738062030949
User 39502 AUC after training: 0.6690243740452946
User 39502 does not improve AUC. Reverting changes.
Training on augumented user 42002 34/50 current_auc = 0.6691738062030949
User 42002 AUC after training: 0.6689745633260278
User 42002 does not improve AUC. Reverting changes.
Training on augumented user 108457 35/50 current_auc = 0.6691738062030949
User 108457 AUC after training: 0.669422859799429
User 108457 improves AUC. Keeping the model.
Training on augumented user 126984 36/50 current_auc = 0.669422859799429
User 126984 AUC after training: 0.6692402204954506
User 126984 does not improve AUC. Reverting changes.
Training on augumented user 14330 37/50 current_auc = 0.669422859799429
User 14330 AUC after training: 0.6689911668991166
User 14330 does not improve AUC. Reverting changes.
Training on augumented user 76073 38/50 current_auc = 0.669422859799429
User 76073 AUC after training: 0.6694062562263399
User 76073 does not improve AUC. Reverting changes.
Training on augumented user 94842 39/50 current_auc = 0.669422859799429
User 94842 AUC after training: 0.6697217241150296
User 94842 improves AUC. Keeping the model.
Training on augumented user 43401 40/50 current_auc = 0.6697217241150296
User 43401 AUC after training: 0.6695390848110513
User 43401 does not improve AUC. Reverting changes.
Training on augumented user 14771 41/50 current_auc = 0.6697217241150296
User 14771 AUC after training: 0.6696719133957628
User 14771 does not improve AUC. Reverting changes.
Training on augumented user 31770 42/50 current_auc = 0.6697217241150296
User 31770 AUC after training: 0.6697217241150295
User 31770 does not improve AUC. Reverting changes.
Training on augumented user 107825 43/50 current_auc = 0.6697217241150296
User 107825 AUC after training: 0.669422859799429
User 107825 does not improve AUC. Reverting changes.
Training on augumented user 38026 44/50 current_auc = 0.6697217241150296
User 38026 AUC after training: 0.6697715348342963
User 38026 improves AUC. Keeping the model.
Training on augumented user 29795 45/50 current_auc = 0.6697715348342963
User 29795 AUC after training: 0.6689745633260278
User 29795 does not improve AUC. Reverting changes.
Training on augumented user 77396 46/50 current_auc = 0.6697715348342963
User 77396 AUC after training: 0.6695224812379624
User 77396 does not improve AUC. Reverting changes.
Training on augumented user 96694 47/50 current_auc = 0.6697715348342963
User 96694 AUC after training: 0.6689911668991166
User 96694 does not improve AUC. Reverting changes.
Training on augumented user 82781 48/50 current_auc = 0.6697715348342963
User 82781 AUC after training: 0.6698047419804742
User 82781 improves AUC. Keeping the model.
Training on augumented user 25197 49/50 current_auc = 0.6698047419804742
User 25197 AUC after training: 0.6695722919572292
User 25197 does not improve AUC. Reverting changes.
[2024-12-02 18:05:41.188675] start test user 57018 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:41.655407] start test user 57018 51/568 recall augumented users by random, augumented_users = [136058, 7738, 13612, 40457, 127273, 28780, 50237, 97204, 13587, 45281, 124347, 133330, 115647, 102460, 96385, 117849, 84820, 50633, 59028, 116597, 119223, 57305, 99288, 72590, 66675, 65843, 127666, 72471, 85418, 91468, 72633, 30286, 52003, 121347, 65842, 126407, 37149, 112793, 15477, 84368, 19570, 89334, 69883, 104324, 84787, 138132, 137728, 47301, 106923, 77219]
[2024-12-02 18:05:41.669572] user = 57018 Cloud 51/568
[2024-12-02 18:05:41.679272] user = 57018 Local 51/568
[2024-12-02 18:05:41.698061] user = 57018 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:43.080967] user = 57018 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285714
Training on augumented user 136058 0/50 current_auc = 0.5714285714285714
User 136058 AUC after training: 0.5714285714285714
User 136058 does not improve AUC. Reverting changes.
Training on augumented user 7738 1/50 current_auc = 0.5714285714285714
User 7738 AUC after training: 0.5714285714285714
User 7738 does not improve AUC. Reverting changes.
Training on augumented user 13612 2/50 current_auc = 0.5714285714285714
User 13612 AUC after training: 0.5627705627705627
User 13612 does not improve AUC. Reverting changes.
Training on augumented user 40457 3/50 current_auc = 0.5714285714285714
User 40457 AUC after training: 0.5714285714285714
User 40457 does not improve AUC. Reverting changes.
Training on augumented user 127273 4/50 current_auc = 0.5714285714285714
User 127273 AUC after training: 0.5714285714285714
User 127273 does not improve AUC. Reverting changes.
Training on augumented user 28780 5/50 current_auc = 0.5714285714285714
User 28780 AUC after training: 0.5714285714285714
User 28780 does not improve AUC. Reverting changes.
Training on augumented user 50237 6/50 current_auc = 0.5714285714285714
User 50237 AUC after training: 0.5714285714285714
User 50237 does not improve AUC. Reverting changes.
Training on augumented user 97204 7/50 current_auc = 0.5714285714285714
User 97204 AUC after training: 0.5714285714285714
User 97204 does not improve AUC. Reverting changes.
Training on augumented user 13587 8/50 current_auc = 0.5714285714285714
User 13587 AUC after training: 0.5757575757575757
User 13587 improves AUC. Keeping the model.
Training on augumented user 45281 9/50 current_auc = 0.5757575757575757
User 45281 AUC after training: 0.5714285714285714
User 45281 does not improve AUC. Reverting changes.
Training on augumented user 124347 10/50 current_auc = 0.5757575757575757
User 124347 AUC after training: 0.5757575757575757
User 124347 does not improve AUC. Reverting changes.
Training on augumented user 133330 11/50 current_auc = 0.5757575757575757
User 133330 AUC after training: 0.5800865800865801
User 133330 improves AUC. Keeping the model.
Training on augumented user 115647 12/50 current_auc = 0.5800865800865801
User 115647 AUC after training: 0.5800865800865801
User 115647 does not improve AUC. Reverting changes.
Training on augumented user 102460 13/50 current_auc = 0.5800865800865801
User 102460 AUC after training: 0.5844155844155845
User 102460 improves AUC. Keeping the model.
Training on augumented user 96385 14/50 current_auc = 0.5844155844155845
User 96385 AUC after training: 0.5844155844155845
User 96385 does not improve AUC. Reverting changes.
Training on augumented user 117849 15/50 current_auc = 0.5844155844155845
User 117849 AUC after training: 0.5844155844155845
User 117849 does not improve AUC. Reverting changes.
Training on augumented user 84820 16/50 current_auc = 0.5844155844155845
User 84820 AUC after training: 0.5800865800865801
User 84820 does not improve AUC. Reverting changes.
Training on augumented user 50633 17/50 current_auc = 0.5844155844155845
User 50633 AUC after training: 0.5887445887445888
User 50633 improves AUC. Keeping the model.
Training on augumented user 59028 18/50 current_auc = 0.5887445887445888
User 59028 AUC after training: 0.5757575757575757
User 59028 does not improve AUC. Reverting changes.
Training on augumented user 116597 19/50 current_auc = 0.5887445887445888
User 116597 AUC after training: 0.5887445887445888
User 116597 does not improve AUC. Reverting changes.
Training on augumented user 119223 20/50 current_auc = 0.5887445887445888
User 119223 AUC after training: 0.5887445887445888
User 119223 does not improve AUC. Reverting changes.
Training on augumented user 57305 21/50 current_auc = 0.5887445887445888
User 57305 AUC after training: 0.5887445887445888
User 57305 does not improve AUC. Reverting changes.
Training on augumented user 99288 22/50 current_auc = 0.5887445887445888
User 99288 AUC after training: 0.5800865800865801
User 99288 does not improve AUC. Reverting changes.
Training on augumented user 72590 23/50 current_auc = 0.5887445887445888
User 72590 AUC after training: 0.5844155844155845
User 72590 does not improve AUC. Reverting changes.
Training on augumented user 66675 24/50 current_auc = 0.5887445887445888
User 66675 AUC after training: 0.5887445887445888
User 66675 does not improve AUC. Reverting changes.
Training on augumented user 65843 25/50 current_auc = 0.5887445887445888
User 65843 AUC after training: 0.5887445887445888
User 65843 does not improve AUC. Reverting changes.
Training on augumented user 127666 26/50 current_auc = 0.5887445887445888
User 127666 AUC after training: 0.5887445887445888
User 127666 does not improve AUC. Reverting changes.
Training on augumented user 72471 27/50 current_auc = 0.5887445887445888
User 72471 AUC after training: 0.5844155844155845
User 72471 does not improve AUC. Reverting changes.
Training on augumented user 85418 28/50 current_auc = 0.5887445887445888
User 85418 AUC after training: 0.5844155844155845
User 85418 does not improve AUC. Reverting changes.
Training on augumented user 91468 29/50 current_auc = 0.5887445887445888
User 91468 AUC after training: 0.5887445887445888
User 91468 does not improve AUC. Reverting changes.
Training on augumented user 72633 30/50 current_auc = 0.5887445887445888
User 72633 AUC after training: 0.5800865800865801
User 72633 does not improve AUC. Reverting changes.
Training on augumented user 30286 31/50 current_auc = 0.5887445887445888
User 30286 AUC after training: 0.5844155844155845
User 30286 does not improve AUC. Reverting changes.
Training on augumented user 52003 32/50 current_auc = 0.5887445887445888
User 52003 AUC after training: 0.5887445887445888
User 52003 does not improve AUC. Reverting changes.
Training on augumented user 121347 33/50 current_auc = 0.5887445887445888
User 121347 AUC after training: 0.5887445887445888
User 121347 does not improve AUC. Reverting changes.
Training on augumented user 65842 34/50 current_auc = 0.5887445887445888
User 65842 AUC after training: 0.5757575757575757
User 65842 does not improve AUC. Reverting changes.
Training on augumented user 126407 35/50 current_auc = 0.5887445887445888
User 126407 AUC after training: 0.5887445887445888
User 126407 does not improve AUC. Reverting changes.
Training on augumented user 37149 36/50 current_auc = 0.5887445887445888
User 37149 AUC after training: 0.5887445887445888
User 37149 does not improve AUC. Reverting changes.
Training on augumented user 112793 37/50 current_auc = 0.5887445887445888
User 112793 AUC after training: 0.6017316017316018
User 112793 improves AUC. Keeping the model.
Training on augumented user 15477 38/50 current_auc = 0.6017316017316018
User 15477 AUC after training: 0.6017316017316017
User 15477 does not improve AUC. Reverting changes.
Training on augumented user 84368 39/50 current_auc = 0.6017316017316018
User 84368 AUC after training: 0.5974025974025975
User 84368 does not improve AUC. Reverting changes.
Training on augumented user 19570 40/50 current_auc = 0.6017316017316018
User 19570 AUC after training: 0.6017316017316018
User 19570 does not improve AUC. Reverting changes.
Training on augumented user 89334 41/50 current_auc = 0.6017316017316018
User 89334 AUC after training: 0.5974025974025975
User 89334 does not improve AUC. Reverting changes.
Training on augumented user 69883 42/50 current_auc = 0.6017316017316018
User 69883 AUC after training: 0.6060606060606062
User 69883 improves AUC. Keeping the model.
Training on augumented user 104324 43/50 current_auc = 0.6060606060606062
User 104324 AUC after training: 0.6103896103896105
User 104324 improves AUC. Keeping the model.
Training on augumented user 84787 44/50 current_auc = 0.6103896103896105
User 84787 AUC after training: 0.6017316017316018
User 84787 does not improve AUC. Reverting changes.
Training on augumented user 138132 45/50 current_auc = 0.6103896103896105
User 138132 AUC after training: 0.6060606060606062
User 138132 does not improve AUC. Reverting changes.
Training on augumented user 137728 46/50 current_auc = 0.6103896103896105
User 137728 AUC after training: 0.6103896103896105
User 137728 does not improve AUC. Reverting changes.
Training on augumented user 47301 47/50 current_auc = 0.6103896103896105
User 47301 AUC after training: 0.6017316017316018
User 47301 does not improve AUC. Reverting changes.
Training on augumented user 106923 48/50 current_auc = 0.6103896103896105
User 106923 AUC after training: 0.6060606060606061
User 106923 does not improve AUC. Reverting changes.
Training on augumented user 77219 49/50 current_auc = 0.6103896103896105
User 77219 AUC after training: 0.6103896103896105
User 77219 does not improve AUC. Reverting changes.
[2024-12-02 18:06:11.627146] start test user 57053 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:12.141034] start test user 57053 52/568 recall augumented users by random, augumented_users = [32138, 85452, 85457, 33528, 107049, 133140, 111522, 93930, 63874, 53136, 91345, 97994, 77503, 56286, 96327, 33774, 31431, 25241, 118535, 93444, 9231, 31195, 124300, 118603, 109388, 92689, 133334, 36452, 96694, 59990, 44683, 73537, 28193, 33362, 117076, 40225, 116814, 115119, 45730, 9870, 79567, 129780, 77661, 32582, 15582, 2682, 30946, 136094, 124669, 35272]
[2024-12-02 18:06:12.156330] user = 57053 Cloud 52/568
[2024-12-02 18:06:12.182543] user = 57053 Local 52/568
[2024-12-02 18:06:12.323279] user = 57053 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:14.974474] user = 57053 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7473262032085561
Training on augumented user 32138 0/50 current_auc = 0.7473262032085561
User 32138 AUC after training: 0.7474004753416518
User 32138 improves AUC. Keeping the model.
Training on augumented user 85452 1/50 current_auc = 0.7474004753416518
User 85452 AUC after training: 0.7470291146761735
User 85452 does not improve AUC. Reverting changes.
Training on augumented user 85457 2/50 current_auc = 0.7474004753416518
User 85457 AUC after training: 0.7476975638740345
User 85457 improves AUC. Keeping the model.
Training on augumented user 33528 3/50 current_auc = 0.7476975638740345
User 33528 AUC after training: 0.7480317884729649
User 33528 improves AUC. Keeping the model.
Training on augumented user 107049 4/50 current_auc = 0.7480317884729649
User 107049 AUC after training: 0.7469548425430778
User 107049 does not improve AUC. Reverting changes.
Training on augumented user 133140 5/50 current_auc = 0.7480317884729649
User 133140 AUC after training: 0.7476232917409388
User 133140 does not improve AUC. Reverting changes.
Training on augumented user 111522 6/50 current_auc = 0.7480317884729649
User 111522 AUC after training: 0.7476604278074866
User 111522 does not improve AUC. Reverting changes.
Training on augumented user 93930 7/50 current_auc = 0.7480317884729649
User 93930 AUC after training: 0.74777183600713
User 93930 does not improve AUC. Reverting changes.
Training on augumented user 63874 8/50 current_auc = 0.7480317884729649
User 63874 AUC after training: 0.7470291146761735
User 63874 does not improve AUC. Reverting changes.
Training on augumented user 53136 9/50 current_auc = 0.7480317884729649
User 53136 AUC after training: 0.7480317884729649
User 53136 does not improve AUC. Reverting changes.
Training on augumented user 91345 10/50 current_auc = 0.7480317884729649
User 91345 AUC after training: 0.7483288770053476
User 91345 improves AUC. Keeping the model.
Training on augumented user 97994 11/50 current_auc = 0.7483288770053476
User 97994 AUC after training: 0.7487373737373737
User 97994 improves AUC. Keeping the model.
Training on augumented user 77503 12/50 current_auc = 0.7487373737373737
User 77503 AUC after training: 0.7492572786690433
User 77503 improves AUC. Keeping the model.
Training on augumented user 56286 13/50 current_auc = 0.7492572786690433
User 56286 AUC after training: 0.7491087344028521
User 56286 does not improve AUC. Reverting changes.
Training on augumented user 96327 14/50 current_auc = 0.7492572786690433
User 96327 AUC after training: 0.7491830065359477
User 96327 does not improve AUC. Reverting changes.
Training on augumented user 33774 15/50 current_auc = 0.7492572786690433
User 33774 AUC after training: 0.7494800950683304
User 33774 improves AUC. Keeping the model.
Training on augumented user 31431 16/50 current_auc = 0.7494800950683304
User 31431 AUC after training: 0.7498514557338086
User 31431 improves AUC. Keeping the model.
Training on augumented user 25241 17/50 current_auc = 0.7498514557338086
User 25241 AUC after training: 0.7505941770647653
User 25241 improves AUC. Keeping the model.
Training on augumented user 118535 18/50 current_auc = 0.7505941770647653
User 118535 AUC after training: 0.7498514557338087
User 118535 does not improve AUC. Reverting changes.
Training on augumented user 93444 19/50 current_auc = 0.7505941770647653
User 93444 AUC after training: 0.7502970885323826
User 93444 does not improve AUC. Reverting changes.
Training on augumented user 9231 20/50 current_auc = 0.7505941770647653
User 9231 AUC after training: 0.7496657754010695
User 9231 does not improve AUC. Reverting changes.
Training on augumented user 31195 21/50 current_auc = 0.7505941770647653
User 31195 AUC after training: 0.750445632798574
User 31195 does not improve AUC. Reverting changes.
Training on augumented user 124300 22/50 current_auc = 0.7505941770647653
User 124300 AUC after training: 0.7511883541295306
User 124300 improves AUC. Keeping the model.
Training on augumented user 118603 23/50 current_auc = 0.7511883541295306
User 118603 AUC after training: 0.7504456327985739
User 118603 does not improve AUC. Reverting changes.
Training on augumented user 109388 24/50 current_auc = 0.7511883541295306
User 109388 AUC after training: 0.7457664884135472
User 109388 does not improve AUC. Reverting changes.
Training on augumented user 92689 25/50 current_auc = 0.7511883541295306
User 92689 AUC after training: 0.7505199049316695
User 92689 does not improve AUC. Reverting changes.
Training on augumented user 133334 26/50 current_auc = 0.7511883541295306
User 133334 AUC after training: 0.7499257278669044
User 133334 does not improve AUC. Reverting changes.
Training on augumented user 36452 27/50 current_auc = 0.7511883541295306
User 36452 AUC after training: 0.7508169934640523
User 36452 does not improve AUC. Reverting changes.
Training on augumented user 96694 28/50 current_auc = 0.7511883541295306
User 96694 AUC after training: 0.749777183600713
User 96694 does not improve AUC. Reverting changes.
Training on augumented user 59990 29/50 current_auc = 0.7511883541295306
User 59990 AUC after training: 0.7511140819964349
User 59990 does not improve AUC. Reverting changes.
Training on augumented user 44683 30/50 current_auc = 0.7511883541295306
User 44683 AUC after training: 0.7511883541295306
User 44683 does not improve AUC. Reverting changes.
Training on augumented user 73537 31/50 current_auc = 0.7511883541295306
User 73537 AUC after training: 0.7508169934640523
User 73537 does not improve AUC. Reverting changes.
Training on augumented user 28193 32/50 current_auc = 0.7511883541295306
User 28193 AUC after training: 0.7508912655971479
User 28193 does not improve AUC. Reverting changes.
Training on augumented user 33362 33/50 current_auc = 0.7511883541295306
User 33362 AUC after training: 0.749777183600713
User 33362 does not improve AUC. Reverting changes.
Training on augumented user 117076 34/50 current_auc = 0.7511883541295306
User 117076 AUC after training: 0.7510398098633392
User 117076 does not improve AUC. Reverting changes.
Training on augumented user 40225 35/50 current_auc = 0.7511883541295306
User 40225 AUC after training: 0.7508169934640523
User 40225 does not improve AUC. Reverting changes.
Training on augumented user 116814 36/50 current_auc = 0.7511883541295306
User 116814 AUC after training: 0.7509655377302437
User 116814 does not improve AUC. Reverting changes.
Training on augumented user 115119 37/50 current_auc = 0.7511883541295306
User 115119 AUC after training: 0.7508169934640523
User 115119 does not improve AUC. Reverting changes.
Training on augumented user 45730 38/50 current_auc = 0.7511883541295306
User 45730 AUC after training: 0.7501485442661914
User 45730 does not improve AUC. Reverting changes.
Training on augumented user 9870 39/50 current_auc = 0.7511883541295306
User 9870 AUC after training: 0.7505941770647653
User 9870 does not improve AUC. Reverting changes.
Training on augumented user 79567 40/50 current_auc = 0.7511883541295306
User 79567 AUC after training: 0.7511883541295306
User 79567 does not improve AUC. Reverting changes.
Training on augumented user 129780 41/50 current_auc = 0.7511883541295306
User 129780 AUC after training: 0.7492572786690433
User 129780 does not improve AUC. Reverting changes.
Training on augumented user 77661 42/50 current_auc = 0.7511883541295306
User 77661 AUC after training: 0.7511883541295307
User 77661 improves AUC. Keeping the model.
Training on augumented user 32582 43/50 current_auc = 0.7511883541295307
User 32582 AUC after training: 0.7518568033273916
User 32582 improves AUC. Keeping the model.
Training on augumented user 15582 44/50 current_auc = 0.7518568033273916
User 15582 AUC after training: 0.7517825311942958
User 15582 does not improve AUC. Reverting changes.
Training on augumented user 2682 45/50 current_auc = 0.7518568033273916
User 2682 AUC after training: 0.7516339869281046
User 2682 does not improve AUC. Reverting changes.
Training on augumented user 30946 46/50 current_auc = 0.7518568033273916
User 30946 AUC after training: 0.7517825311942958
User 30946 does not improve AUC. Reverting changes.
Training on augumented user 136094 47/50 current_auc = 0.7518568033273916
User 136094 AUC after training: 0.7508912655971479
User 136094 does not improve AUC. Reverting changes.
Training on augumented user 124669 48/50 current_auc = 0.7518568033273916
User 124669 AUC after training: 0.7508169934640523
User 124669 does not improve AUC. Reverting changes.
Training on augumented user 35272 49/50 current_auc = 0.7518568033273916
User 35272 AUC after training: 0.7476975638740344
User 35272 does not improve AUC. Reverting changes.
[2024-12-02 18:06:45.877597] start test user 57072 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:46.536862] start test user 57072 53/568 recall augumented users by random, augumented_users = [86928, 66656, 98722, 4763, 50531, 129801, 83488, 26845, 96987, 13597, 52272, 28965, 62656, 82688, 9000, 31486, 121855, 76329, 114557, 109753, 74289, 137748, 6293, 35006, 74602, 15470, 13808, 58587, 19550, 97158, 36704, 86224, 60805, 111694, 50831, 106238, 82662, 97533, 124502, 19825, 3052, 49568, 3518, 124282, 111518, 100410, 131173, 82891, 38097, 19834]
[2024-12-02 18:06:46.554866] user = 57072 Cloud 53/568
[2024-12-02 18:06:46.567091] user = 57072 Local 53/568
[2024-12-02 18:06:46.643306] user = 57072 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:49.356812] user = 57072 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 86928 0/50 current_auc = 0.5
User 86928 AUC after training: 0.5
User 86928 does not improve AUC. Reverting changes.
Training on augumented user 66656 1/50 current_auc = 0.5
User 66656 AUC after training: 0.5
User 66656 does not improve AUC. Reverting changes.
Training on augumented user 98722 2/50 current_auc = 0.5
User 98722 AUC after training: 0.5
User 98722 does not improve AUC. Reverting changes.
Training on augumented user 4763 3/50 current_auc = 0.5
User 4763 AUC after training: 0.5
User 4763 does not improve AUC. Reverting changes.
Training on augumented user 50531 4/50 current_auc = 0.5
User 50531 AUC after training: 0.5
User 50531 does not improve AUC. Reverting changes.
Training on augumented user 129801 5/50 current_auc = 0.5
User 129801 AUC after training: 0.5
User 129801 does not improve AUC. Reverting changes.
Training on augumented user 83488 6/50 current_auc = 0.5
User 83488 AUC after training: 0.5
User 83488 does not improve AUC. Reverting changes.
Training on augumented user 26845 7/50 current_auc = 0.5
User 26845 AUC after training: 0.5
User 26845 does not improve AUC. Reverting changes.
Training on augumented user 96987 8/50 current_auc = 0.5
User 96987 AUC after training: 0.5
User 96987 does not improve AUC. Reverting changes.
Training on augumented user 13597 9/50 current_auc = 0.5
User 13597 AUC after training: 0.5
User 13597 does not improve AUC. Reverting changes.
Training on augumented user 52272 10/50 current_auc = 0.5
User 52272 AUC after training: 0.5
User 52272 does not improve AUC. Reverting changes.
Training on augumented user 28965 11/50 current_auc = 0.5
User 28965 AUC after training: 0.5
User 28965 does not improve AUC. Reverting changes.
Training on augumented user 62656 12/50 current_auc = 0.5
User 62656 AUC after training: 0.5
User 62656 does not improve AUC. Reverting changes.
Training on augumented user 82688 13/50 current_auc = 0.5
User 82688 AUC after training: 0.5
User 82688 does not improve AUC. Reverting changes.
Training on augumented user 9000 14/50 current_auc = 0.5
User 9000 AUC after training: 0.5
User 9000 does not improve AUC. Reverting changes.
Training on augumented user 31486 15/50 current_auc = 0.5
User 31486 AUC after training: 0.5
User 31486 does not improve AUC. Reverting changes.
Training on augumented user 121855 16/50 current_auc = 0.5
User 121855 AUC after training: 0.5
User 121855 does not improve AUC. Reverting changes.
Training on augumented user 76329 17/50 current_auc = 0.5
User 76329 AUC after training: 0.5
User 76329 does not improve AUC. Reverting changes.
Training on augumented user 114557 18/50 current_auc = 0.5
User 114557 AUC after training: 0.5
User 114557 does not improve AUC. Reverting changes.
Training on augumented user 109753 19/50 current_auc = 0.5
User 109753 AUC after training: 0.5
User 109753 does not improve AUC. Reverting changes.
Training on augumented user 74289 20/50 current_auc = 0.5
User 74289 AUC after training: 0.5
User 74289 does not improve AUC. Reverting changes.
Training on augumented user 137748 21/50 current_auc = 0.5
User 137748 AUC after training: 0.5
User 137748 does not improve AUC. Reverting changes.
Training on augumented user 6293 22/50 current_auc = 0.5
User 6293 AUC after training: 0.5
User 6293 does not improve AUC. Reverting changes.
Training on augumented user 35006 23/50 current_auc = 0.5
User 35006 AUC after training: 0.5
User 35006 does not improve AUC. Reverting changes.
Training on augumented user 74602 24/50 current_auc = 0.5
User 74602 AUC after training: 0.5
User 74602 does not improve AUC. Reverting changes.
Training on augumented user 15470 25/50 current_auc = 0.5
User 15470 AUC after training: 0.5
User 15470 does not improve AUC. Reverting changes.
Training on augumented user 13808 26/50 current_auc = 0.5
User 13808 AUC after training: 0.5
User 13808 does not improve AUC. Reverting changes.
Training on augumented user 58587 27/50 current_auc = 0.5
User 58587 AUC after training: 0.5
User 58587 does not improve AUC. Reverting changes.
Training on augumented user 19550 28/50 current_auc = 0.5
User 19550 AUC after training: 0.5
User 19550 does not improve AUC. Reverting changes.
Training on augumented user 97158 29/50 current_auc = 0.5
User 97158 AUC after training: 0.5
User 97158 does not improve AUC. Reverting changes.
Training on augumented user 36704 30/50 current_auc = 0.5
User 36704 AUC after training: 0.5
User 36704 does not improve AUC. Reverting changes.
Training on augumented user 86224 31/50 current_auc = 0.5
User 86224 AUC after training: 0.5
User 86224 does not improve AUC. Reverting changes.
Training on augumented user 60805 32/50 current_auc = 0.5
User 60805 AUC after training: 0.5
User 60805 does not improve AUC. Reverting changes.
Training on augumented user 111694 33/50 current_auc = 0.5
User 111694 AUC after training: 0.5
User 111694 does not improve AUC. Reverting changes.
Training on augumented user 50831 34/50 current_auc = 0.5
User 50831 AUC after training: 0.5
User 50831 does not improve AUC. Reverting changes.
Training on augumented user 106238 35/50 current_auc = 0.5
User 106238 AUC after training: 0.5
User 106238 does not improve AUC. Reverting changes.
Training on augumented user 82662 36/50 current_auc = 0.5
User 82662 AUC after training: 0.5
User 82662 does not improve AUC. Reverting changes.
Training on augumented user 97533 37/50 current_auc = 0.5
User 97533 AUC after training: 0.5
User 97533 does not improve AUC. Reverting changes.
Training on augumented user 124502 38/50 current_auc = 0.5
User 124502 AUC after training: 0.5
User 124502 does not improve AUC. Reverting changes.
Training on augumented user 19825 39/50 current_auc = 0.5
User 19825 AUC after training: 0.5
User 19825 does not improve AUC. Reverting changes.
Training on augumented user 3052 40/50 current_auc = 0.5
User 3052 AUC after training: 0.5
User 3052 does not improve AUC. Reverting changes.
Training on augumented user 49568 41/50 current_auc = 0.5
User 49568 AUC after training: 0.5
User 49568 does not improve AUC. Reverting changes.
Training on augumented user 3518 42/50 current_auc = 0.5
User 3518 AUC after training: 0.5
User 3518 does not improve AUC. Reverting changes.
Training on augumented user 124282 43/50 current_auc = 0.5
User 124282 AUC after training: 0.5
User 124282 does not improve AUC. Reverting changes.
Training on augumented user 111518 44/50 current_auc = 0.5
User 111518 AUC after training: 0.5
User 111518 does not improve AUC. Reverting changes.
Training on augumented user 100410 45/50 current_auc = 0.5
User 100410 AUC after training: 0.5
User 100410 does not improve AUC. Reverting changes.
Training on augumented user 131173 46/50 current_auc = 0.5
User 131173 AUC after training: 0.5
User 131173 does not improve AUC. Reverting changes.
Training on augumented user 82891 47/50 current_auc = 0.5
User 82891 AUC after training: 0.5
User 82891 does not improve AUC. Reverting changes.
Training on augumented user 38097 48/50 current_auc = 0.5
User 38097 AUC after training: 0.5
User 38097 does not improve AUC. Reverting changes.
Training on augumented user 19834 49/50 current_auc = 0.5
User 19834 AUC after training: 0.5
User 19834 does not improve AUC. Reverting changes.
[2024-12-02 18:07:16.954271] start test user 57081 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:17.421741] start test user 57081 54/568 recall augumented users by random, augumented_users = [110726, 80658, 119070, 37033, 40645, 63908, 107725, 83344, 24070, 120523, 43097, 138197, 5761, 93531, 2540, 35042, 116823, 68782, 109929, 112962, 92895, 54267, 106764, 24339, 24499, 24009, 121954, 68434, 43569, 41973, 97617, 57816, 620, 19960, 109861, 33510, 123580, 17886, 124034, 107301, 115867, 34925, 119591, 61936, 35634, 37482, 95538, 132408, 88699, 118853]
[2024-12-02 18:07:17.438788] user = 57081 Cloud 54/568
[2024-12-02 18:07:17.450579] user = 57081 Local 54/568
[2024-12-02 18:07:17.500021] user = 57081 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:20.061763] user = 57081 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46842105263157896
Training on augumented user 110726 0/50 current_auc = 0.46842105263157896
User 110726 AUC after training: 0.4666666666666666
User 110726 does not improve AUC. Reverting changes.
Training on augumented user 80658 1/50 current_auc = 0.46842105263157896
User 80658 AUC after training: 0.47017543859649125
User 80658 improves AUC. Keeping the model.
Training on augumented user 119070 2/50 current_auc = 0.47017543859649125
User 119070 AUC after training: 0.46842105263157896
User 119070 does not improve AUC. Reverting changes.
Training on augumented user 37033 3/50 current_auc = 0.47017543859649125
User 37033 AUC after training: 0.46842105263157896
User 37033 does not improve AUC. Reverting changes.
Training on augumented user 40645 4/50 current_auc = 0.47017543859649125
User 40645 AUC after training: 0.4666666666666666
User 40645 does not improve AUC. Reverting changes.
Training on augumented user 63908 5/50 current_auc = 0.47017543859649125
User 63908 AUC after training: 0.4631578947368421
User 63908 does not improve AUC. Reverting changes.
Training on augumented user 107725 6/50 current_auc = 0.47017543859649125
User 107725 AUC after training: 0.47192982456140353
User 107725 improves AUC. Keeping the model.
Training on augumented user 83344 7/50 current_auc = 0.47192982456140353
User 83344 AUC after training: 0.47192982456140353
User 83344 does not improve AUC. Reverting changes.
Training on augumented user 24070 8/50 current_auc = 0.47192982456140353
User 24070 AUC after training: 0.47192982456140353
User 24070 does not improve AUC. Reverting changes.
Training on augumented user 120523 9/50 current_auc = 0.47192982456140353
User 120523 AUC after training: 0.47017543859649125
User 120523 does not improve AUC. Reverting changes.
Training on augumented user 43097 10/50 current_auc = 0.47192982456140353
User 43097 AUC after training: 0.47192982456140353
User 43097 does not improve AUC. Reverting changes.
Training on augumented user 138197 11/50 current_auc = 0.47192982456140353
User 138197 AUC after training: 0.4736842105263158
User 138197 improves AUC. Keeping the model.
Training on augumented user 5761 12/50 current_auc = 0.4736842105263158
User 5761 AUC after training: 0.4736842105263158
User 5761 does not improve AUC. Reverting changes.
Training on augumented user 93531 13/50 current_auc = 0.4736842105263158
User 93531 AUC after training: 0.47192982456140353
User 93531 does not improve AUC. Reverting changes.
Training on augumented user 2540 14/50 current_auc = 0.4736842105263158
User 2540 AUC after training: 0.47192982456140353
User 2540 does not improve AUC. Reverting changes.
Training on augumented user 35042 15/50 current_auc = 0.4736842105263158
User 35042 AUC after training: 0.4736842105263158
User 35042 does not improve AUC. Reverting changes.
Training on augumented user 116823 16/50 current_auc = 0.4736842105263158
User 116823 AUC after training: 0.4736842105263158
User 116823 does not improve AUC. Reverting changes.
Training on augumented user 68782 17/50 current_auc = 0.4736842105263158
User 68782 AUC after training: 0.4719298245614035
User 68782 does not improve AUC. Reverting changes.
Training on augumented user 109929 18/50 current_auc = 0.4736842105263158
User 109929 AUC after training: 0.4736842105263158
User 109929 does not improve AUC. Reverting changes.
Training on augumented user 112962 19/50 current_auc = 0.4736842105263158
User 112962 AUC after training: 0.4701754385964912
User 112962 does not improve AUC. Reverting changes.
Training on augumented user 92895 20/50 current_auc = 0.4736842105263158
User 92895 AUC after training: 0.4736842105263158
User 92895 does not improve AUC. Reverting changes.
Training on augumented user 54267 21/50 current_auc = 0.4736842105263158
User 54267 AUC after training: 0.4719298245614035
User 54267 does not improve AUC. Reverting changes.
Training on augumented user 106764 22/50 current_auc = 0.4736842105263158
User 106764 AUC after training: 0.4736842105263158
User 106764 does not improve AUC. Reverting changes.
Training on augumented user 24339 23/50 current_auc = 0.4736842105263158
User 24339 AUC after training: 0.4701754385964912
User 24339 does not improve AUC. Reverting changes.
Training on augumented user 24499 24/50 current_auc = 0.4736842105263158
User 24499 AUC after training: 0.4684210526315789
User 24499 does not improve AUC. Reverting changes.
Training on augumented user 24009 25/50 current_auc = 0.4736842105263158
User 24009 AUC after training: 0.4736842105263158
User 24009 does not improve AUC. Reverting changes.
Training on augumented user 121954 26/50 current_auc = 0.4736842105263158
User 121954 AUC after training: 0.4701754385964912
User 121954 does not improve AUC. Reverting changes.
Training on augumented user 68434 27/50 current_auc = 0.4736842105263158
User 68434 AUC after training: 0.4736842105263158
User 68434 does not improve AUC. Reverting changes.
Training on augumented user 43569 28/50 current_auc = 0.4736842105263158
User 43569 AUC after training: 0.47192982456140353
User 43569 does not improve AUC. Reverting changes.
Training on augumented user 41973 29/50 current_auc = 0.4736842105263158
User 41973 AUC after training: 0.4736842105263158
User 41973 does not improve AUC. Reverting changes.
Training on augumented user 97617 30/50 current_auc = 0.4736842105263158
User 97617 AUC after training: 0.4736842105263158
User 97617 does not improve AUC. Reverting changes.
Training on augumented user 57816 31/50 current_auc = 0.4736842105263158
User 57816 AUC after training: 0.4736842105263158
User 57816 does not improve AUC. Reverting changes.
Training on augumented user 620 32/50 current_auc = 0.4736842105263158
User 620 AUC after training: 0.4719298245614035
User 620 does not improve AUC. Reverting changes.
Training on augumented user 19960 33/50 current_auc = 0.4736842105263158
User 19960 AUC after training: 0.47368421052631576
User 19960 does not improve AUC. Reverting changes.
Training on augumented user 109861 34/50 current_auc = 0.4736842105263158
User 109861 AUC after training: 0.45964912280701753
User 109861 does not improve AUC. Reverting changes.
Training on augumented user 33510 35/50 current_auc = 0.4736842105263158
User 33510 AUC after training: 0.4701754385964912
User 33510 does not improve AUC. Reverting changes.
Training on augumented user 123580 36/50 current_auc = 0.4736842105263158
User 123580 AUC after training: 0.4666666666666667
User 123580 does not improve AUC. Reverting changes.
Training on augumented user 17886 37/50 current_auc = 0.4736842105263158
User 17886 AUC after training: 0.47192982456140353
User 17886 does not improve AUC. Reverting changes.
Training on augumented user 124034 38/50 current_auc = 0.4736842105263158
User 124034 AUC after training: 0.4719298245614035
User 124034 does not improve AUC. Reverting changes.
Training on augumented user 107301 39/50 current_auc = 0.4736842105263158
User 107301 AUC after training: 0.47192982456140353
User 107301 does not improve AUC. Reverting changes.
Training on augumented user 115867 40/50 current_auc = 0.4736842105263158
User 115867 AUC after training: 0.4736842105263158
User 115867 does not improve AUC. Reverting changes.
Training on augumented user 34925 41/50 current_auc = 0.4736842105263158
User 34925 AUC after training: 0.4754385964912281
User 34925 improves AUC. Keeping the model.
Training on augumented user 119591 42/50 current_auc = 0.4754385964912281
User 119591 AUC after training: 0.4754385964912281
User 119591 does not improve AUC. Reverting changes.
Training on augumented user 61936 43/50 current_auc = 0.4754385964912281
User 61936 AUC after training: 0.4754385964912281
User 61936 does not improve AUC. Reverting changes.
Training on augumented user 35634 44/50 current_auc = 0.4754385964912281
User 35634 AUC after training: 0.4754385964912281
User 35634 does not improve AUC. Reverting changes.
Training on augumented user 37482 45/50 current_auc = 0.4754385964912281
User 37482 AUC after training: 0.4754385964912281
User 37482 does not improve AUC. Reverting changes.
Training on augumented user 95538 46/50 current_auc = 0.4754385964912281
User 95538 AUC after training: 0.4771929824561404
User 95538 improves AUC. Keeping the model.
Training on augumented user 132408 47/50 current_auc = 0.4771929824561404
User 132408 AUC after training: 0.47017543859649125
User 132408 does not improve AUC. Reverting changes.
Training on augumented user 88699 48/50 current_auc = 0.4771929824561404
User 88699 AUC after training: 0.4771929824561404
User 88699 does not improve AUC. Reverting changes.
Training on augumented user 118853 49/50 current_auc = 0.4771929824561404
User 118853 AUC after training: 0.4771929824561404
User 118853 does not improve AUC. Reverting changes.
[2024-12-02 18:07:50.231676] start test user 57099 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:50.535469] start test user 57099 55/568 recall augumented users by random, augumented_users = [47219, 69514, 12167, 29282, 95393, 38855, 77207, 81324, 50357, 47038, 2113, 66262, 125834, 14548, 94189, 137552, 100850, 123950, 72217, 125241, 7866, 64227, 103739, 29357, 86446, 86172, 46088, 122449, 105195, 92978, 90821, 33592, 134930, 97697, 100865, 7336, 41862, 63360, 34338, 83344, 5760, 116145, 31680, 62176, 2465, 44435, 113903, 114186, 130675, 115896]
[2024-12-02 18:07:50.543456] user = 57099 Cloud 55/568
[2024-12-02 18:07:50.549492] user = 57099 Local 55/568
[2024-12-02 18:07:50.579325] user = 57099 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:51.451875] user = 57099 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6904761904761904
Training on augumented user 47219 0/50 current_auc = 0.6904761904761904
User 47219 AUC after training: 0.6944444444444445
User 47219 improves AUC. Keeping the model.
Training on augumented user 69514 1/50 current_auc = 0.6944444444444445
User 69514 AUC after training: 0.6944444444444445
User 69514 does not improve AUC. Reverting changes.
Training on augumented user 12167 2/50 current_auc = 0.6944444444444445
User 12167 AUC after training: 0.6904761904761906
User 12167 does not improve AUC. Reverting changes.
Training on augumented user 29282 3/50 current_auc = 0.6944444444444445
User 29282 AUC after training: 0.6944444444444445
User 29282 does not improve AUC. Reverting changes.
Training on augumented user 95393 4/50 current_auc = 0.6944444444444445
User 95393 AUC after training: 0.6944444444444445
User 95393 does not improve AUC. Reverting changes.
Training on augumented user 38855 5/50 current_auc = 0.6944444444444445
User 38855 AUC after training: 0.6944444444444445
User 38855 does not improve AUC. Reverting changes.
Training on augumented user 77207 6/50 current_auc = 0.6944444444444445
User 77207 AUC after training: 0.6944444444444445
User 77207 does not improve AUC. Reverting changes.
Training on augumented user 81324 7/50 current_auc = 0.6944444444444445
User 81324 AUC after training: 0.6984126984126985
User 81324 improves AUC. Keeping the model.
Training on augumented user 50357 8/50 current_auc = 0.6984126984126985
User 50357 AUC after training: 0.6984126984126985
User 50357 does not improve AUC. Reverting changes.
Training on augumented user 47038 9/50 current_auc = 0.6984126984126985
User 47038 AUC after training: 0.6944444444444445
User 47038 does not improve AUC. Reverting changes.
Training on augumented user 2113 10/50 current_auc = 0.6984126984126985
User 2113 AUC after training: 0.6904761904761904
User 2113 does not improve AUC. Reverting changes.
Training on augumented user 66262 11/50 current_auc = 0.6984126984126985
User 66262 AUC after training: 0.6984126984126985
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 125834 12/50 current_auc = 0.6984126984126985
User 125834 AUC after training: 0.6984126984126985
User 125834 does not improve AUC. Reverting changes.
Training on augumented user 14548 13/50 current_auc = 0.6984126984126985
User 14548 AUC after training: 0.6984126984126985
User 14548 does not improve AUC. Reverting changes.
Training on augumented user 94189 14/50 current_auc = 0.6984126984126985
User 94189 AUC after training: 0.6984126984126985
User 94189 does not improve AUC. Reverting changes.
Training on augumented user 137552 15/50 current_auc = 0.6984126984126985
User 137552 AUC after training: 0.6984126984126985
User 137552 does not improve AUC. Reverting changes.
Training on augumented user 100850 16/50 current_auc = 0.6984126984126985
User 100850 AUC after training: 0.6984126984126985
User 100850 does not improve AUC. Reverting changes.
Training on augumented user 123950 17/50 current_auc = 0.6984126984126985
User 123950 AUC after training: 0.6944444444444445
User 123950 does not improve AUC. Reverting changes.
Training on augumented user 72217 18/50 current_auc = 0.6984126984126985
User 72217 AUC after training: 0.6984126984126985
User 72217 does not improve AUC. Reverting changes.
Training on augumented user 125241 19/50 current_auc = 0.6984126984126985
User 125241 AUC after training: 0.6904761904761906
User 125241 does not improve AUC. Reverting changes.
Training on augumented user 7866 20/50 current_auc = 0.6984126984126985
User 7866 AUC after training: 0.6944444444444445
User 7866 does not improve AUC. Reverting changes.
Training on augumented user 64227 21/50 current_auc = 0.6984126984126985
User 64227 AUC after training: 0.6984126984126985
User 64227 does not improve AUC. Reverting changes.
Training on augumented user 103739 22/50 current_auc = 0.6984126984126985
User 103739 AUC after training: 0.6984126984126985
User 103739 does not improve AUC. Reverting changes.
Training on augumented user 29357 23/50 current_auc = 0.6984126984126985
User 29357 AUC after training: 0.6984126984126985
User 29357 does not improve AUC. Reverting changes.
Training on augumented user 86446 24/50 current_auc = 0.6984126984126985
User 86446 AUC after training: 0.6984126984126985
User 86446 does not improve AUC. Reverting changes.
Training on augumented user 86172 25/50 current_auc = 0.6984126984126985
User 86172 AUC after training: 0.6944444444444445
User 86172 does not improve AUC. Reverting changes.
Training on augumented user 46088 26/50 current_auc = 0.6984126984126985
User 46088 AUC after training: 0.6944444444444445
User 46088 does not improve AUC. Reverting changes.
Training on augumented user 122449 27/50 current_auc = 0.6984126984126985
User 122449 AUC after training: 0.6984126984126985
User 122449 does not improve AUC. Reverting changes.
Training on augumented user 105195 28/50 current_auc = 0.6984126984126985
User 105195 AUC after training: 0.6944444444444445
User 105195 does not improve AUC. Reverting changes.
Training on augumented user 92978 29/50 current_auc = 0.6984126984126985
User 92978 AUC after training: 0.6904761904761905
User 92978 does not improve AUC. Reverting changes.
Training on augumented user 90821 30/50 current_auc = 0.6984126984126985
User 90821 AUC after training: 0.6984126984126985
User 90821 does not improve AUC. Reverting changes.
Training on augumented user 33592 31/50 current_auc = 0.6984126984126985
User 33592 AUC after training: 0.6984126984126985
User 33592 does not improve AUC. Reverting changes.
Training on augumented user 134930 32/50 current_auc = 0.6984126984126985
User 134930 AUC after training: 0.6984126984126985
User 134930 does not improve AUC. Reverting changes.
Training on augumented user 97697 33/50 current_auc = 0.6984126984126985
User 97697 AUC after training: 0.6984126984126985
User 97697 does not improve AUC. Reverting changes.
Training on augumented user 100865 34/50 current_auc = 0.6984126984126985
User 100865 AUC after training: 0.6984126984126985
User 100865 does not improve AUC. Reverting changes.
Training on augumented user 7336 35/50 current_auc = 0.6984126984126985
User 7336 AUC after training: 0.6944444444444445
User 7336 does not improve AUC. Reverting changes.
Training on augumented user 41862 36/50 current_auc = 0.6984126984126985
User 41862 AUC after training: 0.6944444444444445
User 41862 does not improve AUC. Reverting changes.
Training on augumented user 63360 37/50 current_auc = 0.6984126984126985
User 63360 AUC after training: 0.6984126984126985
User 63360 does not improve AUC. Reverting changes.
Training on augumented user 34338 38/50 current_auc = 0.6984126984126985
User 34338 AUC after training: 0.6984126984126985
User 34338 does not improve AUC. Reverting changes.
Training on augumented user 83344 39/50 current_auc = 0.6984126984126985
User 83344 AUC after training: 0.6944444444444445
User 83344 does not improve AUC. Reverting changes.
Training on augumented user 5760 40/50 current_auc = 0.6984126984126985
User 5760 AUC after training: 0.6984126984126985
User 5760 does not improve AUC. Reverting changes.
Training on augumented user 116145 41/50 current_auc = 0.6984126984126985
User 116145 AUC after training: 0.6944444444444445
User 116145 does not improve AUC. Reverting changes.
Training on augumented user 31680 42/50 current_auc = 0.6984126984126985
User 31680 AUC after training: 0.6944444444444445
User 31680 does not improve AUC. Reverting changes.
Training on augumented user 62176 43/50 current_auc = 0.6984126984126985
User 62176 AUC after training: 0.6984126984126985
User 62176 does not improve AUC. Reverting changes.
Training on augumented user 2465 44/50 current_auc = 0.6984126984126985
User 2465 AUC after training: 0.6984126984126985
User 2465 does not improve AUC. Reverting changes.
Training on augumented user 44435 45/50 current_auc = 0.6984126984126985
User 44435 AUC after training: 0.6984126984126985
User 44435 does not improve AUC. Reverting changes.
Training on augumented user 113903 46/50 current_auc = 0.6984126984126985
User 113903 AUC after training: 0.6984126984126985
User 113903 does not improve AUC. Reverting changes.
Training on augumented user 114186 47/50 current_auc = 0.6984126984126985
User 114186 AUC after training: 0.6984126984126985
User 114186 does not improve AUC. Reverting changes.
Training on augumented user 130675 48/50 current_auc = 0.6984126984126985
User 130675 AUC after training: 0.6984126984126985
User 130675 does not improve AUC. Reverting changes.
Training on augumented user 115896 49/50 current_auc = 0.6984126984126985
User 115896 AUC after training: 0.6984126984126985
User 115896 does not improve AUC. Reverting changes.
[2024-12-02 18:08:15.388863] start test user 57143 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:15.813617] start test user 57143 56/568 recall augumented users by random, augumented_users = [75628, 9268, 126326, 20543, 129990, 19864, 47709, 51707, 52958, 85709, 19358, 96878, 12585, 111959, 74337, 88056, 57247, 21838, 41928, 102257, 68555, 18634, 18986, 134720, 98783, 62682, 26274, 47493, 63603, 11600, 88721, 31954, 99252, 115171, 98036, 100293, 4318, 107712, 43691, 90787, 88451, 91165, 113573, 114749, 115744, 73876, 45617, 41131, 28773, 99013]
[2024-12-02 18:08:15.827655] user = 57143 Cloud 56/568
[2024-12-02 18:08:15.838292] user = 57143 Local 56/568
[2024-12-02 18:08:15.874880] user = 57143 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:17.890581] user = 57143 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.743421052631579
Training on augumented user 75628 0/50 current_auc = 0.743421052631579
User 75628 AUC after training: 0.743421052631579
User 75628 does not improve AUC. Reverting changes.
Training on augumented user 9268 1/50 current_auc = 0.743421052631579
User 9268 AUC after training: 0.743421052631579
User 9268 does not improve AUC. Reverting changes.
Training on augumented user 126326 2/50 current_auc = 0.743421052631579
User 126326 AUC after training: 0.743421052631579
User 126326 does not improve AUC. Reverting changes.
Training on augumented user 20543 3/50 current_auc = 0.743421052631579
User 20543 AUC after training: 0.743421052631579
User 20543 does not improve AUC. Reverting changes.
Training on augumented user 129990 4/50 current_auc = 0.743421052631579
User 129990 AUC after training: 0.743421052631579
User 129990 does not improve AUC. Reverting changes.
Training on augumented user 19864 5/50 current_auc = 0.743421052631579
User 19864 AUC after training: 0.743421052631579
User 19864 does not improve AUC. Reverting changes.
Training on augumented user 47709 6/50 current_auc = 0.743421052631579
User 47709 AUC after training: 0.743421052631579
User 47709 does not improve AUC. Reverting changes.
Training on augumented user 51707 7/50 current_auc = 0.743421052631579
User 51707 AUC after training: 0.743421052631579
User 51707 does not improve AUC. Reverting changes.
Training on augumented user 52958 8/50 current_auc = 0.743421052631579
User 52958 AUC after training: 0.743421052631579
User 52958 does not improve AUC. Reverting changes.
Training on augumented user 85709 9/50 current_auc = 0.743421052631579
User 85709 AUC after training: 0.743421052631579
User 85709 does not improve AUC. Reverting changes.
Training on augumented user 19358 10/50 current_auc = 0.743421052631579
User 19358 AUC after training: 0.743421052631579
User 19358 does not improve AUC. Reverting changes.
Training on augumented user 96878 11/50 current_auc = 0.743421052631579
User 96878 AUC after training: 0.743421052631579
User 96878 does not improve AUC. Reverting changes.
Training on augumented user 12585 12/50 current_auc = 0.743421052631579
User 12585 AUC after training: 0.743421052631579
User 12585 does not improve AUC. Reverting changes.
Training on augumented user 111959 13/50 current_auc = 0.743421052631579
User 111959 AUC after training: 0.7467105263157895
User 111959 improves AUC. Keeping the model.
Training on augumented user 74337 14/50 current_auc = 0.7467105263157895
User 74337 AUC after training: 0.7467105263157895
User 74337 does not improve AUC. Reverting changes.
Training on augumented user 88056 15/50 current_auc = 0.7467105263157895
User 88056 AUC after training: 0.7467105263157895
User 88056 does not improve AUC. Reverting changes.
Training on augumented user 57247 16/50 current_auc = 0.7467105263157895
User 57247 AUC after training: 0.7467105263157895
User 57247 does not improve AUC. Reverting changes.
Training on augumented user 21838 17/50 current_auc = 0.7467105263157895
User 21838 AUC after training: 0.7467105263157895
User 21838 does not improve AUC. Reverting changes.
Training on augumented user 41928 18/50 current_auc = 0.7467105263157895
User 41928 AUC after training: 0.7467105263157895
User 41928 does not improve AUC. Reverting changes.
Training on augumented user 102257 19/50 current_auc = 0.7467105263157895
User 102257 AUC after training: 0.7467105263157895
User 102257 does not improve AUC. Reverting changes.
Training on augumented user 68555 20/50 current_auc = 0.7467105263157895
User 68555 AUC after training: 0.7467105263157895
User 68555 does not improve AUC. Reverting changes.
Training on augumented user 18634 21/50 current_auc = 0.7467105263157895
User 18634 AUC after training: 0.7467105263157895
User 18634 does not improve AUC. Reverting changes.
Training on augumented user 18986 22/50 current_auc = 0.7467105263157895
User 18986 AUC after training: 0.7467105263157895
User 18986 does not improve AUC. Reverting changes.
Training on augumented user 134720 23/50 current_auc = 0.7467105263157895
User 134720 AUC after training: 0.7467105263157895
User 134720 does not improve AUC. Reverting changes.
Training on augumented user 98783 24/50 current_auc = 0.7467105263157895
User 98783 AUC after training: 0.7467105263157895
User 98783 does not improve AUC. Reverting changes.
Training on augumented user 62682 25/50 current_auc = 0.7467105263157895
User 62682 AUC after training: 0.7467105263157895
User 62682 does not improve AUC. Reverting changes.
Training on augumented user 26274 26/50 current_auc = 0.7467105263157895
User 26274 AUC after training: 0.7467105263157895
User 26274 does not improve AUC. Reverting changes.
Training on augumented user 47493 27/50 current_auc = 0.7467105263157895
User 47493 AUC after training: 0.7467105263157895
User 47493 does not improve AUC. Reverting changes.
Training on augumented user 63603 28/50 current_auc = 0.7467105263157895
User 63603 AUC after training: 0.7467105263157895
User 63603 does not improve AUC. Reverting changes.
Training on augumented user 11600 29/50 current_auc = 0.7467105263157895
User 11600 AUC after training: 0.7467105263157895
User 11600 does not improve AUC. Reverting changes.
Training on augumented user 88721 30/50 current_auc = 0.7467105263157895
User 88721 AUC after training: 0.743421052631579
User 88721 does not improve AUC. Reverting changes.
Training on augumented user 31954 31/50 current_auc = 0.7467105263157895
User 31954 AUC after training: 0.7401315789473684
User 31954 does not improve AUC. Reverting changes.
Training on augumented user 99252 32/50 current_auc = 0.7467105263157895
User 99252 AUC after training: 0.7467105263157895
User 99252 does not improve AUC. Reverting changes.
Training on augumented user 115171 33/50 current_auc = 0.7467105263157895
User 115171 AUC after training: 0.7467105263157895
User 115171 does not improve AUC. Reverting changes.
Training on augumented user 98036 34/50 current_auc = 0.7467105263157895
User 98036 AUC after training: 0.7467105263157895
User 98036 does not improve AUC. Reverting changes.
Training on augumented user 100293 35/50 current_auc = 0.7467105263157895
User 100293 AUC after training: 0.7467105263157895
User 100293 does not improve AUC. Reverting changes.
Training on augumented user 4318 36/50 current_auc = 0.7467105263157895
User 4318 AUC after training: 0.7467105263157895
User 4318 does not improve AUC. Reverting changes.
Training on augumented user 107712 37/50 current_auc = 0.7467105263157895
User 107712 AUC after training: 0.7467105263157895
User 107712 does not improve AUC. Reverting changes.
Training on augumented user 43691 38/50 current_auc = 0.7467105263157895
User 43691 AUC after training: 0.7467105263157895
User 43691 does not improve AUC. Reverting changes.
Training on augumented user 90787 39/50 current_auc = 0.7467105263157895
User 90787 AUC after training: 0.7467105263157895
User 90787 does not improve AUC. Reverting changes.
Training on augumented user 88451 40/50 current_auc = 0.7467105263157895
User 88451 AUC after training: 0.7467105263157895
User 88451 does not improve AUC. Reverting changes.
Training on augumented user 91165 41/50 current_auc = 0.7467105263157895
User 91165 AUC after training: 0.7467105263157895
User 91165 does not improve AUC. Reverting changes.
Training on augumented user 113573 42/50 current_auc = 0.7467105263157895
User 113573 AUC after training: 0.7467105263157895
User 113573 does not improve AUC. Reverting changes.
Training on augumented user 114749 43/50 current_auc = 0.7467105263157895
User 114749 AUC after training: 0.7467105263157895
User 114749 does not improve AUC. Reverting changes.
Training on augumented user 115744 44/50 current_auc = 0.7467105263157895
User 115744 AUC after training: 0.7467105263157895
User 115744 does not improve AUC. Reverting changes.
Training on augumented user 73876 45/50 current_auc = 0.7467105263157895
User 73876 AUC after training: 0.7467105263157895
User 73876 does not improve AUC. Reverting changes.
Training on augumented user 45617 46/50 current_auc = 0.7467105263157895
User 45617 AUC after training: 0.7467105263157895
User 45617 does not improve AUC. Reverting changes.
Training on augumented user 41131 47/50 current_auc = 0.7467105263157895
User 41131 AUC after training: 0.743421052631579
User 41131 does not improve AUC. Reverting changes.
Training on augumented user 28773 48/50 current_auc = 0.7467105263157895
User 28773 AUC after training: 0.7467105263157895
User 28773 does not improve AUC. Reverting changes.
Training on augumented user 99013 49/50 current_auc = 0.7467105263157895
User 99013 AUC after training: 0.7467105263157895
User 99013 does not improve AUC. Reverting changes.
[2024-12-02 18:08:47.475167] start test user 57152 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:48.087413] start test user 57152 57/568 recall augumented users by random, augumented_users = [75102, 110612, 3889, 36023, 85004, 63016, 102536, 28610, 126275, 91157, 121181, 67749, 73763, 53181, 106791, 99128, 69861, 49207, 131637, 32989, 130884, 43359, 65377, 93290, 60067, 117055, 74115, 67098, 108630, 55546, 67469, 50555, 74506, 81094, 48632, 83505, 11804, 35516, 19818, 114816, 101742, 28349, 126939, 89093, 69286, 88417, 10969, 14986, 124270, 52829]
[2024-12-02 18:08:48.111414] user = 57152 Cloud 57/568
[2024-12-02 18:08:48.136458] user = 57152 Local 57/568
[2024-12-02 18:08:48.233767] user = 57152 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:51.068357] user = 57152 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4797619047619047
Training on augumented user 75102 0/50 current_auc = 0.4797619047619047
User 75102 AUC after training: 0.47946428571428573
User 75102 does not improve AUC. Reverting changes.
Training on augumented user 110612 1/50 current_auc = 0.4797619047619047
User 110612 AUC after training: 0.47857142857142854
User 110612 does not improve AUC. Reverting changes.
Training on augumented user 3889 2/50 current_auc = 0.4797619047619047
User 3889 AUC after training: 0.4791666666666667
User 3889 does not improve AUC. Reverting changes.
Training on augumented user 36023 3/50 current_auc = 0.4797619047619047
User 36023 AUC after training: 0.4770833333333333
User 36023 does not improve AUC. Reverting changes.
Training on augumented user 85004 4/50 current_auc = 0.4797619047619047
User 85004 AUC after training: 0.48511904761904767
User 85004 improves AUC. Keeping the model.
Training on augumented user 63016 5/50 current_auc = 0.48511904761904767
User 63016 AUC after training: 0.4839285714285714
User 63016 does not improve AUC. Reverting changes.
Training on augumented user 102536 6/50 current_auc = 0.48511904761904767
User 102536 AUC after training: 0.48065476190476186
User 102536 does not improve AUC. Reverting changes.
Training on augumented user 28610 7/50 current_auc = 0.48511904761904767
User 28610 AUC after training: 0.4839285714285714
User 28610 does not improve AUC. Reverting changes.
Training on augumented user 126275 8/50 current_auc = 0.48511904761904767
User 126275 AUC after training: 0.4818452380952381
User 126275 does not improve AUC. Reverting changes.
Training on augumented user 91157 9/50 current_auc = 0.48511904761904767
User 91157 AUC after training: 0.48273809523809524
User 91157 does not improve AUC. Reverting changes.
Training on augumented user 121181 10/50 current_auc = 0.48511904761904767
User 121181 AUC after training: 0.4827380952380952
User 121181 does not improve AUC. Reverting changes.
Training on augumented user 67749 11/50 current_auc = 0.48511904761904767
User 67749 AUC after training: 0.4770833333333333
User 67749 does not improve AUC. Reverting changes.
Training on augumented user 73763 12/50 current_auc = 0.48511904761904767
User 73763 AUC after training: 0.4824404761904762
User 73763 does not improve AUC. Reverting changes.
Training on augumented user 53181 13/50 current_auc = 0.48511904761904767
User 53181 AUC after training: 0.4842261904761904
User 53181 does not improve AUC. Reverting changes.
Training on augumented user 106791 14/50 current_auc = 0.48511904761904767
User 106791 AUC after training: 0.4845238095238095
User 106791 does not improve AUC. Reverting changes.
Training on augumented user 99128 15/50 current_auc = 0.48511904761904767
User 99128 AUC after training: 0.4833333333333334
User 99128 does not improve AUC. Reverting changes.
Training on augumented user 69861 16/50 current_auc = 0.48511904761904767
User 69861 AUC after training: 0.4842261904761905
User 69861 does not improve AUC. Reverting changes.
Training on augumented user 49207 17/50 current_auc = 0.48511904761904767
User 49207 AUC after training: 0.4839285714285715
User 49207 does not improve AUC. Reverting changes.
Training on augumented user 131637 18/50 current_auc = 0.48511904761904767
User 131637 AUC after training: 0.48273809523809524
User 131637 does not improve AUC. Reverting changes.
Training on augumented user 32989 19/50 current_auc = 0.48511904761904767
User 32989 AUC after training: 0.4839285714285715
User 32989 does not improve AUC. Reverting changes.
Training on augumented user 130884 20/50 current_auc = 0.48511904761904767
User 130884 AUC after training: 0.4839285714285715
User 130884 does not improve AUC. Reverting changes.
Training on augumented user 43359 21/50 current_auc = 0.48511904761904767
User 43359 AUC after training: 0.4827380952380952
User 43359 does not improve AUC. Reverting changes.
Training on augumented user 65377 22/50 current_auc = 0.48511904761904767
User 65377 AUC after training: 0.48244047619047625
User 65377 does not improve AUC. Reverting changes.
Training on augumented user 93290 23/50 current_auc = 0.48511904761904767
User 93290 AUC after training: 0.48214285714285715
User 93290 does not improve AUC. Reverting changes.
Training on augumented user 60067 24/50 current_auc = 0.48511904761904767
User 60067 AUC after training: 0.48363095238095244
User 60067 does not improve AUC. Reverting changes.
Training on augumented user 117055 25/50 current_auc = 0.48511904761904767
User 117055 AUC after training: 0.4824404761904762
User 117055 does not improve AUC. Reverting changes.
Training on augumented user 74115 26/50 current_auc = 0.48511904761904767
User 74115 AUC after training: 0.47827380952380955
User 74115 does not improve AUC. Reverting changes.
Training on augumented user 67098 27/50 current_auc = 0.48511904761904767
User 67098 AUC after training: 0.4845238095238095
User 67098 does not improve AUC. Reverting changes.
Training on augumented user 108630 28/50 current_auc = 0.48511904761904767
User 108630 AUC after training: 0.48184523809523805
User 108630 does not improve AUC. Reverting changes.
Training on augumented user 55546 29/50 current_auc = 0.48511904761904767
User 55546 AUC after training: 0.4839285714285715
User 55546 does not improve AUC. Reverting changes.
Training on augumented user 67469 30/50 current_auc = 0.48511904761904767
User 67469 AUC after training: 0.4839285714285715
User 67469 does not improve AUC. Reverting changes.
Training on augumented user 50555 31/50 current_auc = 0.48511904761904767
User 50555 AUC after training: 0.48541666666666666
User 50555 improves AUC. Keeping the model.
Training on augumented user 74506 32/50 current_auc = 0.48541666666666666
User 74506 AUC after training: 0.4845238095238096
User 74506 does not improve AUC. Reverting changes.
Training on augumented user 81094 33/50 current_auc = 0.48541666666666666
User 81094 AUC after training: 0.48184523809523816
User 81094 does not improve AUC. Reverting changes.
Training on augumented user 48632 34/50 current_auc = 0.48541666666666666
User 48632 AUC after training: 0.48363095238095244
User 48632 does not improve AUC. Reverting changes.
Training on augumented user 83505 35/50 current_auc = 0.48541666666666666
User 83505 AUC after training: 0.48214285714285715
User 83505 does not improve AUC. Reverting changes.
Training on augumented user 11804 36/50 current_auc = 0.48541666666666666
User 11804 AUC after training: 0.48363095238095233
User 11804 does not improve AUC. Reverting changes.
Training on augumented user 35516 37/50 current_auc = 0.48541666666666666
User 35516 AUC after training: 0.4848214285714286
User 35516 does not improve AUC. Reverting changes.
Training on augumented user 19818 38/50 current_auc = 0.48541666666666666
User 19818 AUC after training: 0.47559523809523807
User 19818 does not improve AUC. Reverting changes.
Training on augumented user 114816 39/50 current_auc = 0.48541666666666666
User 114816 AUC after training: 0.4839285714285715
User 114816 does not improve AUC. Reverting changes.
Training on augumented user 101742 40/50 current_auc = 0.48541666666666666
User 101742 AUC after training: 0.4806547619047619
User 101742 does not improve AUC. Reverting changes.
Training on augumented user 28349 41/50 current_auc = 0.48541666666666666
User 28349 AUC after training: 0.48154761904761906
User 28349 does not improve AUC. Reverting changes.
Training on augumented user 126939 42/50 current_auc = 0.48541666666666666
User 126939 AUC after training: 0.48422619047619053
User 126939 does not improve AUC. Reverting changes.
Training on augumented user 89093 43/50 current_auc = 0.48541666666666666
User 89093 AUC after training: 0.4821428571428571
User 89093 does not improve AUC. Reverting changes.
Training on augumented user 69286 44/50 current_auc = 0.48541666666666666
User 69286 AUC after training: 0.48005952380952377
User 69286 does not improve AUC. Reverting changes.
Training on augumented user 88417 45/50 current_auc = 0.48541666666666666
User 88417 AUC after training: 0.48035714285714287
User 88417 does not improve AUC. Reverting changes.
Training on augumented user 10969 46/50 current_auc = 0.48541666666666666
User 10969 AUC after training: 0.48363095238095244
User 10969 does not improve AUC. Reverting changes.
Training on augumented user 14986 47/50 current_auc = 0.48541666666666666
User 14986 AUC after training: 0.4839285714285715
User 14986 does not improve AUC. Reverting changes.
Training on augumented user 124270 48/50 current_auc = 0.48541666666666666
User 124270 AUC after training: 0.48511904761904767
User 124270 does not improve AUC. Reverting changes.
Training on augumented user 52829 49/50 current_auc = 0.48541666666666666
User 52829 AUC after training: 0.48303571428571435
User 52829 does not improve AUC. Reverting changes.
[2024-12-02 18:09:21.112286] start test user 57171 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:21.558744] start test user 57171 58/568 recall augumented users by random, augumented_users = [46524, 58835, 50987, 39540, 84515, 23874, 105760, 44924, 51746, 57676, 32362, 97681, 123374, 65578, 36587, 64516, 72040, 129027, 126834, 24563, 32147, 46057, 39128, 109061, 84137, 86788, 113556, 10947, 31624, 39860, 108054, 103580, 74738, 131282, 113836, 10243, 57606, 6547, 36974, 113709, 42097, 4843, 7912, 119991, 81946, 91616, 35746, 40326, 103396, 579]
[2024-12-02 18:09:21.573618] user = 57171 Cloud 58/568
[2024-12-02 18:09:21.590805] user = 57171 Local 58/568
[2024-12-02 18:09:21.667012] user = 57171 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:23.693414] user = 57171 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.590873015873016
Training on augumented user 46524 0/50 current_auc = 0.590873015873016
User 46524 AUC after training: 0.5912698412698413
User 46524 improves AUC. Keeping the model.
Training on augumented user 58835 1/50 current_auc = 0.5912698412698413
User 58835 AUC after training: 0.5928571428571429
User 58835 improves AUC. Keeping the model.
Training on augumented user 50987 2/50 current_auc = 0.5928571428571429
User 50987 AUC after training: 0.5932539682539683
User 50987 improves AUC. Keeping the model.
Training on augumented user 39540 3/50 current_auc = 0.5932539682539683
User 39540 AUC after training: 0.5936507936507937
User 39540 improves AUC. Keeping the model.
Training on augumented user 84515 4/50 current_auc = 0.5936507936507937
User 84515 AUC after training: 0.5950396825396825
User 84515 improves AUC. Keeping the model.
Training on augumented user 23874 5/50 current_auc = 0.5950396825396825
User 23874 AUC after training: 0.5944444444444443
User 23874 does not improve AUC. Reverting changes.
Training on augumented user 105760 6/50 current_auc = 0.5950396825396825
User 105760 AUC after training: 0.5944444444444444
User 105760 does not improve AUC. Reverting changes.
Training on augumented user 44924 7/50 current_auc = 0.5950396825396825
User 44924 AUC after training: 0.5944444444444444
User 44924 does not improve AUC. Reverting changes.
Training on augumented user 51746 8/50 current_auc = 0.5950396825396825
User 51746 AUC after training: 0.5942460317460317
User 51746 does not improve AUC. Reverting changes.
Training on augumented user 57676 9/50 current_auc = 0.5950396825396825
User 57676 AUC after training: 0.5944444444444444
User 57676 does not improve AUC. Reverting changes.
Training on augumented user 32362 10/50 current_auc = 0.5950396825396825
User 32362 AUC after training: 0.594047619047619
User 32362 does not improve AUC. Reverting changes.
Training on augumented user 97681 11/50 current_auc = 0.5950396825396825
User 97681 AUC after training: 0.5954365079365079
User 97681 improves AUC. Keeping the model.
Training on augumented user 123374 12/50 current_auc = 0.5954365079365079
User 123374 AUC after training: 0.5938492063492065
User 123374 does not improve AUC. Reverting changes.
Training on augumented user 65578 13/50 current_auc = 0.5954365079365079
User 65578 AUC after training: 0.5942460317460317
User 65578 does not improve AUC. Reverting changes.
Training on augumented user 36587 14/50 current_auc = 0.5954365079365079
User 36587 AUC after training: 0.5932539682539683
User 36587 does not improve AUC. Reverting changes.
Training on augumented user 64516 15/50 current_auc = 0.5954365079365079
User 64516 AUC after training: 0.5952380952380952
User 64516 does not improve AUC. Reverting changes.
Training on augumented user 72040 16/50 current_auc = 0.5954365079365079
User 72040 AUC after training: 0.5948412698412698
User 72040 does not improve AUC. Reverting changes.
Training on augumented user 129027 17/50 current_auc = 0.5954365079365079
User 129027 AUC after training: 0.5952380952380953
User 129027 does not improve AUC. Reverting changes.
Training on augumented user 126834 18/50 current_auc = 0.5954365079365079
User 126834 AUC after training: 0.5954365079365079
User 126834 does not improve AUC. Reverting changes.
Training on augumented user 24563 19/50 current_auc = 0.5954365079365079
User 24563 AUC after training: 0.5930555555555556
User 24563 does not improve AUC. Reverting changes.
Training on augumented user 32147 20/50 current_auc = 0.5954365079365079
User 32147 AUC after training: 0.5956349206349206
User 32147 improves AUC. Keeping the model.
Training on augumented user 46057 21/50 current_auc = 0.5956349206349206
User 46057 AUC after training: 0.5952380952380952
User 46057 does not improve AUC. Reverting changes.
Training on augumented user 39128 22/50 current_auc = 0.5956349206349206
User 39128 AUC after training: 0.5928571428571429
User 39128 does not improve AUC. Reverting changes.
Training on augumented user 109061 23/50 current_auc = 0.5956349206349206
User 109061 AUC after training: 0.5938492063492063
User 109061 does not improve AUC. Reverting changes.
Training on augumented user 84137 24/50 current_auc = 0.5956349206349206
User 84137 AUC after training: 0.595436507936508
User 84137 does not improve AUC. Reverting changes.
Training on augumented user 86788 25/50 current_auc = 0.5956349206349206
User 86788 AUC after training: 0.5930555555555556
User 86788 does not improve AUC. Reverting changes.
Training on augumented user 113556 26/50 current_auc = 0.5956349206349206
User 113556 AUC after training: 0.5942460317460317
User 113556 does not improve AUC. Reverting changes.
Training on augumented user 10947 27/50 current_auc = 0.5956349206349206
User 10947 AUC after training: 0.5942460317460316
User 10947 does not improve AUC. Reverting changes.
Training on augumented user 31624 28/50 current_auc = 0.5956349206349206
User 31624 AUC after training: 0.594642857142857
User 31624 does not improve AUC. Reverting changes.
Training on augumented user 39860 29/50 current_auc = 0.5956349206349206
User 39860 AUC after training: 0.5948412698412698
User 39860 does not improve AUC. Reverting changes.
Training on augumented user 108054 30/50 current_auc = 0.5956349206349206
User 108054 AUC after training: 0.5946428571428571
User 108054 does not improve AUC. Reverting changes.
Training on augumented user 103580 31/50 current_auc = 0.5956349206349206
User 103580 AUC after training: 0.5950396825396825
User 103580 does not improve AUC. Reverting changes.
Training on augumented user 74738 32/50 current_auc = 0.5956349206349206
User 74738 AUC after training: 0.5954365079365079
User 74738 does not improve AUC. Reverting changes.
Training on augumented user 131282 33/50 current_auc = 0.5956349206349206
User 131282 AUC after training: 0.5950396825396825
User 131282 does not improve AUC. Reverting changes.
Training on augumented user 113836 34/50 current_auc = 0.5956349206349206
User 113836 AUC after training: 0.5946428571428573
User 113836 does not improve AUC. Reverting changes.
Training on augumented user 10243 35/50 current_auc = 0.5956349206349206
User 10243 AUC after training: 0.5942460317460317
User 10243 does not improve AUC. Reverting changes.
Training on augumented user 57606 36/50 current_auc = 0.5956349206349206
User 57606 AUC after training: 0.5948412698412698
User 57606 does not improve AUC. Reverting changes.
Training on augumented user 6547 37/50 current_auc = 0.5956349206349206
User 6547 AUC after training: 0.5946428571428571
User 6547 does not improve AUC. Reverting changes.
Training on augumented user 36974 38/50 current_auc = 0.5956349206349206
User 36974 AUC after training: 0.5944444444444444
User 36974 does not improve AUC. Reverting changes.
Training on augumented user 113709 39/50 current_auc = 0.5956349206349206
User 113709 AUC after training: 0.5946428571428571
User 113709 does not improve AUC. Reverting changes.
Training on augumented user 42097 40/50 current_auc = 0.5956349206349206
User 42097 AUC after training: 0.5948412698412697
User 42097 does not improve AUC. Reverting changes.
Training on augumented user 4843 41/50 current_auc = 0.5956349206349206
User 4843 AUC after training: 0.5950396825396825
User 4843 does not improve AUC. Reverting changes.
Training on augumented user 7912 42/50 current_auc = 0.5956349206349206
User 7912 AUC after training: 0.5942460317460317
User 7912 does not improve AUC. Reverting changes.
Training on augumented user 119991 43/50 current_auc = 0.5956349206349206
User 119991 AUC after training: 0.5956349206349206
User 119991 does not improve AUC. Reverting changes.
Training on augumented user 81946 44/50 current_auc = 0.5956349206349206
User 81946 AUC after training: 0.5948412698412698
User 81946 does not improve AUC. Reverting changes.
Training on augumented user 91616 45/50 current_auc = 0.5956349206349206
User 91616 AUC after training: 0.5942460317460317
User 91616 does not improve AUC. Reverting changes.
Training on augumented user 35746 46/50 current_auc = 0.5956349206349206
User 35746 AUC after training: 0.5946428571428571
User 35746 does not improve AUC. Reverting changes.
Training on augumented user 40326 47/50 current_auc = 0.5956349206349206
User 40326 AUC after training: 0.5950396825396825
User 40326 does not improve AUC. Reverting changes.
Training on augumented user 103396 48/50 current_auc = 0.5956349206349206
User 103396 AUC after training: 0.5950396825396825
User 103396 does not improve AUC. Reverting changes.
Training on augumented user 579 49/50 current_auc = 0.5956349206349206
User 579 AUC after training: 0.5942460317460317
User 579 does not improve AUC. Reverting changes.
[2024-12-02 18:09:53.137331] start test user 57191 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:53.582034] start test user 57191 59/568 recall augumented users by random, augumented_users = [35455, 73805, 65634, 89308, 38498, 118819, 33669, 34175, 21224, 94099, 107391, 106507, 120081, 32411, 3794, 75159, 85735, 82490, 68757, 9158, 21769, 90965, 21905, 37835, 63878, 64031, 47167, 13724, 34890, 116041, 114210, 131118, 102610, 79966, 62240, 79302, 123102, 76931, 68300, 91987, 17048, 33677, 42538, 134207, 97903, 1586, 110706, 105892, 101965, 54243]
[2024-12-02 18:09:53.596576] user = 57191 Cloud 59/568
[2024-12-02 18:09:53.612509] user = 57191 Local 59/568
[2024-12-02 18:09:53.658973] user = 57191 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:56.103831] user = 57191 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6458102620893319
Training on augumented user 35455 0/50 current_auc = 0.6458102620893319
User 35455 AUC after training: 0.6448874123292728
User 35455 does not improve AUC. Reverting changes.
Training on augumented user 73805 1/50 current_auc = 0.6458102620893319
User 73805 AUC after training: 0.6428571428571429
User 73805 does not improve AUC. Reverting changes.
Training on augumented user 65634 2/50 current_auc = 0.6458102620893319
User 65634 AUC after training: 0.64562569213732
User 65634 does not improve AUC. Reverting changes.
Training on augumented user 89308 3/50 current_auc = 0.6458102620893319
User 89308 AUC after training: 0.6432262827611666
User 89308 does not improve AUC. Reverting changes.
Training on augumented user 38498 4/50 current_auc = 0.6458102620893319
User 38498 AUC after training: 0.6406423034330011
User 38498 does not improve AUC. Reverting changes.
Training on augumented user 118819 5/50 current_auc = 0.6458102620893319
User 118819 AUC after training: 0.6458102620893319
User 118819 does not improve AUC. Reverting changes.
Training on augumented user 33669 6/50 current_auc = 0.6458102620893319
User 33669 AUC after training: 0.6435954226651901
User 33669 does not improve AUC. Reverting changes.
Training on augumented user 34175 7/50 current_auc = 0.6458102620893319
User 34175 AUC after training: 0.6437799926172019
User 34175 does not improve AUC. Reverting changes.
Training on augumented user 21224 8/50 current_auc = 0.6458102620893319
User 21224 AUC after training: 0.6463639719453673
User 21224 improves AUC. Keeping the model.
Training on augumented user 94099 9/50 current_auc = 0.6463639719453673
User 94099 AUC after training: 0.64562569213732
User 94099 does not improve AUC. Reverting changes.
Training on augumented user 107391 10/50 current_auc = 0.6463639719453673
User 107391 AUC after training: 0.6471022517534146
User 107391 improves AUC. Keeping the model.
Training on augumented user 106507 11/50 current_auc = 0.6471022517534146
User 106507 AUC after training: 0.6448874123292727
User 106507 does not improve AUC. Reverting changes.
Training on augumented user 120081 12/50 current_auc = 0.6471022517534146
User 120081 AUC after training: 0.6463639719453673
User 120081 does not improve AUC. Reverting changes.
Training on augumented user 32411 13/50 current_auc = 0.6471022517534146
User 32411 AUC after training: 0.6465485418973791
User 32411 does not improve AUC. Reverting changes.
Training on augumented user 3794 14/50 current_auc = 0.6471022517534146
User 3794 AUC after training: 0.6476559616094499
User 3794 improves AUC. Keeping the model.
Training on augumented user 75159 15/50 current_auc = 0.6476559616094499
User 75159 AUC after training: 0.6474713916574382
User 75159 does not improve AUC. Reverting changes.
Training on augumented user 85735 16/50 current_auc = 0.6476559616094499
User 85735 AUC after training: 0.6471022517534145
User 85735 does not improve AUC. Reverting changes.
Training on augumented user 82490 17/50 current_auc = 0.6476559616094499
User 82490 AUC after training: 0.6463639719453673
User 82490 does not improve AUC. Reverting changes.
Training on augumented user 68757 18/50 current_auc = 0.6476559616094499
User 68757 AUC after training: 0.6465485418973791
User 68757 does not improve AUC. Reverting changes.
Training on augumented user 9158 19/50 current_auc = 0.6476559616094499
User 9158 AUC after training: 0.6450719822812846
User 9158 does not improve AUC. Reverting changes.
Training on augumented user 21769 20/50 current_auc = 0.6476559616094499
User 21769 AUC after training: 0.6474713916574382
User 21769 does not improve AUC. Reverting changes.
Training on augumented user 90965 21/50 current_auc = 0.6476559616094499
User 90965 AUC after training: 0.64562569213732
User 90965 does not improve AUC. Reverting changes.
Training on augumented user 21905 22/50 current_auc = 0.6476559616094499
User 21905 AUC after training: 0.6454411221853082
User 21905 does not improve AUC. Reverting changes.
Training on augumented user 37835 23/50 current_auc = 0.6476559616094499
User 37835 AUC after training: 0.6465485418973791
User 37835 does not improve AUC. Reverting changes.
Training on augumented user 63878 24/50 current_auc = 0.6476559616094499
User 63878 AUC after training: 0.6465485418973792
User 63878 does not improve AUC. Reverting changes.
Training on augumented user 64031 25/50 current_auc = 0.6476559616094499
User 64031 AUC after training: 0.6471022517534146
User 64031 does not improve AUC. Reverting changes.
Training on augumented user 47167 26/50 current_auc = 0.6476559616094499
User 47167 AUC after training: 0.6472868217054264
User 47167 does not improve AUC. Reverting changes.
Training on augumented user 13724 27/50 current_auc = 0.6476559616094499
User 13724 AUC after training: 0.6461794019933554
User 13724 does not improve AUC. Reverting changes.
Training on augumented user 34890 28/50 current_auc = 0.6476559616094499
User 34890 AUC after training: 0.6461794019933554
User 34890 does not improve AUC. Reverting changes.
Training on augumented user 116041 29/50 current_auc = 0.6476559616094499
User 116041 AUC after training: 0.6450719822812846
User 116041 does not improve AUC. Reverting changes.
Training on augumented user 114210 30/50 current_auc = 0.6476559616094499
User 114210 AUC after training: 0.6458102620893319
User 114210 does not improve AUC. Reverting changes.
Training on augumented user 131118 31/50 current_auc = 0.6476559616094499
User 131118 AUC after training: 0.6452565522332965
User 131118 does not improve AUC. Reverting changes.
Training on augumented user 102610 32/50 current_auc = 0.6476559616094499
User 102610 AUC after training: 0.6458102620893318
User 102610 does not improve AUC. Reverting changes.
Training on augumented user 79966 33/50 current_auc = 0.6476559616094499
User 79966 AUC after training: 0.6445182724252492
User 79966 does not improve AUC. Reverting changes.
Training on augumented user 62240 34/50 current_auc = 0.6476559616094499
User 62240 AUC after training: 0.644702842377261
User 62240 does not improve AUC. Reverting changes.
Training on augumented user 79302 35/50 current_auc = 0.6476559616094499
User 79302 AUC after training: 0.64562569213732
User 79302 does not improve AUC. Reverting changes.
Training on augumented user 123102 36/50 current_auc = 0.6476559616094499
User 123102 AUC after training: 0.6467331118493909
User 123102 does not improve AUC. Reverting changes.
Training on augumented user 76931 37/50 current_auc = 0.6476559616094499
User 76931 AUC after training: 0.6450719822812846
User 76931 does not improve AUC. Reverting changes.
Training on augumented user 68300 38/50 current_auc = 0.6476559616094499
User 68300 AUC after training: 0.6474713916574382
User 68300 does not improve AUC. Reverting changes.
Training on augumented user 91987 39/50 current_auc = 0.6476559616094499
User 91987 AUC after training: 0.6471022517534145
User 91987 does not improve AUC. Reverting changes.
Training on augumented user 17048 40/50 current_auc = 0.6476559616094499
User 17048 AUC after training: 0.6480251015134736
User 17048 improves AUC. Keeping the model.
Training on augumented user 33677 41/50 current_auc = 0.6480251015134736
User 33677 AUC after training: 0.6476559616094499
User 33677 does not improve AUC. Reverting changes.
Training on augumented user 42538 42/50 current_auc = 0.6480251015134736
User 42538 AUC after training: 0.646733111849391
User 42538 does not improve AUC. Reverting changes.
Training on augumented user 134207 43/50 current_auc = 0.6480251015134736
User 134207 AUC after training: 0.646733111849391
User 134207 does not improve AUC. Reverting changes.
Training on augumented user 97903 44/50 current_auc = 0.6480251015134736
User 97903 AUC after training: 0.6471022517534146
User 97903 does not improve AUC. Reverting changes.
Training on augumented user 1586 45/50 current_auc = 0.6480251015134736
User 1586 AUC after training: 0.6482096714654855
User 1586 improves AUC. Keeping the model.
Training on augumented user 110706 46/50 current_auc = 0.6482096714654855
User 110706 AUC after training: 0.6482096714654855
User 110706 does not improve AUC. Reverting changes.
Training on augumented user 105892 47/50 current_auc = 0.6482096714654855
User 105892 AUC after training: 0.6482096714654855
User 105892 does not improve AUC. Reverting changes.
Training on augumented user 101965 48/50 current_auc = 0.6482096714654855
User 101965 AUC after training: 0.6485788113695091
User 101965 improves AUC. Keeping the model.
Training on augumented user 54243 49/50 current_auc = 0.6485788113695091
User 54243 AUC after training: 0.6489479512735327
User 54243 improves AUC. Keeping the model.
[2024-12-02 18:10:26.919891] start test user 57218 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:27.633739] start test user 57218 60/568 recall augumented users by random, augumented_users = [59230, 132326, 128941, 84384, 62348, 12447, 131409, 40611, 92844, 62733, 107423, 60433, 40346, 66212, 76911, 44574, 55030, 27847, 116219, 78221, 133887, 38022, 99191, 92379, 32752, 13435, 9806, 135757, 136057, 71333, 127117, 18348, 9093, 28725, 93566, 111176, 92436, 91578, 76026, 110216, 111288, 11421, 98819, 27492, 13684, 52621, 5212, 65447, 5689, 132787]
[2024-12-02 18:10:27.649156] user = 57218 Cloud 60/568
[2024-12-02 18:10:27.661793] user = 57218 Local 60/568
[2024-12-02 18:10:27.773835] user = 57218 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:30.071717] user = 57218 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7916666666666666
Training on augumented user 59230 0/50 current_auc = 0.7916666666666666
User 59230 AUC after training: 0.8035714285714286
User 59230 improves AUC. Keeping the model.
Training on augumented user 132326 1/50 current_auc = 0.8035714285714286
User 132326 AUC after training: 0.8035714285714286
User 132326 does not improve AUC. Reverting changes.
Training on augumented user 128941 2/50 current_auc = 0.8035714285714286
User 128941 AUC after training: 0.8035714285714286
User 128941 does not improve AUC. Reverting changes.
Training on augumented user 84384 3/50 current_auc = 0.8035714285714286
User 84384 AUC after training: 0.8035714285714286
User 84384 does not improve AUC. Reverting changes.
Training on augumented user 62348 4/50 current_auc = 0.8035714285714286
User 62348 AUC after training: 0.8035714285714286
User 62348 does not improve AUC. Reverting changes.
Training on augumented user 12447 5/50 current_auc = 0.8035714285714286
User 12447 AUC after training: 0.7976190476190476
User 12447 does not improve AUC. Reverting changes.
Training on augumented user 131409 6/50 current_auc = 0.8035714285714286
User 131409 AUC after training: 0.8035714285714286
User 131409 does not improve AUC. Reverting changes.
Training on augumented user 40611 7/50 current_auc = 0.8035714285714286
User 40611 AUC after training: 0.8035714285714286
User 40611 does not improve AUC. Reverting changes.
Training on augumented user 92844 8/50 current_auc = 0.8035714285714286
User 92844 AUC after training: 0.7976190476190476
User 92844 does not improve AUC. Reverting changes.
Training on augumented user 62733 9/50 current_auc = 0.8035714285714286
User 62733 AUC after training: 0.7976190476190476
User 62733 does not improve AUC. Reverting changes.
Training on augumented user 107423 10/50 current_auc = 0.8035714285714286
User 107423 AUC after training: 0.7976190476190476
User 107423 does not improve AUC. Reverting changes.
Training on augumented user 60433 11/50 current_auc = 0.8035714285714286
User 60433 AUC after training: 0.7976190476190476
User 60433 does not improve AUC. Reverting changes.
Training on augumented user 40346 12/50 current_auc = 0.8035714285714286
User 40346 AUC after training: 0.8035714285714286
User 40346 does not improve AUC. Reverting changes.
Training on augumented user 66212 13/50 current_auc = 0.8035714285714286
User 66212 AUC after training: 0.8035714285714286
User 66212 does not improve AUC. Reverting changes.
Training on augumented user 76911 14/50 current_auc = 0.8035714285714286
User 76911 AUC after training: 0.8035714285714286
User 76911 does not improve AUC. Reverting changes.
Training on augumented user 44574 15/50 current_auc = 0.8035714285714286
User 44574 AUC after training: 0.7916666666666666
User 44574 does not improve AUC. Reverting changes.
Training on augumented user 55030 16/50 current_auc = 0.8035714285714286
User 55030 AUC after training: 0.8035714285714286
User 55030 does not improve AUC. Reverting changes.
Training on augumented user 27847 17/50 current_auc = 0.8035714285714286
User 27847 AUC after training: 0.7976190476190476
User 27847 does not improve AUC. Reverting changes.
Training on augumented user 116219 18/50 current_auc = 0.8035714285714286
User 116219 AUC after training: 0.8035714285714286
User 116219 does not improve AUC. Reverting changes.
Training on augumented user 78221 19/50 current_auc = 0.8035714285714286
User 78221 AUC after training: 0.8035714285714286
User 78221 does not improve AUC. Reverting changes.
Training on augumented user 133887 20/50 current_auc = 0.8035714285714286
User 133887 AUC after training: 0.8035714285714286
User 133887 does not improve AUC. Reverting changes.
Training on augumented user 38022 21/50 current_auc = 0.8035714285714286
User 38022 AUC after training: 0.8035714285714286
User 38022 does not improve AUC. Reverting changes.
Training on augumented user 99191 22/50 current_auc = 0.8035714285714286
User 99191 AUC after training: 0.8035714285714286
User 99191 does not improve AUC. Reverting changes.
Training on augumented user 92379 23/50 current_auc = 0.8035714285714286
User 92379 AUC after training: 0.8035714285714286
User 92379 does not improve AUC. Reverting changes.
Training on augumented user 32752 24/50 current_auc = 0.8035714285714286
User 32752 AUC after training: 0.8035714285714286
User 32752 does not improve AUC. Reverting changes.
Training on augumented user 13435 25/50 current_auc = 0.8035714285714286
User 13435 AUC after training: 0.8035714285714286
User 13435 does not improve AUC. Reverting changes.
Training on augumented user 9806 26/50 current_auc = 0.8035714285714286
User 9806 AUC after training: 0.8035714285714286
User 9806 does not improve AUC. Reverting changes.
Training on augumented user 135757 27/50 current_auc = 0.8035714285714286
User 135757 AUC after training: 0.8035714285714286
User 135757 does not improve AUC. Reverting changes.
Training on augumented user 136057 28/50 current_auc = 0.8035714285714286
User 136057 AUC after training: 0.8035714285714286
User 136057 does not improve AUC. Reverting changes.
Training on augumented user 71333 29/50 current_auc = 0.8035714285714286
User 71333 AUC after training: 0.7976190476190476
User 71333 does not improve AUC. Reverting changes.
Training on augumented user 127117 30/50 current_auc = 0.8035714285714286
User 127117 AUC after training: 0.8035714285714286
User 127117 does not improve AUC. Reverting changes.
Training on augumented user 18348 31/50 current_auc = 0.8035714285714286
User 18348 AUC after training: 0.8035714285714286
User 18348 does not improve AUC. Reverting changes.
Training on augumented user 9093 32/50 current_auc = 0.8035714285714286
User 9093 AUC after training: 0.8035714285714286
User 9093 does not improve AUC. Reverting changes.
Training on augumented user 28725 33/50 current_auc = 0.8035714285714286
User 28725 AUC after training: 0.7976190476190476
User 28725 does not improve AUC. Reverting changes.
Training on augumented user 93566 34/50 current_auc = 0.8035714285714286
User 93566 AUC after training: 0.7976190476190476
User 93566 does not improve AUC. Reverting changes.
Training on augumented user 111176 35/50 current_auc = 0.8035714285714286
User 111176 AUC after training: 0.7916666666666666
User 111176 does not improve AUC. Reverting changes.
Training on augumented user 92436 36/50 current_auc = 0.8035714285714286
User 92436 AUC after training: 0.8035714285714286
User 92436 does not improve AUC. Reverting changes.
Training on augumented user 91578 37/50 current_auc = 0.8035714285714286
User 91578 AUC after training: 0.8035714285714286
User 91578 does not improve AUC. Reverting changes.
Training on augumented user 76026 38/50 current_auc = 0.8035714285714286
User 76026 AUC after training: 0.8035714285714286
User 76026 does not improve AUC. Reverting changes.
Training on augumented user 110216 39/50 current_auc = 0.8035714285714286
User 110216 AUC after training: 0.8035714285714286
User 110216 does not improve AUC. Reverting changes.
Training on augumented user 111288 40/50 current_auc = 0.8035714285714286
User 111288 AUC after training: 0.7916666666666666
User 111288 does not improve AUC. Reverting changes.
Training on augumented user 11421 41/50 current_auc = 0.8035714285714286
User 11421 AUC after training: 0.8035714285714286
User 11421 does not improve AUC. Reverting changes.
Training on augumented user 98819 42/50 current_auc = 0.8035714285714286
User 98819 AUC after training: 0.7976190476190476
User 98819 does not improve AUC. Reverting changes.
Training on augumented user 27492 43/50 current_auc = 0.8035714285714286
User 27492 AUC after training: 0.8035714285714286
User 27492 does not improve AUC. Reverting changes.
Training on augumented user 13684 44/50 current_auc = 0.8035714285714286
User 13684 AUC after training: 0.8035714285714286
User 13684 does not improve AUC. Reverting changes.
Training on augumented user 52621 45/50 current_auc = 0.8035714285714286
User 52621 AUC after training: 0.8035714285714286
User 52621 does not improve AUC. Reverting changes.
Training on augumented user 5212 46/50 current_auc = 0.8035714285714286
User 5212 AUC after training: 0.7976190476190476
User 5212 does not improve AUC. Reverting changes.
Training on augumented user 65447 47/50 current_auc = 0.8035714285714286
User 65447 AUC after training: 0.8035714285714286
User 65447 does not improve AUC. Reverting changes.
Training on augumented user 5689 48/50 current_auc = 0.8035714285714286
User 5689 AUC after training: 0.8035714285714286
User 5689 does not improve AUC. Reverting changes.
Training on augumented user 132787 49/50 current_auc = 0.8035714285714286
User 132787 AUC after training: 0.8035714285714286
User 132787 does not improve AUC. Reverting changes.
[2024-12-02 18:10:58.410563] start test user 57220 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:58.987931] start test user 57220 61/568 recall augumented users by random, augumented_users = [83223, 37098, 44567, 58611, 92285, 4710, 108222, 28711, 686, 104494, 122558, 116984, 50309, 54866, 108768, 98476, 101459, 55359, 124362, 136520, 121115, 91961, 127721, 117521, 64041, 14823, 18657, 50734, 14929, 126249, 22946, 35344, 107131, 72948, 45728, 53236, 48914, 13057, 108313, 66253, 68290, 892, 86407, 9064, 98900, 109959, 43987, 3347, 81706, 81167]
[2024-12-02 18:10:59.003014] user = 57220 Cloud 61/568
[2024-12-02 18:10:59.036469] user = 57220 Local 61/568
[2024-12-02 18:10:59.075277] user = 57220 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:01.731393] user = 57220 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7269345238095238
Training on augumented user 83223 0/50 current_auc = 0.7269345238095238
User 83223 AUC after training: 0.7287946428571429
User 83223 improves AUC. Keeping the model.
Training on augumented user 37098 1/50 current_auc = 0.7287946428571429
User 37098 AUC after training: 0.7273065476190477
User 37098 does not improve AUC. Reverting changes.
Training on augumented user 44567 2/50 current_auc = 0.7287946428571429
User 44567 AUC after training: 0.7269345238095237
User 44567 does not improve AUC. Reverting changes.
Training on augumented user 58611 3/50 current_auc = 0.7287946428571429
User 58611 AUC after training: 0.7291666666666666
User 58611 improves AUC. Keeping the model.
Training on augumented user 92285 4/50 current_auc = 0.7291666666666666
User 92285 AUC after training: 0.7291666666666666
User 92285 does not improve AUC. Reverting changes.
Training on augumented user 4710 5/50 current_auc = 0.7291666666666666
User 4710 AUC after training: 0.7291666666666669
User 4710 improves AUC. Keeping the model.
Training on augumented user 108222 6/50 current_auc = 0.7291666666666669
User 108222 AUC after training: 0.7302827380952381
User 108222 improves AUC. Keeping the model.
Training on augumented user 28711 7/50 current_auc = 0.7302827380952381
User 28711 AUC after training: 0.7284226190476191
User 28711 does not improve AUC. Reverting changes.
Training on augumented user 686 8/50 current_auc = 0.7302827380952381
User 686 AUC after training: 0.7306547619047619
User 686 improves AUC. Keeping the model.
Training on augumented user 104494 9/50 current_auc = 0.7306547619047619
User 104494 AUC after training: 0.7306547619047619
User 104494 does not improve AUC. Reverting changes.
Training on augumented user 122558 10/50 current_auc = 0.7306547619047619
User 122558 AUC after training: 0.7302827380952381
User 122558 does not improve AUC. Reverting changes.
Training on augumented user 116984 11/50 current_auc = 0.7306547619047619
User 116984 AUC after training: 0.7273065476190476
User 116984 does not improve AUC. Reverting changes.
Training on augumented user 50309 12/50 current_auc = 0.7306547619047619
User 50309 AUC after training: 0.730654761904762
User 50309 improves AUC. Keeping the model.
Training on augumented user 54866 13/50 current_auc = 0.730654761904762
User 54866 AUC after training: 0.7302827380952381
User 54866 does not improve AUC. Reverting changes.
Training on augumented user 108768 14/50 current_auc = 0.730654761904762
User 108768 AUC after training: 0.7306547619047619
User 108768 does not improve AUC. Reverting changes.
Training on augumented user 98476 15/50 current_auc = 0.730654761904762
User 98476 AUC after training: 0.7302827380952381
User 98476 does not improve AUC. Reverting changes.
Training on augumented user 101459 16/50 current_auc = 0.730654761904762
User 101459 AUC after training: 0.7295386904761905
User 101459 does not improve AUC. Reverting changes.
Training on augumented user 55359 17/50 current_auc = 0.730654761904762
User 55359 AUC after training: 0.7299107142857143
User 55359 does not improve AUC. Reverting changes.
Training on augumented user 124362 18/50 current_auc = 0.730654761904762
User 124362 AUC after training: 0.7280505952380953
User 124362 does not improve AUC. Reverting changes.
Training on augumented user 136520 19/50 current_auc = 0.730654761904762
User 136520 AUC after training: 0.7302827380952381
User 136520 does not improve AUC. Reverting changes.
Training on augumented user 121115 20/50 current_auc = 0.730654761904762
User 121115 AUC after training: 0.7317708333333333
User 121115 improves AUC. Keeping the model.
Training on augumented user 91961 21/50 current_auc = 0.7317708333333333
User 91961 AUC after training: 0.7317708333333334
User 91961 improves AUC. Keeping the model.
Training on augumented user 127721 22/50 current_auc = 0.7317708333333334
User 127721 AUC after training: 0.7321428571428571
User 127721 improves AUC. Keeping the model.
Training on augumented user 117521 23/50 current_auc = 0.7321428571428571
User 117521 AUC after training: 0.7295386904761905
User 117521 does not improve AUC. Reverting changes.
Training on augumented user 64041 24/50 current_auc = 0.7321428571428571
User 64041 AUC after training: 0.730282738095238
User 64041 does not improve AUC. Reverting changes.
Training on augumented user 14823 25/50 current_auc = 0.7321428571428571
User 14823 AUC after training: 0.7310267857142857
User 14823 does not improve AUC. Reverting changes.
Training on augumented user 18657 26/50 current_auc = 0.7321428571428571
User 18657 AUC after training: 0.7291666666666665
User 18657 does not improve AUC. Reverting changes.
Training on augumented user 50734 27/50 current_auc = 0.7321428571428571
User 50734 AUC after training: 0.7310267857142857
User 50734 does not improve AUC. Reverting changes.
Training on augumented user 14929 28/50 current_auc = 0.7321428571428571
User 14929 AUC after training: 0.7325148809523809
User 14929 improves AUC. Keeping the model.
Training on augumented user 126249 29/50 current_auc = 0.7325148809523809
User 126249 AUC after training: 0.7299107142857142
User 126249 does not improve AUC. Reverting changes.
Training on augumented user 22946 30/50 current_auc = 0.7325148809523809
User 22946 AUC after training: 0.7295386904761905
User 22946 does not improve AUC. Reverting changes.
Training on augumented user 35344 31/50 current_auc = 0.7325148809523809
User 35344 AUC after training: 0.7321428571428571
User 35344 does not improve AUC. Reverting changes.
Training on augumented user 107131 32/50 current_auc = 0.7325148809523809
User 107131 AUC after training: 0.732514880952381
User 107131 improves AUC. Keeping the model.
Training on augumented user 72948 33/50 current_auc = 0.732514880952381
User 72948 AUC after training: 0.7347470238095238
User 72948 improves AUC. Keeping the model.
Training on augumented user 45728 34/50 current_auc = 0.7347470238095238
User 45728 AUC after training: 0.7273065476190476
User 45728 does not improve AUC. Reverting changes.
Training on augumented user 53236 35/50 current_auc = 0.7347470238095238
User 53236 AUC after training: 0.7347470238095238
User 53236 does not improve AUC. Reverting changes.
Training on augumented user 48914 36/50 current_auc = 0.7347470238095238
User 48914 AUC after training: 0.7351190476190476
User 48914 improves AUC. Keeping the model.
Training on augumented user 13057 37/50 current_auc = 0.7351190476190476
User 13057 AUC after training: 0.7343750000000001
User 13057 does not improve AUC. Reverting changes.
Training on augumented user 108313 38/50 current_auc = 0.7351190476190476
User 108313 AUC after training: 0.7328869047619047
User 108313 does not improve AUC. Reverting changes.
Training on augumented user 66253 39/50 current_auc = 0.7351190476190476
User 66253 AUC after training: 0.7343750000000001
User 66253 does not improve AUC. Reverting changes.
Training on augumented user 68290 40/50 current_auc = 0.7351190476190476
User 68290 AUC after training: 0.734375
User 68290 does not improve AUC. Reverting changes.
Training on augumented user 892 41/50 current_auc = 0.7351190476190476
User 892 AUC after training: 0.7254464285714285
User 892 does not improve AUC. Reverting changes.
Training on augumented user 86407 42/50 current_auc = 0.7351190476190476
User 86407 AUC after training: 0.7340029761904762
User 86407 does not improve AUC. Reverting changes.
Training on augumented user 9064 43/50 current_auc = 0.7351190476190476
User 9064 AUC after training: 0.7336309523809523
User 9064 does not improve AUC. Reverting changes.
Training on augumented user 98900 44/50 current_auc = 0.7351190476190476
User 98900 AUC after training: 0.7336309523809523
User 98900 does not improve AUC. Reverting changes.
Training on augumented user 109959 45/50 current_auc = 0.7351190476190476
User 109959 AUC after training: 0.7347470238095238
User 109959 does not improve AUC. Reverting changes.
Training on augumented user 43987 46/50 current_auc = 0.7351190476190476
User 43987 AUC after training: 0.7351190476190477
User 43987 improves AUC. Keeping the model.
Training on augumented user 3347 47/50 current_auc = 0.7351190476190477
User 3347 AUC after training: 0.7340029761904762
User 3347 does not improve AUC. Reverting changes.
Training on augumented user 81706 48/50 current_auc = 0.7351190476190477
User 81706 AUC after training: 0.7347470238095238
User 81706 does not improve AUC. Reverting changes.
Training on augumented user 81167 49/50 current_auc = 0.7351190476190477
User 81167 AUC after training: 0.7328869047619048
User 81167 does not improve AUC. Reverting changes.
[2024-12-02 18:11:32.517340] start test user 57242 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:33.212393] start test user 57242 62/568 recall augumented users by random, augumented_users = [3316, 80549, 87698, 119752, 137056, 111810, 118620, 86165, 101967, 100403, 117868, 75557, 86243, 45300, 129179, 56904, 95931, 9481, 69328, 2794, 4037, 46236, 8768, 130380, 51071, 8405, 15813, 87223, 76208, 27748, 92888, 103356, 109624, 25210, 40944, 7519, 65823, 66, 124419, 134154, 31469, 105733, 33861, 137671, 64203, 23962, 87665, 69446, 104706, 127202]
[2024-12-02 18:11:33.227959] user = 57242 Cloud 62/568
[2024-12-02 18:11:33.239293] user = 57242 Local 62/568
[2024-12-02 18:11:33.285351] user = 57242 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:37.282271] user = 57242 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9642857142857143
Training on augumented user 3316 0/50 current_auc = 0.9642857142857143
User 3316 AUC after training: 0.9642857142857143
User 3316 does not improve AUC. Reverting changes.
Training on augumented user 80549 1/50 current_auc = 0.9642857142857143
User 80549 AUC after training: 0.9285714285714286
User 80549 does not improve AUC. Reverting changes.
Training on augumented user 87698 2/50 current_auc = 0.9642857142857143
User 87698 AUC after training: 0.9285714285714286
User 87698 does not improve AUC. Reverting changes.
Training on augumented user 119752 3/50 current_auc = 0.9642857142857143
User 119752 AUC after training: 0.9285714285714286
User 119752 does not improve AUC. Reverting changes.
Training on augumented user 137056 4/50 current_auc = 0.9642857142857143
User 137056 AUC after training: 0.9285714285714286
User 137056 does not improve AUC. Reverting changes.
Training on augumented user 111810 5/50 current_auc = 0.9642857142857143
User 111810 AUC after training: 0.9285714285714286
User 111810 does not improve AUC. Reverting changes.
Training on augumented user 118620 6/50 current_auc = 0.9642857142857143
User 118620 AUC after training: 0.9642857142857143
User 118620 does not improve AUC. Reverting changes.
Training on augumented user 86165 7/50 current_auc = 0.9642857142857143
User 86165 AUC after training: 0.9285714285714286
User 86165 does not improve AUC. Reverting changes.
Training on augumented user 101967 8/50 current_auc = 0.9642857142857143
User 101967 AUC after training: 0.9642857142857143
User 101967 does not improve AUC. Reverting changes.
Training on augumented user 100403 9/50 current_auc = 0.9642857142857143
User 100403 AUC after training: 0.9642857142857143
User 100403 does not improve AUC. Reverting changes.
Training on augumented user 117868 10/50 current_auc = 0.9642857142857143
User 117868 AUC after training: 0.9642857142857143
User 117868 does not improve AUC. Reverting changes.
Training on augumented user 75557 11/50 current_auc = 0.9642857142857143
User 75557 AUC after training: 0.9642857142857143
User 75557 does not improve AUC. Reverting changes.
Training on augumented user 86243 12/50 current_auc = 0.9642857142857143
User 86243 AUC after training: 0.9285714285714286
User 86243 does not improve AUC. Reverting changes.
Training on augumented user 45300 13/50 current_auc = 0.9642857142857143
User 45300 AUC after training: 0.9285714285714286
User 45300 does not improve AUC. Reverting changes.
Training on augumented user 129179 14/50 current_auc = 0.9642857142857143
User 129179 AUC after training: 0.9642857142857143
User 129179 does not improve AUC. Reverting changes.
Training on augumented user 56904 15/50 current_auc = 0.9642857142857143
User 56904 AUC after training: 0.9642857142857143
User 56904 does not improve AUC. Reverting changes.
Training on augumented user 95931 16/50 current_auc = 0.9642857142857143
User 95931 AUC after training: 0.9285714285714286
User 95931 does not improve AUC. Reverting changes.
Training on augumented user 9481 17/50 current_auc = 0.9642857142857143
User 9481 AUC after training: 0.9642857142857143
User 9481 does not improve AUC. Reverting changes.
Training on augumented user 69328 18/50 current_auc = 0.9642857142857143
User 69328 AUC after training: 0.9642857142857143
User 69328 does not improve AUC. Reverting changes.
Training on augumented user 2794 19/50 current_auc = 0.9642857142857143
User 2794 AUC after training: 0.9642857142857143
User 2794 does not improve AUC. Reverting changes.
Training on augumented user 4037 20/50 current_auc = 0.9642857142857143
User 4037 AUC after training: 0.9642857142857143
User 4037 does not improve AUC. Reverting changes.
Training on augumented user 46236 21/50 current_auc = 0.9642857142857143
User 46236 AUC after training: 0.9642857142857143
User 46236 does not improve AUC. Reverting changes.
Training on augumented user 8768 22/50 current_auc = 0.9642857142857143
User 8768 AUC after training: 0.9285714285714286
User 8768 does not improve AUC. Reverting changes.
Training on augumented user 130380 23/50 current_auc = 0.9642857142857143
User 130380 AUC after training: 0.9642857142857143
User 130380 does not improve AUC. Reverting changes.
Training on augumented user 51071 24/50 current_auc = 0.9642857142857143
User 51071 AUC after training: 0.9642857142857143
User 51071 does not improve AUC. Reverting changes.
Training on augumented user 8405 25/50 current_auc = 0.9642857142857143
User 8405 AUC after training: 0.9642857142857143
User 8405 does not improve AUC. Reverting changes.
Training on augumented user 15813 26/50 current_auc = 0.9642857142857143
User 15813 AUC after training: 0.9642857142857143
User 15813 does not improve AUC. Reverting changes.
Training on augumented user 87223 27/50 current_auc = 0.9642857142857143
User 87223 AUC after training: 0.9642857142857143
User 87223 does not improve AUC. Reverting changes.
Training on augumented user 76208 28/50 current_auc = 0.9642857142857143
User 76208 AUC after training: 0.9642857142857143
User 76208 does not improve AUC. Reverting changes.
Training on augumented user 27748 29/50 current_auc = 0.9642857142857143
User 27748 AUC after training: 0.9285714285714286
User 27748 does not improve AUC. Reverting changes.
Training on augumented user 92888 30/50 current_auc = 0.9642857142857143
User 92888 AUC after training: 0.9642857142857143
User 92888 does not improve AUC. Reverting changes.
Training on augumented user 103356 31/50 current_auc = 0.9642857142857143
User 103356 AUC after training: 0.9642857142857143
User 103356 does not improve AUC. Reverting changes.
Training on augumented user 109624 32/50 current_auc = 0.9642857142857143
User 109624 AUC after training: 0.9642857142857143
User 109624 does not improve AUC. Reverting changes.
Training on augumented user 25210 33/50 current_auc = 0.9642857142857143
User 25210 AUC after training: 0.9642857142857143
User 25210 does not improve AUC. Reverting changes.
Training on augumented user 40944 34/50 current_auc = 0.9642857142857143
User 40944 AUC after training: 0.9642857142857143
User 40944 does not improve AUC. Reverting changes.
Training on augumented user 7519 35/50 current_auc = 0.9642857142857143
User 7519 AUC after training: 0.9285714285714286
User 7519 does not improve AUC. Reverting changes.
Training on augumented user 65823 36/50 current_auc = 0.9642857142857143
User 65823 AUC after training: 0.9285714285714286
User 65823 does not improve AUC. Reverting changes.
Training on augumented user 66 37/50 current_auc = 0.9642857142857143
User 66 AUC after training: 0.9285714285714286
User 66 does not improve AUC. Reverting changes.
Training on augumented user 124419 38/50 current_auc = 0.9642857142857143
User 124419 AUC after training: 0.9285714285714286
User 124419 does not improve AUC. Reverting changes.
Training on augumented user 134154 39/50 current_auc = 0.9642857142857143
User 134154 AUC after training: 0.9285714285714286
User 134154 does not improve AUC. Reverting changes.
Training on augumented user 31469 40/50 current_auc = 0.9642857142857143
User 31469 AUC after training: 0.9285714285714286
User 31469 does not improve AUC. Reverting changes.
Training on augumented user 105733 41/50 current_auc = 0.9642857142857143
User 105733 AUC after training: 0.9642857142857143
User 105733 does not improve AUC. Reverting changes.
Training on augumented user 33861 42/50 current_auc = 0.9642857142857143
User 33861 AUC after training: 0.9285714285714286
User 33861 does not improve AUC. Reverting changes.
Training on augumented user 137671 43/50 current_auc = 0.9642857142857143
User 137671 AUC after training: 0.9285714285714286
User 137671 does not improve AUC. Reverting changes.
Training on augumented user 64203 44/50 current_auc = 0.9642857142857143
User 64203 AUC after training: 0.9285714285714286
User 64203 does not improve AUC. Reverting changes.
Training on augumented user 23962 45/50 current_auc = 0.9642857142857143
User 23962 AUC after training: 0.9285714285714286
User 23962 does not improve AUC. Reverting changes.
Training on augumented user 87665 46/50 current_auc = 0.9642857142857143
User 87665 AUC after training: 0.9285714285714286
User 87665 does not improve AUC. Reverting changes.
Training on augumented user 69446 47/50 current_auc = 0.9642857142857143
User 69446 AUC after training: 0.9642857142857143
User 69446 does not improve AUC. Reverting changes.
Training on augumented user 104706 48/50 current_auc = 0.9642857142857143
User 104706 AUC after training: 0.9285714285714286
User 104706 does not improve AUC. Reverting changes.
Training on augumented user 127202 49/50 current_auc = 0.9642857142857143
User 127202 AUC after training: 0.9642857142857143
User 127202 does not improve AUC. Reverting changes.
[2024-12-02 18:12:07.116829] start test user 57251 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:07.853935] start test user 57251 63/568 recall augumented users by random, augumented_users = [85361, 38640, 113796, 62819, 107337, 89880, 114449, 138082, 69028, 35482, 25929, 123101, 87981, 25508, 102139, 107751, 99353, 18299, 48497, 90466, 61815, 22354, 10704, 61233, 109144, 101539, 78122, 134393, 53177, 50861, 75800, 116392, 124135, 92342, 56585, 48634, 116402, 81343, 9950, 114697, 43557, 22063, 34363, 28479, 109679, 117205, 46978, 34431, 29906, 108917]
[2024-12-02 18:12:07.888997] user = 57251 Cloud 63/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:07.897168] user = 57251 Local 63/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:07.950560] user = 57251 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:10.670366] user = 57251 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 85361 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85361 AUC after training: 0.5
User 85361 does not improve AUC. Reverting changes.
Training on augumented user 38640 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38640 AUC after training: 0.5
User 38640 does not improve AUC. Reverting changes.
Training on augumented user 113796 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113796 AUC after training: 0.5
User 113796 does not improve AUC. Reverting changes.
Training on augumented user 62819 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62819 AUC after training: 0.5
User 62819 does not improve AUC. Reverting changes.
Training on augumented user 107337 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107337 AUC after training: 0.5
User 107337 does not improve AUC. Reverting changes.
Training on augumented user 89880 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89880 AUC after training: 0.5
User 89880 does not improve AUC. Reverting changes.
Training on augumented user 114449 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114449 AUC after training: 0.5
User 114449 does not improve AUC. Reverting changes.
Training on augumented user 138082 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138082 AUC after training: 0.5
User 138082 does not improve AUC. Reverting changes.
Training on augumented user 69028 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69028 AUC after training: 0.5
User 69028 does not improve AUC. Reverting changes.
Training on augumented user 35482 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35482 AUC after training: 0.5
User 35482 does not improve AUC. Reverting changes.
Training on augumented user 25929 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25929 AUC after training: 0.5
User 25929 does not improve AUC. Reverting changes.
Training on augumented user 123101 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123101 AUC after training: 0.5
User 123101 does not improve AUC. Reverting changes.
Training on augumented user 87981 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87981 AUC after training: 0.5
User 87981 does not improve AUC. Reverting changes.
Training on augumented user 25508 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25508 AUC after training: 0.5
User 25508 does not improve AUC. Reverting changes.
Training on augumented user 102139 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102139 AUC after training: 0.5
User 102139 does not improve AUC. Reverting changes.
Training on augumented user 107751 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107751 AUC after training: 0.5
User 107751 does not improve AUC. Reverting changes.
Training on augumented user 99353 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99353 AUC after training: 0.5
User 99353 does not improve AUC. Reverting changes.
Training on augumented user 18299 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18299 AUC after training: 0.5
User 18299 does not improve AUC. Reverting changes.
Training on augumented user 48497 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48497 AUC after training: 0.5
User 48497 does not improve AUC. Reverting changes.
Training on augumented user 90466 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90466 AUC after training: 0.5
User 90466 does not improve AUC. Reverting changes.
Training on augumented user 61815 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61815 AUC after training: 0.5
User 61815 does not improve AUC. Reverting changes.
Training on augumented user 22354 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22354 AUC after training: 0.5
User 22354 does not improve AUC. Reverting changes.
Training on augumented user 10704 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10704 AUC after training: 0.5
User 10704 does not improve AUC. Reverting changes.
Training on augumented user 61233 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61233 AUC after training: 0.5
User 61233 does not improve AUC. Reverting changes.
Training on augumented user 109144 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109144 AUC after training: 0.5
User 109144 does not improve AUC. Reverting changes.
Training on augumented user 101539 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101539 AUC after training: 0.5
User 101539 does not improve AUC. Reverting changes.
Training on augumented user 78122 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78122 AUC after training: 0.5
User 78122 does not improve AUC. Reverting changes.
Training on augumented user 134393 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134393 AUC after training: 0.5
User 134393 does not improve AUC. Reverting changes.
Training on augumented user 53177 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53177 AUC after training: 0.5
User 53177 does not improve AUC. Reverting changes.
Training on augumented user 50861 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50861 AUC after training: 0.5
User 50861 does not improve AUC. Reverting changes.
Training on augumented user 75800 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75800 AUC after training: 0.5
User 75800 does not improve AUC. Reverting changes.
Training on augumented user 116392 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116392 AUC after training: 0.5
User 116392 does not improve AUC. Reverting changes.
Training on augumented user 124135 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124135 AUC after training: 0.5
User 124135 does not improve AUC. Reverting changes.
Training on augumented user 92342 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92342 AUC after training: 0.5
User 92342 does not improve AUC. Reverting changes.
Training on augumented user 56585 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56585 AUC after training: 0.5
User 56585 does not improve AUC. Reverting changes.
Training on augumented user 48634 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48634 AUC after training: 0.5
User 48634 does not improve AUC. Reverting changes.
Training on augumented user 116402 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116402 AUC after training: 0.5
User 116402 does not improve AUC. Reverting changes.
Training on augumented user 81343 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81343 AUC after training: 0.5
User 81343 does not improve AUC. Reverting changes.
Training on augumented user 9950 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9950 AUC after training: 0.5
User 9950 does not improve AUC. Reverting changes.
Training on augumented user 114697 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114697 AUC after training: 0.5
User 114697 does not improve AUC. Reverting changes.
Training on augumented user 43557 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43557 AUC after training: 0.5
User 43557 does not improve AUC. Reverting changes.
Training on augumented user 22063 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22063 AUC after training: 0.5
User 22063 does not improve AUC. Reverting changes.
Training on augumented user 34363 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34363 AUC after training: 0.5
User 34363 does not improve AUC. Reverting changes.
Training on augumented user 28479 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28479 AUC after training: 0.5
User 28479 does not improve AUC. Reverting changes.
Training on augumented user 109679 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109679 AUC after training: 0.5
User 109679 does not improve AUC. Reverting changes.
Training on augumented user 117205 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117205 AUC after training: 0.5
User 117205 does not improve AUC. Reverting changes.
Training on augumented user 46978 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46978 AUC after training: 0.5
User 46978 does not improve AUC. Reverting changes.
Training on augumented user 34431 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34431 AUC after training: 0.5
User 34431 does not improve AUC. Reverting changes.
Training on augumented user 29906 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29906 AUC after training: 0.5
User 29906 does not improve AUC. Reverting changes.
Training on augumented user 108917 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108917 AUC after training: 0.5
User 108917 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:38.792438] start test user 57349 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:39.285264] start test user 57349 64/568 recall augumented users by random, augumented_users = [104851, 46319, 5020, 36440, 74801, 94641, 94754, 99413, 121911, 127838, 19695, 60692, 18235, 16558, 119165, 91653, 101578, 12657, 18727, 96101, 89176, 90419, 116422, 112962, 39658, 98112, 68829, 86160, 23033, 45449, 16010, 10489, 41240, 78288, 131105, 95337, 46033, 72680, 69347, 62415, 15484, 63152, 52000, 5556, 91596, 101229, 72402, 73837, 32225, 85612]
[2024-12-02 18:12:39.299900] user = 57349 Cloud 64/568
[2024-12-02 18:12:39.310241] user = 57349 Local 64/568
[2024-12-02 18:12:39.391309] user = 57349 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:41.222018] user = 57349 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6205128205128205
Training on augumented user 104851 0/50 current_auc = 0.6205128205128205
User 104851 AUC after training: 0.6153846153846154
User 104851 does not improve AUC. Reverting changes.
Training on augumented user 46319 1/50 current_auc = 0.6205128205128205
User 46319 AUC after training: 0.6102564102564103
User 46319 does not improve AUC. Reverting changes.
Training on augumented user 5020 2/50 current_auc = 0.6205128205128205
User 5020 AUC after training: 0.6205128205128205
User 5020 does not improve AUC. Reverting changes.
Training on augumented user 36440 3/50 current_auc = 0.6205128205128205
User 36440 AUC after training: 0.6051282051282052
User 36440 does not improve AUC. Reverting changes.
Training on augumented user 74801 4/50 current_auc = 0.6205128205128205
User 74801 AUC after training: 0.6205128205128205
User 74801 does not improve AUC. Reverting changes.
Training on augumented user 94641 5/50 current_auc = 0.6205128205128205
User 94641 AUC after training: 0.6102564102564103
User 94641 does not improve AUC. Reverting changes.
Training on augumented user 94754 6/50 current_auc = 0.6205128205128205
User 94754 AUC after training: 0.6205128205128205
User 94754 does not improve AUC. Reverting changes.
Training on augumented user 99413 7/50 current_auc = 0.6205128205128205
User 99413 AUC after training: 0.6205128205128205
User 99413 does not improve AUC. Reverting changes.
Training on augumented user 121911 8/50 current_auc = 0.6205128205128205
User 121911 AUC after training: 0.6153846153846154
User 121911 does not improve AUC. Reverting changes.
Training on augumented user 127838 9/50 current_auc = 0.6205128205128205
User 127838 AUC after training: 0.6153846153846154
User 127838 does not improve AUC. Reverting changes.
Training on augumented user 19695 10/50 current_auc = 0.6205128205128205
User 19695 AUC after training: 0.6153846153846154
User 19695 does not improve AUC. Reverting changes.
Training on augumented user 60692 11/50 current_auc = 0.6205128205128205
User 60692 AUC after training: 0.6153846153846154
User 60692 does not improve AUC. Reverting changes.
Training on augumented user 18235 12/50 current_auc = 0.6205128205128205
User 18235 AUC after training: 0.6205128205128205
User 18235 does not improve AUC. Reverting changes.
Training on augumented user 16558 13/50 current_auc = 0.6205128205128205
User 16558 AUC after training: 0.6256410256410256
User 16558 improves AUC. Keeping the model.
Training on augumented user 119165 14/50 current_auc = 0.6256410256410256
User 119165 AUC after training: 0.6205128205128205
User 119165 does not improve AUC. Reverting changes.
Training on augumented user 91653 15/50 current_auc = 0.6256410256410256
User 91653 AUC after training: 0.6153846153846154
User 91653 does not improve AUC. Reverting changes.
Training on augumented user 101578 16/50 current_auc = 0.6256410256410256
User 101578 AUC after training: 0.6256410256410256
User 101578 does not improve AUC. Reverting changes.
Training on augumented user 12657 17/50 current_auc = 0.6256410256410256
User 12657 AUC after training: 0.6256410256410256
User 12657 does not improve AUC. Reverting changes.
Training on augumented user 18727 18/50 current_auc = 0.6256410256410256
User 18727 AUC after training: 0.6256410256410256
User 18727 does not improve AUC. Reverting changes.
Training on augumented user 96101 19/50 current_auc = 0.6256410256410256
User 96101 AUC after training: 0.6153846153846154
User 96101 does not improve AUC. Reverting changes.
Training on augumented user 89176 20/50 current_auc = 0.6256410256410256
User 89176 AUC after training: 0.6307692307692307
User 89176 improves AUC. Keeping the model.
Training on augumented user 90419 21/50 current_auc = 0.6307692307692307
User 90419 AUC after training: 0.6256410256410256
User 90419 does not improve AUC. Reverting changes.
Training on augumented user 116422 22/50 current_auc = 0.6307692307692307
User 116422 AUC after training: 0.6358974358974359
User 116422 improves AUC. Keeping the model.
Training on augumented user 112962 23/50 current_auc = 0.6358974358974359
User 112962 AUC after training: 0.641025641025641
User 112962 improves AUC. Keeping the model.
Training on augumented user 39658 24/50 current_auc = 0.641025641025641
User 39658 AUC after training: 0.6358974358974359
User 39658 does not improve AUC. Reverting changes.
Training on augumented user 98112 25/50 current_auc = 0.641025641025641
User 98112 AUC after training: 0.6461538461538462
User 98112 improves AUC. Keeping the model.
Training on augumented user 68829 26/50 current_auc = 0.6461538461538462
User 68829 AUC after training: 0.641025641025641
User 68829 does not improve AUC. Reverting changes.
Training on augumented user 86160 27/50 current_auc = 0.6461538461538462
User 86160 AUC after training: 0.641025641025641
User 86160 does not improve AUC. Reverting changes.
Training on augumented user 23033 28/50 current_auc = 0.6461538461538462
User 23033 AUC after training: 0.6358974358974359
User 23033 does not improve AUC. Reverting changes.
Training on augumented user 45449 29/50 current_auc = 0.6461538461538462
User 45449 AUC after training: 0.641025641025641
User 45449 does not improve AUC. Reverting changes.
Training on augumented user 16010 30/50 current_auc = 0.6461538461538462
User 16010 AUC after training: 0.6307692307692307
User 16010 does not improve AUC. Reverting changes.
Training on augumented user 10489 31/50 current_auc = 0.6461538461538462
User 10489 AUC after training: 0.6256410256410256
User 10489 does not improve AUC. Reverting changes.
Training on augumented user 41240 32/50 current_auc = 0.6461538461538462
User 41240 AUC after training: 0.641025641025641
User 41240 does not improve AUC. Reverting changes.
Training on augumented user 78288 33/50 current_auc = 0.6461538461538462
User 78288 AUC after training: 0.6358974358974359
User 78288 does not improve AUC. Reverting changes.
Training on augumented user 131105 34/50 current_auc = 0.6461538461538462
User 131105 AUC after training: 0.641025641025641
User 131105 does not improve AUC. Reverting changes.
Training on augumented user 95337 35/50 current_auc = 0.6461538461538462
User 95337 AUC after training: 0.6461538461538462
User 95337 does not improve AUC. Reverting changes.
Training on augumented user 46033 36/50 current_auc = 0.6461538461538462
User 46033 AUC after training: 0.6358974358974359
User 46033 does not improve AUC. Reverting changes.
Training on augumented user 72680 37/50 current_auc = 0.6461538461538462
User 72680 AUC after training: 0.6256410256410256
User 72680 does not improve AUC. Reverting changes.
Training on augumented user 69347 38/50 current_auc = 0.6461538461538462
User 69347 AUC after training: 0.6358974358974359
User 69347 does not improve AUC. Reverting changes.
Training on augumented user 62415 39/50 current_auc = 0.6461538461538462
User 62415 AUC after training: 0.641025641025641
User 62415 does not improve AUC. Reverting changes.
Training on augumented user 15484 40/50 current_auc = 0.6461538461538462
User 15484 AUC after training: 0.6358974358974359
User 15484 does not improve AUC. Reverting changes.
Training on augumented user 63152 41/50 current_auc = 0.6461538461538462
User 63152 AUC after training: 0.6461538461538462
User 63152 does not improve AUC. Reverting changes.
Training on augumented user 52000 42/50 current_auc = 0.6461538461538462
User 52000 AUC after training: 0.641025641025641
User 52000 does not improve AUC. Reverting changes.
Training on augumented user 5556 43/50 current_auc = 0.6461538461538462
User 5556 AUC after training: 0.6461538461538462
User 5556 does not improve AUC. Reverting changes.
Training on augumented user 91596 44/50 current_auc = 0.6461538461538462
User 91596 AUC after training: 0.6358974358974359
User 91596 does not improve AUC. Reverting changes.
Training on augumented user 101229 45/50 current_auc = 0.6461538461538462
User 101229 AUC after training: 0.641025641025641
User 101229 does not improve AUC. Reverting changes.
Training on augumented user 72402 46/50 current_auc = 0.6461538461538462
User 72402 AUC after training: 0.6358974358974359
User 72402 does not improve AUC. Reverting changes.
Training on augumented user 73837 47/50 current_auc = 0.6461538461538462
User 73837 AUC after training: 0.641025641025641
User 73837 does not improve AUC. Reverting changes.
Training on augumented user 32225 48/50 current_auc = 0.6461538461538462
User 32225 AUC after training: 0.6358974358974359
User 32225 does not improve AUC. Reverting changes.
Training on augumented user 85612 49/50 current_auc = 0.6461538461538462
User 85612 AUC after training: 0.6358974358974359
User 85612 does not improve AUC. Reverting changes.
[2024-12-02 18:13:11.971258] start test user 57358 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:12.656818] start test user 57358 65/568 recall augumented users by random, augumented_users = [123354, 111349, 128807, 63694, 119071, 53240, 96758, 4544, 4287, 60499, 62339, 37897, 74552, 122413, 79480, 65909, 56709, 78355, 25081, 183, 43169, 125185, 65893, 10539, 85821, 47579, 72042, 62510, 124934, 123395, 65677, 41596, 87220, 115593, 120477, 598, 101417, 129728, 105670, 55084, 53311, 14097, 47128, 21507, 135215, 109712, 93479, 12518, 73978, 25336]
[2024-12-02 18:13:12.671723] user = 57358 Cloud 65/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:12.691750] user = 57358 Local 65/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:12.734379] user = 57358 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:15.333525] user = 57358 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 123354 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123354 AUC after training: 0.5
User 123354 does not improve AUC. Reverting changes.
Training on augumented user 111349 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111349 AUC after training: 0.5
User 111349 does not improve AUC. Reverting changes.
Training on augumented user 128807 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128807 AUC after training: 0.5
User 128807 does not improve AUC. Reverting changes.
Training on augumented user 63694 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63694 AUC after training: 0.5
User 63694 does not improve AUC. Reverting changes.
Training on augumented user 119071 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119071 AUC after training: 0.5
User 119071 does not improve AUC. Reverting changes.
Training on augumented user 53240 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53240 AUC after training: 0.5
User 53240 does not improve AUC. Reverting changes.
Training on augumented user 96758 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96758 AUC after training: 0.5
User 96758 does not improve AUC. Reverting changes.
Training on augumented user 4544 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4544 AUC after training: 0.5
User 4544 does not improve AUC. Reverting changes.
Training on augumented user 4287 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4287 AUC after training: 0.5
User 4287 does not improve AUC. Reverting changes.
Training on augumented user 60499 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60499 AUC after training: 0.5
User 60499 does not improve AUC. Reverting changes.
Training on augumented user 62339 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62339 AUC after training: 0.5
User 62339 does not improve AUC. Reverting changes.
Training on augumented user 37897 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37897 AUC after training: 0.5
User 37897 does not improve AUC. Reverting changes.
Training on augumented user 74552 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74552 AUC after training: 0.5
User 74552 does not improve AUC. Reverting changes.
Training on augumented user 122413 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122413 AUC after training: 0.5
User 122413 does not improve AUC. Reverting changes.
Training on augumented user 79480 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79480 AUC after training: 0.5
User 79480 does not improve AUC. Reverting changes.
Training on augumented user 65909 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65909 AUC after training: 0.5
User 65909 does not improve AUC. Reverting changes.
Training on augumented user 56709 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56709 AUC after training: 0.5
User 56709 does not improve AUC. Reverting changes.
Training on augumented user 78355 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78355 AUC after training: 0.5
User 78355 does not improve AUC. Reverting changes.
Training on augumented user 25081 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25081 AUC after training: 0.5
User 25081 does not improve AUC. Reverting changes.
Training on augumented user 183 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 183 AUC after training: 0.5
User 183 does not improve AUC. Reverting changes.
Training on augumented user 43169 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43169 AUC after training: 0.5
User 43169 does not improve AUC. Reverting changes.
Training on augumented user 125185 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125185 AUC after training: 0.5
User 125185 does not improve AUC. Reverting changes.
Training on augumented user 65893 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65893 AUC after training: 0.5
User 65893 does not improve AUC. Reverting changes.
Training on augumented user 10539 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10539 AUC after training: 0.5
User 10539 does not improve AUC. Reverting changes.
Training on augumented user 85821 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85821 AUC after training: 0.5
User 85821 does not improve AUC. Reverting changes.
Training on augumented user 47579 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47579 AUC after training: 0.5
User 47579 does not improve AUC. Reverting changes.
Training on augumented user 72042 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72042 AUC after training: 0.5
User 72042 does not improve AUC. Reverting changes.
Training on augumented user 62510 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62510 AUC after training: 0.5
User 62510 does not improve AUC. Reverting changes.
Training on augumented user 124934 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124934 AUC after training: 0.5
User 124934 does not improve AUC. Reverting changes.
Training on augumented user 123395 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123395 AUC after training: 0.5
User 123395 does not improve AUC. Reverting changes.
Training on augumented user 65677 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65677 AUC after training: 0.5
User 65677 does not improve AUC. Reverting changes.
Training on augumented user 41596 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41596 AUC after training: 0.5
User 41596 does not improve AUC. Reverting changes.
Training on augumented user 87220 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87220 AUC after training: 0.5
User 87220 does not improve AUC. Reverting changes.
Training on augumented user 115593 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115593 AUC after training: 0.5
User 115593 does not improve AUC. Reverting changes.
Training on augumented user 120477 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120477 AUC after training: 0.5
User 120477 does not improve AUC. Reverting changes.
Training on augumented user 598 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 598 AUC after training: 0.5
User 598 does not improve AUC. Reverting changes.
Training on augumented user 101417 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101417 AUC after training: 0.5
User 101417 does not improve AUC. Reverting changes.
Training on augumented user 129728 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129728 AUC after training: 0.5
User 129728 does not improve AUC. Reverting changes.
Training on augumented user 105670 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105670 AUC after training: 0.5
User 105670 does not improve AUC. Reverting changes.
Training on augumented user 55084 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55084 AUC after training: 0.5
User 55084 does not improve AUC. Reverting changes.
Training on augumented user 53311 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53311 AUC after training: 0.5
User 53311 does not improve AUC. Reverting changes.
Training on augumented user 14097 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14097 AUC after training: 0.5
User 14097 does not improve AUC. Reverting changes.
Training on augumented user 47128 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47128 AUC after training: 0.5
User 47128 does not improve AUC. Reverting changes.
Training on augumented user 21507 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21507 AUC after training: 0.5
User 21507 does not improve AUC. Reverting changes.
Training on augumented user 135215 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135215 AUC after training: 0.5
User 135215 does not improve AUC. Reverting changes.
Training on augumented user 109712 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109712 AUC after training: 0.5
User 109712 does not improve AUC. Reverting changes.
Training on augumented user 93479 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93479 AUC after training: 0.5
User 93479 does not improve AUC. Reverting changes.
Training on augumented user 12518 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12518 AUC after training: 0.5
User 12518 does not improve AUC. Reverting changes.
Training on augumented user 73978 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73978 AUC after training: 0.5
User 73978 does not improve AUC. Reverting changes.
Training on augumented user 25336 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25336 AUC after training: 0.5
User 25336 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:37.433870] start test user 57385 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:37.847037] start test user 57385 66/568 recall augumented users by random, augumented_users = [32796, 32436, 41138, 133159, 81170, 75875, 126077, 134070, 20821, 111649, 49408, 93289, 53290, 33507, 98974, 41452, 44778, 128379, 37330, 4005, 135840, 87013, 63591, 114843, 10315, 38707, 28006, 49514, 2636, 86069, 33823, 102649, 73648, 26717, 27099, 40299, 88417, 103396, 80954, 120743, 76781, 120142, 43090, 122689, 23169, 93372, 48617, 95777, 39721, 88687]
[2024-12-02 18:13:37.862684] user = 57385 Cloud 66/568
[2024-12-02 18:13:37.889518] user = 57385 Local 66/568
[2024-12-02 18:13:37.959583] user = 57385 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:39.862999] user = 57385 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6165186798458703
Training on augumented user 32796 0/50 current_auc = 0.6165186798458703
User 32796 AUC after training: 0.6165745239291898
User 32796 improves AUC. Keeping the model.
Training on augumented user 32436 1/50 current_auc = 0.6165745239291898
User 32436 AUC after training: 0.6176914055955771
User 32436 improves AUC. Keeping the model.
Training on augumented user 41138 2/50 current_auc = 0.6176914055955771
User 41138 AUC after training: 0.6175797174289385
User 41138 does not improve AUC. Reverting changes.
Training on augumented user 133159 3/50 current_auc = 0.6176914055955771
User 133159 AUC after training: 0.6174680292622997
User 133159 does not improve AUC. Reverting changes.
Training on augumented user 81170 4/50 current_auc = 0.6176914055955771
User 81170 AUC after training: 0.6174121851789802
User 81170 does not improve AUC. Reverting changes.
Training on augumented user 75875 5/50 current_auc = 0.6176914055955771
User 75875 AUC after training: 0.6173842631373205
User 75875 does not improve AUC. Reverting changes.
Training on augumented user 126077 6/50 current_auc = 0.6176914055955771
User 126077 AUC after training: 0.6176914055955771
User 126077 does not improve AUC. Reverting changes.
Training on augumented user 134070 7/50 current_auc = 0.6176914055955771
User 134070 AUC after training: 0.6173563410956608
User 134070 does not improve AUC. Reverting changes.
Training on augumented user 20821 8/50 current_auc = 0.6176914055955771
User 20821 AUC after training: 0.6175797174289384
User 20821 does not improve AUC. Reverting changes.
Training on augumented user 111649 9/50 current_auc = 0.6176914055955771
User 111649 AUC after training: 0.619310884011839
User 111649 improves AUC. Keeping the model.
Training on augumented user 49408 10/50 current_auc = 0.619310884011839
User 49408 AUC after training: 0.6191433517618807
User 49408 does not improve AUC. Reverting changes.
Training on augumented user 93289 11/50 current_auc = 0.619310884011839
User 93289 AUC after training: 0.6192550399285195
User 93289 does not improve AUC. Reverting changes.
Training on augumented user 53290 12/50 current_auc = 0.619310884011839
User 53290 AUC after training: 0.6189758195119227
User 53290 does not improve AUC. Reverting changes.
Training on augumented user 33507 13/50 current_auc = 0.619310884011839
User 33507 AUC after training: 0.6198134807617133
User 33507 improves AUC. Keeping the model.
Training on augumented user 98974 14/50 current_auc = 0.6198134807617133
User 98974 AUC after training: 0.6194225721784777
User 98974 does not improve AUC. Reverting changes.
Training on augumented user 41452 15/50 current_auc = 0.6198134807617133
User 41452 AUC after training: 0.6202043893449489
User 41452 improves AUC. Keeping the model.
Training on augumented user 44778 16/50 current_auc = 0.6202043893449489
User 44778 AUC after training: 0.6205394538448652
User 44778 improves AUC. Keeping the model.
Training on augumented user 128379 17/50 current_auc = 0.6205394538448652
User 128379 AUC after training: 0.6195342603451165
User 128379 does not improve AUC. Reverting changes.
Training on augumented user 37330 18/50 current_auc = 0.6205394538448652
User 37330 AUC after training: 0.6200927011783102
User 37330 does not improve AUC. Reverting changes.
Training on augumented user 4005 19/50 current_auc = 0.6205394538448652
User 4005 AUC after training: 0.6191991958452002
User 4005 does not improve AUC. Reverting changes.
Training on augumented user 135840 20/50 current_auc = 0.6205394538448652
User 135840 AUC after training: 0.6194784162617971
User 135840 does not improve AUC. Reverting changes.
Training on augumented user 87013 21/50 current_auc = 0.6205394538448652
User 87013 AUC after training: 0.6202602334282682
User 87013 does not improve AUC. Reverting changes.
Training on augumented user 63591 22/50 current_auc = 0.6205394538448652
User 63591 AUC after training: 0.6201485452616295
User 63591 does not improve AUC. Reverting changes.
Training on augumented user 114843 23/50 current_auc = 0.6205394538448652
User 114843 AUC after training: 0.6202043893449488
User 114843 does not improve AUC. Reverting changes.
Training on augumented user 10315 24/50 current_auc = 0.6205394538448652
User 10315 AUC after training: 0.6203160775115877
User 10315 does not improve AUC. Reverting changes.
Training on augumented user 38707 25/50 current_auc = 0.6205394538448652
User 38707 AUC after training: 0.6205394538448652
User 38707 does not improve AUC. Reverting changes.
Training on augumented user 28006 26/50 current_auc = 0.6205394538448652
User 28006 AUC after training: 0.6202602334282683
User 28006 does not improve AUC. Reverting changes.
Training on augumented user 49514 27/50 current_auc = 0.6205394538448652
User 49514 AUC after training: 0.619757636678394
User 49514 does not improve AUC. Reverting changes.
Training on augumented user 2636 28/50 current_auc = 0.6205394538448652
User 2636 AUC after training: 0.6204836097615457
User 2636 does not improve AUC. Reverting changes.
Training on augumented user 86069 29/50 current_auc = 0.6205394538448652
User 86069 AUC after training: 0.6198134807617133
User 86069 does not improve AUC. Reverting changes.
Training on augumented user 33823 30/50 current_auc = 0.6205394538448652
User 33823 AUC after training: 0.6200368570949908
User 33823 does not improve AUC. Reverting changes.
Training on augumented user 102649 31/50 current_auc = 0.6205394538448652
User 102649 AUC after training: 0.6203719215949071
User 102649 does not improve AUC. Reverting changes.
Training on augumented user 73648 32/50 current_auc = 0.6205394538448652
User 73648 AUC after training: 0.620371921594907
User 73648 does not improve AUC. Reverting changes.
Training on augumented user 26717 33/50 current_auc = 0.6205394538448652
User 26717 AUC after training: 0.6186128329703467
User 26717 does not improve AUC. Reverting changes.
Training on augumented user 27099 34/50 current_auc = 0.6205394538448652
User 27099 AUC after training: 0.6204277656782263
User 27099 does not improve AUC. Reverting changes.
Training on augumented user 40299 35/50 current_auc = 0.6205394538448652
User 40299 AUC after training: 0.6204277656782263
User 40299 does not improve AUC. Reverting changes.
Training on augumented user 88417 36/50 current_auc = 0.6205394538448652
User 88417 AUC after training: 0.6204836097615457
User 88417 does not improve AUC. Reverting changes.
Training on augumented user 103396 37/50 current_auc = 0.6205394538448652
User 103396 AUC after training: 0.6203719215949071
User 103396 does not improve AUC. Reverting changes.
Training on augumented user 80954 38/50 current_auc = 0.6205394538448652
User 80954 AUC after training: 0.6207069860948232
User 80954 improves AUC. Keeping the model.
Training on augumented user 120743 39/50 current_auc = 0.6207069860948232
User 120743 AUC after training: 0.6210420505947394
User 120743 improves AUC. Keeping the model.
Training on augumented user 76781 40/50 current_auc = 0.6210420505947394
User 76781 AUC after training: 0.620818674261462
User 76781 does not improve AUC. Reverting changes.
Training on augumented user 120142 41/50 current_auc = 0.6210420505947394
User 120142 AUC after training: 0.6207628301781426
User 120142 does not improve AUC. Reverting changes.
Training on augumented user 43090 42/50 current_auc = 0.6210420505947394
User 43090 AUC after training: 0.62098620651142
User 43090 does not improve AUC. Reverting changes.
Training on augumented user 122689 43/50 current_auc = 0.6210420505947394
User 122689 AUC after training: 0.6206511420115037
User 122689 does not improve AUC. Reverting changes.
Training on augumented user 23169 44/50 current_auc = 0.6210420505947394
User 23169 AUC after training: 0.6212654269280169
User 23169 improves AUC. Keeping the model.
Training on augumented user 93372 45/50 current_auc = 0.6212654269280169
User 93372 AUC after training: 0.6209303624281007
User 93372 does not improve AUC. Reverting changes.
Training on augumented user 48617 46/50 current_auc = 0.6212654269280169
User 48617 AUC after training: 0.6209303624281006
User 48617 does not improve AUC. Reverting changes.
Training on augumented user 95777 47/50 current_auc = 0.6212654269280169
User 95777 AUC after training: 0.6203160775115877
User 95777 does not improve AUC. Reverting changes.
Training on augumented user 39721 48/50 current_auc = 0.6212654269280169
User 39721 AUC after training: 0.6211537387613782
User 39721 does not improve AUC. Reverting changes.
Training on augumented user 88687 49/50 current_auc = 0.6212654269280169
User 88687 AUC after training: 0.6197017925950746
User 88687 does not improve AUC. Reverting changes.
[2024-12-02 18:14:06.063847] start test user 57398 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:06.493107] start test user 57398 67/568 recall augumented users by random, augumented_users = [22100, 39018, 85727, 46677, 111391, 14152, 33426, 75351, 108918, 115408, 95296, 76544, 108236, 109095, 66521, 109740, 79241, 52488, 35374, 79568, 30661, 132779, 119420, 90087, 83201, 103472, 89492, 44198, 56953, 2398, 33756, 6221, 54090, 130255, 725, 64590, 27083, 92866, 81231, 137687, 38325, 15242, 104840, 67659, 45934, 106680, 45767, 119620, 12414, 85895]
[2024-12-02 18:14:06.509648] user = 57398 Cloud 67/568
[2024-12-02 18:14:06.523280] user = 57398 Local 67/568
[2024-12-02 18:14:06.734204] user = 57398 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:09.338472] user = 57398 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4994197292069632
Training on augumented user 22100 0/50 current_auc = 0.4994197292069632
User 22100 AUC after training: 0.49787234042553186
User 22100 does not improve AUC. Reverting changes.
Training on augumented user 39018 1/50 current_auc = 0.4994197292069632
User 39018 AUC after training: 0.49671179883945843
User 39018 does not improve AUC. Reverting changes.
Training on augumented user 85727 2/50 current_auc = 0.4994197292069632
User 85727 AUC after training: 0.4982591876208897
User 85727 does not improve AUC. Reverting changes.
Training on augumented user 46677 3/50 current_auc = 0.4994197292069632
User 46677 AUC after training: 0.49941972920696326
User 46677 improves AUC. Keeping the model.
Training on augumented user 111391 4/50 current_auc = 0.49941972920696326
User 111391 AUC after training: 0.4920696324951644
User 111391 does not improve AUC. Reverting changes.
Training on augumented user 14152 5/50 current_auc = 0.49941972920696326
User 14152 AUC after training: 0.4994197292069632
User 14152 does not improve AUC. Reverting changes.
Training on augumented user 33426 6/50 current_auc = 0.49941972920696326
User 33426 AUC after training: 0.4990328820116054
User 33426 does not improve AUC. Reverting changes.
Training on augumented user 75351 7/50 current_auc = 0.49941972920696326
User 75351 AUC after training: 0.49787234042553186
User 75351 does not improve AUC. Reverting changes.
Training on augumented user 108918 8/50 current_auc = 0.49941972920696326
User 108918 AUC after training: 0.49787234042553197
User 108918 does not improve AUC. Reverting changes.
Training on augumented user 115408 9/50 current_auc = 0.49941972920696326
User 115408 AUC after training: 0.4970986460348163
User 115408 does not improve AUC. Reverting changes.
Training on augumented user 95296 10/50 current_auc = 0.49941972920696326
User 95296 AUC after training: 0.4963249516441006
User 95296 does not improve AUC. Reverting changes.
Training on augumented user 76544 11/50 current_auc = 0.49941972920696326
User 76544 AUC after training: 0.4978723404255319
User 76544 does not improve AUC. Reverting changes.
Training on augumented user 108236 12/50 current_auc = 0.49941972920696326
User 108236 AUC after training: 0.49980657640232107
User 108236 improves AUC. Keeping the model.
Training on augumented user 109095 13/50 current_auc = 0.49980657640232107
User 109095 AUC after training: 0.5017408123791103
User 109095 improves AUC. Keeping the model.
Training on augumented user 66521 14/50 current_auc = 0.5017408123791103
User 66521 AUC after training: 0.5017408123791103
User 66521 does not improve AUC. Reverting changes.
Training on augumented user 109740 15/50 current_auc = 0.5017408123791103
User 109740 AUC after training: 0.5021276595744681
User 109740 improves AUC. Keeping the model.
Training on augumented user 79241 16/50 current_auc = 0.5021276595744681
User 79241 AUC after training: 0.5009671179883946
User 79241 does not improve AUC. Reverting changes.
Training on augumented user 52488 17/50 current_auc = 0.5021276595744681
User 52488 AUC after training: 0.5040618955512572
User 52488 improves AUC. Keeping the model.
Training on augumented user 35374 18/50 current_auc = 0.5040618955512572
User 35374 AUC after training: 0.504835589941973
User 35374 improves AUC. Keeping the model.
Training on augumented user 79568 19/50 current_auc = 0.504835589941973
User 79568 AUC after training: 0.5044487427466151
User 79568 does not improve AUC. Reverting changes.
Training on augumented user 30661 20/50 current_auc = 0.504835589941973
User 30661 AUC after training: 0.5044487427466151
User 30661 does not improve AUC. Reverting changes.
Training on augumented user 132779 21/50 current_auc = 0.504835589941973
User 132779 AUC after training: 0.5044487427466151
User 132779 does not improve AUC. Reverting changes.
Training on augumented user 119420 22/50 current_auc = 0.504835589941973
User 119420 AUC after training: 0.5030947775628627
User 119420 does not improve AUC. Reverting changes.
Training on augumented user 90087 23/50 current_auc = 0.504835589941973
User 90087 AUC after training: 0.5073500967117988
User 90087 improves AUC. Keeping the model.
Training on augumented user 83201 24/50 current_auc = 0.5073500967117988
User 83201 AUC after training: 0.5056092843326886
User 83201 does not improve AUC. Reverting changes.
Training on augumented user 103472 25/50 current_auc = 0.5073500967117988
User 103472 AUC after training: 0.5071566731141199
User 103472 does not improve AUC. Reverting changes.
Training on augumented user 89492 26/50 current_auc = 0.5073500967117988
User 89492 AUC after training: 0.5069632495164409
User 89492 does not improve AUC. Reverting changes.
Training on augumented user 44198 27/50 current_auc = 0.5073500967117988
User 44198 AUC after training: 0.5067698259187621
User 44198 does not improve AUC. Reverting changes.
Training on augumented user 56953 28/50 current_auc = 0.5073500967117988
User 56953 AUC after training: 0.5036750483558994
User 56953 does not improve AUC. Reverting changes.
Training on augumented user 2398 29/50 current_auc = 0.5073500967117988
User 2398 AUC after training: 0.5079303675048357
User 2398 improves AUC. Keeping the model.
Training on augumented user 33756 30/50 current_auc = 0.5079303675048357
User 33756 AUC after training: 0.5067698259187621
User 33756 does not improve AUC. Reverting changes.
Training on augumented user 6221 31/50 current_auc = 0.5079303675048357
User 6221 AUC after training: 0.5083172147001934
User 6221 improves AUC. Keeping the model.
Training on augumented user 54090 32/50 current_auc = 0.5083172147001934
User 54090 AUC after training: 0.5075435203094778
User 54090 does not improve AUC. Reverting changes.
Training on augumented user 130255 33/50 current_auc = 0.5083172147001934
User 130255 AUC after training: 0.5102514506769826
User 130255 improves AUC. Keeping the model.
Training on augumented user 725 34/50 current_auc = 0.5102514506769826
User 725 AUC after training: 0.5087040618955512
User 725 does not improve AUC. Reverting changes.
Training on augumented user 64590 35/50 current_auc = 0.5102514506769826
User 64590 AUC after training: 0.5110251450676982
User 64590 improves AUC. Keeping the model.
Training on augumented user 27083 36/50 current_auc = 0.5110251450676982
User 27083 AUC after training: 0.5106382978723403
User 27083 does not improve AUC. Reverting changes.
Training on augumented user 92866 37/50 current_auc = 0.5110251450676982
User 92866 AUC after training: 0.5125725338491296
User 92866 improves AUC. Keeping the model.
Training on augumented user 81231 38/50 current_auc = 0.5125725338491296
User 81231 AUC after training: 0.5121856866537717
User 81231 does not improve AUC. Reverting changes.
Training on augumented user 137687 39/50 current_auc = 0.5125725338491296
User 137687 AUC after training: 0.511411992263056
User 137687 does not improve AUC. Reverting changes.
Training on augumented user 38325 40/50 current_auc = 0.5125725338491296
User 38325 AUC after training: 0.5052224371373307
User 38325 does not improve AUC. Reverting changes.
Training on augumented user 15242 41/50 current_auc = 0.5125725338491296
User 15242 AUC after training: 0.5164410058027079
User 15242 improves AUC. Keeping the model.
Training on augumented user 104840 42/50 current_auc = 0.5164410058027079
User 104840 AUC after training: 0.5152804642166344
User 104840 does not improve AUC. Reverting changes.
Training on augumented user 67659 43/50 current_auc = 0.5164410058027079
User 67659 AUC after training: 0.5156673114119923
User 67659 does not improve AUC. Reverting changes.
Training on augumented user 45934 44/50 current_auc = 0.5164410058027079
User 45934 AUC after training: 0.5145067698259187
User 45934 does not improve AUC. Reverting changes.
Training on augumented user 106680 45/50 current_auc = 0.5164410058027079
User 106680 AUC after training: 0.5106382978723405
User 106680 does not improve AUC. Reverting changes.
Training on augumented user 45767 46/50 current_auc = 0.5164410058027079
User 45767 AUC after training: 0.5168278529980658
User 45767 improves AUC. Keeping the model.
Training on augumented user 119620 47/50 current_auc = 0.5168278529980658
User 119620 AUC after training: 0.5148936170212766
User 119620 does not improve AUC. Reverting changes.
Training on augumented user 12414 48/50 current_auc = 0.5168278529980658
User 12414 AUC after training: 0.5137330754352031
User 12414 does not improve AUC. Reverting changes.
Training on augumented user 85895 49/50 current_auc = 0.5168278529980658
User 85895 AUC after training: 0.5052224371373307
User 85895 does not improve AUC. Reverting changes.
[2024-12-02 18:14:39.664583] start test user 57441 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:40.083457] start test user 57441 68/568 recall augumented users by random, augumented_users = [124081, 72767, 111986, 55340, 28348, 60981, 19057, 48044, 102851, 6424, 4409, 35980, 122821, 54944, 82491, 114891, 126312, 28782, 5789, 67781, 128545, 104735, 27601, 4256, 38059, 81773, 16668, 112782, 95917, 126875, 111193, 119547, 97759, 56711, 55894, 80458, 17819, 72194, 102686, 106769, 33898, 28743, 109481, 103436, 119276, 11732, 99002, 69517, 85583, 130344]
[2024-12-02 18:14:40.098853] user = 57441 Cloud 68/568
[2024-12-02 18:14:40.129148] user = 57441 Local 68/568
[2024-12-02 18:14:40.219991] user = 57441 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:42.824328] user = 57441 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8065677013045435
Training on augumented user 124081 0/50 current_auc = 0.8065677013045435
User 124081 AUC after training: 0.8061178587494378
User 124081 does not improve AUC. Reverting changes.
Training on augumented user 72767 1/50 current_auc = 0.8065677013045435
User 72767 AUC after training: 0.8067926225820963
User 72767 improves AUC. Keeping the model.
Training on augumented user 111986 2/50 current_auc = 0.8067926225820963
User 111986 AUC after training: 0.8067926225820963
User 111986 does not improve AUC. Reverting changes.
Training on augumented user 55340 3/50 current_auc = 0.8067926225820963
User 55340 AUC after training: 0.8065677013045435
User 55340 does not improve AUC. Reverting changes.
Training on augumented user 28348 4/50 current_auc = 0.8067926225820963
User 28348 AUC after training: 0.807242465137202
User 28348 improves AUC. Keeping the model.
Training on augumented user 60981 5/50 current_auc = 0.807242465137202
User 60981 AUC after training: 0.807242465137202
User 60981 does not improve AUC. Reverting changes.
Training on augumented user 19057 6/50 current_auc = 0.807242465137202
User 19057 AUC after training: 0.8063427800269906
User 19057 does not improve AUC. Reverting changes.
Training on augumented user 48044 7/50 current_auc = 0.807242465137202
User 48044 AUC after training: 0.8074673864147549
User 48044 improves AUC. Keeping the model.
Training on augumented user 102851 8/50 current_auc = 0.8074673864147549
User 102851 AUC after training: 0.8074673864147549
User 102851 does not improve AUC. Reverting changes.
Training on augumented user 6424 9/50 current_auc = 0.8074673864147549
User 6424 AUC after training: 0.807242465137202
User 6424 does not improve AUC. Reverting changes.
Training on augumented user 4409 10/50 current_auc = 0.8074673864147549
User 4409 AUC after training: 0.8074673864147549
User 4409 does not improve AUC. Reverting changes.
Training on augumented user 35980 11/50 current_auc = 0.8074673864147549
User 35980 AUC after training: 0.8070175438596491
User 35980 does not improve AUC. Reverting changes.
Training on augumented user 122821 12/50 current_auc = 0.8074673864147549
User 122821 AUC after training: 0.807242465137202
User 122821 does not improve AUC. Reverting changes.
Training on augumented user 54944 13/50 current_auc = 0.8074673864147549
User 54944 AUC after training: 0.8076923076923077
User 54944 improves AUC. Keeping the model.
Training on augumented user 82491 14/50 current_auc = 0.8076923076923077
User 82491 AUC after training: 0.8067926225820963
User 82491 does not improve AUC. Reverting changes.
Training on augumented user 114891 15/50 current_auc = 0.8076923076923077
User 114891 AUC after training: 0.8067926225820963
User 114891 does not improve AUC. Reverting changes.
Training on augumented user 126312 16/50 current_auc = 0.8076923076923077
User 126312 AUC after training: 0.8074673864147549
User 126312 does not improve AUC. Reverting changes.
Training on augumented user 28782 17/50 current_auc = 0.8076923076923077
User 28782 AUC after training: 0.8065677013045435
User 28782 does not improve AUC. Reverting changes.
Training on augumented user 5789 18/50 current_auc = 0.8076923076923077
User 5789 AUC after training: 0.8074673864147548
User 5789 does not improve AUC. Reverting changes.
Training on augumented user 67781 19/50 current_auc = 0.8076923076923077
User 67781 AUC after training: 0.8070175438596492
User 67781 does not improve AUC. Reverting changes.
Training on augumented user 128545 20/50 current_auc = 0.8076923076923077
User 128545 AUC after training: 0.8076923076923077
User 128545 does not improve AUC. Reverting changes.
Training on augumented user 104735 21/50 current_auc = 0.8076923076923077
User 104735 AUC after training: 0.8079172289698605
User 104735 improves AUC. Keeping the model.
Training on augumented user 27601 22/50 current_auc = 0.8079172289698605
User 27601 AUC after training: 0.8065677013045434
User 27601 does not improve AUC. Reverting changes.
Training on augumented user 4256 23/50 current_auc = 0.8079172289698605
User 4256 AUC after training: 0.8061178587494376
User 4256 does not improve AUC. Reverting changes.
Training on augumented user 38059 24/50 current_auc = 0.8079172289698605
User 38059 AUC after training: 0.807242465137202
User 38059 does not improve AUC. Reverting changes.
Training on augumented user 81773 25/50 current_auc = 0.8079172289698605
User 81773 AUC after training: 0.8064552406657669
User 81773 does not improve AUC. Reverting changes.
Training on augumented user 16668 26/50 current_auc = 0.8079172289698605
User 16668 AUC after training: 0.8076923076923076
User 16668 does not improve AUC. Reverting changes.
Training on augumented user 112782 27/50 current_auc = 0.8079172289698605
User 112782 AUC after training: 0.8076923076923077
User 112782 does not improve AUC. Reverting changes.
Training on augumented user 95917 28/50 current_auc = 0.8079172289698605
User 95917 AUC after training: 0.8070175438596492
User 95917 does not improve AUC. Reverting changes.
Training on augumented user 126875 29/50 current_auc = 0.8079172289698605
User 126875 AUC after training: 0.807242465137202
User 126875 does not improve AUC. Reverting changes.
Training on augumented user 111193 30/50 current_auc = 0.8079172289698605
User 111193 AUC after training: 0.8065677013045434
User 111193 does not improve AUC. Reverting changes.
Training on augumented user 119547 31/50 current_auc = 0.8079172289698605
User 119547 AUC after training: 0.8074673864147549
User 119547 does not improve AUC. Reverting changes.
Training on augumented user 97759 32/50 current_auc = 0.8079172289698605
User 97759 AUC after training: 0.8074673864147548
User 97759 does not improve AUC. Reverting changes.
Training on augumented user 56711 33/50 current_auc = 0.8079172289698605
User 56711 AUC after training: 0.8071300044984256
User 56711 does not improve AUC. Reverting changes.
Training on augumented user 55894 34/50 current_auc = 0.8079172289698605
User 55894 AUC after training: 0.8074673864147548
User 55894 does not improve AUC. Reverting changes.
Training on augumented user 80458 35/50 current_auc = 0.8079172289698605
User 80458 AUC after training: 0.807242465137202
User 80458 does not improve AUC. Reverting changes.
Training on augumented user 17819 36/50 current_auc = 0.8079172289698605
User 17819 AUC after training: 0.807242465137202
User 17819 does not improve AUC. Reverting changes.
Training on augumented user 72194 37/50 current_auc = 0.8079172289698605
User 72194 AUC after training: 0.8070175438596492
User 72194 does not improve AUC. Reverting changes.
Training on augumented user 102686 38/50 current_auc = 0.8079172289698605
User 102686 AUC after training: 0.8055555555555556
User 102686 does not improve AUC. Reverting changes.
Training on augumented user 106769 39/50 current_auc = 0.8079172289698605
User 106769 AUC after training: 0.8070175438596491
User 106769 does not improve AUC. Reverting changes.
Training on augumented user 33898 40/50 current_auc = 0.8079172289698605
User 33898 AUC after training: 0.8076923076923077
User 33898 does not improve AUC. Reverting changes.
Training on augumented user 28743 41/50 current_auc = 0.8079172289698605
User 28743 AUC after training: 0.8074673864147548
User 28743 does not improve AUC. Reverting changes.
Training on augumented user 109481 42/50 current_auc = 0.8079172289698605
User 109481 AUC after training: 0.8067926225820963
User 109481 does not improve AUC. Reverting changes.
Training on augumented user 103436 43/50 current_auc = 0.8079172289698605
User 103436 AUC after training: 0.8076923076923076
User 103436 does not improve AUC. Reverting changes.
Training on augumented user 119276 44/50 current_auc = 0.8079172289698605
User 119276 AUC after training: 0.8074673864147549
User 119276 does not improve AUC. Reverting changes.
Training on augumented user 11732 45/50 current_auc = 0.8079172289698605
User 11732 AUC after training: 0.8076923076923077
User 11732 does not improve AUC. Reverting changes.
Training on augumented user 99002 46/50 current_auc = 0.8079172289698605
User 99002 AUC after training: 0.8076923076923077
User 99002 does not improve AUC. Reverting changes.
Training on augumented user 69517 47/50 current_auc = 0.8079172289698605
User 69517 AUC after training: 0.8070175438596492
User 69517 does not improve AUC. Reverting changes.
Training on augumented user 85583 48/50 current_auc = 0.8079172289698605
User 85583 AUC after training: 0.8058929374718848
User 85583 does not improve AUC. Reverting changes.
Training on augumented user 130344 49/50 current_auc = 0.8079172289698605
User 130344 AUC after training: 0.8067926225820962
User 130344 does not improve AUC. Reverting changes.
[2024-12-02 18:15:07.949663] start test user 57458 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:08.529135] start test user 57458 69/568 recall augumented users by random, augumented_users = [9360, 12189, 106980, 28485, 42762, 87827, 41127, 10672, 24991, 117095, 33389, 74242, 58584, 88512, 56817, 80490, 12889, 43553, 67673, 8180, 92371, 77934, 104639, 52655, 4737, 16248, 983, 75020, 121795, 55275, 46454, 49279, 109717, 59686, 76215, 98076, 38510, 1159, 136751, 112700, 29855, 84935, 136577, 127499, 47697, 125694, 116495, 88594, 98590, 84966]
[2024-12-02 18:15:08.545931] user = 57458 Cloud 69/568
[2024-12-02 18:15:08.556481] user = 57458 Local 69/568
[2024-12-02 18:15:08.612801] user = 57458 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:10.912657] user = 57458 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6944444444444444
Training on augumented user 9360 0/50 current_auc = 0.6944444444444444
User 9360 AUC after training: 0.6944444444444444
User 9360 does not improve AUC. Reverting changes.
Training on augumented user 12189 1/50 current_auc = 0.6944444444444444
User 12189 AUC after training: 0.6944444444444444
User 12189 does not improve AUC. Reverting changes.
Training on augumented user 106980 2/50 current_auc = 0.6944444444444444
User 106980 AUC after training: 0.6944444444444444
User 106980 does not improve AUC. Reverting changes.
Training on augumented user 28485 3/50 current_auc = 0.6944444444444444
User 28485 AUC after training: 0.6944444444444444
User 28485 does not improve AUC. Reverting changes.
Training on augumented user 42762 4/50 current_auc = 0.6944444444444444
User 42762 AUC after training: 0.6944444444444444
User 42762 does not improve AUC. Reverting changes.
Training on augumented user 87827 5/50 current_auc = 0.6944444444444444
User 87827 AUC after training: 0.6944444444444444
User 87827 does not improve AUC. Reverting changes.
Training on augumented user 41127 6/50 current_auc = 0.6944444444444444
User 41127 AUC after training: 0.7222222222222221
User 41127 improves AUC. Keeping the model.
Training on augumented user 10672 7/50 current_auc = 0.7222222222222221
User 10672 AUC after training: 0.7222222222222221
User 10672 does not improve AUC. Reverting changes.
Training on augumented user 24991 8/50 current_auc = 0.7222222222222221
User 24991 AUC after training: 0.7222222222222221
User 24991 does not improve AUC. Reverting changes.
Training on augumented user 117095 9/50 current_auc = 0.7222222222222221
User 117095 AUC after training: 0.7222222222222221
User 117095 does not improve AUC. Reverting changes.
Training on augumented user 33389 10/50 current_auc = 0.7222222222222221
User 33389 AUC after training: 0.7222222222222221
User 33389 does not improve AUC. Reverting changes.
Training on augumented user 74242 11/50 current_auc = 0.7222222222222221
User 74242 AUC after training: 0.7222222222222221
User 74242 does not improve AUC. Reverting changes.
Training on augumented user 58584 12/50 current_auc = 0.7222222222222221
User 58584 AUC after training: 0.7222222222222221
User 58584 does not improve AUC. Reverting changes.
Training on augumented user 88512 13/50 current_auc = 0.7222222222222221
User 88512 AUC after training: 0.7222222222222221
User 88512 does not improve AUC. Reverting changes.
Training on augumented user 56817 14/50 current_auc = 0.7222222222222221
User 56817 AUC after training: 0.7222222222222221
User 56817 does not improve AUC. Reverting changes.
Training on augumented user 80490 15/50 current_auc = 0.7222222222222221
User 80490 AUC after training: 0.7222222222222221
User 80490 does not improve AUC. Reverting changes.
Training on augumented user 12889 16/50 current_auc = 0.7222222222222221
User 12889 AUC after training: 0.7222222222222221
User 12889 does not improve AUC. Reverting changes.
Training on augumented user 43553 17/50 current_auc = 0.7222222222222221
User 43553 AUC after training: 0.7222222222222221
User 43553 does not improve AUC. Reverting changes.
Training on augumented user 67673 18/50 current_auc = 0.7222222222222221
User 67673 AUC after training: 0.6944444444444444
User 67673 does not improve AUC. Reverting changes.
Training on augumented user 8180 19/50 current_auc = 0.7222222222222221
User 8180 AUC after training: 0.7222222222222221
User 8180 does not improve AUC. Reverting changes.
Training on augumented user 92371 20/50 current_auc = 0.7222222222222221
User 92371 AUC after training: 0.7222222222222221
User 92371 does not improve AUC. Reverting changes.
Training on augumented user 77934 21/50 current_auc = 0.7222222222222221
User 77934 AUC after training: 0.7222222222222221
User 77934 does not improve AUC. Reverting changes.
Training on augumented user 104639 22/50 current_auc = 0.7222222222222221
User 104639 AUC after training: 0.7222222222222221
User 104639 does not improve AUC. Reverting changes.
Training on augumented user 52655 23/50 current_auc = 0.7222222222222221
User 52655 AUC after training: 0.7222222222222221
User 52655 does not improve AUC. Reverting changes.
Training on augumented user 4737 24/50 current_auc = 0.7222222222222221
User 4737 AUC after training: 0.7222222222222221
User 4737 does not improve AUC. Reverting changes.
Training on augumented user 16248 25/50 current_auc = 0.7222222222222221
User 16248 AUC after training: 0.7222222222222221
User 16248 does not improve AUC. Reverting changes.
Training on augumented user 983 26/50 current_auc = 0.7222222222222221
User 983 AUC after training: 0.7222222222222221
User 983 does not improve AUC. Reverting changes.
Training on augumented user 75020 27/50 current_auc = 0.7222222222222221
User 75020 AUC after training: 0.7222222222222221
User 75020 does not improve AUC. Reverting changes.
Training on augumented user 121795 28/50 current_auc = 0.7222222222222221
User 121795 AUC after training: 0.7222222222222221
User 121795 does not improve AUC. Reverting changes.
Training on augumented user 55275 29/50 current_auc = 0.7222222222222221
User 55275 AUC after training: 0.7222222222222221
User 55275 does not improve AUC. Reverting changes.
Training on augumented user 46454 30/50 current_auc = 0.7222222222222221
User 46454 AUC after training: 0.7222222222222221
User 46454 does not improve AUC. Reverting changes.
Training on augumented user 49279 31/50 current_auc = 0.7222222222222221
User 49279 AUC after training: 0.7222222222222221
User 49279 does not improve AUC. Reverting changes.
Training on augumented user 109717 32/50 current_auc = 0.7222222222222221
User 109717 AUC after training: 0.7222222222222221
User 109717 does not improve AUC. Reverting changes.
Training on augumented user 59686 33/50 current_auc = 0.7222222222222221
User 59686 AUC after training: 0.7222222222222221
User 59686 does not improve AUC. Reverting changes.
Training on augumented user 76215 34/50 current_auc = 0.7222222222222221
User 76215 AUC after training: 0.7222222222222221
User 76215 does not improve AUC. Reverting changes.
Training on augumented user 98076 35/50 current_auc = 0.7222222222222221
User 98076 AUC after training: 0.7222222222222221
User 98076 does not improve AUC. Reverting changes.
Training on augumented user 38510 36/50 current_auc = 0.7222222222222221
User 38510 AUC after training: 0.7222222222222221
User 38510 does not improve AUC. Reverting changes.
Training on augumented user 1159 37/50 current_auc = 0.7222222222222221
User 1159 AUC after training: 0.7222222222222221
User 1159 does not improve AUC. Reverting changes.
Training on augumented user 136751 38/50 current_auc = 0.7222222222222221
User 136751 AUC after training: 0.6944444444444444
User 136751 does not improve AUC. Reverting changes.
Training on augumented user 112700 39/50 current_auc = 0.7222222222222221
User 112700 AUC after training: 0.7222222222222221
User 112700 does not improve AUC. Reverting changes.
Training on augumented user 29855 40/50 current_auc = 0.7222222222222221
User 29855 AUC after training: 0.7222222222222221
User 29855 does not improve AUC. Reverting changes.
Training on augumented user 84935 41/50 current_auc = 0.7222222222222221
User 84935 AUC after training: 0.7222222222222221
User 84935 does not improve AUC. Reverting changes.
Training on augumented user 136577 42/50 current_auc = 0.7222222222222221
User 136577 AUC after training: 0.7222222222222221
User 136577 does not improve AUC. Reverting changes.
Training on augumented user 127499 43/50 current_auc = 0.7222222222222221
User 127499 AUC after training: 0.7222222222222221
User 127499 does not improve AUC. Reverting changes.
Training on augumented user 47697 44/50 current_auc = 0.7222222222222221
User 47697 AUC after training: 0.7222222222222221
User 47697 does not improve AUC. Reverting changes.
Training on augumented user 125694 45/50 current_auc = 0.7222222222222221
User 125694 AUC after training: 0.7222222222222221
User 125694 does not improve AUC. Reverting changes.
Training on augumented user 116495 46/50 current_auc = 0.7222222222222221
User 116495 AUC after training: 0.7222222222222221
User 116495 does not improve AUC. Reverting changes.
Training on augumented user 88594 47/50 current_auc = 0.7222222222222221
User 88594 AUC after training: 0.7222222222222221
User 88594 does not improve AUC. Reverting changes.
Training on augumented user 98590 48/50 current_auc = 0.7222222222222221
User 98590 AUC after training: 0.7222222222222221
User 98590 does not improve AUC. Reverting changes.
Training on augumented user 84966 49/50 current_auc = 0.7222222222222221
User 84966 AUC after training: 0.7222222222222221
User 84966 does not improve AUC. Reverting changes.
[2024-12-02 18:15:39.972959] start test user 57479 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:40.453389] start test user 57479 70/568 recall augumented users by random, augumented_users = [100331, 20915, 132037, 69176, 42078, 90662, 98107, 70015, 24079, 28470, 43463, 72570, 1296, 43742, 44172, 88171, 41295, 19857, 49233, 102805, 59203, 85370, 81236, 49322, 72864, 103993, 90585, 109660, 43307, 124190, 122042, 121086, 14946, 124585, 41, 62806, 73147, 4857, 127647, 38556, 10612, 124994, 52013, 83336, 90546, 135052, 128341, 48932, 79071, 35530]
[2024-12-02 18:15:40.468411] user = 57479 Cloud 70/568
[2024-12-02 18:15:40.490142] user = 57479 Local 70/568
[2024-12-02 18:15:40.543535] user = 57479 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:42.499124] user = 57479 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7126623376623377
Training on augumented user 100331 0/50 current_auc = 0.7126623376623377
User 100331 AUC after training: 0.7126623376623377
User 100331 does not improve AUC. Reverting changes.
Training on augumented user 20915 1/50 current_auc = 0.7126623376623377
User 20915 AUC after training: 0.7126623376623377
User 20915 does not improve AUC. Reverting changes.
Training on augumented user 132037 2/50 current_auc = 0.7126623376623377
User 132037 AUC after training: 0.7126623376623377
User 132037 does not improve AUC. Reverting changes.
Training on augumented user 69176 3/50 current_auc = 0.7126623376623377
User 69176 AUC after training: 0.7126623376623377
User 69176 does not improve AUC. Reverting changes.
Training on augumented user 42078 4/50 current_auc = 0.7126623376623377
User 42078 AUC after training: 0.7126623376623377
User 42078 does not improve AUC. Reverting changes.
Training on augumented user 90662 5/50 current_auc = 0.7126623376623377
User 90662 AUC after training: 0.7126623376623377
User 90662 does not improve AUC. Reverting changes.
Training on augumented user 98107 6/50 current_auc = 0.7126623376623377
User 98107 AUC after training: 0.7077922077922078
User 98107 does not improve AUC. Reverting changes.
Training on augumented user 70015 7/50 current_auc = 0.7126623376623377
User 70015 AUC after training: 0.7126623376623377
User 70015 does not improve AUC. Reverting changes.
Training on augumented user 24079 8/50 current_auc = 0.7126623376623377
User 24079 AUC after training: 0.7126623376623377
User 24079 does not improve AUC. Reverting changes.
Training on augumented user 28470 9/50 current_auc = 0.7126623376623377
User 28470 AUC after training: 0.7126623376623377
User 28470 does not improve AUC. Reverting changes.
Training on augumented user 43463 10/50 current_auc = 0.7126623376623377
User 43463 AUC after training: 0.7159090909090909
User 43463 improves AUC. Keeping the model.
Training on augumented user 72570 11/50 current_auc = 0.7159090909090909
User 72570 AUC after training: 0.7126623376623377
User 72570 does not improve AUC. Reverting changes.
Training on augumented user 1296 12/50 current_auc = 0.7159090909090909
User 1296 AUC after training: 0.7159090909090909
User 1296 does not improve AUC. Reverting changes.
Training on augumented user 43742 13/50 current_auc = 0.7159090909090909
User 43742 AUC after training: 0.7142857142857143
User 43742 does not improve AUC. Reverting changes.
Training on augumented user 44172 14/50 current_auc = 0.7159090909090909
User 44172 AUC after training: 0.7142857142857143
User 44172 does not improve AUC. Reverting changes.
Training on augumented user 88171 15/50 current_auc = 0.7159090909090909
User 88171 AUC after training: 0.7159090909090909
User 88171 does not improve AUC. Reverting changes.
Training on augumented user 41295 16/50 current_auc = 0.7159090909090909
User 41295 AUC after training: 0.7142857142857143
User 41295 does not improve AUC. Reverting changes.
Training on augumented user 19857 17/50 current_auc = 0.7159090909090909
User 19857 AUC after training: 0.7175324675324676
User 19857 improves AUC. Keeping the model.
Training on augumented user 49233 18/50 current_auc = 0.7175324675324676
User 49233 AUC after training: 0.7159090909090909
User 49233 does not improve AUC. Reverting changes.
Training on augumented user 102805 19/50 current_auc = 0.7175324675324676
User 102805 AUC after training: 0.7159090909090909
User 102805 does not improve AUC. Reverting changes.
Training on augumented user 59203 20/50 current_auc = 0.7175324675324676
User 59203 AUC after training: 0.7175324675324676
User 59203 does not improve AUC. Reverting changes.
Training on augumented user 85370 21/50 current_auc = 0.7175324675324676
User 85370 AUC after training: 0.7175324675324676
User 85370 does not improve AUC. Reverting changes.
Training on augumented user 81236 22/50 current_auc = 0.7175324675324676
User 81236 AUC after training: 0.7175324675324676
User 81236 does not improve AUC. Reverting changes.
Training on augumented user 49322 23/50 current_auc = 0.7175324675324676
User 49322 AUC after training: 0.7159090909090909
User 49322 does not improve AUC. Reverting changes.
Training on augumented user 72864 24/50 current_auc = 0.7175324675324676
User 72864 AUC after training: 0.7159090909090909
User 72864 does not improve AUC. Reverting changes.
Training on augumented user 103993 25/50 current_auc = 0.7175324675324676
User 103993 AUC after training: 0.7159090909090909
User 103993 does not improve AUC. Reverting changes.
Training on augumented user 90585 26/50 current_auc = 0.7175324675324676
User 90585 AUC after training: 0.7159090909090909
User 90585 does not improve AUC. Reverting changes.
Training on augumented user 109660 27/50 current_auc = 0.7175324675324676
User 109660 AUC after training: 0.7159090909090909
User 109660 does not improve AUC. Reverting changes.
Training on augumented user 43307 28/50 current_auc = 0.7175324675324676
User 43307 AUC after training: 0.7175324675324676
User 43307 does not improve AUC. Reverting changes.
Training on augumented user 124190 29/50 current_auc = 0.7175324675324676
User 124190 AUC after training: 0.7175324675324676
User 124190 does not improve AUC. Reverting changes.
Training on augumented user 122042 30/50 current_auc = 0.7175324675324676
User 122042 AUC after training: 0.7175324675324676
User 122042 does not improve AUC. Reverting changes.
Training on augumented user 121086 31/50 current_auc = 0.7175324675324676
User 121086 AUC after training: 0.7175324675324676
User 121086 does not improve AUC. Reverting changes.
Training on augumented user 14946 32/50 current_auc = 0.7175324675324676
User 14946 AUC after training: 0.7175324675324676
User 14946 does not improve AUC. Reverting changes.
Training on augumented user 124585 33/50 current_auc = 0.7175324675324676
User 124585 AUC after training: 0.7159090909090909
User 124585 does not improve AUC. Reverting changes.
Training on augumented user 41 34/50 current_auc = 0.7175324675324676
User 41 AUC after training: 0.7159090909090909
User 41 does not improve AUC. Reverting changes.
Training on augumented user 62806 35/50 current_auc = 0.7175324675324676
User 62806 AUC after training: 0.7175324675324676
User 62806 does not improve AUC. Reverting changes.
Training on augumented user 73147 36/50 current_auc = 0.7175324675324676
User 73147 AUC after training: 0.7159090909090909
User 73147 does not improve AUC. Reverting changes.
Training on augumented user 4857 37/50 current_auc = 0.7175324675324676
User 4857 AUC after training: 0.7175324675324676
User 4857 does not improve AUC. Reverting changes.
Training on augumented user 127647 38/50 current_auc = 0.7175324675324676
User 127647 AUC after training: 0.7175324675324676
User 127647 does not improve AUC. Reverting changes.
Training on augumented user 38556 39/50 current_auc = 0.7175324675324676
User 38556 AUC after training: 0.7175324675324676
User 38556 does not improve AUC. Reverting changes.
Training on augumented user 10612 40/50 current_auc = 0.7175324675324676
User 10612 AUC after training: 0.7142857142857143
User 10612 does not improve AUC. Reverting changes.
Training on augumented user 124994 41/50 current_auc = 0.7175324675324676
User 124994 AUC after training: 0.7175324675324676
User 124994 does not improve AUC. Reverting changes.
Training on augumented user 52013 42/50 current_auc = 0.7175324675324676
User 52013 AUC after training: 0.7159090909090909
User 52013 does not improve AUC. Reverting changes.
Training on augumented user 83336 43/50 current_auc = 0.7175324675324676
User 83336 AUC after training: 0.7175324675324676
User 83336 does not improve AUC. Reverting changes.
Training on augumented user 90546 44/50 current_auc = 0.7175324675324676
User 90546 AUC after training: 0.7159090909090909
User 90546 does not improve AUC. Reverting changes.
Training on augumented user 135052 45/50 current_auc = 0.7175324675324676
User 135052 AUC after training: 0.7175324675324676
User 135052 does not improve AUC. Reverting changes.
Training on augumented user 128341 46/50 current_auc = 0.7175324675324676
User 128341 AUC after training: 0.7159090909090909
User 128341 does not improve AUC. Reverting changes.
Training on augumented user 48932 47/50 current_auc = 0.7175324675324676
User 48932 AUC after training: 0.7175324675324676
User 48932 does not improve AUC. Reverting changes.
Training on augumented user 79071 48/50 current_auc = 0.7175324675324676
User 79071 AUC after training: 0.7175324675324676
User 79071 does not improve AUC. Reverting changes.
Training on augumented user 35530 49/50 current_auc = 0.7175324675324676
User 35530 AUC after training: 0.7159090909090909
User 35530 does not improve AUC. Reverting changes.
[2024-12-02 18:16:13.001599] start test user 57484 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:13.863363] start test user 57484 71/568 recall augumented users by random, augumented_users = [51552, 127595, 60637, 115428, 85542, 34952, 111080, 75503, 17415, 21109, 118962, 5687, 130583, 129618, 1411, 67501, 63018, 26780, 80868, 92852, 44655, 29575, 133512, 28408, 35429, 10967, 91333, 120558, 22730, 11651, 41424, 36875, 75220, 133568, 70903, 85468, 19622, 26104, 22062, 89380, 40545, 92737, 80431, 73075, 108638, 7566, 81616, 19069, 29528, 72045]
[2024-12-02 18:16:13.877857] user = 57484 Cloud 71/568
[2024-12-02 18:16:13.923041] user = 57484 Local 71/568
[2024-12-02 18:16:14.031439] user = 57484 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:16.679128] user = 57484 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6568627450980393
Training on augumented user 51552 0/50 current_auc = 0.6568627450980393
User 51552 AUC after training: 0.6564856711915535
User 51552 does not improve AUC. Reverting changes.
Training on augumented user 127595 1/50 current_auc = 0.6568627450980393
User 127595 AUC after training: 0.6574283559577677
User 127595 improves AUC. Keeping the model.
Training on augumented user 60637 2/50 current_auc = 0.6574283559577677
User 60637 AUC after training: 0.6574283559577677
User 60637 does not improve AUC. Reverting changes.
Training on augumented user 115428 3/50 current_auc = 0.6574283559577677
User 115428 AUC after training: 0.6568627450980392
User 115428 does not improve AUC. Reverting changes.
Training on augumented user 85542 4/50 current_auc = 0.6574283559577677
User 85542 AUC after training: 0.6572398190045249
User 85542 does not improve AUC. Reverting changes.
Training on augumented user 34952 5/50 current_auc = 0.6574283559577677
User 34952 AUC after training: 0.6578054298642535
User 34952 improves AUC. Keeping the model.
Training on augumented user 111080 6/50 current_auc = 0.6578054298642535
User 111080 AUC after training: 0.6593137254901961
User 111080 improves AUC. Keeping the model.
Training on augumented user 75503 7/50 current_auc = 0.6593137254901961
User 75503 AUC after training: 0.6598793363499247
User 75503 improves AUC. Keeping the model.
Training on augumented user 17415 8/50 current_auc = 0.6598793363499247
User 17415 AUC after training: 0.660633484162896
User 17415 improves AUC. Keeping the model.
Training on augumented user 21109 9/50 current_auc = 0.660633484162896
User 21109 AUC after training: 0.6602564102564104
User 21109 does not improve AUC. Reverting changes.
Training on augumented user 118962 10/50 current_auc = 0.660633484162896
User 118962 AUC after training: 0.6600678733031675
User 118962 does not improve AUC. Reverting changes.
Training on augumented user 5687 11/50 current_auc = 0.660633484162896
User 5687 AUC after training: 0.6606334841628959
User 5687 does not improve AUC. Reverting changes.
Training on augumented user 130583 12/50 current_auc = 0.660633484162896
User 130583 AUC after training: 0.6619532428355959
User 130583 improves AUC. Keeping the model.
Training on augumented user 129618 13/50 current_auc = 0.6619532428355959
User 129618 AUC after training: 0.6619532428355958
User 129618 does not improve AUC. Reverting changes.
Training on augumented user 1411 14/50 current_auc = 0.6619532428355959
User 1411 AUC after training: 0.6600678733031674
User 1411 does not improve AUC. Reverting changes.
Training on augumented user 67501 15/50 current_auc = 0.6619532428355959
User 67501 AUC after training: 0.6625188536953243
User 67501 improves AUC. Keeping the model.
Training on augumented user 63018 16/50 current_auc = 0.6625188536953243
User 63018 AUC after training: 0.6621417797888387
User 63018 does not improve AUC. Reverting changes.
Training on augumented user 26780 17/50 current_auc = 0.6625188536953243
User 26780 AUC after training: 0.6623303167420814
User 26780 does not improve AUC. Reverting changes.
Training on augumented user 80868 18/50 current_auc = 0.6625188536953243
User 80868 AUC after training: 0.6617647058823529
User 80868 does not improve AUC. Reverting changes.
Training on augumented user 92852 19/50 current_auc = 0.6625188536953243
User 92852 AUC after training: 0.6628959276018099
User 92852 improves AUC. Keeping the model.
Training on augumented user 44655 20/50 current_auc = 0.6628959276018099
User 44655 AUC after training: 0.6636500754147814
User 44655 improves AUC. Keeping the model.
Training on augumented user 29575 21/50 current_auc = 0.6636500754147814
User 29575 AUC after training: 0.6608220211161387
User 29575 does not improve AUC. Reverting changes.
Training on augumented user 133512 22/50 current_auc = 0.6636500754147814
User 133512 AUC after training: 0.6619532428355958
User 133512 does not improve AUC. Reverting changes.
Training on augumented user 28408 23/50 current_auc = 0.6636500754147814
User 28408 AUC after training: 0.6611990950226244
User 28408 does not improve AUC. Reverting changes.
Training on augumented user 35429 24/50 current_auc = 0.6636500754147814
User 35429 AUC after training: 0.6630844645550529
User 35429 does not improve AUC. Reverting changes.
Training on augumented user 10967 25/50 current_auc = 0.6636500754147814
User 10967 AUC after training: 0.6638386123680241
User 10967 improves AUC. Keeping the model.
Training on augumented user 91333 26/50 current_auc = 0.6638386123680241
User 91333 AUC after training: 0.6630844645550528
User 91333 does not improve AUC. Reverting changes.
Training on augumented user 120558 27/50 current_auc = 0.6638386123680241
User 120558 AUC after training: 0.6628959276018099
User 120558 does not improve AUC. Reverting changes.
Training on augumented user 22730 28/50 current_auc = 0.6638386123680241
User 22730 AUC after training: 0.6634615384615385
User 22730 does not improve AUC. Reverting changes.
Training on augumented user 11651 29/50 current_auc = 0.6638386123680241
User 11651 AUC after training: 0.6636500754147813
User 11651 does not improve AUC. Reverting changes.
Training on augumented user 41424 30/50 current_auc = 0.6638386123680241
User 41424 AUC after training: 0.6613876319758673
User 41424 does not improve AUC. Reverting changes.
Training on augumented user 36875 31/50 current_auc = 0.6638386123680241
User 36875 AUC after training: 0.6642156862745098
User 36875 improves AUC. Keeping the model.
Training on augumented user 75220 32/50 current_auc = 0.6642156862745098
User 75220 AUC after training: 0.6625188536953243
User 75220 does not improve AUC. Reverting changes.
Training on augumented user 133568 33/50 current_auc = 0.6642156862745098
User 133568 AUC after training: 0.6627073906485671
User 133568 does not improve AUC. Reverting changes.
Training on augumented user 70903 34/50 current_auc = 0.6642156862745098
User 70903 AUC after training: 0.6636500754147814
User 70903 does not improve AUC. Reverting changes.
Training on augumented user 85468 35/50 current_auc = 0.6642156862745098
User 85468 AUC after training: 0.6640271493212669
User 85468 does not improve AUC. Reverting changes.
Training on augumented user 19622 36/50 current_auc = 0.6642156862745098
User 19622 AUC after training: 0.6630844645550528
User 19622 does not improve AUC. Reverting changes.
Training on augumented user 26104 37/50 current_auc = 0.6642156862745098
User 26104 AUC after training: 0.6638386123680242
User 26104 does not improve AUC. Reverting changes.
Training on augumented user 22062 38/50 current_auc = 0.6642156862745098
User 22062 AUC after training: 0.6628959276018099
User 22062 does not improve AUC. Reverting changes.
Training on augumented user 89380 39/50 current_auc = 0.6642156862745098
User 89380 AUC after training: 0.6638386123680242
User 89380 does not improve AUC. Reverting changes.
Training on augumented user 40545 40/50 current_auc = 0.6642156862745098
User 40545 AUC after training: 0.6640271493212669
User 40545 does not improve AUC. Reverting changes.
Training on augumented user 92737 41/50 current_auc = 0.6642156862745098
User 92737 AUC after training: 0.6610105580693816
User 92737 does not improve AUC. Reverting changes.
Training on augumented user 80431 42/50 current_auc = 0.6642156862745098
User 80431 AUC after training: 0.6625188536953243
User 80431 does not improve AUC. Reverting changes.
Training on augumented user 73075 43/50 current_auc = 0.6642156862745098
User 73075 AUC after training: 0.6634615384615384
User 73075 does not improve AUC. Reverting changes.
Training on augumented user 108638 44/50 current_auc = 0.6642156862745098
User 108638 AUC after training: 0.6638386123680241
User 108638 does not improve AUC. Reverting changes.
Training on augumented user 7566 45/50 current_auc = 0.6642156862745098
User 7566 AUC after training: 0.6636500754147814
User 7566 does not improve AUC. Reverting changes.
Training on augumented user 81616 46/50 current_auc = 0.6642156862745098
User 81616 AUC after training: 0.6642156862745099
User 81616 improves AUC. Keeping the model.
Training on augumented user 19069 47/50 current_auc = 0.6642156862745099
User 19069 AUC after training: 0.6627073906485672
User 19069 does not improve AUC. Reverting changes.
Training on augumented user 29528 48/50 current_auc = 0.6642156862745099
User 29528 AUC after training: 0.6625188536953243
User 29528 does not improve AUC. Reverting changes.
Training on augumented user 72045 49/50 current_auc = 0.6642156862745099
User 72045 AUC after training: 0.6628959276018099
User 72045 does not improve AUC. Reverting changes.
[2024-12-02 18:16:51.168741] start test user 57505 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:51.581280] start test user 57505 72/568 recall augumented users by random, augumented_users = [129919, 34606, 123614, 90159, 35890, 55715, 94946, 26926, 73013, 116000, 112087, 20649, 120915, 76755, 66503, 131897, 75797, 76690, 111589, 92902, 102489, 18158, 22651, 71396, 93399, 78946, 11031, 107607, 83281, 108032, 62941, 36733, 68077, 71460, 99419, 126332, 115747, 5338, 57279, 1797, 96777, 131642, 34985, 42986, 135881, 67484, 44551, 92780, 69130, 134699]
[2024-12-02 18:16:51.596526] user = 57505 Cloud 72/568
[2024-12-02 18:16:51.606913] user = 57505 Local 72/568
[2024-12-02 18:16:51.653765] user = 57505 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:53.998749] user = 57505 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5575757575757576
Training on augumented user 129919 0/50 current_auc = 0.5575757575757576
User 129919 AUC after training: 0.5575757575757576
User 129919 does not improve AUC. Reverting changes.
Training on augumented user 34606 1/50 current_auc = 0.5575757575757576
User 34606 AUC after training: 0.5575757575757576
User 34606 does not improve AUC. Reverting changes.
Training on augumented user 123614 2/50 current_auc = 0.5575757575757576
User 123614 AUC after training: 0.5575757575757576
User 123614 does not improve AUC. Reverting changes.
Training on augumented user 90159 3/50 current_auc = 0.5575757575757576
User 90159 AUC after training: 0.5575757575757576
User 90159 does not improve AUC. Reverting changes.
Training on augumented user 35890 4/50 current_auc = 0.5575757575757576
User 35890 AUC after training: 0.5575757575757576
User 35890 does not improve AUC. Reverting changes.
Training on augumented user 55715 5/50 current_auc = 0.5575757575757576
User 55715 AUC after training: 0.5575757575757576
User 55715 does not improve AUC. Reverting changes.
Training on augumented user 94946 6/50 current_auc = 0.5575757575757576
User 94946 AUC after training: 0.5575757575757576
User 94946 does not improve AUC. Reverting changes.
Training on augumented user 26926 7/50 current_auc = 0.5575757575757576
User 26926 AUC after training: 0.5575757575757576
User 26926 does not improve AUC. Reverting changes.
Training on augumented user 73013 8/50 current_auc = 0.5575757575757576
User 73013 AUC after training: 0.5575757575757576
User 73013 does not improve AUC. Reverting changes.
Training on augumented user 116000 9/50 current_auc = 0.5575757575757576
User 116000 AUC after training: 0.5575757575757576
User 116000 does not improve AUC. Reverting changes.
Training on augumented user 112087 10/50 current_auc = 0.5575757575757576
User 112087 AUC after training: 0.5575757575757576
User 112087 does not improve AUC. Reverting changes.
Training on augumented user 20649 11/50 current_auc = 0.5575757575757576
User 20649 AUC after training: 0.5575757575757576
User 20649 does not improve AUC. Reverting changes.
Training on augumented user 120915 12/50 current_auc = 0.5575757575757576
User 120915 AUC after training: 0.5575757575757576
User 120915 does not improve AUC. Reverting changes.
Training on augumented user 76755 13/50 current_auc = 0.5575757575757576
User 76755 AUC after training: 0.5575757575757576
User 76755 does not improve AUC. Reverting changes.
Training on augumented user 66503 14/50 current_auc = 0.5575757575757576
User 66503 AUC after training: 0.5575757575757576
User 66503 does not improve AUC. Reverting changes.
Training on augumented user 131897 15/50 current_auc = 0.5575757575757576
User 131897 AUC after training: 0.5575757575757576
User 131897 does not improve AUC. Reverting changes.
Training on augumented user 75797 16/50 current_auc = 0.5575757575757576
User 75797 AUC after training: 0.5575757575757576
User 75797 does not improve AUC. Reverting changes.
Training on augumented user 76690 17/50 current_auc = 0.5575757575757576
User 76690 AUC after training: 0.5575757575757576
User 76690 does not improve AUC. Reverting changes.
Training on augumented user 111589 18/50 current_auc = 0.5575757575757576
User 111589 AUC after training: 0.5575757575757576
User 111589 does not improve AUC. Reverting changes.
Training on augumented user 92902 19/50 current_auc = 0.5575757575757576
User 92902 AUC after training: 0.5575757575757576
User 92902 does not improve AUC. Reverting changes.
Training on augumented user 102489 20/50 current_auc = 0.5575757575757576
User 102489 AUC after training: 0.5575757575757576
User 102489 does not improve AUC. Reverting changes.
Training on augumented user 18158 21/50 current_auc = 0.5575757575757576
User 18158 AUC after training: 0.5575757575757576
User 18158 does not improve AUC. Reverting changes.
Training on augumented user 22651 22/50 current_auc = 0.5575757575757576
User 22651 AUC after training: 0.5575757575757576
User 22651 does not improve AUC. Reverting changes.
Training on augumented user 71396 23/50 current_auc = 0.5575757575757576
User 71396 AUC after training: 0.5575757575757576
User 71396 does not improve AUC. Reverting changes.
Training on augumented user 93399 24/50 current_auc = 0.5575757575757576
User 93399 AUC after training: 0.5575757575757576
User 93399 does not improve AUC. Reverting changes.
Training on augumented user 78946 25/50 current_auc = 0.5575757575757576
User 78946 AUC after training: 0.5575757575757576
User 78946 does not improve AUC. Reverting changes.
Training on augumented user 11031 26/50 current_auc = 0.5575757575757576
User 11031 AUC after training: 0.5575757575757576
User 11031 does not improve AUC. Reverting changes.
Training on augumented user 107607 27/50 current_auc = 0.5575757575757576
User 107607 AUC after training: 0.5575757575757576
User 107607 does not improve AUC. Reverting changes.
Training on augumented user 83281 28/50 current_auc = 0.5575757575757576
User 83281 AUC after training: 0.5575757575757576
User 83281 does not improve AUC. Reverting changes.
Training on augumented user 108032 29/50 current_auc = 0.5575757575757576
User 108032 AUC after training: 0.5575757575757576
User 108032 does not improve AUC. Reverting changes.
Training on augumented user 62941 30/50 current_auc = 0.5575757575757576
User 62941 AUC after training: 0.5575757575757576
User 62941 does not improve AUC. Reverting changes.
Training on augumented user 36733 31/50 current_auc = 0.5575757575757576
User 36733 AUC after training: 0.5575757575757576
User 36733 does not improve AUC. Reverting changes.
Training on augumented user 68077 32/50 current_auc = 0.5575757575757576
User 68077 AUC after training: 0.5575757575757576
User 68077 does not improve AUC. Reverting changes.
Training on augumented user 71460 33/50 current_auc = 0.5575757575757576
User 71460 AUC after training: 0.5575757575757576
User 71460 does not improve AUC. Reverting changes.
Training on augumented user 99419 34/50 current_auc = 0.5575757575757576
User 99419 AUC after training: 0.5575757575757576
User 99419 does not improve AUC. Reverting changes.
Training on augumented user 126332 35/50 current_auc = 0.5575757575757576
User 126332 AUC after training: 0.5575757575757576
User 126332 does not improve AUC. Reverting changes.
Training on augumented user 115747 36/50 current_auc = 0.5575757575757576
User 115747 AUC after training: 0.5575757575757576
User 115747 does not improve AUC. Reverting changes.
Training on augumented user 5338 37/50 current_auc = 0.5575757575757576
User 5338 AUC after training: 0.5575757575757576
User 5338 does not improve AUC. Reverting changes.
Training on augumented user 57279 38/50 current_auc = 0.5575757575757576
User 57279 AUC after training: 0.5575757575757576
User 57279 does not improve AUC. Reverting changes.
Training on augumented user 1797 39/50 current_auc = 0.5575757575757576
User 1797 AUC after training: 0.5575757575757576
User 1797 does not improve AUC. Reverting changes.
Training on augumented user 96777 40/50 current_auc = 0.5575757575757576
User 96777 AUC after training: 0.5575757575757576
User 96777 does not improve AUC. Reverting changes.
Training on augumented user 131642 41/50 current_auc = 0.5575757575757576
User 131642 AUC after training: 0.5575757575757576
User 131642 does not improve AUC. Reverting changes.
Training on augumented user 34985 42/50 current_auc = 0.5575757575757576
User 34985 AUC after training: 0.5575757575757576
User 34985 does not improve AUC. Reverting changes.
Training on augumented user 42986 43/50 current_auc = 0.5575757575757576
User 42986 AUC after training: 0.5575757575757576
User 42986 does not improve AUC. Reverting changes.
Training on augumented user 135881 44/50 current_auc = 0.5575757575757576
User 135881 AUC after training: 0.5575757575757576
User 135881 does not improve AUC. Reverting changes.
Training on augumented user 67484 45/50 current_auc = 0.5575757575757576
User 67484 AUC after training: 0.5575757575757576
User 67484 does not improve AUC. Reverting changes.
Training on augumented user 44551 46/50 current_auc = 0.5575757575757576
User 44551 AUC after training: 0.5575757575757576
User 44551 does not improve AUC. Reverting changes.
Training on augumented user 92780 47/50 current_auc = 0.5575757575757576
User 92780 AUC after training: 0.5575757575757576
User 92780 does not improve AUC. Reverting changes.
Training on augumented user 69130 48/50 current_auc = 0.5575757575757576
User 69130 AUC after training: 0.5575757575757576
User 69130 does not improve AUC. Reverting changes.
Training on augumented user 134699 49/50 current_auc = 0.5575757575757576
User 134699 AUC after training: 0.5575757575757576
User 134699 does not improve AUC. Reverting changes.
[2024-12-02 18:17:23.164107] start test user 57516 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:23.949971] start test user 57516 73/568 recall augumented users by random, augumented_users = [367, 29847, 72498, 11411, 17862, 81058, 123826, 9266, 60261, 116033, 111439, 56091, 51871, 109531, 49476, 96410, 18595, 46627, 125564, 10106, 132183, 87974, 57828, 100538, 25319, 5325, 24737, 82860, 75889, 40923, 106551, 113748, 29815, 29557, 55364, 60181, 126340, 80119, 27069, 9588, 117453, 109728, 5569, 80678, 126404, 14963, 106347, 115551, 100023, 125537]
[2024-12-02 18:17:24.019500] user = 57516 Cloud 73/568
[2024-12-02 18:17:24.082017] user = 57516 Local 73/568
[2024-12-02 18:17:24.376677] user = 57516 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:27.629645] user = 57516 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5467566287878787
Training on augumented user 367 0/50 current_auc = 0.5467566287878787
User 367 AUC after training: 0.5473879419191919
User 367 improves AUC. Keeping the model.
Training on augumented user 29847 1/50 current_auc = 0.5473879419191919
User 29847 AUC after training: 0.5471906565656566
User 29847 does not improve AUC. Reverting changes.
Training on augumented user 72498 2/50 current_auc = 0.5473879419191919
User 72498 AUC after training: 0.5470722853535352
User 72498 does not improve AUC. Reverting changes.
Training on augumented user 11411 3/50 current_auc = 0.5473879419191919
User 11411 AUC after training: 0.547427398989899
User 11411 improves AUC. Keeping the model.
Training on augumented user 17862 4/50 current_auc = 0.547427398989899
User 17862 AUC after training: 0.5474076704545454
User 17862 does not improve AUC. Reverting changes.
Training on augumented user 81058 5/50 current_auc = 0.547427398989899
User 81058 AUC after training: 0.547979797979798
User 81058 improves AUC. Keeping the model.
Training on augumented user 123826 6/50 current_auc = 0.547979797979798
User 123826 AUC after training: 0.5471906565656566
User 123826 does not improve AUC. Reverting changes.
Training on augumented user 9266 7/50 current_auc = 0.547979797979798
User 9266 AUC after training: 0.5471117424242424
User 9266 does not improve AUC. Reverting changes.
Training on augumented user 60261 8/50 current_auc = 0.547979797979798
User 60261 AUC after training: 0.5479008838383838
User 60261 does not improve AUC. Reverting changes.
Training on augumented user 116033 9/50 current_auc = 0.547979797979798
User 116033 AUC after training: 0.5474471275252525
User 116033 does not improve AUC. Reverting changes.
Training on augumented user 111439 10/50 current_auc = 0.547979797979798
User 111439 AUC after training: 0.5473484848484849
User 111439 does not improve AUC. Reverting changes.
Training on augumented user 56091 11/50 current_auc = 0.547979797979798
User 56091 AUC after training: 0.5466974431818181
User 56091 does not improve AUC. Reverting changes.
Training on augumented user 51871 12/50 current_auc = 0.547979797979798
User 51871 AUC after training: 0.547979797979798
User 51871 does not improve AUC. Reverting changes.
Training on augumented user 109531 13/50 current_auc = 0.547979797979798
User 109531 AUC after training: 0.5473879419191919
User 109531 does not improve AUC. Reverting changes.
Training on augumented user 49476 14/50 current_auc = 0.547979797979798
User 49476 AUC after training: 0.5478219696969697
User 49476 does not improve AUC. Reverting changes.
Training on augumented user 96410 15/50 current_auc = 0.547979797979798
User 96410 AUC after training: 0.548058712121212
User 96410 improves AUC. Keeping the model.
Training on augumented user 18595 16/50 current_auc = 0.548058712121212
User 18595 AUC after training: 0.5477035984848484
User 18595 does not improve AUC. Reverting changes.
Training on augumented user 46627 17/50 current_auc = 0.548058712121212
User 46627 AUC after training: 0.5481376262626263
User 46627 improves AUC. Keeping the model.
Training on augumented user 125564 18/50 current_auc = 0.5481376262626263
User 125564 AUC after training: 0.5478614267676768
User 125564 does not improve AUC. Reverting changes.
Training on augumented user 10106 19/50 current_auc = 0.5481376262626263
User 10106 AUC after training: 0.5471511994949495
User 10106 does not improve AUC. Reverting changes.
Training on augumented user 132183 20/50 current_auc = 0.5481376262626263
User 132183 AUC after training: 0.547723327020202
User 132183 does not improve AUC. Reverting changes.
Training on augumented user 87974 21/50 current_auc = 0.5481376262626263
User 87974 AUC after training: 0.5477825126262627
User 87974 does not improve AUC. Reverting changes.
Training on augumented user 57828 22/50 current_auc = 0.5481376262626263
User 57828 AUC after training: 0.5480192550505051
User 57828 does not improve AUC. Reverting changes.
Training on augumented user 100538 23/50 current_auc = 0.5481376262626263
User 100538 AUC after training: 0.548532196969697
User 100538 improves AUC. Keeping the model.
Training on augumented user 25319 24/50 current_auc = 0.548532196969697
User 25319 AUC after training: 0.5476641414141414
User 25319 does not improve AUC. Reverting changes.
Training on augumented user 5325 25/50 current_auc = 0.548532196969697
User 5325 AUC after training: 0.547723327020202
User 5325 does not improve AUC. Reverting changes.
Training on augumented user 24737 26/50 current_auc = 0.548532196969697
User 24737 AUC after training: 0.5477035984848485
User 24737 does not improve AUC. Reverting changes.
Training on augumented user 82860 27/50 current_auc = 0.548532196969697
User 82860 AUC after training: 0.546322601010101
User 82860 does not improve AUC. Reverting changes.
Training on augumented user 75889 28/50 current_auc = 0.548532196969697
User 75889 AUC after training: 0.547723327020202
User 75889 does not improve AUC. Reverting changes.
Training on augumented user 40923 29/50 current_auc = 0.548532196969697
User 40923 AUC after training: 0.5479403409090908
User 40923 does not improve AUC. Reverting changes.
Training on augumented user 106551 30/50 current_auc = 0.548532196969697
User 106551 AUC after training: 0.5478614267676767
User 106551 does not improve AUC. Reverting changes.
Training on augumented user 113748 31/50 current_auc = 0.548532196969697
User 113748 AUC after training: 0.548571654040404
User 113748 improves AUC. Keeping the model.
Training on augumented user 29815 32/50 current_auc = 0.548571654040404
User 29815 AUC after training: 0.5484532828282828
User 29815 does not improve AUC. Reverting changes.
Training on augumented user 29557 33/50 current_auc = 0.548571654040404
User 29557 AUC after training: 0.5466382575757576
User 29557 does not improve AUC. Reverting changes.
Training on augumented user 55364 34/50 current_auc = 0.548571654040404
User 55364 AUC after training: 0.5471906565656566
User 55364 does not improve AUC. Reverting changes.
Training on augumented user 60181 35/50 current_auc = 0.548571654040404
User 60181 AUC after training: 0.5484335542929293
User 60181 does not improve AUC. Reverting changes.
Training on augumented user 126340 36/50 current_auc = 0.548571654040404
User 126340 AUC after training: 0.5480981691919191
User 126340 does not improve AUC. Reverting changes.
Training on augumented user 80119 37/50 current_auc = 0.548571654040404
User 80119 AUC after training: 0.5464804292929293
User 80119 does not improve AUC. Reverting changes.
Training on augumented user 27069 38/50 current_auc = 0.548571654040404
User 27069 AUC after training: 0.5481770833333334
User 27069 does not improve AUC. Reverting changes.
Training on augumented user 9588 39/50 current_auc = 0.548571654040404
User 9588 AUC after training: 0.5477430555555556
User 9588 does not improve AUC. Reverting changes.
Training on augumented user 117453 40/50 current_auc = 0.548571654040404
User 117453 AUC after training: 0.5470328282828283
User 117453 does not improve AUC. Reverting changes.
Training on augumented user 109728 41/50 current_auc = 0.548571654040404
User 109728 AUC after training: 0.5475063131313131
User 109728 does not improve AUC. Reverting changes.
Training on augumented user 5569 42/50 current_auc = 0.548571654040404
User 5569 AUC after training: 0.5483743686868687
User 5569 does not improve AUC. Reverting changes.
Training on augumented user 80678 43/50 current_auc = 0.548571654040404
User 80678 AUC after training: 0.5468355429292929
User 80678 does not improve AUC. Reverting changes.
Training on augumented user 126404 44/50 current_auc = 0.548571654040404
User 126404 AUC after training: 0.5482954545454546
User 126404 does not improve AUC. Reverting changes.
Training on augumented user 14963 45/50 current_auc = 0.548571654040404
User 14963 AUC after training: 0.5479008838383839
User 14963 does not improve AUC. Reverting changes.
Training on augumented user 106347 46/50 current_auc = 0.548571654040404
User 106347 AUC after training: 0.5467960858585859
User 106347 does not improve AUC. Reverting changes.
Training on augumented user 115551 47/50 current_auc = 0.548571654040404
User 115551 AUC after training: 0.5475852272727273
User 115551 does not improve AUC. Reverting changes.
Training on augumented user 100023 48/50 current_auc = 0.548571654040404
User 100023 AUC after training: 0.5461450441919191
User 100023 does not improve AUC. Reverting changes.
Training on augumented user 125537 49/50 current_auc = 0.548571654040404
User 125537 AUC after training: 0.5481376262626263
User 125537 does not improve AUC. Reverting changes.
[2024-12-02 18:18:00.285156] start test user 57518 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:00.897467] start test user 57518 74/568 recall augumented users by random, augumented_users = [4808, 10300, 133876, 43610, 123672, 69952, 48281, 118243, 10661, 101565, 58735, 118297, 42827, 83566, 93750, 21543, 27825, 44330, 23932, 25173, 134928, 2254, 120855, 33486, 136168, 39953, 88725, 118372, 108932, 28, 80576, 122434, 43127, 104227, 56034, 103428, 10060, 12880, 35053, 109507, 30083, 106064, 20497, 128795, 1973, 18335, 51736, 30419, 37446, 126747]
[2024-12-02 18:18:00.925971] user = 57518 Cloud 74/568
[2024-12-02 18:18:00.936290] user = 57518 Local 74/568
[2024-12-02 18:18:01.019612] user = 57518 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:03.766704] user = 57518 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9066666666666667
Training on augumented user 4808 0/50 current_auc = 0.9066666666666667
User 4808 AUC after training: 0.9
User 4808 does not improve AUC. Reverting changes.
Training on augumented user 10300 1/50 current_auc = 0.9066666666666667
User 10300 AUC after training: 0.9066666666666667
User 10300 does not improve AUC. Reverting changes.
Training on augumented user 133876 2/50 current_auc = 0.9066666666666667
User 133876 AUC after training: 0.9
User 133876 does not improve AUC. Reverting changes.
Training on augumented user 43610 3/50 current_auc = 0.9066666666666667
User 43610 AUC after training: 0.9066666666666667
User 43610 does not improve AUC. Reverting changes.
Training on augumented user 123672 4/50 current_auc = 0.9066666666666667
User 123672 AUC after training: 0.9066666666666667
User 123672 does not improve AUC. Reverting changes.
Training on augumented user 69952 5/50 current_auc = 0.9066666666666667
User 69952 AUC after training: 0.9066666666666667
User 69952 does not improve AUC. Reverting changes.
Training on augumented user 48281 6/50 current_auc = 0.9066666666666667
User 48281 AUC after training: 0.9066666666666667
User 48281 does not improve AUC. Reverting changes.
Training on augumented user 118243 7/50 current_auc = 0.9066666666666667
User 118243 AUC after training: 0.9066666666666667
User 118243 does not improve AUC. Reverting changes.
Training on augumented user 10661 8/50 current_auc = 0.9066666666666667
User 10661 AUC after training: 0.9066666666666667
User 10661 does not improve AUC. Reverting changes.
Training on augumented user 101565 9/50 current_auc = 0.9066666666666667
User 101565 AUC after training: 0.9066666666666667
User 101565 does not improve AUC. Reverting changes.
Training on augumented user 58735 10/50 current_auc = 0.9066666666666667
User 58735 AUC after training: 0.9066666666666667
User 58735 does not improve AUC. Reverting changes.
Training on augumented user 118297 11/50 current_auc = 0.9066666666666667
User 118297 AUC after training: 0.9066666666666667
User 118297 does not improve AUC. Reverting changes.
Training on augumented user 42827 12/50 current_auc = 0.9066666666666667
User 42827 AUC after training: 0.9
User 42827 does not improve AUC. Reverting changes.
Training on augumented user 83566 13/50 current_auc = 0.9066666666666667
User 83566 AUC after training: 0.9066666666666667
User 83566 does not improve AUC. Reverting changes.
Training on augumented user 93750 14/50 current_auc = 0.9066666666666667
User 93750 AUC after training: 0.9066666666666667
User 93750 does not improve AUC. Reverting changes.
Training on augumented user 21543 15/50 current_auc = 0.9066666666666667
User 21543 AUC after training: 0.9066666666666667
User 21543 does not improve AUC. Reverting changes.
Training on augumented user 27825 16/50 current_auc = 0.9066666666666667
User 27825 AUC after training: 0.9066666666666667
User 27825 does not improve AUC. Reverting changes.
Training on augumented user 44330 17/50 current_auc = 0.9066666666666667
User 44330 AUC after training: 0.9066666666666667
User 44330 does not improve AUC. Reverting changes.
Training on augumented user 23932 18/50 current_auc = 0.9066666666666667
User 23932 AUC after training: 0.9066666666666667
User 23932 does not improve AUC. Reverting changes.
Training on augumented user 25173 19/50 current_auc = 0.9066666666666667
User 25173 AUC after training: 0.9066666666666667
User 25173 does not improve AUC. Reverting changes.
Training on augumented user 134928 20/50 current_auc = 0.9066666666666667
User 134928 AUC after training: 0.9
User 134928 does not improve AUC. Reverting changes.
Training on augumented user 2254 21/50 current_auc = 0.9066666666666667
User 2254 AUC after training: 0.9
User 2254 does not improve AUC. Reverting changes.
Training on augumented user 120855 22/50 current_auc = 0.9066666666666667
User 120855 AUC after training: 0.9066666666666667
User 120855 does not improve AUC. Reverting changes.
Training on augumented user 33486 23/50 current_auc = 0.9066666666666667
User 33486 AUC after training: 0.9066666666666667
User 33486 does not improve AUC. Reverting changes.
Training on augumented user 136168 24/50 current_auc = 0.9066666666666667
User 136168 AUC after training: 0.9066666666666667
User 136168 does not improve AUC. Reverting changes.
Training on augumented user 39953 25/50 current_auc = 0.9066666666666667
User 39953 AUC after training: 0.9
User 39953 does not improve AUC. Reverting changes.
Training on augumented user 88725 26/50 current_auc = 0.9066666666666667
User 88725 AUC after training: 0.9066666666666667
User 88725 does not improve AUC. Reverting changes.
Training on augumented user 118372 27/50 current_auc = 0.9066666666666667
User 118372 AUC after training: 0.9
User 118372 does not improve AUC. Reverting changes.
Training on augumented user 108932 28/50 current_auc = 0.9066666666666667
User 108932 AUC after training: 0.9066666666666667
User 108932 does not improve AUC. Reverting changes.
Training on augumented user 28 29/50 current_auc = 0.9066666666666667
User 28 AUC after training: 0.9066666666666667
User 28 does not improve AUC. Reverting changes.
Training on augumented user 80576 30/50 current_auc = 0.9066666666666667
User 80576 AUC after training: 0.9066666666666667
User 80576 does not improve AUC. Reverting changes.
Training on augumented user 122434 31/50 current_auc = 0.9066666666666667
User 122434 AUC after training: 0.9066666666666667
User 122434 does not improve AUC. Reverting changes.
Training on augumented user 43127 32/50 current_auc = 0.9066666666666667
User 43127 AUC after training: 0.9066666666666667
User 43127 does not improve AUC. Reverting changes.
Training on augumented user 104227 33/50 current_auc = 0.9066666666666667
User 104227 AUC after training: 0.9066666666666667
User 104227 does not improve AUC. Reverting changes.
Training on augumented user 56034 34/50 current_auc = 0.9066666666666667
User 56034 AUC after training: 0.9
User 56034 does not improve AUC. Reverting changes.
Training on augumented user 103428 35/50 current_auc = 0.9066666666666667
User 103428 AUC after training: 0.9066666666666667
User 103428 does not improve AUC. Reverting changes.
Training on augumented user 10060 36/50 current_auc = 0.9066666666666667
User 10060 AUC after training: 0.9066666666666667
User 10060 does not improve AUC. Reverting changes.
Training on augumented user 12880 37/50 current_auc = 0.9066666666666667
User 12880 AUC after training: 0.9066666666666667
User 12880 does not improve AUC. Reverting changes.
Training on augumented user 35053 38/50 current_auc = 0.9066666666666667
User 35053 AUC after training: 0.9
User 35053 does not improve AUC. Reverting changes.
Training on augumented user 109507 39/50 current_auc = 0.9066666666666667
User 109507 AUC after training: 0.9066666666666667
User 109507 does not improve AUC. Reverting changes.
Training on augumented user 30083 40/50 current_auc = 0.9066666666666667
User 30083 AUC after training: 0.9066666666666667
User 30083 does not improve AUC. Reverting changes.
Training on augumented user 106064 41/50 current_auc = 0.9066666666666667
User 106064 AUC after training: 0.9066666666666667
User 106064 does not improve AUC. Reverting changes.
Training on augumented user 20497 42/50 current_auc = 0.9066666666666667
User 20497 AUC after training: 0.9066666666666667
User 20497 does not improve AUC. Reverting changes.
Training on augumented user 128795 43/50 current_auc = 0.9066666666666667
User 128795 AUC after training: 0.9066666666666667
User 128795 does not improve AUC. Reverting changes.
Training on augumented user 1973 44/50 current_auc = 0.9066666666666667
User 1973 AUC after training: 0.9066666666666667
User 1973 does not improve AUC. Reverting changes.
Training on augumented user 18335 45/50 current_auc = 0.9066666666666667
User 18335 AUC after training: 0.9066666666666667
User 18335 does not improve AUC. Reverting changes.
Training on augumented user 51736 46/50 current_auc = 0.9066666666666667
User 51736 AUC after training: 0.9
User 51736 does not improve AUC. Reverting changes.
Training on augumented user 30419 47/50 current_auc = 0.9066666666666667
User 30419 AUC after training: 0.9066666666666667
User 30419 does not improve AUC. Reverting changes.
Training on augumented user 37446 48/50 current_auc = 0.9066666666666667
User 37446 AUC after training: 0.9066666666666667
User 37446 does not improve AUC. Reverting changes.
Training on augumented user 126747 49/50 current_auc = 0.9066666666666667
User 126747 AUC after training: 0.9066666666666667
User 126747 does not improve AUC. Reverting changes.
[2024-12-02 18:18:30.573360] start test user 57587 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:31.124794] start test user 57587 75/568 recall augumented users by random, augumented_users = [126946, 12212, 59936, 135315, 130239, 17769, 35320, 33551, 98413, 118195, 84859, 74013, 125493, 4644, 55812, 2332, 118243, 118170, 64563, 78828, 91267, 124278, 112863, 121785, 98355, 89005, 81745, 49220, 56, 54614, 101236, 82207, 134048, 96949, 107995, 2281, 77942, 62714, 40557, 112716, 22179, 111759, 19116, 38420, 69603, 47370, 819, 49187, 111639, 74768]
[2024-12-02 18:18:31.139729] user = 57587 Cloud 75/568
[2024-12-02 18:18:31.149928] user = 57587 Local 75/568
[2024-12-02 18:18:31.218988] user = 57587 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:33.333879] user = 57587 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 126946 0/50 current_auc = 0.75
User 126946 AUC after training: 0.75
User 126946 does not improve AUC. Reverting changes.
Training on augumented user 12212 1/50 current_auc = 0.75
User 12212 AUC after training: 0.75
User 12212 does not improve AUC. Reverting changes.
Training on augumented user 59936 2/50 current_auc = 0.75
User 59936 AUC after training: 0.75
User 59936 does not improve AUC. Reverting changes.
Training on augumented user 135315 3/50 current_auc = 0.75
User 135315 AUC after training: 0.75
User 135315 does not improve AUC. Reverting changes.
Training on augumented user 130239 4/50 current_auc = 0.75
User 130239 AUC after training: 0.75
User 130239 does not improve AUC. Reverting changes.
Training on augumented user 17769 5/50 current_auc = 0.75
User 17769 AUC after training: 0.75
User 17769 does not improve AUC. Reverting changes.
Training on augumented user 35320 6/50 current_auc = 0.75
User 35320 AUC after training: 0.75
User 35320 does not improve AUC. Reverting changes.
Training on augumented user 33551 7/50 current_auc = 0.75
User 33551 AUC after training: 0.75
User 33551 does not improve AUC. Reverting changes.
Training on augumented user 98413 8/50 current_auc = 0.75
User 98413 AUC after training: 0.75
User 98413 does not improve AUC. Reverting changes.
Training on augumented user 118195 9/50 current_auc = 0.75
User 118195 AUC after training: 0.75
User 118195 does not improve AUC. Reverting changes.
Training on augumented user 84859 10/50 current_auc = 0.75
User 84859 AUC after training: 0.75
User 84859 does not improve AUC. Reverting changes.
Training on augumented user 74013 11/50 current_auc = 0.75
User 74013 AUC after training: 0.75
User 74013 does not improve AUC. Reverting changes.
Training on augumented user 125493 12/50 current_auc = 0.75
User 125493 AUC after training: 0.75
User 125493 does not improve AUC. Reverting changes.
Training on augumented user 4644 13/50 current_auc = 0.75
User 4644 AUC after training: 0.75
User 4644 does not improve AUC. Reverting changes.
Training on augumented user 55812 14/50 current_auc = 0.75
User 55812 AUC after training: 0.75
User 55812 does not improve AUC. Reverting changes.
Training on augumented user 2332 15/50 current_auc = 0.75
User 2332 AUC after training: 0.75
User 2332 does not improve AUC. Reverting changes.
Training on augumented user 118243 16/50 current_auc = 0.75
User 118243 AUC after training: 0.7583333333333334
User 118243 improves AUC. Keeping the model.
Training on augumented user 118170 17/50 current_auc = 0.7583333333333334
User 118170 AUC after training: 0.7583333333333334
User 118170 does not improve AUC. Reverting changes.
Training on augumented user 64563 18/50 current_auc = 0.7583333333333334
User 64563 AUC after training: 0.7583333333333334
User 64563 does not improve AUC. Reverting changes.
Training on augumented user 78828 19/50 current_auc = 0.7583333333333334
User 78828 AUC after training: 0.75
User 78828 does not improve AUC. Reverting changes.
Training on augumented user 91267 20/50 current_auc = 0.7583333333333334
User 91267 AUC after training: 0.7583333333333334
User 91267 does not improve AUC. Reverting changes.
Training on augumented user 124278 21/50 current_auc = 0.7583333333333334
User 124278 AUC after training: 0.7583333333333334
User 124278 does not improve AUC. Reverting changes.
Training on augumented user 112863 22/50 current_auc = 0.7583333333333334
User 112863 AUC after training: 0.7583333333333334
User 112863 does not improve AUC. Reverting changes.
Training on augumented user 121785 23/50 current_auc = 0.7583333333333334
User 121785 AUC after training: 0.75
User 121785 does not improve AUC. Reverting changes.
Training on augumented user 98355 24/50 current_auc = 0.7583333333333334
User 98355 AUC after training: 0.7583333333333334
User 98355 does not improve AUC. Reverting changes.
Training on augumented user 89005 25/50 current_auc = 0.7583333333333334
User 89005 AUC after training: 0.7583333333333334
User 89005 does not improve AUC. Reverting changes.
Training on augumented user 81745 26/50 current_auc = 0.7583333333333334
User 81745 AUC after training: 0.7583333333333334
User 81745 does not improve AUC. Reverting changes.
Training on augumented user 49220 27/50 current_auc = 0.7583333333333334
User 49220 AUC after training: 0.7583333333333334
User 49220 does not improve AUC. Reverting changes.
Training on augumented user 56 28/50 current_auc = 0.7583333333333334
User 56 AUC after training: 0.75
User 56 does not improve AUC. Reverting changes.
Training on augumented user 54614 29/50 current_auc = 0.7583333333333334
User 54614 AUC after training: 0.75
User 54614 does not improve AUC. Reverting changes.
Training on augumented user 101236 30/50 current_auc = 0.7583333333333334
User 101236 AUC after training: 0.7583333333333334
User 101236 does not improve AUC. Reverting changes.
Training on augumented user 82207 31/50 current_auc = 0.7583333333333334
User 82207 AUC after training: 0.7583333333333334
User 82207 does not improve AUC. Reverting changes.
Training on augumented user 134048 32/50 current_auc = 0.7583333333333334
User 134048 AUC after training: 0.75
User 134048 does not improve AUC. Reverting changes.
Training on augumented user 96949 33/50 current_auc = 0.7583333333333334
User 96949 AUC after training: 0.75
User 96949 does not improve AUC. Reverting changes.
Training on augumented user 107995 34/50 current_auc = 0.7583333333333334
User 107995 AUC after training: 0.75
User 107995 does not improve AUC. Reverting changes.
Training on augumented user 2281 35/50 current_auc = 0.7583333333333334
User 2281 AUC after training: 0.75
User 2281 does not improve AUC. Reverting changes.
Training on augumented user 77942 36/50 current_auc = 0.7583333333333334
User 77942 AUC after training: 0.7583333333333334
User 77942 does not improve AUC. Reverting changes.
Training on augumented user 62714 37/50 current_auc = 0.7583333333333334
User 62714 AUC after training: 0.75
User 62714 does not improve AUC. Reverting changes.
Training on augumented user 40557 38/50 current_auc = 0.7583333333333334
User 40557 AUC after training: 0.75
User 40557 does not improve AUC. Reverting changes.
Training on augumented user 112716 39/50 current_auc = 0.7583333333333334
User 112716 AUC after training: 0.7583333333333334
User 112716 does not improve AUC. Reverting changes.
Training on augumented user 22179 40/50 current_auc = 0.7583333333333334
User 22179 AUC after training: 0.75
User 22179 does not improve AUC. Reverting changes.
Training on augumented user 111759 41/50 current_auc = 0.7583333333333334
User 111759 AUC after training: 0.7583333333333334
User 111759 does not improve AUC. Reverting changes.
Training on augumented user 19116 42/50 current_auc = 0.7583333333333334
User 19116 AUC after training: 0.7583333333333334
User 19116 does not improve AUC. Reverting changes.
Training on augumented user 38420 43/50 current_auc = 0.7583333333333334
User 38420 AUC after training: 0.75
User 38420 does not improve AUC. Reverting changes.
Training on augumented user 69603 44/50 current_auc = 0.7583333333333334
User 69603 AUC after training: 0.7583333333333334
User 69603 does not improve AUC. Reverting changes.
Training on augumented user 47370 45/50 current_auc = 0.7583333333333334
User 47370 AUC after training: 0.7583333333333334
User 47370 does not improve AUC. Reverting changes.
Training on augumented user 819 46/50 current_auc = 0.7583333333333334
User 819 AUC after training: 0.7583333333333334
User 819 does not improve AUC. Reverting changes.
Training on augumented user 49187 47/50 current_auc = 0.7583333333333334
User 49187 AUC after training: 0.75
User 49187 does not improve AUC. Reverting changes.
Training on augumented user 111639 48/50 current_auc = 0.7583333333333334
User 111639 AUC after training: 0.7583333333333334
User 111639 does not improve AUC. Reverting changes.
Training on augumented user 74768 49/50 current_auc = 0.7583333333333334
User 74768 AUC after training: 0.7583333333333334
User 74768 does not improve AUC. Reverting changes.
[2024-12-02 18:19:03.720873] start test user 57626 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:04.134459] start test user 57626 76/568 recall augumented users by random, augumented_users = [84939, 21218, 87545, 114118, 127756, 128992, 8762, 104568, 12975, 62283, 33057, 52708, 111483, 48166, 137019, 11366, 80764, 43963, 15803, 97280, 34429, 111542, 119426, 79974, 28944, 5859, 131881, 75386, 102753, 106675, 72057, 37867, 80195, 8705, 49127, 75349, 108217, 83015, 87369, 4085, 59966, 107317, 76758, 69983, 63891, 35938, 89124, 49721, 134955, 43702]
[2024-12-02 18:19:04.151430] user = 57626 Cloud 76/568
[2024-12-02 18:19:04.168519] user = 57626 Local 76/568
[2024-12-02 18:19:04.284105] user = 57626 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:06.805421] user = 57626 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5646988670244485
Training on augumented user 84939 0/50 current_auc = 0.5646988670244485
User 84939 AUC after training: 0.5641025641025641
User 84939 does not improve AUC. Reverting changes.
Training on augumented user 21218 1/50 current_auc = 0.5646988670244485
User 21218 AUC after training: 0.5635062611806798
User 21218 does not improve AUC. Reverting changes.
Training on augumented user 87545 2/50 current_auc = 0.5646988670244485
User 87545 AUC after training: 0.5649970184853905
User 87545 improves AUC. Keeping the model.
Training on augumented user 114118 3/50 current_auc = 0.5649970184853905
User 114118 AUC after training: 0.5649970184853905
User 114118 does not improve AUC. Reverting changes.
Training on augumented user 127756 4/50 current_auc = 0.5649970184853905
User 127756 AUC after training: 0.5661896243291592
User 127756 improves AUC. Keeping the model.
Training on augumented user 128992 5/50 current_auc = 0.5661896243291592
User 128992 AUC after training: 0.5646988670244484
User 128992 does not improve AUC. Reverting changes.
Training on augumented user 8762 6/50 current_auc = 0.5661896243291592
User 8762 AUC after training: 0.5649970184853905
User 8762 does not improve AUC. Reverting changes.
Training on augumented user 104568 7/50 current_auc = 0.5661896243291592
User 104568 AUC after training: 0.5655933214072748
User 104568 does not improve AUC. Reverting changes.
Training on augumented user 12975 8/50 current_auc = 0.5661896243291592
User 12975 AUC after training: 0.5641025641025641
User 12975 does not improve AUC. Reverting changes.
Training on augumented user 62283 9/50 current_auc = 0.5661896243291592
User 62283 AUC after training: 0.5649970184853905
User 62283 does not improve AUC. Reverting changes.
Training on augumented user 33057 10/50 current_auc = 0.5661896243291592
User 33057 AUC after training: 0.5649970184853906
User 33057 does not improve AUC. Reverting changes.
Training on augumented user 52708 11/50 current_auc = 0.5661896243291592
User 52708 AUC after training: 0.5646988670244484
User 52708 does not improve AUC. Reverting changes.
Training on augumented user 111483 12/50 current_auc = 0.5661896243291592
User 111483 AUC after training: 0.5655933214072749
User 111483 does not improve AUC. Reverting changes.
Training on augumented user 48166 13/50 current_auc = 0.5661896243291592
User 48166 AUC after training: 0.5652951699463328
User 48166 does not improve AUC. Reverting changes.
Training on augumented user 137019 14/50 current_auc = 0.5661896243291592
User 137019 AUC after training: 0.5652951699463327
User 137019 does not improve AUC. Reverting changes.
Training on augumented user 11366 15/50 current_auc = 0.5661896243291592
User 11366 AUC after training: 0.5644007155635062
User 11366 does not improve AUC. Reverting changes.
Training on augumented user 80764 16/50 current_auc = 0.5661896243291592
User 80764 AUC after training: 0.5661896243291592
User 80764 does not improve AUC. Reverting changes.
Training on augumented user 43963 17/50 current_auc = 0.5661896243291592
User 43963 AUC after training: 0.5655933214072749
User 43963 does not improve AUC. Reverting changes.
Training on augumented user 15803 18/50 current_auc = 0.5661896243291592
User 15803 AUC after training: 0.5661896243291592
User 15803 does not improve AUC. Reverting changes.
Training on augumented user 97280 19/50 current_auc = 0.5661896243291592
User 97280 AUC after training: 0.5652951699463327
User 97280 does not improve AUC. Reverting changes.
Training on augumented user 34429 20/50 current_auc = 0.5661896243291592
User 34429 AUC after training: 0.5641025641025641
User 34429 does not improve AUC. Reverting changes.
Training on augumented user 111542 21/50 current_auc = 0.5661896243291592
User 111542 AUC after training: 0.5652951699463327
User 111542 does not improve AUC. Reverting changes.
Training on augumented user 119426 22/50 current_auc = 0.5661896243291592
User 119426 AUC after training: 0.5652951699463328
User 119426 does not improve AUC. Reverting changes.
Training on augumented user 79974 23/50 current_auc = 0.5661896243291592
User 79974 AUC after training: 0.5661896243291592
User 79974 does not improve AUC. Reverting changes.
Training on augumented user 28944 24/50 current_auc = 0.5661896243291592
User 28944 AUC after training: 0.5655933214072749
User 28944 does not improve AUC. Reverting changes.
Training on augumented user 5859 25/50 current_auc = 0.5661896243291592
User 5859 AUC after training: 0.5658914728682171
User 5859 does not improve AUC. Reverting changes.
Training on augumented user 131881 26/50 current_auc = 0.5661896243291592
User 131881 AUC after training: 0.5655933214072749
User 131881 does not improve AUC. Reverting changes.
Training on augumented user 75386 27/50 current_auc = 0.5661896243291592
User 75386 AUC after training: 0.5646988670244484
User 75386 does not improve AUC. Reverting changes.
Training on augumented user 102753 28/50 current_auc = 0.5661896243291592
User 102753 AUC after training: 0.5649970184853906
User 102753 does not improve AUC. Reverting changes.
Training on augumented user 106675 29/50 current_auc = 0.5661896243291592
User 106675 AUC after training: 0.5646988670244484
User 106675 does not improve AUC. Reverting changes.
Training on augumented user 72057 30/50 current_auc = 0.5661896243291592
User 72057 AUC after training: 0.5658914728682171
User 72057 does not improve AUC. Reverting changes.
Training on augumented user 37867 31/50 current_auc = 0.5661896243291592
User 37867 AUC after training: 0.5623136553369111
User 37867 does not improve AUC. Reverting changes.
Training on augumented user 80195 32/50 current_auc = 0.5661896243291592
User 80195 AUC after training: 0.5646988670244484
User 80195 does not improve AUC. Reverting changes.
Training on augumented user 8705 33/50 current_auc = 0.5661896243291592
User 8705 AUC after training: 0.5641025641025641
User 8705 does not improve AUC. Reverting changes.
Training on augumented user 49127 34/50 current_auc = 0.5661896243291592
User 49127 AUC after training: 0.5673822301729279
User 49127 improves AUC. Keeping the model.
Training on augumented user 75349 35/50 current_auc = 0.5673822301729279
User 75349 AUC after training: 0.5658914728682171
User 75349 does not improve AUC. Reverting changes.
Training on augumented user 108217 36/50 current_auc = 0.5673822301729279
User 108217 AUC after training: 0.5664877757901013
User 108217 does not improve AUC. Reverting changes.
Training on augumented user 83015 37/50 current_auc = 0.5673822301729279
User 83015 AUC after training: 0.5664877757901013
User 83015 does not improve AUC. Reverting changes.
Training on augumented user 87369 38/50 current_auc = 0.5673822301729279
User 87369 AUC after training: 0.5667859272510436
User 87369 does not improve AUC. Reverting changes.
Training on augumented user 4085 39/50 current_auc = 0.5673822301729279
User 4085 AUC after training: 0.5664877757901013
User 4085 does not improve AUC. Reverting changes.
Training on augumented user 59966 40/50 current_auc = 0.5673822301729279
User 59966 AUC after training: 0.5658914728682171
User 59966 does not improve AUC. Reverting changes.
Training on augumented user 107317 41/50 current_auc = 0.5673822301729279
User 107317 AUC after training: 0.5635062611806798
User 107317 does not improve AUC. Reverting changes.
Training on augumented user 76758 42/50 current_auc = 0.5673822301729279
User 76758 AUC after training: 0.563804412641622
User 76758 does not improve AUC. Reverting changes.
Training on augumented user 69983 43/50 current_auc = 0.5673822301729279
User 69983 AUC after training: 0.5652951699463328
User 69983 does not improve AUC. Reverting changes.
Training on augumented user 63891 44/50 current_auc = 0.5673822301729279
User 63891 AUC after training: 0.5646988670244484
User 63891 does not improve AUC. Reverting changes.
Training on augumented user 35938 45/50 current_auc = 0.5673822301729279
User 35938 AUC after training: 0.5670840787119857
User 35938 does not improve AUC. Reverting changes.
Training on augumented user 89124 46/50 current_auc = 0.5673822301729279
User 89124 AUC after training: 0.5644007155635062
User 89124 does not improve AUC. Reverting changes.
Training on augumented user 49721 47/50 current_auc = 0.5673822301729279
User 49721 AUC after training: 0.5664877757901015
User 49721 does not improve AUC. Reverting changes.
Training on augumented user 134955 48/50 current_auc = 0.5673822301729279
User 134955 AUC after training: 0.5646988670244484
User 134955 does not improve AUC. Reverting changes.
Training on augumented user 43702 49/50 current_auc = 0.5673822301729279
User 43702 AUC after training: 0.5646988670244484
User 43702 does not improve AUC. Reverting changes.
[2024-12-02 18:19:40.932720] start test user 57628 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:41.765929] start test user 57628 77/568 recall augumented users by random, augumented_users = [31559, 116768, 55739, 26951, 15586, 10538, 43504, 102971, 81227, 54010, 47604, 28037, 116238, 4236, 12752, 72087, 23209, 62598, 61745, 64922, 77985, 61487, 13774, 110302, 31605, 2006, 20867, 131508, 43688, 124442, 51203, 59943, 92376, 14820, 92714, 131094, 133803, 115012, 87445, 17293, 53533, 60641, 126757, 77044, 66504, 136482, 6514, 25253, 71909, 46434]
[2024-12-02 18:19:41.781625] user = 57628 Cloud 77/568
[2024-12-02 18:19:41.815352] user = 57628 Local 77/568
[2024-12-02 18:19:41.864145] user = 57628 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:44.390576] user = 57628 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7019774011299436
Training on augumented user 31559 0/50 current_auc = 0.7019774011299436
User 31559 AUC after training: 0.7005649717514125
User 31559 does not improve AUC. Reverting changes.
Training on augumented user 116768 1/50 current_auc = 0.7019774011299436
User 116768 AUC after training: 0.7019774011299436
User 116768 does not improve AUC. Reverting changes.
Training on augumented user 55739 2/50 current_auc = 0.7019774011299436
User 55739 AUC after training: 0.7033898305084746
User 55739 improves AUC. Keeping the model.
Training on augumented user 26951 3/50 current_auc = 0.7033898305084746
User 26951 AUC after training: 0.7033898305084747
User 26951 improves AUC. Keeping the model.
Training on augumented user 15586 4/50 current_auc = 0.7033898305084747
User 15586 AUC after training: 0.7005649717514125
User 15586 does not improve AUC. Reverting changes.
Training on augumented user 10538 5/50 current_auc = 0.7033898305084747
User 10538 AUC after training: 0.7033898305084747
User 10538 does not improve AUC. Reverting changes.
Training on augumented user 43504 6/50 current_auc = 0.7033898305084747
User 43504 AUC after training: 0.7019774011299436
User 43504 does not improve AUC. Reverting changes.
Training on augumented user 102971 7/50 current_auc = 0.7033898305084747
User 102971 AUC after training: 0.7033898305084747
User 102971 does not improve AUC. Reverting changes.
Training on augumented user 81227 8/50 current_auc = 0.7033898305084747
User 81227 AUC after training: 0.7033898305084747
User 81227 does not improve AUC. Reverting changes.
Training on augumented user 54010 9/50 current_auc = 0.7033898305084747
User 54010 AUC after training: 0.7005649717514125
User 54010 does not improve AUC. Reverting changes.
Training on augumented user 47604 10/50 current_auc = 0.7033898305084747
User 47604 AUC after training: 0.7005649717514125
User 47604 does not improve AUC. Reverting changes.
Training on augumented user 28037 11/50 current_auc = 0.7033898305084747
User 28037 AUC after training: 0.7033898305084747
User 28037 does not improve AUC. Reverting changes.
Training on augumented user 116238 12/50 current_auc = 0.7033898305084747
User 116238 AUC after training: 0.7048022598870056
User 116238 improves AUC. Keeping the model.
Training on augumented user 4236 13/50 current_auc = 0.7048022598870056
User 4236 AUC after training: 0.7033898305084747
User 4236 does not improve AUC. Reverting changes.
Training on augumented user 12752 14/50 current_auc = 0.7048022598870056
User 12752 AUC after training: 0.7019774011299436
User 12752 does not improve AUC. Reverting changes.
Training on augumented user 72087 15/50 current_auc = 0.7048022598870056
User 72087 AUC after training: 0.7048022598870056
User 72087 does not improve AUC. Reverting changes.
Training on augumented user 23209 16/50 current_auc = 0.7048022598870056
User 23209 AUC after training: 0.7048022598870056
User 23209 does not improve AUC. Reverting changes.
Training on augumented user 62598 17/50 current_auc = 0.7048022598870056
User 62598 AUC after training: 0.7062146892655368
User 62598 improves AUC. Keeping the model.
Training on augumented user 61745 18/50 current_auc = 0.7062146892655368
User 61745 AUC after training: 0.7048022598870057
User 61745 does not improve AUC. Reverting changes.
Training on augumented user 64922 19/50 current_auc = 0.7062146892655368
User 64922 AUC after training: 0.7019774011299436
User 64922 does not improve AUC. Reverting changes.
Training on augumented user 77985 20/50 current_auc = 0.7062146892655368
User 77985 AUC after training: 0.7062146892655368
User 77985 does not improve AUC. Reverting changes.
Training on augumented user 61487 21/50 current_auc = 0.7062146892655368
User 61487 AUC after training: 0.7033898305084747
User 61487 does not improve AUC. Reverting changes.
Training on augumented user 13774 22/50 current_auc = 0.7062146892655368
User 13774 AUC after training: 0.7033898305084746
User 13774 does not improve AUC. Reverting changes.
Training on augumented user 110302 23/50 current_auc = 0.7062146892655368
User 110302 AUC after training: 0.7033898305084747
User 110302 does not improve AUC. Reverting changes.
Training on augumented user 31605 24/50 current_auc = 0.7062146892655368
User 31605 AUC after training: 0.7062146892655368
User 31605 does not improve AUC. Reverting changes.
Training on augumented user 2006 25/50 current_auc = 0.7062146892655368
User 2006 AUC after training: 0.7048022598870057
User 2006 does not improve AUC. Reverting changes.
Training on augumented user 20867 26/50 current_auc = 0.7062146892655368
User 20867 AUC after training: 0.7048022598870056
User 20867 does not improve AUC. Reverting changes.
Training on augumented user 131508 27/50 current_auc = 0.7062146892655368
User 131508 AUC after training: 0.7062146892655368
User 131508 does not improve AUC. Reverting changes.
Training on augumented user 43688 28/50 current_auc = 0.7062146892655368
User 43688 AUC after training: 0.7019774011299436
User 43688 does not improve AUC. Reverting changes.
Training on augumented user 124442 29/50 current_auc = 0.7062146892655368
User 124442 AUC after training: 0.7048022598870056
User 124442 does not improve AUC. Reverting changes.
Training on augumented user 51203 30/50 current_auc = 0.7062146892655368
User 51203 AUC after training: 0.7062146892655368
User 51203 does not improve AUC. Reverting changes.
Training on augumented user 59943 31/50 current_auc = 0.7062146892655368
User 59943 AUC after training: 0.7062146892655368
User 59943 does not improve AUC. Reverting changes.
Training on augumented user 92376 32/50 current_auc = 0.7062146892655368
User 92376 AUC after training: 0.7048022598870056
User 92376 does not improve AUC. Reverting changes.
Training on augumented user 14820 33/50 current_auc = 0.7062146892655368
User 14820 AUC after training: 0.7033898305084747
User 14820 does not improve AUC. Reverting changes.
Training on augumented user 92714 34/50 current_auc = 0.7062146892655368
User 92714 AUC after training: 0.6991525423728814
User 92714 does not improve AUC. Reverting changes.
Training on augumented user 131094 35/50 current_auc = 0.7062146892655368
User 131094 AUC after training: 0.7062146892655368
User 131094 does not improve AUC. Reverting changes.
Training on augumented user 133803 36/50 current_auc = 0.7062146892655368
User 133803 AUC after training: 0.7033898305084747
User 133803 does not improve AUC. Reverting changes.
Training on augumented user 115012 37/50 current_auc = 0.7062146892655368
User 115012 AUC after training: 0.7019774011299436
User 115012 does not improve AUC. Reverting changes.
Training on augumented user 87445 38/50 current_auc = 0.7062146892655368
User 87445 AUC after training: 0.7005649717514124
User 87445 does not improve AUC. Reverting changes.
Training on augumented user 17293 39/50 current_auc = 0.7062146892655368
User 17293 AUC after training: 0.7062146892655368
User 17293 does not improve AUC. Reverting changes.
Training on augumented user 53533 40/50 current_auc = 0.7062146892655368
User 53533 AUC after training: 0.7048022598870057
User 53533 does not improve AUC. Reverting changes.
Training on augumented user 60641 41/50 current_auc = 0.7062146892655368
User 60641 AUC after training: 0.7033898305084746
User 60641 does not improve AUC. Reverting changes.
Training on augumented user 126757 42/50 current_auc = 0.7062146892655368
User 126757 AUC after training: 0.7033898305084746
User 126757 does not improve AUC. Reverting changes.
Training on augumented user 77044 43/50 current_auc = 0.7062146892655368
User 77044 AUC after training: 0.7062146892655368
User 77044 does not improve AUC. Reverting changes.
Training on augumented user 66504 44/50 current_auc = 0.7062146892655368
User 66504 AUC after training: 0.7033898305084746
User 66504 does not improve AUC. Reverting changes.
Training on augumented user 136482 45/50 current_auc = 0.7062146892655368
User 136482 AUC after training: 0.7048022598870057
User 136482 does not improve AUC. Reverting changes.
Training on augumented user 6514 46/50 current_auc = 0.7062146892655368
User 6514 AUC after training: 0.7048022598870057
User 6514 does not improve AUC. Reverting changes.
Training on augumented user 25253 47/50 current_auc = 0.7062146892655368
User 25253 AUC after training: 0.7033898305084747
User 25253 does not improve AUC. Reverting changes.
Training on augumented user 71909 48/50 current_auc = 0.7062146892655368
User 71909 AUC after training: 0.7048022598870057
User 71909 does not improve AUC. Reverting changes.
Training on augumented user 46434 49/50 current_auc = 0.7062146892655368
User 46434 AUC after training: 0.7033898305084746
User 46434 does not improve AUC. Reverting changes.
[2024-12-02 18:20:14.947327] start test user 57671 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:15.364495] start test user 57671 78/568 recall augumented users by random, augumented_users = [86309, 99196, 29564, 56031, 17790, 103886, 24116, 134584, 18249, 121274, 59561, 83601, 134125, 8413, 20267, 82451, 85992, 108770, 36658, 84802, 71800, 138030, 91640, 90272, 103304, 96970, 59198, 3315, 111138, 14882, 33424, 113183, 27140, 116437, 54961, 112018, 64606, 75429, 8419, 101666, 138132, 53726, 115463, 126961, 1097, 132581, 116867, 124417, 15643, 45909]
[2024-12-02 18:20:15.379148] user = 57671 Cloud 78/568
[2024-12-02 18:20:15.389155] user = 57671 Local 78/568
[2024-12-02 18:20:15.425806] user = 57671 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:17.511118] user = 57671 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 86309 0/50 current_auc = 0.6666666666666667
User 86309 AUC after training: 0.6666666666666667
User 86309 does not improve AUC. Reverting changes.
Training on augumented user 99196 1/50 current_auc = 0.6666666666666667
User 99196 AUC after training: 0.6691176470588236
User 99196 improves AUC. Keeping the model.
Training on augumented user 29564 2/50 current_auc = 0.6691176470588236
User 29564 AUC after training: 0.6740196078431373
User 29564 improves AUC. Keeping the model.
Training on augumented user 56031 3/50 current_auc = 0.6740196078431373
User 56031 AUC after training: 0.6740196078431373
User 56031 does not improve AUC. Reverting changes.
Training on augumented user 17790 4/50 current_auc = 0.6740196078431373
User 17790 AUC after training: 0.6740196078431373
User 17790 does not improve AUC. Reverting changes.
Training on augumented user 103886 5/50 current_auc = 0.6740196078431373
User 103886 AUC after training: 0.6813725490196079
User 103886 improves AUC. Keeping the model.
Training on augumented user 24116 6/50 current_auc = 0.6813725490196079
User 24116 AUC after training: 0.678921568627451
User 24116 does not improve AUC. Reverting changes.
Training on augumented user 134584 7/50 current_auc = 0.6813725490196079
User 134584 AUC after training: 0.6813725490196079
User 134584 does not improve AUC. Reverting changes.
Training on augumented user 18249 8/50 current_auc = 0.6813725490196079
User 18249 AUC after training: 0.6813725490196079
User 18249 does not improve AUC. Reverting changes.
Training on augumented user 121274 9/50 current_auc = 0.6813725490196079
User 121274 AUC after training: 0.6813725490196079
User 121274 does not improve AUC. Reverting changes.
Training on augumented user 59561 10/50 current_auc = 0.6813725490196079
User 59561 AUC after training: 0.6813725490196079
User 59561 does not improve AUC. Reverting changes.
Training on augumented user 83601 11/50 current_auc = 0.6813725490196079
User 83601 AUC after training: 0.6813725490196079
User 83601 does not improve AUC. Reverting changes.
Training on augumented user 134125 12/50 current_auc = 0.6813725490196079
User 134125 AUC after training: 0.6813725490196079
User 134125 does not improve AUC. Reverting changes.
Training on augumented user 8413 13/50 current_auc = 0.6813725490196079
User 8413 AUC after training: 0.6813725490196079
User 8413 does not improve AUC. Reverting changes.
Training on augumented user 20267 14/50 current_auc = 0.6813725490196079
User 20267 AUC after training: 0.6813725490196079
User 20267 does not improve AUC. Reverting changes.
Training on augumented user 82451 15/50 current_auc = 0.6813725490196079
User 82451 AUC after training: 0.6813725490196079
User 82451 does not improve AUC. Reverting changes.
Training on augumented user 85992 16/50 current_auc = 0.6813725490196079
User 85992 AUC after training: 0.6813725490196079
User 85992 does not improve AUC. Reverting changes.
Training on augumented user 108770 17/50 current_auc = 0.6813725490196079
User 108770 AUC after training: 0.6813725490196079
User 108770 does not improve AUC. Reverting changes.
Training on augumented user 36658 18/50 current_auc = 0.6813725490196079
User 36658 AUC after training: 0.6813725490196079
User 36658 does not improve AUC. Reverting changes.
Training on augumented user 84802 19/50 current_auc = 0.6813725490196079
User 84802 AUC after training: 0.6764705882352942
User 84802 does not improve AUC. Reverting changes.
Training on augumented user 71800 20/50 current_auc = 0.6813725490196079
User 71800 AUC after training: 0.6813725490196079
User 71800 does not improve AUC. Reverting changes.
Training on augumented user 138030 21/50 current_auc = 0.6813725490196079
User 138030 AUC after training: 0.6813725490196079
User 138030 does not improve AUC. Reverting changes.
Training on augumented user 91640 22/50 current_auc = 0.6813725490196079
User 91640 AUC after training: 0.6813725490196079
User 91640 does not improve AUC. Reverting changes.
Training on augumented user 90272 23/50 current_auc = 0.6813725490196079
User 90272 AUC after training: 0.6764705882352942
User 90272 does not improve AUC. Reverting changes.
Training on augumented user 103304 24/50 current_auc = 0.6813725490196079
User 103304 AUC after training: 0.6813725490196079
User 103304 does not improve AUC. Reverting changes.
Training on augumented user 96970 25/50 current_auc = 0.6813725490196079
User 96970 AUC after training: 0.6813725490196079
User 96970 does not improve AUC. Reverting changes.
Training on augumented user 59198 26/50 current_auc = 0.6813725490196079
User 59198 AUC after training: 0.6813725490196079
User 59198 does not improve AUC. Reverting changes.
Training on augumented user 3315 27/50 current_auc = 0.6813725490196079
User 3315 AUC after training: 0.6813725490196079
User 3315 does not improve AUC. Reverting changes.
Training on augumented user 111138 28/50 current_auc = 0.6813725490196079
User 111138 AUC after training: 0.6813725490196079
User 111138 does not improve AUC. Reverting changes.
Training on augumented user 14882 29/50 current_auc = 0.6813725490196079
User 14882 AUC after training: 0.6764705882352942
User 14882 does not improve AUC. Reverting changes.
Training on augumented user 33424 30/50 current_auc = 0.6813725490196079
User 33424 AUC after training: 0.6813725490196079
User 33424 does not improve AUC. Reverting changes.
Training on augumented user 113183 31/50 current_auc = 0.6813725490196079
User 113183 AUC after training: 0.6813725490196079
User 113183 does not improve AUC. Reverting changes.
Training on augumented user 27140 32/50 current_auc = 0.6813725490196079
User 27140 AUC after training: 0.6813725490196079
User 27140 does not improve AUC. Reverting changes.
Training on augumented user 116437 33/50 current_auc = 0.6813725490196079
User 116437 AUC after training: 0.6813725490196079
User 116437 does not improve AUC. Reverting changes.
Training on augumented user 54961 34/50 current_auc = 0.6813725490196079
User 54961 AUC after training: 0.6813725490196079
User 54961 does not improve AUC. Reverting changes.
Training on augumented user 112018 35/50 current_auc = 0.6813725490196079
User 112018 AUC after training: 0.6813725490196079
User 112018 does not improve AUC. Reverting changes.
Training on augumented user 64606 36/50 current_auc = 0.6813725490196079
User 64606 AUC after training: 0.6813725490196079
User 64606 does not improve AUC. Reverting changes.
Training on augumented user 75429 37/50 current_auc = 0.6813725490196079
User 75429 AUC after training: 0.6813725490196079
User 75429 does not improve AUC. Reverting changes.
Training on augumented user 8419 38/50 current_auc = 0.6813725490196079
User 8419 AUC after training: 0.678921568627451
User 8419 does not improve AUC. Reverting changes.
Training on augumented user 101666 39/50 current_auc = 0.6813725490196079
User 101666 AUC after training: 0.6813725490196079
User 101666 does not improve AUC. Reverting changes.
Training on augumented user 138132 40/50 current_auc = 0.6813725490196079
User 138132 AUC after training: 0.6813725490196079
User 138132 does not improve AUC. Reverting changes.
Training on augumented user 53726 41/50 current_auc = 0.6813725490196079
User 53726 AUC after training: 0.6813725490196079
User 53726 does not improve AUC. Reverting changes.
Training on augumented user 115463 42/50 current_auc = 0.6813725490196079
User 115463 AUC after training: 0.6813725490196079
User 115463 does not improve AUC. Reverting changes.
Training on augumented user 126961 43/50 current_auc = 0.6813725490196079
User 126961 AUC after training: 0.6813725490196079
User 126961 does not improve AUC. Reverting changes.
Training on augumented user 1097 44/50 current_auc = 0.6813725490196079
User 1097 AUC after training: 0.6813725490196079
User 1097 does not improve AUC. Reverting changes.
Training on augumented user 132581 45/50 current_auc = 0.6813725490196079
User 132581 AUC after training: 0.678921568627451
User 132581 does not improve AUC. Reverting changes.
Training on augumented user 116867 46/50 current_auc = 0.6813725490196079
User 116867 AUC after training: 0.6764705882352942
User 116867 does not improve AUC. Reverting changes.
Training on augumented user 124417 47/50 current_auc = 0.6813725490196079
User 124417 AUC after training: 0.6813725490196079
User 124417 does not improve AUC. Reverting changes.
Training on augumented user 15643 48/50 current_auc = 0.6813725490196079
User 15643 AUC after training: 0.6813725490196079
User 15643 does not improve AUC. Reverting changes.
Training on augumented user 45909 49/50 current_auc = 0.6813725490196079
User 45909 AUC after training: 0.6813725490196079
User 45909 does not improve AUC. Reverting changes.
[2024-12-02 18:20:45.486338] start test user 57689 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:46.157711] start test user 57689 79/568 recall augumented users by random, augumented_users = [16582, 105975, 23282, 53264, 127951, 109885, 131553, 53991, 12254, 10982, 50926, 79594, 48540, 79287, 51733, 97185, 137853, 38591, 7014, 136474, 124283, 102553, 20066, 75795, 82311, 30436, 13744, 75547, 132561, 82162, 87569, 52789, 123458, 55322, 61466, 92444, 110811, 71853, 81459, 87178, 31419, 75996, 34164, 132284, 45483, 6363, 124144, 93842, 88909, 52618]
[2024-12-02 18:20:46.186012] user = 57689 Cloud 79/568
[2024-12-02 18:20:46.202213] user = 57689 Local 79/568
[2024-12-02 18:20:46.260687] user = 57689 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:47.865233] user = 57689 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 16582 0/50 current_auc = 0.75
User 16582 AUC after training: 0.75
User 16582 does not improve AUC. Reverting changes.
Training on augumented user 105975 1/50 current_auc = 0.75
User 105975 AUC after training: 0.75
User 105975 does not improve AUC. Reverting changes.
Training on augumented user 23282 2/50 current_auc = 0.75
User 23282 AUC after training: 0.75
User 23282 does not improve AUC. Reverting changes.
Training on augumented user 53264 3/50 current_auc = 0.75
User 53264 AUC after training: 0.75
User 53264 does not improve AUC. Reverting changes.
Training on augumented user 127951 4/50 current_auc = 0.75
User 127951 AUC after training: 0.75
User 127951 does not improve AUC. Reverting changes.
Training on augumented user 109885 5/50 current_auc = 0.75
User 109885 AUC after training: 0.75
User 109885 does not improve AUC. Reverting changes.
Training on augumented user 131553 6/50 current_auc = 0.75
User 131553 AUC after training: 0.75
User 131553 does not improve AUC. Reverting changes.
Training on augumented user 53991 7/50 current_auc = 0.75
User 53991 AUC after training: 0.75
User 53991 does not improve AUC. Reverting changes.
Training on augumented user 12254 8/50 current_auc = 0.75
User 12254 AUC after training: 0.75
User 12254 does not improve AUC. Reverting changes.
Training on augumented user 10982 9/50 current_auc = 0.75
User 10982 AUC after training: 0.75
User 10982 does not improve AUC. Reverting changes.
Training on augumented user 50926 10/50 current_auc = 0.75
User 50926 AUC after training: 0.75
User 50926 does not improve AUC. Reverting changes.
Training on augumented user 79594 11/50 current_auc = 0.75
User 79594 AUC after training: 0.75
User 79594 does not improve AUC. Reverting changes.
Training on augumented user 48540 12/50 current_auc = 0.75
User 48540 AUC after training: 0.75
User 48540 does not improve AUC. Reverting changes.
Training on augumented user 79287 13/50 current_auc = 0.75
User 79287 AUC after training: 0.75
User 79287 does not improve AUC. Reverting changes.
Training on augumented user 51733 14/50 current_auc = 0.75
User 51733 AUC after training: 0.75
User 51733 does not improve AUC. Reverting changes.
Training on augumented user 97185 15/50 current_auc = 0.75
User 97185 AUC after training: 0.75
User 97185 does not improve AUC. Reverting changes.
Training on augumented user 137853 16/50 current_auc = 0.75
User 137853 AUC after training: 0.75
User 137853 does not improve AUC. Reverting changes.
Training on augumented user 38591 17/50 current_auc = 0.75
User 38591 AUC after training: 0.75
User 38591 does not improve AUC. Reverting changes.
Training on augumented user 7014 18/50 current_auc = 0.75
User 7014 AUC after training: 0.75
User 7014 does not improve AUC. Reverting changes.
Training on augumented user 136474 19/50 current_auc = 0.75
User 136474 AUC after training: 0.75
User 136474 does not improve AUC. Reverting changes.
Training on augumented user 124283 20/50 current_auc = 0.75
User 124283 AUC after training: 0.75
User 124283 does not improve AUC. Reverting changes.
Training on augumented user 102553 21/50 current_auc = 0.75
User 102553 AUC after training: 0.75
User 102553 does not improve AUC. Reverting changes.
Training on augumented user 20066 22/50 current_auc = 0.75
User 20066 AUC after training: 0.75
User 20066 does not improve AUC. Reverting changes.
Training on augumented user 75795 23/50 current_auc = 0.75
User 75795 AUC after training: 0.75
User 75795 does not improve AUC. Reverting changes.
Training on augumented user 82311 24/50 current_auc = 0.75
User 82311 AUC after training: 0.75
User 82311 does not improve AUC. Reverting changes.
Training on augumented user 30436 25/50 current_auc = 0.75
User 30436 AUC after training: 0.75
User 30436 does not improve AUC. Reverting changes.
Training on augumented user 13744 26/50 current_auc = 0.75
User 13744 AUC after training: 0.75
User 13744 does not improve AUC. Reverting changes.
Training on augumented user 75547 27/50 current_auc = 0.75
User 75547 AUC after training: 0.75
User 75547 does not improve AUC. Reverting changes.
Training on augumented user 132561 28/50 current_auc = 0.75
User 132561 AUC after training: 0.75
User 132561 does not improve AUC. Reverting changes.
Training on augumented user 82162 29/50 current_auc = 0.75
User 82162 AUC after training: 0.75
User 82162 does not improve AUC. Reverting changes.
Training on augumented user 87569 30/50 current_auc = 0.75
User 87569 AUC after training: 0.75
User 87569 does not improve AUC. Reverting changes.
Training on augumented user 52789 31/50 current_auc = 0.75
User 52789 AUC after training: 0.75
User 52789 does not improve AUC. Reverting changes.
Training on augumented user 123458 32/50 current_auc = 0.75
User 123458 AUC after training: 0.75
User 123458 does not improve AUC. Reverting changes.
Training on augumented user 55322 33/50 current_auc = 0.75
User 55322 AUC after training: 0.75
User 55322 does not improve AUC. Reverting changes.
Training on augumented user 61466 34/50 current_auc = 0.75
User 61466 AUC after training: 0.75
User 61466 does not improve AUC. Reverting changes.
Training on augumented user 92444 35/50 current_auc = 0.75
User 92444 AUC after training: 0.75
User 92444 does not improve AUC. Reverting changes.
Training on augumented user 110811 36/50 current_auc = 0.75
User 110811 AUC after training: 0.75
User 110811 does not improve AUC. Reverting changes.
Training on augumented user 71853 37/50 current_auc = 0.75
User 71853 AUC after training: 0.75
User 71853 does not improve AUC. Reverting changes.
Training on augumented user 81459 38/50 current_auc = 0.75
User 81459 AUC after training: 0.75
User 81459 does not improve AUC. Reverting changes.
Training on augumented user 87178 39/50 current_auc = 0.75
User 87178 AUC after training: 0.75
User 87178 does not improve AUC. Reverting changes.
Training on augumented user 31419 40/50 current_auc = 0.75
User 31419 AUC after training: 0.75
User 31419 does not improve AUC. Reverting changes.
Training on augumented user 75996 41/50 current_auc = 0.75
User 75996 AUC after training: 0.75
User 75996 does not improve AUC. Reverting changes.
Training on augumented user 34164 42/50 current_auc = 0.75
User 34164 AUC after training: 0.75
User 34164 does not improve AUC. Reverting changes.
Training on augumented user 132284 43/50 current_auc = 0.75
User 132284 AUC after training: 0.75
User 132284 does not improve AUC. Reverting changes.
Training on augumented user 45483 44/50 current_auc = 0.75
User 45483 AUC after training: 0.75
User 45483 does not improve AUC. Reverting changes.
Training on augumented user 6363 45/50 current_auc = 0.75
User 6363 AUC after training: 0.75
User 6363 does not improve AUC. Reverting changes.
Training on augumented user 124144 46/50 current_auc = 0.75
User 124144 AUC after training: 0.75
User 124144 does not improve AUC. Reverting changes.
Training on augumented user 93842 47/50 current_auc = 0.75
User 93842 AUC after training: 0.75
User 93842 does not improve AUC. Reverting changes.
Training on augumented user 88909 48/50 current_auc = 0.75
User 88909 AUC after training: 0.75
User 88909 does not improve AUC. Reverting changes.
Training on augumented user 52618 49/50 current_auc = 0.75
User 52618 AUC after training: 0.75
User 52618 does not improve AUC. Reverting changes.
[2024-12-02 18:21:19.527649] start test user 57701 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:19.952334] start test user 57701 80/568 recall augumented users by random, augumented_users = [138186, 99373, 10629, 41271, 85841, 138167, 41068, 105946, 56122, 126664, 61182, 70339, 92026, 14631, 90633, 70259, 13094, 108540, 19335, 18231, 49676, 5547, 28729, 8243, 96871, 79922, 125316, 38562, 25457, 62323, 86427, 71456, 122050, 12427, 55215, 3035, 56944, 63714, 36864, 42879, 40155, 70273, 7668, 13960, 124673, 12107, 18522, 40510, 27513, 108137]
[2024-12-02 18:21:19.966342] user = 57701 Cloud 80/568
[2024-12-02 18:21:19.979490] user = 57701 Local 80/568
[2024-12-02 18:21:20.001806] user = 57701 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:21.521813] user = 57701 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6767032967032967
Training on augumented user 138186 0/50 current_auc = 0.6767032967032967
User 138186 AUC after training: 0.6742857142857143
User 138186 does not improve AUC. Reverting changes.
Training on augumented user 99373 1/50 current_auc = 0.6767032967032967
User 99373 AUC after training: 0.6799999999999999
User 99373 improves AUC. Keeping the model.
Training on augumented user 10629 2/50 current_auc = 0.6799999999999999
User 10629 AUC after training: 0.6769230769230768
User 10629 does not improve AUC. Reverting changes.
Training on augumented user 41271 3/50 current_auc = 0.6799999999999999
User 41271 AUC after training: 0.667032967032967
User 41271 does not improve AUC. Reverting changes.
Training on augumented user 85841 4/50 current_auc = 0.6799999999999999
User 85841 AUC after training: 0.6799999999999999
User 85841 does not improve AUC. Reverting changes.
Training on augumented user 138167 5/50 current_auc = 0.6799999999999999
User 138167 AUC after training: 0.6767032967032967
User 138167 does not improve AUC. Reverting changes.
Training on augumented user 41068 6/50 current_auc = 0.6799999999999999
User 41068 AUC after training: 0.6799999999999999
User 41068 does not improve AUC. Reverting changes.
Training on augumented user 105946 7/50 current_auc = 0.6799999999999999
User 105946 AUC after training: 0.6659340659340659
User 105946 does not improve AUC. Reverting changes.
Training on augumented user 56122 8/50 current_auc = 0.6799999999999999
User 56122 AUC after training: 0.6799999999999999
User 56122 does not improve AUC. Reverting changes.
Training on augumented user 126664 9/50 current_auc = 0.6799999999999999
User 126664 AUC after training: 0.6799999999999999
User 126664 does not improve AUC. Reverting changes.
Training on augumented user 61182 10/50 current_auc = 0.6799999999999999
User 61182 AUC after training: 0.6740659340659341
User 61182 does not improve AUC. Reverting changes.
Training on augumented user 70339 11/50 current_auc = 0.6799999999999999
User 70339 AUC after training: 0.6815384615384615
User 70339 improves AUC. Keeping the model.
Training on augumented user 92026 12/50 current_auc = 0.6815384615384615
User 92026 AUC after training: 0.6712087912087912
User 92026 does not improve AUC. Reverting changes.
Training on augumented user 14631 13/50 current_auc = 0.6815384615384615
User 14631 AUC after training: 0.6707692307692308
User 14631 does not improve AUC. Reverting changes.
Training on augumented user 90633 14/50 current_auc = 0.6815384615384615
User 90633 AUC after training: 0.6815384615384615
User 90633 does not improve AUC. Reverting changes.
Training on augumented user 70259 15/50 current_auc = 0.6815384615384615
User 70259 AUC after training: 0.6815384615384615
User 70259 does not improve AUC. Reverting changes.
Training on augumented user 13094 16/50 current_auc = 0.6815384615384615
User 13094 AUC after training: 0.6804395604395604
User 13094 does not improve AUC. Reverting changes.
Training on augumented user 108540 17/50 current_auc = 0.6815384615384615
User 108540 AUC after training: 0.6738461538461539
User 108540 does not improve AUC. Reverting changes.
Training on augumented user 19335 18/50 current_auc = 0.6815384615384615
User 19335 AUC after training: 0.679120879120879
User 19335 does not improve AUC. Reverting changes.
Training on augumented user 18231 19/50 current_auc = 0.6815384615384615
User 18231 AUC after training: 0.6786813186813186
User 18231 does not improve AUC. Reverting changes.
Training on augumented user 49676 20/50 current_auc = 0.6815384615384615
User 49676 AUC after training: 0.669010989010989
User 49676 does not improve AUC. Reverting changes.
Training on augumented user 5547 21/50 current_auc = 0.6815384615384615
User 5547 AUC after training: 0.6698901098901099
User 5547 does not improve AUC. Reverting changes.
Training on augumented user 28729 22/50 current_auc = 0.6815384615384615
User 28729 AUC after training: 0.6815384615384615
User 28729 does not improve AUC. Reverting changes.
Training on augumented user 8243 23/50 current_auc = 0.6815384615384615
User 8243 AUC after training: 0.6815384615384615
User 8243 does not improve AUC. Reverting changes.
Training on augumented user 96871 24/50 current_auc = 0.6815384615384615
User 96871 AUC after training: 0.6707692307692307
User 96871 does not improve AUC. Reverting changes.
Training on augumented user 79922 25/50 current_auc = 0.6815384615384615
User 79922 AUC after training: 0.6745054945054945
User 79922 does not improve AUC. Reverting changes.
Training on augumented user 125316 26/50 current_auc = 0.6815384615384615
User 125316 AUC after training: 0.6703296703296703
User 125316 does not improve AUC. Reverting changes.
Training on augumented user 38562 27/50 current_auc = 0.6815384615384615
User 38562 AUC after training: 0.6767032967032967
User 38562 does not improve AUC. Reverting changes.
Training on augumented user 25457 28/50 current_auc = 0.6815384615384615
User 25457 AUC after training: 0.6778021978021979
User 25457 does not improve AUC. Reverting changes.
Training on augumented user 62323 29/50 current_auc = 0.6815384615384615
User 62323 AUC after training: 0.6751648351648352
User 62323 does not improve AUC. Reverting changes.
Training on augumented user 86427 30/50 current_auc = 0.6815384615384615
User 86427 AUC after training: 0.679120879120879
User 86427 does not improve AUC. Reverting changes.
Training on augumented user 71456 31/50 current_auc = 0.6815384615384615
User 71456 AUC after training: 0.6819780219780219
User 71456 improves AUC. Keeping the model.
Training on augumented user 122050 32/50 current_auc = 0.6819780219780219
User 122050 AUC after training: 0.6742857142857143
User 122050 does not improve AUC. Reverting changes.
Training on augumented user 12427 33/50 current_auc = 0.6819780219780219
User 12427 AUC after training: 0.6716483516483517
User 12427 does not improve AUC. Reverting changes.
Training on augumented user 55215 34/50 current_auc = 0.6819780219780219
User 55215 AUC after training: 0.6707692307692308
User 55215 does not improve AUC. Reverting changes.
Training on augumented user 3035 35/50 current_auc = 0.6819780219780219
User 3035 AUC after training: 0.672967032967033
User 3035 does not improve AUC. Reverting changes.
Training on augumented user 56944 36/50 current_auc = 0.6819780219780219
User 56944 AUC after training: 0.6775824175824176
User 56944 does not improve AUC. Reverting changes.
Training on augumented user 63714 37/50 current_auc = 0.6819780219780219
User 63714 AUC after training: 0.681978021978022
User 63714 improves AUC. Keeping the model.
Training on augumented user 36864 38/50 current_auc = 0.681978021978022
User 36864 AUC after training: 0.6716483516483516
User 36864 does not improve AUC. Reverting changes.
Training on augumented user 42879 39/50 current_auc = 0.681978021978022
User 42879 AUC after training: 0.6756043956043956
User 42879 does not improve AUC. Reverting changes.
Training on augumented user 40155 40/50 current_auc = 0.681978021978022
User 40155 AUC after training: 0.6665934065934066
User 40155 does not improve AUC. Reverting changes.
Training on augumented user 70273 41/50 current_auc = 0.681978021978022
User 70273 AUC after training: 0.6815384615384615
User 70273 does not improve AUC. Reverting changes.
Training on augumented user 7668 42/50 current_auc = 0.681978021978022
User 7668 AUC after training: 0.6782417582417583
User 7668 does not improve AUC. Reverting changes.
Training on augumented user 13960 43/50 current_auc = 0.681978021978022
User 13960 AUC after training: 0.6799999999999999
User 13960 does not improve AUC. Reverting changes.
Training on augumented user 124673 44/50 current_auc = 0.681978021978022
User 124673 AUC after training: 0.6703296703296703
User 124673 does not improve AUC. Reverting changes.
Training on augumented user 12107 45/50 current_auc = 0.681978021978022
User 12107 AUC after training: 0.6795604395604395
User 12107 does not improve AUC. Reverting changes.
Training on augumented user 18522 46/50 current_auc = 0.681978021978022
User 18522 AUC after training: 0.6795604395604395
User 18522 does not improve AUC. Reverting changes.
Training on augumented user 40510 47/50 current_auc = 0.681978021978022
User 40510 AUC after training: 0.6791208791208792
User 40510 does not improve AUC. Reverting changes.
Training on augumented user 27513 48/50 current_auc = 0.681978021978022
User 27513 AUC after training: 0.674065934065934
User 27513 does not improve AUC. Reverting changes.
Training on augumented user 108137 49/50 current_auc = 0.681978021978022
User 108137 AUC after training: 0.6782417582417583
User 108137 does not improve AUC. Reverting changes.
[2024-12-02 18:21:51.709996] start test user 57727 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:52.225607] start test user 57727 81/568 recall augumented users by random, augumented_users = [5909, 3037, 112664, 131560, 34528, 20972, 136404, 11923, 55025, 84847, 12039, 75937, 50476, 135758, 52170, 16840, 18341, 64809, 114598, 117107, 54412, 87398, 92120, 8998, 109314, 137250, 56414, 16623, 58073, 103582, 115643, 112596, 38386, 10884, 79180, 101560, 14078, 128581, 130858, 92481, 22698, 50797, 96623, 126831, 761, 129915, 134479, 122723, 108631, 62376]
[2024-12-02 18:21:52.241993] user = 57727 Cloud 81/568
[2024-12-02 18:21:52.321401] user = 57727 Local 81/568
[2024-12-02 18:21:52.526665] user = 57727 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:54.740297] user = 57727 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.583641975308642
Training on augumented user 5909 0/50 current_auc = 0.583641975308642
User 5909 AUC after training: 0.5837822671156004
User 5909 improves AUC. Keeping the model.
Training on augumented user 3037 1/50 current_auc = 0.5837822671156004
User 3037 AUC after training: 0.5837822671156004
User 3037 does not improve AUC. Reverting changes.
Training on augumented user 112664 2/50 current_auc = 0.5837822671156004
User 112664 AUC after training: 0.5836139169472503
User 112664 does not improve AUC. Reverting changes.
Training on augumented user 131560 3/50 current_auc = 0.5837822671156004
User 131560 AUC after training: 0.5839506172839506
User 131560 improves AUC. Keeping the model.
Training on augumented user 34528 4/50 current_auc = 0.5839506172839506
User 34528 AUC after training: 0.5837822671156004
User 34528 does not improve AUC. Reverting changes.
Training on augumented user 20972 5/50 current_auc = 0.5839506172839506
User 20972 AUC after training: 0.5840067340067341
User 20972 improves AUC. Keeping the model.
Training on augumented user 136404 6/50 current_auc = 0.5840067340067341
User 136404 AUC after training: 0.5842592592592593
User 136404 improves AUC. Keeping the model.
Training on augumented user 11923 7/50 current_auc = 0.5842592592592593
User 11923 AUC after training: 0.5842873176206509
User 11923 improves AUC. Keeping the model.
Training on augumented user 55025 8/50 current_auc = 0.5842873176206509
User 55025 AUC after training: 0.5844276094276095
User 55025 improves AUC. Keeping the model.
Training on augumented user 84847 9/50 current_auc = 0.5844276094276095
User 84847 AUC after training: 0.5849326599326599
User 84847 improves AUC. Keeping the model.
Training on augumented user 12039 10/50 current_auc = 0.5849326599326599
User 12039 AUC after training: 0.5837542087542087
User 12039 does not improve AUC. Reverting changes.
Training on augumented user 75937 11/50 current_auc = 0.5849326599326599
User 75937 AUC after training: 0.5852693602693603
User 75937 improves AUC. Keeping the model.
Training on augumented user 50476 12/50 current_auc = 0.5852693602693603
User 50476 AUC after training: 0.5850448933782267
User 50476 does not improve AUC. Reverting changes.
Training on augumented user 135758 13/50 current_auc = 0.5852693602693603
User 135758 AUC after training: 0.5847923681257015
User 135758 does not improve AUC. Reverting changes.
Training on augumented user 52170 14/50 current_auc = 0.5852693602693603
User 52170 AUC after training: 0.5852413019079685
User 52170 does not improve AUC. Reverting changes.
Training on augumented user 16840 15/50 current_auc = 0.5852693602693603
User 16840 AUC after training: 0.5842312008978676
User 16840 does not improve AUC. Reverting changes.
Training on augumented user 18341 16/50 current_auc = 0.5852693602693603
User 18341 AUC after training: 0.584652076318743
User 18341 does not improve AUC. Reverting changes.
Training on augumented user 64809 17/50 current_auc = 0.5852693602693603
User 64809 AUC after training: 0.5849607182940516
User 64809 does not improve AUC. Reverting changes.
Training on augumented user 114598 18/50 current_auc = 0.5852693602693603
User 114598 AUC after training: 0.5851571268237935
User 114598 does not improve AUC. Reverting changes.
Training on augumented user 117107 19/50 current_auc = 0.5852693602693603
User 117107 AUC after training: 0.5859708193041526
User 117107 improves AUC. Keeping the model.
Training on augumented user 54412 20/50 current_auc = 0.5859708193041526
User 54412 AUC after training: 0.5859708193041526
User 54412 does not improve AUC. Reverting changes.
Training on augumented user 87398 21/50 current_auc = 0.5859708193041526
User 87398 AUC after training: 0.583922558922559
User 87398 does not improve AUC. Reverting changes.
Training on augumented user 92120 22/50 current_auc = 0.5859708193041526
User 92120 AUC after training: 0.5862794612794613
User 92120 improves AUC. Keeping the model.
Training on augumented user 8998 23/50 current_auc = 0.5862794612794613
User 8998 AUC after training: 0.5867283950617284
User 8998 improves AUC. Keeping the model.
Training on augumented user 109314 24/50 current_auc = 0.5867283950617284
User 109314 AUC after training: 0.5868406285072951
User 109314 improves AUC. Keeping the model.
Training on augumented user 137250 25/50 current_auc = 0.5868406285072951
User 137250 AUC after training: 0.5853815937149272
User 137250 does not improve AUC. Reverting changes.
Training on augumented user 56414 26/50 current_auc = 0.5868406285072951
User 56414 AUC after training: 0.5871773288439955
User 56414 improves AUC. Keeping the model.
Training on augumented user 16623 27/50 current_auc = 0.5871773288439955
User 16623 AUC after training: 0.5873176206509539
User 16623 improves AUC. Keeping the model.
Training on augumented user 58073 28/50 current_auc = 0.5873176206509539
User 58073 AUC after training: 0.5867003367003367
User 58073 does not improve AUC. Reverting changes.
Training on augumented user 103582 29/50 current_auc = 0.5873176206509539
User 103582 AUC after training: 0.5872895622895623
User 103582 does not improve AUC. Reverting changes.
Training on augumented user 115643 30/50 current_auc = 0.5873176206509539
User 115643 AUC after training: 0.5866442199775532
User 115643 does not improve AUC. Reverting changes.
Training on augumented user 112596 31/50 current_auc = 0.5873176206509539
User 112596 AUC after training: 0.5869248035914703
User 112596 does not improve AUC. Reverting changes.
Training on augumented user 38386 32/50 current_auc = 0.5873176206509539
User 38386 AUC after training: 0.5888888888888888
User 38386 improves AUC. Keeping the model.
Training on augumented user 10884 33/50 current_auc = 0.5888888888888888
User 10884 AUC after training: 0.5885241301907969
User 10884 does not improve AUC. Reverting changes.
Training on augumented user 79180 34/50 current_auc = 0.5888888888888888
User 79180 AUC after training: 0.5884960718294051
User 79180 does not improve AUC. Reverting changes.
Training on augumented user 101560 35/50 current_auc = 0.5888888888888888
User 101560 AUC after training: 0.5889169472502807
User 101560 improves AUC. Keeping the model.
Training on augumented user 14078 36/50 current_auc = 0.5889169472502807
User 14078 AUC after training: 0.5883838383838385
User 14078 does not improve AUC. Reverting changes.
Training on augumented user 128581 37/50 current_auc = 0.5889169472502807
User 128581 AUC after training: 0.5880751964085297
User 128581 does not improve AUC. Reverting changes.
Training on augumented user 130858 38/50 current_auc = 0.5889169472502807
User 130858 AUC after training: 0.5885241301907969
User 130858 does not improve AUC. Reverting changes.
Training on augumented user 92481 39/50 current_auc = 0.5889169472502807
User 92481 AUC after training: 0.5881593714927048
User 92481 does not improve AUC. Reverting changes.
Training on augumented user 22698 40/50 current_auc = 0.5889169472502807
User 22698 AUC after training: 0.5888327721661055
User 22698 does not improve AUC. Reverting changes.
Training on augumented user 50797 41/50 current_auc = 0.5889169472502807
User 50797 AUC after training: 0.5881313131313131
User 50797 does not improve AUC. Reverting changes.
Training on augumented user 96623 42/50 current_auc = 0.5889169472502807
User 96623 AUC after training: 0.5888047138047138
User 96623 does not improve AUC. Reverting changes.
Training on augumented user 126831 43/50 current_auc = 0.5889169472502807
User 126831 AUC after training: 0.5890011223344557
User 126831 improves AUC. Keeping the model.
Training on augumented user 761 44/50 current_auc = 0.5890011223344557
User 761 AUC after training: 0.5883838383838383
User 761 does not improve AUC. Reverting changes.
Training on augumented user 129915 45/50 current_auc = 0.5890011223344557
User 129915 AUC after training: 0.5890291806958474
User 129915 improves AUC. Keeping the model.
Training on augumented user 134479 46/50 current_auc = 0.5890291806958474
User 134479 AUC after training: 0.5885802469135802
User 134479 does not improve AUC. Reverting changes.
Training on augumented user 122723 47/50 current_auc = 0.5890291806958474
User 122723 AUC after training: 0.5889730639730639
User 122723 does not improve AUC. Reverting changes.
Training on augumented user 108631 48/50 current_auc = 0.5890291806958474
User 108631 AUC after training: 0.588608305274972
User 108631 does not improve AUC. Reverting changes.
Training on augumented user 62376 49/50 current_auc = 0.5890291806958474
User 62376 AUC after training: 0.5890011223344557
User 62376 does not improve AUC. Reverting changes.
[2024-12-02 18:22:29.436247] start test user 57760 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:29.946208] start test user 57760 82/568 recall augumented users by random, augumented_users = [60147, 24587, 31830, 57821, 123582, 84552, 61048, 25652, 43145, 74669, 73666, 121303, 83018, 88890, 116948, 116175, 92687, 44747, 91814, 58038, 97025, 130381, 86411, 60538, 127979, 76780, 27986, 80584, 71471, 134372, 14917, 26658, 6422, 63602, 97694, 3593, 51227, 69276, 112835, 131542, 44291, 123286, 33006, 84198, 77765, 13090, 85916, 30461, 89415, 25908]
[2024-12-02 18:22:29.969043] user = 57760 Cloud 82/568
[2024-12-02 18:22:30.010996] user = 57760 Local 82/568
[2024-12-02 18:22:30.062210] user = 57760 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:33.299998] user = 57760 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6470588235294118
Training on augumented user 60147 0/50 current_auc = 0.6470588235294118
User 60147 AUC after training: 0.6449579831932774
User 60147 does not improve AUC. Reverting changes.
Training on augumented user 24587 1/50 current_auc = 0.6470588235294118
User 24587 AUC after training: 0.6449579831932774
User 24587 does not improve AUC. Reverting changes.
Training on augumented user 31830 2/50 current_auc = 0.6470588235294118
User 31830 AUC after training: 0.6407563025210083
User 31830 does not improve AUC. Reverting changes.
Training on augumented user 57821 3/50 current_auc = 0.6470588235294118
User 57821 AUC after training: 0.6428571428571429
User 57821 does not improve AUC. Reverting changes.
Training on augumented user 123582 4/50 current_auc = 0.6470588235294118
User 123582 AUC after training: 0.6428571428571428
User 123582 does not improve AUC. Reverting changes.
Training on augumented user 84552 5/50 current_auc = 0.6470588235294118
User 84552 AUC after training: 0.6470588235294118
User 84552 does not improve AUC. Reverting changes.
Training on augumented user 61048 6/50 current_auc = 0.6470588235294118
User 61048 AUC after training: 0.6386554621848739
User 61048 does not improve AUC. Reverting changes.
Training on augumented user 25652 7/50 current_auc = 0.6470588235294118
User 25652 AUC after training: 0.6449579831932774
User 25652 does not improve AUC. Reverting changes.
Training on augumented user 43145 8/50 current_auc = 0.6470588235294118
User 43145 AUC after training: 0.6449579831932772
User 43145 does not improve AUC. Reverting changes.
Training on augumented user 74669 9/50 current_auc = 0.6470588235294118
User 74669 AUC after training: 0.6428571428571429
User 74669 does not improve AUC. Reverting changes.
Training on augumented user 73666 10/50 current_auc = 0.6470588235294118
User 73666 AUC after training: 0.6428571428571429
User 73666 does not improve AUC. Reverting changes.
Training on augumented user 121303 11/50 current_auc = 0.6470588235294118
User 121303 AUC after training: 0.6428571428571428
User 121303 does not improve AUC. Reverting changes.
Training on augumented user 83018 12/50 current_auc = 0.6470588235294118
User 83018 AUC after training: 0.6449579831932774
User 83018 does not improve AUC. Reverting changes.
Training on augumented user 88890 13/50 current_auc = 0.6470588235294118
User 88890 AUC after training: 0.6386554621848739
User 88890 does not improve AUC. Reverting changes.
Training on augumented user 116948 14/50 current_auc = 0.6470588235294118
User 116948 AUC after training: 0.6428571428571428
User 116948 does not improve AUC. Reverting changes.
Training on augumented user 116175 15/50 current_auc = 0.6470588235294118
User 116175 AUC after training: 0.6470588235294118
User 116175 does not improve AUC. Reverting changes.
Training on augumented user 92687 16/50 current_auc = 0.6470588235294118
User 92687 AUC after training: 0.6449579831932774
User 92687 does not improve AUC. Reverting changes.
Training on augumented user 44747 17/50 current_auc = 0.6470588235294118
User 44747 AUC after training: 0.6386554621848739
User 44747 does not improve AUC. Reverting changes.
Training on augumented user 91814 18/50 current_auc = 0.6470588235294118
User 91814 AUC after training: 0.6449579831932774
User 91814 does not improve AUC. Reverting changes.
Training on augumented user 58038 19/50 current_auc = 0.6470588235294118
User 58038 AUC after training: 0.6491596638655462
User 58038 improves AUC. Keeping the model.
Training on augumented user 97025 20/50 current_auc = 0.6491596638655462
User 97025 AUC after training: 0.6470588235294117
User 97025 does not improve AUC. Reverting changes.
Training on augumented user 130381 21/50 current_auc = 0.6491596638655462
User 130381 AUC after training: 0.6470588235294117
User 130381 does not improve AUC. Reverting changes.
Training on augumented user 86411 22/50 current_auc = 0.6491596638655462
User 86411 AUC after training: 0.6533613445378151
User 86411 improves AUC. Keeping the model.
Training on augumented user 60538 23/50 current_auc = 0.6533613445378151
User 60538 AUC after training: 0.6491596638655462
User 60538 does not improve AUC. Reverting changes.
Training on augumented user 127979 24/50 current_auc = 0.6533613445378151
User 127979 AUC after training: 0.6491596638655462
User 127979 does not improve AUC. Reverting changes.
Training on augumented user 76780 25/50 current_auc = 0.6533613445378151
User 76780 AUC after training: 0.6491596638655462
User 76780 does not improve AUC. Reverting changes.
Training on augumented user 27986 26/50 current_auc = 0.6533613445378151
User 27986 AUC after training: 0.6365546218487396
User 27986 does not improve AUC. Reverting changes.
Training on augumented user 80584 27/50 current_auc = 0.6533613445378151
User 80584 AUC after training: 0.657563025210084
User 80584 improves AUC. Keeping the model.
Training on augumented user 71471 28/50 current_auc = 0.657563025210084
User 71471 AUC after training: 0.6596638655462185
User 71471 improves AUC. Keeping the model.
Training on augumented user 134372 29/50 current_auc = 0.6596638655462185
User 134372 AUC after training: 0.6533613445378151
User 134372 does not improve AUC. Reverting changes.
Training on augumented user 14917 30/50 current_auc = 0.6596638655462185
User 14917 AUC after training: 0.657563025210084
User 14917 does not improve AUC. Reverting changes.
Training on augumented user 26658 31/50 current_auc = 0.6596638655462185
User 26658 AUC after training: 0.6596638655462185
User 26658 does not improve AUC. Reverting changes.
Training on augumented user 6422 32/50 current_auc = 0.6596638655462185
User 6422 AUC after training: 0.6533613445378151
User 6422 does not improve AUC. Reverting changes.
Training on augumented user 63602 33/50 current_auc = 0.6596638655462185
User 63602 AUC after training: 0.6470588235294118
User 63602 does not improve AUC. Reverting changes.
Training on augumented user 97694 34/50 current_auc = 0.6596638655462185
User 97694 AUC after training: 0.6596638655462185
User 97694 does not improve AUC. Reverting changes.
Training on augumented user 3593 35/50 current_auc = 0.6596638655462185
User 3593 AUC after training: 0.6617647058823529
User 3593 improves AUC. Keeping the model.
Training on augumented user 51227 36/50 current_auc = 0.6617647058823529
User 51227 AUC after training: 0.6407563025210083
User 51227 does not improve AUC. Reverting changes.
Training on augumented user 69276 37/50 current_auc = 0.6617647058823529
User 69276 AUC after training: 0.6596638655462185
User 69276 does not improve AUC. Reverting changes.
Training on augumented user 112835 38/50 current_auc = 0.6617647058823529
User 112835 AUC after training: 0.6596638655462185
User 112835 does not improve AUC. Reverting changes.
Training on augumented user 131542 39/50 current_auc = 0.6617647058823529
User 131542 AUC after training: 0.6596638655462185
User 131542 does not improve AUC. Reverting changes.
Training on augumented user 44291 40/50 current_auc = 0.6617647058823529
User 44291 AUC after training: 0.6596638655462185
User 44291 does not improve AUC. Reverting changes.
Training on augumented user 123286 41/50 current_auc = 0.6617647058823529
User 123286 AUC after training: 0.6554621848739496
User 123286 does not improve AUC. Reverting changes.
Training on augumented user 33006 42/50 current_auc = 0.6617647058823529
User 33006 AUC after training: 0.6617647058823529
User 33006 does not improve AUC. Reverting changes.
Training on augumented user 84198 43/50 current_auc = 0.6617647058823529
User 84198 AUC after training: 0.6554621848739495
User 84198 does not improve AUC. Reverting changes.
Training on augumented user 77765 44/50 current_auc = 0.6617647058823529
User 77765 AUC after training: 0.6617647058823529
User 77765 does not improve AUC. Reverting changes.
Training on augumented user 13090 45/50 current_auc = 0.6617647058823529
User 13090 AUC after training: 0.6449579831932774
User 13090 does not improve AUC. Reverting changes.
Training on augumented user 85916 46/50 current_auc = 0.6617647058823529
User 85916 AUC after training: 0.6554621848739496
User 85916 does not improve AUC. Reverting changes.
Training on augumented user 30461 47/50 current_auc = 0.6617647058823529
User 30461 AUC after training: 0.6617647058823529
User 30461 does not improve AUC. Reverting changes.
Training on augumented user 89415 48/50 current_auc = 0.6617647058823529
User 89415 AUC after training: 0.6596638655462185
User 89415 does not improve AUC. Reverting changes.
Training on augumented user 25908 49/50 current_auc = 0.6617647058823529
User 25908 AUC after training: 0.6638655462184874
User 25908 improves AUC. Keeping the model.
[2024-12-02 18:23:01.236167] start test user 57770 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:02.060192] start test user 57770 83/568 recall augumented users by random, augumented_users = [63663, 88770, 101484, 42056, 137284, 133439, 82909, 138311, 41284, 44733, 100648, 88121, 76440, 3736, 6227, 96639, 115959, 84276, 13785, 13303, 111789, 79304, 27714, 110093, 15847, 34592, 52295, 109222, 67777, 90414, 107266, 58729, 93583, 6009, 34321, 17692, 40549, 66521, 8407, 25487, 95132, 120035, 52495, 86057, 2583, 78967, 21227, 41544, 14145, 94540]
[2024-12-02 18:23:02.078331] user = 57770 Cloud 83/568
[2024-12-02 18:23:02.129925] user = 57770 Local 83/568
[2024-12-02 18:23:02.255607] user = 57770 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:04.528380] user = 57770 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6901134759573961
Training on augumented user 63663 0/50 current_auc = 0.6901134759573961
User 63663 AUC after training: 0.6899851509651873
User 63663 does not improve AUC. Reverting changes.
Training on augumented user 88770 1/50 current_auc = 0.6901134759573961
User 88770 AUC after training: 0.6901868045243726
User 88770 improves AUC. Keeping the model.
Training on augumented user 101484 2/50 current_auc = 0.6901868045243726
User 101484 AUC after training: 0.6903517938000696
User 101484 improves AUC. Keeping the model.
Training on augumented user 42056 3/50 current_auc = 0.6903517938000696
User 42056 AUC after training: 0.6902784652330932
User 42056 does not improve AUC. Reverting changes.
Training on augumented user 137284 4/50 current_auc = 0.6903517938000696
User 137284 AUC after training: 0.6904984509340226
User 137284 improves AUC. Keeping the model.
Training on augumented user 133439 5/50 current_auc = 0.6904984509340226
User 133439 AUC after training: 0.6904067902253022
User 133439 does not improve AUC. Reverting changes.
Training on augumented user 82909 6/50 current_auc = 0.6904984509340226
User 82909 AUC after training: 0.6904984509340226
User 82909 does not improve AUC. Reverting changes.
Training on augumented user 138311 7/50 current_auc = 0.6904984509340226
User 138311 AUC after training: 0.6906451080679755
User 138311 improves AUC. Keeping the model.
Training on augumented user 41284 8/50 current_auc = 0.6906451080679755
User 41284 AUC after training: 0.6906542741388477
User 41284 improves AUC. Keeping the model.
Training on augumented user 44733 9/50 current_auc = 0.6906542741388477
User 44733 AUC after training: 0.6903884580835579
User 44733 does not improve AUC. Reverting changes.
Training on augumented user 100648 10/50 current_auc = 0.6906542741388477
User 100648 AUC after training: 0.6900676456030359
User 100648 does not improve AUC. Reverting changes.
Training on augumented user 88121 11/50 current_auc = 0.6906542741388477
User 88121 AUC after training: 0.6906817723514639
User 88121 improves AUC. Keeping the model.
Training on augumented user 76440 12/50 current_auc = 0.6906817723514639
User 76440 AUC after training: 0.6908375955562889
User 76440 improves AUC. Keeping the model.
Training on augumented user 3736 13/50 current_auc = 0.6908375955562889
User 3736 AUC after training: 0.6906267759262315
User 3736 does not improve AUC. Reverting changes.
Training on augumented user 6227 14/50 current_auc = 0.6908375955562889
User 6227 AUC after training: 0.6909109241232654
User 6227 improves AUC. Keeping the model.
Training on augumented user 96639 15/50 current_auc = 0.6909109241232654
User 96639 AUC after training: 0.6906542741388476
User 96639 does not improve AUC. Reverting changes.
Training on augumented user 115959 16/50 current_auc = 0.6909109241232654
User 115959 AUC after training: 0.6901501402408844
User 115959 does not improve AUC. Reverting changes.
Training on augumented user 84276 17/50 current_auc = 0.6909109241232654
User 84276 AUC after training: 0.6898659920438505
User 84276 does not improve AUC. Reverting changes.
Training on augumented user 13785 18/50 current_auc = 0.6909109241232654
User 13785 AUC after training: 0.6904984509340226
User 13785 does not improve AUC. Reverting changes.
Training on augumented user 13303 19/50 current_auc = 0.6909109241232654
User 13303 AUC after training: 0.6906359419971035
User 13303 does not improve AUC. Reverting changes.
Training on augumented user 111789 20/50 current_auc = 0.6909109241232654
User 111789 AUC after training: 0.6908100973436727
User 111789 does not improve AUC. Reverting changes.
Training on augumented user 79304 21/50 current_auc = 0.6909109241232654
User 79304 AUC after training: 0.690846761627161
User 79304 does not improve AUC. Reverting changes.
Training on augumented user 27714 22/50 current_auc = 0.6909109241232654
User 27714 AUC after training: 0.6904984509340226
User 27714 does not improve AUC. Reverting changes.
Training on augumented user 110093 23/50 current_auc = 0.6909109241232654
User 110093 AUC after training: 0.6903517938000697
User 110093 does not improve AUC. Reverting changes.
Training on augumented user 15847 24/50 current_auc = 0.6909109241232654
User 15847 AUC after training: 0.690241800949605
User 15847 does not improve AUC. Reverting changes.
Training on augumented user 34592 25/50 current_auc = 0.6909109241232654
User 34592 AUC after training: 0.690718436634952
User 34592 does not improve AUC. Reverting changes.
Training on augumented user 52295 26/50 current_auc = 0.6909109241232654
User 52295 AUC after training: 0.6901501402408843
User 52295 does not improve AUC. Reverting changes.
Training on augumented user 109222 27/50 current_auc = 0.6909109241232654
User 109222 AUC after training: 0.6901501402408843
User 109222 does not improve AUC. Reverting changes.
Training on augumented user 67777 28/50 current_auc = 0.6909109241232654
User 67777 AUC after training: 0.6903426277291975
User 67777 does not improve AUC. Reverting changes.
Training on augumented user 90414 29/50 current_auc = 0.6909109241232654
User 90414 AUC after training: 0.6904617866505344
User 90414 does not improve AUC. Reverting changes.
Training on augumented user 107266 30/50 current_auc = 0.6909109241232654
User 107266 AUC after training: 0.690076811673908
User 107266 does not improve AUC. Reverting changes.
Training on augumented user 58729 31/50 current_auc = 0.6909109241232654
User 58729 AUC after training: 0.6907825991310564
User 58729 does not improve AUC. Reverting changes.
Training on augumented user 93583 32/50 current_auc = 0.6909109241232654
User 93583 AUC after training: 0.6905351152175108
User 93583 does not improve AUC. Reverting changes.
Training on augumented user 6009 33/50 current_auc = 0.6909109241232654
User 6009 AUC after training: 0.6909567544776256
User 6009 improves AUC. Keeping the model.
Training on augumented user 34321 34/50 current_auc = 0.6909567544776256
User 34321 AUC after training: 0.6904434545087903
User 34321 does not improve AUC. Reverting changes.
Training on augumented user 17692 35/50 current_auc = 0.6909567544776256
User 17692 AUC after training: 0.6908284294854168
User 17692 does not improve AUC. Reverting changes.
Training on augumented user 40549 36/50 current_auc = 0.6909567544776256
User 40549 AUC after training: 0.6915708812260537
User 40549 improves AUC. Keeping the model.
Training on augumented user 66521 37/50 current_auc = 0.6915708812260537
User 66521 AUC after training: 0.6915433830134374
User 66521 does not improve AUC. Reverting changes.
Training on augumented user 8407 38/50 current_auc = 0.6915708812260537
User 8407 AUC after training: 0.6917267044308787
User 8407 improves AUC. Keeping the model.
Training on augumented user 25487 39/50 current_auc = 0.6917267044308787
User 25487 AUC after training: 0.6917450365726228
User 25487 improves AUC. Keeping the model.
Training on augumented user 95132 40/50 current_auc = 0.6917450365726228
User 95132 AUC after training: 0.691781700856111
User 95132 improves AUC. Keeping the model.
Training on augumented user 120035 41/50 current_auc = 0.691781700856111
User 120035 AUC after training: 0.6917358705017509
User 120035 does not improve AUC. Reverting changes.
Training on augumented user 52495 42/50 current_auc = 0.691781700856111
User 52495 AUC after training: 0.6907734330601845
User 52495 does not improve AUC. Reverting changes.
Training on augumented user 86057 43/50 current_auc = 0.691781700856111
User 86057 AUC after training: 0.6919833544152965
User 86057 improves AUC. Keeping the model.
Training on augumented user 2583 44/50 current_auc = 0.6919833544152965
User 2583 AUC after training: 0.6920933472657611
User 2583 improves AUC. Keeping the model.
Training on augumented user 78967 45/50 current_auc = 0.6920933472657611
User 78967 AUC after training: 0.6920566829822729
User 78967 does not improve AUC. Reverting changes.
Training on augumented user 21227 46/50 current_auc = 0.6920933472657611
User 21227 AUC after training: 0.6920383508405287
User 21227 does not improve AUC. Reverting changes.
Training on augumented user 41544 47/50 current_auc = 0.6920933472657611
User 41544 AUC after training: 0.691781700856111
User 41544 does not improve AUC. Reverting changes.
Training on augumented user 14145 48/50 current_auc = 0.6920933472657611
User 14145 AUC after training: 0.6921666758327375
User 14145 improves AUC. Keeping the model.
Training on augumented user 94540 49/50 current_auc = 0.6921666758327375
User 94540 AUC after training: 0.6919833544152963
User 94540 does not improve AUC. Reverting changes.
[2024-12-02 18:23:31.593864] start test user 57791 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:32.102096] start test user 57791 84/568 recall augumented users by random, augumented_users = [104105, 56429, 129489, 114609, 121355, 81184, 10389, 45168, 47558, 104488, 535, 87640, 34361, 21152, 138031, 103705, 51515, 83123, 77883, 79816, 83758, 43316, 54401, 123755, 99761, 125152, 104056, 79520, 112340, 38156, 126571, 121837, 60455, 137354, 41693, 133621, 59645, 120239, 82022, 21936, 115460, 1385, 101566, 6238, 95776, 111148, 113597, 60040, 7731, 53360]
[2024-12-02 18:23:32.117213] user = 57791 Cloud 84/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:32.134170] user = 57791 Local 84/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:32.158232] user = 57791 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:34.380343] user = 57791 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 104105 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104105 AUC after training: 0.5
User 104105 does not improve AUC. Reverting changes.
Training on augumented user 56429 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56429 AUC after training: 0.5
User 56429 does not improve AUC. Reverting changes.
Training on augumented user 129489 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129489 AUC after training: 0.5
User 129489 does not improve AUC. Reverting changes.
Training on augumented user 114609 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114609 AUC after training: 0.5
User 114609 does not improve AUC. Reverting changes.
Training on augumented user 121355 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121355 AUC after training: 0.5
User 121355 does not improve AUC. Reverting changes.
Training on augumented user 81184 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81184 AUC after training: 0.5
User 81184 does not improve AUC. Reverting changes.
Training on augumented user 10389 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10389 AUC after training: 0.5
User 10389 does not improve AUC. Reverting changes.
Training on augumented user 45168 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45168 AUC after training: 0.5
User 45168 does not improve AUC. Reverting changes.
Training on augumented user 47558 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47558 AUC after training: 0.5
User 47558 does not improve AUC. Reverting changes.
Training on augumented user 104488 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104488 AUC after training: 0.5
User 104488 does not improve AUC. Reverting changes.
Training on augumented user 535 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 535 AUC after training: 0.5
User 535 does not improve AUC. Reverting changes.
Training on augumented user 87640 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87640 AUC after training: 0.5
User 87640 does not improve AUC. Reverting changes.
Training on augumented user 34361 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34361 AUC after training: 0.5
User 34361 does not improve AUC. Reverting changes.
Training on augumented user 21152 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21152 AUC after training: 0.5
User 21152 does not improve AUC. Reverting changes.
Training on augumented user 138031 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138031 AUC after training: 0.5
User 138031 does not improve AUC. Reverting changes.
Training on augumented user 103705 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103705 AUC after training: 0.5
User 103705 does not improve AUC. Reverting changes.
Training on augumented user 51515 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51515 AUC after training: 0.5
User 51515 does not improve AUC. Reverting changes.
Training on augumented user 83123 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83123 AUC after training: 0.5
User 83123 does not improve AUC. Reverting changes.
Training on augumented user 77883 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77883 AUC after training: 0.5
User 77883 does not improve AUC. Reverting changes.
Training on augumented user 79816 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79816 AUC after training: 0.5
User 79816 does not improve AUC. Reverting changes.
Training on augumented user 83758 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83758 AUC after training: 0.5
User 83758 does not improve AUC. Reverting changes.
Training on augumented user 43316 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43316 AUC after training: 0.5
User 43316 does not improve AUC. Reverting changes.
Training on augumented user 54401 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54401 AUC after training: 0.5
User 54401 does not improve AUC. Reverting changes.
Training on augumented user 123755 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123755 AUC after training: 0.5
User 123755 does not improve AUC. Reverting changes.
Training on augumented user 99761 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99761 AUC after training: 0.5
User 99761 does not improve AUC. Reverting changes.
Training on augumented user 125152 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125152 AUC after training: 0.5
User 125152 does not improve AUC. Reverting changes.
Training on augumented user 104056 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104056 AUC after training: 0.5
User 104056 does not improve AUC. Reverting changes.
Training on augumented user 79520 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79520 AUC after training: 0.5
User 79520 does not improve AUC. Reverting changes.
Training on augumented user 112340 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112340 AUC after training: 0.5
User 112340 does not improve AUC. Reverting changes.
Training on augumented user 38156 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38156 AUC after training: 0.5
User 38156 does not improve AUC. Reverting changes.
Training on augumented user 126571 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126571 AUC after training: 0.5
User 126571 does not improve AUC. Reverting changes.
Training on augumented user 121837 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121837 AUC after training: 0.5
User 121837 does not improve AUC. Reverting changes.
Training on augumented user 60455 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60455 AUC after training: 0.5
User 60455 does not improve AUC. Reverting changes.
Training on augumented user 137354 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137354 AUC after training: 0.5
User 137354 does not improve AUC. Reverting changes.
Training on augumented user 41693 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41693 AUC after training: 0.5
User 41693 does not improve AUC. Reverting changes.
Training on augumented user 133621 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133621 AUC after training: 0.5
User 133621 does not improve AUC. Reverting changes.
Training on augumented user 59645 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59645 AUC after training: 0.5
User 59645 does not improve AUC. Reverting changes.
Training on augumented user 120239 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120239 AUC after training: 0.5
User 120239 does not improve AUC. Reverting changes.
Training on augumented user 82022 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82022 AUC after training: 0.5
User 82022 does not improve AUC. Reverting changes.
Training on augumented user 21936 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21936 AUC after training: 0.5
User 21936 does not improve AUC. Reverting changes.
Training on augumented user 115460 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115460 AUC after training: 0.5
User 115460 does not improve AUC. Reverting changes.
Training on augumented user 1385 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1385 AUC after training: 0.5
User 1385 does not improve AUC. Reverting changes.
Training on augumented user 101566 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101566 AUC after training: 0.5
User 101566 does not improve AUC. Reverting changes.
Training on augumented user 6238 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6238 AUC after training: 0.5
User 6238 does not improve AUC. Reverting changes.
Training on augumented user 95776 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95776 AUC after training: 0.5
User 95776 does not improve AUC. Reverting changes.
Training on augumented user 111148 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111148 AUC after training: 0.5
User 111148 does not improve AUC. Reverting changes.
Training on augumented user 113597 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113597 AUC after training: 0.5
User 113597 does not improve AUC. Reverting changes.
Training on augumented user 60040 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60040 AUC after training: 0.5
User 60040 does not improve AUC. Reverting changes.
Training on augumented user 7731 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7731 AUC after training: 0.5
User 7731 does not improve AUC. Reverting changes.
Training on augumented user 53360 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53360 AUC after training: 0.5
User 53360 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:58.927283] start test user 57818 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:59.566822] start test user 57818 85/568 recall augumented users by random, augumented_users = [42969, 7977, 58592, 130860, 5809, 58554, 60646, 26899, 93894, 18257, 37295, 50875, 93732, 130484, 105035, 80032, 39977, 44563, 50719, 59334, 8764, 77326, 119883, 115470, 30095, 39089, 116345, 95250, 137801, 25437, 98219, 110, 83367, 961, 23426, 106148, 15654, 15155, 118083, 40930, 85556, 92335, 98622, 125218, 73107, 132249, 34990, 97793, 64328, 108596]
[2024-12-02 18:23:59.584151] user = 57818 Cloud 85/568
[2024-12-02 18:23:59.600215] user = 57818 Local 85/568
[2024-12-02 18:23:59.633871] user = 57818 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:01.658891] user = 57818 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5631868131868132
Training on augumented user 42969 0/50 current_auc = 0.5631868131868132
User 42969 AUC after training: 0.5631868131868132
User 42969 does not improve AUC. Reverting changes.
Training on augumented user 7977 1/50 current_auc = 0.5631868131868132
User 7977 AUC after training: 0.5618131868131868
User 7977 does not improve AUC. Reverting changes.
Training on augumented user 58592 2/50 current_auc = 0.5631868131868132
User 58592 AUC after training: 0.5645604395604396
User 58592 improves AUC. Keeping the model.
Training on augumented user 130860 3/50 current_auc = 0.5645604395604396
User 130860 AUC after training: 0.5645604395604396
User 130860 does not improve AUC. Reverting changes.
Training on augumented user 5809 4/50 current_auc = 0.5645604395604396
User 5809 AUC after training: 0.5645604395604396
User 5809 does not improve AUC. Reverting changes.
Training on augumented user 58554 5/50 current_auc = 0.5645604395604396
User 58554 AUC after training: 0.5631868131868132
User 58554 does not improve AUC. Reverting changes.
Training on augumented user 60646 6/50 current_auc = 0.5645604395604396
User 60646 AUC after training: 0.5645604395604396
User 60646 does not improve AUC. Reverting changes.
Training on augumented user 26899 7/50 current_auc = 0.5645604395604396
User 26899 AUC after training: 0.5645604395604396
User 26899 does not improve AUC. Reverting changes.
Training on augumented user 93894 8/50 current_auc = 0.5645604395604396
User 93894 AUC after training: 0.5659340659340659
User 93894 improves AUC. Keeping the model.
Training on augumented user 18257 9/50 current_auc = 0.5659340659340659
User 18257 AUC after training: 0.5673076923076923
User 18257 improves AUC. Keeping the model.
Training on augumented user 37295 10/50 current_auc = 0.5673076923076923
User 37295 AUC after training: 0.5604395604395604
User 37295 does not improve AUC. Reverting changes.
Training on augumented user 50875 11/50 current_auc = 0.5673076923076923
User 50875 AUC after training: 0.5659340659340659
User 50875 does not improve AUC. Reverting changes.
Training on augumented user 93732 12/50 current_auc = 0.5673076923076923
User 93732 AUC after training: 0.5631868131868132
User 93732 does not improve AUC. Reverting changes.
Training on augumented user 130484 13/50 current_auc = 0.5673076923076923
User 130484 AUC after training: 0.5659340659340659
User 130484 does not improve AUC. Reverting changes.
Training on augumented user 105035 14/50 current_auc = 0.5673076923076923
User 105035 AUC after training: 0.5659340659340659
User 105035 does not improve AUC. Reverting changes.
Training on augumented user 80032 15/50 current_auc = 0.5673076923076923
User 80032 AUC after training: 0.5659340659340659
User 80032 does not improve AUC. Reverting changes.
Training on augumented user 39977 16/50 current_auc = 0.5673076923076923
User 39977 AUC after training: 0.5631868131868132
User 39977 does not improve AUC. Reverting changes.
Training on augumented user 44563 17/50 current_auc = 0.5673076923076923
User 44563 AUC after training: 0.5645604395604396
User 44563 does not improve AUC. Reverting changes.
Training on augumented user 50719 18/50 current_auc = 0.5673076923076923
User 50719 AUC after training: 0.5645604395604396
User 50719 does not improve AUC. Reverting changes.
Training on augumented user 59334 19/50 current_auc = 0.5673076923076923
User 59334 AUC after training: 0.5659340659340659
User 59334 does not improve AUC. Reverting changes.
Training on augumented user 8764 20/50 current_auc = 0.5673076923076923
User 8764 AUC after training: 0.5645604395604396
User 8764 does not improve AUC. Reverting changes.
Training on augumented user 77326 21/50 current_auc = 0.5673076923076923
User 77326 AUC after training: 0.5645604395604396
User 77326 does not improve AUC. Reverting changes.
Training on augumented user 119883 22/50 current_auc = 0.5673076923076923
User 119883 AUC after training: 0.5659340659340659
User 119883 does not improve AUC. Reverting changes.
Training on augumented user 115470 23/50 current_auc = 0.5673076923076923
User 115470 AUC after training: 0.5645604395604396
User 115470 does not improve AUC. Reverting changes.
Training on augumented user 30095 24/50 current_auc = 0.5673076923076923
User 30095 AUC after training: 0.5659340659340659
User 30095 does not improve AUC. Reverting changes.
Training on augumented user 39089 25/50 current_auc = 0.5673076923076923
User 39089 AUC after training: 0.5673076923076923
User 39089 does not improve AUC. Reverting changes.
Training on augumented user 116345 26/50 current_auc = 0.5673076923076923
User 116345 AUC after training: 0.5590659340659341
User 116345 does not improve AUC. Reverting changes.
Training on augumented user 95250 27/50 current_auc = 0.5673076923076923
User 95250 AUC after training: 0.5631868131868132
User 95250 does not improve AUC. Reverting changes.
Training on augumented user 137801 28/50 current_auc = 0.5673076923076923
User 137801 AUC after training: 0.5645604395604396
User 137801 does not improve AUC. Reverting changes.
Training on augumented user 25437 29/50 current_auc = 0.5673076923076923
User 25437 AUC after training: 0.5673076923076923
User 25437 does not improve AUC. Reverting changes.
Training on augumented user 98219 30/50 current_auc = 0.5673076923076923
User 98219 AUC after training: 0.5673076923076923
User 98219 does not improve AUC. Reverting changes.
Training on augumented user 110 31/50 current_auc = 0.5673076923076923
User 110 AUC after training: 0.5618131868131868
User 110 does not improve AUC. Reverting changes.
Training on augumented user 83367 32/50 current_auc = 0.5673076923076923
User 83367 AUC after training: 0.5645604395604396
User 83367 does not improve AUC. Reverting changes.
Training on augumented user 961 33/50 current_auc = 0.5673076923076923
User 961 AUC after training: 0.5659340659340659
User 961 does not improve AUC. Reverting changes.
Training on augumented user 23426 34/50 current_auc = 0.5673076923076923
User 23426 AUC after training: 0.5673076923076923
User 23426 does not improve AUC. Reverting changes.
Training on augumented user 106148 35/50 current_auc = 0.5673076923076923
User 106148 AUC after training: 0.5673076923076923
User 106148 does not improve AUC. Reverting changes.
Training on augumented user 15654 36/50 current_auc = 0.5673076923076923
User 15654 AUC after training: 0.5645604395604396
User 15654 does not improve AUC. Reverting changes.
Training on augumented user 15155 37/50 current_auc = 0.5673076923076923
User 15155 AUC after training: 0.5645604395604396
User 15155 does not improve AUC. Reverting changes.
Training on augumented user 118083 38/50 current_auc = 0.5673076923076923
User 118083 AUC after training: 0.5673076923076923
User 118083 does not improve AUC. Reverting changes.
Training on augumented user 40930 39/50 current_auc = 0.5673076923076923
User 40930 AUC after training: 0.5618131868131868
User 40930 does not improve AUC. Reverting changes.
Training on augumented user 85556 40/50 current_auc = 0.5673076923076923
User 85556 AUC after training: 0.5659340659340659
User 85556 does not improve AUC. Reverting changes.
Training on augumented user 92335 41/50 current_auc = 0.5673076923076923
User 92335 AUC after training: 0.5659340659340659
User 92335 does not improve AUC. Reverting changes.
Training on augumented user 98622 42/50 current_auc = 0.5673076923076923
User 98622 AUC after training: 0.5618131868131868
User 98622 does not improve AUC. Reverting changes.
Training on augumented user 125218 43/50 current_auc = 0.5673076923076923
User 125218 AUC after training: 0.5673076923076923
User 125218 does not improve AUC. Reverting changes.
Training on augumented user 73107 44/50 current_auc = 0.5673076923076923
User 73107 AUC after training: 0.5659340659340659
User 73107 does not improve AUC. Reverting changes.
Training on augumented user 132249 45/50 current_auc = 0.5673076923076923
User 132249 AUC after training: 0.5659340659340659
User 132249 does not improve AUC. Reverting changes.
Training on augumented user 34990 46/50 current_auc = 0.5673076923076923
User 34990 AUC after training: 0.5659340659340659
User 34990 does not improve AUC. Reverting changes.
Training on augumented user 97793 47/50 current_auc = 0.5673076923076923
User 97793 AUC after training: 0.5645604395604396
User 97793 does not improve AUC. Reverting changes.
Training on augumented user 64328 48/50 current_auc = 0.5673076923076923
User 64328 AUC after training: 0.5645604395604396
User 64328 does not improve AUC. Reverting changes.
Training on augumented user 108596 49/50 current_auc = 0.5673076923076923
User 108596 AUC after training: 0.5631868131868132
User 108596 does not improve AUC. Reverting changes.
[2024-12-02 18:24:28.605536] start test user 57830 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:29.090829] start test user 57830 86/568 recall augumented users by random, augumented_users = [107330, 75617, 24889, 132408, 137715, 104899, 66323, 124017, 68438, 110290, 10424, 27618, 98937, 36188, 72567, 107234, 125844, 99854, 35528, 70184, 94637, 74841, 20438, 21818, 37641, 77259, 94790, 30901, 111475, 107094, 23820, 101370, 78257, 99818, 133810, 69933, 54343, 19305, 137928, 30740, 96711, 128084, 27661, 98974, 80132, 9986, 36466, 133994, 89595, 34545]
[2024-12-02 18:24:29.108282] user = 57830 Cloud 86/568
[2024-12-02 18:24:29.128632] user = 57830 Local 86/568
[2024-12-02 18:24:29.275048] user = 57830 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:31.530548] user = 57830 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4917331258510017
Training on augumented user 107330 0/50 current_auc = 0.4917331258510017
User 107330 AUC after training: 0.49153861116514297
User 107330 does not improve AUC. Reverting changes.
Training on augumented user 75617 1/50 current_auc = 0.4917331258510017
User 75617 AUC after training: 0.4908578097646372
User 75617 does not improve AUC. Reverting changes.
Training on augumented user 24889 2/50 current_auc = 0.4917331258510017
User 24889 AUC after training: 0.4927056992802956
User 24889 improves AUC. Keeping the model.
Training on augumented user 132408 3/50 current_auc = 0.4927056992802956
User 132408 AUC after training: 0.49163586850807234
User 132408 does not improve AUC. Reverting changes.
Training on augumented user 137715 4/50 current_auc = 0.4927056992802956
User 137715 AUC after training: 0.4906632950787784
User 137715 does not improve AUC. Reverting changes.
Training on augumented user 104899 5/50 current_auc = 0.4927056992802956
User 104899 AUC after training: 0.4928029566232251
User 104899 improves AUC. Keeping the model.
Training on augumented user 66323 6/50 current_auc = 0.4928029566232251
User 66323 AUC after training: 0.4907605524217078
User 66323 does not improve AUC. Reverting changes.
Training on augumented user 124017 7/50 current_auc = 0.4928029566232251
User 124017 AUC after training: 0.48988523633534325
User 124017 does not improve AUC. Reverting changes.
Training on augumented user 68438 8/50 current_auc = 0.4928029566232251
User 68438 AUC after training: 0.4883291188484731
User 68438 does not improve AUC. Reverting changes.
Training on augumented user 110290 9/50 current_auc = 0.4928029566232251
User 110290 AUC after training: 0.49163586850807234
User 110290 does not improve AUC. Reverting changes.
Training on augumented user 10424 10/50 current_auc = 0.4928029566232251
User 10424 AUC after training: 0.4916358685080724
User 10424 does not improve AUC. Reverting changes.
Training on augumented user 27618 11/50 current_auc = 0.4928029566232251
User 27618 AUC after training: 0.48881540556312
User 27618 does not improve AUC. Reverting changes.
Training on augumented user 98937 12/50 current_auc = 0.4928029566232251
User 98937 AUC after training: 0.49144135382221354
User 98937 does not improve AUC. Reverting changes.
Training on augumented user 36188 13/50 current_auc = 0.4928029566232251
User 36188 AUC after training: 0.4896907216494845
User 36188 does not improve AUC. Reverting changes.
Training on augumented user 72567 14/50 current_auc = 0.4928029566232251
User 72567 AUC after training: 0.4943590741100953
User 72567 improves AUC. Keeping the model.
Training on augumented user 107234 15/50 current_auc = 0.4943590741100953
User 107234 AUC after training: 0.497276794397977
User 107234 improves AUC. Keeping the model.
Training on augumented user 125844 16/50 current_auc = 0.497276794397977
User 125844 AUC after training: 0.4986383971989885
User 125844 improves AUC. Keeping the model.
Training on augumented user 99854 17/50 current_auc = 0.4986383971989885
User 99854 AUC after training: 0.49717953705504764
User 99854 does not improve AUC. Reverting changes.
Training on augumented user 35528 18/50 current_auc = 0.4986383971989885
User 35528 AUC after training: 0.4967905076833301
User 35528 does not improve AUC. Reverting changes.
Training on augumented user 70184 19/50 current_auc = 0.4986383971989885
User 70184 AUC after training: 0.49776308111262396
User 70184 does not improve AUC. Reverting changes.
Training on augumented user 94637 20/50 current_auc = 0.4986383971989885
User 94637 AUC after training: 0.49688776502625953
User 94637 does not improve AUC. Reverting changes.
Training on augumented user 74841 21/50 current_auc = 0.4986383971989885
User 74841 AUC after training: 0.5005835440575763
User 74841 improves AUC. Keeping the model.
Training on augumented user 20438 22/50 current_auc = 0.5005835440575763
User 20438 AUC after training: 0.5002917720287882
User 20438 does not improve AUC. Reverting changes.
Training on augumented user 21818 23/50 current_auc = 0.5005835440575763
User 21818 AUC after training: 0.49815211048434155
User 21818 does not improve AUC. Reverting changes.
Training on augumented user 37641 24/50 current_auc = 0.5005835440575763
User 37641 AUC after training: 0.4994164559424236
User 37641 does not improve AUC. Reverting changes.
Training on augumented user 77259 25/50 current_auc = 0.5005835440575763
User 77259 AUC after training: 0.49834662517020034
User 77259 does not improve AUC. Reverting changes.
Training on augumented user 94790 26/50 current_auc = 0.5005835440575763
User 94790 AUC after training: 0.49941645594242373
User 94790 does not improve AUC. Reverting changes.
Training on augumented user 30901 27/50 current_auc = 0.5005835440575763
User 30901 AUC after training: 0.5008753160863646
User 30901 improves AUC. Keeping the model.
Training on augumented user 111475 28/50 current_auc = 0.5008753160863646
User 111475 AUC after training: 0.4984438825131297
User 111475 does not improve AUC. Reverting changes.
Training on augumented user 107094 29/50 current_auc = 0.5008753160863646
User 107094 AUC after training: 0.4998054853141412
User 107094 does not improve AUC. Reverting changes.
Training on augumented user 23820 30/50 current_auc = 0.5008753160863646
User 23820 AUC after training: 0.4939700447383778
User 23820 does not improve AUC. Reverting changes.
Training on augumented user 101370 31/50 current_auc = 0.5008753160863646
User 101370 AUC after training: 0.4987356545419179
User 101370 does not improve AUC. Reverting changes.
Training on augumented user 78257 32/50 current_auc = 0.5008753160863646
User 78257 AUC after training: 0.49601244893989493
User 78257 does not improve AUC. Reverting changes.
Training on augumented user 99818 33/50 current_auc = 0.5008753160863646
User 99818 AUC after training: 0.49795759579848276
User 99818 does not improve AUC. Reverting changes.
Training on augumented user 133810 34/50 current_auc = 0.5008753160863646
User 133810 AUC after training: 0.5009725734292939
User 133810 improves AUC. Keeping the model.
Training on augumented user 69933 35/50 current_auc = 0.5009725734292939
User 69933 AUC after training: 0.5015561174868702
User 69933 improves AUC. Keeping the model.
Training on augumented user 54343 36/50 current_auc = 0.5015561174868702
User 54343 AUC after training: 0.4981521104843416
User 54343 does not improve AUC. Reverting changes.
Training on augumented user 19305 37/50 current_auc = 0.5015561174868702
User 19305 AUC after training: 0.4871620307333203
User 19305 does not improve AUC. Reverting changes.
Training on augumented user 137928 38/50 current_auc = 0.5015561174868702
User 137928 AUC after training: 0.4968877650262595
User 137928 does not improve AUC. Reverting changes.
Training on augumented user 30740 39/50 current_auc = 0.5015561174868702
User 30740 AUC after training: 0.4964014783116125
User 30740 does not improve AUC. Reverting changes.
Training on augumented user 96711 40/50 current_auc = 0.5015561174868702
User 96711 AUC after training: 0.4994164559424237
User 96711 does not improve AUC. Reverting changes.
Training on augumented user 128084 41/50 current_auc = 0.5015561174868702
User 128084 AUC after training: 0.5010698307722233
User 128084 does not improve AUC. Reverting changes.
Training on augumented user 27661 42/50 current_auc = 0.5015561174868702
User 27661 AUC after training: 0.4998054853141412
User 27661 does not improve AUC. Reverting changes.
Training on augumented user 98974 43/50 current_auc = 0.5015561174868702
User 98974 AUC after training: 0.49999999999999994
User 98974 does not improve AUC. Reverting changes.
Training on augumented user 80132 44/50 current_auc = 0.5015561174868702
User 80132 AUC after training: 0.5016533748297995
User 80132 improves AUC. Keeping the model.
Training on augumented user 9986 45/50 current_auc = 0.5016533748297995
User 9986 AUC after training: 0.500486286714647
User 9986 does not improve AUC. Reverting changes.
Training on augumented user 36466 46/50 current_auc = 0.5016533748297995
User 36466 AUC after training: 0.5016533748297997
User 36466 improves AUC. Keeping the model.
Training on augumented user 133994 47/50 current_auc = 0.5016533748297997
User 133994 AUC after training: 0.5005835440575763
User 133994 does not improve AUC. Reverting changes.
Training on augumented user 89595 48/50 current_auc = 0.5016533748297997
User 89595 AUC after training: 0.5003890293717175
User 89595 does not improve AUC. Reverting changes.
Training on augumented user 34545 49/50 current_auc = 0.5016533748297997
User 34545 AUC after training: 0.5010698307722232
User 34545 does not improve AUC. Reverting changes.
[2024-12-02 18:24:58.562021] start test user 57887 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:58.979221] start test user 57887 87/568 recall augumented users by random, augumented_users = [132919, 75776, 59168, 14884, 85902, 25196, 45804, 14625, 128874, 6827, 82980, 3941, 87392, 9942, 71325, 39072, 111520, 123593, 13603, 56816, 61715, 136706, 44799, 50980, 79144, 81371, 124078, 103501, 132664, 113195, 88705, 16546, 21441, 126027, 130098, 65098, 118538, 17711, 68563, 28912, 128518, 56569, 37995, 129787, 99695, 36019, 2740, 40289, 43010, 9437]
[2024-12-02 18:24:58.994438] user = 57887 Cloud 87/568
[2024-12-02 18:24:59.015414] user = 57887 Local 87/568
[2024-12-02 18:24:59.064971] user = 57887 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:01.582518] user = 57887 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4107142857142857
Training on augumented user 132919 0/50 current_auc = 0.4107142857142857
User 132919 AUC after training: 0.4107142857142857
User 132919 does not improve AUC. Reverting changes.
Training on augumented user 75776 1/50 current_auc = 0.4107142857142857
User 75776 AUC after training: 0.4107142857142857
User 75776 does not improve AUC. Reverting changes.
Training on augumented user 59168 2/50 current_auc = 0.4107142857142857
User 59168 AUC after training: 0.4107142857142857
User 59168 does not improve AUC. Reverting changes.
Training on augumented user 14884 3/50 current_auc = 0.4107142857142857
User 14884 AUC after training: 0.4107142857142857
User 14884 does not improve AUC. Reverting changes.
Training on augumented user 85902 4/50 current_auc = 0.4107142857142857
User 85902 AUC after training: 0.4107142857142857
User 85902 does not improve AUC. Reverting changes.
Training on augumented user 25196 5/50 current_auc = 0.4107142857142857
User 25196 AUC after training: 0.4107142857142857
User 25196 does not improve AUC. Reverting changes.
Training on augumented user 45804 6/50 current_auc = 0.4107142857142857
User 45804 AUC after training: 0.4107142857142857
User 45804 does not improve AUC. Reverting changes.
Training on augumented user 14625 7/50 current_auc = 0.4107142857142857
User 14625 AUC after training: 0.4107142857142857
User 14625 does not improve AUC. Reverting changes.
Training on augumented user 128874 8/50 current_auc = 0.4107142857142857
User 128874 AUC after training: 0.4107142857142857
User 128874 does not improve AUC. Reverting changes.
Training on augumented user 6827 9/50 current_auc = 0.4107142857142857
User 6827 AUC after training: 0.4107142857142857
User 6827 does not improve AUC. Reverting changes.
Training on augumented user 82980 10/50 current_auc = 0.4107142857142857
User 82980 AUC after training: 0.4107142857142857
User 82980 does not improve AUC. Reverting changes.
Training on augumented user 3941 11/50 current_auc = 0.4107142857142857
User 3941 AUC after training: 0.4107142857142857
User 3941 does not improve AUC. Reverting changes.
Training on augumented user 87392 12/50 current_auc = 0.4107142857142857
User 87392 AUC after training: 0.4107142857142857
User 87392 does not improve AUC. Reverting changes.
Training on augumented user 9942 13/50 current_auc = 0.4107142857142857
User 9942 AUC after training: 0.4107142857142857
User 9942 does not improve AUC. Reverting changes.
Training on augumented user 71325 14/50 current_auc = 0.4107142857142857
User 71325 AUC after training: 0.4107142857142857
User 71325 does not improve AUC. Reverting changes.
Training on augumented user 39072 15/50 current_auc = 0.4107142857142857
User 39072 AUC after training: 0.4107142857142857
User 39072 does not improve AUC. Reverting changes.
Training on augumented user 111520 16/50 current_auc = 0.4107142857142857
User 111520 AUC after training: 0.4107142857142857
User 111520 does not improve AUC. Reverting changes.
Training on augumented user 123593 17/50 current_auc = 0.4107142857142857
User 123593 AUC after training: 0.4107142857142857
User 123593 does not improve AUC. Reverting changes.
Training on augumented user 13603 18/50 current_auc = 0.4107142857142857
User 13603 AUC after training: 0.4107142857142857
User 13603 does not improve AUC. Reverting changes.
Training on augumented user 56816 19/50 current_auc = 0.4107142857142857
User 56816 AUC after training: 0.4107142857142857
User 56816 does not improve AUC. Reverting changes.
Training on augumented user 61715 20/50 current_auc = 0.4107142857142857
User 61715 AUC after training: 0.4107142857142857
User 61715 does not improve AUC. Reverting changes.
Training on augumented user 136706 21/50 current_auc = 0.4107142857142857
User 136706 AUC after training: 0.4107142857142857
User 136706 does not improve AUC. Reverting changes.
Training on augumented user 44799 22/50 current_auc = 0.4107142857142857
User 44799 AUC after training: 0.4107142857142857
User 44799 does not improve AUC. Reverting changes.
Training on augumented user 50980 23/50 current_auc = 0.4107142857142857
User 50980 AUC after training: 0.4107142857142857
User 50980 does not improve AUC. Reverting changes.
Training on augumented user 79144 24/50 current_auc = 0.4107142857142857
User 79144 AUC after training: 0.4107142857142857
User 79144 does not improve AUC. Reverting changes.
Training on augumented user 81371 25/50 current_auc = 0.4107142857142857
User 81371 AUC after training: 0.4107142857142857
User 81371 does not improve AUC. Reverting changes.
Training on augumented user 124078 26/50 current_auc = 0.4107142857142857
User 124078 AUC after training: 0.4196428571428571
User 124078 improves AUC. Keeping the model.
Training on augumented user 103501 27/50 current_auc = 0.4196428571428571
User 103501 AUC after training: 0.4107142857142857
User 103501 does not improve AUC. Reverting changes.
Training on augumented user 132664 28/50 current_auc = 0.4196428571428571
User 132664 AUC after training: 0.4107142857142857
User 132664 does not improve AUC. Reverting changes.
Training on augumented user 113195 29/50 current_auc = 0.4196428571428571
User 113195 AUC after training: 0.4107142857142857
User 113195 does not improve AUC. Reverting changes.
Training on augumented user 88705 30/50 current_auc = 0.4196428571428571
User 88705 AUC after training: 0.4107142857142857
User 88705 does not improve AUC. Reverting changes.
Training on augumented user 16546 31/50 current_auc = 0.4196428571428571
User 16546 AUC after training: 0.4107142857142857
User 16546 does not improve AUC. Reverting changes.
Training on augumented user 21441 32/50 current_auc = 0.4196428571428571
User 21441 AUC after training: 0.4196428571428571
User 21441 does not improve AUC. Reverting changes.
Training on augumented user 126027 33/50 current_auc = 0.4196428571428571
User 126027 AUC after training: 0.4107142857142857
User 126027 does not improve AUC. Reverting changes.
Training on augumented user 130098 34/50 current_auc = 0.4196428571428571
User 130098 AUC after training: 0.4107142857142857
User 130098 does not improve AUC. Reverting changes.
Training on augumented user 65098 35/50 current_auc = 0.4196428571428571
User 65098 AUC after training: 0.4196428571428571
User 65098 does not improve AUC. Reverting changes.
Training on augumented user 118538 36/50 current_auc = 0.4196428571428571
User 118538 AUC after training: 0.4107142857142857
User 118538 does not improve AUC. Reverting changes.
Training on augumented user 17711 37/50 current_auc = 0.4196428571428571
User 17711 AUC after training: 0.4107142857142857
User 17711 does not improve AUC. Reverting changes.
Training on augumented user 68563 38/50 current_auc = 0.4196428571428571
User 68563 AUC after training: 0.4107142857142857
User 68563 does not improve AUC. Reverting changes.
Training on augumented user 28912 39/50 current_auc = 0.4196428571428571
User 28912 AUC after training: 0.4107142857142857
User 28912 does not improve AUC. Reverting changes.
Training on augumented user 128518 40/50 current_auc = 0.4196428571428571
User 128518 AUC after training: 0.4107142857142857
User 128518 does not improve AUC. Reverting changes.
Training on augumented user 56569 41/50 current_auc = 0.4196428571428571
User 56569 AUC after training: 0.4107142857142857
User 56569 does not improve AUC. Reverting changes.
Training on augumented user 37995 42/50 current_auc = 0.4196428571428571
User 37995 AUC after training: 0.4107142857142857
User 37995 does not improve AUC. Reverting changes.
Training on augumented user 129787 43/50 current_auc = 0.4196428571428571
User 129787 AUC after training: 0.4107142857142857
User 129787 does not improve AUC. Reverting changes.
Training on augumented user 99695 44/50 current_auc = 0.4196428571428571
User 99695 AUC after training: 0.4107142857142857
User 99695 does not improve AUC. Reverting changes.
Training on augumented user 36019 45/50 current_auc = 0.4196428571428571
User 36019 AUC after training: 0.4107142857142857
User 36019 does not improve AUC. Reverting changes.
Training on augumented user 2740 46/50 current_auc = 0.4196428571428571
User 2740 AUC after training: 0.4107142857142857
User 2740 does not improve AUC. Reverting changes.
Training on augumented user 40289 47/50 current_auc = 0.4196428571428571
User 40289 AUC after training: 0.4107142857142857
User 40289 does not improve AUC. Reverting changes.
Training on augumented user 43010 48/50 current_auc = 0.4196428571428571
User 43010 AUC after training: 0.4196428571428571
User 43010 does not improve AUC. Reverting changes.
Training on augumented user 9437 49/50 current_auc = 0.4196428571428571
User 9437 AUC after training: 0.4107142857142857
User 9437 does not improve AUC. Reverting changes.
[2024-12-02 18:25:29.212404] start test user 57921 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:29.753273] start test user 57921 88/568 recall augumented users by random, augumented_users = [50202, 36565, 7382, 92288, 87743, 87641, 101299, 66265, 117351, 79243, 113927, 55138, 115694, 138017, 92707, 38938, 81892, 19798, 60583, 2075, 81410, 96778, 33487, 22280, 68991, 55524, 33777, 19120, 36285, 70425, 94245, 28817, 85099, 116840, 8234, 120506, 52686, 66785, 41, 6668, 13469, 73447, 1309, 9714, 122392, 120441, 35030, 10838, 11152, 17737]
[2024-12-02 18:25:29.806658] user = 57921 Cloud 88/568
[2024-12-02 18:25:29.828551] user = 57921 Local 88/568
[2024-12-02 18:25:29.966890] user = 57921 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:32.555594] user = 57921 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6711145996860283
Training on augumented user 50202 0/50 current_auc = 0.6711145996860283
User 50202 AUC after training: 0.6665620094191522
User 50202 does not improve AUC. Reverting changes.
Training on augumented user 36565 1/50 current_auc = 0.6711145996860283
User 36565 AUC after training: 0.6701726844583987
User 36565 does not improve AUC. Reverting changes.
Training on augumented user 7382 2/50 current_auc = 0.6711145996860283
User 7382 AUC after training: 0.6704866562009419
User 7382 does not improve AUC. Reverting changes.
Training on augumented user 92288 3/50 current_auc = 0.6711145996860283
User 92288 AUC after training: 0.6748822605965463
User 92288 improves AUC. Keeping the model.
Training on augumented user 87743 4/50 current_auc = 0.6748822605965463
User 87743 AUC after training: 0.6736263736263736
User 87743 does not improve AUC. Reverting changes.
Training on augumented user 87641 5/50 current_auc = 0.6748822605965463
User 87641 AUC after training: 0.6751962323390894
User 87641 improves AUC. Keeping the model.
Training on augumented user 101299 6/50 current_auc = 0.6751962323390894
User 101299 AUC after training: 0.6726844583987441
User 101299 does not improve AUC. Reverting changes.
Training on augumented user 66265 7/50 current_auc = 0.6751962323390894
User 66265 AUC after training: 0.6723704866562009
User 66265 does not improve AUC. Reverting changes.
Training on augumented user 117351 8/50 current_auc = 0.6751962323390894
User 117351 AUC after training: 0.6723704866562009
User 117351 does not improve AUC. Reverting changes.
Training on augumented user 79243 9/50 current_auc = 0.6751962323390894
User 79243 AUC after training: 0.6745682888540031
User 79243 does not improve AUC. Reverting changes.
Training on augumented user 113927 10/50 current_auc = 0.6751962323390894
User 113927 AUC after training: 0.6712715855572999
User 113927 does not improve AUC. Reverting changes.
Training on augumented user 55138 11/50 current_auc = 0.6751962323390894
User 55138 AUC after training: 0.6723704866562009
User 55138 does not improve AUC. Reverting changes.
Training on augumented user 115694 12/50 current_auc = 0.6751962323390894
User 115694 AUC after training: 0.6692307692307693
User 115694 does not improve AUC. Reverting changes.
Training on augumented user 138017 13/50 current_auc = 0.6751962323390894
User 138017 AUC after training: 0.6726844583987441
User 138017 does not improve AUC. Reverting changes.
Training on augumented user 92707 14/50 current_auc = 0.6751962323390894
User 92707 AUC after training: 0.672684458398744
User 92707 does not improve AUC. Reverting changes.
Training on augumented user 38938 15/50 current_auc = 0.6751962323390894
User 38938 AUC after training: 0.6717425431711146
User 38938 does not improve AUC. Reverting changes.
Training on augumented user 81892 16/50 current_auc = 0.6751962323390894
User 81892 AUC after training: 0.6758241758241758
User 81892 improves AUC. Keeping the model.
Training on augumented user 19798 17/50 current_auc = 0.6758241758241758
User 19798 AUC after training: 0.6758241758241759
User 19798 improves AUC. Keeping the model.
Training on augumented user 60583 18/50 current_auc = 0.6758241758241759
User 60583 AUC after training: 0.6726844583987441
User 60583 does not improve AUC. Reverting changes.
Training on augumented user 2075 19/50 current_auc = 0.6758241758241759
User 2075 AUC after training: 0.673469387755102
User 2075 does not improve AUC. Reverting changes.
Training on augumented user 81410 20/50 current_auc = 0.6758241758241759
User 81410 AUC after training: 0.670800627943485
User 81410 does not improve AUC. Reverting changes.
Training on augumented user 96778 21/50 current_auc = 0.6758241758241759
User 96778 AUC after training: 0.6701726844583988
User 96778 does not improve AUC. Reverting changes.
Training on augumented user 33487 22/50 current_auc = 0.6758241758241759
User 33487 AUC after training: 0.676138147566719
User 33487 improves AUC. Keeping the model.
Training on augumented user 22280 23/50 current_auc = 0.676138147566719
User 22280 AUC after training: 0.6745682888540032
User 22280 does not improve AUC. Reverting changes.
Training on augumented user 68991 24/50 current_auc = 0.676138147566719
User 68991 AUC after training: 0.6758241758241759
User 68991 does not improve AUC. Reverting changes.
Training on augumented user 55524 25/50 current_auc = 0.676138147566719
User 55524 AUC after training: 0.6755102040816326
User 55524 does not improve AUC. Reverting changes.
Training on augumented user 33777 26/50 current_auc = 0.676138147566719
User 33777 AUC after training: 0.6748822605965463
User 33777 does not improve AUC. Reverting changes.
Training on augumented user 19120 27/50 current_auc = 0.676138147566719
User 19120 AUC after training: 0.6748822605965463
User 19120 does not improve AUC. Reverting changes.
Training on augumented user 36285 28/50 current_auc = 0.676138147566719
User 36285 AUC after training: 0.6742543171114599
User 36285 does not improve AUC. Reverting changes.
Training on augumented user 70425 29/50 current_auc = 0.676138147566719
User 70425 AUC after training: 0.6755102040816326
User 70425 does not improve AUC. Reverting changes.
Training on augumented user 94245 30/50 current_auc = 0.676138147566719
User 94245 AUC after training: 0.676138147566719
User 94245 does not improve AUC. Reverting changes.
Training on augumented user 28817 31/50 current_auc = 0.676138147566719
User 28817 AUC after training: 0.676138147566719
User 28817 does not improve AUC. Reverting changes.
Training on augumented user 85099 32/50 current_auc = 0.676138147566719
User 85099 AUC after training: 0.6758241758241759
User 85099 does not improve AUC. Reverting changes.
Training on augumented user 116840 33/50 current_auc = 0.676138147566719
User 116840 AUC after training: 0.6758241758241759
User 116840 does not improve AUC. Reverting changes.
Training on augumented user 8234 34/50 current_auc = 0.676138147566719
User 8234 AUC after training: 0.676138147566719
User 8234 does not improve AUC. Reverting changes.
Training on augumented user 120506 35/50 current_auc = 0.676138147566719
User 120506 AUC after training: 0.6720565149136578
User 120506 does not improve AUC. Reverting changes.
Training on augumented user 52686 36/50 current_auc = 0.676138147566719
User 52686 AUC after training: 0.67425431711146
User 52686 does not improve AUC. Reverting changes.
Training on augumented user 66785 37/50 current_auc = 0.676138147566719
User 66785 AUC after training: 0.6733124018838306
User 66785 does not improve AUC. Reverting changes.
Training on augumented user 41 38/50 current_auc = 0.676138147566719
User 41 AUC after training: 0.6748822605965463
User 41 does not improve AUC. Reverting changes.
Training on augumented user 6668 39/50 current_auc = 0.676138147566719
User 6668 AUC after training: 0.6751962323390894
User 6668 does not improve AUC. Reverting changes.
Training on augumented user 13469 40/50 current_auc = 0.676138147566719
User 13469 AUC after training: 0.6739403453689168
User 13469 does not improve AUC. Reverting changes.
Training on augumented user 73447 41/50 current_auc = 0.676138147566719
User 73447 AUC after training: 0.6748822605965463
User 73447 does not improve AUC. Reverting changes.
Training on augumented user 1309 42/50 current_auc = 0.676138147566719
User 1309 AUC after training: 0.6701726844583988
User 1309 does not improve AUC. Reverting changes.
Training on augumented user 9714 43/50 current_auc = 0.676138147566719
User 9714 AUC after training: 0.676138147566719
User 9714 does not improve AUC. Reverting changes.
Training on augumented user 122392 44/50 current_auc = 0.676138147566719
User 122392 AUC after training: 0.6731554160125588
User 122392 does not improve AUC. Reverting changes.
Training on augumented user 120441 45/50 current_auc = 0.676138147566719
User 120441 AUC after training: 0.6742543171114599
User 120441 does not improve AUC. Reverting changes.
Training on augumented user 35030 46/50 current_auc = 0.676138147566719
User 35030 AUC after training: 0.6755102040816326
User 35030 does not improve AUC. Reverting changes.
Training on augumented user 10838 47/50 current_auc = 0.676138147566719
User 10838 AUC after training: 0.6758241758241759
User 10838 does not improve AUC. Reverting changes.
Training on augumented user 11152 48/50 current_auc = 0.676138147566719
User 11152 AUC after training: 0.6686028257456829
User 11152 does not improve AUC. Reverting changes.
Training on augumented user 17737 49/50 current_auc = 0.676138147566719
User 17737 AUC after training: 0.6767660910518054
User 17737 improves AUC. Keeping the model.
[2024-12-02 18:26:05.091194] start test user 57943 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:05.642207] start test user 57943 89/568 recall augumented users by random, augumented_users = [83583, 1334, 130037, 7832, 13396, 124695, 130624, 29439, 79591, 137873, 69059, 54473, 18485, 18431, 18132, 98308, 125088, 55650, 68947, 24239, 28416, 5007, 111986, 71199, 130354, 17870, 22517, 30630, 89563, 38297, 34384, 107118, 79319, 74623, 31109, 87458, 66652, 55044, 79727, 137510, 82974, 126375, 57480, 16235, 126506, 50312, 114126, 81920, 10075, 48456]
[2024-12-02 18:26:05.658906] user = 57943 Cloud 89/568
[2024-12-02 18:26:05.670554] user = 57943 Local 89/568
[2024-12-02 18:26:05.691673] user = 57943 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:08.061548] user = 57943 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 83583 0/50 current_auc = 0.5625
User 83583 AUC after training: 0.5625
User 83583 does not improve AUC. Reverting changes.
Training on augumented user 1334 1/50 current_auc = 0.5625
User 1334 AUC after training: 0.5625
User 1334 does not improve AUC. Reverting changes.
Training on augumented user 130037 2/50 current_auc = 0.5625
User 130037 AUC after training: 0.5625
User 130037 does not improve AUC. Reverting changes.
Training on augumented user 7832 3/50 current_auc = 0.5625
User 7832 AUC after training: 0.5625
User 7832 does not improve AUC. Reverting changes.
Training on augumented user 13396 4/50 current_auc = 0.5625
User 13396 AUC after training: 0.5625
User 13396 does not improve AUC. Reverting changes.
Training on augumented user 124695 5/50 current_auc = 0.5625
User 124695 AUC after training: 0.5625
User 124695 does not improve AUC. Reverting changes.
Training on augumented user 130624 6/50 current_auc = 0.5625
User 130624 AUC after training: 0.5625
User 130624 does not improve AUC. Reverting changes.
Training on augumented user 29439 7/50 current_auc = 0.5625
User 29439 AUC after training: 0.5625
User 29439 does not improve AUC. Reverting changes.
Training on augumented user 79591 8/50 current_auc = 0.5625
User 79591 AUC after training: 0.5625
User 79591 does not improve AUC. Reverting changes.
Training on augumented user 137873 9/50 current_auc = 0.5625
User 137873 AUC after training: 0.5625
User 137873 does not improve AUC. Reverting changes.
Training on augumented user 69059 10/50 current_auc = 0.5625
User 69059 AUC after training: 0.5625
User 69059 does not improve AUC. Reverting changes.
Training on augumented user 54473 11/50 current_auc = 0.5625
User 54473 AUC after training: 0.5625
User 54473 does not improve AUC. Reverting changes.
Training on augumented user 18485 12/50 current_auc = 0.5625
User 18485 AUC after training: 0.5625
User 18485 does not improve AUC. Reverting changes.
Training on augumented user 18431 13/50 current_auc = 0.5625
User 18431 AUC after training: 0.5625
User 18431 does not improve AUC. Reverting changes.
Training on augumented user 18132 14/50 current_auc = 0.5625
User 18132 AUC after training: 0.5625
User 18132 does not improve AUC. Reverting changes.
Training on augumented user 98308 15/50 current_auc = 0.5625
User 98308 AUC after training: 0.5625
User 98308 does not improve AUC. Reverting changes.
Training on augumented user 125088 16/50 current_auc = 0.5625
User 125088 AUC after training: 0.5625
User 125088 does not improve AUC. Reverting changes.
Training on augumented user 55650 17/50 current_auc = 0.5625
User 55650 AUC after training: 0.5625
User 55650 does not improve AUC. Reverting changes.
Training on augumented user 68947 18/50 current_auc = 0.5625
User 68947 AUC after training: 0.5625
User 68947 does not improve AUC. Reverting changes.
Training on augumented user 24239 19/50 current_auc = 0.5625
User 24239 AUC after training: 0.5625
User 24239 does not improve AUC. Reverting changes.
Training on augumented user 28416 20/50 current_auc = 0.5625
User 28416 AUC after training: 0.5625
User 28416 does not improve AUC. Reverting changes.
Training on augumented user 5007 21/50 current_auc = 0.5625
User 5007 AUC after training: 0.5625
User 5007 does not improve AUC. Reverting changes.
Training on augumented user 111986 22/50 current_auc = 0.5625
User 111986 AUC after training: 0.5625
User 111986 does not improve AUC. Reverting changes.
Training on augumented user 71199 23/50 current_auc = 0.5625
User 71199 AUC after training: 0.5625
User 71199 does not improve AUC. Reverting changes.
Training on augumented user 130354 24/50 current_auc = 0.5625
User 130354 AUC after training: 0.5625
User 130354 does not improve AUC. Reverting changes.
Training on augumented user 17870 25/50 current_auc = 0.5625
User 17870 AUC after training: 0.5625
User 17870 does not improve AUC. Reverting changes.
Training on augumented user 22517 26/50 current_auc = 0.5625
User 22517 AUC after training: 0.5625
User 22517 does not improve AUC. Reverting changes.
Training on augumented user 30630 27/50 current_auc = 0.5625
User 30630 AUC after training: 0.5625
User 30630 does not improve AUC. Reverting changes.
Training on augumented user 89563 28/50 current_auc = 0.5625
User 89563 AUC after training: 0.5625
User 89563 does not improve AUC. Reverting changes.
Training on augumented user 38297 29/50 current_auc = 0.5625
User 38297 AUC after training: 0.5625
User 38297 does not improve AUC. Reverting changes.
Training on augumented user 34384 30/50 current_auc = 0.5625
User 34384 AUC after training: 0.5625
User 34384 does not improve AUC. Reverting changes.
Training on augumented user 107118 31/50 current_auc = 0.5625
User 107118 AUC after training: 0.5625
User 107118 does not improve AUC. Reverting changes.
Training on augumented user 79319 32/50 current_auc = 0.5625
User 79319 AUC after training: 0.5625
User 79319 does not improve AUC. Reverting changes.
Training on augumented user 74623 33/50 current_auc = 0.5625
User 74623 AUC after training: 0.5625
User 74623 does not improve AUC. Reverting changes.
Training on augumented user 31109 34/50 current_auc = 0.5625
User 31109 AUC after training: 0.5625
User 31109 does not improve AUC. Reverting changes.
Training on augumented user 87458 35/50 current_auc = 0.5625
User 87458 AUC after training: 0.5625
User 87458 does not improve AUC. Reverting changes.
Training on augumented user 66652 36/50 current_auc = 0.5625
User 66652 AUC after training: 0.5625
User 66652 does not improve AUC. Reverting changes.
Training on augumented user 55044 37/50 current_auc = 0.5625
User 55044 AUC after training: 0.5625
User 55044 does not improve AUC. Reverting changes.
Training on augumented user 79727 38/50 current_auc = 0.5625
User 79727 AUC after training: 0.5625
User 79727 does not improve AUC. Reverting changes.
Training on augumented user 137510 39/50 current_auc = 0.5625
User 137510 AUC after training: 0.5625
User 137510 does not improve AUC. Reverting changes.
Training on augumented user 82974 40/50 current_auc = 0.5625
User 82974 AUC after training: 0.5625
User 82974 does not improve AUC. Reverting changes.
Training on augumented user 126375 41/50 current_auc = 0.5625
User 126375 AUC after training: 0.5625
User 126375 does not improve AUC. Reverting changes.
Training on augumented user 57480 42/50 current_auc = 0.5625
User 57480 AUC after training: 0.5625
User 57480 does not improve AUC. Reverting changes.
Training on augumented user 16235 43/50 current_auc = 0.5625
User 16235 AUC after training: 0.5625
User 16235 does not improve AUC. Reverting changes.
Training on augumented user 126506 44/50 current_auc = 0.5625
User 126506 AUC after training: 0.5625
User 126506 does not improve AUC. Reverting changes.
Training on augumented user 50312 45/50 current_auc = 0.5625
User 50312 AUC after training: 0.5625
User 50312 does not improve AUC. Reverting changes.
Training on augumented user 114126 46/50 current_auc = 0.5625
User 114126 AUC after training: 0.5625
User 114126 does not improve AUC. Reverting changes.
Training on augumented user 81920 47/50 current_auc = 0.5625
User 81920 AUC after training: 0.5625
User 81920 does not improve AUC. Reverting changes.
Training on augumented user 10075 48/50 current_auc = 0.5625
User 10075 AUC after training: 0.5625
User 10075 does not improve AUC. Reverting changes.
Training on augumented user 48456 49/50 current_auc = 0.5625
User 48456 AUC after training: 0.5625
User 48456 does not improve AUC. Reverting changes.
[2024-12-02 18:26:38.137683] start test user 57969 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:38.712851] start test user 57969 90/568 recall augumented users by random, augumented_users = [63795, 74592, 106200, 3539, 124402, 62987, 62952, 65543, 3728, 130463, 54330, 119399, 60106, 89741, 87819, 125586, 107728, 122686, 56332, 30547, 7010, 80663, 54517, 33731, 121235, 39652, 13166, 57572, 4417, 95803, 4221, 63585, 17438, 70888, 26619, 64305, 14662, 7809, 113168, 61880, 74258, 79806, 102851, 18125, 124334, 83132, 117916, 10036, 105082, 41102]
[2024-12-02 18:26:38.728377] user = 57969 Cloud 90/568
[2024-12-02 18:26:38.749889] user = 57969 Local 90/568
[2024-12-02 18:26:38.906521] user = 57969 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:41.346930] user = 57969 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7592592592592593
Training on augumented user 63795 0/50 current_auc = 0.7592592592592593
User 63795 AUC after training: 0.75
User 63795 does not improve AUC. Reverting changes.
Training on augumented user 74592 1/50 current_auc = 0.7592592592592593
User 74592 AUC after training: 0.7592592592592593
User 74592 does not improve AUC. Reverting changes.
Training on augumented user 106200 2/50 current_auc = 0.7592592592592593
User 106200 AUC after training: 0.7592592592592593
User 106200 does not improve AUC. Reverting changes.
Training on augumented user 3539 3/50 current_auc = 0.7592592592592593
User 3539 AUC after training: 0.7592592592592593
User 3539 does not improve AUC. Reverting changes.
Training on augumented user 124402 4/50 current_auc = 0.7592592592592593
User 124402 AUC after training: 0.7592592592592593
User 124402 does not improve AUC. Reverting changes.
Training on augumented user 62987 5/50 current_auc = 0.7592592592592593
User 62987 AUC after training: 0.7592592592592593
User 62987 does not improve AUC. Reverting changes.
Training on augumented user 62952 6/50 current_auc = 0.7592592592592593
User 62952 AUC after training: 0.7592592592592593
User 62952 does not improve AUC. Reverting changes.
Training on augumented user 65543 7/50 current_auc = 0.7592592592592593
User 65543 AUC after training: 0.7592592592592593
User 65543 does not improve AUC. Reverting changes.
Training on augumented user 3728 8/50 current_auc = 0.7592592592592593
User 3728 AUC after training: 0.7592592592592593
User 3728 does not improve AUC. Reverting changes.
Training on augumented user 130463 9/50 current_auc = 0.7592592592592593
User 130463 AUC after training: 0.7592592592592593
User 130463 does not improve AUC. Reverting changes.
Training on augumented user 54330 10/50 current_auc = 0.7592592592592593
User 54330 AUC after training: 0.7592592592592593
User 54330 does not improve AUC. Reverting changes.
Training on augumented user 119399 11/50 current_auc = 0.7592592592592593
User 119399 AUC after training: 0.7592592592592593
User 119399 does not improve AUC. Reverting changes.
Training on augumented user 60106 12/50 current_auc = 0.7592592592592593
User 60106 AUC after training: 0.7592592592592593
User 60106 does not improve AUC. Reverting changes.
Training on augumented user 89741 13/50 current_auc = 0.7592592592592593
User 89741 AUC after training: 0.7592592592592593
User 89741 does not improve AUC. Reverting changes.
Training on augumented user 87819 14/50 current_auc = 0.7592592592592593
User 87819 AUC after training: 0.7592592592592593
User 87819 does not improve AUC. Reverting changes.
Training on augumented user 125586 15/50 current_auc = 0.7592592592592593
User 125586 AUC after training: 0.7592592592592593
User 125586 does not improve AUC. Reverting changes.
Training on augumented user 107728 16/50 current_auc = 0.7592592592592593
User 107728 AUC after training: 0.7592592592592593
User 107728 does not improve AUC. Reverting changes.
Training on augumented user 122686 17/50 current_auc = 0.7592592592592593
User 122686 AUC after training: 0.75
User 122686 does not improve AUC. Reverting changes.
Training on augumented user 56332 18/50 current_auc = 0.7592592592592593
User 56332 AUC after training: 0.7592592592592593
User 56332 does not improve AUC. Reverting changes.
Training on augumented user 30547 19/50 current_auc = 0.7592592592592593
User 30547 AUC after training: 0.7592592592592593
User 30547 does not improve AUC. Reverting changes.
Training on augumented user 7010 20/50 current_auc = 0.7592592592592593
User 7010 AUC after training: 0.75
User 7010 does not improve AUC. Reverting changes.
Training on augumented user 80663 21/50 current_auc = 0.7592592592592593
User 80663 AUC after training: 0.7592592592592593
User 80663 does not improve AUC. Reverting changes.
Training on augumented user 54517 22/50 current_auc = 0.7592592592592593
User 54517 AUC after training: 0.7592592592592593
User 54517 does not improve AUC. Reverting changes.
Training on augumented user 33731 23/50 current_auc = 0.7592592592592593
User 33731 AUC after training: 0.7592592592592593
User 33731 does not improve AUC. Reverting changes.
Training on augumented user 121235 24/50 current_auc = 0.7592592592592593
User 121235 AUC after training: 0.7592592592592593
User 121235 does not improve AUC. Reverting changes.
Training on augumented user 39652 25/50 current_auc = 0.7592592592592593
User 39652 AUC after training: 0.7592592592592593
User 39652 does not improve AUC. Reverting changes.
Training on augumented user 13166 26/50 current_auc = 0.7592592592592593
User 13166 AUC after training: 0.7592592592592593
User 13166 does not improve AUC. Reverting changes.
Training on augumented user 57572 27/50 current_auc = 0.7592592592592593
User 57572 AUC after training: 0.7592592592592593
User 57572 does not improve AUC. Reverting changes.
Training on augumented user 4417 28/50 current_auc = 0.7592592592592593
User 4417 AUC after training: 0.7592592592592593
User 4417 does not improve AUC. Reverting changes.
Training on augumented user 95803 29/50 current_auc = 0.7592592592592593
User 95803 AUC after training: 0.7592592592592593
User 95803 does not improve AUC. Reverting changes.
Training on augumented user 4221 30/50 current_auc = 0.7592592592592593
User 4221 AUC after training: 0.7592592592592593
User 4221 does not improve AUC. Reverting changes.
Training on augumented user 63585 31/50 current_auc = 0.7592592592592593
User 63585 AUC after training: 0.7592592592592593
User 63585 does not improve AUC. Reverting changes.
Training on augumented user 17438 32/50 current_auc = 0.7592592592592593
User 17438 AUC after training: 0.7592592592592593
User 17438 does not improve AUC. Reverting changes.
Training on augumented user 70888 33/50 current_auc = 0.7592592592592593
User 70888 AUC after training: 0.7592592592592593
User 70888 does not improve AUC. Reverting changes.
Training on augumented user 26619 34/50 current_auc = 0.7592592592592593
User 26619 AUC after training: 0.7592592592592593
User 26619 does not improve AUC. Reverting changes.
Training on augumented user 64305 35/50 current_auc = 0.7592592592592593
User 64305 AUC after training: 0.7592592592592593
User 64305 does not improve AUC. Reverting changes.
Training on augumented user 14662 36/50 current_auc = 0.7592592592592593
User 14662 AUC after training: 0.7592592592592593
User 14662 does not improve AUC. Reverting changes.
Training on augumented user 7809 37/50 current_auc = 0.7592592592592593
User 7809 AUC after training: 0.7592592592592593
User 7809 does not improve AUC. Reverting changes.
Training on augumented user 113168 38/50 current_auc = 0.7592592592592593
User 113168 AUC after training: 0.7592592592592593
User 113168 does not improve AUC. Reverting changes.
Training on augumented user 61880 39/50 current_auc = 0.7592592592592593
User 61880 AUC after training: 0.7592592592592593
User 61880 does not improve AUC. Reverting changes.
Training on augumented user 74258 40/50 current_auc = 0.7592592592592593
User 74258 AUC after training: 0.7592592592592593
User 74258 does not improve AUC. Reverting changes.
Training on augumented user 79806 41/50 current_auc = 0.7592592592592593
User 79806 AUC after training: 0.7592592592592593
User 79806 does not improve AUC. Reverting changes.
Training on augumented user 102851 42/50 current_auc = 0.7592592592592593
User 102851 AUC after training: 0.7592592592592593
User 102851 does not improve AUC. Reverting changes.
Training on augumented user 18125 43/50 current_auc = 0.7592592592592593
User 18125 AUC after training: 0.7592592592592593
User 18125 does not improve AUC. Reverting changes.
Training on augumented user 124334 44/50 current_auc = 0.7592592592592593
User 124334 AUC after training: 0.7592592592592593
User 124334 does not improve AUC. Reverting changes.
Training on augumented user 83132 45/50 current_auc = 0.7592592592592593
User 83132 AUC after training: 0.7592592592592593
User 83132 does not improve AUC. Reverting changes.
Training on augumented user 117916 46/50 current_auc = 0.7592592592592593
User 117916 AUC after training: 0.7592592592592593
User 117916 does not improve AUC. Reverting changes.
Training on augumented user 10036 47/50 current_auc = 0.7592592592592593
User 10036 AUC after training: 0.7592592592592593
User 10036 does not improve AUC. Reverting changes.
Training on augumented user 105082 48/50 current_auc = 0.7592592592592593
User 105082 AUC after training: 0.7592592592592593
User 105082 does not improve AUC. Reverting changes.
Training on augumented user 41102 49/50 current_auc = 0.7592592592592593
User 41102 AUC after training: 0.7592592592592593
User 41102 does not improve AUC. Reverting changes.
[2024-12-02 18:27:10.308928] start test user 57978 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:10.830743] start test user 57978 91/568 recall augumented users by random, augumented_users = [33184, 58930, 58238, 118417, 54269, 118244, 102055, 134794, 81302, 96446, 34929, 87784, 42247, 90890, 102539, 27189, 31263, 9965, 62216, 20397, 1149, 112313, 134188, 106588, 107720, 116446, 86585, 6647, 102981, 1358, 21817, 55301, 54615, 67744, 2416, 114286, 62887, 22118, 18233, 85752, 31453, 126196, 6106, 92702, 40242, 120032, 31670, 113669, 85013, 68980]
[2024-12-02 18:27:10.847735] user = 57978 Cloud 91/568
[2024-12-02 18:27:10.858934] user = 57978 Local 91/568
[2024-12-02 18:27:10.924118] user = 57978 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:13.923730] user = 57978 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285714
Training on augumented user 33184 0/50 current_auc = 0.5714285714285714
User 33184 AUC after training: 0.5714285714285714
User 33184 does not improve AUC. Reverting changes.
Training on augumented user 58930 1/50 current_auc = 0.5714285714285714
User 58930 AUC after training: 0.5714285714285714
User 58930 does not improve AUC. Reverting changes.
Training on augumented user 58238 2/50 current_auc = 0.5714285714285714
User 58238 AUC after training: 0.5714285714285714
User 58238 does not improve AUC. Reverting changes.
Training on augumented user 118417 3/50 current_auc = 0.5714285714285714
User 118417 AUC after training: 0.5714285714285714
User 118417 does not improve AUC. Reverting changes.
Training on augumented user 54269 4/50 current_auc = 0.5714285714285714
User 54269 AUC after training: 0.5714285714285714
User 54269 does not improve AUC. Reverting changes.
Training on augumented user 118244 5/50 current_auc = 0.5714285714285714
User 118244 AUC after training: 0.5714285714285714
User 118244 does not improve AUC. Reverting changes.
Training on augumented user 102055 6/50 current_auc = 0.5714285714285714
User 102055 AUC after training: 0.5844155844155844
User 102055 improves AUC. Keeping the model.
Training on augumented user 134794 7/50 current_auc = 0.5844155844155844
User 134794 AUC after training: 0.5844155844155844
User 134794 does not improve AUC. Reverting changes.
Training on augumented user 81302 8/50 current_auc = 0.5844155844155844
User 81302 AUC after training: 0.5844155844155844
User 81302 does not improve AUC. Reverting changes.
Training on augumented user 96446 9/50 current_auc = 0.5844155844155844
User 96446 AUC after training: 0.577922077922078
User 96446 does not improve AUC. Reverting changes.
Training on augumented user 34929 10/50 current_auc = 0.5844155844155844
User 34929 AUC after training: 0.5844155844155844
User 34929 does not improve AUC. Reverting changes.
Training on augumented user 87784 11/50 current_auc = 0.5844155844155844
User 87784 AUC after training: 0.5844155844155844
User 87784 does not improve AUC. Reverting changes.
Training on augumented user 42247 12/50 current_auc = 0.5844155844155844
User 42247 AUC after training: 0.5844155844155844
User 42247 does not improve AUC. Reverting changes.
Training on augumented user 90890 13/50 current_auc = 0.5844155844155844
User 90890 AUC after training: 0.5844155844155844
User 90890 does not improve AUC. Reverting changes.
Training on augumented user 102539 14/50 current_auc = 0.5844155844155844
User 102539 AUC after training: 0.5844155844155844
User 102539 does not improve AUC. Reverting changes.
Training on augumented user 27189 15/50 current_auc = 0.5844155844155844
User 27189 AUC after training: 0.5714285714285714
User 27189 does not improve AUC. Reverting changes.
Training on augumented user 31263 16/50 current_auc = 0.5844155844155844
User 31263 AUC after training: 0.5844155844155844
User 31263 does not improve AUC. Reverting changes.
Training on augumented user 9965 17/50 current_auc = 0.5844155844155844
User 9965 AUC after training: 0.5844155844155844
User 9965 does not improve AUC. Reverting changes.
Training on augumented user 62216 18/50 current_auc = 0.5844155844155844
User 62216 AUC after training: 0.5844155844155844
User 62216 does not improve AUC. Reverting changes.
Training on augumented user 20397 19/50 current_auc = 0.5844155844155844
User 20397 AUC after training: 0.5844155844155844
User 20397 does not improve AUC. Reverting changes.
Training on augumented user 1149 20/50 current_auc = 0.5844155844155844
User 1149 AUC after training: 0.5844155844155844
User 1149 does not improve AUC. Reverting changes.
Training on augumented user 112313 21/50 current_auc = 0.5844155844155844
User 112313 AUC after training: 0.5844155844155844
User 112313 does not improve AUC. Reverting changes.
Training on augumented user 134188 22/50 current_auc = 0.5844155844155844
User 134188 AUC after training: 0.5844155844155844
User 134188 does not improve AUC. Reverting changes.
Training on augumented user 106588 23/50 current_auc = 0.5844155844155844
User 106588 AUC after training: 0.5844155844155844
User 106588 does not improve AUC. Reverting changes.
Training on augumented user 107720 24/50 current_auc = 0.5844155844155844
User 107720 AUC after training: 0.577922077922078
User 107720 does not improve AUC. Reverting changes.
Training on augumented user 116446 25/50 current_auc = 0.5844155844155844
User 116446 AUC after training: 0.577922077922078
User 116446 does not improve AUC. Reverting changes.
Training on augumented user 86585 26/50 current_auc = 0.5844155844155844
User 86585 AUC after training: 0.577922077922078
User 86585 does not improve AUC. Reverting changes.
Training on augumented user 6647 27/50 current_auc = 0.5844155844155844
User 6647 AUC after training: 0.577922077922078
User 6647 does not improve AUC. Reverting changes.
Training on augumented user 102981 28/50 current_auc = 0.5844155844155844
User 102981 AUC after training: 0.5909090909090908
User 102981 improves AUC. Keeping the model.
Training on augumented user 1358 29/50 current_auc = 0.5909090909090908
User 1358 AUC after training: 0.5844155844155844
User 1358 does not improve AUC. Reverting changes.
Training on augumented user 21817 30/50 current_auc = 0.5909090909090908
User 21817 AUC after training: 0.577922077922078
User 21817 does not improve AUC. Reverting changes.
Training on augumented user 55301 31/50 current_auc = 0.5909090909090908
User 55301 AUC after training: 0.5909090909090908
User 55301 does not improve AUC. Reverting changes.
Training on augumented user 54615 32/50 current_auc = 0.5909090909090908
User 54615 AUC after training: 0.5844155844155844
User 54615 does not improve AUC. Reverting changes.
Training on augumented user 67744 33/50 current_auc = 0.5909090909090908
User 67744 AUC after training: 0.5909090909090908
User 67744 does not improve AUC. Reverting changes.
Training on augumented user 2416 34/50 current_auc = 0.5909090909090908
User 2416 AUC after training: 0.5909090909090908
User 2416 does not improve AUC. Reverting changes.
Training on augumented user 114286 35/50 current_auc = 0.5909090909090908
User 114286 AUC after training: 0.5909090909090908
User 114286 does not improve AUC. Reverting changes.
Training on augumented user 62887 36/50 current_auc = 0.5909090909090908
User 62887 AUC after training: 0.5909090909090909
User 62887 improves AUC. Keeping the model.
Training on augumented user 22118 37/50 current_auc = 0.5909090909090909
User 22118 AUC after training: 0.5844155844155845
User 22118 does not improve AUC. Reverting changes.
Training on augumented user 18233 38/50 current_auc = 0.5909090909090909
User 18233 AUC after training: 0.5714285714285714
User 18233 does not improve AUC. Reverting changes.
Training on augumented user 85752 39/50 current_auc = 0.5909090909090909
User 85752 AUC after training: 0.577922077922078
User 85752 does not improve AUC. Reverting changes.
Training on augumented user 31453 40/50 current_auc = 0.5909090909090909
User 31453 AUC after training: 0.5909090909090909
User 31453 does not improve AUC. Reverting changes.
Training on augumented user 126196 41/50 current_auc = 0.5909090909090909
User 126196 AUC after training: 0.5974025974025974
User 126196 improves AUC. Keeping the model.
Training on augumented user 6106 42/50 current_auc = 0.5974025974025974
User 6106 AUC after training: 0.5844155844155845
User 6106 does not improve AUC. Reverting changes.
Training on augumented user 92702 43/50 current_auc = 0.5974025974025974
User 92702 AUC after training: 0.5844155844155845
User 92702 does not improve AUC. Reverting changes.
Training on augumented user 40242 44/50 current_auc = 0.5974025974025974
User 40242 AUC after training: 0.5909090909090909
User 40242 does not improve AUC. Reverting changes.
Training on augumented user 120032 45/50 current_auc = 0.5974025974025974
User 120032 AUC after training: 0.5714285714285714
User 120032 does not improve AUC. Reverting changes.
Training on augumented user 31670 46/50 current_auc = 0.5974025974025974
User 31670 AUC after training: 0.5909090909090909
User 31670 does not improve AUC. Reverting changes.
Training on augumented user 113669 47/50 current_auc = 0.5974025974025974
User 113669 AUC after training: 0.5974025974025974
User 113669 does not improve AUC. Reverting changes.
Training on augumented user 85013 48/50 current_auc = 0.5974025974025974
User 85013 AUC after training: 0.5909090909090909
User 85013 does not improve AUC. Reverting changes.
Training on augumented user 68980 49/50 current_auc = 0.5974025974025974
User 68980 AUC after training: 0.5844155844155845
User 68980 does not improve AUC. Reverting changes.
[2024-12-02 18:27:44.827930] start test user 57984 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:45.375550] start test user 57984 92/568 recall augumented users by random, augumented_users = [102714, 98711, 97240, 51148, 70506, 123528, 10609, 13951, 6745, 79202, 23652, 48862, 22951, 124581, 119297, 68103, 125856, 87227, 106559, 65234, 101238, 129231, 38043, 132494, 122714, 39895, 63923, 90537, 7577, 23910, 116815, 40890, 14168, 133529, 133601, 131038, 28584, 117107, 78449, 57862, 126661, 30799, 128976, 137111, 80064, 72346, 80282, 11591, 134400, 133541]
[2024-12-02 18:27:45.403629] user = 57984 Cloud 92/568
[2024-12-02 18:27:45.427272] user = 57984 Local 92/568
[2024-12-02 18:27:45.481052] user = 57984 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:48.398003] user = 57984 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4666666666666667
Training on augumented user 102714 0/50 current_auc = 0.4666666666666667
User 102714 AUC after training: 0.4733333333333334
User 102714 improves AUC. Keeping the model.
Training on augumented user 98711 1/50 current_auc = 0.4733333333333334
User 98711 AUC after training: 0.4666666666666667
User 98711 does not improve AUC. Reverting changes.
Training on augumented user 97240 2/50 current_auc = 0.4733333333333334
User 97240 AUC after training: 0.4733333333333334
User 97240 does not improve AUC. Reverting changes.
Training on augumented user 51148 3/50 current_auc = 0.4733333333333334
User 51148 AUC after training: 0.4666666666666667
User 51148 does not improve AUC. Reverting changes.
Training on augumented user 70506 4/50 current_auc = 0.4733333333333334
User 70506 AUC after training: 0.4733333333333334
User 70506 does not improve AUC. Reverting changes.
Training on augumented user 123528 5/50 current_auc = 0.4733333333333334
User 123528 AUC after training: 0.4733333333333334
User 123528 does not improve AUC. Reverting changes.
Training on augumented user 10609 6/50 current_auc = 0.4733333333333334
User 10609 AUC after training: 0.4666666666666667
User 10609 does not improve AUC. Reverting changes.
Training on augumented user 13951 7/50 current_auc = 0.4733333333333334
User 13951 AUC after training: 0.4733333333333334
User 13951 does not improve AUC. Reverting changes.
Training on augumented user 6745 8/50 current_auc = 0.4733333333333334
User 6745 AUC after training: 0.4733333333333334
User 6745 does not improve AUC. Reverting changes.
Training on augumented user 79202 9/50 current_auc = 0.4733333333333334
User 79202 AUC after training: 0.4733333333333334
User 79202 does not improve AUC. Reverting changes.
Training on augumented user 23652 10/50 current_auc = 0.4733333333333334
User 23652 AUC after training: 0.4666666666666667
User 23652 does not improve AUC. Reverting changes.
Training on augumented user 48862 11/50 current_auc = 0.4733333333333334
User 48862 AUC after training: 0.4666666666666667
User 48862 does not improve AUC. Reverting changes.
Training on augumented user 22951 12/50 current_auc = 0.4733333333333334
User 22951 AUC after training: 0.4733333333333334
User 22951 does not improve AUC. Reverting changes.
Training on augumented user 124581 13/50 current_auc = 0.4733333333333334
User 124581 AUC after training: 0.4733333333333334
User 124581 does not improve AUC. Reverting changes.
Training on augumented user 119297 14/50 current_auc = 0.4733333333333334
User 119297 AUC after training: 0.4733333333333334
User 119297 does not improve AUC. Reverting changes.
Training on augumented user 68103 15/50 current_auc = 0.4733333333333334
User 68103 AUC after training: 0.4733333333333334
User 68103 does not improve AUC. Reverting changes.
Training on augumented user 125856 16/50 current_auc = 0.4733333333333334
User 125856 AUC after training: 0.4666666666666667
User 125856 does not improve AUC. Reverting changes.
Training on augumented user 87227 17/50 current_auc = 0.4733333333333334
User 87227 AUC after training: 0.4666666666666667
User 87227 does not improve AUC. Reverting changes.
Training on augumented user 106559 18/50 current_auc = 0.4733333333333334
User 106559 AUC after training: 0.4666666666666667
User 106559 does not improve AUC. Reverting changes.
Training on augumented user 65234 19/50 current_auc = 0.4733333333333334
User 65234 AUC after training: 0.4666666666666667
User 65234 does not improve AUC. Reverting changes.
Training on augumented user 101238 20/50 current_auc = 0.4733333333333334
User 101238 AUC after training: 0.4733333333333334
User 101238 does not improve AUC. Reverting changes.
Training on augumented user 129231 21/50 current_auc = 0.4733333333333334
User 129231 AUC after training: 0.4733333333333334
User 129231 does not improve AUC. Reverting changes.
Training on augumented user 38043 22/50 current_auc = 0.4733333333333334
User 38043 AUC after training: 0.4733333333333334
User 38043 does not improve AUC. Reverting changes.
Training on augumented user 132494 23/50 current_auc = 0.4733333333333334
User 132494 AUC after training: 0.46
User 132494 does not improve AUC. Reverting changes.
Training on augumented user 122714 24/50 current_auc = 0.4733333333333334
User 122714 AUC after training: 0.4666666666666667
User 122714 does not improve AUC. Reverting changes.
Training on augumented user 39895 25/50 current_auc = 0.4733333333333334
User 39895 AUC after training: 0.4666666666666667
User 39895 does not improve AUC. Reverting changes.
Training on augumented user 63923 26/50 current_auc = 0.4733333333333334
User 63923 AUC after training: 0.4733333333333334
User 63923 does not improve AUC. Reverting changes.
Training on augumented user 90537 27/50 current_auc = 0.4733333333333334
User 90537 AUC after training: 0.4666666666666667
User 90537 does not improve AUC. Reverting changes.
Training on augumented user 7577 28/50 current_auc = 0.4733333333333334
User 7577 AUC after training: 0.46
User 7577 does not improve AUC. Reverting changes.
Training on augumented user 23910 29/50 current_auc = 0.4733333333333334
User 23910 AUC after training: 0.4666666666666667
User 23910 does not improve AUC. Reverting changes.
Training on augumented user 116815 30/50 current_auc = 0.4733333333333334
User 116815 AUC after training: 0.4666666666666667
User 116815 does not improve AUC. Reverting changes.
Training on augumented user 40890 31/50 current_auc = 0.4733333333333334
User 40890 AUC after training: 0.4666666666666667
User 40890 does not improve AUC. Reverting changes.
Training on augumented user 14168 32/50 current_auc = 0.4733333333333334
User 14168 AUC after training: 0.4666666666666667
User 14168 does not improve AUC. Reverting changes.
Training on augumented user 133529 33/50 current_auc = 0.4733333333333334
User 133529 AUC after training: 0.4666666666666667
User 133529 does not improve AUC. Reverting changes.
Training on augumented user 133601 34/50 current_auc = 0.4733333333333334
User 133601 AUC after training: 0.46
User 133601 does not improve AUC. Reverting changes.
Training on augumented user 131038 35/50 current_auc = 0.4733333333333334
User 131038 AUC after training: 0.4666666666666667
User 131038 does not improve AUC. Reverting changes.
Training on augumented user 28584 36/50 current_auc = 0.4733333333333334
User 28584 AUC after training: 0.4733333333333334
User 28584 does not improve AUC. Reverting changes.
Training on augumented user 117107 37/50 current_auc = 0.4733333333333334
User 117107 AUC after training: 0.4666666666666667
User 117107 does not improve AUC. Reverting changes.
Training on augumented user 78449 38/50 current_auc = 0.4733333333333334
User 78449 AUC after training: 0.4666666666666667
User 78449 does not improve AUC. Reverting changes.
Training on augumented user 57862 39/50 current_auc = 0.4733333333333334
User 57862 AUC after training: 0.4733333333333334
User 57862 does not improve AUC. Reverting changes.
Training on augumented user 126661 40/50 current_auc = 0.4733333333333334
User 126661 AUC after training: 0.4733333333333334
User 126661 does not improve AUC. Reverting changes.
Training on augumented user 30799 41/50 current_auc = 0.4733333333333334
User 30799 AUC after training: 0.4666666666666667
User 30799 does not improve AUC. Reverting changes.
Training on augumented user 128976 42/50 current_auc = 0.4733333333333334
User 128976 AUC after training: 0.4733333333333334
User 128976 does not improve AUC. Reverting changes.
Training on augumented user 137111 43/50 current_auc = 0.4733333333333334
User 137111 AUC after training: 0.4733333333333334
User 137111 does not improve AUC. Reverting changes.
Training on augumented user 80064 44/50 current_auc = 0.4733333333333334
User 80064 AUC after training: 0.45999999999999996
User 80064 does not improve AUC. Reverting changes.
Training on augumented user 72346 45/50 current_auc = 0.4733333333333334
User 72346 AUC after training: 0.4733333333333334
User 72346 does not improve AUC. Reverting changes.
Training on augumented user 80282 46/50 current_auc = 0.4733333333333334
User 80282 AUC after training: 0.4733333333333334
User 80282 does not improve AUC. Reverting changes.
Training on augumented user 11591 47/50 current_auc = 0.4733333333333334
User 11591 AUC after training: 0.4666666666666667
User 11591 does not improve AUC. Reverting changes.
Training on augumented user 134400 48/50 current_auc = 0.4733333333333334
User 134400 AUC after training: 0.46
User 134400 does not improve AUC. Reverting changes.
Training on augumented user 133541 49/50 current_auc = 0.4733333333333334
User 133541 AUC after training: 0.4733333333333334
User 133541 does not improve AUC. Reverting changes.
[2024-12-02 18:28:18.790905] start test user 57995 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:19.275854] start test user 57995 93/568 recall augumented users by random, augumented_users = [41674, 44784, 31867, 93119, 56942, 20863, 99613, 33237, 87540, 37185, 132029, 59612, 36222, 56148, 64743, 104200, 41004, 72867, 31936, 125970, 116307, 125781, 14434, 59114, 58625, 55401, 21335, 111260, 98663, 121194, 102003, 22524, 2997, 75040, 95909, 14568, 76098, 79926, 65697, 124781, 84163, 106123, 49199, 53907, 135392, 53628, 105984, 100827, 136608, 22555]
[2024-12-02 18:28:19.291598] user = 57995 Cloud 93/568
[2024-12-02 18:28:19.301565] user = 57995 Local 93/568
[2024-12-02 18:28:19.390962] user = 57995 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:22.189810] user = 57995 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7608695652173914
Training on augumented user 41674 0/50 current_auc = 0.7608695652173914
User 41674 AUC after training: 0.7608695652173914
User 41674 does not improve AUC. Reverting changes.
Training on augumented user 44784 1/50 current_auc = 0.7608695652173914
User 44784 AUC after training: 0.7608695652173914
User 44784 does not improve AUC. Reverting changes.
Training on augumented user 31867 2/50 current_auc = 0.7608695652173914
User 31867 AUC after training: 0.7608695652173914
User 31867 does not improve AUC. Reverting changes.
Training on augumented user 93119 3/50 current_auc = 0.7608695652173914
User 93119 AUC after training: 0.7639751552795032
User 93119 improves AUC. Keeping the model.
Training on augumented user 56942 4/50 current_auc = 0.7639751552795032
User 56942 AUC after training: 0.7639751552795032
User 56942 does not improve AUC. Reverting changes.
Training on augumented user 20863 5/50 current_auc = 0.7639751552795032
User 20863 AUC after training: 0.7639751552795032
User 20863 does not improve AUC. Reverting changes.
Training on augumented user 99613 6/50 current_auc = 0.7639751552795032
User 99613 AUC after training: 0.7608695652173914
User 99613 does not improve AUC. Reverting changes.
Training on augumented user 33237 7/50 current_auc = 0.7639751552795032
User 33237 AUC after training: 0.767080745341615
User 33237 improves AUC. Keeping the model.
Training on augumented user 87540 8/50 current_auc = 0.767080745341615
User 87540 AUC after training: 0.767080745341615
User 87540 does not improve AUC. Reverting changes.
Training on augumented user 37185 9/50 current_auc = 0.767080745341615
User 37185 AUC after training: 0.767080745341615
User 37185 does not improve AUC. Reverting changes.
Training on augumented user 132029 10/50 current_auc = 0.767080745341615
User 132029 AUC after training: 0.767080745341615
User 132029 does not improve AUC. Reverting changes.
Training on augumented user 59612 11/50 current_auc = 0.767080745341615
User 59612 AUC after training: 0.767080745341615
User 59612 does not improve AUC. Reverting changes.
Training on augumented user 36222 12/50 current_auc = 0.767080745341615
User 36222 AUC after training: 0.767080745341615
User 36222 does not improve AUC. Reverting changes.
Training on augumented user 56148 13/50 current_auc = 0.767080745341615
User 56148 AUC after training: 0.767080745341615
User 56148 does not improve AUC. Reverting changes.
Training on augumented user 64743 14/50 current_auc = 0.767080745341615
User 64743 AUC after training: 0.767080745341615
User 64743 does not improve AUC. Reverting changes.
Training on augumented user 104200 15/50 current_auc = 0.767080745341615
User 104200 AUC after training: 0.767080745341615
User 104200 does not improve AUC. Reverting changes.
Training on augumented user 41004 16/50 current_auc = 0.767080745341615
User 41004 AUC after training: 0.767080745341615
User 41004 does not improve AUC. Reverting changes.
Training on augumented user 72867 17/50 current_auc = 0.767080745341615
User 72867 AUC after training: 0.7639751552795032
User 72867 does not improve AUC. Reverting changes.
Training on augumented user 31936 18/50 current_auc = 0.767080745341615
User 31936 AUC after training: 0.767080745341615
User 31936 does not improve AUC. Reverting changes.
Training on augumented user 125970 19/50 current_auc = 0.767080745341615
User 125970 AUC after training: 0.767080745341615
User 125970 does not improve AUC. Reverting changes.
Training on augumented user 116307 20/50 current_auc = 0.767080745341615
User 116307 AUC after training: 0.7639751552795032
User 116307 does not improve AUC. Reverting changes.
Training on augumented user 125781 21/50 current_auc = 0.767080745341615
User 125781 AUC after training: 0.767080745341615
User 125781 does not improve AUC. Reverting changes.
Training on augumented user 14434 22/50 current_auc = 0.767080745341615
User 14434 AUC after training: 0.767080745341615
User 14434 does not improve AUC. Reverting changes.
Training on augumented user 59114 23/50 current_auc = 0.767080745341615
User 59114 AUC after training: 0.767080745341615
User 59114 does not improve AUC. Reverting changes.
Training on augumented user 58625 24/50 current_auc = 0.767080745341615
User 58625 AUC after training: 0.767080745341615
User 58625 does not improve AUC. Reverting changes.
Training on augumented user 55401 25/50 current_auc = 0.767080745341615
User 55401 AUC after training: 0.767080745341615
User 55401 does not improve AUC. Reverting changes.
Training on augumented user 21335 26/50 current_auc = 0.767080745341615
User 21335 AUC after training: 0.767080745341615
User 21335 does not improve AUC. Reverting changes.
Training on augumented user 111260 27/50 current_auc = 0.767080745341615
User 111260 AUC after training: 0.767080745341615
User 111260 does not improve AUC. Reverting changes.
Training on augumented user 98663 28/50 current_auc = 0.767080745341615
User 98663 AUC after training: 0.767080745341615
User 98663 does not improve AUC. Reverting changes.
Training on augumented user 121194 29/50 current_auc = 0.767080745341615
User 121194 AUC after training: 0.767080745341615
User 121194 does not improve AUC. Reverting changes.
Training on augumented user 102003 30/50 current_auc = 0.767080745341615
User 102003 AUC after training: 0.7608695652173914
User 102003 does not improve AUC. Reverting changes.
Training on augumented user 22524 31/50 current_auc = 0.767080745341615
User 22524 AUC after training: 0.7639751552795031
User 22524 does not improve AUC. Reverting changes.
Training on augumented user 2997 32/50 current_auc = 0.767080745341615
User 2997 AUC after training: 0.7639751552795032
User 2997 does not improve AUC. Reverting changes.
Training on augumented user 75040 33/50 current_auc = 0.767080745341615
User 75040 AUC after training: 0.767080745341615
User 75040 does not improve AUC. Reverting changes.
Training on augumented user 95909 34/50 current_auc = 0.767080745341615
User 95909 AUC after training: 0.767080745341615
User 95909 does not improve AUC. Reverting changes.
Training on augumented user 14568 35/50 current_auc = 0.767080745341615
User 14568 AUC after training: 0.767080745341615
User 14568 does not improve AUC. Reverting changes.
Training on augumented user 76098 36/50 current_auc = 0.767080745341615
User 76098 AUC after training: 0.767080745341615
User 76098 does not improve AUC. Reverting changes.
Training on augumented user 79926 37/50 current_auc = 0.767080745341615
User 79926 AUC after training: 0.7639751552795032
User 79926 does not improve AUC. Reverting changes.
Training on augumented user 65697 38/50 current_auc = 0.767080745341615
User 65697 AUC after training: 0.767080745341615
User 65697 does not improve AUC. Reverting changes.
Training on augumented user 124781 39/50 current_auc = 0.767080745341615
User 124781 AUC after training: 0.7639751552795032
User 124781 does not improve AUC. Reverting changes.
Training on augumented user 84163 40/50 current_auc = 0.767080745341615
User 84163 AUC after training: 0.767080745341615
User 84163 does not improve AUC. Reverting changes.
Training on augumented user 106123 41/50 current_auc = 0.767080745341615
User 106123 AUC after training: 0.767080745341615
User 106123 does not improve AUC. Reverting changes.
Training on augumented user 49199 42/50 current_auc = 0.767080745341615
User 49199 AUC after training: 0.767080745341615
User 49199 does not improve AUC. Reverting changes.
Training on augumented user 53907 43/50 current_auc = 0.767080745341615
User 53907 AUC after training: 0.767080745341615
User 53907 does not improve AUC. Reverting changes.
Training on augumented user 135392 44/50 current_auc = 0.767080745341615
User 135392 AUC after training: 0.767080745341615
User 135392 does not improve AUC. Reverting changes.
Training on augumented user 53628 45/50 current_auc = 0.767080745341615
User 53628 AUC after training: 0.7639751552795032
User 53628 does not improve AUC. Reverting changes.
Training on augumented user 105984 46/50 current_auc = 0.767080745341615
User 105984 AUC after training: 0.7639751552795032
User 105984 does not improve AUC. Reverting changes.
Training on augumented user 100827 47/50 current_auc = 0.767080745341615
User 100827 AUC after training: 0.767080745341615
User 100827 does not improve AUC. Reverting changes.
Training on augumented user 136608 48/50 current_auc = 0.767080745341615
User 136608 AUC after training: 0.767080745341615
User 136608 does not improve AUC. Reverting changes.
Training on augumented user 22555 49/50 current_auc = 0.767080745341615
User 22555 AUC after training: 0.767080745341615
User 22555 does not improve AUC. Reverting changes.
[2024-12-02 18:28:53.812992] start test user 58021 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:54.759516] start test user 58021 94/568 recall augumented users by random, augumented_users = [112338, 46052, 80272, 3351, 17138, 91782, 50629, 138322, 50719, 122274, 74506, 92791, 94503, 43328, 67871, 126518, 36321, 80863, 46846, 49698, 83814, 56035, 58326, 4788, 15904, 76235, 82696, 27605, 113533, 113563, 69541, 70105, 82807, 105696, 112912, 2554, 111985, 27390, 132018, 26305, 113905, 63280, 55412, 44675, 5014, 36249, 65050, 59534, 21193, 14432]
[2024-12-02 18:28:54.783477] user = 58021 Cloud 94/568
[2024-12-02 18:28:54.801286] user = 58021 Local 94/568
[2024-12-02 18:28:54.996731] user = 58021 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:57.608049] user = 58021 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5142857142857143
Training on augumented user 112338 0/50 current_auc = 0.5142857142857143
User 112338 AUC after training: 0.5095238095238095
User 112338 does not improve AUC. Reverting changes.
Training on augumented user 46052 1/50 current_auc = 0.5142857142857143
User 46052 AUC after training: 0.5142857142857143
User 46052 does not improve AUC. Reverting changes.
Training on augumented user 80272 2/50 current_auc = 0.5142857142857143
User 80272 AUC after training: 0.5190476190476191
User 80272 improves AUC. Keeping the model.
Training on augumented user 3351 3/50 current_auc = 0.5190476190476191
User 3351 AUC after training: 0.5190476190476191
User 3351 does not improve AUC. Reverting changes.
Training on augumented user 17138 4/50 current_auc = 0.5190476190476191
User 17138 AUC after training: 0.5142857142857143
User 17138 does not improve AUC. Reverting changes.
Training on augumented user 91782 5/50 current_auc = 0.5190476190476191
User 91782 AUC after training: 0.5142857142857143
User 91782 does not improve AUC. Reverting changes.
Training on augumented user 50629 6/50 current_auc = 0.5190476190476191
User 50629 AUC after training: 0.5142857142857143
User 50629 does not improve AUC. Reverting changes.
Training on augumented user 138322 7/50 current_auc = 0.5190476190476191
User 138322 AUC after training: 0.5142857142857143
User 138322 does not improve AUC. Reverting changes.
Training on augumented user 50719 8/50 current_auc = 0.5190476190476191
User 50719 AUC after training: 0.5142857142857143
User 50719 does not improve AUC. Reverting changes.
Training on augumented user 122274 9/50 current_auc = 0.5190476190476191
User 122274 AUC after training: 0.5190476190476191
User 122274 does not improve AUC. Reverting changes.
Training on augumented user 74506 10/50 current_auc = 0.5190476190476191
User 74506 AUC after training: 0.5142857142857143
User 74506 does not improve AUC. Reverting changes.
Training on augumented user 92791 11/50 current_auc = 0.5190476190476191
User 92791 AUC after training: 0.5142857142857143
User 92791 does not improve AUC. Reverting changes.
Training on augumented user 94503 12/50 current_auc = 0.5190476190476191
User 94503 AUC after training: 0.5190476190476191
User 94503 does not improve AUC. Reverting changes.
Training on augumented user 43328 13/50 current_auc = 0.5190476190476191
User 43328 AUC after training: 0.5142857142857143
User 43328 does not improve AUC. Reverting changes.
Training on augumented user 67871 14/50 current_auc = 0.5190476190476191
User 67871 AUC after training: 0.5142857142857143
User 67871 does not improve AUC. Reverting changes.
Training on augumented user 126518 15/50 current_auc = 0.5190476190476191
User 126518 AUC after training: 0.5190476190476191
User 126518 does not improve AUC. Reverting changes.
Training on augumented user 36321 16/50 current_auc = 0.5190476190476191
User 36321 AUC after training: 0.5142857142857143
User 36321 does not improve AUC. Reverting changes.
Training on augumented user 80863 17/50 current_auc = 0.5190476190476191
User 80863 AUC after training: 0.5142857142857143
User 80863 does not improve AUC. Reverting changes.
Training on augumented user 46846 18/50 current_auc = 0.5190476190476191
User 46846 AUC after training: 0.5190476190476191
User 46846 does not improve AUC. Reverting changes.
Training on augumented user 49698 19/50 current_auc = 0.5190476190476191
User 49698 AUC after training: 0.5190476190476191
User 49698 does not improve AUC. Reverting changes.
Training on augumented user 83814 20/50 current_auc = 0.5190476190476191
User 83814 AUC after training: 0.5190476190476191
User 83814 does not improve AUC. Reverting changes.
Training on augumented user 56035 21/50 current_auc = 0.5190476190476191
User 56035 AUC after training: 0.5142857142857143
User 56035 does not improve AUC. Reverting changes.
Training on augumented user 58326 22/50 current_auc = 0.5190476190476191
User 58326 AUC after training: 0.5142857142857142
User 58326 does not improve AUC. Reverting changes.
Training on augumented user 4788 23/50 current_auc = 0.5190476190476191
User 4788 AUC after training: 0.5190476190476191
User 4788 does not improve AUC. Reverting changes.
Training on augumented user 15904 24/50 current_auc = 0.5190476190476191
User 15904 AUC after training: 0.5142857142857143
User 15904 does not improve AUC. Reverting changes.
Training on augumented user 76235 25/50 current_auc = 0.5190476190476191
User 76235 AUC after training: 0.5190476190476191
User 76235 does not improve AUC. Reverting changes.
Training on augumented user 82696 26/50 current_auc = 0.5190476190476191
User 82696 AUC after training: 0.5142857142857142
User 82696 does not improve AUC. Reverting changes.
Training on augumented user 27605 27/50 current_auc = 0.5190476190476191
User 27605 AUC after training: 0.5142857142857143
User 27605 does not improve AUC. Reverting changes.
Training on augumented user 113533 28/50 current_auc = 0.5190476190476191
User 113533 AUC after training: 0.5142857142857143
User 113533 does not improve AUC. Reverting changes.
Training on augumented user 113563 29/50 current_auc = 0.5190476190476191
User 113563 AUC after training: 0.5142857142857143
User 113563 does not improve AUC. Reverting changes.
Training on augumented user 69541 30/50 current_auc = 0.5190476190476191
User 69541 AUC after training: 0.5142857142857143
User 69541 does not improve AUC. Reverting changes.
Training on augumented user 70105 31/50 current_auc = 0.5190476190476191
User 70105 AUC after training: 0.5142857142857143
User 70105 does not improve AUC. Reverting changes.
Training on augumented user 82807 32/50 current_auc = 0.5190476190476191
User 82807 AUC after training: 0.5142857142857143
User 82807 does not improve AUC. Reverting changes.
Training on augumented user 105696 33/50 current_auc = 0.5190476190476191
User 105696 AUC after training: 0.5190476190476191
User 105696 does not improve AUC. Reverting changes.
Training on augumented user 112912 34/50 current_auc = 0.5190476190476191
User 112912 AUC after training: 0.5142857142857143
User 112912 does not improve AUC. Reverting changes.
Training on augumented user 2554 35/50 current_auc = 0.5190476190476191
User 2554 AUC after training: 0.5190476190476191
User 2554 does not improve AUC. Reverting changes.
Training on augumented user 111985 36/50 current_auc = 0.5190476190476191
User 111985 AUC after training: 0.5190476190476191
User 111985 does not improve AUC. Reverting changes.
Training on augumented user 27390 37/50 current_auc = 0.5190476190476191
User 27390 AUC after training: 0.5142857142857143
User 27390 does not improve AUC. Reverting changes.
Training on augumented user 132018 38/50 current_auc = 0.5190476190476191
User 132018 AUC after training: 0.5190476190476191
User 132018 does not improve AUC. Reverting changes.
Training on augumented user 26305 39/50 current_auc = 0.5190476190476191
User 26305 AUC after training: 0.5190476190476191
User 26305 does not improve AUC. Reverting changes.
Training on augumented user 113905 40/50 current_auc = 0.5190476190476191
User 113905 AUC after training: 0.5190476190476191
User 113905 does not improve AUC. Reverting changes.
Training on augumented user 63280 41/50 current_auc = 0.5190476190476191
User 63280 AUC after training: 0.5190476190476191
User 63280 does not improve AUC. Reverting changes.
Training on augumented user 55412 42/50 current_auc = 0.5190476190476191
User 55412 AUC after training: 0.5142857142857143
User 55412 does not improve AUC. Reverting changes.
Training on augumented user 44675 43/50 current_auc = 0.5190476190476191
User 44675 AUC after training: 0.5142857142857143
User 44675 does not improve AUC. Reverting changes.
Training on augumented user 5014 44/50 current_auc = 0.5190476190476191
User 5014 AUC after training: 0.5142857142857143
User 5014 does not improve AUC. Reverting changes.
Training on augumented user 36249 45/50 current_auc = 0.5190476190476191
User 36249 AUC after training: 0.5142857142857143
User 36249 does not improve AUC. Reverting changes.
Training on augumented user 65050 46/50 current_auc = 0.5190476190476191
User 65050 AUC after training: 0.5190476190476191
User 65050 does not improve AUC. Reverting changes.
Training on augumented user 59534 47/50 current_auc = 0.5190476190476191
User 59534 AUC after training: 0.5142857142857143
User 59534 does not improve AUC. Reverting changes.
Training on augumented user 21193 48/50 current_auc = 0.5190476190476191
User 21193 AUC after training: 0.5190476190476191
User 21193 does not improve AUC. Reverting changes.
Training on augumented user 14432 49/50 current_auc = 0.5190476190476191
User 14432 AUC after training: 0.5142857142857143
User 14432 does not improve AUC. Reverting changes.
[2024-12-02 18:29:24.264502] start test user 58069 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:24.750832] start test user 58069 95/568 recall augumented users by random, augumented_users = [116588, 10241, 79590, 100588, 92847, 135466, 68519, 80764, 64386, 117800, 94624, 20366, 1579, 99843, 101574, 51257, 113504, 130112, 69590, 75130, 109800, 37910, 108919, 112140, 136178, 93959, 127853, 82875, 20119, 6757, 125514, 130001, 127310, 112496, 108630, 129274, 71482, 132588, 132808, 31509, 46243, 106992, 5657, 132861, 34455, 89737, 110670, 125972, 119475, 40219]
[2024-12-02 18:29:24.770426] user = 58069 Cloud 95/568
[2024-12-02 18:29:24.847419] user = 58069 Local 95/568
[2024-12-02 18:29:25.122688] user = 58069 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:27.850303] user = 58069 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7220032825053914
Training on augumented user 116588 0/50 current_auc = 0.7220032825053914
User 116588 AUC after training: 0.722084390923491
User 116588 improves AUC. Keeping the model.
Training on augumented user 10241 1/50 current_auc = 0.722084390923491
User 10241 AUC after training: 0.7218601500028627
User 10241 does not improve AUC. Reverting changes.
Training on augumented user 79590 2/50 current_auc = 0.722084390923491
User 79590 AUC after training: 0.7221893547586785
User 79590 improves AUC. Keeping the model.
Training on augumented user 100588 3/50 current_auc = 0.7221893547586785
User 100588 AUC after training: 0.7221845836752611
User 100588 does not improve AUC. Reverting changes.
Training on augumented user 92847 4/50 current_auc = 0.7221893547586785
User 92847 AUC after training: 0.7219841981717207
User 92847 does not improve AUC. Reverting changes.
Training on augumented user 135466 5/50 current_auc = 0.7221893547586785
User 135466 AUC after training: 0.7220796198400733
User 135466 does not improve AUC. Reverting changes.
Training on augumented user 68519 6/50 current_auc = 0.7221893547586785
User 68519 AUC after training: 0.7222036680089314
User 68519 improves AUC. Keeping the model.
Training on augumented user 80764 7/50 current_auc = 0.7222036680089314
User 80764 AUC after training: 0.7220939330903261
User 80764 does not improve AUC. Reverting changes.
Training on augumented user 64386 8/50 current_auc = 0.7222036680089314
User 64386 AUC after training: 0.7222370655928548
User 64386 improves AUC. Keeping the model.
Training on augumented user 117800 9/50 current_auc = 0.7222370655928548
User 117800 AUC after training: 0.7220414511727323
User 117800 does not improve AUC. Reverting changes.
Training on augumented user 94624 10/50 current_auc = 0.7222370655928548
User 94624 AUC after training: 0.7222370655928547
User 94624 does not improve AUC. Reverting changes.
Training on augumented user 20366 11/50 current_auc = 0.7222370655928548
User 20366 AUC after training: 0.7221559571747552
User 20366 does not improve AUC. Reverting changes.
Training on augumented user 1579 12/50 current_auc = 0.7222370655928548
User 1579 AUC after training: 0.7221750415084257
User 1579 does not improve AUC. Reverting changes.
Training on augumented user 99843 13/50 current_auc = 0.7222370655928548
User 99843 AUC after training: 0.7221225595908318
User 99843 does not improve AUC. Reverting changes.
Training on augumented user 101574 14/50 current_auc = 0.7222370655928548
User 101574 AUC after training: 0.7219985114219737
User 101574 does not improve AUC. Reverting changes.
Training on augumented user 51257 15/50 current_auc = 0.7222370655928548
User 51257 AUC after training: 0.7221511860913375
User 51257 does not improve AUC. Reverting changes.
Training on augumented user 113504 16/50 current_auc = 0.7222370655928548
User 113504 AUC after training: 0.7221559571747553
User 113504 does not improve AUC. Reverting changes.
Training on augumented user 130112 17/50 current_auc = 0.7222370655928548
User 130112 AUC after training: 0.7218458367526097
User 130112 does not improve AUC. Reverting changes.
Training on augumented user 69590 18/50 current_auc = 0.7222370655928548
User 69590 AUC after training: 0.7221798125918433
User 69590 does not improve AUC. Reverting changes.
Training on augumented user 75130 19/50 current_auc = 0.7222370655928548
User 75130 AUC after training: 0.7221941258420962
User 75130 does not improve AUC. Reverting changes.
Training on augumented user 109800 20/50 current_auc = 0.7222370655928548
User 109800 AUC after training: 0.7220748487566556
User 109800 does not improve AUC. Reverting changes.
Training on augumented user 37910 21/50 current_auc = 0.7222370655928548
User 37910 AUC after training: 0.7222036680089314
User 37910 does not improve AUC. Reverting changes.
Training on augumented user 108919 22/50 current_auc = 0.7222370655928548
User 108919 AUC after training: 0.7221511860913377
User 108919 does not improve AUC. Reverting changes.
Training on augumented user 112140 23/50 current_auc = 0.7222370655928548
User 112140 AUC after training: 0.7222704631767781
User 112140 improves AUC. Keeping the model.
Training on augumented user 136178 24/50 current_auc = 0.7222704631767781
User 136178 AUC after training: 0.7223706559285481
User 136178 improves AUC. Keeping the model.
Training on augumented user 93959 25/50 current_auc = 0.7223706559285481
User 93959 AUC after training: 0.7221798125918434
User 93959 does not improve AUC. Reverting changes.
Training on augumented user 127853 26/50 current_auc = 0.7223706559285481
User 127853 AUC after training: 0.7221559571747552
User 127853 does not improve AUC. Reverting changes.
Training on augumented user 82875 27/50 current_auc = 0.7223706559285481
User 82875 AUC after training: 0.722184583675261
User 82875 does not improve AUC. Reverting changes.
Training on augumented user 20119 28/50 current_auc = 0.7223706559285481
User 20119 AUC after training: 0.7221893547586785
User 20119 does not improve AUC. Reverting changes.
Training on augumented user 6757 29/50 current_auc = 0.7223706559285481
User 6757 AUC after training: 0.7223706559285482
User 6757 improves AUC. Keeping the model.
Training on augumented user 125514 30/50 current_auc = 0.7223706559285482
User 125514 AUC after training: 0.7219555716712152
User 125514 does not improve AUC. Reverting changes.
Training on augumented user 130001 31/50 current_auc = 0.7223706559285482
User 130001 AUC after training: 0.7224088245958892
User 130001 improves AUC. Keeping the model.
Training on augumented user 127310 32/50 current_auc = 0.7224088245958892
User 127310 AUC after training: 0.7224469932632301
User 127310 improves AUC. Keeping the model.
Training on augumented user 112496 33/50 current_auc = 0.7224469932632301
User 112496 AUC after training: 0.7224326800129772
User 112496 does not improve AUC. Reverting changes.
Training on augumented user 108630 34/50 current_auc = 0.7224469932632301
User 108630 AUC after training: 0.7226855474341113
User 108630 improves AUC. Keeping the model.
Training on augumented user 129274 35/50 current_auc = 0.7226855474341113
User 129274 AUC after training: 0.7226282944330998
User 129274 does not improve AUC. Reverting changes.
Training on augumented user 71482 36/50 current_auc = 0.7226855474341113
User 71482 AUC after training: 0.7226616920170232
User 71482 does not improve AUC. Reverting changes.
Training on augumented user 132588 37/50 current_auc = 0.7226855474341113
User 132588 AUC after training: 0.7226998606843642
User 132588 improves AUC. Keeping the model.
Training on augumented user 132808 38/50 current_auc = 0.7226998606843642
User 132808 AUC after training: 0.7227952823527166
User 132808 improves AUC. Keeping the model.
Training on augumented user 31509 39/50 current_auc = 0.7227952823527166
User 31509 AUC after training: 0.7225281016813297
User 31509 does not improve AUC. Reverting changes.
Training on augumented user 46243 40/50 current_auc = 0.7227952823527166
User 46243 AUC after training: 0.722952728105498
User 46243 improves AUC. Keeping the model.
Training on augumented user 106992 41/50 current_auc = 0.722952728105498
User 106992 AUC after training: 0.723067234107521
User 106992 improves AUC. Keeping the model.
Training on augumented user 5657 42/50 current_auc = 0.723067234107521
User 5657 AUC after training: 0.7230433786904331
User 5657 does not improve AUC. Reverting changes.
Training on augumented user 132861 43/50 current_auc = 0.723067234107521
User 132861 AUC after training: 0.722990896772839
User 132861 does not improve AUC. Reverting changes.
Training on augumented user 34455 44/50 current_auc = 0.723067234107521
User 34455 AUC after training: 0.7229527281054983
User 34455 does not improve AUC. Reverting changes.
Training on augumented user 89737 45/50 current_auc = 0.723067234107521
User 89737 AUC after training: 0.7230290654401801
User 89737 does not improve AUC. Reverting changes.
Training on augumented user 110670 46/50 current_auc = 0.723067234107521
User 110670 AUC after training: 0.7226712341838585
User 110670 does not improve AUC. Reverting changes.
Training on augumented user 125972 47/50 current_auc = 0.723067234107521
User 125972 AUC after training: 0.7222800053436134
User 125972 does not improve AUC. Reverting changes.
Training on augumented user 119475 48/50 current_auc = 0.723067234107521
User 119475 AUC after training: 0.7230386076070153
User 119475 does not improve AUC. Reverting changes.
Training on augumented user 40219 49/50 current_auc = 0.723067234107521
User 40219 AUC after training: 0.7229670413557512
User 40219 does not improve AUC. Reverting changes.
[2024-12-02 18:29:58.867349] start test user 58125 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:59.526337] start test user 58125 96/568 recall augumented users by random, augumented_users = [62840, 68145, 50151, 120839, 79472, 87938, 124382, 23760, 84394, 58197, 819, 27316, 120362, 47156, 94382, 7469, 44902, 49905, 32032, 62866, 123502, 109596, 114019, 98560, 83639, 134243, 78914, 104999, 62104, 24246, 104522, 122856, 36216, 21968, 27543, 129612, 120521, 110789, 93787, 45132, 109896, 68951, 65618, 134128, 94606, 85680, 132050, 75440, 43346, 37731]
[2024-12-02 18:29:59.539955] user = 58125 Cloud 96/568
[2024-12-02 18:29:59.556202] user = 58125 Local 96/568
[2024-12-02 18:29:59.633669] user = 58125 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:02.264426] user = 58125 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 62840 0/50 current_auc = 0.5
User 62840 AUC after training: 0.5
User 62840 does not improve AUC. Reverting changes.
Training on augumented user 68145 1/50 current_auc = 0.5
User 68145 AUC after training: 0.5
User 68145 does not improve AUC. Reverting changes.
Training on augumented user 50151 2/50 current_auc = 0.5
User 50151 AUC after training: 0.5
User 50151 does not improve AUC. Reverting changes.
Training on augumented user 120839 3/50 current_auc = 0.5
User 120839 AUC after training: 0.41666666666666663
User 120839 does not improve AUC. Reverting changes.
Training on augumented user 79472 4/50 current_auc = 0.5
User 79472 AUC after training: 0.5
User 79472 does not improve AUC. Reverting changes.
Training on augumented user 87938 5/50 current_auc = 0.5
User 87938 AUC after training: 0.41666666666666663
User 87938 does not improve AUC. Reverting changes.
Training on augumented user 124382 6/50 current_auc = 0.5
User 124382 AUC after training: 0.41666666666666663
User 124382 does not improve AUC. Reverting changes.
Training on augumented user 23760 7/50 current_auc = 0.5
User 23760 AUC after training: 0.5
User 23760 does not improve AUC. Reverting changes.
Training on augumented user 84394 8/50 current_auc = 0.5
User 84394 AUC after training: 0.41666666666666663
User 84394 does not improve AUC. Reverting changes.
Training on augumented user 58197 9/50 current_auc = 0.5
User 58197 AUC after training: 0.5
User 58197 does not improve AUC. Reverting changes.
Training on augumented user 819 10/50 current_auc = 0.5
User 819 AUC after training: 0.41666666666666663
User 819 does not improve AUC. Reverting changes.
Training on augumented user 27316 11/50 current_auc = 0.5
User 27316 AUC after training: 0.41666666666666663
User 27316 does not improve AUC. Reverting changes.
Training on augumented user 120362 12/50 current_auc = 0.5
User 120362 AUC after training: 0.41666666666666663
User 120362 does not improve AUC. Reverting changes.
Training on augumented user 47156 13/50 current_auc = 0.5
User 47156 AUC after training: 0.5
User 47156 does not improve AUC. Reverting changes.
Training on augumented user 94382 14/50 current_auc = 0.5
User 94382 AUC after training: 0.5
User 94382 does not improve AUC. Reverting changes.
Training on augumented user 7469 15/50 current_auc = 0.5
User 7469 AUC after training: 0.5
User 7469 does not improve AUC. Reverting changes.
Training on augumented user 44902 16/50 current_auc = 0.5
User 44902 AUC after training: 0.5
User 44902 does not improve AUC. Reverting changes.
Training on augumented user 49905 17/50 current_auc = 0.5
User 49905 AUC after training: 0.5
User 49905 does not improve AUC. Reverting changes.
Training on augumented user 32032 18/50 current_auc = 0.5
User 32032 AUC after training: 0.41666666666666663
User 32032 does not improve AUC. Reverting changes.
Training on augumented user 62866 19/50 current_auc = 0.5
User 62866 AUC after training: 0.41666666666666663
User 62866 does not improve AUC. Reverting changes.
Training on augumented user 123502 20/50 current_auc = 0.5
User 123502 AUC after training: 0.5
User 123502 does not improve AUC. Reverting changes.
Training on augumented user 109596 21/50 current_auc = 0.5
User 109596 AUC after training: 0.5
User 109596 does not improve AUC. Reverting changes.
Training on augumented user 114019 22/50 current_auc = 0.5
User 114019 AUC after training: 0.41666666666666663
User 114019 does not improve AUC. Reverting changes.
Training on augumented user 98560 23/50 current_auc = 0.5
User 98560 AUC after training: 0.5
User 98560 does not improve AUC. Reverting changes.
Training on augumented user 83639 24/50 current_auc = 0.5
User 83639 AUC after training: 0.5
User 83639 does not improve AUC. Reverting changes.
Training on augumented user 134243 25/50 current_auc = 0.5
User 134243 AUC after training: 0.5
User 134243 does not improve AUC. Reverting changes.
Training on augumented user 78914 26/50 current_auc = 0.5
User 78914 AUC after training: 0.5
User 78914 does not improve AUC. Reverting changes.
Training on augumented user 104999 27/50 current_auc = 0.5
User 104999 AUC after training: 0.41666666666666663
User 104999 does not improve AUC. Reverting changes.
Training on augumented user 62104 28/50 current_auc = 0.5
User 62104 AUC after training: 0.41666666666666663
User 62104 does not improve AUC. Reverting changes.
Training on augumented user 24246 29/50 current_auc = 0.5
User 24246 AUC after training: 0.41666666666666663
User 24246 does not improve AUC. Reverting changes.
Training on augumented user 104522 30/50 current_auc = 0.5
User 104522 AUC after training: 0.5
User 104522 does not improve AUC. Reverting changes.
Training on augumented user 122856 31/50 current_auc = 0.5
User 122856 AUC after training: 0.5
User 122856 does not improve AUC. Reverting changes.
Training on augumented user 36216 32/50 current_auc = 0.5
User 36216 AUC after training: 0.5
User 36216 does not improve AUC. Reverting changes.
Training on augumented user 21968 33/50 current_auc = 0.5
User 21968 AUC after training: 0.41666666666666663
User 21968 does not improve AUC. Reverting changes.
Training on augumented user 27543 34/50 current_auc = 0.5
User 27543 AUC after training: 0.5
User 27543 does not improve AUC. Reverting changes.
Training on augumented user 129612 35/50 current_auc = 0.5
User 129612 AUC after training: 0.41666666666666663
User 129612 does not improve AUC. Reverting changes.
Training on augumented user 120521 36/50 current_auc = 0.5
User 120521 AUC after training: 0.41666666666666663
User 120521 does not improve AUC. Reverting changes.
Training on augumented user 110789 37/50 current_auc = 0.5
User 110789 AUC after training: 0.41666666666666663
User 110789 does not improve AUC. Reverting changes.
Training on augumented user 93787 38/50 current_auc = 0.5
User 93787 AUC after training: 0.5
User 93787 does not improve AUC. Reverting changes.
Training on augumented user 45132 39/50 current_auc = 0.5
User 45132 AUC after training: 0.5
User 45132 does not improve AUC. Reverting changes.
Training on augumented user 109896 40/50 current_auc = 0.5
User 109896 AUC after training: 0.41666666666666663
User 109896 does not improve AUC. Reverting changes.
Training on augumented user 68951 41/50 current_auc = 0.5
User 68951 AUC after training: 0.41666666666666663
User 68951 does not improve AUC. Reverting changes.
Training on augumented user 65618 42/50 current_auc = 0.5
User 65618 AUC after training: 0.41666666666666663
User 65618 does not improve AUC. Reverting changes.
Training on augumented user 134128 43/50 current_auc = 0.5
User 134128 AUC after training: 0.5
User 134128 does not improve AUC. Reverting changes.
Training on augumented user 94606 44/50 current_auc = 0.5
User 94606 AUC after training: 0.41666666666666663
User 94606 does not improve AUC. Reverting changes.
Training on augumented user 85680 45/50 current_auc = 0.5
User 85680 AUC after training: 0.41666666666666663
User 85680 does not improve AUC. Reverting changes.
Training on augumented user 132050 46/50 current_auc = 0.5
User 132050 AUC after training: 0.41666666666666663
User 132050 does not improve AUC. Reverting changes.
Training on augumented user 75440 47/50 current_auc = 0.5
User 75440 AUC after training: 0.5
User 75440 does not improve AUC. Reverting changes.
Training on augumented user 43346 48/50 current_auc = 0.5
User 43346 AUC after training: 0.41666666666666663
User 43346 does not improve AUC. Reverting changes.
Training on augumented user 37731 49/50 current_auc = 0.5
User 37731 AUC after training: 0.41666666666666663
User 37731 does not improve AUC. Reverting changes.
[2024-12-02 18:30:34.240781] start test user 58156 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:34.851982] start test user 58156 97/568 recall augumented users by random, augumented_users = [101106, 50575, 98454, 58101, 103456, 4256, 120497, 128025, 123219, 69221, 106947, 3941, 8822, 128406, 2778, 17756, 25943, 89207, 54758, 17805, 77272, 123715, 120951, 87531, 121781, 8814, 70981, 65221, 132410, 127091, 113676, 39694, 95366, 112376, 28838, 15633, 107251, 15510, 21728, 129478, 100869, 88912, 137890, 18994, 25432, 88424, 98753, 62430, 30924, 77141]
[2024-12-02 18:30:34.869900] user = 58156 Cloud 97/568
[2024-12-02 18:30:34.881384] user = 58156 Local 97/568
[2024-12-02 18:30:34.943013] user = 58156 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:37.470613] user = 58156 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5851851851851853
Training on augumented user 101106 0/50 current_auc = 0.5851851851851853
User 101106 AUC after training: 0.5814814814814815
User 101106 does not improve AUC. Reverting changes.
Training on augumented user 50575 1/50 current_auc = 0.5851851851851853
User 50575 AUC after training: 0.5907407407407407
User 50575 improves AUC. Keeping the model.
Training on augumented user 98454 2/50 current_auc = 0.5907407407407407
User 98454 AUC after training: 0.5907407407407407
User 98454 does not improve AUC. Reverting changes.
Training on augumented user 58101 3/50 current_auc = 0.5907407407407407
User 58101 AUC after training: 0.5907407407407407
User 58101 does not improve AUC. Reverting changes.
Training on augumented user 103456 4/50 current_auc = 0.5907407407407407
User 103456 AUC after training: 0.5907407407407407
User 103456 does not improve AUC. Reverting changes.
Training on augumented user 4256 5/50 current_auc = 0.5907407407407407
User 4256 AUC after training: 0.5907407407407407
User 4256 does not improve AUC. Reverting changes.
Training on augumented user 120497 6/50 current_auc = 0.5907407407407407
User 120497 AUC after training: 0.5907407407407407
User 120497 does not improve AUC. Reverting changes.
Training on augumented user 128025 7/50 current_auc = 0.5907407407407407
User 128025 AUC after training: 0.5907407407407407
User 128025 does not improve AUC. Reverting changes.
Training on augumented user 123219 8/50 current_auc = 0.5907407407407407
User 123219 AUC after training: 0.5907407407407407
User 123219 does not improve AUC. Reverting changes.
Training on augumented user 69221 9/50 current_auc = 0.5907407407407407
User 69221 AUC after training: 0.5907407407407407
User 69221 does not improve AUC. Reverting changes.
Training on augumented user 106947 10/50 current_auc = 0.5907407407407407
User 106947 AUC after training: 0.587037037037037
User 106947 does not improve AUC. Reverting changes.
Training on augumented user 3941 11/50 current_auc = 0.5907407407407407
User 3941 AUC after training: 0.5907407407407407
User 3941 does not improve AUC. Reverting changes.
Training on augumented user 8822 12/50 current_auc = 0.5907407407407407
User 8822 AUC after training: 0.5907407407407407
User 8822 does not improve AUC. Reverting changes.
Training on augumented user 128406 13/50 current_auc = 0.5907407407407407
User 128406 AUC after training: 0.5907407407407407
User 128406 does not improve AUC. Reverting changes.
Training on augumented user 2778 14/50 current_auc = 0.5907407407407407
User 2778 AUC after training: 0.5907407407407407
User 2778 does not improve AUC. Reverting changes.
Training on augumented user 17756 15/50 current_auc = 0.5907407407407407
User 17756 AUC after training: 0.5907407407407407
User 17756 does not improve AUC. Reverting changes.
Training on augumented user 25943 16/50 current_auc = 0.5907407407407407
User 25943 AUC after training: 0.5907407407407407
User 25943 does not improve AUC. Reverting changes.
Training on augumented user 89207 17/50 current_auc = 0.5907407407407407
User 89207 AUC after training: 0.5907407407407407
User 89207 does not improve AUC. Reverting changes.
Training on augumented user 54758 18/50 current_auc = 0.5907407407407407
User 54758 AUC after training: 0.5907407407407407
User 54758 does not improve AUC. Reverting changes.
Training on augumented user 17805 19/50 current_auc = 0.5907407407407407
User 17805 AUC after training: 0.5907407407407407
User 17805 does not improve AUC. Reverting changes.
Training on augumented user 77272 20/50 current_auc = 0.5907407407407407
User 77272 AUC after training: 0.5907407407407407
User 77272 does not improve AUC. Reverting changes.
Training on augumented user 123715 21/50 current_auc = 0.5907407407407407
User 123715 AUC after training: 0.5907407407407407
User 123715 does not improve AUC. Reverting changes.
Training on augumented user 120951 22/50 current_auc = 0.5907407407407407
User 120951 AUC after training: 0.5907407407407407
User 120951 does not improve AUC. Reverting changes.
Training on augumented user 87531 23/50 current_auc = 0.5907407407407407
User 87531 AUC after training: 0.5907407407407407
User 87531 does not improve AUC. Reverting changes.
Training on augumented user 121781 24/50 current_auc = 0.5907407407407407
User 121781 AUC after training: 0.5907407407407407
User 121781 does not improve AUC. Reverting changes.
Training on augumented user 8814 25/50 current_auc = 0.5907407407407407
User 8814 AUC after training: 0.5907407407407407
User 8814 does not improve AUC. Reverting changes.
Training on augumented user 70981 26/50 current_auc = 0.5907407407407407
User 70981 AUC after training: 0.5907407407407407
User 70981 does not improve AUC. Reverting changes.
Training on augumented user 65221 27/50 current_auc = 0.5907407407407407
User 65221 AUC after training: 0.5962962962962963
User 65221 improves AUC. Keeping the model.
Training on augumented user 132410 28/50 current_auc = 0.5962962962962963
User 132410 AUC after training: 0.5962962962962963
User 132410 does not improve AUC. Reverting changes.
Training on augumented user 127091 29/50 current_auc = 0.5962962962962963
User 127091 AUC after training: 0.5925925925925926
User 127091 does not improve AUC. Reverting changes.
Training on augumented user 113676 30/50 current_auc = 0.5962962962962963
User 113676 AUC after training: 0.5962962962962963
User 113676 does not improve AUC. Reverting changes.
Training on augumented user 39694 31/50 current_auc = 0.5962962962962963
User 39694 AUC after training: 0.5962962962962963
User 39694 does not improve AUC. Reverting changes.
Training on augumented user 95366 32/50 current_auc = 0.5962962962962963
User 95366 AUC after training: 0.5962962962962963
User 95366 does not improve AUC. Reverting changes.
Training on augumented user 112376 33/50 current_auc = 0.5962962962962963
User 112376 AUC after training: 0.5925925925925926
User 112376 does not improve AUC. Reverting changes.
Training on augumented user 28838 34/50 current_auc = 0.5962962962962963
User 28838 AUC after training: 0.5962962962962963
User 28838 does not improve AUC. Reverting changes.
Training on augumented user 15633 35/50 current_auc = 0.5962962962962963
User 15633 AUC after training: 0.5925925925925926
User 15633 does not improve AUC. Reverting changes.
Training on augumented user 107251 36/50 current_auc = 0.5962962962962963
User 107251 AUC after training: 0.5962962962962963
User 107251 does not improve AUC. Reverting changes.
Training on augumented user 15510 37/50 current_auc = 0.5962962962962963
User 15510 AUC after training: 0.5925925925925926
User 15510 does not improve AUC. Reverting changes.
Training on augumented user 21728 38/50 current_auc = 0.5962962962962963
User 21728 AUC after training: 0.5962962962962963
User 21728 does not improve AUC. Reverting changes.
Training on augumented user 129478 39/50 current_auc = 0.5962962962962963
User 129478 AUC after training: 0.5962962962962963
User 129478 does not improve AUC. Reverting changes.
Training on augumented user 100869 40/50 current_auc = 0.5962962962962963
User 100869 AUC after training: 0.5962962962962963
User 100869 does not improve AUC. Reverting changes.
Training on augumented user 88912 41/50 current_auc = 0.5962962962962963
User 88912 AUC after training: 0.5962962962962963
User 88912 does not improve AUC. Reverting changes.
Training on augumented user 137890 42/50 current_auc = 0.5962962962962963
User 137890 AUC after training: 0.5962962962962963
User 137890 does not improve AUC. Reverting changes.
Training on augumented user 18994 43/50 current_auc = 0.5962962962962963
User 18994 AUC after training: 0.5962962962962963
User 18994 does not improve AUC. Reverting changes.
Training on augumented user 25432 44/50 current_auc = 0.5962962962962963
User 25432 AUC after training: 0.5925925925925926
User 25432 does not improve AUC. Reverting changes.
Training on augumented user 88424 45/50 current_auc = 0.5962962962962963
User 88424 AUC after training: 0.5851851851851853
User 88424 does not improve AUC. Reverting changes.
Training on augumented user 98753 46/50 current_auc = 0.5962962962962963
User 98753 AUC after training: 0.5814814814814815
User 98753 does not improve AUC. Reverting changes.
Training on augumented user 62430 47/50 current_auc = 0.5962962962962963
User 62430 AUC after training: 0.5888888888888889
User 62430 does not improve AUC. Reverting changes.
Training on augumented user 30924 48/50 current_auc = 0.5962962962962963
User 30924 AUC after training: 0.5962962962962963
User 30924 does not improve AUC. Reverting changes.
Training on augumented user 77141 49/50 current_auc = 0.5962962962962963
User 77141 AUC after training: 0.5851851851851851
User 77141 does not improve AUC. Reverting changes.
[2024-12-02 18:31:09.625045] start test user 58166 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:10.068595] start test user 58166 98/568 recall augumented users by random, augumented_users = [96583, 68490, 24234, 26622, 107481, 116482, 22878, 91174, 101078, 105422, 39205, 18601, 101692, 72641, 25971, 65236, 120463, 65472, 79126, 60757, 122913, 37000, 19008, 89006, 137651, 35077, 137674, 94384, 81241, 19427, 103045, 12821, 87133, 114226, 137013, 93173, 36550, 91724, 105909, 76547, 127112, 103218, 112582, 26222, 117448, 7524, 18604, 119637, 74127, 5982]
[2024-12-02 18:31:10.084228] user = 58166 Cloud 98/568
[2024-12-02 18:31:10.102712] user = 58166 Local 98/568
[2024-12-02 18:31:10.186474] user = 58166 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:12.606135] user = 58166 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6373888527434396
Training on augumented user 96583 0/50 current_auc = 0.6373888527434396
User 96583 AUC after training: 0.639340707004988
User 96583 improves AUC. Keeping the model.
Training on augumented user 68490 1/50 current_auc = 0.639340707004988
User 68490 AUC after training: 0.6386900889178053
User 68490 does not improve AUC. Reverting changes.
Training on augumented user 24234 2/50 current_auc = 0.639340707004988
User 24234 AUC after training: 0.6399913250921709
User 24234 improves AUC. Keeping the model.
Training on augumented user 26622 3/50 current_auc = 0.6399913250921709
User 26622 AUC after training: 0.6402081977878985
User 26622 improves AUC. Keeping the model.
Training on augumented user 107481 4/50 current_auc = 0.6402081977878985
User 107481 AUC after training: 0.63825634352635
User 107481 does not improve AUC. Reverting changes.
Training on augumented user 116482 5/50 current_auc = 0.6402081977878985
User 116482 AUC after training: 0.6406419431793537
User 116482 improves AUC. Keeping the model.
Training on augumented user 22878 6/50 current_auc = 0.6406419431793537
User 22878 AUC after training: 0.6404250704836262
User 22878 does not improve AUC. Reverting changes.
Training on augumented user 91174 7/50 current_auc = 0.6406419431793537
User 91174 AUC after training: 0.6406419431793537
User 91174 does not improve AUC. Reverting changes.
Training on augumented user 101078 8/50 current_auc = 0.6406419431793537
User 101078 AUC after training: 0.6404250704836261
User 101078 does not improve AUC. Reverting changes.
Training on augumented user 105422 9/50 current_auc = 0.6406419431793537
User 105422 AUC after training: 0.641075688570809
User 105422 improves AUC. Keeping the model.
Training on augumented user 39205 10/50 current_auc = 0.641075688570809
User 39205 AUC after training: 0.6402081977878985
User 39205 does not improve AUC. Reverting changes.
Training on augumented user 18601 11/50 current_auc = 0.641075688570809
User 18601 AUC after training: 0.6410756885708089
User 18601 does not improve AUC. Reverting changes.
Training on augumented user 101692 12/50 current_auc = 0.641075688570809
User 101692 AUC after training: 0.6408588158750813
User 101692 does not improve AUC. Reverting changes.
Training on augumented user 72641 13/50 current_auc = 0.641075688570809
User 72641 AUC after training: 0.6408588158750814
User 72641 does not improve AUC. Reverting changes.
Training on augumented user 25971 14/50 current_auc = 0.641075688570809
User 25971 AUC after training: 0.6393407070049881
User 25971 does not improve AUC. Reverting changes.
Training on augumented user 65236 15/50 current_auc = 0.641075688570809
User 65236 AUC after training: 0.6408588158750813
User 65236 does not improve AUC. Reverting changes.
Training on augumented user 120463 16/50 current_auc = 0.641075688570809
User 120463 AUC after training: 0.6408588158750813
User 120463 does not improve AUC. Reverting changes.
Training on augumented user 65472 17/50 current_auc = 0.641075688570809
User 65472 AUC after training: 0.6386900889178053
User 65472 does not improve AUC. Reverting changes.
Training on augumented user 79126 18/50 current_auc = 0.641075688570809
User 79126 AUC after training: 0.6399913250921709
User 79126 does not improve AUC. Reverting changes.
Training on augumented user 60757 19/50 current_auc = 0.641075688570809
User 60757 AUC after training: 0.641075688570809
User 60757 does not improve AUC. Reverting changes.
Training on augumented user 122913 20/50 current_auc = 0.641075688570809
User 122913 AUC after training: 0.6406419431793537
User 122913 does not improve AUC. Reverting changes.
Training on augumented user 37000 21/50 current_auc = 0.641075688570809
User 37000 AUC after training: 0.6408588158750813
User 37000 does not improve AUC. Reverting changes.
Training on augumented user 19008 22/50 current_auc = 0.641075688570809
User 19008 AUC after training: 0.6369551073519844
User 19008 does not improve AUC. Reverting changes.
Training on augumented user 89006 23/50 current_auc = 0.641075688570809
User 89006 AUC after training: 0.6423769247451746
User 89006 improves AUC. Keeping the model.
Training on augumented user 137651 24/50 current_auc = 0.6423769247451746
User 137651 AUC after training: 0.6423769247451747
User 137651 improves AUC. Keeping the model.
Training on augumented user 35077 25/50 current_auc = 0.6423769247451747
User 35077 AUC after training: 0.6417263066579919
User 35077 does not improve AUC. Reverting changes.
Training on augumented user 137674 26/50 current_auc = 0.6423769247451747
User 137674 AUC after training: 0.6419431793537195
User 137674 does not improve AUC. Reverting changes.
Training on augumented user 94384 27/50 current_auc = 0.6423769247451747
User 94384 AUC after training: 0.6406419431793537
User 94384 does not improve AUC. Reverting changes.
Training on augumented user 81241 28/50 current_auc = 0.6423769247451747
User 81241 AUC after training: 0.6412925612665366
User 81241 does not improve AUC. Reverting changes.
Training on augumented user 19427 29/50 current_auc = 0.6423769247451747
User 19427 AUC after training: 0.6417263066579918
User 19427 does not improve AUC. Reverting changes.
Training on augumented user 103045 30/50 current_auc = 0.6423769247451747
User 103045 AUC after training: 0.6417263066579918
User 103045 does not improve AUC. Reverting changes.
Training on augumented user 12821 31/50 current_auc = 0.6423769247451747
User 12821 AUC after training: 0.6417263066579918
User 12821 does not improve AUC. Reverting changes.
Training on augumented user 87133 32/50 current_auc = 0.6423769247451747
User 87133 AUC after training: 0.6419431793537194
User 87133 does not improve AUC. Reverting changes.
Training on augumented user 114226 33/50 current_auc = 0.6423769247451747
User 114226 AUC after training: 0.6419431793537194
User 114226 does not improve AUC. Reverting changes.
Training on augumented user 137013 34/50 current_auc = 0.6423769247451747
User 137013 AUC after training: 0.6412925612665366
User 137013 does not improve AUC. Reverting changes.
Training on augumented user 93173 35/50 current_auc = 0.6423769247451747
User 93173 AUC after training: 0.6412925612665366
User 93173 does not improve AUC. Reverting changes.
Training on augumented user 36550 36/50 current_auc = 0.6423769247451747
User 36550 AUC after training: 0.641075688570809
User 36550 does not improve AUC. Reverting changes.
Training on augumented user 91724 37/50 current_auc = 0.6423769247451747
User 91724 AUC after training: 0.642160052049447
User 91724 does not improve AUC. Reverting changes.
Training on augumented user 105909 38/50 current_auc = 0.6423769247451747
User 105909 AUC after training: 0.6419431793537195
User 105909 does not improve AUC. Reverting changes.
Training on augumented user 76547 39/50 current_auc = 0.6423769247451747
User 76547 AUC after training: 0.6419431793537195
User 76547 does not improve AUC. Reverting changes.
Training on augumented user 127112 40/50 current_auc = 0.6423769247451747
User 127112 AUC after training: 0.6419431793537195
User 127112 does not improve AUC. Reverting changes.
Training on augumented user 103218 41/50 current_auc = 0.6423769247451747
User 103218 AUC after training: 0.6421600520494469
User 103218 does not improve AUC. Reverting changes.
Training on augumented user 112582 42/50 current_auc = 0.6423769247451747
User 112582 AUC after training: 0.6415094339622642
User 112582 does not improve AUC. Reverting changes.
Training on augumented user 26222 43/50 current_auc = 0.6423769247451747
User 26222 AUC after training: 0.6380394708306225
User 26222 does not improve AUC. Reverting changes.
Training on augumented user 117448 44/50 current_auc = 0.6423769247451747
User 117448 AUC after training: 0.6408588158750814
User 117448 does not improve AUC. Reverting changes.
Training on augumented user 7524 45/50 current_auc = 0.6423769247451747
User 7524 AUC after training: 0.6419431793537194
User 7524 does not improve AUC. Reverting changes.
Training on augumented user 18604 46/50 current_auc = 0.6423769247451747
User 18604 AUC after training: 0.636087616569074
User 18604 does not improve AUC. Reverting changes.
Training on augumented user 119637 47/50 current_auc = 0.6423769247451747
User 119637 AUC after training: 0.6412925612665366
User 119637 does not improve AUC. Reverting changes.
Training on augumented user 74127 48/50 current_auc = 0.6423769247451747
User 74127 AUC after training: 0.6417263066579918
User 74127 does not improve AUC. Reverting changes.
Training on augumented user 5982 49/50 current_auc = 0.6423769247451747
User 5982 AUC after training: 0.6419431793537194
User 5982 does not improve AUC. Reverting changes.
[2024-12-02 18:31:41.015699] start test user 58296 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:41.452736] start test user 58296 99/568 recall augumented users by random, augumented_users = [129577, 127286, 121471, 87564, 6289, 9643, 17635, 28216, 118378, 113173, 111832, 118703, 110182, 134081, 126540, 33035, 6833, 102192, 128284, 26289, 36827, 71184, 79377, 40484, 84248, 7475, 25891, 11457, 27814, 59441, 127944, 25602, 14751, 29747, 120453, 7903, 31720, 62975, 114410, 25312, 102734, 51598, 16182, 1786, 109042, 88872, 68055, 2161, 12660, 86098]
[2024-12-02 18:31:41.467650] user = 58296 Cloud 99/568
[2024-12-02 18:31:41.478334] user = 58296 Local 99/568
[2024-12-02 18:31:41.543743] user = 58296 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:44.231252] user = 58296 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6933333333333334
Training on augumented user 129577 0/50 current_auc = 0.6933333333333334
User 129577 AUC after training: 0.6933333333333334
User 129577 does not improve AUC. Reverting changes.
Training on augumented user 127286 1/50 current_auc = 0.6933333333333334
User 127286 AUC after training: 0.6933333333333334
User 127286 does not improve AUC. Reverting changes.
Training on augumented user 121471 2/50 current_auc = 0.6933333333333334
User 121471 AUC after training: 0.6933333333333334
User 121471 does not improve AUC. Reverting changes.
Training on augumented user 87564 3/50 current_auc = 0.6933333333333334
User 87564 AUC after training: 0.6933333333333334
User 87564 does not improve AUC. Reverting changes.
Training on augumented user 6289 4/50 current_auc = 0.6933333333333334
User 6289 AUC after training: 0.6933333333333334
User 6289 does not improve AUC. Reverting changes.
Training on augumented user 9643 5/50 current_auc = 0.6933333333333334
User 9643 AUC after training: 0.6933333333333334
User 9643 does not improve AUC. Reverting changes.
Training on augumented user 17635 6/50 current_auc = 0.6933333333333334
User 17635 AUC after training: 0.6933333333333334
User 17635 does not improve AUC. Reverting changes.
Training on augumented user 28216 7/50 current_auc = 0.6933333333333334
User 28216 AUC after training: 0.6933333333333334
User 28216 does not improve AUC. Reverting changes.
Training on augumented user 118378 8/50 current_auc = 0.6933333333333334
User 118378 AUC after training: 0.6933333333333334
User 118378 does not improve AUC. Reverting changes.
Training on augumented user 113173 9/50 current_auc = 0.6933333333333334
User 113173 AUC after training: 0.6933333333333334
User 113173 does not improve AUC. Reverting changes.
Training on augumented user 111832 10/50 current_auc = 0.6933333333333334
User 111832 AUC after training: 0.6933333333333334
User 111832 does not improve AUC. Reverting changes.
Training on augumented user 118703 11/50 current_auc = 0.6933333333333334
User 118703 AUC after training: 0.6933333333333334
User 118703 does not improve AUC. Reverting changes.
Training on augumented user 110182 12/50 current_auc = 0.6933333333333334
User 110182 AUC after training: 0.6933333333333334
User 110182 does not improve AUC. Reverting changes.
Training on augumented user 134081 13/50 current_auc = 0.6933333333333334
User 134081 AUC after training: 0.6933333333333334
User 134081 does not improve AUC. Reverting changes.
Training on augumented user 126540 14/50 current_auc = 0.6933333333333334
User 126540 AUC after training: 0.6933333333333334
User 126540 does not improve AUC. Reverting changes.
Training on augumented user 33035 15/50 current_auc = 0.6933333333333334
User 33035 AUC after training: 0.6933333333333334
User 33035 does not improve AUC. Reverting changes.
Training on augumented user 6833 16/50 current_auc = 0.6933333333333334
User 6833 AUC after training: 0.6933333333333334
User 6833 does not improve AUC. Reverting changes.
Training on augumented user 102192 17/50 current_auc = 0.6933333333333334
User 102192 AUC after training: 0.6933333333333334
User 102192 does not improve AUC. Reverting changes.
Training on augumented user 128284 18/50 current_auc = 0.6933333333333334
User 128284 AUC after training: 0.6933333333333334
User 128284 does not improve AUC. Reverting changes.
Training on augumented user 26289 19/50 current_auc = 0.6933333333333334
User 26289 AUC after training: 0.6933333333333334
User 26289 does not improve AUC. Reverting changes.
Training on augumented user 36827 20/50 current_auc = 0.6933333333333334
User 36827 AUC after training: 0.6933333333333334
User 36827 does not improve AUC. Reverting changes.
Training on augumented user 71184 21/50 current_auc = 0.6933333333333334
User 71184 AUC after training: 0.6933333333333334
User 71184 does not improve AUC. Reverting changes.
Training on augumented user 79377 22/50 current_auc = 0.6933333333333334
User 79377 AUC after training: 0.6933333333333334
User 79377 does not improve AUC. Reverting changes.
Training on augumented user 40484 23/50 current_auc = 0.6933333333333334
User 40484 AUC after training: 0.6933333333333334
User 40484 does not improve AUC. Reverting changes.
Training on augumented user 84248 24/50 current_auc = 0.6933333333333334
User 84248 AUC after training: 0.6933333333333334
User 84248 does not improve AUC. Reverting changes.
Training on augumented user 7475 25/50 current_auc = 0.6933333333333334
User 7475 AUC after training: 0.6933333333333334
User 7475 does not improve AUC. Reverting changes.
Training on augumented user 25891 26/50 current_auc = 0.6933333333333334
User 25891 AUC after training: 0.6933333333333334
User 25891 does not improve AUC. Reverting changes.
Training on augumented user 11457 27/50 current_auc = 0.6933333333333334
User 11457 AUC after training: 0.6933333333333334
User 11457 does not improve AUC. Reverting changes.
Training on augumented user 27814 28/50 current_auc = 0.6933333333333334
User 27814 AUC after training: 0.6933333333333334
User 27814 does not improve AUC. Reverting changes.
Training on augumented user 59441 29/50 current_auc = 0.6933333333333334
User 59441 AUC after training: 0.6933333333333334
User 59441 does not improve AUC. Reverting changes.
Training on augumented user 127944 30/50 current_auc = 0.6933333333333334
User 127944 AUC after training: 0.6933333333333334
User 127944 does not improve AUC. Reverting changes.
Training on augumented user 25602 31/50 current_auc = 0.6933333333333334
User 25602 AUC after training: 0.6933333333333334
User 25602 does not improve AUC. Reverting changes.
Training on augumented user 14751 32/50 current_auc = 0.6933333333333334
User 14751 AUC after training: 0.6933333333333334
User 14751 does not improve AUC. Reverting changes.
Training on augumented user 29747 33/50 current_auc = 0.6933333333333334
User 29747 AUC after training: 0.6933333333333334
User 29747 does not improve AUC. Reverting changes.
Training on augumented user 120453 34/50 current_auc = 0.6933333333333334
User 120453 AUC after training: 0.6933333333333334
User 120453 does not improve AUC. Reverting changes.
Training on augumented user 7903 35/50 current_auc = 0.6933333333333334
User 7903 AUC after training: 0.6933333333333334
User 7903 does not improve AUC. Reverting changes.
Training on augumented user 31720 36/50 current_auc = 0.6933333333333334
User 31720 AUC after training: 0.6933333333333334
User 31720 does not improve AUC. Reverting changes.
Training on augumented user 62975 37/50 current_auc = 0.6933333333333334
User 62975 AUC after training: 0.6933333333333334
User 62975 does not improve AUC. Reverting changes.
Training on augumented user 114410 38/50 current_auc = 0.6933333333333334
User 114410 AUC after training: 0.6933333333333334
User 114410 does not improve AUC. Reverting changes.
Training on augumented user 25312 39/50 current_auc = 0.6933333333333334
User 25312 AUC after training: 0.6933333333333334
User 25312 does not improve AUC. Reverting changes.
Training on augumented user 102734 40/50 current_auc = 0.6933333333333334
User 102734 AUC after training: 0.6933333333333334
User 102734 does not improve AUC. Reverting changes.
Training on augumented user 51598 41/50 current_auc = 0.6933333333333334
User 51598 AUC after training: 0.6933333333333334
User 51598 does not improve AUC. Reverting changes.
Training on augumented user 16182 42/50 current_auc = 0.6933333333333334
User 16182 AUC after training: 0.6933333333333334
User 16182 does not improve AUC. Reverting changes.
Training on augumented user 1786 43/50 current_auc = 0.6933333333333334
User 1786 AUC after training: 0.6933333333333334
User 1786 does not improve AUC. Reverting changes.
Training on augumented user 109042 44/50 current_auc = 0.6933333333333334
User 109042 AUC after training: 0.6933333333333334
User 109042 does not improve AUC. Reverting changes.
Training on augumented user 88872 45/50 current_auc = 0.6933333333333334
User 88872 AUC after training: 0.6933333333333334
User 88872 does not improve AUC. Reverting changes.
Training on augumented user 68055 46/50 current_auc = 0.6933333333333334
User 68055 AUC after training: 0.6933333333333334
User 68055 does not improve AUC. Reverting changes.
Training on augumented user 2161 47/50 current_auc = 0.6933333333333334
User 2161 AUC after training: 0.6933333333333334
User 2161 does not improve AUC. Reverting changes.
Training on augumented user 12660 48/50 current_auc = 0.6933333333333334
User 12660 AUC after training: 0.6933333333333334
User 12660 does not improve AUC. Reverting changes.
Training on augumented user 86098 49/50 current_auc = 0.6933333333333334
User 86098 AUC after training: 0.6933333333333334
User 86098 does not improve AUC. Reverting changes.
[2024-12-02 18:32:17.315969] start test user 58309 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:18.004093] start test user 58309 100/568 recall augumented users by random, augumented_users = [66382, 97312, 58257, 115364, 20355, 113312, 125001, 38769, 122828, 39232, 78552, 47013, 35766, 45597, 104567, 30839, 33770, 50036, 88451, 83670, 28952, 19916, 69524, 123745, 25720, 30288, 89390, 41875, 9101, 74875, 60074, 26432, 52551, 78258, 18349, 10294, 10922, 36805, 1945, 132216, 38284, 93556, 129116, 98093, 40309, 38366, 26439, 113288, 32144, 55284]
[2024-12-02 18:32:18.019246] user = 58309 Cloud 100/568
[2024-12-02 18:32:18.029577] user = 58309 Local 100/568
[2024-12-02 18:32:18.085949] user = 58309 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:20.445635] user = 58309 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5380952380952381
Training on augumented user 66382 0/50 current_auc = 0.5380952380952381
User 66382 AUC after training: 0.5380952380952381
User 66382 does not improve AUC. Reverting changes.
Training on augumented user 97312 1/50 current_auc = 0.5380952380952381
User 97312 AUC after training: 0.5380952380952381
User 97312 does not improve AUC. Reverting changes.
Training on augumented user 58257 2/50 current_auc = 0.5380952380952381
User 58257 AUC after training: 0.5380952380952381
User 58257 does not improve AUC. Reverting changes.
Training on augumented user 115364 3/50 current_auc = 0.5380952380952381
User 115364 AUC after training: 0.5380952380952381
User 115364 does not improve AUC. Reverting changes.
Training on augumented user 20355 4/50 current_auc = 0.5380952380952381
User 20355 AUC after training: 0.5380952380952381
User 20355 does not improve AUC. Reverting changes.
Training on augumented user 113312 5/50 current_auc = 0.5380952380952381
User 113312 AUC after training: 0.5380952380952381
User 113312 does not improve AUC. Reverting changes.
Training on augumented user 125001 6/50 current_auc = 0.5380952380952381
User 125001 AUC after training: 0.5380952380952381
User 125001 does not improve AUC. Reverting changes.
Training on augumented user 38769 7/50 current_auc = 0.5380952380952381
User 38769 AUC after training: 0.5380952380952381
User 38769 does not improve AUC. Reverting changes.
Training on augumented user 122828 8/50 current_auc = 0.5380952380952381
User 122828 AUC after training: 0.5380952380952381
User 122828 does not improve AUC. Reverting changes.
Training on augumented user 39232 9/50 current_auc = 0.5380952380952381
User 39232 AUC after training: 0.5380952380952381
User 39232 does not improve AUC. Reverting changes.
Training on augumented user 78552 10/50 current_auc = 0.5380952380952381
User 78552 AUC after training: 0.5380952380952381
User 78552 does not improve AUC. Reverting changes.
Training on augumented user 47013 11/50 current_auc = 0.5380952380952381
User 47013 AUC after training: 0.5380952380952381
User 47013 does not improve AUC. Reverting changes.
Training on augumented user 35766 12/50 current_auc = 0.5380952380952381
User 35766 AUC after training: 0.5380952380952381
User 35766 does not improve AUC. Reverting changes.
Training on augumented user 45597 13/50 current_auc = 0.5380952380952381
User 45597 AUC after training: 0.5380952380952381
User 45597 does not improve AUC. Reverting changes.
Training on augumented user 104567 14/50 current_auc = 0.5380952380952381
User 104567 AUC after training: 0.5380952380952381
User 104567 does not improve AUC. Reverting changes.
Training on augumented user 30839 15/50 current_auc = 0.5380952380952381
User 30839 AUC after training: 0.5380952380952381
User 30839 does not improve AUC. Reverting changes.
Training on augumented user 33770 16/50 current_auc = 0.5380952380952381
User 33770 AUC after training: 0.5380952380952381
User 33770 does not improve AUC. Reverting changes.
Training on augumented user 50036 17/50 current_auc = 0.5380952380952381
User 50036 AUC after training: 0.5380952380952381
User 50036 does not improve AUC. Reverting changes.
Training on augumented user 88451 18/50 current_auc = 0.5380952380952381
User 88451 AUC after training: 0.5380952380952381
User 88451 does not improve AUC. Reverting changes.
Training on augumented user 83670 19/50 current_auc = 0.5380952380952381
User 83670 AUC after training: 0.5333333333333333
User 83670 does not improve AUC. Reverting changes.
Training on augumented user 28952 20/50 current_auc = 0.5380952380952381
User 28952 AUC after training: 0.5380952380952381
User 28952 does not improve AUC. Reverting changes.
Training on augumented user 19916 21/50 current_auc = 0.5380952380952381
User 19916 AUC after training: 0.5380952380952381
User 19916 does not improve AUC. Reverting changes.
Training on augumented user 69524 22/50 current_auc = 0.5380952380952381
User 69524 AUC after training: 0.5380952380952381
User 69524 does not improve AUC. Reverting changes.
Training on augumented user 123745 23/50 current_auc = 0.5380952380952381
User 123745 AUC after training: 0.5428571428571429
User 123745 improves AUC. Keeping the model.
Training on augumented user 25720 24/50 current_auc = 0.5428571428571429
User 25720 AUC after training: 0.5380952380952381
User 25720 does not improve AUC. Reverting changes.
Training on augumented user 30288 25/50 current_auc = 0.5428571428571429
User 30288 AUC after training: 0.5380952380952381
User 30288 does not improve AUC. Reverting changes.
Training on augumented user 89390 26/50 current_auc = 0.5428571428571429
User 89390 AUC after training: 0.5428571428571429
User 89390 does not improve AUC. Reverting changes.
Training on augumented user 41875 27/50 current_auc = 0.5428571428571429
User 41875 AUC after training: 0.5428571428571429
User 41875 does not improve AUC. Reverting changes.
Training on augumented user 9101 28/50 current_auc = 0.5428571428571429
User 9101 AUC after training: 0.5428571428571429
User 9101 does not improve AUC. Reverting changes.
Training on augumented user 74875 29/50 current_auc = 0.5428571428571429
User 74875 AUC after training: 0.5380952380952381
User 74875 does not improve AUC. Reverting changes.
Training on augumented user 60074 30/50 current_auc = 0.5428571428571429
User 60074 AUC after training: 0.5428571428571429
User 60074 does not improve AUC. Reverting changes.
Training on augumented user 26432 31/50 current_auc = 0.5428571428571429
User 26432 AUC after training: 0.5380952380952381
User 26432 does not improve AUC. Reverting changes.
Training on augumented user 52551 32/50 current_auc = 0.5428571428571429
User 52551 AUC after training: 0.5428571428571429
User 52551 does not improve AUC. Reverting changes.
Training on augumented user 78258 33/50 current_auc = 0.5428571428571429
User 78258 AUC after training: 0.5428571428571429
User 78258 does not improve AUC. Reverting changes.
Training on augumented user 18349 34/50 current_auc = 0.5428571428571429
User 18349 AUC after training: 0.5428571428571429
User 18349 does not improve AUC. Reverting changes.
Training on augumented user 10294 35/50 current_auc = 0.5428571428571429
User 10294 AUC after training: 0.5428571428571429
User 10294 does not improve AUC. Reverting changes.
Training on augumented user 10922 36/50 current_auc = 0.5428571428571429
User 10922 AUC after training: 0.5380952380952381
User 10922 does not improve AUC. Reverting changes.
Training on augumented user 36805 37/50 current_auc = 0.5428571428571429
User 36805 AUC after training: 0.5380952380952381
User 36805 does not improve AUC. Reverting changes.
Training on augumented user 1945 38/50 current_auc = 0.5428571428571429
User 1945 AUC after training: 0.5428571428571429
User 1945 does not improve AUC. Reverting changes.
Training on augumented user 132216 39/50 current_auc = 0.5428571428571429
User 132216 AUC after training: 0.5380952380952381
User 132216 does not improve AUC. Reverting changes.
Training on augumented user 38284 40/50 current_auc = 0.5428571428571429
User 38284 AUC after training: 0.5380952380952381
User 38284 does not improve AUC. Reverting changes.
Training on augumented user 93556 41/50 current_auc = 0.5428571428571429
User 93556 AUC after training: 0.5428571428571429
User 93556 does not improve AUC. Reverting changes.
Training on augumented user 129116 42/50 current_auc = 0.5428571428571429
User 129116 AUC after training: 0.5428571428571428
User 129116 does not improve AUC. Reverting changes.
Training on augumented user 98093 43/50 current_auc = 0.5428571428571429
User 98093 AUC after training: 0.5428571428571429
User 98093 does not improve AUC. Reverting changes.
Training on augumented user 40309 44/50 current_auc = 0.5428571428571429
User 40309 AUC after training: 0.5380952380952381
User 40309 does not improve AUC. Reverting changes.
Training on augumented user 38366 45/50 current_auc = 0.5428571428571429
User 38366 AUC after training: 0.5380952380952381
User 38366 does not improve AUC. Reverting changes.
Training on augumented user 26439 46/50 current_auc = 0.5428571428571429
User 26439 AUC after training: 0.5380952380952381
User 26439 does not improve AUC. Reverting changes.
Training on augumented user 113288 47/50 current_auc = 0.5428571428571429
User 113288 AUC after training: 0.5428571428571429
User 113288 does not improve AUC. Reverting changes.
Training on augumented user 32144 48/50 current_auc = 0.5428571428571429
User 32144 AUC after training: 0.5428571428571429
User 32144 does not improve AUC. Reverting changes.
Training on augumented user 55284 49/50 current_auc = 0.5428571428571429
User 55284 AUC after training: 0.5428571428571429
User 55284 does not improve AUC. Reverting changes.
[2024-12-02 18:32:48.367441] start test user 58315 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:49.147824] start test user 58315 101/568 recall augumented users by random, augumented_users = [127519, 138394, 94556, 12491, 115604, 94143, 133894, 42333, 39286, 72594, 115084, 97055, 22486, 13857, 112710, 5224, 3196, 125692, 50119, 37183, 11662, 101641, 75285, 117829, 3811, 118660, 43036, 136133, 137067, 29786, 54269, 9626, 95275, 94869, 32667, 37056, 98476, 11413, 56142, 55228, 109826, 60433, 135458, 2549, 25973, 80573, 9, 1540, 45661, 32679]
[2024-12-02 18:32:49.178873] user = 58315 Cloud 101/568
[2024-12-02 18:32:49.204394] user = 58315 Local 101/568
[2024-12-02 18:32:49.263856] user = 58315 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:51.611078] user = 58315 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7466393921683225
Training on augumented user 127519 0/50 current_auc = 0.7466393921683225
User 127519 AUC after training: 0.7463471654003506
User 127519 does not improve AUC. Reverting changes.
Training on augumented user 138394 1/50 current_auc = 0.7466393921683225
User 138394 AUC after training: 0.7454704850964349
User 138394 does not improve AUC. Reverting changes.
Training on augumented user 94556 2/50 current_auc = 0.7466393921683225
User 94556 AUC after training: 0.7460549386323787
User 94556 does not improve AUC. Reverting changes.
Training on augumented user 12491 3/50 current_auc = 0.7466393921683225
User 12491 AUC after training: 0.7457627118644069
User 12491 does not improve AUC. Reverting changes.
Training on augumented user 115604 4/50 current_auc = 0.7466393921683225
User 115604 AUC after training: 0.7470777323202804
User 115604 improves AUC. Keeping the model.
Training on augumented user 94143 5/50 current_auc = 0.7470777323202804
User 94143 AUC after training: 0.7464932787843366
User 94143 does not improve AUC. Reverting changes.
Training on augumented user 133894 6/50 current_auc = 0.7470777323202804
User 133894 AUC after training: 0.7460549386323787
User 133894 does not improve AUC. Reverting changes.
Training on augumented user 42333 7/50 current_auc = 0.7470777323202804
User 42333 AUC after training: 0.7456165984804207
User 42333 does not improve AUC. Reverting changes.
Training on augumented user 39286 8/50 current_auc = 0.7470777323202804
User 39286 AUC after training: 0.7469316189362946
User 39286 does not improve AUC. Reverting changes.
Training on augumented user 72594 9/50 current_auc = 0.7470777323202804
User 72594 AUC after training: 0.7460549386323787
User 72594 does not improve AUC. Reverting changes.
Training on augumented user 115084 10/50 current_auc = 0.7470777323202804
User 115084 AUC after training: 0.7469316189362946
User 115084 does not improve AUC. Reverting changes.
Training on augumented user 97055 11/50 current_auc = 0.7470777323202804
User 97055 AUC after training: 0.7462010520163647
User 97055 does not improve AUC. Reverting changes.
Training on augumented user 22486 12/50 current_auc = 0.7470777323202804
User 22486 AUC after training: 0.7454704850964349
User 22486 does not improve AUC. Reverting changes.
Training on augumented user 13857 13/50 current_auc = 0.7470777323202804
User 13857 AUC after training: 0.7464932787843366
User 13857 does not improve AUC. Reverting changes.
Training on augumented user 112710 14/50 current_auc = 0.7470777323202804
User 112710 AUC after training: 0.7460549386323787
User 112710 does not improve AUC. Reverting changes.
Training on augumented user 5224 15/50 current_auc = 0.7470777323202804
User 5224 AUC after training: 0.7472238457042666
User 5224 improves AUC. Keeping the model.
Training on augumented user 3196 16/50 current_auc = 0.7472238457042666
User 3196 AUC after training: 0.7466393921683225
User 3196 does not improve AUC. Reverting changes.
Training on augumented user 125692 17/50 current_auc = 0.7472238457042666
User 125692 AUC after training: 0.7466393921683226
User 125692 does not improve AUC. Reverting changes.
Training on augumented user 50119 18/50 current_auc = 0.7472238457042666
User 50119 AUC after training: 0.7478082992402103
User 50119 improves AUC. Keeping the model.
Training on augumented user 37183 19/50 current_auc = 0.7478082992402103
User 37183 AUC after training: 0.7454704850964348
User 37183 does not improve AUC. Reverting changes.
Training on augumented user 11662 20/50 current_auc = 0.7478082992402103
User 11662 AUC after training: 0.7472238457042665
User 11662 does not improve AUC. Reverting changes.
Training on augumented user 101641 21/50 current_auc = 0.7478082992402103
User 101641 AUC after training: 0.7469316189362946
User 101641 does not improve AUC. Reverting changes.
Training on augumented user 75285 22/50 current_auc = 0.7478082992402103
User 75285 AUC after training: 0.7475160724722384
User 75285 does not improve AUC. Reverting changes.
Training on augumented user 117829 23/50 current_auc = 0.7478082992402103
User 117829 AUC after training: 0.7478082992402104
User 117829 improves AUC. Keeping the model.
Training on augumented user 3811 24/50 current_auc = 0.7478082992402104
User 3811 AUC after training: 0.745178258328463
User 3811 does not improve AUC. Reverting changes.
Training on augumented user 118660 25/50 current_auc = 0.7478082992402104
User 118660 AUC after training: 0.7472238457042665
User 118660 does not improve AUC. Reverting changes.
Training on augumented user 43036 26/50 current_auc = 0.7478082992402104
User 43036 AUC after training: 0.7466393921683225
User 43036 does not improve AUC. Reverting changes.
Training on augumented user 136133 27/50 current_auc = 0.7478082992402104
User 136133 AUC after training: 0.7473699590882525
User 136133 does not improve AUC. Reverting changes.
Training on augumented user 137067 28/50 current_auc = 0.7478082992402104
User 137067 AUC after training: 0.7459088252483927
User 137067 does not improve AUC. Reverting changes.
Training on augumented user 29786 29/50 current_auc = 0.7478082992402104
User 29786 AUC after training: 0.7469316189362946
User 29786 does not improve AUC. Reverting changes.
Training on augumented user 54269 30/50 current_auc = 0.7478082992402104
User 54269 AUC after training: 0.7463471654003507
User 54269 does not improve AUC. Reverting changes.
Training on augumented user 9626 31/50 current_auc = 0.7478082992402104
User 9626 AUC after training: 0.7466393921683225
User 9626 does not improve AUC. Reverting changes.
Training on augumented user 95275 32/50 current_auc = 0.7478082992402104
User 95275 AUC after training: 0.7451782583284629
User 95275 does not improve AUC. Reverting changes.
Training on augumented user 94869 33/50 current_auc = 0.7478082992402104
User 94869 AUC after training: 0.7481005260081823
User 94869 improves AUC. Keeping the model.
Training on augumented user 32667 34/50 current_auc = 0.7481005260081823
User 32667 AUC after training: 0.7457627118644068
User 32667 does not improve AUC. Reverting changes.
Training on augumented user 37056 35/50 current_auc = 0.7481005260081823
User 37056 AUC after training: 0.7464932787843366
User 37056 does not improve AUC. Reverting changes.
Training on augumented user 98476 36/50 current_auc = 0.7481005260081823
User 98476 AUC after training: 0.7469316189362947
User 98476 does not improve AUC. Reverting changes.
Training on augumented user 11413 37/50 current_auc = 0.7481005260081823
User 11413 AUC after training: 0.7464932787843367
User 11413 does not improve AUC. Reverting changes.
Training on augumented user 56142 38/50 current_auc = 0.7481005260081823
User 56142 AUC after training: 0.7472238457042666
User 56142 does not improve AUC. Reverting changes.
Training on augumented user 55228 39/50 current_auc = 0.7481005260081823
User 55228 AUC after training: 0.7475160724722385
User 55228 does not improve AUC. Reverting changes.
Training on augumented user 109826 40/50 current_auc = 0.7481005260081823
User 109826 AUC after training: 0.7475160724722384
User 109826 does not improve AUC. Reverting changes.
Training on augumented user 60433 41/50 current_auc = 0.7481005260081823
User 60433 AUC after training: 0.7481005260081823
User 60433 does not improve AUC. Reverting changes.
Training on augumented user 135458 42/50 current_auc = 0.7481005260081823
User 135458 AUC after training: 0.7469316189362946
User 135458 does not improve AUC. Reverting changes.
Training on augumented user 2549 43/50 current_auc = 0.7481005260081823
User 2549 AUC after training: 0.7469316189362946
User 2549 does not improve AUC. Reverting changes.
Training on augumented user 25973 44/50 current_auc = 0.7481005260081823
User 25973 AUC after training: 0.7472238457042665
User 25973 does not improve AUC. Reverting changes.
Training on augumented user 80573 45/50 current_auc = 0.7481005260081823
User 80573 AUC after training: 0.7457627118644067
User 80573 does not improve AUC. Reverting changes.
Training on augumented user 9 46/50 current_auc = 0.7481005260081823
User 9 AUC after training: 0.7475160724722385
User 9 does not improve AUC. Reverting changes.
Training on augumented user 1540 47/50 current_auc = 0.7481005260081823
User 1540 AUC after training: 0.7482466393921684
User 1540 improves AUC. Keeping the model.
Training on augumented user 45661 48/50 current_auc = 0.7482466393921684
User 45661 AUC after training: 0.7485388661601403
User 45661 improves AUC. Keeping the model.
Training on augumented user 32679 49/50 current_auc = 0.7485388661601403
User 32679 AUC after training: 0.7470777323202805
User 32679 does not improve AUC. Reverting changes.
[2024-12-02 18:33:16.947815] start test user 58346 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:17.366263] start test user 58346 102/568 recall augumented users by random, augumented_users = [1508, 1729, 58690, 91416, 129388, 65461, 54463, 78755, 113034, 6669, 117701, 9453, 799, 77497, 76238, 88984, 37868, 88050, 92173, 87878, 99167, 9027, 77153, 111651, 73234, 25966, 57159, 129925, 6219, 62733, 34322, 108005, 124862, 37286, 1, 81678, 119619, 90857, 26457, 96883, 52057, 50246, 116294, 107578, 65804, 112448, 9943, 68968, 46482, 48714]
[2024-12-02 18:33:17.381172] user = 58346 Cloud 102/568
[2024-12-02 18:33:17.390935] user = 58346 Local 102/568
[2024-12-02 18:33:17.486580] user = 58346 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:19.972714] user = 58346 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5771324863883848
Training on augumented user 1508 0/50 current_auc = 0.5771324863883848
User 1508 AUC after training: 0.5771324863883848
User 1508 does not improve AUC. Reverting changes.
Training on augumented user 1729 1/50 current_auc = 0.5771324863883848
User 1729 AUC after training: 0.5825771324863883
User 1729 improves AUC. Keeping the model.
Training on augumented user 58690 2/50 current_auc = 0.5825771324863883
User 58690 AUC after training: 0.5807622504537205
User 58690 does not improve AUC. Reverting changes.
Training on augumented user 91416 3/50 current_auc = 0.5825771324863883
User 91416 AUC after training: 0.5807622504537205
User 91416 does not improve AUC. Reverting changes.
Training on augumented user 129388 4/50 current_auc = 0.5825771324863883
User 129388 AUC after training: 0.5825771324863883
User 129388 does not improve AUC. Reverting changes.
Training on augumented user 65461 5/50 current_auc = 0.5825771324863883
User 65461 AUC after training: 0.5825771324863883
User 65461 does not improve AUC. Reverting changes.
Training on augumented user 54463 6/50 current_auc = 0.5825771324863883
User 54463 AUC after training: 0.5807622504537204
User 54463 does not improve AUC. Reverting changes.
Training on augumented user 78755 7/50 current_auc = 0.5825771324863883
User 78755 AUC after training: 0.5807622504537205
User 78755 does not improve AUC. Reverting changes.
Training on augumented user 113034 8/50 current_auc = 0.5825771324863883
User 113034 AUC after training: 0.5825771324863883
User 113034 does not improve AUC. Reverting changes.
Training on augumented user 6669 9/50 current_auc = 0.5825771324863883
User 6669 AUC after training: 0.5825771324863883
User 6669 does not improve AUC. Reverting changes.
Training on augumented user 117701 10/50 current_auc = 0.5825771324863883
User 117701 AUC after training: 0.5771324863883848
User 117701 does not improve AUC. Reverting changes.
Training on augumented user 9453 11/50 current_auc = 0.5825771324863883
User 9453 AUC after training: 0.5789473684210525
User 9453 does not improve AUC. Reverting changes.
Training on augumented user 799 12/50 current_auc = 0.5825771324863883
User 799 AUC after training: 0.5825771324863883
User 799 does not improve AUC. Reverting changes.
Training on augumented user 77497 13/50 current_auc = 0.5825771324863883
User 77497 AUC after training: 0.5825771324863883
User 77497 does not improve AUC. Reverting changes.
Training on augumented user 76238 14/50 current_auc = 0.5825771324863883
User 76238 AUC after training: 0.5843920145190562
User 76238 improves AUC. Keeping the model.
Training on augumented user 88984 15/50 current_auc = 0.5843920145190562
User 88984 AUC after training: 0.5825771324863883
User 88984 does not improve AUC. Reverting changes.
Training on augumented user 37868 16/50 current_auc = 0.5843920145190562
User 37868 AUC after training: 0.5843920145190562
User 37868 does not improve AUC. Reverting changes.
Training on augumented user 88050 17/50 current_auc = 0.5843920145190562
User 88050 AUC after training: 0.5825771324863883
User 88050 does not improve AUC. Reverting changes.
Training on augumented user 92173 18/50 current_auc = 0.5843920145190562
User 92173 AUC after training: 0.5807622504537204
User 92173 does not improve AUC. Reverting changes.
Training on augumented user 87878 19/50 current_auc = 0.5843920145190562
User 87878 AUC after training: 0.5789473684210527
User 87878 does not improve AUC. Reverting changes.
Training on augumented user 99167 20/50 current_auc = 0.5843920145190562
User 99167 AUC after training: 0.5825771324863883
User 99167 does not improve AUC. Reverting changes.
Training on augumented user 9027 21/50 current_auc = 0.5843920145190562
User 9027 AUC after training: 0.5807622504537204
User 9027 does not improve AUC. Reverting changes.
Training on augumented user 77153 22/50 current_auc = 0.5843920145190562
User 77153 AUC after training: 0.5825771324863883
User 77153 does not improve AUC. Reverting changes.
Training on augumented user 111651 23/50 current_auc = 0.5843920145190562
User 111651 AUC after training: 0.5825771324863883
User 111651 does not improve AUC. Reverting changes.
Training on augumented user 73234 24/50 current_auc = 0.5843920145190562
User 73234 AUC after training: 0.5862068965517241
User 73234 improves AUC. Keeping the model.
Training on augumented user 25966 25/50 current_auc = 0.5862068965517241
User 25966 AUC after training: 0.5825771324863883
User 25966 does not improve AUC. Reverting changes.
Training on augumented user 57159 26/50 current_auc = 0.5862068965517241
User 57159 AUC after training: 0.5862068965517241
User 57159 does not improve AUC. Reverting changes.
Training on augumented user 129925 27/50 current_auc = 0.5862068965517241
User 129925 AUC after training: 0.5825771324863883
User 129925 does not improve AUC. Reverting changes.
Training on augumented user 6219 28/50 current_auc = 0.5862068965517241
User 6219 AUC after training: 0.5862068965517241
User 6219 does not improve AUC. Reverting changes.
Training on augumented user 62733 29/50 current_auc = 0.5862068965517241
User 62733 AUC after training: 0.5862068965517241
User 62733 does not improve AUC. Reverting changes.
Training on augumented user 34322 30/50 current_auc = 0.5862068965517241
User 34322 AUC after training: 0.5862068965517241
User 34322 does not improve AUC. Reverting changes.
Training on augumented user 108005 31/50 current_auc = 0.5862068965517241
User 108005 AUC after training: 0.5862068965517241
User 108005 does not improve AUC. Reverting changes.
Training on augumented user 124862 32/50 current_auc = 0.5862068965517241
User 124862 AUC after training: 0.5862068965517241
User 124862 does not improve AUC. Reverting changes.
Training on augumented user 37286 33/50 current_auc = 0.5862068965517241
User 37286 AUC after training: 0.5843920145190562
User 37286 does not improve AUC. Reverting changes.
Training on augumented user 1 34/50 current_auc = 0.5862068965517241
User 1 AUC after training: 0.5843920145190562
User 1 does not improve AUC. Reverting changes.
Training on augumented user 81678 35/50 current_auc = 0.5862068965517241
User 81678 AUC after training: 0.5862068965517241
User 81678 does not improve AUC. Reverting changes.
Training on augumented user 119619 36/50 current_auc = 0.5862068965517241
User 119619 AUC after training: 0.5862068965517241
User 119619 does not improve AUC. Reverting changes.
Training on augumented user 90857 37/50 current_auc = 0.5862068965517241
User 90857 AUC after training: 0.5862068965517241
User 90857 does not improve AUC. Reverting changes.
Training on augumented user 26457 38/50 current_auc = 0.5862068965517241
User 26457 AUC after training: 0.5843920145190562
User 26457 does not improve AUC. Reverting changes.
Training on augumented user 96883 39/50 current_auc = 0.5862068965517241
User 96883 AUC after training: 0.5843920145190562
User 96883 does not improve AUC. Reverting changes.
Training on augumented user 52057 40/50 current_auc = 0.5862068965517241
User 52057 AUC after training: 0.5825771324863883
User 52057 does not improve AUC. Reverting changes.
Training on augumented user 50246 41/50 current_auc = 0.5862068965517241
User 50246 AUC after training: 0.5843920145190562
User 50246 does not improve AUC. Reverting changes.
Training on augumented user 116294 42/50 current_auc = 0.5862068965517241
User 116294 AUC after training: 0.5843920145190562
User 116294 does not improve AUC. Reverting changes.
Training on augumented user 107578 43/50 current_auc = 0.5862068965517241
User 107578 AUC after training: 0.5862068965517241
User 107578 does not improve AUC. Reverting changes.
Training on augumented user 65804 44/50 current_auc = 0.5862068965517241
User 65804 AUC after training: 0.5862068965517241
User 65804 does not improve AUC. Reverting changes.
Training on augumented user 112448 45/50 current_auc = 0.5862068965517241
User 112448 AUC after training: 0.5862068965517241
User 112448 does not improve AUC. Reverting changes.
Training on augumented user 9943 46/50 current_auc = 0.5862068965517241
User 9943 AUC after training: 0.5843920145190562
User 9943 does not improve AUC. Reverting changes.
Training on augumented user 68968 47/50 current_auc = 0.5862068965517241
User 68968 AUC after training: 0.5843920145190562
User 68968 does not improve AUC. Reverting changes.
Training on augumented user 46482 48/50 current_auc = 0.5862068965517241
User 46482 AUC after training: 0.5843920145190562
User 46482 does not improve AUC. Reverting changes.
Training on augumented user 48714 49/50 current_auc = 0.5862068965517241
User 48714 AUC after training: 0.5862068965517241
User 48714 does not improve AUC. Reverting changes.
[2024-12-02 18:33:51.126168] start test user 58373 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:51.754272] start test user 58373 103/568 recall augumented users by random, augumented_users = [59596, 93850, 64297, 75293, 89739, 61337, 58083, 15709, 109293, 38659, 124966, 16479, 5573, 91260, 90862, 34863, 7648, 57396, 32680, 118935, 49523, 32779, 84590, 135761, 6992, 5978, 60087, 97391, 7311, 61140, 40948, 12390, 107031, 49367, 79159, 136552, 120281, 46693, 11433, 125974, 80526, 43762, 3186, 84867, 31331, 123442, 138179, 54971, 95632, 137822]
[2024-12-02 18:33:51.769334] user = 58373 Cloud 103/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:33:51.793887] user = 58373 Local 103/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:33:51.870596] user = 58373 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:33:55.575686] user = 58373 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 59596 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59596 AUC after training: 0.5
User 59596 does not improve AUC. Reverting changes.
Training on augumented user 93850 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93850 AUC after training: 0.5
User 93850 does not improve AUC. Reverting changes.
Training on augumented user 64297 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64297 AUC after training: 0.5
User 64297 does not improve AUC. Reverting changes.
Training on augumented user 75293 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75293 AUC after training: 0.5
User 75293 does not improve AUC. Reverting changes.
Training on augumented user 89739 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89739 AUC after training: 0.5
User 89739 does not improve AUC. Reverting changes.
Training on augumented user 61337 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61337 AUC after training: 0.5
User 61337 does not improve AUC. Reverting changes.
Training on augumented user 58083 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58083 AUC after training: 0.5
User 58083 does not improve AUC. Reverting changes.
Training on augumented user 15709 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15709 AUC after training: 0.5
User 15709 does not improve AUC. Reverting changes.
Training on augumented user 109293 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109293 AUC after training: 0.5
User 109293 does not improve AUC. Reverting changes.
Training on augumented user 38659 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38659 AUC after training: 0.5
User 38659 does not improve AUC. Reverting changes.
Training on augumented user 124966 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124966 AUC after training: 0.5
User 124966 does not improve AUC. Reverting changes.
Training on augumented user 16479 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16479 AUC after training: 0.5
User 16479 does not improve AUC. Reverting changes.
Training on augumented user 5573 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5573 AUC after training: 0.5
User 5573 does not improve AUC. Reverting changes.
Training on augumented user 91260 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91260 AUC after training: 0.5
User 91260 does not improve AUC. Reverting changes.
Training on augumented user 90862 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90862 AUC after training: 0.5
User 90862 does not improve AUC. Reverting changes.
Training on augumented user 34863 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34863 AUC after training: 0.5
User 34863 does not improve AUC. Reverting changes.
Training on augumented user 7648 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7648 AUC after training: 0.5
User 7648 does not improve AUC. Reverting changes.
Training on augumented user 57396 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57396 AUC after training: 0.5
User 57396 does not improve AUC. Reverting changes.
Training on augumented user 32680 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32680 AUC after training: 0.5
User 32680 does not improve AUC. Reverting changes.
Training on augumented user 118935 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118935 AUC after training: 0.5
User 118935 does not improve AUC. Reverting changes.
Training on augumented user 49523 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49523 AUC after training: 0.5
User 49523 does not improve AUC. Reverting changes.
Training on augumented user 32779 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32779 AUC after training: 0.5
User 32779 does not improve AUC. Reverting changes.
Training on augumented user 84590 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84590 AUC after training: 0.5
User 84590 does not improve AUC. Reverting changes.
Training on augumented user 135761 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135761 AUC after training: 0.5
User 135761 does not improve AUC. Reverting changes.
Training on augumented user 6992 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6992 AUC after training: 0.5
User 6992 does not improve AUC. Reverting changes.
Training on augumented user 5978 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5978 AUC after training: 0.5
User 5978 does not improve AUC. Reverting changes.
Training on augumented user 60087 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60087 AUC after training: 0.5
User 60087 does not improve AUC. Reverting changes.
Training on augumented user 97391 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97391 AUC after training: 0.5
User 97391 does not improve AUC. Reverting changes.
Training on augumented user 7311 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7311 AUC after training: 0.5
User 7311 does not improve AUC. Reverting changes.
Training on augumented user 61140 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61140 AUC after training: 0.5
User 61140 does not improve AUC. Reverting changes.
Training on augumented user 40948 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40948 AUC after training: 0.5
User 40948 does not improve AUC. Reverting changes.
Training on augumented user 12390 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12390 AUC after training: 0.5
User 12390 does not improve AUC. Reverting changes.
Training on augumented user 107031 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107031 AUC after training: 0.5
User 107031 does not improve AUC. Reverting changes.
Training on augumented user 49367 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49367 AUC after training: 0.5
User 49367 does not improve AUC. Reverting changes.
Training on augumented user 79159 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79159 AUC after training: 0.5
User 79159 does not improve AUC. Reverting changes.
Training on augumented user 136552 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136552 AUC after training: 0.5
User 136552 does not improve AUC. Reverting changes.
Training on augumented user 120281 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120281 AUC after training: 0.5
User 120281 does not improve AUC. Reverting changes.
Training on augumented user 46693 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46693 AUC after training: 0.5
User 46693 does not improve AUC. Reverting changes.
Training on augumented user 11433 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11433 AUC after training: 0.5
User 11433 does not improve AUC. Reverting changes.
Training on augumented user 125974 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125974 AUC after training: 0.5
User 125974 does not improve AUC. Reverting changes.
Training on augumented user 80526 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80526 AUC after training: 0.5
User 80526 does not improve AUC. Reverting changes.
Training on augumented user 43762 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43762 AUC after training: 0.5
User 43762 does not improve AUC. Reverting changes.
Training on augumented user 3186 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3186 AUC after training: 0.5
User 3186 does not improve AUC. Reverting changes.
Training on augumented user 84867 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84867 AUC after training: 0.5
User 84867 does not improve AUC. Reverting changes.
Training on augumented user 31331 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31331 AUC after training: 0.5
User 31331 does not improve AUC. Reverting changes.
Training on augumented user 123442 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123442 AUC after training: 0.5
User 123442 does not improve AUC. Reverting changes.
Training on augumented user 138179 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138179 AUC after training: 0.5
User 138179 does not improve AUC. Reverting changes.
Training on augumented user 54971 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54971 AUC after training: 0.5
User 54971 does not improve AUC. Reverting changes.
Training on augumented user 95632 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95632 AUC after training: 0.5
User 95632 does not improve AUC. Reverting changes.
Training on augumented user 137822 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137822 AUC after training: 0.5
User 137822 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:34:20.882649] start test user 58415 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:21.316836] start test user 58415 104/568 recall augumented users by random, augumented_users = [64324, 6948, 125732, 18111, 2115, 107839, 133488, 53905, 124396, 48959, 38249, 132931, 100621, 84405, 104003, 123464, 62999, 4660, 47676, 84769, 86345, 13902, 88385, 102128, 59865, 33001, 93200, 103891, 94452, 27727, 55634, 52486, 108882, 35518, 108598, 54702, 1068, 8258, 138024, 43059, 8607, 10161, 36524, 68852, 129475, 25602, 108216, 12527, 94753, 90861]
[2024-12-02 18:34:21.331119] user = 58415 Cloud 104/568
[2024-12-02 18:34:21.342720] user = 58415 Local 104/568
[2024-12-02 18:34:21.375563] user = 58415 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:24.014117] user = 58415 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5158045977011494
Training on augumented user 64324 0/50 current_auc = 0.5158045977011494
User 64324 AUC after training: 0.5186781609195403
User 64324 improves AUC. Keeping the model.
Training on augumented user 6948 1/50 current_auc = 0.5186781609195403
User 6948 AUC after training: 0.5186781609195403
User 6948 does not improve AUC. Reverting changes.
Training on augumented user 125732 2/50 current_auc = 0.5186781609195403
User 125732 AUC after training: 0.5114942528735633
User 125732 does not improve AUC. Reverting changes.
Training on augumented user 18111 3/50 current_auc = 0.5186781609195403
User 18111 AUC after training: 0.517241379310345
User 18111 does not improve AUC. Reverting changes.
Training on augumented user 2115 4/50 current_auc = 0.5186781609195403
User 2115 AUC after training: 0.5172413793103448
User 2115 does not improve AUC. Reverting changes.
Training on augumented user 107839 5/50 current_auc = 0.5186781609195403
User 107839 AUC after training: 0.5158045977011494
User 107839 does not improve AUC. Reverting changes.
Training on augumented user 133488 6/50 current_auc = 0.5186781609195403
User 133488 AUC after training: 0.5201149425287357
User 133488 improves AUC. Keeping the model.
Training on augumented user 53905 7/50 current_auc = 0.5201149425287357
User 53905 AUC after training: 0.5201149425287357
User 53905 does not improve AUC. Reverting changes.
Training on augumented user 124396 8/50 current_auc = 0.5201149425287357
User 124396 AUC after training: 0.521551724137931
User 124396 improves AUC. Keeping the model.
Training on augumented user 48959 9/50 current_auc = 0.521551724137931
User 48959 AUC after training: 0.521551724137931
User 48959 does not improve AUC. Reverting changes.
Training on augumented user 38249 10/50 current_auc = 0.521551724137931
User 38249 AUC after training: 0.5201149425287357
User 38249 does not improve AUC. Reverting changes.
Training on augumented user 132931 11/50 current_auc = 0.521551724137931
User 132931 AUC after training: 0.521551724137931
User 132931 does not improve AUC. Reverting changes.
Training on augumented user 100621 12/50 current_auc = 0.521551724137931
User 100621 AUC after training: 0.5201149425287357
User 100621 does not improve AUC. Reverting changes.
Training on augumented user 84405 13/50 current_auc = 0.521551724137931
User 84405 AUC after training: 0.521551724137931
User 84405 does not improve AUC. Reverting changes.
Training on augumented user 104003 14/50 current_auc = 0.521551724137931
User 104003 AUC after training: 0.5201149425287357
User 104003 does not improve AUC. Reverting changes.
Training on augumented user 123464 15/50 current_auc = 0.521551724137931
User 123464 AUC after training: 0.5186781609195402
User 123464 does not improve AUC. Reverting changes.
Training on augumented user 62999 16/50 current_auc = 0.521551724137931
User 62999 AUC after training: 0.521551724137931
User 62999 does not improve AUC. Reverting changes.
Training on augumented user 4660 17/50 current_auc = 0.521551724137931
User 4660 AUC after training: 0.5186781609195403
User 4660 does not improve AUC. Reverting changes.
Training on augumented user 47676 18/50 current_auc = 0.521551724137931
User 47676 AUC after training: 0.521551724137931
User 47676 does not improve AUC. Reverting changes.
Training on augumented user 84769 19/50 current_auc = 0.521551724137931
User 84769 AUC after training: 0.5229885057471264
User 84769 improves AUC. Keeping the model.
Training on augumented user 86345 20/50 current_auc = 0.5229885057471264
User 86345 AUC after training: 0.521551724137931
User 86345 does not improve AUC. Reverting changes.
Training on augumented user 13902 21/50 current_auc = 0.5229885057471264
User 13902 AUC after training: 0.521551724137931
User 13902 does not improve AUC. Reverting changes.
Training on augumented user 88385 22/50 current_auc = 0.5229885057471264
User 88385 AUC after training: 0.5201149425287357
User 88385 does not improve AUC. Reverting changes.
Training on augumented user 102128 23/50 current_auc = 0.5229885057471264
User 102128 AUC after training: 0.521551724137931
User 102128 does not improve AUC. Reverting changes.
Training on augumented user 59865 24/50 current_auc = 0.5229885057471264
User 59865 AUC after training: 0.521551724137931
User 59865 does not improve AUC. Reverting changes.
Training on augumented user 33001 25/50 current_auc = 0.5229885057471264
User 33001 AUC after training: 0.5229885057471264
User 33001 does not improve AUC. Reverting changes.
Training on augumented user 93200 26/50 current_auc = 0.5229885057471264
User 93200 AUC after training: 0.5229885057471264
User 93200 does not improve AUC. Reverting changes.
Training on augumented user 103891 27/50 current_auc = 0.5229885057471264
User 103891 AUC after training: 0.5229885057471264
User 103891 does not improve AUC. Reverting changes.
Training on augumented user 94452 28/50 current_auc = 0.5229885057471264
User 94452 AUC after training: 0.5244252873563218
User 94452 improves AUC. Keeping the model.
Training on augumented user 27727 29/50 current_auc = 0.5244252873563218
User 27727 AUC after training: 0.5229885057471264
User 27727 does not improve AUC. Reverting changes.
Training on augumented user 55634 30/50 current_auc = 0.5244252873563218
User 55634 AUC after training: 0.5258620689655172
User 55634 improves AUC. Keeping the model.
Training on augumented user 52486 31/50 current_auc = 0.5258620689655172
User 52486 AUC after training: 0.5244252873563219
User 52486 does not improve AUC. Reverting changes.
Training on augumented user 108882 32/50 current_auc = 0.5258620689655172
User 108882 AUC after training: 0.5244252873563219
User 108882 does not improve AUC. Reverting changes.
Training on augumented user 35518 33/50 current_auc = 0.5258620689655172
User 35518 AUC after training: 0.5258620689655173
User 35518 improves AUC. Keeping the model.
Training on augumented user 108598 34/50 current_auc = 0.5258620689655173
User 108598 AUC after training: 0.5258620689655172
User 108598 does not improve AUC. Reverting changes.
Training on augumented user 54702 35/50 current_auc = 0.5258620689655173
User 54702 AUC after training: 0.5229885057471264
User 54702 does not improve AUC. Reverting changes.
Training on augumented user 1068 36/50 current_auc = 0.5258620689655173
User 1068 AUC after training: 0.5258620689655173
User 1068 does not improve AUC. Reverting changes.
Training on augumented user 8258 37/50 current_auc = 0.5258620689655173
User 8258 AUC after training: 0.5258620689655173
User 8258 does not improve AUC. Reverting changes.
Training on augumented user 138024 38/50 current_auc = 0.5258620689655173
User 138024 AUC after training: 0.5287356321839081
User 138024 improves AUC. Keeping the model.
Training on augumented user 43059 39/50 current_auc = 0.5287356321839081
User 43059 AUC after training: 0.5272988505747127
User 43059 does not improve AUC. Reverting changes.
Training on augumented user 8607 40/50 current_auc = 0.5287356321839081
User 8607 AUC after training: 0.5316091954022989
User 8607 improves AUC. Keeping the model.
Training on augumented user 10161 41/50 current_auc = 0.5316091954022989
User 10161 AUC after training: 0.5301724137931034
User 10161 does not improve AUC. Reverting changes.
Training on augumented user 36524 42/50 current_auc = 0.5316091954022989
User 36524 AUC after training: 0.5301724137931034
User 36524 does not improve AUC. Reverting changes.
Training on augumented user 68852 43/50 current_auc = 0.5316091954022989
User 68852 AUC after training: 0.5316091954022988
User 68852 does not improve AUC. Reverting changes.
Training on augumented user 129475 44/50 current_auc = 0.5316091954022989
User 129475 AUC after training: 0.5316091954022988
User 129475 does not improve AUC. Reverting changes.
Training on augumented user 25602 45/50 current_auc = 0.5316091954022989
User 25602 AUC after training: 0.5272988505747127
User 25602 does not improve AUC. Reverting changes.
Training on augumented user 108216 46/50 current_auc = 0.5316091954022989
User 108216 AUC after training: 0.5301724137931034
User 108216 does not improve AUC. Reverting changes.
Training on augumented user 12527 47/50 current_auc = 0.5316091954022989
User 12527 AUC after training: 0.5272988505747127
User 12527 does not improve AUC. Reverting changes.
Training on augumented user 94753 48/50 current_auc = 0.5316091954022989
User 94753 AUC after training: 0.5287356321839081
User 94753 does not improve AUC. Reverting changes.
Training on augumented user 90861 49/50 current_auc = 0.5316091954022989
User 90861 AUC after training: 0.5287356321839081
User 90861 does not improve AUC. Reverting changes.
[2024-12-02 18:34:51.090494] start test user 58445 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:51.518407] start test user 58445 105/568 recall augumented users by random, augumented_users = [96021, 63569, 113976, 47380, 73394, 36430, 84482, 65525, 44556, 104948, 45631, 75631, 48844, 70121, 55808, 104306, 70941, 133717, 2329, 102284, 20393, 70214, 94317, 78896, 138372, 135931, 102599, 107470, 55060, 85461, 17409, 89230, 17912, 95108, 38688, 76954, 86996, 28645, 42345, 102887, 59391, 64754, 20123, 77568, 99040, 108002, 23376, 106684, 127076, 42645]
[2024-12-02 18:34:51.533772] user = 58445 Cloud 105/568
[2024-12-02 18:34:51.561203] user = 58445 Local 105/568
[2024-12-02 18:34:51.658897] user = 58445 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:53.842875] user = 58445 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8397734843437706
Training on augumented user 96021 0/50 current_auc = 0.8397734843437706
User 96021 AUC after training: 0.839551410170997
User 96021 does not improve AUC. Reverting changes.
Training on augumented user 63569 1/50 current_auc = 0.8397734843437706
User 63569 AUC after training: 0.8398845214301577
User 63569 improves AUC. Keeping the model.
Training on augumented user 113976 2/50 current_auc = 0.8398845214301577
User 113976 AUC after training: 0.8396624472573838
User 113976 does not improve AUC. Reverting changes.
Training on augumented user 47380 3/50 current_auc = 0.8398845214301577
User 47380 AUC after training: 0.8392182989118365
User 47380 does not improve AUC. Reverting changes.
Training on augumented user 73394 4/50 current_auc = 0.8398845214301577
User 73394 AUC after training: 0.8397734843437707
User 73394 does not improve AUC. Reverting changes.
Training on augumented user 36430 5/50 current_auc = 0.8398845214301577
User 36430 AUC after training: 0.8393293359982235
User 36430 does not improve AUC. Reverting changes.
Training on augumented user 84482 6/50 current_auc = 0.8398845214301577
User 84482 AUC after training: 0.839551410170997
User 84482 does not improve AUC. Reverting changes.
Training on augumented user 65525 7/50 current_auc = 0.8398845214301577
User 65525 AUC after training: 0.8393293359982233
User 65525 does not improve AUC. Reverting changes.
Training on augumented user 44556 8/50 current_auc = 0.8398845214301577
User 44556 AUC after training: 0.8396624472573838
User 44556 does not improve AUC. Reverting changes.
Training on augumented user 104948 9/50 current_auc = 0.8398845214301577
User 104948 AUC after training: 0.8393293359982235
User 104948 does not improve AUC. Reverting changes.
Training on augumented user 45631 10/50 current_auc = 0.8398845214301577
User 45631 AUC after training: 0.8385520763935154
User 45631 does not improve AUC. Reverting changes.
Training on augumented user 75631 11/50 current_auc = 0.8398845214301577
User 75631 AUC after training: 0.8401065956029313
User 75631 improves AUC. Keeping the model.
Training on augumented user 48844 12/50 current_auc = 0.8401065956029313
User 48844 AUC after training: 0.839551410170997
User 48844 does not improve AUC. Reverting changes.
Training on augumented user 70121 13/50 current_auc = 0.8401065956029313
User 70121 AUC after training: 0.8396624472573838
User 70121 does not improve AUC. Reverting changes.
Training on augumented user 55808 14/50 current_auc = 0.8401065956029313
User 55808 AUC after training: 0.839551410170997
User 55808 does not improve AUC. Reverting changes.
Training on augumented user 104306 15/50 current_auc = 0.8401065956029313
User 104306 AUC after training: 0.8398845214301576
User 104306 does not improve AUC. Reverting changes.
Training on augumented user 70941 16/50 current_auc = 0.8401065956029313
User 70941 AUC after training: 0.8397734843437707
User 70941 does not improve AUC. Reverting changes.
Training on augumented user 133717 17/50 current_auc = 0.8401065956029313
User 133717 AUC after training: 0.8394403730846103
User 133717 does not improve AUC. Reverting changes.
Training on augumented user 2329 18/50 current_auc = 0.8401065956029313
User 2329 AUC after training: 0.8394403730846103
User 2329 does not improve AUC. Reverting changes.
Training on augumented user 102284 19/50 current_auc = 0.8401065956029313
User 102284 AUC after training: 0.8408838552076393
User 102284 improves AUC. Keeping the model.
Training on augumented user 20393 20/50 current_auc = 0.8408838552076393
User 20393 AUC after training: 0.8406617810348654
User 20393 does not improve AUC. Reverting changes.
Training on augumented user 70214 21/50 current_auc = 0.8408838552076393
User 70214 AUC after training: 0.8407728181212524
User 70214 does not improve AUC. Reverting changes.
Training on augumented user 94317 22/50 current_auc = 0.8408838552076393
User 94317 AUC after training: 0.8409948922940262
User 94317 improves AUC. Keeping the model.
Training on augumented user 78896 23/50 current_auc = 0.8409948922940262
User 78896 AUC after training: 0.8413280035531867
User 78896 improves AUC. Keeping the model.
Training on augumented user 138372 24/50 current_auc = 0.8413280035531867
User 138372 AUC after training: 0.8412169664667999
User 138372 does not improve AUC. Reverting changes.
Training on augumented user 135931 25/50 current_auc = 0.8413280035531867
User 135931 AUC after training: 0.8417721518987342
User 135931 improves AUC. Keeping the model.
Training on augumented user 102599 26/50 current_auc = 0.8417721518987342
User 102599 AUC after training: 0.841494559182767
User 102599 does not improve AUC. Reverting changes.
Training on augumented user 107470 27/50 current_auc = 0.8417721518987342
User 107470 AUC after training: 0.8414390406395736
User 107470 does not improve AUC. Reverting changes.
Training on augumented user 55060 28/50 current_auc = 0.8417721518987342
User 55060 AUC after training: 0.8408838552076393
User 55060 does not improve AUC. Reverting changes.
Training on augumented user 85461 29/50 current_auc = 0.8417721518987342
User 85461 AUC after training: 0.8413280035531867
User 85461 does not improve AUC. Reverting changes.
Training on augumented user 17409 30/50 current_auc = 0.8417721518987342
User 17409 AUC after training: 0.8414390406395736
User 17409 does not improve AUC. Reverting changes.
Training on augumented user 89230 31/50 current_auc = 0.8417721518987342
User 89230 AUC after training: 0.8412169664667999
User 89230 does not improve AUC. Reverting changes.
Training on augumented user 17912 32/50 current_auc = 0.8417721518987342
User 17912 AUC after training: 0.8416611148123472
User 17912 does not improve AUC. Reverting changes.
Training on augumented user 95108 33/50 current_auc = 0.8417721518987342
User 95108 AUC after training: 0.841883188985121
User 95108 improves AUC. Keeping the model.
Training on augumented user 38688 34/50 current_auc = 0.841883188985121
User 38688 AUC after training: 0.8406617810348654
User 38688 does not improve AUC. Reverting changes.
Training on augumented user 76954 35/50 current_auc = 0.841883188985121
User 76954 AUC after training: 0.841883188985121
User 76954 does not improve AUC. Reverting changes.
Training on augumented user 86996 36/50 current_auc = 0.841883188985121
User 86996 AUC after training: 0.8422163002442816
User 86996 improves AUC. Keeping the model.
Training on augumented user 28645 37/50 current_auc = 0.8422163002442816
User 28645 AUC after training: 0.8416611148123474
User 28645 does not improve AUC. Reverting changes.
Training on augumented user 42345 38/50 current_auc = 0.8422163002442816
User 42345 AUC after training: 0.8416611148123472
User 42345 does not improve AUC. Reverting changes.
Training on augumented user 102887 39/50 current_auc = 0.8422163002442816
User 102887 AUC after training: 0.8417721518987342
User 102887 does not improve AUC. Reverting changes.
Training on augumented user 59391 40/50 current_auc = 0.8422163002442816
User 59391 AUC after training: 0.841883188985121
User 59391 does not improve AUC. Reverting changes.
Training on augumented user 64754 41/50 current_auc = 0.8422163002442816
User 64754 AUC after training: 0.8413835220963802
User 64754 does not improve AUC. Reverting changes.
Training on augumented user 20123 42/50 current_auc = 0.8422163002442816
User 20123 AUC after training: 0.841883188985121
User 20123 does not improve AUC. Reverting changes.
Training on augumented user 77568 43/50 current_auc = 0.8422163002442816
User 77568 AUC after training: 0.8421052631578948
User 77568 does not improve AUC. Reverting changes.
Training on augumented user 99040 44/50 current_auc = 0.8422163002442816
User 99040 AUC after training: 0.8412169664667999
User 99040 does not improve AUC. Reverting changes.
Training on augumented user 108002 45/50 current_auc = 0.8422163002442816
User 108002 AUC after training: 0.8414390406395736
User 108002 does not improve AUC. Reverting changes.
Training on augumented user 23376 46/50 current_auc = 0.8422163002442816
User 23376 AUC after training: 0.8422163002442816
User 23376 does not improve AUC. Reverting changes.
Training on augumented user 106684 47/50 current_auc = 0.8422163002442816
User 106684 AUC after training: 0.8416611148123473
User 106684 does not improve AUC. Reverting changes.
Training on augumented user 127076 48/50 current_auc = 0.8422163002442816
User 127076 AUC after training: 0.8412169664667999
User 127076 does not improve AUC. Reverting changes.
Training on augumented user 42645 49/50 current_auc = 0.8422163002442816
User 42645 AUC after training: 0.8413280035531867
User 42645 does not improve AUC. Reverting changes.
[2024-12-02 18:35:22.262076] start test user 58483 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:22.812847] start test user 58483 106/568 recall augumented users by random, augumented_users = [100277, 3924, 59227, 63102, 50502, 92203, 49344, 49276, 68801, 3192, 109631, 7334, 101747, 90517, 48327, 99909, 107437, 85090, 115161, 56979, 28293, 48247, 91098, 75030, 41320, 50348, 6719, 131834, 40988, 36140, 92186, 51484, 19242, 11732, 47005, 6640, 91299, 25761, 66203, 7825, 82543, 34726, 69595, 40737, 78183, 61284, 7970, 26764, 157, 89747]
[2024-12-02 18:35:22.827900] user = 58483 Cloud 106/568
[2024-12-02 18:35:22.843692] user = 58483 Local 106/568
[2024-12-02 18:35:22.886900] user = 58483 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:25.427843] user = 58483 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5180335968379446
Training on augumented user 100277 0/50 current_auc = 0.5180335968379446
User 100277 AUC after training: 0.5190217391304348
User 100277 improves AUC. Keeping the model.
Training on augumented user 3924 1/50 current_auc = 0.5190217391304348
User 3924 AUC after training: 0.5187747035573123
User 3924 does not improve AUC. Reverting changes.
Training on augumented user 59227 2/50 current_auc = 0.5190217391304348
User 59227 AUC after training: 0.5195158102766798
User 59227 improves AUC. Keeping the model.
Training on augumented user 63102 3/50 current_auc = 0.5195158102766798
User 63102 AUC after training: 0.5187747035573123
User 63102 does not improve AUC. Reverting changes.
Training on augumented user 50502 4/50 current_auc = 0.5195158102766798
User 50502 AUC after training: 0.5195158102766798
User 50502 does not improve AUC. Reverting changes.
Training on augumented user 92203 5/50 current_auc = 0.5195158102766798
User 92203 AUC after training: 0.5180335968379447
User 92203 does not improve AUC. Reverting changes.
Training on augumented user 49344 6/50 current_auc = 0.5195158102766798
User 49344 AUC after training: 0.5195158102766799
User 49344 improves AUC. Keeping the model.
Training on augumented user 49276 7/50 current_auc = 0.5195158102766799
User 49276 AUC after training: 0.5202569169960474
User 49276 improves AUC. Keeping the model.
Training on augumented user 68801 8/50 current_auc = 0.5202569169960474
User 68801 AUC after training: 0.5190217391304348
User 68801 does not improve AUC. Reverting changes.
Training on augumented user 3192 9/50 current_auc = 0.5202569169960474
User 3192 AUC after training: 0.5207509881422925
User 3192 improves AUC. Keeping the model.
Training on augumented user 109631 10/50 current_auc = 0.5207509881422925
User 109631 AUC after training: 0.5195158102766799
User 109631 does not improve AUC. Reverting changes.
Training on augumented user 7334 11/50 current_auc = 0.5207509881422925
User 7334 AUC after training: 0.5202569169960474
User 7334 does not improve AUC. Reverting changes.
Training on augumented user 101747 12/50 current_auc = 0.5207509881422925
User 101747 AUC after training: 0.5202569169960474
User 101747 does not improve AUC. Reverting changes.
Training on augumented user 90517 13/50 current_auc = 0.5207509881422925
User 90517 AUC after training: 0.520998023715415
User 90517 improves AUC. Keeping the model.
Training on augumented user 48327 14/50 current_auc = 0.520998023715415
User 48327 AUC after training: 0.5192687747035574
User 48327 does not improve AUC. Reverting changes.
Training on augumented user 99909 15/50 current_auc = 0.520998023715415
User 99909 AUC after training: 0.5207509881422925
User 99909 does not improve AUC. Reverting changes.
Training on augumented user 107437 16/50 current_auc = 0.520998023715415
User 107437 AUC after training: 0.5207509881422925
User 107437 does not improve AUC. Reverting changes.
Training on augumented user 85090 17/50 current_auc = 0.520998023715415
User 85090 AUC after training: 0.5207509881422925
User 85090 does not improve AUC. Reverting changes.
Training on augumented user 115161 18/50 current_auc = 0.520998023715415
User 115161 AUC after training: 0.52149209486166
User 115161 improves AUC. Keeping the model.
Training on augumented user 56979 19/50 current_auc = 0.52149209486166
User 56979 AUC after training: 0.5212450592885376
User 56979 does not improve AUC. Reverting changes.
Training on augumented user 28293 20/50 current_auc = 0.52149209486166
User 28293 AUC after training: 0.5207509881422925
User 28293 does not improve AUC. Reverting changes.
Training on augumented user 48247 21/50 current_auc = 0.52149209486166
User 48247 AUC after training: 0.5207509881422925
User 48247 does not improve AUC. Reverting changes.
Training on augumented user 91098 22/50 current_auc = 0.52149209486166
User 91098 AUC after training: 0.5197628458498023
User 91098 does not improve AUC. Reverting changes.
Training on augumented user 75030 23/50 current_auc = 0.52149209486166
User 75030 AUC after training: 0.52149209486166
User 75030 does not improve AUC. Reverting changes.
Training on augumented user 41320 24/50 current_auc = 0.52149209486166
User 41320 AUC after training: 0.5202569169960474
User 41320 does not improve AUC. Reverting changes.
Training on augumented user 50348 25/50 current_auc = 0.52149209486166
User 50348 AUC after training: 0.5217391304347826
User 50348 improves AUC. Keeping the model.
Training on augumented user 6719 26/50 current_auc = 0.5217391304347826
User 6719 AUC after training: 0.5182806324110671
User 6719 does not improve AUC. Reverting changes.
Training on augumented user 131834 27/50 current_auc = 0.5217391304347826
User 131834 AUC after training: 0.5214920948616599
User 131834 does not improve AUC. Reverting changes.
Training on augumented user 40988 28/50 current_auc = 0.5217391304347826
User 40988 AUC after training: 0.520998023715415
User 40988 does not improve AUC. Reverting changes.
Training on augumented user 36140 29/50 current_auc = 0.5217391304347826
User 36140 AUC after training: 0.5217391304347826
User 36140 does not improve AUC. Reverting changes.
Training on augumented user 92186 30/50 current_auc = 0.5217391304347826
User 92186 AUC after training: 0.52149209486166
User 92186 does not improve AUC. Reverting changes.
Training on augumented user 51484 31/50 current_auc = 0.5217391304347826
User 51484 AUC after training: 0.520998023715415
User 51484 does not improve AUC. Reverting changes.
Training on augumented user 19242 32/50 current_auc = 0.5217391304347826
User 19242 AUC after training: 0.5195158102766798
User 19242 does not improve AUC. Reverting changes.
Training on augumented user 11732 33/50 current_auc = 0.5217391304347826
User 11732 AUC after training: 0.5212450592885376
User 11732 does not improve AUC. Reverting changes.
Training on augumented user 47005 34/50 current_auc = 0.5217391304347826
User 47005 AUC after training: 0.5222332015810276
User 47005 improves AUC. Keeping the model.
Training on augumented user 6640 35/50 current_auc = 0.5222332015810276
User 6640 AUC after training: 0.5227272727272727
User 6640 improves AUC. Keeping the model.
Training on augumented user 91299 36/50 current_auc = 0.5227272727272727
User 91299 AUC after training: 0.5227272727272727
User 91299 does not improve AUC. Reverting changes.
Training on augumented user 25761 37/50 current_auc = 0.5227272727272727
User 25761 AUC after training: 0.5227272727272727
User 25761 does not improve AUC. Reverting changes.
Training on augumented user 66203 38/50 current_auc = 0.5227272727272727
User 66203 AUC after training: 0.5217391304347826
User 66203 does not improve AUC. Reverting changes.
Training on augumented user 7825 39/50 current_auc = 0.5227272727272727
User 7825 AUC after training: 0.5224802371541502
User 7825 does not improve AUC. Reverting changes.
Training on augumented user 82543 40/50 current_auc = 0.5227272727272727
User 82543 AUC after training: 0.5229743083003953
User 82543 improves AUC. Keeping the model.
Training on augumented user 34726 41/50 current_auc = 0.5229743083003953
User 34726 AUC after training: 0.5227272727272727
User 34726 does not improve AUC. Reverting changes.
Training on augumented user 69595 42/50 current_auc = 0.5229743083003953
User 69595 AUC after training: 0.5209980237154149
User 69595 does not improve AUC. Reverting changes.
Training on augumented user 40737 43/50 current_auc = 0.5229743083003953
User 40737 AUC after training: 0.5234683794466403
User 40737 improves AUC. Keeping the model.
Training on augumented user 78183 44/50 current_auc = 0.5234683794466403
User 78183 AUC after training: 0.5229743083003953
User 78183 does not improve AUC. Reverting changes.
Training on augumented user 61284 45/50 current_auc = 0.5234683794466403
User 61284 AUC after training: 0.5234683794466403
User 61284 does not improve AUC. Reverting changes.
Training on augumented user 7970 46/50 current_auc = 0.5234683794466403
User 7970 AUC after training: 0.5232213438735178
User 7970 does not improve AUC. Reverting changes.
Training on augumented user 26764 47/50 current_auc = 0.5234683794466403
User 26764 AUC after training: 0.5222332015810277
User 26764 does not improve AUC. Reverting changes.
Training on augumented user 157 48/50 current_auc = 0.5234683794466403
User 157 AUC after training: 0.5224802371541502
User 157 does not improve AUC. Reverting changes.
Training on augumented user 89747 49/50 current_auc = 0.5234683794466403
User 89747 AUC after training: 0.5229743083003953
User 89747 does not improve AUC. Reverting changes.
[2024-12-02 18:35:54.931759] start test user 58498 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:55.637155] start test user 58498 107/568 recall augumented users by random, augumented_users = [56792, 78796, 81680, 124700, 119309, 45505, 134658, 6247, 42271, 5826, 119506, 66981, 43385, 50136, 74756, 30824, 22798, 30930, 12778, 13486, 122898, 112627, 68858, 119476, 12958, 121431, 80220, 73436, 26425, 110978, 27522, 18459, 91619, 130592, 56539, 10527, 88129, 27792, 13743, 2224, 67454, 40535, 56818, 120153, 20231, 75251, 126560, 123631, 45289, 72890]
[2024-12-02 18:35:55.658952] user = 58498 Cloud 107/568
[2024-12-02 18:35:55.684314] user = 58498 Local 107/568
[2024-12-02 18:35:55.788917] user = 58498 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:58.417332] user = 58498 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6712280701754386
Training on augumented user 56792 0/50 current_auc = 0.6712280701754386
User 56792 AUC after training: 0.6698245614035088
User 56792 does not improve AUC. Reverting changes.
Training on augumented user 78796 1/50 current_auc = 0.6712280701754386
User 78796 AUC after training: 0.6714035087719299
User 78796 improves AUC. Keeping the model.
Training on augumented user 81680 2/50 current_auc = 0.6714035087719299
User 81680 AUC after training: 0.6687719298245614
User 81680 does not improve AUC. Reverting changes.
Training on augumented user 124700 3/50 current_auc = 0.6714035087719299
User 124700 AUC after training: 0.6707017543859648
User 124700 does not improve AUC. Reverting changes.
Training on augumented user 119309 4/50 current_auc = 0.6714035087719299
User 119309 AUC after training: 0.6717543859649122
User 119309 improves AUC. Keeping the model.
Training on augumented user 45505 5/50 current_auc = 0.6717543859649122
User 45505 AUC after training: 0.6710526315789473
User 45505 does not improve AUC. Reverting changes.
Training on augumented user 134658 6/50 current_auc = 0.6717543859649122
User 134658 AUC after training: 0.6715789473684209
User 134658 does not improve AUC. Reverting changes.
Training on augumented user 6247 7/50 current_auc = 0.6717543859649122
User 6247 AUC after training: 0.6685964912280701
User 6247 does not improve AUC. Reverting changes.
Training on augumented user 42271 8/50 current_auc = 0.6717543859649122
User 42271 AUC after training: 0.6721052631578948
User 42271 improves AUC. Keeping the model.
Training on augumented user 5826 9/50 current_auc = 0.6721052631578948
User 5826 AUC after training: 0.6698245614035088
User 5826 does not improve AUC. Reverting changes.
Training on augumented user 119506 10/50 current_auc = 0.6721052631578948
User 119506 AUC after training: 0.6680701754385965
User 119506 does not improve AUC. Reverting changes.
Training on augumented user 66981 11/50 current_auc = 0.6721052631578948
User 66981 AUC after training: 0.6712280701754386
User 66981 does not improve AUC. Reverting changes.
Training on augumented user 43385 12/50 current_auc = 0.6721052631578948
User 43385 AUC after training: 0.6705263157894736
User 43385 does not improve AUC. Reverting changes.
Training on augumented user 50136 13/50 current_auc = 0.6721052631578948
User 50136 AUC after training: 0.6717543859649123
User 50136 does not improve AUC. Reverting changes.
Training on augumented user 74756 14/50 current_auc = 0.6721052631578948
User 74756 AUC after training: 0.6708771929824562
User 74756 does not improve AUC. Reverting changes.
Training on augumented user 30824 15/50 current_auc = 0.6721052631578948
User 30824 AUC after training: 0.6717543859649122
User 30824 does not improve AUC. Reverting changes.
Training on augumented user 22798 16/50 current_auc = 0.6721052631578948
User 22798 AUC after training: 0.6717543859649123
User 22798 does not improve AUC. Reverting changes.
Training on augumented user 30930 17/50 current_auc = 0.6721052631578948
User 30930 AUC after training: 0.6712280701754386
User 30930 does not improve AUC. Reverting changes.
Training on augumented user 12778 18/50 current_auc = 0.6721052631578948
User 12778 AUC after training: 0.6670175438596491
User 12778 does not improve AUC. Reverting changes.
Training on augumented user 13486 19/50 current_auc = 0.6721052631578948
User 13486 AUC after training: 0.6701754385964912
User 13486 does not improve AUC. Reverting changes.
Training on augumented user 122898 20/50 current_auc = 0.6721052631578948
User 122898 AUC after training: 0.671578947368421
User 122898 does not improve AUC. Reverting changes.
Training on augumented user 112627 21/50 current_auc = 0.6721052631578948
User 112627 AUC after training: 0.6703508771929825
User 112627 does not improve AUC. Reverting changes.
Training on augumented user 68858 22/50 current_auc = 0.6721052631578948
User 68858 AUC after training: 0.671578947368421
User 68858 does not improve AUC. Reverting changes.
Training on augumented user 119476 23/50 current_auc = 0.6721052631578948
User 119476 AUC after training: 0.6707017543859649
User 119476 does not improve AUC. Reverting changes.
Training on augumented user 12958 24/50 current_auc = 0.6721052631578948
User 12958 AUC after training: 0.6707017543859649
User 12958 does not improve AUC. Reverting changes.
Training on augumented user 121431 25/50 current_auc = 0.6721052631578948
User 121431 AUC after training: 0.6721052631578948
User 121431 does not improve AUC. Reverting changes.
Training on augumented user 80220 26/50 current_auc = 0.6721052631578948
User 80220 AUC after training: 0.6712280701754386
User 80220 does not improve AUC. Reverting changes.
Training on augumented user 73436 27/50 current_auc = 0.6721052631578948
User 73436 AUC after training: 0.6703508771929825
User 73436 does not improve AUC. Reverting changes.
Training on augumented user 26425 28/50 current_auc = 0.6721052631578948
User 26425 AUC after training: 0.6717543859649122
User 26425 does not improve AUC. Reverting changes.
Training on augumented user 110978 29/50 current_auc = 0.6721052631578948
User 110978 AUC after training: 0.6707017543859649
User 110978 does not improve AUC. Reverting changes.
Training on augumented user 27522 30/50 current_auc = 0.6721052631578948
User 27522 AUC after training: 0.6719298245614035
User 27522 does not improve AUC. Reverting changes.
Training on augumented user 18459 31/50 current_auc = 0.6721052631578948
User 18459 AUC after training: 0.6721052631578948
User 18459 does not improve AUC. Reverting changes.
Training on augumented user 91619 32/50 current_auc = 0.6721052631578948
User 91619 AUC after training: 0.6710526315789473
User 91619 does not improve AUC. Reverting changes.
Training on augumented user 130592 33/50 current_auc = 0.6721052631578948
User 130592 AUC after training: 0.6703508771929824
User 130592 does not improve AUC. Reverting changes.
Training on augumented user 56539 34/50 current_auc = 0.6721052631578948
User 56539 AUC after training: 0.6714035087719298
User 56539 does not improve AUC. Reverting changes.
Training on augumented user 10527 35/50 current_auc = 0.6721052631578948
User 10527 AUC after training: 0.6692982456140351
User 10527 does not improve AUC. Reverting changes.
Training on augumented user 88129 36/50 current_auc = 0.6721052631578948
User 88129 AUC after training: 0.6721052631578948
User 88129 does not improve AUC. Reverting changes.
Training on augumented user 27792 37/50 current_auc = 0.6721052631578948
User 27792 AUC after training: 0.6717543859649122
User 27792 does not improve AUC. Reverting changes.
Training on augumented user 13743 38/50 current_auc = 0.6721052631578948
User 13743 AUC after training: 0.67
User 13743 does not improve AUC. Reverting changes.
Training on augumented user 2224 39/50 current_auc = 0.6721052631578948
User 2224 AUC after training: 0.6708771929824561
User 2224 does not improve AUC. Reverting changes.
Training on augumented user 67454 40/50 current_auc = 0.6721052631578948
User 67454 AUC after training: 0.671578947368421
User 67454 does not improve AUC. Reverting changes.
Training on augumented user 40535 41/50 current_auc = 0.6721052631578948
User 40535 AUC after training: 0.6699999999999999
User 40535 does not improve AUC. Reverting changes.
Training on augumented user 56818 42/50 current_auc = 0.6721052631578948
User 56818 AUC after training: 0.671578947368421
User 56818 does not improve AUC. Reverting changes.
Training on augumented user 120153 43/50 current_auc = 0.6721052631578948
User 120153 AUC after training: 0.6710526315789473
User 120153 does not improve AUC. Reverting changes.
Training on augumented user 20231 44/50 current_auc = 0.6721052631578948
User 20231 AUC after training: 0.6717543859649122
User 20231 does not improve AUC. Reverting changes.
Training on augumented user 75251 45/50 current_auc = 0.6721052631578948
User 75251 AUC after training: 0.6705263157894736
User 75251 does not improve AUC. Reverting changes.
Training on augumented user 126560 46/50 current_auc = 0.6721052631578948
User 126560 AUC after training: 0.6710526315789472
User 126560 does not improve AUC. Reverting changes.
Training on augumented user 123631 47/50 current_auc = 0.6721052631578948
User 123631 AUC after training: 0.671578947368421
User 123631 does not improve AUC. Reverting changes.
Training on augumented user 45289 48/50 current_auc = 0.6721052631578948
User 45289 AUC after training: 0.6717543859649122
User 45289 does not improve AUC. Reverting changes.
Training on augumented user 72890 49/50 current_auc = 0.6721052631578948
User 72890 AUC after training: 0.6698245614035088
User 72890 does not improve AUC. Reverting changes.
[2024-12-02 18:36:28.284537] start test user 58519 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:28.699967] start test user 58519 108/568 recall augumented users by random, augumented_users = [34773, 65246, 118635, 89001, 110649, 74186, 128886, 13267, 58862, 13100, 10990, 91300, 53812, 37746, 71004, 61879, 100010, 130004, 129010, 94560, 93606, 36481, 87825, 61188, 112108, 41875, 25669, 111644, 107401, 28849, 35261, 7858, 117261, 56075, 78547, 109044, 37428, 58965, 82776, 85006, 83200, 5570, 91559, 131905, 545, 18127, 13153, 46925, 93403, 12330]
[2024-12-02 18:36:28.714468] user = 58519 Cloud 108/568
[2024-12-02 18:36:28.724518] user = 58519 Local 108/568
[2024-12-02 18:36:28.743471] user = 58519 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:31.384865] user = 58519 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 34773 0/50 current_auc = 0.5
User 34773 AUC after training: 0.5
User 34773 does not improve AUC. Reverting changes.
Training on augumented user 65246 1/50 current_auc = 0.5
User 65246 AUC after training: 0.5
User 65246 does not improve AUC. Reverting changes.
Training on augumented user 118635 2/50 current_auc = 0.5
User 118635 AUC after training: 0.5
User 118635 does not improve AUC. Reverting changes.
Training on augumented user 89001 3/50 current_auc = 0.5
User 89001 AUC after training: 0.5
User 89001 does not improve AUC. Reverting changes.
Training on augumented user 110649 4/50 current_auc = 0.5
User 110649 AUC after training: 0.5
User 110649 does not improve AUC. Reverting changes.
Training on augumented user 74186 5/50 current_auc = 0.5
User 74186 AUC after training: 0.5
User 74186 does not improve AUC. Reverting changes.
Training on augumented user 128886 6/50 current_auc = 0.5
User 128886 AUC after training: 0.5
User 128886 does not improve AUC. Reverting changes.
Training on augumented user 13267 7/50 current_auc = 0.5
User 13267 AUC after training: 0.5
User 13267 does not improve AUC. Reverting changes.
Training on augumented user 58862 8/50 current_auc = 0.5
User 58862 AUC after training: 0.5
User 58862 does not improve AUC. Reverting changes.
Training on augumented user 13100 9/50 current_auc = 0.5
User 13100 AUC after training: 0.5
User 13100 does not improve AUC. Reverting changes.
Training on augumented user 10990 10/50 current_auc = 0.5
User 10990 AUC after training: 0.5
User 10990 does not improve AUC. Reverting changes.
Training on augumented user 91300 11/50 current_auc = 0.5
User 91300 AUC after training: 0.5166666666666666
User 91300 improves AUC. Keeping the model.
Training on augumented user 53812 12/50 current_auc = 0.5166666666666666
User 53812 AUC after training: 0.5166666666666666
User 53812 does not improve AUC. Reverting changes.
Training on augumented user 37746 13/50 current_auc = 0.5166666666666666
User 37746 AUC after training: 0.5166666666666666
User 37746 does not improve AUC. Reverting changes.
Training on augumented user 71004 14/50 current_auc = 0.5166666666666666
User 71004 AUC after training: 0.5
User 71004 does not improve AUC. Reverting changes.
Training on augumented user 61879 15/50 current_auc = 0.5166666666666666
User 61879 AUC after training: 0.5
User 61879 does not improve AUC. Reverting changes.
Training on augumented user 100010 16/50 current_auc = 0.5166666666666666
User 100010 AUC after training: 0.5166666666666666
User 100010 does not improve AUC. Reverting changes.
Training on augumented user 130004 17/50 current_auc = 0.5166666666666666
User 130004 AUC after training: 0.5
User 130004 does not improve AUC. Reverting changes.
Training on augumented user 129010 18/50 current_auc = 0.5166666666666666
User 129010 AUC after training: 0.5166666666666666
User 129010 does not improve AUC. Reverting changes.
Training on augumented user 94560 19/50 current_auc = 0.5166666666666666
User 94560 AUC after training: 0.5
User 94560 does not improve AUC. Reverting changes.
Training on augumented user 93606 20/50 current_auc = 0.5166666666666666
User 93606 AUC after training: 0.5166666666666666
User 93606 does not improve AUC. Reverting changes.
Training on augumented user 36481 21/50 current_auc = 0.5166666666666666
User 36481 AUC after training: 0.5166666666666666
User 36481 does not improve AUC. Reverting changes.
Training on augumented user 87825 22/50 current_auc = 0.5166666666666666
User 87825 AUC after training: 0.5166666666666666
User 87825 does not improve AUC. Reverting changes.
Training on augumented user 61188 23/50 current_auc = 0.5166666666666666
User 61188 AUC after training: 0.5
User 61188 does not improve AUC. Reverting changes.
Training on augumented user 112108 24/50 current_auc = 0.5166666666666666
User 112108 AUC after training: 0.5166666666666666
User 112108 does not improve AUC. Reverting changes.
Training on augumented user 41875 25/50 current_auc = 0.5166666666666666
User 41875 AUC after training: 0.5
User 41875 does not improve AUC. Reverting changes.
Training on augumented user 25669 26/50 current_auc = 0.5166666666666666
User 25669 AUC after training: 0.5166666666666666
User 25669 does not improve AUC. Reverting changes.
Training on augumented user 111644 27/50 current_auc = 0.5166666666666666
User 111644 AUC after training: 0.48333333333333334
User 111644 does not improve AUC. Reverting changes.
Training on augumented user 107401 28/50 current_auc = 0.5166666666666666
User 107401 AUC after training: 0.5
User 107401 does not improve AUC. Reverting changes.
Training on augumented user 28849 29/50 current_auc = 0.5166666666666666
User 28849 AUC after training: 0.5166666666666666
User 28849 does not improve AUC. Reverting changes.
Training on augumented user 35261 30/50 current_auc = 0.5166666666666666
User 35261 AUC after training: 0.5
User 35261 does not improve AUC. Reverting changes.
Training on augumented user 7858 31/50 current_auc = 0.5166666666666666
User 7858 AUC after training: 0.5
User 7858 does not improve AUC. Reverting changes.
Training on augumented user 117261 32/50 current_auc = 0.5166666666666666
User 117261 AUC after training: 0.5
User 117261 does not improve AUC. Reverting changes.
Training on augumented user 56075 33/50 current_auc = 0.5166666666666666
User 56075 AUC after training: 0.5166666666666666
User 56075 does not improve AUC. Reverting changes.
Training on augumented user 78547 34/50 current_auc = 0.5166666666666666
User 78547 AUC after training: 0.5
User 78547 does not improve AUC. Reverting changes.
Training on augumented user 109044 35/50 current_auc = 0.5166666666666666
User 109044 AUC after training: 0.48333333333333334
User 109044 does not improve AUC. Reverting changes.
Training on augumented user 37428 36/50 current_auc = 0.5166666666666666
User 37428 AUC after training: 0.5
User 37428 does not improve AUC. Reverting changes.
Training on augumented user 58965 37/50 current_auc = 0.5166666666666666
User 58965 AUC after training: 0.5
User 58965 does not improve AUC. Reverting changes.
Training on augumented user 82776 38/50 current_auc = 0.5166666666666666
User 82776 AUC after training: 0.5166666666666666
User 82776 does not improve AUC. Reverting changes.
Training on augumented user 85006 39/50 current_auc = 0.5166666666666666
User 85006 AUC after training: 0.5166666666666666
User 85006 does not improve AUC. Reverting changes.
Training on augumented user 83200 40/50 current_auc = 0.5166666666666666
User 83200 AUC after training: 0.5
User 83200 does not improve AUC. Reverting changes.
Training on augumented user 5570 41/50 current_auc = 0.5166666666666666
User 5570 AUC after training: 0.48333333333333334
User 5570 does not improve AUC. Reverting changes.
Training on augumented user 91559 42/50 current_auc = 0.5166666666666666
User 91559 AUC after training: 0.48333333333333334
User 91559 does not improve AUC. Reverting changes.
Training on augumented user 131905 43/50 current_auc = 0.5166666666666666
User 131905 AUC after training: 0.5166666666666666
User 131905 does not improve AUC. Reverting changes.
Training on augumented user 545 44/50 current_auc = 0.5166666666666666
User 545 AUC after training: 0.5166666666666666
User 545 does not improve AUC. Reverting changes.
Training on augumented user 18127 45/50 current_auc = 0.5166666666666666
User 18127 AUC after training: 0.48333333333333334
User 18127 does not improve AUC. Reverting changes.
Training on augumented user 13153 46/50 current_auc = 0.5166666666666666
User 13153 AUC after training: 0.5
User 13153 does not improve AUC. Reverting changes.
Training on augumented user 46925 47/50 current_auc = 0.5166666666666666
User 46925 AUC after training: 0.5166666666666666
User 46925 does not improve AUC. Reverting changes.
Training on augumented user 93403 48/50 current_auc = 0.5166666666666666
User 93403 AUC after training: 0.5
User 93403 does not improve AUC. Reverting changes.
Training on augumented user 12330 49/50 current_auc = 0.5166666666666666
User 12330 AUC after training: 0.5
User 12330 does not improve AUC. Reverting changes.
[2024-12-02 18:37:03.696801] start test user 58612 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:04.329109] start test user 58612 109/568 recall augumented users by random, augumented_users = [113462, 80282, 57992, 9446, 116872, 96135, 106562, 95885, 119911, 37364, 72992, 16091, 106899, 14123, 90400, 75947, 14994, 63923, 117304, 41553, 109889, 45926, 126165, 64408, 79135, 70460, 42643, 92159, 158, 24258, 105703, 99207, 60333, 95525, 44045, 113978, 37325, 1661, 23064, 94011, 66608, 11847, 66341, 101550, 73742, 53386, 42479, 47372, 103557, 27703]
[2024-12-02 18:37:04.346804] user = 58612 Cloud 109/568
[2024-12-02 18:37:04.382614] user = 58612 Local 109/568
[2024-12-02 18:37:04.731212] user = 58612 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:07.143380] user = 58612 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6626936026936026
Training on augumented user 113462 0/50 current_auc = 0.6626936026936026
User 113462 AUC after training: 0.6626262626262626
User 113462 does not improve AUC. Reverting changes.
Training on augumented user 80282 1/50 current_auc = 0.6626936026936026
User 80282 AUC after training: 0.6622222222222222
User 80282 does not improve AUC. Reverting changes.
Training on augumented user 57992 2/50 current_auc = 0.6626936026936026
User 57992 AUC after training: 0.6624242424242424
User 57992 does not improve AUC. Reverting changes.
Training on augumented user 9446 3/50 current_auc = 0.6626936026936026
User 9446 AUC after training: 0.6625252525252525
User 9446 does not improve AUC. Reverting changes.
Training on augumented user 116872 4/50 current_auc = 0.6626936026936026
User 116872 AUC after training: 0.662020202020202
User 116872 does not improve AUC. Reverting changes.
Training on augumented user 96135 5/50 current_auc = 0.6626936026936026
User 96135 AUC after training: 0.6624242424242424
User 96135 does not improve AUC. Reverting changes.
Training on augumented user 106562 6/50 current_auc = 0.6626936026936026
User 106562 AUC after training: 0.6612794612794614
User 106562 does not improve AUC. Reverting changes.
Training on augumented user 95885 7/50 current_auc = 0.6626936026936026
User 95885 AUC after training: 0.6624915824915824
User 95885 does not improve AUC. Reverting changes.
Training on augumented user 119911 8/50 current_auc = 0.6626936026936026
User 119911 AUC after training: 0.6626262626262626
User 119911 does not improve AUC. Reverting changes.
Training on augumented user 37364 9/50 current_auc = 0.6626936026936026
User 37364 AUC after training: 0.6622895622895623
User 37364 does not improve AUC. Reverting changes.
Training on augumented user 72992 10/50 current_auc = 0.6626936026936026
User 72992 AUC after training: 0.6617845117845117
User 72992 does not improve AUC. Reverting changes.
Training on augumented user 16091 11/50 current_auc = 0.6626936026936026
User 16091 AUC after training: 0.6626262626262626
User 16091 does not improve AUC. Reverting changes.
Training on augumented user 106899 12/50 current_auc = 0.6626936026936026
User 106899 AUC after training: 0.662087542087542
User 106899 does not improve AUC. Reverting changes.
Training on augumented user 14123 13/50 current_auc = 0.6626936026936026
User 14123 AUC after training: 0.6627609427609428
User 14123 improves AUC. Keeping the model.
Training on augumented user 90400 14/50 current_auc = 0.6627609427609428
User 90400 AUC after training: 0.6621548821548822
User 90400 does not improve AUC. Reverting changes.
Training on augumented user 75947 15/50 current_auc = 0.6627609427609428
User 75947 AUC after training: 0.6626936026936027
User 75947 does not improve AUC. Reverting changes.
Training on augumented user 14994 16/50 current_auc = 0.6627609427609428
User 14994 AUC after training: 0.6623569023569023
User 14994 does not improve AUC. Reverting changes.
Training on augumented user 63923 17/50 current_auc = 0.6627609427609428
User 63923 AUC after training: 0.6614814814814814
User 63923 does not improve AUC. Reverting changes.
Training on augumented user 117304 18/50 current_auc = 0.6627609427609428
User 117304 AUC after training: 0.6623569023569023
User 117304 does not improve AUC. Reverting changes.
Training on augumented user 41553 19/50 current_auc = 0.6627609427609428
User 41553 AUC after training: 0.6623569023569024
User 41553 does not improve AUC. Reverting changes.
Training on augumented user 109889 20/50 current_auc = 0.6627609427609428
User 109889 AUC after training: 0.6636363636363637
User 109889 improves AUC. Keeping the model.
Training on augumented user 45926 21/50 current_auc = 0.6636363636363637
User 45926 AUC after training: 0.662962962962963
User 45926 does not improve AUC. Reverting changes.
Training on augumented user 126165 22/50 current_auc = 0.6636363636363637
User 126165 AUC after training: 0.665117845117845
User 126165 improves AUC. Keeping the model.
Training on augumented user 64408 23/50 current_auc = 0.665117845117845
User 64408 AUC after training: 0.6638383838383838
User 64408 does not improve AUC. Reverting changes.
Training on augumented user 79135 24/50 current_auc = 0.665117845117845
User 79135 AUC after training: 0.6638383838383838
User 79135 does not improve AUC. Reverting changes.
Training on augumented user 70460 25/50 current_auc = 0.665117845117845
User 70460 AUC after training: 0.6636363636363636
User 70460 does not improve AUC. Reverting changes.
Training on augumented user 42643 26/50 current_auc = 0.665117845117845
User 42643 AUC after training: 0.6654545454545454
User 42643 improves AUC. Keeping the model.
Training on augumented user 92159 27/50 current_auc = 0.6654545454545454
User 92159 AUC after training: 0.6657912457912458
User 92159 improves AUC. Keeping the model.
Training on augumented user 158 28/50 current_auc = 0.6657912457912458
User 158 AUC after training: 0.6646464646464646
User 158 does not improve AUC. Reverting changes.
Training on augumented user 24258 29/50 current_auc = 0.6657912457912458
User 24258 AUC after training: 0.6650505050505051
User 24258 does not improve AUC. Reverting changes.
Training on augumented user 105703 30/50 current_auc = 0.6657912457912458
User 105703 AUC after training: 0.6647811447811447
User 105703 does not improve AUC. Reverting changes.
Training on augumented user 99207 31/50 current_auc = 0.6657912457912458
User 99207 AUC after training: 0.6653198653198653
User 99207 does not improve AUC. Reverting changes.
Training on augumented user 60333 32/50 current_auc = 0.6657912457912458
User 60333 AUC after training: 0.6657239057239057
User 60333 does not improve AUC. Reverting changes.
Training on augumented user 95525 33/50 current_auc = 0.6657912457912458
User 95525 AUC after training: 0.6648484848484848
User 95525 does not improve AUC. Reverting changes.
Training on augumented user 44045 34/50 current_auc = 0.6657912457912458
User 44045 AUC after training: 0.6651851851851852
User 44045 does not improve AUC. Reverting changes.
Training on augumented user 113978 35/50 current_auc = 0.6657912457912458
User 113978 AUC after training: 0.6657239057239057
User 113978 does not improve AUC. Reverting changes.
Training on augumented user 37325 36/50 current_auc = 0.6657912457912458
User 37325 AUC after training: 0.6651851851851851
User 37325 does not improve AUC. Reverting changes.
Training on augumented user 1661 37/50 current_auc = 0.6657912457912458
User 1661 AUC after training: 0.6652525252525252
User 1661 does not improve AUC. Reverting changes.
Training on augumented user 23064 38/50 current_auc = 0.6657912457912458
User 23064 AUC after training: 0.6654208754208755
User 23064 does not improve AUC. Reverting changes.
Training on augumented user 94011 39/50 current_auc = 0.6657912457912458
User 94011 AUC after training: 0.6632323232323232
User 94011 does not improve AUC. Reverting changes.
Training on augumented user 66608 40/50 current_auc = 0.6657912457912458
User 66608 AUC after training: 0.6632323232323232
User 66608 does not improve AUC. Reverting changes.
Training on augumented user 11847 41/50 current_auc = 0.6657912457912458
User 11847 AUC after training: 0.664983164983165
User 11847 does not improve AUC. Reverting changes.
Training on augumented user 66341 42/50 current_auc = 0.6657912457912458
User 66341 AUC after training: 0.6653535353535354
User 66341 does not improve AUC. Reverting changes.
Training on augumented user 101550 43/50 current_auc = 0.6657912457912458
User 101550 AUC after training: 0.6652525252525252
User 101550 does not improve AUC. Reverting changes.
Training on augumented user 73742 44/50 current_auc = 0.6657912457912458
User 73742 AUC after training: 0.6653872053872053
User 73742 does not improve AUC. Reverting changes.
Training on augumented user 53386 45/50 current_auc = 0.6657912457912458
User 53386 AUC after training: 0.6648484848484848
User 53386 does not improve AUC. Reverting changes.
Training on augumented user 42479 46/50 current_auc = 0.6657912457912458
User 42479 AUC after training: 0.6648484848484848
User 42479 does not improve AUC. Reverting changes.
Training on augumented user 47372 47/50 current_auc = 0.6657912457912458
User 47372 AUC after training: 0.6653872053872053
User 47372 does not improve AUC. Reverting changes.
Training on augumented user 103557 48/50 current_auc = 0.6657912457912458
User 103557 AUC after training: 0.6655892255892256
User 103557 does not improve AUC. Reverting changes.
Training on augumented user 27703 49/50 current_auc = 0.6657912457912458
User 27703 AUC after training: 0.6643097643097643
User 27703 does not improve AUC. Reverting changes.
[2024-12-02 18:37:40.394618] start test user 58628 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:41.267472] start test user 58628 110/568 recall augumented users by random, augumented_users = [35459, 122867, 86531, 48754, 111702, 44963, 108453, 113904, 6806, 12114, 73726, 108098, 129508, 114416, 74464, 587, 30452, 75758, 33327, 6396, 10583, 30797, 37316, 136080, 136287, 62560, 78492, 3041, 79949, 98224, 129197, 60929, 96703, 58362, 51045, 29874, 39151, 88083, 82901, 134934, 79062, 30877, 107753, 83763, 123324, 1191, 76142, 137900, 119789, 121956]
[2024-12-02 18:37:41.284132] user = 58628 Cloud 110/568
[2024-12-02 18:37:41.296336] user = 58628 Local 110/568
[2024-12-02 18:37:41.494707] user = 58628 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:45.040494] user = 58628 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.686104218362283
Training on augumented user 35459 0/50 current_auc = 0.686104218362283
User 35459 AUC after training: 0.686104218362283
User 35459 does not improve AUC. Reverting changes.
Training on augumented user 122867 1/50 current_auc = 0.686104218362283
User 122867 AUC after training: 0.686104218362283
User 122867 does not improve AUC. Reverting changes.
Training on augumented user 86531 2/50 current_auc = 0.686104218362283
User 86531 AUC after training: 0.684863523573201
User 86531 does not improve AUC. Reverting changes.
Training on augumented user 48754 3/50 current_auc = 0.686104218362283
User 48754 AUC after training: 0.6836228287841191
User 48754 does not improve AUC. Reverting changes.
Training on augumented user 111702 4/50 current_auc = 0.686104218362283
User 111702 AUC after training: 0.684863523573201
User 111702 does not improve AUC. Reverting changes.
Training on augumented user 44963 5/50 current_auc = 0.686104218362283
User 44963 AUC after training: 0.6873449131513647
User 44963 improves AUC. Keeping the model.
Training on augumented user 108453 6/50 current_auc = 0.6873449131513647
User 108453 AUC after training: 0.6873449131513647
User 108453 does not improve AUC. Reverting changes.
Training on augumented user 113904 7/50 current_auc = 0.6873449131513647
User 113904 AUC after training: 0.6861042183622829
User 113904 does not improve AUC. Reverting changes.
Training on augumented user 6806 8/50 current_auc = 0.6873449131513647
User 6806 AUC after training: 0.686104218362283
User 6806 does not improve AUC. Reverting changes.
Training on augumented user 12114 9/50 current_auc = 0.6873449131513647
User 12114 AUC after training: 0.6885856079404467
User 12114 improves AUC. Keeping the model.
Training on augumented user 73726 10/50 current_auc = 0.6885856079404467
User 73726 AUC after training: 0.6885856079404467
User 73726 does not improve AUC. Reverting changes.
Training on augumented user 108098 11/50 current_auc = 0.6885856079404467
User 108098 AUC after training: 0.6898263027295286
User 108098 improves AUC. Keeping the model.
Training on augumented user 129508 12/50 current_auc = 0.6898263027295286
User 129508 AUC after training: 0.6873449131513648
User 129508 does not improve AUC. Reverting changes.
Training on augumented user 114416 13/50 current_auc = 0.6898263027295286
User 114416 AUC after training: 0.6898263027295286
User 114416 does not improve AUC. Reverting changes.
Training on augumented user 74464 14/50 current_auc = 0.6898263027295286
User 74464 AUC after training: 0.6898263027295286
User 74464 does not improve AUC. Reverting changes.
Training on augumented user 587 15/50 current_auc = 0.6898263027295286
User 587 AUC after training: 0.6898263027295286
User 587 does not improve AUC. Reverting changes.
Training on augumented user 30452 16/50 current_auc = 0.6898263027295286
User 30452 AUC after training: 0.6873449131513647
User 30452 does not improve AUC. Reverting changes.
Training on augumented user 75758 17/50 current_auc = 0.6898263027295286
User 75758 AUC after training: 0.6885856079404467
User 75758 does not improve AUC. Reverting changes.
Training on augumented user 33327 18/50 current_auc = 0.6898263027295286
User 33327 AUC after training: 0.6885856079404467
User 33327 does not improve AUC. Reverting changes.
Training on augumented user 6396 19/50 current_auc = 0.6898263027295286
User 6396 AUC after training: 0.6873449131513647
User 6396 does not improve AUC. Reverting changes.
Training on augumented user 10583 20/50 current_auc = 0.6898263027295286
User 10583 AUC after training: 0.6873449131513647
User 10583 does not improve AUC. Reverting changes.
Training on augumented user 30797 21/50 current_auc = 0.6898263027295286
User 30797 AUC after training: 0.6873449131513647
User 30797 does not improve AUC. Reverting changes.
Training on augumented user 37316 22/50 current_auc = 0.6898263027295286
User 37316 AUC after training: 0.6885856079404467
User 37316 does not improve AUC. Reverting changes.
Training on augumented user 136080 23/50 current_auc = 0.6898263027295286
User 136080 AUC after training: 0.686104218362283
User 136080 does not improve AUC. Reverting changes.
Training on augumented user 136287 24/50 current_auc = 0.6898263027295286
User 136287 AUC after training: 0.686104218362283
User 136287 does not improve AUC. Reverting changes.
Training on augumented user 62560 25/50 current_auc = 0.6898263027295286
User 62560 AUC after training: 0.6885856079404467
User 62560 does not improve AUC. Reverting changes.
Training on augumented user 78492 26/50 current_auc = 0.6898263027295286
User 78492 AUC after training: 0.6873449131513647
User 78492 does not improve AUC. Reverting changes.
Training on augumented user 3041 27/50 current_auc = 0.6898263027295286
User 3041 AUC after training: 0.6873449131513647
User 3041 does not improve AUC. Reverting changes.
Training on augumented user 79949 28/50 current_auc = 0.6898263027295286
User 79949 AUC after training: 0.6898263027295286
User 79949 does not improve AUC. Reverting changes.
Training on augumented user 98224 29/50 current_auc = 0.6898263027295286
User 98224 AUC after training: 0.6898263027295286
User 98224 does not improve AUC. Reverting changes.
Training on augumented user 129197 30/50 current_auc = 0.6898263027295286
User 129197 AUC after training: 0.686104218362283
User 129197 does not improve AUC. Reverting changes.
Training on augumented user 60929 31/50 current_auc = 0.6898263027295286
User 60929 AUC after training: 0.6873449131513648
User 60929 does not improve AUC. Reverting changes.
Training on augumented user 96703 32/50 current_auc = 0.6898263027295286
User 96703 AUC after training: 0.684863523573201
User 96703 does not improve AUC. Reverting changes.
Training on augumented user 58362 33/50 current_auc = 0.6898263027295286
User 58362 AUC after training: 0.6873449131513647
User 58362 does not improve AUC. Reverting changes.
Training on augumented user 51045 34/50 current_auc = 0.6898263027295286
User 51045 AUC after training: 0.6885856079404467
User 51045 does not improve AUC. Reverting changes.
Training on augumented user 29874 35/50 current_auc = 0.6898263027295286
User 29874 AUC after training: 0.6873449131513647
User 29874 does not improve AUC. Reverting changes.
Training on augumented user 39151 36/50 current_auc = 0.6898263027295286
User 39151 AUC after training: 0.6923076923076923
User 39151 improves AUC. Keeping the model.
Training on augumented user 88083 37/50 current_auc = 0.6923076923076923
User 88083 AUC after training: 0.6898263027295286
User 88083 does not improve AUC. Reverting changes.
Training on augumented user 82901 38/50 current_auc = 0.6923076923076923
User 82901 AUC after training: 0.6923076923076923
User 82901 does not improve AUC. Reverting changes.
Training on augumented user 134934 39/50 current_auc = 0.6923076923076923
User 134934 AUC after training: 0.6923076923076923
User 134934 does not improve AUC. Reverting changes.
Training on augumented user 79062 40/50 current_auc = 0.6923076923076923
User 79062 AUC after training: 0.6935483870967742
User 79062 improves AUC. Keeping the model.
Training on augumented user 30877 41/50 current_auc = 0.6935483870967742
User 30877 AUC after training: 0.6935483870967742
User 30877 does not improve AUC. Reverting changes.
Training on augumented user 107753 42/50 current_auc = 0.6935483870967742
User 107753 AUC after training: 0.6947890818858561
User 107753 improves AUC. Keeping the model.
Training on augumented user 83763 43/50 current_auc = 0.6947890818858561
User 83763 AUC after training: 0.6935483870967742
User 83763 does not improve AUC. Reverting changes.
Training on augumented user 123324 44/50 current_auc = 0.6947890818858561
User 123324 AUC after training: 0.6923076923076923
User 123324 does not improve AUC. Reverting changes.
Training on augumented user 1191 45/50 current_auc = 0.6947890818858561
User 1191 AUC after training: 0.6898263027295286
User 1191 does not improve AUC. Reverting changes.
Training on augumented user 76142 46/50 current_auc = 0.6947890818858561
User 76142 AUC after training: 0.6947890818858561
User 76142 does not improve AUC. Reverting changes.
Training on augumented user 137900 47/50 current_auc = 0.6947890818858561
User 137900 AUC after training: 0.6923076923076923
User 137900 does not improve AUC. Reverting changes.
Training on augumented user 119789 48/50 current_auc = 0.6947890818858561
User 119789 AUC after training: 0.6910669975186104
User 119789 does not improve AUC. Reverting changes.
Training on augumented user 121956 49/50 current_auc = 0.6947890818858561
User 121956 AUC after training: 0.6947890818858561
User 121956 does not improve AUC. Reverting changes.
[2024-12-02 18:38:17.563429] start test user 58657 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:18.018302] start test user 58657 111/568 recall augumented users by random, augumented_users = [104453, 118862, 111071, 36577, 61587, 72347, 134941, 83093, 83807, 96587, 131701, 81386, 1771, 3863, 83551, 97080, 48303, 120318, 54034, 84348, 58630, 131041, 32355, 82016, 5334, 28048, 47762, 3202, 110733, 13613, 88328, 13019, 96135, 95596, 75357, 49536, 1613, 134818, 124377, 76665, 58048, 65590, 14499, 84197, 109829, 40929, 16202, 117603, 99787, 135821]
[2024-12-02 18:38:18.034550] user = 58657 Cloud 111/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:38:18.041904] user = 58657 Local 111/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:38:18.094523] user = 58657 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:38:19.694975] user = 58657 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 104453 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104453 AUC after training: 0.5
User 104453 does not improve AUC. Reverting changes.
Training on augumented user 118862 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118862 AUC after training: 0.5
User 118862 does not improve AUC. Reverting changes.
Training on augumented user 111071 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111071 AUC after training: 0.5
User 111071 does not improve AUC. Reverting changes.
Training on augumented user 36577 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36577 AUC after training: 0.5
User 36577 does not improve AUC. Reverting changes.
Training on augumented user 61587 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61587 AUC after training: 0.5
User 61587 does not improve AUC. Reverting changes.
Training on augumented user 72347 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72347 AUC after training: 0.5
User 72347 does not improve AUC. Reverting changes.
Training on augumented user 134941 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134941 AUC after training: 0.5
User 134941 does not improve AUC. Reverting changes.
Training on augumented user 83093 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83093 AUC after training: 0.5
User 83093 does not improve AUC. Reverting changes.
Training on augumented user 83807 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83807 AUC after training: 0.5
User 83807 does not improve AUC. Reverting changes.
Training on augumented user 96587 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96587 AUC after training: 0.5
User 96587 does not improve AUC. Reverting changes.
Training on augumented user 131701 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131701 AUC after training: 0.5
User 131701 does not improve AUC. Reverting changes.
Training on augumented user 81386 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81386 AUC after training: 0.5
User 81386 does not improve AUC. Reverting changes.
Training on augumented user 1771 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1771 AUC after training: 0.5
User 1771 does not improve AUC. Reverting changes.
Training on augumented user 3863 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3863 AUC after training: 0.5
User 3863 does not improve AUC. Reverting changes.
Training on augumented user 83551 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83551 AUC after training: 0.5
User 83551 does not improve AUC. Reverting changes.
Training on augumented user 97080 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97080 AUC after training: 0.5
User 97080 does not improve AUC. Reverting changes.
Training on augumented user 48303 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48303 AUC after training: 0.5
User 48303 does not improve AUC. Reverting changes.
Training on augumented user 120318 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120318 AUC after training: 0.5
User 120318 does not improve AUC. Reverting changes.
Training on augumented user 54034 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54034 AUC after training: 0.5
User 54034 does not improve AUC. Reverting changes.
Training on augumented user 84348 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84348 AUC after training: 0.5
User 84348 does not improve AUC. Reverting changes.
Training on augumented user 58630 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58630 AUC after training: 0.5
User 58630 does not improve AUC. Reverting changes.
Training on augumented user 131041 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131041 AUC after training: 0.5
User 131041 does not improve AUC. Reverting changes.
Training on augumented user 32355 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32355 AUC after training: 0.5
User 32355 does not improve AUC. Reverting changes.
Training on augumented user 82016 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82016 AUC after training: 0.5
User 82016 does not improve AUC. Reverting changes.
Training on augumented user 5334 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5334 AUC after training: 0.5
User 5334 does not improve AUC. Reverting changes.
Training on augumented user 28048 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28048 AUC after training: 0.5
User 28048 does not improve AUC. Reverting changes.
Training on augumented user 47762 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47762 AUC after training: 0.5
User 47762 does not improve AUC. Reverting changes.
Training on augumented user 3202 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3202 AUC after training: 0.5
User 3202 does not improve AUC. Reverting changes.
Training on augumented user 110733 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110733 AUC after training: 0.5
User 110733 does not improve AUC. Reverting changes.
Training on augumented user 13613 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13613 AUC after training: 0.5
User 13613 does not improve AUC. Reverting changes.
Training on augumented user 88328 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88328 AUC after training: 0.5
User 88328 does not improve AUC. Reverting changes.
Training on augumented user 13019 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13019 AUC after training: 0.5
User 13019 does not improve AUC. Reverting changes.
Training on augumented user 96135 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96135 AUC after training: 0.5
User 96135 does not improve AUC. Reverting changes.
Training on augumented user 95596 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95596 AUC after training: 0.5
User 95596 does not improve AUC. Reverting changes.
Training on augumented user 75357 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75357 AUC after training: 0.5
User 75357 does not improve AUC. Reverting changes.
Training on augumented user 49536 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49536 AUC after training: 0.5
User 49536 does not improve AUC. Reverting changes.
Training on augumented user 1613 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1613 AUC after training: 0.5
User 1613 does not improve AUC. Reverting changes.
Training on augumented user 134818 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134818 AUC after training: 0.5
User 134818 does not improve AUC. Reverting changes.
Training on augumented user 124377 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124377 AUC after training: 0.5
User 124377 does not improve AUC. Reverting changes.
Training on augumented user 76665 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76665 AUC after training: 0.5
User 76665 does not improve AUC. Reverting changes.
Training on augumented user 58048 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58048 AUC after training: 0.5
User 58048 does not improve AUC. Reverting changes.
Training on augumented user 65590 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65590 AUC after training: 0.5
User 65590 does not improve AUC. Reverting changes.
Training on augumented user 14499 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14499 AUC after training: 0.5
User 14499 does not improve AUC. Reverting changes.
Training on augumented user 84197 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84197 AUC after training: 0.5
User 84197 does not improve AUC. Reverting changes.
Training on augumented user 109829 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109829 AUC after training: 0.5
User 109829 does not improve AUC. Reverting changes.
Training on augumented user 40929 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40929 AUC after training: 0.5
User 40929 does not improve AUC. Reverting changes.
Training on augumented user 16202 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16202 AUC after training: 0.5
User 16202 does not improve AUC. Reverting changes.
Training on augumented user 117603 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117603 AUC after training: 0.5
User 117603 does not improve AUC. Reverting changes.
Training on augumented user 99787 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99787 AUC after training: 0.5
User 99787 does not improve AUC. Reverting changes.
Training on augumented user 135821 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135821 AUC after training: 0.5
User 135821 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:38:45.865435] start test user 58662 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:46.292074] start test user 58662 112/568 recall augumented users by random, augumented_users = [39208, 96082, 30413, 92470, 98580, 76575, 64674, 38971, 51214, 42577, 19967, 121298, 82728, 95109, 92707, 131357, 20978, 65443, 83681, 100547, 42720, 44801, 122058, 106444, 83583, 100666, 48267, 116576, 28302, 75701, 53579, 132269, 129409, 117923, 72812, 20488, 82904, 65162, 66497, 134994, 66073, 13011, 124478, 102294, 48411, 52617, 78508, 97855, 30577, 66750]
[2024-12-02 18:38:46.307250] user = 58662 Cloud 112/568
[2024-12-02 18:38:46.316924] user = 58662 Local 112/568
[2024-12-02 18:38:46.335460] user = 58662 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:49.181980] user = 58662 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 39208 0/50 current_auc = 1.0
User 39208 AUC after training: 1.0
User 39208 does not improve AUC. Reverting changes.
Training on augumented user 96082 1/50 current_auc = 1.0
User 96082 AUC after training: 1.0
User 96082 does not improve AUC. Reverting changes.
Training on augumented user 30413 2/50 current_auc = 1.0
User 30413 AUC after training: 1.0
User 30413 does not improve AUC. Reverting changes.
Training on augumented user 92470 3/50 current_auc = 1.0
User 92470 AUC after training: 1.0
User 92470 does not improve AUC. Reverting changes.
Training on augumented user 98580 4/50 current_auc = 1.0
User 98580 AUC after training: 1.0
User 98580 does not improve AUC. Reverting changes.
Training on augumented user 76575 5/50 current_auc = 1.0
User 76575 AUC after training: 1.0
User 76575 does not improve AUC. Reverting changes.
Training on augumented user 64674 6/50 current_auc = 1.0
User 64674 AUC after training: 1.0
User 64674 does not improve AUC. Reverting changes.
Training on augumented user 38971 7/50 current_auc = 1.0
User 38971 AUC after training: 1.0
User 38971 does not improve AUC. Reverting changes.
Training on augumented user 51214 8/50 current_auc = 1.0
User 51214 AUC after training: 1.0
User 51214 does not improve AUC. Reverting changes.
Training on augumented user 42577 9/50 current_auc = 1.0
User 42577 AUC after training: 1.0
User 42577 does not improve AUC. Reverting changes.
Training on augumented user 19967 10/50 current_auc = 1.0
User 19967 AUC after training: 1.0
User 19967 does not improve AUC. Reverting changes.
Training on augumented user 121298 11/50 current_auc = 1.0
User 121298 AUC after training: 1.0
User 121298 does not improve AUC. Reverting changes.
Training on augumented user 82728 12/50 current_auc = 1.0
User 82728 AUC after training: 1.0
User 82728 does not improve AUC. Reverting changes.
Training on augumented user 95109 13/50 current_auc = 1.0
User 95109 AUC after training: 1.0
User 95109 does not improve AUC. Reverting changes.
Training on augumented user 92707 14/50 current_auc = 1.0
User 92707 AUC after training: 1.0
User 92707 does not improve AUC. Reverting changes.
Training on augumented user 131357 15/50 current_auc = 1.0
User 131357 AUC after training: 1.0
User 131357 does not improve AUC. Reverting changes.
Training on augumented user 20978 16/50 current_auc = 1.0
User 20978 AUC after training: 1.0
User 20978 does not improve AUC. Reverting changes.
Training on augumented user 65443 17/50 current_auc = 1.0
User 65443 AUC after training: 1.0
User 65443 does not improve AUC. Reverting changes.
Training on augumented user 83681 18/50 current_auc = 1.0
User 83681 AUC after training: 1.0
User 83681 does not improve AUC. Reverting changes.
Training on augumented user 100547 19/50 current_auc = 1.0
User 100547 AUC after training: 1.0
User 100547 does not improve AUC. Reverting changes.
Training on augumented user 42720 20/50 current_auc = 1.0
User 42720 AUC after training: 1.0
User 42720 does not improve AUC. Reverting changes.
Training on augumented user 44801 21/50 current_auc = 1.0
User 44801 AUC after training: 1.0
User 44801 does not improve AUC. Reverting changes.
Training on augumented user 122058 22/50 current_auc = 1.0
User 122058 AUC after training: 1.0
User 122058 does not improve AUC. Reverting changes.
Training on augumented user 106444 23/50 current_auc = 1.0
User 106444 AUC after training: 1.0
User 106444 does not improve AUC. Reverting changes.
Training on augumented user 83583 24/50 current_auc = 1.0
User 83583 AUC after training: 1.0
User 83583 does not improve AUC. Reverting changes.
Training on augumented user 100666 25/50 current_auc = 1.0
User 100666 AUC after training: 1.0
User 100666 does not improve AUC. Reverting changes.
Training on augumented user 48267 26/50 current_auc = 1.0
User 48267 AUC after training: 1.0
User 48267 does not improve AUC. Reverting changes.
Training on augumented user 116576 27/50 current_auc = 1.0
User 116576 AUC after training: 1.0
User 116576 does not improve AUC. Reverting changes.
Training on augumented user 28302 28/50 current_auc = 1.0
User 28302 AUC after training: 1.0
User 28302 does not improve AUC. Reverting changes.
Training on augumented user 75701 29/50 current_auc = 1.0
User 75701 AUC after training: 1.0
User 75701 does not improve AUC. Reverting changes.
Training on augumented user 53579 30/50 current_auc = 1.0
User 53579 AUC after training: 1.0
User 53579 does not improve AUC. Reverting changes.
Training on augumented user 132269 31/50 current_auc = 1.0
User 132269 AUC after training: 1.0
User 132269 does not improve AUC. Reverting changes.
Training on augumented user 129409 32/50 current_auc = 1.0
User 129409 AUC after training: 1.0
User 129409 does not improve AUC. Reverting changes.
Training on augumented user 117923 33/50 current_auc = 1.0
User 117923 AUC after training: 1.0
User 117923 does not improve AUC. Reverting changes.
Training on augumented user 72812 34/50 current_auc = 1.0
User 72812 AUC after training: 1.0
User 72812 does not improve AUC. Reverting changes.
Training on augumented user 20488 35/50 current_auc = 1.0
User 20488 AUC after training: 1.0
User 20488 does not improve AUC. Reverting changes.
Training on augumented user 82904 36/50 current_auc = 1.0
User 82904 AUC after training: 1.0
User 82904 does not improve AUC. Reverting changes.
Training on augumented user 65162 37/50 current_auc = 1.0
User 65162 AUC after training: 1.0
User 65162 does not improve AUC. Reverting changes.
Training on augumented user 66497 38/50 current_auc = 1.0
User 66497 AUC after training: 1.0
User 66497 does not improve AUC. Reverting changes.
Training on augumented user 134994 39/50 current_auc = 1.0
User 134994 AUC after training: 1.0
User 134994 does not improve AUC. Reverting changes.
Training on augumented user 66073 40/50 current_auc = 1.0
User 66073 AUC after training: 1.0
User 66073 does not improve AUC. Reverting changes.
Training on augumented user 13011 41/50 current_auc = 1.0
User 13011 AUC after training: 1.0
User 13011 does not improve AUC. Reverting changes.
Training on augumented user 124478 42/50 current_auc = 1.0
User 124478 AUC after training: 1.0
User 124478 does not improve AUC. Reverting changes.
Training on augumented user 102294 43/50 current_auc = 1.0
User 102294 AUC after training: 1.0
User 102294 does not improve AUC. Reverting changes.
Training on augumented user 48411 44/50 current_auc = 1.0
User 48411 AUC after training: 1.0
User 48411 does not improve AUC. Reverting changes.
Training on augumented user 52617 45/50 current_auc = 1.0
User 52617 AUC after training: 1.0
User 52617 does not improve AUC. Reverting changes.
Training on augumented user 78508 46/50 current_auc = 1.0
User 78508 AUC after training: 1.0
User 78508 does not improve AUC. Reverting changes.
Training on augumented user 97855 47/50 current_auc = 1.0
User 97855 AUC after training: 1.0
User 97855 does not improve AUC. Reverting changes.
Training on augumented user 30577 48/50 current_auc = 1.0
User 30577 AUC after training: 1.0
User 30577 does not improve AUC. Reverting changes.
Training on augumented user 66750 49/50 current_auc = 1.0
User 66750 AUC after training: 1.0
User 66750 does not improve AUC. Reverting changes.
[2024-12-02 18:39:19.417203] start test user 58667 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:20.248497] start test user 58667 113/568 recall augumented users by random, augumented_users = [72529, 8882, 115716, 19294, 72077, 115604, 133434, 24607, 59443, 26022, 14846, 26945, 61888, 106720, 51306, 113249, 110585, 117637, 24924, 109203, 4138, 25083, 15031, 56552, 37794, 75254, 24906, 13283, 63559, 65389, 102258, 2031, 20530, 8536, 75807, 61623, 104104, 94007, 74037, 138033, 50896, 40165, 92022, 76677, 39620, 107208, 63818, 25831, 83385, 58720]
[2024-12-02 18:39:20.268256] user = 58667 Cloud 113/568
[2024-12-02 18:39:20.287829] user = 58667 Local 113/568
[2024-12-02 18:39:20.654572] user = 58667 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:23.290745] user = 58667 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6586798214705192
Training on augumented user 72529 0/50 current_auc = 0.6586798214705192
User 72529 AUC after training: 0.6584449142588678
User 72529 does not improve AUC. Reverting changes.
Training on augumented user 8882 1/50 current_auc = 0.6586798214705192
User 8882 AUC after training: 0.6603241719520789
User 8882 improves AUC. Keeping the model.
Training on augumented user 115716 2/50 current_auc = 0.6603241719520789
User 115716 AUC after training: 0.6598543575287762
User 115716 does not improve AUC. Reverting changes.
Training on augumented user 19294 3/50 current_auc = 0.6603241719520789
User 19294 AUC after training: 0.6598543575287761
User 19294 does not improve AUC. Reverting changes.
Training on augumented user 72077 4/50 current_auc = 0.6603241719520789
User 72077 AUC after training: 0.6598543575287761
User 72077 does not improve AUC. Reverting changes.
Training on augumented user 115604 5/50 current_auc = 0.6603241719520789
User 115604 AUC after training: 0.6589147286821705
User 115604 does not improve AUC. Reverting changes.
Training on augumented user 133434 6/50 current_auc = 0.6603241719520789
User 133434 AUC after training: 0.6600892647404275
User 133434 does not improve AUC. Reverting changes.
Training on augumented user 24607 7/50 current_auc = 0.6603241719520789
User 24607 AUC after training: 0.6596194503171248
User 24607 does not improve AUC. Reverting changes.
Training on augumented user 59443 8/50 current_auc = 0.6603241719520789
User 59443 AUC after training: 0.661498708010336
User 59443 improves AUC. Keeping the model.
Training on augumented user 26022 9/50 current_auc = 0.661498708010336
User 26022 AUC after training: 0.661498708010336
User 26022 does not improve AUC. Reverting changes.
Training on augumented user 14846 10/50 current_auc = 0.661498708010336
User 14846 AUC after training: 0.6624383368569414
User 14846 improves AUC. Keeping the model.
Training on augumented user 26945 11/50 current_auc = 0.6624383368569414
User 26945 AUC after training: 0.6624383368569414
User 26945 does not improve AUC. Reverting changes.
Training on augumented user 61888 12/50 current_auc = 0.6624383368569414
User 61888 AUC after training: 0.6624383368569415
User 61888 improves AUC. Keeping the model.
Training on augumented user 106720 13/50 current_auc = 0.6624383368569415
User 106720 AUC after training: 0.661498708010336
User 106720 does not improve AUC. Reverting changes.
Training on augumented user 51306 14/50 current_auc = 0.6624383368569415
User 51306 AUC after training: 0.6622034296452901
User 51306 does not improve AUC. Reverting changes.
Training on augumented user 113249 15/50 current_auc = 0.6624383368569415
User 113249 AUC after training: 0.6631430584918957
User 113249 improves AUC. Keeping the model.
Training on augumented user 110585 16/50 current_auc = 0.6631430584918957
User 110585 AUC after training: 0.6629081512802443
User 110585 does not improve AUC. Reverting changes.
Training on augumented user 117637 17/50 current_auc = 0.6631430584918957
User 117637 AUC after training: 0.6619685224336387
User 117637 does not improve AUC. Reverting changes.
Training on augumented user 24924 18/50 current_auc = 0.6631430584918957
User 24924 AUC after training: 0.6622034296452901
User 24924 does not improve AUC. Reverting changes.
Training on augumented user 109203 19/50 current_auc = 0.6631430584918957
User 109203 AUC after training: 0.661498708010336
User 109203 does not improve AUC. Reverting changes.
Training on augumented user 4138 20/50 current_auc = 0.6631430584918957
User 4138 AUC after training: 0.6622034296452901
User 4138 does not improve AUC. Reverting changes.
Training on augumented user 25083 21/50 current_auc = 0.6631430584918957
User 25083 AUC after training: 0.662673244068593
User 25083 does not improve AUC. Reverting changes.
Training on augumented user 15031 22/50 current_auc = 0.6631430584918957
User 15031 AUC after training: 0.6624383368569415
User 15031 does not improve AUC. Reverting changes.
Training on augumented user 56552 23/50 current_auc = 0.6631430584918957
User 56552 AUC after training: 0.6629081512802443
User 56552 does not improve AUC. Reverting changes.
Training on augumented user 37794 24/50 current_auc = 0.6631430584918957
User 37794 AUC after training: 0.662673244068593
User 37794 does not improve AUC. Reverting changes.
Training on augumented user 75254 25/50 current_auc = 0.6631430584918957
User 75254 AUC after training: 0.6624383368569415
User 75254 does not improve AUC. Reverting changes.
Training on augumented user 24906 26/50 current_auc = 0.6631430584918957
User 24906 AUC after training: 0.6629081512802443
User 24906 does not improve AUC. Reverting changes.
Training on augumented user 13283 27/50 current_auc = 0.6631430584918957
User 13283 AUC after training: 0.6624383368569415
User 13283 does not improve AUC. Reverting changes.
Training on augumented user 63559 28/50 current_auc = 0.6631430584918957
User 63559 AUC after training: 0.6624383368569415
User 63559 does not improve AUC. Reverting changes.
Training on augumented user 65389 29/50 current_auc = 0.6631430584918957
User 65389 AUC after training: 0.6619685224336387
User 65389 does not improve AUC. Reverting changes.
Training on augumented user 102258 30/50 current_auc = 0.6631430584918957
User 102258 AUC after training: 0.6612638007986845
User 102258 does not improve AUC. Reverting changes.
Training on augumented user 2031 31/50 current_auc = 0.6631430584918957
User 2031 AUC after training: 0.6624383368569415
User 2031 does not improve AUC. Reverting changes.
Training on augumented user 20530 32/50 current_auc = 0.6631430584918957
User 20530 AUC after training: 0.6626732440685928
User 20530 does not improve AUC. Reverting changes.
Training on augumented user 8536 33/50 current_auc = 0.6631430584918957
User 8536 AUC after training: 0.6624383368569415
User 8536 does not improve AUC. Reverting changes.
Training on augumented user 75807 34/50 current_auc = 0.6631430584918957
User 75807 AUC after training: 0.6617336152219874
User 75807 does not improve AUC. Reverting changes.
Training on augumented user 61623 35/50 current_auc = 0.6631430584918957
User 61623 AUC after training: 0.6629081512802443
User 61623 does not improve AUC. Reverting changes.
Training on augumented user 104104 36/50 current_auc = 0.6631430584918957
User 104104 AUC after training: 0.6619685224336387
User 104104 does not improve AUC. Reverting changes.
Training on augumented user 94007 37/50 current_auc = 0.6631430584918957
User 94007 AUC after training: 0.6622034296452901
User 94007 does not improve AUC. Reverting changes.
Training on augumented user 74037 38/50 current_auc = 0.6631430584918957
User 74037 AUC after training: 0.6631430584918957
User 74037 does not improve AUC. Reverting changes.
Training on augumented user 138033 39/50 current_auc = 0.6631430584918957
User 138033 AUC after training: 0.6631430584918957
User 138033 does not improve AUC. Reverting changes.
Training on augumented user 50896 40/50 current_auc = 0.6631430584918957
User 50896 AUC after training: 0.6624383368569415
User 50896 does not improve AUC. Reverting changes.
Training on augumented user 40165 41/50 current_auc = 0.6631430584918957
User 40165 AUC after training: 0.6622034296452901
User 40165 does not improve AUC. Reverting changes.
Training on augumented user 92022 42/50 current_auc = 0.6631430584918957
User 92022 AUC after training: 0.6629081512802443
User 92022 does not improve AUC. Reverting changes.
Training on augumented user 76677 43/50 current_auc = 0.6631430584918957
User 76677 AUC after training: 0.6629081512802443
User 76677 does not improve AUC. Reverting changes.
Training on augumented user 39620 44/50 current_auc = 0.6631430584918957
User 39620 AUC after training: 0.6631430584918957
User 39620 does not improve AUC. Reverting changes.
Training on augumented user 107208 45/50 current_auc = 0.6631430584918957
User 107208 AUC after training: 0.6624383368569415
User 107208 does not improve AUC. Reverting changes.
Training on augumented user 63818 46/50 current_auc = 0.6631430584918957
User 63818 AUC after training: 0.6629081512802443
User 63818 does not improve AUC. Reverting changes.
Training on augumented user 25831 47/50 current_auc = 0.6631430584918957
User 25831 AUC after training: 0.6626732440685928
User 25831 does not improve AUC. Reverting changes.
Training on augumented user 83385 48/50 current_auc = 0.6631430584918957
User 83385 AUC after training: 0.662673244068593
User 83385 does not improve AUC. Reverting changes.
Training on augumented user 58720 49/50 current_auc = 0.6631430584918957
User 58720 AUC after training: 0.6622034296452901
User 58720 does not improve AUC. Reverting changes.
[2024-12-02 18:39:57.539269] start test user 58676 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:58.389023] start test user 58676 114/568 recall augumented users by random, augumented_users = [91889, 70940, 81454, 112798, 106449, 23162, 133947, 37013, 68861, 35800, 112066, 59278, 86509, 1722, 51789, 18828, 7359, 93428, 44080, 9852, 12137, 38457, 29765, 4798, 107771, 36669, 47826, 115201, 90935, 35044, 47217, 130024, 108764, 4558, 96818, 129941, 80104, 7886, 58803, 89367, 87572, 77268, 22233, 113449, 15559, 73311, 19674, 1292, 98992, 1881]
[2024-12-02 18:39:58.412329] user = 58676 Cloud 114/568
[2024-12-02 18:39:58.424039] user = 58676 Local 114/568
[2024-12-02 18:39:58.519846] user = 58676 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:00.549929] user = 58676 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7413793103448276
Training on augumented user 91889 0/50 current_auc = 0.7413793103448276
User 91889 AUC after training: 0.7413793103448276
User 91889 does not improve AUC. Reverting changes.
Training on augumented user 70940 1/50 current_auc = 0.7413793103448276
User 70940 AUC after training: 0.75
User 70940 improves AUC. Keeping the model.
Training on augumented user 81454 2/50 current_auc = 0.75
User 81454 AUC after training: 0.75
User 81454 does not improve AUC. Reverting changes.
Training on augumented user 112798 3/50 current_auc = 0.75
User 112798 AUC after training: 0.75
User 112798 does not improve AUC. Reverting changes.
Training on augumented user 106449 4/50 current_auc = 0.75
User 106449 AUC after training: 0.75
User 106449 does not improve AUC. Reverting changes.
Training on augumented user 23162 5/50 current_auc = 0.75
User 23162 AUC after training: 0.7413793103448276
User 23162 does not improve AUC. Reverting changes.
Training on augumented user 133947 6/50 current_auc = 0.75
User 133947 AUC after training: 0.7413793103448276
User 133947 does not improve AUC. Reverting changes.
Training on augumented user 37013 7/50 current_auc = 0.75
User 37013 AUC after training: 0.75
User 37013 does not improve AUC. Reverting changes.
Training on augumented user 68861 8/50 current_auc = 0.75
User 68861 AUC after training: 0.7456896551724138
User 68861 does not improve AUC. Reverting changes.
Training on augumented user 35800 9/50 current_auc = 0.75
User 35800 AUC after training: 0.7456896551724138
User 35800 does not improve AUC. Reverting changes.
Training on augumented user 112066 10/50 current_auc = 0.75
User 112066 AUC after training: 0.7456896551724138
User 112066 does not improve AUC. Reverting changes.
Training on augumented user 59278 11/50 current_auc = 0.75
User 59278 AUC after training: 0.7456896551724138
User 59278 does not improve AUC. Reverting changes.
Training on augumented user 86509 12/50 current_auc = 0.75
User 86509 AUC after training: 0.7456896551724138
User 86509 does not improve AUC. Reverting changes.
Training on augumented user 1722 13/50 current_auc = 0.75
User 1722 AUC after training: 0.7456896551724138
User 1722 does not improve AUC. Reverting changes.
Training on augumented user 51789 14/50 current_auc = 0.75
User 51789 AUC after training: 0.7413793103448276
User 51789 does not improve AUC. Reverting changes.
Training on augumented user 18828 15/50 current_auc = 0.75
User 18828 AUC after training: 0.75
User 18828 does not improve AUC. Reverting changes.
Training on augumented user 7359 16/50 current_auc = 0.75
User 7359 AUC after training: 0.7456896551724138
User 7359 does not improve AUC. Reverting changes.
Training on augumented user 93428 17/50 current_auc = 0.75
User 93428 AUC after training: 0.7456896551724138
User 93428 does not improve AUC. Reverting changes.
Training on augumented user 44080 18/50 current_auc = 0.75
User 44080 AUC after training: 0.75
User 44080 does not improve AUC. Reverting changes.
Training on augumented user 9852 19/50 current_auc = 0.75
User 9852 AUC after training: 0.75
User 9852 does not improve AUC. Reverting changes.
Training on augumented user 12137 20/50 current_auc = 0.75
User 12137 AUC after training: 0.7456896551724138
User 12137 does not improve AUC. Reverting changes.
Training on augumented user 38457 21/50 current_auc = 0.75
User 38457 AUC after training: 0.75
User 38457 does not improve AUC. Reverting changes.
Training on augumented user 29765 22/50 current_auc = 0.75
User 29765 AUC after training: 0.7456896551724138
User 29765 does not improve AUC. Reverting changes.
Training on augumented user 4798 23/50 current_auc = 0.75
User 4798 AUC after training: 0.7413793103448276
User 4798 does not improve AUC. Reverting changes.
Training on augumented user 107771 24/50 current_auc = 0.75
User 107771 AUC after training: 0.7456896551724138
User 107771 does not improve AUC. Reverting changes.
Training on augumented user 36669 25/50 current_auc = 0.75
User 36669 AUC after training: 0.7456896551724138
User 36669 does not improve AUC. Reverting changes.
Training on augumented user 47826 26/50 current_auc = 0.75
User 47826 AUC after training: 0.7456896551724138
User 47826 does not improve AUC. Reverting changes.
Training on augumented user 115201 27/50 current_auc = 0.75
User 115201 AUC after training: 0.7456896551724138
User 115201 does not improve AUC. Reverting changes.
Training on augumented user 90935 28/50 current_auc = 0.75
User 90935 AUC after training: 0.75
User 90935 does not improve AUC. Reverting changes.
Training on augumented user 35044 29/50 current_auc = 0.75
User 35044 AUC after training: 0.75
User 35044 does not improve AUC. Reverting changes.
Training on augumented user 47217 30/50 current_auc = 0.75
User 47217 AUC after training: 0.7370689655172413
User 47217 does not improve AUC. Reverting changes.
Training on augumented user 130024 31/50 current_auc = 0.75
User 130024 AUC after training: 0.75
User 130024 does not improve AUC. Reverting changes.
Training on augumented user 108764 32/50 current_auc = 0.75
User 108764 AUC after training: 0.7456896551724138
User 108764 does not improve AUC. Reverting changes.
Training on augumented user 4558 33/50 current_auc = 0.75
User 4558 AUC after training: 0.75
User 4558 does not improve AUC. Reverting changes.
Training on augumented user 96818 34/50 current_auc = 0.75
User 96818 AUC after training: 0.7456896551724138
User 96818 does not improve AUC. Reverting changes.
Training on augumented user 129941 35/50 current_auc = 0.75
User 129941 AUC after training: 0.7456896551724138
User 129941 does not improve AUC. Reverting changes.
Training on augumented user 80104 36/50 current_auc = 0.75
User 80104 AUC after training: 0.7456896551724138
User 80104 does not improve AUC. Reverting changes.
Training on augumented user 7886 37/50 current_auc = 0.75
User 7886 AUC after training: 0.7456896551724138
User 7886 does not improve AUC. Reverting changes.
Training on augumented user 58803 38/50 current_auc = 0.75
User 58803 AUC after training: 0.7456896551724138
User 58803 does not improve AUC. Reverting changes.
Training on augumented user 89367 39/50 current_auc = 0.75
User 89367 AUC after training: 0.75
User 89367 does not improve AUC. Reverting changes.
Training on augumented user 87572 40/50 current_auc = 0.75
User 87572 AUC after training: 0.75
User 87572 does not improve AUC. Reverting changes.
Training on augumented user 77268 41/50 current_auc = 0.75
User 77268 AUC after training: 0.7456896551724138
User 77268 does not improve AUC. Reverting changes.
Training on augumented user 22233 42/50 current_auc = 0.75
User 22233 AUC after training: 0.75
User 22233 does not improve AUC. Reverting changes.
Training on augumented user 113449 43/50 current_auc = 0.75
User 113449 AUC after training: 0.75
User 113449 does not improve AUC. Reverting changes.
Training on augumented user 15559 44/50 current_auc = 0.75
User 15559 AUC after training: 0.75
User 15559 does not improve AUC. Reverting changes.
Training on augumented user 73311 45/50 current_auc = 0.75
User 73311 AUC after training: 0.7456896551724138
User 73311 does not improve AUC. Reverting changes.
Training on augumented user 19674 46/50 current_auc = 0.75
User 19674 AUC after training: 0.7456896551724138
User 19674 does not improve AUC. Reverting changes.
Training on augumented user 1292 47/50 current_auc = 0.75
User 1292 AUC after training: 0.75
User 1292 does not improve AUC. Reverting changes.
Training on augumented user 98992 48/50 current_auc = 0.75
User 98992 AUC after training: 0.75
User 98992 does not improve AUC. Reverting changes.
Training on augumented user 1881 49/50 current_auc = 0.75
User 1881 AUC after training: 0.75
User 1881 does not improve AUC. Reverting changes.
[2024-12-02 18:40:28.082792] start test user 58700 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:28.545142] start test user 58700 115/568 recall augumented users by random, augumented_users = [83679, 103854, 20120, 8393, 55156, 2378, 86438, 72921, 51374, 23554, 30062, 66333, 82281, 120280, 127484, 73909, 52554, 36698, 101157, 106647, 113875, 100600, 118665, 18876, 128362, 57790, 11924, 120559, 58627, 51242, 62475, 91163, 91369, 130046, 8929, 59660, 116057, 11012, 37598, 72110, 59381, 15838, 75904, 22188, 102488, 81921, 69133, 73697, 75655, 127288]
[2024-12-02 18:40:28.561092] user = 58700 Cloud 115/568
[2024-12-02 18:40:28.571162] user = 58700 Local 115/568
[2024-12-02 18:40:28.611801] user = 58700 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:31.183318] user = 58700 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6481481481481481
Training on augumented user 83679 0/50 current_auc = 0.6481481481481481
User 83679 AUC after training: 0.6507936507936507
User 83679 improves AUC. Keeping the model.
Training on augumented user 103854 1/50 current_auc = 0.6507936507936507
User 103854 AUC after training: 0.6481481481481481
User 103854 does not improve AUC. Reverting changes.
Training on augumented user 20120 2/50 current_auc = 0.6507936507936507
User 20120 AUC after training: 0.6481481481481481
User 20120 does not improve AUC. Reverting changes.
Training on augumented user 8393 3/50 current_auc = 0.6507936507936507
User 8393 AUC after training: 0.6481481481481481
User 8393 does not improve AUC. Reverting changes.
Training on augumented user 55156 4/50 current_auc = 0.6507936507936507
User 55156 AUC after training: 0.6507936507936507
User 55156 does not improve AUC. Reverting changes.
Training on augumented user 2378 5/50 current_auc = 0.6507936507936507
User 2378 AUC after training: 0.6415343915343916
User 2378 does not improve AUC. Reverting changes.
Training on augumented user 86438 6/50 current_auc = 0.6507936507936507
User 86438 AUC after training: 0.6481481481481481
User 86438 does not improve AUC. Reverting changes.
Training on augumented user 72921 7/50 current_auc = 0.6507936507936507
User 72921 AUC after training: 0.6507936507936507
User 72921 does not improve AUC. Reverting changes.
Training on augumented user 51374 8/50 current_auc = 0.6507936507936507
User 51374 AUC after training: 0.6455026455026455
User 51374 does not improve AUC. Reverting changes.
Training on augumented user 23554 9/50 current_auc = 0.6507936507936507
User 23554 AUC after training: 0.6481481481481481
User 23554 does not improve AUC. Reverting changes.
Training on augumented user 30062 10/50 current_auc = 0.6507936507936507
User 30062 AUC after training: 0.6428571428571428
User 30062 does not improve AUC. Reverting changes.
Training on augumented user 66333 11/50 current_auc = 0.6507936507936507
User 66333 AUC after training: 0.6428571428571428
User 66333 does not improve AUC. Reverting changes.
Training on augumented user 82281 12/50 current_auc = 0.6507936507936507
User 82281 AUC after training: 0.6481481481481481
User 82281 does not improve AUC. Reverting changes.
Training on augumented user 120280 13/50 current_auc = 0.6507936507936507
User 120280 AUC after training: 0.6481481481481481
User 120280 does not improve AUC. Reverting changes.
Training on augumented user 127484 14/50 current_auc = 0.6507936507936507
User 127484 AUC after training: 0.6428571428571428
User 127484 does not improve AUC. Reverting changes.
Training on augumented user 73909 15/50 current_auc = 0.6507936507936507
User 73909 AUC after training: 0.6507936507936507
User 73909 does not improve AUC. Reverting changes.
Training on augumented user 52554 16/50 current_auc = 0.6507936507936507
User 52554 AUC after training: 0.6455026455026455
User 52554 does not improve AUC. Reverting changes.
Training on augumented user 36698 17/50 current_auc = 0.6507936507936507
User 36698 AUC after training: 0.6455026455026455
User 36698 does not improve AUC. Reverting changes.
Training on augumented user 101157 18/50 current_auc = 0.6507936507936507
User 101157 AUC after training: 0.6428571428571429
User 101157 does not improve AUC. Reverting changes.
Training on augumented user 106647 19/50 current_auc = 0.6507936507936507
User 106647 AUC after training: 0.6402116402116402
User 106647 does not improve AUC. Reverting changes.
Training on augumented user 113875 20/50 current_auc = 0.6507936507936507
User 113875 AUC after training: 0.6481481481481481
User 113875 does not improve AUC. Reverting changes.
Training on augumented user 100600 21/50 current_auc = 0.6507936507936507
User 100600 AUC after training: 0.6455026455026455
User 100600 does not improve AUC. Reverting changes.
Training on augumented user 118665 22/50 current_auc = 0.6507936507936507
User 118665 AUC after training: 0.6507936507936507
User 118665 does not improve AUC. Reverting changes.
Training on augumented user 18876 23/50 current_auc = 0.6507936507936507
User 18876 AUC after training: 0.6507936507936507
User 18876 does not improve AUC. Reverting changes.
Training on augumented user 128362 24/50 current_auc = 0.6507936507936507
User 128362 AUC after training: 0.6481481481481481
User 128362 does not improve AUC. Reverting changes.
Training on augumented user 57790 25/50 current_auc = 0.6507936507936507
User 57790 AUC after training: 0.6481481481481481
User 57790 does not improve AUC. Reverting changes.
Training on augumented user 11924 26/50 current_auc = 0.6507936507936507
User 11924 AUC after training: 0.6481481481481481
User 11924 does not improve AUC. Reverting changes.
Training on augumented user 120559 27/50 current_auc = 0.6507936507936507
User 120559 AUC after training: 0.6534391534391534
User 120559 improves AUC. Keeping the model.
Training on augumented user 58627 28/50 current_auc = 0.6534391534391534
User 58627 AUC after training: 0.6507936507936507
User 58627 does not improve AUC. Reverting changes.
Training on augumented user 51242 29/50 current_auc = 0.6534391534391534
User 51242 AUC after training: 0.6481481481481481
User 51242 does not improve AUC. Reverting changes.
Training on augumented user 62475 30/50 current_auc = 0.6534391534391534
User 62475 AUC after training: 0.6507936507936507
User 62475 does not improve AUC. Reverting changes.
Training on augumented user 91163 31/50 current_auc = 0.6534391534391534
User 91163 AUC after training: 0.6534391534391534
User 91163 does not improve AUC. Reverting changes.
Training on augumented user 91369 32/50 current_auc = 0.6534391534391534
User 91369 AUC after training: 0.6481481481481481
User 91369 does not improve AUC. Reverting changes.
Training on augumented user 130046 33/50 current_auc = 0.6534391534391534
User 130046 AUC after training: 0.6481481481481481
User 130046 does not improve AUC. Reverting changes.
Training on augumented user 8929 34/50 current_auc = 0.6534391534391534
User 8929 AUC after training: 0.6481481481481481
User 8929 does not improve AUC. Reverting changes.
Training on augumented user 59660 35/50 current_auc = 0.6534391534391534
User 59660 AUC after training: 0.6481481481481481
User 59660 does not improve AUC. Reverting changes.
Training on augumented user 116057 36/50 current_auc = 0.6534391534391534
User 116057 AUC after training: 0.6428571428571428
User 116057 does not improve AUC. Reverting changes.
Training on augumented user 11012 37/50 current_auc = 0.6534391534391534
User 11012 AUC after training: 0.6507936507936507
User 11012 does not improve AUC. Reverting changes.
Training on augumented user 37598 38/50 current_auc = 0.6534391534391534
User 37598 AUC after training: 0.6507936507936507
User 37598 does not improve AUC. Reverting changes.
Training on augumented user 72110 39/50 current_auc = 0.6534391534391534
User 72110 AUC after training: 0.6455026455026455
User 72110 does not improve AUC. Reverting changes.
Training on augumented user 59381 40/50 current_auc = 0.6534391534391534
User 59381 AUC after training: 0.6507936507936507
User 59381 does not improve AUC. Reverting changes.
Training on augumented user 15838 41/50 current_auc = 0.6534391534391534
User 15838 AUC after training: 0.6428571428571428
User 15838 does not improve AUC. Reverting changes.
Training on augumented user 75904 42/50 current_auc = 0.6534391534391534
User 75904 AUC after training: 0.6402116402116402
User 75904 does not improve AUC. Reverting changes.
Training on augumented user 22188 43/50 current_auc = 0.6534391534391534
User 22188 AUC after training: 0.6481481481481481
User 22188 does not improve AUC. Reverting changes.
Training on augumented user 102488 44/50 current_auc = 0.6534391534391534
User 102488 AUC after training: 0.6507936507936507
User 102488 does not improve AUC. Reverting changes.
Training on augumented user 81921 45/50 current_auc = 0.6534391534391534
User 81921 AUC after training: 0.6455026455026456
User 81921 does not improve AUC. Reverting changes.
Training on augumented user 69133 46/50 current_auc = 0.6534391534391534
User 69133 AUC after training: 0.6481481481481481
User 69133 does not improve AUC. Reverting changes.
Training on augumented user 73697 47/50 current_auc = 0.6534391534391534
User 73697 AUC after training: 0.6481481481481481
User 73697 does not improve AUC. Reverting changes.
Training on augumented user 75655 48/50 current_auc = 0.6534391534391534
User 75655 AUC after training: 0.6534391534391534
User 75655 does not improve AUC. Reverting changes.
Training on augumented user 127288 49/50 current_auc = 0.6534391534391534
User 127288 AUC after training: 0.6428571428571428
User 127288 does not improve AUC. Reverting changes.
[2024-12-02 18:41:00.713003] start test user 58706 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:01.411905] start test user 58706 116/568 recall augumented users by random, augumented_users = [3750, 87532, 20157, 114374, 109001, 72905, 100004, 35614, 134252, 14416, 12871, 73332, 92895, 45161, 12379, 54018, 99022, 89901, 47238, 19888, 132061, 65115, 108752, 128145, 109161, 71695, 137625, 87898, 40995, 31757, 53638, 12839, 80903, 108986, 71427, 50125, 77361, 11795, 42974, 98618, 44707, 16237, 83482, 19996, 6867, 81067, 110795, 97251, 73819, 22353]
[2024-12-02 18:41:01.429665] user = 58706 Cloud 116/568
[2024-12-02 18:41:01.448524] user = 58706 Local 116/568
[2024-12-02 18:41:01.532952] user = 58706 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:03.490690] user = 58706 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.656073256127121
Training on augumented user 3750 0/50 current_auc = 0.656073256127121
User 3750 AUC after training: 0.6558039321303528
User 3750 does not improve AUC. Reverting changes.
Training on augumented user 87532 1/50 current_auc = 0.656073256127121
User 87532 AUC after training: 0.6543226501481283
User 87532 does not improve AUC. Reverting changes.
Training on augumented user 20157 2/50 current_auc = 0.656073256127121
User 20157 AUC after training: 0.656342580123889
User 20157 improves AUC. Keeping the model.
Training on augumented user 114374 3/50 current_auc = 0.656342580123889
User 114374 AUC after training: 0.6555346081335847
User 114374 does not improve AUC. Reverting changes.
Training on augumented user 109001 4/50 current_auc = 0.656342580123889
User 109001 AUC after training: 0.6564772421222731
User 109001 improves AUC. Keeping the model.
Training on augumented user 72905 5/50 current_auc = 0.6564772421222731
User 72905 AUC after training: 0.6553999461352007
User 72905 does not improve AUC. Reverting changes.
Training on augumented user 100004 6/50 current_auc = 0.6564772421222731
User 100004 AUC after training: 0.6562079181255049
User 100004 does not improve AUC. Reverting changes.
Training on augumented user 35614 7/50 current_auc = 0.6564772421222731
User 35614 AUC after training: 0.6564772421222731
User 35614 does not improve AUC. Reverting changes.
Training on augumented user 134252 8/50 current_auc = 0.6564772421222731
User 134252 AUC after training: 0.6566119041206572
User 134252 improves AUC. Keeping the model.
Training on augumented user 14416 9/50 current_auc = 0.6566119041206572
User 14416 AUC after training: 0.6568812281174252
User 14416 improves AUC. Keeping the model.
Training on augumented user 12871 10/50 current_auc = 0.6568812281174252
User 12871 AUC after training: 0.6566119041206572
User 12871 does not improve AUC. Reverting changes.
Training on augumented user 73332 11/50 current_auc = 0.6568812281174252
User 73332 AUC after training: 0.6564772421222731
User 73332 does not improve AUC. Reverting changes.
Training on augumented user 92895 12/50 current_auc = 0.6568812281174252
User 92895 AUC after training: 0.6564772421222731
User 92895 does not improve AUC. Reverting changes.
Training on augumented user 45161 13/50 current_auc = 0.6568812281174252
User 45161 AUC after training: 0.6555346081335847
User 45161 does not improve AUC. Reverting changes.
Training on augumented user 12379 14/50 current_auc = 0.6568812281174252
User 12379 AUC after training: 0.6558039321303528
User 12379 does not improve AUC. Reverting changes.
Training on augumented user 54018 15/50 current_auc = 0.6568812281174252
User 54018 AUC after training: 0.6571505521141934
User 54018 improves AUC. Keeping the model.
Training on augumented user 99022 16/50 current_auc = 0.6571505521141934
User 99022 AUC after training: 0.6574198761109614
User 99022 improves AUC. Keeping the model.
Training on augumented user 89901 17/50 current_auc = 0.6574198761109614
User 89901 AUC after training: 0.6567465661190413
User 89901 does not improve AUC. Reverting changes.
Training on augumented user 47238 18/50 current_auc = 0.6574198761109614
User 47238 AUC after training: 0.6572852141125775
User 47238 does not improve AUC. Reverting changes.
Training on augumented user 19888 19/50 current_auc = 0.6574198761109614
User 19888 AUC after training: 0.6568812281174252
User 19888 does not improve AUC. Reverting changes.
Training on augumented user 132061 20/50 current_auc = 0.6574198761109614
User 132061 AUC after training: 0.6568812281174252
User 132061 does not improve AUC. Reverting changes.
Training on augumented user 65115 21/50 current_auc = 0.6574198761109614
User 65115 AUC after training: 0.6578238621061137
User 65115 improves AUC. Keeping the model.
Training on augumented user 108752 22/50 current_auc = 0.6578238621061137
User 108752 AUC after training: 0.6572852141125773
User 108752 does not improve AUC. Reverting changes.
Training on augumented user 128145 23/50 current_auc = 0.6578238621061137
User 128145 AUC after training: 0.6572852141125773
User 128145 does not improve AUC. Reverting changes.
Training on augumented user 109161 24/50 current_auc = 0.6578238621061137
User 109161 AUC after training: 0.6578238621061137
User 109161 does not improve AUC. Reverting changes.
Training on augumented user 71695 25/50 current_auc = 0.6578238621061137
User 71695 AUC after training: 0.6570158901158093
User 71695 does not improve AUC. Reverting changes.
Training on augumented user 137625 26/50 current_auc = 0.6578238621061137
User 137625 AUC after training: 0.6578238621061137
User 137625 does not improve AUC. Reverting changes.
Training on augumented user 87898 27/50 current_auc = 0.6578238621061137
User 87898 AUC after training: 0.6564772421222731
User 87898 does not improve AUC. Reverting changes.
Training on augumented user 40995 28/50 current_auc = 0.6578238621061137
User 40995 AUC after training: 0.6562079181255049
User 40995 does not improve AUC. Reverting changes.
Training on augumented user 31757 29/50 current_auc = 0.6578238621061137
User 31757 AUC after training: 0.6571505521141934
User 31757 does not improve AUC. Reverting changes.
Training on augumented user 53638 30/50 current_auc = 0.6578238621061137
User 53638 AUC after training: 0.6562079181255049
User 53638 does not improve AUC. Reverting changes.
Training on augumented user 12839 31/50 current_auc = 0.6578238621061137
User 12839 AUC after training: 0.6571505521141934
User 12839 does not improve AUC. Reverting changes.
Training on augumented user 80903 32/50 current_auc = 0.6578238621061137
User 80903 AUC after training: 0.6578238621061137
User 80903 does not improve AUC. Reverting changes.
Training on augumented user 108986 33/50 current_auc = 0.6578238621061137
User 108986 AUC after training: 0.6574198761109615
User 108986 does not improve AUC. Reverting changes.
Training on augumented user 71427 34/50 current_auc = 0.6578238621061137
User 71427 AUC after training: 0.6566119041206572
User 71427 does not improve AUC. Reverting changes.
Training on augumented user 50125 35/50 current_auc = 0.6578238621061137
User 50125 AUC after training: 0.6571505521141934
User 50125 does not improve AUC. Reverting changes.
Training on augumented user 77361 36/50 current_auc = 0.6578238621061137
User 77361 AUC after training: 0.6578238621061137
User 77361 does not improve AUC. Reverting changes.
Training on augumented user 11795 37/50 current_auc = 0.6578238621061137
User 11795 AUC after training: 0.6583625100996499
User 11795 improves AUC. Keeping the model.
Training on augumented user 42974 38/50 current_auc = 0.6583625100996499
User 42974 AUC after training: 0.6578238621061137
User 42974 does not improve AUC. Reverting changes.
Training on augumented user 98618 39/50 current_auc = 0.6583625100996499
User 98618 AUC after training: 0.6579585241044977
User 98618 does not improve AUC. Reverting changes.
Training on augumented user 44707 40/50 current_auc = 0.6583625100996499
User 44707 AUC after training: 0.6580931861028818
User 44707 does not improve AUC. Reverting changes.
Training on augumented user 16237 41/50 current_auc = 0.6583625100996499
User 16237 AUC after training: 0.6580931861028817
User 16237 does not improve AUC. Reverting changes.
Training on augumented user 83482 42/50 current_auc = 0.6583625100996499
User 83482 AUC after training: 0.6564772421222731
User 83482 does not improve AUC. Reverting changes.
Training on augumented user 19996 43/50 current_auc = 0.6583625100996499
User 19996 AUC after training: 0.6574198761109615
User 19996 does not improve AUC. Reverting changes.
Training on augumented user 6867 44/50 current_auc = 0.6583625100996499
User 6867 AUC after training: 0.6572852141125775
User 6867 does not improve AUC. Reverting changes.
Training on augumented user 81067 45/50 current_auc = 0.6583625100996499
User 81067 AUC after training: 0.6580931861028817
User 81067 does not improve AUC. Reverting changes.
Training on augumented user 110795 46/50 current_auc = 0.6583625100996499
User 110795 AUC after training: 0.6590358200915701
User 110795 improves AUC. Keeping the model.
Training on augumented user 97251 47/50 current_auc = 0.6590358200915701
User 97251 AUC after training: 0.6590358200915701
User 97251 does not improve AUC. Reverting changes.
Training on augumented user 73819 48/50 current_auc = 0.6590358200915701
User 73819 AUC after training: 0.6593051440883382
User 73819 improves AUC. Keeping the model.
Training on augumented user 22353 49/50 current_auc = 0.6593051440883382
User 22353 AUC after training: 0.6594398060867223
User 22353 improves AUC. Keeping the model.
[2024-12-02 18:41:33.303334] start test user 58730 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:33.766898] start test user 58730 117/568 recall augumented users by random, augumented_users = [120590, 120717, 70125, 47316, 105878, 108167, 86521, 4581, 18256, 31121, 99076, 45475, 60343, 36635, 79339, 116300, 69555, 108105, 31045, 121406, 49575, 100508, 135259, 57139, 90145, 42091, 97686, 40848, 92781, 112572, 100365, 100378, 22044, 23143, 9248, 121796, 44387, 136611, 19067, 105310, 8034, 17654, 77519, 102484, 14758, 96794, 70297, 76478, 47695, 92841]
[2024-12-02 18:41:33.782941] user = 58730 Cloud 117/568
[2024-12-02 18:41:33.815144] user = 58730 Local 117/568
[2024-12-02 18:41:33.903785] user = 58730 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:36.091305] user = 58730 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7637381627151448
Training on augumented user 120590 0/50 current_auc = 0.7637381627151448
User 120590 AUC after training: 0.7627704430773484
User 120590 does not improve AUC. Reverting changes.
Training on augumented user 120717 1/50 current_auc = 0.7637381627151448
User 120717 AUC after training: 0.7638072855464161
User 120717 improves AUC. Keeping the model.
Training on augumented user 70125 2/50 current_auc = 0.7638072855464161
User 70125 AUC after training: 0.7633234257275178
User 70125 does not improve AUC. Reverting changes.
Training on augumented user 47316 3/50 current_auc = 0.7638072855464161
User 47316 AUC after training: 0.7638072855464161
User 47316 does not improve AUC. Reverting changes.
Training on augumented user 105878 4/50 current_auc = 0.7638072855464161
User 105878 AUC after training: 0.7631160572337043
User 105878 does not improve AUC. Reverting changes.
Training on augumented user 108167 5/50 current_auc = 0.7638072855464161
User 108167 AUC after training: 0.7634616713900602
User 108167 does not improve AUC. Reverting changes.
Training on augumented user 86521 6/50 current_auc = 0.7638072855464161
User 86521 AUC after training: 0.7636690398838737
User 86521 does not improve AUC. Reverting changes.
Training on augumented user 4581 7/50 current_auc = 0.7638072855464161
User 4581 AUC after training: 0.7635307942213313
User 4581 does not improve AUC. Reverting changes.
Training on augumented user 18256 8/50 current_auc = 0.7638072855464161
User 18256 AUC after training: 0.7640837768715006
User 18256 improves AUC. Keeping the model.
Training on augumented user 31121 9/50 current_auc = 0.7640837768715006
User 31121 AUC after training: 0.764222022534043
User 31121 improves AUC. Keeping the model.
Training on augumented user 99076 10/50 current_auc = 0.764222022534043
User 99076 AUC after training: 0.7643602681965853
User 99076 improves AUC. Keeping the model.
Training on augumented user 45475 11/50 current_auc = 0.7643602681965853
User 45475 AUC after training: 0.764222022534043
User 45475 does not improve AUC. Reverting changes.
Training on augumented user 60343 12/50 current_auc = 0.7643602681965853
User 60343 AUC after training: 0.7640146540402295
User 60343 does not improve AUC. Reverting changes.
Training on augumented user 36635 13/50 current_auc = 0.7643602681965853
User 36635 AUC after training: 0.7641528997027719
User 36635 does not improve AUC. Reverting changes.
Training on augumented user 79339 14/50 current_auc = 0.7643602681965853
User 79339 AUC after training: 0.7640146540402295
User 79339 does not improve AUC. Reverting changes.
Training on augumented user 116300 15/50 current_auc = 0.7643602681965853
User 116300 AUC after training: 0.7641528997027719
User 116300 does not improve AUC. Reverting changes.
Training on augumented user 69555 16/50 current_auc = 0.7643602681965853
User 69555 AUC after training: 0.7642220225340429
User 69555 does not improve AUC. Reverting changes.
Training on augumented user 108105 17/50 current_auc = 0.7643602681965853
User 108105 AUC after training: 0.7644293910278565
User 108105 improves AUC. Keeping the model.
Training on augumented user 31045 18/50 current_auc = 0.7644293910278565
User 31045 AUC after training: 0.764222022534043
User 31045 does not improve AUC. Reverting changes.
Training on augumented user 121406 19/50 current_auc = 0.7644293910278565
User 121406 AUC after training: 0.7644985138591276
User 121406 improves AUC. Keeping the model.
Training on augumented user 49575 20/50 current_auc = 0.7644985138591276
User 49575 AUC after training: 0.7642911453653142
User 49575 does not improve AUC. Reverting changes.
Training on augumented user 100508 21/50 current_auc = 0.7644985138591276
User 100508 AUC after training: 0.7640837768715008
User 100508 does not improve AUC. Reverting changes.
Training on augumented user 135259 22/50 current_auc = 0.7644985138591276
User 135259 AUC after training: 0.7647058823529412
User 135259 improves AUC. Keeping the model.
Training on augumented user 57139 23/50 current_auc = 0.7647058823529412
User 57139 AUC after training: 0.7644293910278566
User 57139 does not improve AUC. Reverting changes.
Training on augumented user 90145 24/50 current_auc = 0.7647058823529412
User 90145 AUC after training: 0.7647058823529412
User 90145 does not improve AUC. Reverting changes.
Training on augumented user 42091 25/50 current_auc = 0.7647058823529412
User 42091 AUC after training: 0.764222022534043
User 42091 does not improve AUC. Reverting changes.
Training on augumented user 97686 26/50 current_auc = 0.7647058823529412
User 97686 AUC after training: 0.7635999170526026
User 97686 does not improve AUC. Reverting changes.
Training on augumented user 40848 27/50 current_auc = 0.7647058823529412
User 40848 AUC after training: 0.7643602681965854
User 40848 does not improve AUC. Reverting changes.
Training on augumented user 92781 28/50 current_auc = 0.7647058823529412
User 92781 AUC after training: 0.764222022534043
User 92781 does not improve AUC. Reverting changes.
Training on augumented user 112572 29/50 current_auc = 0.7647058823529412
User 112572 AUC after training: 0.7656044791594665
User 112572 improves AUC. Keeping the model.
Training on augumented user 100365 30/50 current_auc = 0.7656044791594665
User 100365 AUC after training: 0.7652588650031106
User 100365 does not improve AUC. Reverting changes.
Training on augumented user 100378 31/50 current_auc = 0.7656044791594665
User 100378 AUC after training: 0.7654662334969241
User 100378 does not improve AUC. Reverting changes.
Training on augumented user 22044 32/50 current_auc = 0.7656044791594665
User 22044 AUC after training: 0.7653279878343818
User 22044 does not improve AUC. Reverting changes.
Training on augumented user 23143 33/50 current_auc = 0.7656044791594665
User 23143 AUC after training: 0.7655353563281952
User 23143 does not improve AUC. Reverting changes.
Training on augumented user 9248 34/50 current_auc = 0.7656044791594665
User 9248 AUC after training: 0.7655353563281952
User 9248 does not improve AUC. Reverting changes.
Training on augumented user 121796 35/50 current_auc = 0.7656044791594665
User 121796 AUC after training: 0.7658809704845511
User 121796 improves AUC. Keeping the model.
Training on augumented user 44387 36/50 current_auc = 0.7658809704845511
User 44387 AUC after training: 0.7651897421718394
User 44387 does not improve AUC. Reverting changes.
Training on augumented user 136611 37/50 current_auc = 0.7658809704845511
User 136611 AUC after training: 0.7657427248220087
User 136611 does not improve AUC. Reverting changes.
Training on augumented user 19067 38/50 current_auc = 0.7658809704845511
User 19067 AUC after training: 0.763807285546416
User 19067 does not improve AUC. Reverting changes.
Training on augumented user 105310 39/50 current_auc = 0.7658809704845511
User 105310 AUC after training: 0.7659500933158223
User 105310 improves AUC. Keeping the model.
Training on augumented user 8034 40/50 current_auc = 0.7659500933158223
User 8034 AUC after training: 0.7653279878343817
User 8034 does not improve AUC. Reverting changes.
Training on augumented user 17654 41/50 current_auc = 0.7659500933158223
User 17654 AUC after training: 0.7649132508467547
User 17654 does not improve AUC. Reverting changes.
Training on augumented user 77519 42/50 current_auc = 0.7659500933158223
User 77519 AUC after training: 0.7654662334969241
User 77519 does not improve AUC. Reverting changes.
Training on augumented user 102484 43/50 current_auc = 0.7659500933158223
User 102484 AUC after training: 0.7658809704845511
User 102484 does not improve AUC. Reverting changes.
Training on augumented user 14758 44/50 current_auc = 0.7659500933158223
User 14758 AUC after training: 0.7658809704845511
User 14758 does not improve AUC. Reverting changes.
Training on augumented user 96794 45/50 current_auc = 0.7659500933158223
User 96794 AUC after training: 0.7653279878343817
User 96794 does not improve AUC. Reverting changes.
Training on augumented user 70297 46/50 current_auc = 0.7659500933158223
User 70297 AUC after training: 0.7656736019907376
User 70297 does not improve AUC. Reverting changes.
Training on augumented user 76478 47/50 current_auc = 0.7659500933158223
User 76478 AUC after training: 0.7651206193405682
User 76478 does not improve AUC. Reverting changes.
Training on augumented user 47695 48/50 current_auc = 0.7659500933158223
User 47695 AUC after training: 0.7660883389783646
User 47695 improves AUC. Keeping the model.
Training on augumented user 92841 49/50 current_auc = 0.7660883389783646
User 92841 AUC after training: 0.7657427248220088
User 92841 does not improve AUC. Reverting changes.
[2024-12-02 18:42:09.413680] start test user 58766 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:09.861205] start test user 58766 118/568 recall augumented users by random, augumented_users = [93051, 96979, 31887, 67674, 99156, 45068, 113600, 86669, 59611, 25194, 126757, 57356, 110481, 8208, 129715, 38007, 52105, 136615, 42357, 16566, 26969, 122553, 127593, 109267, 64981, 69525, 16947, 66251, 120754, 95853, 20207, 134929, 46241, 39915, 26035, 70398, 106075, 11365, 3306, 73704, 102279, 33620, 114645, 64012, 69362, 85104, 91010, 58050, 60126, 100629]
[2024-12-02 18:42:09.877303] user = 58766 Cloud 118/568
[2024-12-02 18:42:09.887226] user = 58766 Local 118/568
[2024-12-02 18:42:10.009932] user = 58766 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:13.763907] user = 58766 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4285714285714286
Training on augumented user 93051 0/50 current_auc = 0.4285714285714286
User 93051 AUC after training: 0.4285714285714286
User 93051 does not improve AUC. Reverting changes.
Training on augumented user 96979 1/50 current_auc = 0.4285714285714286
User 96979 AUC after training: 0.4285714285714286
User 96979 does not improve AUC. Reverting changes.
Training on augumented user 31887 2/50 current_auc = 0.4285714285714286
User 31887 AUC after training: 0.4285714285714286
User 31887 does not improve AUC. Reverting changes.
Training on augumented user 67674 3/50 current_auc = 0.4285714285714286
User 67674 AUC after training: 0.4285714285714286
User 67674 does not improve AUC. Reverting changes.
Training on augumented user 99156 4/50 current_auc = 0.4285714285714286
User 99156 AUC after training: 0.4285714285714286
User 99156 does not improve AUC. Reverting changes.
Training on augumented user 45068 5/50 current_auc = 0.4285714285714286
User 45068 AUC after training: 0.4285714285714286
User 45068 does not improve AUC. Reverting changes.
Training on augumented user 113600 6/50 current_auc = 0.4285714285714286
User 113600 AUC after training: 0.4285714285714286
User 113600 does not improve AUC. Reverting changes.
Training on augumented user 86669 7/50 current_auc = 0.4285714285714286
User 86669 AUC after training: 0.4285714285714286
User 86669 does not improve AUC. Reverting changes.
Training on augumented user 59611 8/50 current_auc = 0.4285714285714286
User 59611 AUC after training: 0.4285714285714286
User 59611 does not improve AUC. Reverting changes.
Training on augumented user 25194 9/50 current_auc = 0.4285714285714286
User 25194 AUC after training: 0.4285714285714286
User 25194 does not improve AUC. Reverting changes.
Training on augumented user 126757 10/50 current_auc = 0.4285714285714286
User 126757 AUC after training: 0.4285714285714286
User 126757 does not improve AUC. Reverting changes.
Training on augumented user 57356 11/50 current_auc = 0.4285714285714286
User 57356 AUC after training: 0.4285714285714286
User 57356 does not improve AUC. Reverting changes.
Training on augumented user 110481 12/50 current_auc = 0.4285714285714286
User 110481 AUC after training: 0.4285714285714286
User 110481 does not improve AUC. Reverting changes.
Training on augumented user 8208 13/50 current_auc = 0.4285714285714286
User 8208 AUC after training: 0.4285714285714286
User 8208 does not improve AUC. Reverting changes.
Training on augumented user 129715 14/50 current_auc = 0.4285714285714286
User 129715 AUC after training: 0.4285714285714286
User 129715 does not improve AUC. Reverting changes.
Training on augumented user 38007 15/50 current_auc = 0.4285714285714286
User 38007 AUC after training: 0.4285714285714286
User 38007 does not improve AUC. Reverting changes.
Training on augumented user 52105 16/50 current_auc = 0.4285714285714286
User 52105 AUC after training: 0.4285714285714286
User 52105 does not improve AUC. Reverting changes.
Training on augumented user 136615 17/50 current_auc = 0.4285714285714286
User 136615 AUC after training: 0.4285714285714286
User 136615 does not improve AUC. Reverting changes.
Training on augumented user 42357 18/50 current_auc = 0.4285714285714286
User 42357 AUC after training: 0.4285714285714286
User 42357 does not improve AUC. Reverting changes.
Training on augumented user 16566 19/50 current_auc = 0.4285714285714286
User 16566 AUC after training: 0.4285714285714286
User 16566 does not improve AUC. Reverting changes.
Training on augumented user 26969 20/50 current_auc = 0.4285714285714286
User 26969 AUC after training: 0.4285714285714286
User 26969 does not improve AUC. Reverting changes.
Training on augumented user 122553 21/50 current_auc = 0.4285714285714286
User 122553 AUC after training: 0.4285714285714286
User 122553 does not improve AUC. Reverting changes.
Training on augumented user 127593 22/50 current_auc = 0.4285714285714286
User 127593 AUC after training: 0.4285714285714286
User 127593 does not improve AUC. Reverting changes.
Training on augumented user 109267 23/50 current_auc = 0.4285714285714286
User 109267 AUC after training: 0.4285714285714286
User 109267 does not improve AUC. Reverting changes.
Training on augumented user 64981 24/50 current_auc = 0.4285714285714286
User 64981 AUC after training: 0.4285714285714286
User 64981 does not improve AUC. Reverting changes.
Training on augumented user 69525 25/50 current_auc = 0.4285714285714286
User 69525 AUC after training: 0.4285714285714286
User 69525 does not improve AUC. Reverting changes.
Training on augumented user 16947 26/50 current_auc = 0.4285714285714286
User 16947 AUC after training: 0.4285714285714286
User 16947 does not improve AUC. Reverting changes.
Training on augumented user 66251 27/50 current_auc = 0.4285714285714286
User 66251 AUC after training: 0.4285714285714286
User 66251 does not improve AUC. Reverting changes.
Training on augumented user 120754 28/50 current_auc = 0.4285714285714286
User 120754 AUC after training: 0.4285714285714286
User 120754 does not improve AUC. Reverting changes.
Training on augumented user 95853 29/50 current_auc = 0.4285714285714286
User 95853 AUC after training: 0.4285714285714286
User 95853 does not improve AUC. Reverting changes.
Training on augumented user 20207 30/50 current_auc = 0.4285714285714286
User 20207 AUC after training: 0.4285714285714286
User 20207 does not improve AUC. Reverting changes.
Training on augumented user 134929 31/50 current_auc = 0.4285714285714286
User 134929 AUC after training: 0.4285714285714286
User 134929 does not improve AUC. Reverting changes.
Training on augumented user 46241 32/50 current_auc = 0.4285714285714286
User 46241 AUC after training: 0.4285714285714286
User 46241 does not improve AUC. Reverting changes.
Training on augumented user 39915 33/50 current_auc = 0.4285714285714286
User 39915 AUC after training: 0.4285714285714286
User 39915 does not improve AUC. Reverting changes.
Training on augumented user 26035 34/50 current_auc = 0.4285714285714286
User 26035 AUC after training: 0.4285714285714286
User 26035 does not improve AUC. Reverting changes.
Training on augumented user 70398 35/50 current_auc = 0.4285714285714286
User 70398 AUC after training: 0.4285714285714286
User 70398 does not improve AUC. Reverting changes.
Training on augumented user 106075 36/50 current_auc = 0.4285714285714286
User 106075 AUC after training: 0.4285714285714286
User 106075 does not improve AUC. Reverting changes.
Training on augumented user 11365 37/50 current_auc = 0.4285714285714286
User 11365 AUC after training: 0.4285714285714286
User 11365 does not improve AUC. Reverting changes.
Training on augumented user 3306 38/50 current_auc = 0.4285714285714286
User 3306 AUC after training: 0.4285714285714286
User 3306 does not improve AUC. Reverting changes.
Training on augumented user 73704 39/50 current_auc = 0.4285714285714286
User 73704 AUC after training: 0.4285714285714286
User 73704 does not improve AUC. Reverting changes.
Training on augumented user 102279 40/50 current_auc = 0.4285714285714286
User 102279 AUC after training: 0.4285714285714286
User 102279 does not improve AUC. Reverting changes.
Training on augumented user 33620 41/50 current_auc = 0.4285714285714286
User 33620 AUC after training: 0.4285714285714286
User 33620 does not improve AUC. Reverting changes.
Training on augumented user 114645 42/50 current_auc = 0.4285714285714286
User 114645 AUC after training: 0.4285714285714286
User 114645 does not improve AUC. Reverting changes.
Training on augumented user 64012 43/50 current_auc = 0.4285714285714286
User 64012 AUC after training: 0.4285714285714286
User 64012 does not improve AUC. Reverting changes.
Training on augumented user 69362 44/50 current_auc = 0.4285714285714286
User 69362 AUC after training: 0.4285714285714286
User 69362 does not improve AUC. Reverting changes.
Training on augumented user 85104 45/50 current_auc = 0.4285714285714286
User 85104 AUC after training: 0.4285714285714286
User 85104 does not improve AUC. Reverting changes.
Training on augumented user 91010 46/50 current_auc = 0.4285714285714286
User 91010 AUC after training: 0.4285714285714286
User 91010 does not improve AUC. Reverting changes.
Training on augumented user 58050 47/50 current_auc = 0.4285714285714286
User 58050 AUC after training: 0.4285714285714286
User 58050 does not improve AUC. Reverting changes.
Training on augumented user 60126 48/50 current_auc = 0.4285714285714286
User 60126 AUC after training: 0.4285714285714286
User 60126 does not improve AUC. Reverting changes.
Training on augumented user 100629 49/50 current_auc = 0.4285714285714286
User 100629 AUC after training: 0.4285714285714286
User 100629 does not improve AUC. Reverting changes.
[2024-12-02 18:42:44.441761] start test user 58831 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:44.931207] start test user 58831 119/568 recall augumented users by random, augumented_users = [91983, 25899, 23294, 54276, 114938, 26616, 45960, 20691, 103634, 126510, 128098, 136793, 17843, 54184, 20403, 10185, 83095, 369, 127332, 40692, 58443, 136929, 94147, 128092, 5783, 101071, 5496, 79814, 106847, 57477, 46447, 82876, 11318, 115308, 74800, 24512, 81070, 88946, 10774, 68590, 73925, 110851, 103641, 133572, 43581, 66212, 8741, 133045, 127137, 113576]
[2024-12-02 18:42:44.948405] user = 58831 Cloud 119/568
[2024-12-02 18:42:44.963560] user = 58831 Local 119/568
[2024-12-02 18:42:45.137726] user = 58831 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:47.778155] user = 58831 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8560606060606061
Training on augumented user 91983 0/50 current_auc = 0.8560606060606061
User 91983 AUC after training: 0.8560606060606061
User 91983 does not improve AUC. Reverting changes.
Training on augumented user 25899 1/50 current_auc = 0.8560606060606061
User 25899 AUC after training: 0.8560606060606061
User 25899 does not improve AUC. Reverting changes.
Training on augumented user 23294 2/50 current_auc = 0.8560606060606061
User 23294 AUC after training: 0.8560606060606061
User 23294 does not improve AUC. Reverting changes.
Training on augumented user 54276 3/50 current_auc = 0.8560606060606061
User 54276 AUC after training: 0.8560606060606061
User 54276 does not improve AUC. Reverting changes.
Training on augumented user 114938 4/50 current_auc = 0.8560606060606061
User 114938 AUC after training: 0.8560606060606061
User 114938 does not improve AUC. Reverting changes.
Training on augumented user 26616 5/50 current_auc = 0.8560606060606061
User 26616 AUC after training: 0.8560606060606061
User 26616 does not improve AUC. Reverting changes.
Training on augumented user 45960 6/50 current_auc = 0.8560606060606061
User 45960 AUC after training: 0.8560606060606061
User 45960 does not improve AUC. Reverting changes.
Training on augumented user 20691 7/50 current_auc = 0.8560606060606061
User 20691 AUC after training: 0.8560606060606061
User 20691 does not improve AUC. Reverting changes.
Training on augumented user 103634 8/50 current_auc = 0.8560606060606061
User 103634 AUC after training: 0.8560606060606061
User 103634 does not improve AUC. Reverting changes.
Training on augumented user 126510 9/50 current_auc = 0.8560606060606061
User 126510 AUC after training: 0.8560606060606061
User 126510 does not improve AUC. Reverting changes.
Training on augumented user 128098 10/50 current_auc = 0.8560606060606061
User 128098 AUC after training: 0.8560606060606061
User 128098 does not improve AUC. Reverting changes.
Training on augumented user 136793 11/50 current_auc = 0.8560606060606061
User 136793 AUC after training: 0.8560606060606061
User 136793 does not improve AUC. Reverting changes.
Training on augumented user 17843 12/50 current_auc = 0.8560606060606061
User 17843 AUC after training: 0.8560606060606061
User 17843 does not improve AUC. Reverting changes.
Training on augumented user 54184 13/50 current_auc = 0.8560606060606061
User 54184 AUC after training: 0.8560606060606061
User 54184 does not improve AUC. Reverting changes.
Training on augumented user 20403 14/50 current_auc = 0.8560606060606061
User 20403 AUC after training: 0.8522727272727273
User 20403 does not improve AUC. Reverting changes.
Training on augumented user 10185 15/50 current_auc = 0.8560606060606061
User 10185 AUC after training: 0.8560606060606061
User 10185 does not improve AUC. Reverting changes.
Training on augumented user 83095 16/50 current_auc = 0.8560606060606061
User 83095 AUC after training: 0.8560606060606061
User 83095 does not improve AUC. Reverting changes.
Training on augumented user 369 17/50 current_auc = 0.8560606060606061
User 369 AUC after training: 0.8560606060606061
User 369 does not improve AUC. Reverting changes.
Training on augumented user 127332 18/50 current_auc = 0.8560606060606061
User 127332 AUC after training: 0.8503787878787878
User 127332 does not improve AUC. Reverting changes.
Training on augumented user 40692 19/50 current_auc = 0.8560606060606061
User 40692 AUC after training: 0.8560606060606061
User 40692 does not improve AUC. Reverting changes.
Training on augumented user 58443 20/50 current_auc = 0.8560606060606061
User 58443 AUC after training: 0.8579545454545454
User 58443 improves AUC. Keeping the model.
Training on augumented user 136929 21/50 current_auc = 0.8579545454545454
User 136929 AUC after training: 0.8579545454545454
User 136929 does not improve AUC. Reverting changes.
Training on augumented user 94147 22/50 current_auc = 0.8579545454545454
User 94147 AUC after training: 0.8560606060606061
User 94147 does not improve AUC. Reverting changes.
Training on augumented user 128092 23/50 current_auc = 0.8579545454545454
User 128092 AUC after training: 0.8579545454545454
User 128092 does not improve AUC. Reverting changes.
Training on augumented user 5783 24/50 current_auc = 0.8579545454545454
User 5783 AUC after training: 0.8579545454545454
User 5783 does not improve AUC. Reverting changes.
Training on augumented user 101071 25/50 current_auc = 0.8579545454545454
User 101071 AUC after training: 0.8579545454545454
User 101071 does not improve AUC. Reverting changes.
Training on augumented user 5496 26/50 current_auc = 0.8579545454545454
User 5496 AUC after training: 0.8579545454545454
User 5496 does not improve AUC. Reverting changes.
Training on augumented user 79814 27/50 current_auc = 0.8579545454545454
User 79814 AUC after training: 0.8579545454545454
User 79814 does not improve AUC. Reverting changes.
Training on augumented user 106847 28/50 current_auc = 0.8579545454545454
User 106847 AUC after training: 0.8579545454545454
User 106847 does not improve AUC. Reverting changes.
Training on augumented user 57477 29/50 current_auc = 0.8579545454545454
User 57477 AUC after training: 0.8579545454545454
User 57477 does not improve AUC. Reverting changes.
Training on augumented user 46447 30/50 current_auc = 0.8579545454545454
User 46447 AUC after training: 0.8560606060606061
User 46447 does not improve AUC. Reverting changes.
Training on augumented user 82876 31/50 current_auc = 0.8579545454545454
User 82876 AUC after training: 0.8579545454545454
User 82876 does not improve AUC. Reverting changes.
Training on augumented user 11318 32/50 current_auc = 0.8579545454545454
User 11318 AUC after training: 0.8579545454545454
User 11318 does not improve AUC. Reverting changes.
Training on augumented user 115308 33/50 current_auc = 0.8579545454545454
User 115308 AUC after training: 0.8579545454545454
User 115308 does not improve AUC. Reverting changes.
Training on augumented user 74800 34/50 current_auc = 0.8579545454545454
User 74800 AUC after training: 0.8560606060606061
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 24512 35/50 current_auc = 0.8579545454545454
User 24512 AUC after training: 0.8541666666666667
User 24512 does not improve AUC. Reverting changes.
Training on augumented user 81070 36/50 current_auc = 0.8579545454545454
User 81070 AUC after training: 0.8579545454545454
User 81070 does not improve AUC. Reverting changes.
Training on augumented user 88946 37/50 current_auc = 0.8579545454545454
User 88946 AUC after training: 0.8579545454545454
User 88946 does not improve AUC. Reverting changes.
Training on augumented user 10774 38/50 current_auc = 0.8579545454545454
User 10774 AUC after training: 0.8579545454545454
User 10774 does not improve AUC. Reverting changes.
Training on augumented user 68590 39/50 current_auc = 0.8579545454545454
User 68590 AUC after training: 0.8579545454545454
User 68590 does not improve AUC. Reverting changes.
Training on augumented user 73925 40/50 current_auc = 0.8579545454545454
User 73925 AUC after training: 0.8579545454545454
User 73925 does not improve AUC. Reverting changes.
Training on augumented user 110851 41/50 current_auc = 0.8579545454545454
User 110851 AUC after training: 0.8579545454545454
User 110851 does not improve AUC. Reverting changes.
Training on augumented user 103641 42/50 current_auc = 0.8579545454545454
User 103641 AUC after training: 0.8541666666666667
User 103641 does not improve AUC. Reverting changes.
Training on augumented user 133572 43/50 current_auc = 0.8579545454545454
User 133572 AUC after training: 0.8560606060606061
User 133572 does not improve AUC. Reverting changes.
Training on augumented user 43581 44/50 current_auc = 0.8579545454545454
User 43581 AUC after training: 0.8579545454545454
User 43581 does not improve AUC. Reverting changes.
Training on augumented user 66212 45/50 current_auc = 0.8579545454545454
User 66212 AUC after training: 0.8579545454545454
User 66212 does not improve AUC. Reverting changes.
Training on augumented user 8741 46/50 current_auc = 0.8579545454545454
User 8741 AUC after training: 0.8579545454545454
User 8741 does not improve AUC. Reverting changes.
Training on augumented user 133045 47/50 current_auc = 0.8579545454545454
User 133045 AUC after training: 0.8579545454545454
User 133045 does not improve AUC. Reverting changes.
Training on augumented user 127137 48/50 current_auc = 0.8579545454545454
User 127137 AUC after training: 0.8579545454545454
User 127137 does not improve AUC. Reverting changes.
Training on augumented user 113576 49/50 current_auc = 0.8579545454545454
User 113576 AUC after training: 0.8560606060606061
User 113576 does not improve AUC. Reverting changes.
[2024-12-02 18:43:15.028275] start test user 58888 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:15.465319] start test user 58888 120/568 recall augumented users by random, augumented_users = [46249, 92497, 98532, 5816, 2595, 56182, 61931, 51515, 63700, 80956, 48752, 67862, 129739, 68437, 51167, 22480, 49204, 113903, 83242, 43646, 60551, 87338, 79915, 61297, 41165, 1937, 103063, 61082, 107612, 66771, 48877, 11049, 5831, 3775, 114603, 96400, 136084, 105744, 24288, 42119, 25702, 71828, 16887, 119006, 88512, 15467, 32687, 5778, 134482, 87664]
[2024-12-02 18:43:15.481229] user = 58888 Cloud 120/568
[2024-12-02 18:43:15.493082] user = 58888 Local 120/568
[2024-12-02 18:43:15.531375] user = 58888 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:17.633976] user = 58888 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.595
Training on augumented user 46249 0/50 current_auc = 0.595
User 46249 AUC after training: 0.595
User 46249 does not improve AUC. Reverting changes.
Training on augumented user 92497 1/50 current_auc = 0.595
User 92497 AUC after training: 0.59
User 92497 does not improve AUC. Reverting changes.
Training on augumented user 98532 2/50 current_auc = 0.595
User 98532 AUC after training: 0.5933333333333334
User 98532 does not improve AUC. Reverting changes.
Training on augumented user 5816 3/50 current_auc = 0.595
User 5816 AUC after training: 0.5933333333333334
User 5816 does not improve AUC. Reverting changes.
Training on augumented user 2595 4/50 current_auc = 0.595
User 2595 AUC after training: 0.5933333333333333
User 2595 does not improve AUC. Reverting changes.
Training on augumented user 56182 5/50 current_auc = 0.595
User 56182 AUC after training: 0.5933333333333334
User 56182 does not improve AUC. Reverting changes.
Training on augumented user 61931 6/50 current_auc = 0.595
User 61931 AUC after training: 0.5916666666666667
User 61931 does not improve AUC. Reverting changes.
Training on augumented user 51515 7/50 current_auc = 0.595
User 51515 AUC after training: 0.5933333333333334
User 51515 does not improve AUC. Reverting changes.
Training on augumented user 63700 8/50 current_auc = 0.595
User 63700 AUC after training: 0.5916666666666667
User 63700 does not improve AUC. Reverting changes.
Training on augumented user 80956 9/50 current_auc = 0.595
User 80956 AUC after training: 0.5933333333333334
User 80956 does not improve AUC. Reverting changes.
Training on augumented user 48752 10/50 current_auc = 0.595
User 48752 AUC after training: 0.595
User 48752 does not improve AUC. Reverting changes.
Training on augumented user 67862 11/50 current_auc = 0.595
User 67862 AUC after training: 0.5933333333333334
User 67862 does not improve AUC. Reverting changes.
Training on augumented user 129739 12/50 current_auc = 0.595
User 129739 AUC after training: 0.5933333333333334
User 129739 does not improve AUC. Reverting changes.
Training on augumented user 68437 13/50 current_auc = 0.595
User 68437 AUC after training: 0.5933333333333334
User 68437 does not improve AUC. Reverting changes.
Training on augumented user 51167 14/50 current_auc = 0.595
User 51167 AUC after training: 0.5916666666666667
User 51167 does not improve AUC. Reverting changes.
Training on augumented user 22480 15/50 current_auc = 0.595
User 22480 AUC after training: 0.5916666666666667
User 22480 does not improve AUC. Reverting changes.
Training on augumented user 49204 16/50 current_auc = 0.595
User 49204 AUC after training: 0.595
User 49204 does not improve AUC. Reverting changes.
Training on augumented user 113903 17/50 current_auc = 0.595
User 113903 AUC after training: 0.5933333333333334
User 113903 does not improve AUC. Reverting changes.
Training on augumented user 83242 18/50 current_auc = 0.595
User 83242 AUC after training: 0.595
User 83242 does not improve AUC. Reverting changes.
Training on augumented user 43646 19/50 current_auc = 0.595
User 43646 AUC after training: 0.595
User 43646 does not improve AUC. Reverting changes.
Training on augumented user 60551 20/50 current_auc = 0.595
User 60551 AUC after training: 0.5933333333333334
User 60551 does not improve AUC. Reverting changes.
Training on augumented user 87338 21/50 current_auc = 0.595
User 87338 AUC after training: 0.5933333333333334
User 87338 does not improve AUC. Reverting changes.
Training on augumented user 79915 22/50 current_auc = 0.595
User 79915 AUC after training: 0.5933333333333334
User 79915 does not improve AUC. Reverting changes.
Training on augumented user 61297 23/50 current_auc = 0.595
User 61297 AUC after training: 0.5933333333333334
User 61297 does not improve AUC. Reverting changes.
Training on augumented user 41165 24/50 current_auc = 0.595
User 41165 AUC after training: 0.5933333333333334
User 41165 does not improve AUC. Reverting changes.
Training on augumented user 1937 25/50 current_auc = 0.595
User 1937 AUC after training: 0.595
User 1937 does not improve AUC. Reverting changes.
Training on augumented user 103063 26/50 current_auc = 0.595
User 103063 AUC after training: 0.5950000000000001
User 103063 improves AUC. Keeping the model.
Training on augumented user 61082 27/50 current_auc = 0.5950000000000001
User 61082 AUC after training: 0.5950000000000001
User 61082 does not improve AUC. Reverting changes.
Training on augumented user 107612 28/50 current_auc = 0.5950000000000001
User 107612 AUC after training: 0.5950000000000001
User 107612 does not improve AUC. Reverting changes.
Training on augumented user 66771 29/50 current_auc = 0.5950000000000001
User 66771 AUC after training: 0.5966666666666667
User 66771 improves AUC. Keeping the model.
Training on augumented user 48877 30/50 current_auc = 0.5966666666666667
User 48877 AUC after training: 0.5916666666666667
User 48877 does not improve AUC. Reverting changes.
Training on augumented user 11049 31/50 current_auc = 0.5966666666666667
User 11049 AUC after training: 0.5966666666666667
User 11049 does not improve AUC. Reverting changes.
Training on augumented user 5831 32/50 current_auc = 0.5966666666666667
User 5831 AUC after training: 0.595
User 5831 does not improve AUC. Reverting changes.
Training on augumented user 3775 33/50 current_auc = 0.5966666666666667
User 3775 AUC after training: 0.5983333333333333
User 3775 improves AUC. Keeping the model.
Training on augumented user 114603 34/50 current_auc = 0.5983333333333333
User 114603 AUC after training: 0.6016666666666667
User 114603 improves AUC. Keeping the model.
Training on augumented user 96400 35/50 current_auc = 0.6016666666666667
User 96400 AUC after training: 0.6
User 96400 does not improve AUC. Reverting changes.
Training on augumented user 136084 36/50 current_auc = 0.6016666666666667
User 136084 AUC after training: 0.6
User 136084 does not improve AUC. Reverting changes.
Training on augumented user 105744 37/50 current_auc = 0.6016666666666667
User 105744 AUC after training: 0.5983333333333333
User 105744 does not improve AUC. Reverting changes.
Training on augumented user 24288 38/50 current_auc = 0.6016666666666667
User 24288 AUC after training: 0.6
User 24288 does not improve AUC. Reverting changes.
Training on augumented user 42119 39/50 current_auc = 0.6016666666666667
User 42119 AUC after training: 0.5966666666666667
User 42119 does not improve AUC. Reverting changes.
Training on augumented user 25702 40/50 current_auc = 0.6016666666666667
User 25702 AUC after training: 0.6033333333333334
User 25702 improves AUC. Keeping the model.
Training on augumented user 71828 41/50 current_auc = 0.6033333333333334
User 71828 AUC after training: 0.6016666666666667
User 71828 does not improve AUC. Reverting changes.
Training on augumented user 16887 42/50 current_auc = 0.6033333333333334
User 16887 AUC after training: 0.6
User 16887 does not improve AUC. Reverting changes.
Training on augumented user 119006 43/50 current_auc = 0.6033333333333334
User 119006 AUC after training: 0.6016666666666667
User 119006 does not improve AUC. Reverting changes.
Training on augumented user 88512 44/50 current_auc = 0.6033333333333334
User 88512 AUC after training: 0.6016666666666667
User 88512 does not improve AUC. Reverting changes.
Training on augumented user 15467 45/50 current_auc = 0.6033333333333334
User 15467 AUC after training: 0.6033333333333334
User 15467 does not improve AUC. Reverting changes.
Training on augumented user 32687 46/50 current_auc = 0.6033333333333334
User 32687 AUC after training: 0.6016666666666667
User 32687 does not improve AUC. Reverting changes.
Training on augumented user 5778 47/50 current_auc = 0.6033333333333334
User 5778 AUC after training: 0.6033333333333334
User 5778 does not improve AUC. Reverting changes.
Training on augumented user 134482 48/50 current_auc = 0.6033333333333334
User 134482 AUC after training: 0.6066666666666667
User 134482 improves AUC. Keeping the model.
Training on augumented user 87664 49/50 current_auc = 0.6066666666666667
User 87664 AUC after training: 0.605
User 87664 does not improve AUC. Reverting changes.
[2024-12-02 18:43:45.633669] start test user 58894 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:46.315536] start test user 58894 121/568 recall augumented users by random, augumented_users = [67172, 78023, 60347, 129218, 70306, 36743, 10234, 35638, 86973, 138235, 98185, 81098, 70217, 46482, 98588, 63102, 129185, 33460, 47917, 90290, 5664, 132400, 34914, 27273, 3926, 120161, 105786, 36987, 44863, 40822, 57363, 125797, 70198, 85430, 72130, 102717, 35852, 60430, 58811, 53384, 7864, 54994, 118067, 7622, 55180, 60394, 81437, 34076, 50443, 69847]
[2024-12-02 18:43:46.338879] user = 58894 Cloud 121/568
[2024-12-02 18:43:46.353488] user = 58894 Local 121/568
[2024-12-02 18:43:46.443571] user = 58894 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:48.680234] user = 58894 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7697039600153788
Training on augumented user 67172 0/50 current_auc = 0.7697039600153788
User 67172 AUC after training: 0.7693194925028835
User 67172 does not improve AUC. Reverting changes.
Training on augumented user 78023 1/50 current_auc = 0.7697039600153788
User 78023 AUC after training: 0.7700884275278739
User 78023 improves AUC. Keeping the model.
Training on augumented user 60347 2/50 current_auc = 0.7700884275278739
User 60347 AUC after training: 0.7697039600153788
User 60347 does not improve AUC. Reverting changes.
Training on augumented user 129218 3/50 current_auc = 0.7700884275278739
User 129218 AUC after training: 0.7689350249903883
User 129218 does not improve AUC. Reverting changes.
Training on augumented user 70306 4/50 current_auc = 0.7700884275278739
User 70306 AUC after training: 0.7693194925028835
User 70306 does not improve AUC. Reverting changes.
Training on augumented user 36743 5/50 current_auc = 0.7700884275278739
User 36743 AUC after training: 0.7689350249903883
User 36743 does not improve AUC. Reverting changes.
Training on augumented user 10234 6/50 current_auc = 0.7700884275278739
User 10234 AUC after training: 0.7700884275278739
User 10234 does not improve AUC. Reverting changes.
Training on augumented user 35638 7/50 current_auc = 0.7700884275278739
User 35638 AUC after training: 0.7693194925028836
User 35638 does not improve AUC. Reverting changes.
Training on augumented user 86973 8/50 current_auc = 0.7700884275278739
User 86973 AUC after training: 0.7670126874279123
User 86973 does not improve AUC. Reverting changes.
Training on augumented user 138235 9/50 current_auc = 0.7700884275278739
User 138235 AUC after training: 0.7693194925028835
User 138235 does not improve AUC. Reverting changes.
Training on augumented user 98185 10/50 current_auc = 0.7700884275278739
User 98185 AUC after training: 0.7685505574778931
User 98185 does not improve AUC. Reverting changes.
Training on augumented user 81098 11/50 current_auc = 0.7700884275278739
User 81098 AUC after training: 0.7689350249903883
User 81098 does not improve AUC. Reverting changes.
Training on augumented user 70217 12/50 current_auc = 0.7700884275278739
User 70217 AUC after training: 0.7697039600153788
User 70217 does not improve AUC. Reverting changes.
Training on augumented user 46482 13/50 current_auc = 0.7700884275278739
User 46482 AUC after training: 0.7702806612841215
User 46482 improves AUC. Keeping the model.
Training on augumented user 98588 14/50 current_auc = 0.7702806612841215
User 98588 AUC after training: 0.7700884275278739
User 98588 does not improve AUC. Reverting changes.
Training on augumented user 63102 15/50 current_auc = 0.7702806612841215
User 63102 AUC after training: 0.7693194925028835
User 63102 does not improve AUC. Reverting changes.
Training on augumented user 129185 16/50 current_auc = 0.7702806612841215
User 129185 AUC after training: 0.7689350249903882
User 129185 does not improve AUC. Reverting changes.
Training on augumented user 33460 17/50 current_auc = 0.7702806612841215
User 33460 AUC after training: 0.7695117262591311
User 33460 does not improve AUC. Reverting changes.
Training on augumented user 47917 18/50 current_auc = 0.7702806612841215
User 47917 AUC after training: 0.7702806612841215
User 47917 does not improve AUC. Reverting changes.
Training on augumented user 90290 19/50 current_auc = 0.7702806612841215
User 90290 AUC after training: 0.7706651287966167
User 90290 improves AUC. Keeping the model.
Training on augumented user 5664 20/50 current_auc = 0.7706651287966167
User 5664 AUC after training: 0.7704728950403691
User 5664 does not improve AUC. Reverting changes.
Training on augumented user 132400 21/50 current_auc = 0.7706651287966167
User 132400 AUC after training: 0.7687427912341407
User 132400 does not improve AUC. Reverting changes.
Training on augumented user 34914 22/50 current_auc = 0.7706651287966167
User 34914 AUC after training: 0.7695117262591311
User 34914 does not improve AUC. Reverting changes.
Training on augumented user 27273 23/50 current_auc = 0.7706651287966167
User 27273 AUC after training: 0.769127258746636
User 27273 does not improve AUC. Reverting changes.
Training on augumented user 3926 24/50 current_auc = 0.7706651287966167
User 3926 AUC after training: 0.7704728950403692
User 3926 does not improve AUC. Reverting changes.
Training on augumented user 120161 25/50 current_auc = 0.7706651287966167
User 120161 AUC after training: 0.7700884275278739
User 120161 does not improve AUC. Reverting changes.
Training on augumented user 105786 26/50 current_auc = 0.7706651287966167
User 105786 AUC after training: 0.7693194925028835
User 105786 does not improve AUC. Reverting changes.
Training on augumented user 36987 27/50 current_auc = 0.7706651287966167
User 36987 AUC after training: 0.7691272587466359
User 36987 does not improve AUC. Reverting changes.
Training on augumented user 44863 28/50 current_auc = 0.7706651287966167
User 44863 AUC after training: 0.7687427912341407
User 44863 does not improve AUC. Reverting changes.
Training on augumented user 40822 29/50 current_auc = 0.7706651287966167
User 40822 AUC after training: 0.7698961937716262
User 40822 does not improve AUC. Reverting changes.
Training on augumented user 57363 30/50 current_auc = 0.7706651287966167
User 57363 AUC after training: 0.771049596309112
User 57363 improves AUC. Keeping the model.
Training on augumented user 125797 31/50 current_auc = 0.771049596309112
User 125797 AUC after training: 0.7687427912341408
User 125797 does not improve AUC. Reverting changes.
Training on augumented user 70198 32/50 current_auc = 0.771049596309112
User 70198 AUC after training: 0.7700884275278739
User 70198 does not improve AUC. Reverting changes.
Training on augumented user 85430 33/50 current_auc = 0.771049596309112
User 85430 AUC after training: 0.7708573625528643
User 85430 does not improve AUC. Reverting changes.
Training on augumented user 72130 34/50 current_auc = 0.771049596309112
User 72130 AUC after training: 0.7714340638216071
User 72130 improves AUC. Keeping the model.
Training on augumented user 102717 35/50 current_auc = 0.7714340638216071
User 102717 AUC after training: 0.7714340638216071
User 102717 does not improve AUC. Reverting changes.
Training on augumented user 35852 36/50 current_auc = 0.7714340638216071
User 35852 AUC after training: 0.7697039600153788
User 35852 does not improve AUC. Reverting changes.
Training on augumented user 60430 37/50 current_auc = 0.7714340638216071
User 60430 AUC after training: 0.7718185313341023
User 60430 improves AUC. Keeping the model.
Training on augumented user 58811 38/50 current_auc = 0.7718185313341023
User 58811 AUC after training: 0.7710495963091119
User 58811 does not improve AUC. Reverting changes.
Training on augumented user 53384 39/50 current_auc = 0.7718185313341023
User 53384 AUC after training: 0.7714340638216071
User 53384 does not improve AUC. Reverting changes.
Training on augumented user 7864 40/50 current_auc = 0.7718185313341023
User 7864 AUC after training: 0.7714340638216071
User 7864 does not improve AUC. Reverting changes.
Training on augumented user 54994 41/50 current_auc = 0.7718185313341023
User 54994 AUC after training: 0.7714340638216071
User 54994 does not improve AUC. Reverting changes.
Training on augumented user 118067 42/50 current_auc = 0.7718185313341023
User 118067 AUC after training: 0.7700884275278739
User 118067 does not improve AUC. Reverting changes.
Training on augumented user 7622 43/50 current_auc = 0.7718185313341023
User 7622 AUC after training: 0.7718185313341023
User 7622 does not improve AUC. Reverting changes.
Training on augumented user 55180 44/50 current_auc = 0.7718185313341023
User 55180 AUC after training: 0.7697039600153788
User 55180 does not improve AUC. Reverting changes.
Training on augumented user 60394 45/50 current_auc = 0.7718185313341023
User 60394 AUC after training: 0.7712418300653594
User 60394 does not improve AUC. Reverting changes.
Training on augumented user 81437 46/50 current_auc = 0.7718185313341023
User 81437 AUC after training: 0.7702806612841215
User 81437 does not improve AUC. Reverting changes.
Training on augumented user 34076 47/50 current_auc = 0.7718185313341023
User 34076 AUC after training: 0.7710495963091119
User 34076 does not improve AUC. Reverting changes.
Training on augumented user 50443 48/50 current_auc = 0.7718185313341023
User 50443 AUC after training: 0.7718185313341023
User 50443 does not improve AUC. Reverting changes.
Training on augumented user 69847 49/50 current_auc = 0.7718185313341023
User 69847 AUC after training: 0.7714340638216071
User 69847 does not improve AUC. Reverting changes.
[2024-12-02 18:44:19.727036] start test user 58905 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:20.683412] start test user 58905 122/568 recall augumented users by random, augumented_users = [107596, 114149, 6271, 3172, 114231, 33128, 118415, 16158, 49658, 108830, 129886, 121645, 71565, 36509, 53459, 113087, 95150, 93600, 78854, 13531, 11999, 127666, 86915, 68720, 125877, 11902, 97289, 48835, 21016, 73930, 35282, 76406, 36734, 47899, 67502, 56129, 82407, 96475, 123967, 75638, 132928, 38544, 24212, 83405, 73383, 42344, 27084, 72401, 37209, 137162]
[2024-12-02 18:44:20.711922] user = 58905 Cloud 122/568
[2024-12-02 18:44:20.728830] user = 58905 Local 122/568
[2024-12-02 18:44:20.748668] user = 58905 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:22.945170] user = 58905 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 107596 0/50 current_auc = 0.8
User 107596 AUC after training: 0.8
User 107596 does not improve AUC. Reverting changes.
Training on augumented user 114149 1/50 current_auc = 0.8
User 114149 AUC after training: 0.8
User 114149 does not improve AUC. Reverting changes.
Training on augumented user 6271 2/50 current_auc = 0.8
User 6271 AUC after training: 0.8
User 6271 does not improve AUC. Reverting changes.
Training on augumented user 3172 3/50 current_auc = 0.8
User 3172 AUC after training: 0.8
User 3172 does not improve AUC. Reverting changes.
Training on augumented user 114231 4/50 current_auc = 0.8
User 114231 AUC after training: 0.8
User 114231 does not improve AUC. Reverting changes.
Training on augumented user 33128 5/50 current_auc = 0.8
User 33128 AUC after training: 0.9
User 33128 improves AUC. Keeping the model.
Training on augumented user 118415 6/50 current_auc = 0.9
User 118415 AUC after training: 0.9
User 118415 does not improve AUC. Reverting changes.
Training on augumented user 16158 7/50 current_auc = 0.9
User 16158 AUC after training: 0.8
User 16158 does not improve AUC. Reverting changes.
Training on augumented user 49658 8/50 current_auc = 0.9
User 49658 AUC after training: 0.9
User 49658 does not improve AUC. Reverting changes.
Training on augumented user 108830 9/50 current_auc = 0.9
User 108830 AUC after training: 0.8
User 108830 does not improve AUC. Reverting changes.
Training on augumented user 129886 10/50 current_auc = 0.9
User 129886 AUC after training: 0.9
User 129886 does not improve AUC. Reverting changes.
Training on augumented user 121645 11/50 current_auc = 0.9
User 121645 AUC after training: 0.8
User 121645 does not improve AUC. Reverting changes.
Training on augumented user 71565 12/50 current_auc = 0.9
User 71565 AUC after training: 0.8
User 71565 does not improve AUC. Reverting changes.
Training on augumented user 36509 13/50 current_auc = 0.9
User 36509 AUC after training: 0.9
User 36509 does not improve AUC. Reverting changes.
Training on augumented user 53459 14/50 current_auc = 0.9
User 53459 AUC after training: 0.8
User 53459 does not improve AUC. Reverting changes.
Training on augumented user 113087 15/50 current_auc = 0.9
User 113087 AUC after training: 0.9
User 113087 does not improve AUC. Reverting changes.
Training on augumented user 95150 16/50 current_auc = 0.9
User 95150 AUC after training: 0.9
User 95150 does not improve AUC. Reverting changes.
Training on augumented user 93600 17/50 current_auc = 0.9
User 93600 AUC after training: 0.8
User 93600 does not improve AUC. Reverting changes.
Training on augumented user 78854 18/50 current_auc = 0.9
User 78854 AUC after training: 0.9
User 78854 does not improve AUC. Reverting changes.
Training on augumented user 13531 19/50 current_auc = 0.9
User 13531 AUC after training: 0.9
User 13531 does not improve AUC. Reverting changes.
Training on augumented user 11999 20/50 current_auc = 0.9
User 11999 AUC after training: 0.9
User 11999 does not improve AUC. Reverting changes.
Training on augumented user 127666 21/50 current_auc = 0.9
User 127666 AUC after training: 0.9
User 127666 does not improve AUC. Reverting changes.
Training on augumented user 86915 22/50 current_auc = 0.9
User 86915 AUC after training: 0.9
User 86915 does not improve AUC. Reverting changes.
Training on augumented user 68720 23/50 current_auc = 0.9
User 68720 AUC after training: 0.9
User 68720 does not improve AUC. Reverting changes.
Training on augumented user 125877 24/50 current_auc = 0.9
User 125877 AUC after training: 0.9
User 125877 does not improve AUC. Reverting changes.
Training on augumented user 11902 25/50 current_auc = 0.9
User 11902 AUC after training: 0.9
User 11902 does not improve AUC. Reverting changes.
Training on augumented user 97289 26/50 current_auc = 0.9
User 97289 AUC after training: 0.9
User 97289 does not improve AUC. Reverting changes.
Training on augumented user 48835 27/50 current_auc = 0.9
User 48835 AUC after training: 0.9
User 48835 does not improve AUC. Reverting changes.
Training on augumented user 21016 28/50 current_auc = 0.9
User 21016 AUC after training: 0.8
User 21016 does not improve AUC. Reverting changes.
Training on augumented user 73930 29/50 current_auc = 0.9
User 73930 AUC after training: 0.9
User 73930 does not improve AUC. Reverting changes.
Training on augumented user 35282 30/50 current_auc = 0.9
User 35282 AUC after training: 0.9
User 35282 does not improve AUC. Reverting changes.
Training on augumented user 76406 31/50 current_auc = 0.9
User 76406 AUC after training: 0.9
User 76406 does not improve AUC. Reverting changes.
Training on augumented user 36734 32/50 current_auc = 0.9
User 36734 AUC after training: 0.9
User 36734 does not improve AUC. Reverting changes.
Training on augumented user 47899 33/50 current_auc = 0.9
User 47899 AUC after training: 0.9
User 47899 does not improve AUC. Reverting changes.
Training on augumented user 67502 34/50 current_auc = 0.9
User 67502 AUC after training: 0.9
User 67502 does not improve AUC. Reverting changes.
Training on augumented user 56129 35/50 current_auc = 0.9
User 56129 AUC after training: 0.9
User 56129 does not improve AUC. Reverting changes.
Training on augumented user 82407 36/50 current_auc = 0.9
User 82407 AUC after training: 0.9
User 82407 does not improve AUC. Reverting changes.
Training on augumented user 96475 37/50 current_auc = 0.9
User 96475 AUC after training: 0.8
User 96475 does not improve AUC. Reverting changes.
Training on augumented user 123967 38/50 current_auc = 0.9
User 123967 AUC after training: 0.9
User 123967 does not improve AUC. Reverting changes.
Training on augumented user 75638 39/50 current_auc = 0.9
User 75638 AUC after training: 0.9
User 75638 does not improve AUC. Reverting changes.
Training on augumented user 132928 40/50 current_auc = 0.9
User 132928 AUC after training: 0.9
User 132928 does not improve AUC. Reverting changes.
Training on augumented user 38544 41/50 current_auc = 0.9
User 38544 AUC after training: 0.9
User 38544 does not improve AUC. Reverting changes.
Training on augumented user 24212 42/50 current_auc = 0.9
User 24212 AUC after training: 0.9
User 24212 does not improve AUC. Reverting changes.
Training on augumented user 83405 43/50 current_auc = 0.9
User 83405 AUC after training: 0.8
User 83405 does not improve AUC. Reverting changes.
Training on augumented user 73383 44/50 current_auc = 0.9
User 73383 AUC after training: 0.9
User 73383 does not improve AUC. Reverting changes.
Training on augumented user 42344 45/50 current_auc = 0.9
User 42344 AUC after training: 0.8
User 42344 does not improve AUC. Reverting changes.
Training on augumented user 27084 46/50 current_auc = 0.9
User 27084 AUC after training: 0.9
User 27084 does not improve AUC. Reverting changes.
Training on augumented user 72401 47/50 current_auc = 0.9
User 72401 AUC after training: 0.9
User 72401 does not improve AUC. Reverting changes.
Training on augumented user 37209 48/50 current_auc = 0.9
User 37209 AUC after training: 0.8
User 37209 does not improve AUC. Reverting changes.
Training on augumented user 137162 49/50 current_auc = 0.9
User 137162 AUC after training: 0.9
User 137162 does not improve AUC. Reverting changes.
[2024-12-02 18:44:46.330828] start test user 58920 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:47.063446] start test user 58920 123/568 recall augumented users by random, augumented_users = [78417, 129132, 18880, 104942, 112930, 62184, 57455, 79161, 34557, 2623, 39849, 57600, 54251, 22367, 97393, 104004, 118666, 120611, 5516, 63909, 13090, 70267, 27973, 10838, 54875, 31299, 58666, 75290, 90910, 127616, 137588, 65850, 121139, 93479, 55766, 104475, 48371, 102180, 98374, 134036, 83078, 29003, 131652, 125609, 77751, 105641, 26061, 135990, 14783, 87472]
[2024-12-02 18:44:47.079227] user = 58920 Cloud 123/568
[2024-12-02 18:44:47.101226] user = 58920 Local 123/568
[2024-12-02 18:44:47.155233] user = 58920 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:50.604870] user = 58920 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7058071585098612
Training on augumented user 78417 0/50 current_auc = 0.7058071585098612
User 78417 AUC after training: 0.7058071585098612
User 78417 does not improve AUC. Reverting changes.
Training on augumented user 129132 1/50 current_auc = 0.7058071585098612
User 129132 AUC after training: 0.7076333089846603
User 129132 improves AUC. Keeping the model.
Training on augumented user 18880 2/50 current_auc = 0.7076333089846603
User 18880 AUC after training: 0.705989773557341
User 18880 does not improve AUC. Reverting changes.
Training on augumented user 104942 3/50 current_auc = 0.7076333089846603
User 104942 AUC after training: 0.7067202337472608
User 104942 does not improve AUC. Reverting changes.
Training on augumented user 112930 4/50 current_auc = 0.7076333089846603
User 112930 AUC after training: 0.7070854638422206
User 112930 does not improve AUC. Reverting changes.
Training on augumented user 62184 5/50 current_auc = 0.7076333089846603
User 62184 AUC after training: 0.706355003652301
User 62184 does not improve AUC. Reverting changes.
Training on augumented user 57455 6/50 current_auc = 0.7076333089846603
User 57455 AUC after training: 0.7069028487947406
User 57455 does not improve AUC. Reverting changes.
Training on augumented user 79161 7/50 current_auc = 0.7076333089846603
User 79161 AUC after training: 0.7100073046018991
User 79161 improves AUC. Keeping the model.
Training on augumented user 34557 8/50 current_auc = 0.7100073046018991
User 34557 AUC after training: 0.7096420745069394
User 34557 does not improve AUC. Reverting changes.
Training on augumented user 2623 9/50 current_auc = 0.7100073046018991
User 2623 AUC after training: 0.70836376917458
User 2623 does not improve AUC. Reverting changes.
Training on augumented user 39849 10/50 current_auc = 0.7100073046018991
User 39849 AUC after training: 0.706355003652301
User 39849 does not improve AUC. Reverting changes.
Training on augumented user 57600 11/50 current_auc = 0.7100073046018991
User 57600 AUC after training: 0.7089116143170198
User 57600 does not improve AUC. Reverting changes.
Training on augumented user 54251 12/50 current_auc = 0.7100073046018991
User 54251 AUC after training: 0.70854638422206
User 54251 does not improve AUC. Reverting changes.
Training on augumented user 22367 13/50 current_auc = 0.7100073046018991
User 22367 AUC after training: 0.7085463842220598
User 22367 does not improve AUC. Reverting changes.
Training on augumented user 97393 14/50 current_auc = 0.7100073046018991
User 97393 AUC after training: 0.7096420745069394
User 97393 does not improve AUC. Reverting changes.
Training on augumented user 104004 15/50 current_auc = 0.7100073046018991
User 104004 AUC after training: 0.7100073046018992
User 104004 improves AUC. Keeping the model.
Training on augumented user 118666 16/50 current_auc = 0.7100073046018992
User 118666 AUC after training: 0.7092768444119796
User 118666 does not improve AUC. Reverting changes.
Training on augumented user 120611 17/50 current_auc = 0.7100073046018992
User 120611 AUC after training: 0.7090942293644997
User 120611 does not improve AUC. Reverting changes.
Training on augumented user 5516 18/50 current_auc = 0.7100073046018992
User 5516 AUC after training: 0.7089116143170198
User 5516 does not improve AUC. Reverting changes.
Training on augumented user 63909 19/50 current_auc = 0.7100073046018992
User 63909 AUC after training: 0.7096420745069394
User 63909 does not improve AUC. Reverting changes.
Training on augumented user 13090 20/50 current_auc = 0.7100073046018992
User 13090 AUC after training: 0.70854638422206
User 13090 does not improve AUC. Reverting changes.
Training on augumented user 70267 21/50 current_auc = 0.7100073046018992
User 70267 AUC after training: 0.7089116143170198
User 70267 does not improve AUC. Reverting changes.
Training on augumented user 27973 22/50 current_auc = 0.7100073046018992
User 27973 AUC after training: 0.7100073046018991
User 27973 does not improve AUC. Reverting changes.
Training on augumented user 10838 23/50 current_auc = 0.7100073046018992
User 10838 AUC after training: 0.7081811541271
User 10838 does not improve AUC. Reverting changes.
Training on augumented user 54875 24/50 current_auc = 0.7100073046018992
User 54875 AUC after training: 0.7098246895544194
User 54875 does not improve AUC. Reverting changes.
Training on augumented user 31299 25/50 current_auc = 0.7100073046018992
User 31299 AUC after training: 0.7111029948867786
User 31299 improves AUC. Keeping the model.
Training on augumented user 58666 26/50 current_auc = 0.7111029948867786
User 58666 AUC after training: 0.7087289992695398
User 58666 does not improve AUC. Reverting changes.
Training on augumented user 75290 27/50 current_auc = 0.7111029948867786
User 75290 AUC after training: 0.7089116143170198
User 75290 does not improve AUC. Reverting changes.
Training on augumented user 90910 28/50 current_auc = 0.7111029948867786
User 90910 AUC after training: 0.7100073046018992
User 90910 does not improve AUC. Reverting changes.
Training on augumented user 127616 29/50 current_auc = 0.7111029948867786
User 127616 AUC after training: 0.7111029948867786
User 127616 does not improve AUC. Reverting changes.
Training on augumented user 137588 30/50 current_auc = 0.7111029948867786
User 137588 AUC after training: 0.710372534696859
User 137588 does not improve AUC. Reverting changes.
Training on augumented user 65850 31/50 current_auc = 0.7111029948867786
User 65850 AUC after training: 0.7092768444119796
User 65850 does not improve AUC. Reverting changes.
Training on augumented user 121139 32/50 current_auc = 0.7111029948867786
User 121139 AUC after training: 0.7079985390796202
User 121139 does not improve AUC. Reverting changes.
Training on augumented user 93479 33/50 current_auc = 0.7111029948867786
User 93479 AUC after training: 0.7078159240321402
User 93479 does not improve AUC. Reverting changes.
Training on augumented user 55766 34/50 current_auc = 0.7111029948867786
User 55766 AUC after training: 0.710372534696859
User 55766 does not improve AUC. Reverting changes.
Training on augumented user 104475 35/50 current_auc = 0.7111029948867786
User 104475 AUC after training: 0.7089116143170198
User 104475 does not improve AUC. Reverting changes.
Training on augumented user 48371 36/50 current_auc = 0.7111029948867786
User 48371 AUC after training: 0.7096420745069394
User 48371 does not improve AUC. Reverting changes.
Training on augumented user 102180 37/50 current_auc = 0.7111029948867786
User 102180 AUC after training: 0.7111029948867786
User 102180 does not improve AUC. Reverting changes.
Training on augumented user 98374 38/50 current_auc = 0.7111029948867786
User 98374 AUC after training: 0.7092768444119795
User 98374 does not improve AUC. Reverting changes.
Training on augumented user 134036 39/50 current_auc = 0.7111029948867786
User 134036 AUC after training: 0.7112856099342586
User 134036 improves AUC. Keeping the model.
Training on augumented user 83078 40/50 current_auc = 0.7112856099342586
User 83078 AUC after training: 0.7109203798392988
User 83078 does not improve AUC. Reverting changes.
Training on augumented user 29003 41/50 current_auc = 0.7112856099342586
User 29003 AUC after training: 0.710555149744339
User 29003 does not improve AUC. Reverting changes.
Training on augumented user 131652 42/50 current_auc = 0.7112856099342586
User 131652 AUC after training: 0.7112856099342586
User 131652 does not improve AUC. Reverting changes.
Training on augumented user 125609 43/50 current_auc = 0.7112856099342586
User 125609 AUC after training: 0.7112856099342586
User 125609 does not improve AUC. Reverting changes.
Training on augumented user 77751 44/50 current_auc = 0.7112856099342586
User 77751 AUC after training: 0.7098246895544192
User 77751 does not improve AUC. Reverting changes.
Training on augumented user 105641 45/50 current_auc = 0.7112856099342586
User 105641 AUC after training: 0.7109203798392988
User 105641 does not improve AUC. Reverting changes.
Training on augumented user 26061 46/50 current_auc = 0.7112856099342586
User 26061 AUC after training: 0.710189919649379
User 26061 does not improve AUC. Reverting changes.
Training on augumented user 135990 47/50 current_auc = 0.7112856099342586
User 135990 AUC after training: 0.7112856099342586
User 135990 does not improve AUC. Reverting changes.
Training on augumented user 14783 48/50 current_auc = 0.7112856099342586
User 14783 AUC after training: 0.7116508400292184
User 14783 improves AUC. Keeping the model.
Training on augumented user 87472 49/50 current_auc = 0.7116508400292184
User 87472 AUC after training: 0.7112856099342586
User 87472 does not improve AUC. Reverting changes.
[2024-12-02 18:45:22.771371] start test user 58921 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:23.624837] start test user 58921 124/568 recall augumented users by random, augumented_users = [107482, 123263, 30589, 25374, 59751, 110825, 136891, 22822, 54337, 41727, 19827, 79833, 26737, 89465, 5334, 73151, 12315, 130742, 129019, 107105, 40593, 31899, 112331, 22501, 61102, 62791, 26227, 23679, 17904, 95089, 25772, 23627, 25996, 111177, 83066, 60034, 13734, 94879, 27527, 37575, 9377, 127753, 49436, 12276, 5162, 118028, 17625, 55247, 17688, 123062]
[2024-12-02 18:45:23.641552] user = 58921 Cloud 124/568
[2024-12-02 18:45:23.671565] user = 58921 Local 124/568
[2024-12-02 18:45:23.772127] user = 58921 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:27.332666] user = 58921 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5796491228070175
Training on augumented user 107482 0/50 current_auc = 0.5796491228070175
User 107482 AUC after training: 0.5796491228070175
User 107482 does not improve AUC. Reverting changes.
Training on augumented user 123263 1/50 current_auc = 0.5796491228070175
User 123263 AUC after training: 0.5810526315789474
User 123263 improves AUC. Keeping the model.
Training on augumented user 30589 2/50 current_auc = 0.5810526315789474
User 30589 AUC after training: 0.5803508771929825
User 30589 does not improve AUC. Reverting changes.
Training on augumented user 25374 3/50 current_auc = 0.5810526315789474
User 25374 AUC after training: 0.5796491228070175
User 25374 does not improve AUC. Reverting changes.
Training on augumented user 59751 4/50 current_auc = 0.5810526315789474
User 59751 AUC after training: 0.5803508771929824
User 59751 does not improve AUC. Reverting changes.
Training on augumented user 110825 5/50 current_auc = 0.5810526315789474
User 110825 AUC after training: 0.5817543859649122
User 110825 improves AUC. Keeping the model.
Training on augumented user 136891 6/50 current_auc = 0.5817543859649122
User 136891 AUC after training: 0.5817543859649122
User 136891 does not improve AUC. Reverting changes.
Training on augumented user 22822 7/50 current_auc = 0.5817543859649122
User 22822 AUC after training: 0.5789473684210527
User 22822 does not improve AUC. Reverting changes.
Training on augumented user 54337 8/50 current_auc = 0.5817543859649122
User 54337 AUC after training: 0.5810526315789474
User 54337 does not improve AUC. Reverting changes.
Training on augumented user 41727 9/50 current_auc = 0.5817543859649122
User 41727 AUC after training: 0.5803508771929824
User 41727 does not improve AUC. Reverting changes.
Training on augumented user 19827 10/50 current_auc = 0.5817543859649122
User 19827 AUC after training: 0.5824561403508772
User 19827 improves AUC. Keeping the model.
Training on augumented user 79833 11/50 current_auc = 0.5824561403508772
User 79833 AUC after training: 0.5824561403508771
User 79833 does not improve AUC. Reverting changes.
Training on augumented user 26737 12/50 current_auc = 0.5824561403508772
User 26737 AUC after training: 0.5810526315789474
User 26737 does not improve AUC. Reverting changes.
Training on augumented user 89465 13/50 current_auc = 0.5824561403508772
User 89465 AUC after training: 0.5810526315789474
User 89465 does not improve AUC. Reverting changes.
Training on augumented user 5334 14/50 current_auc = 0.5824561403508772
User 5334 AUC after training: 0.5831578947368421
User 5334 improves AUC. Keeping the model.
Training on augumented user 73151 15/50 current_auc = 0.5831578947368421
User 73151 AUC after training: 0.5817543859649122
User 73151 does not improve AUC. Reverting changes.
Training on augumented user 12315 16/50 current_auc = 0.5831578947368421
User 12315 AUC after training: 0.5817543859649122
User 12315 does not improve AUC. Reverting changes.
Training on augumented user 130742 17/50 current_auc = 0.5831578947368421
User 130742 AUC after training: 0.5817543859649122
User 130742 does not improve AUC. Reverting changes.
Training on augumented user 129019 18/50 current_auc = 0.5831578947368421
User 129019 AUC after training: 0.5810526315789474
User 129019 does not improve AUC. Reverting changes.
Training on augumented user 107105 19/50 current_auc = 0.5831578947368421
User 107105 AUC after training: 0.5810526315789474
User 107105 does not improve AUC. Reverting changes.
Training on augumented user 40593 20/50 current_auc = 0.5831578947368421
User 40593 AUC after training: 0.5810526315789474
User 40593 does not improve AUC. Reverting changes.
Training on augumented user 31899 21/50 current_auc = 0.5831578947368421
User 31899 AUC after training: 0.5824561403508772
User 31899 does not improve AUC. Reverting changes.
Training on augumented user 112331 22/50 current_auc = 0.5831578947368421
User 112331 AUC after training: 0.5810526315789474
User 112331 does not improve AUC. Reverting changes.
Training on augumented user 22501 23/50 current_auc = 0.5831578947368421
User 22501 AUC after training: 0.5817543859649122
User 22501 does not improve AUC. Reverting changes.
Training on augumented user 61102 24/50 current_auc = 0.5831578947368421
User 61102 AUC after training: 0.5824561403508771
User 61102 does not improve AUC. Reverting changes.
Training on augumented user 62791 25/50 current_auc = 0.5831578947368421
User 62791 AUC after training: 0.5824561403508771
User 62791 does not improve AUC. Reverting changes.
Training on augumented user 26227 26/50 current_auc = 0.5831578947368421
User 26227 AUC after training: 0.5789473684210527
User 26227 does not improve AUC. Reverting changes.
Training on augumented user 23679 27/50 current_auc = 0.5831578947368421
User 23679 AUC after training: 0.5824561403508772
User 23679 does not improve AUC. Reverting changes.
Training on augumented user 17904 28/50 current_auc = 0.5831578947368421
User 17904 AUC after training: 0.5817543859649122
User 17904 does not improve AUC. Reverting changes.
Training on augumented user 95089 29/50 current_auc = 0.5831578947368421
User 95089 AUC after training: 0.5807017543859649
User 95089 does not improve AUC. Reverting changes.
Training on augumented user 25772 30/50 current_auc = 0.5831578947368421
User 25772 AUC after training: 0.5796491228070175
User 25772 does not improve AUC. Reverting changes.
Training on augumented user 23627 31/50 current_auc = 0.5831578947368421
User 23627 AUC after training: 0.5810526315789473
User 23627 does not improve AUC. Reverting changes.
Training on augumented user 25996 32/50 current_auc = 0.5831578947368421
User 25996 AUC after training: 0.5817543859649124
User 25996 does not improve AUC. Reverting changes.
Training on augumented user 111177 33/50 current_auc = 0.5831578947368421
User 111177 AUC after training: 0.5803508771929824
User 111177 does not improve AUC. Reverting changes.
Training on augumented user 83066 34/50 current_auc = 0.5831578947368421
User 83066 AUC after training: 0.5817543859649122
User 83066 does not improve AUC. Reverting changes.
Training on augumented user 60034 35/50 current_auc = 0.5831578947368421
User 60034 AUC after training: 0.5810526315789474
User 60034 does not improve AUC. Reverting changes.
Training on augumented user 13734 36/50 current_auc = 0.5831578947368421
User 13734 AUC after training: 0.5803508771929824
User 13734 does not improve AUC. Reverting changes.
Training on augumented user 94879 37/50 current_auc = 0.5831578947368421
User 94879 AUC after training: 0.5810526315789474
User 94879 does not improve AUC. Reverting changes.
Training on augumented user 27527 38/50 current_auc = 0.5831578947368421
User 27527 AUC after training: 0.5817543859649122
User 27527 does not improve AUC. Reverting changes.
Training on augumented user 37575 39/50 current_auc = 0.5831578947368421
User 37575 AUC after training: 0.5803508771929824
User 37575 does not improve AUC. Reverting changes.
Training on augumented user 9377 40/50 current_auc = 0.5831578947368421
User 9377 AUC after training: 0.5824561403508772
User 9377 does not improve AUC. Reverting changes.
Training on augumented user 127753 41/50 current_auc = 0.5831578947368421
User 127753 AUC after training: 0.5824561403508771
User 127753 does not improve AUC. Reverting changes.
Training on augumented user 49436 42/50 current_auc = 0.5831578947368421
User 49436 AUC after training: 0.5824561403508772
User 49436 does not improve AUC. Reverting changes.
Training on augumented user 12276 43/50 current_auc = 0.5831578947368421
User 12276 AUC after training: 0.5810526315789474
User 12276 does not improve AUC. Reverting changes.
Training on augumented user 5162 44/50 current_auc = 0.5831578947368421
User 5162 AUC after training: 0.5817543859649124
User 5162 does not improve AUC. Reverting changes.
Training on augumented user 118028 45/50 current_auc = 0.5831578947368421
User 118028 AUC after training: 0.5817543859649122
User 118028 does not improve AUC. Reverting changes.
Training on augumented user 17625 46/50 current_auc = 0.5831578947368421
User 17625 AUC after training: 0.5803508771929824
User 17625 does not improve AUC. Reverting changes.
Training on augumented user 55247 47/50 current_auc = 0.5831578947368421
User 55247 AUC after training: 0.5831578947368421
User 55247 does not improve AUC. Reverting changes.
Training on augumented user 17688 48/50 current_auc = 0.5831578947368421
User 17688 AUC after training: 0.5803508771929824
User 17688 does not improve AUC. Reverting changes.
Training on augumented user 123062 49/50 current_auc = 0.5831578947368421
User 123062 AUC after training: 0.5817543859649122
User 123062 does not improve AUC. Reverting changes.
[2024-12-02 18:45:59.153207] start test user 58922 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:59.597768] start test user 58922 125/568 recall augumented users by random, augumented_users = [63606, 48041, 31495, 12908, 57721, 77262, 103225, 13662, 124987, 67623, 96744, 103003, 129462, 115136, 104124, 105269, 86195, 68724, 38810, 64638, 37694, 96607, 106611, 60648, 12200, 123140, 53752, 58658, 137258, 24479, 113733, 62895, 72879, 92399, 117659, 2366, 33922, 34354, 17144, 33097, 30403, 77079, 132775, 102772, 23172, 94407, 43294, 80762, 103490, 103927]
[2024-12-02 18:45:59.614607] user = 58922 Cloud 125/568
[2024-12-02 18:45:59.673855] user = 58922 Local 125/568
[2024-12-02 18:45:59.782526] user = 58922 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:01.970129] user = 58922 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.730420649272367
Training on augumented user 63606 0/50 current_auc = 0.730420649272367
User 63606 AUC after training: 0.7306493800051665
User 63606 improves AUC. Keeping the model.
Training on augumented user 48041 1/50 current_auc = 0.7306493800051665
User 48041 AUC after training: 0.7305686515112374
User 48041 does not improve AUC. Reverting changes.
Training on augumented user 31495 2/50 current_auc = 0.7306493800051665
User 31495 AUC after training: 0.7305363601136657
User 31495 does not improve AUC. Reverting changes.
Training on augumented user 12908 3/50 current_auc = 0.7306493800051665
User 12908 AUC after training: 0.7305847972100232
User 12908 does not improve AUC. Reverting changes.
Training on augumented user 57721 4/50 current_auc = 0.7306493800051665
User 57721 AUC after training: 0.7307085809007147
User 57721 improves AUC. Keeping the model.
Training on augumented user 77262 5/50 current_auc = 0.7307085809007147
User 77262 AUC after training: 0.7304852320675106
User 77262 does not improve AUC. Reverting changes.
Training on augumented user 103225 6/50 current_auc = 0.7307085809007147
User 103225 AUC after training: 0.7306197795573928
User 103225 does not improve AUC. Reverting changes.
Training on augumented user 13662 7/50 current_auc = 0.7307085809007147
User 13662 AUC after training: 0.7307462541978816
User 13662 improves AUC. Keeping the model.
Training on augumented user 124987 8/50 current_auc = 0.7307462541978816
User 124987 AUC after training: 0.730684362352536
User 124987 does not improve AUC. Reverting changes.
Training on augumented user 67623 9/50 current_auc = 0.7307462541978816
User 67623 AUC after training: 0.7306117067079996
User 67623 does not improve AUC. Reverting changes.
Training on augumented user 96744 10/50 current_auc = 0.7307462541978816
User 96744 AUC after training: 0.7308000731938344
User 96744 improves AUC. Keeping the model.
Training on augumented user 103003 11/50 current_auc = 0.7308000731938344
User 103003 AUC after training: 0.730878110737966
User 103003 improves AUC. Keeping the model.
Training on augumented user 129462 12/50 current_auc = 0.730878110737966
User 129462 AUC after training: 0.7309561482820977
User 129462 improves AUC. Keeping the model.
Training on augumented user 115136 13/50 current_auc = 0.7309561482820977
User 115136 AUC after training: 0.7307866184448464
User 115136 does not improve AUC. Reverting changes.
Training on augumented user 104124 14/50 current_auc = 0.7309561482820977
User 104124 AUC after training: 0.7309696030310859
User 104124 improves AUC. Keeping the model.
Training on augumented user 105269 15/50 current_auc = 0.7309696030310859
User 105269 AUC after training: 0.7309857487298717
User 105269 improves AUC. Keeping the model.
Training on augumented user 86195 16/50 current_auc = 0.7309857487298717
User 86195 AUC after training: 0.7309803668302765
User 86195 does not improve AUC. Reverting changes.
Training on augumented user 68724 17/50 current_auc = 0.7309857487298717
User 68724 AUC after training: 0.730937311633514
User 68724 does not improve AUC. Reverting changes.
Training on augumented user 38810 18/50 current_auc = 0.7309857487298717
User 38810 AUC after training: 0.7310826229225869
User 38810 improves AUC. Keeping the model.
Training on augumented user 64638 19/50 current_auc = 0.7310826229225869
User 64638 AUC after training: 0.731373245500732
User 64638 improves AUC. Keeping the model.
Training on augumented user 37694 20/50 current_auc = 0.731373245500732
User 37694 AUC after training: 0.7312709894084216
User 37694 does not improve AUC. Reverting changes.
Training on augumented user 96607 21/50 current_auc = 0.731373245500732
User 96607 AUC after training: 0.7312064066132783
User 96607 does not improve AUC. Reverting changes.
Training on augumented user 106611 22/50 current_auc = 0.731373245500732
User 106611 AUC after training: 0.7315777576853526
User 106611 improves AUC. Keeping the model.
Training on augumented user 60648 23/50 current_auc = 0.7315777576853526
User 60648 AUC after training: 0.7316665590286747
User 60648 improves AUC. Keeping the model.
Training on augumented user 12200 24/50 current_auc = 0.7316665590286747
User 12200 AUC after training: 0.7315616119865667
User 12200 does not improve AUC. Reverting changes.
Training on augumented user 123140 25/50 current_auc = 0.7316665590286747
User 123140 AUC after training: 0.7317149961250322
User 123140 improves AUC. Keeping the model.
Training on augumented user 53752 26/50 current_auc = 0.7317149961250322
User 53752 AUC after training: 0.7315885214845432
User 53752 does not improve AUC. Reverting changes.
Training on augumented user 58658 27/50 current_auc = 0.7317149961250322
User 58658 AUC after training: 0.7314485920950659
User 58658 does not improve AUC. Reverting changes.
Training on augumented user 137258 28/50 current_auc = 0.7317149961250322
User 137258 AUC after training: 0.7315266296391973
User 137258 does not improve AUC. Reverting changes.
Training on augumented user 24479 29/50 current_auc = 0.7317149961250322
User 24479 AUC after training: 0.731470119693447
User 24479 does not improve AUC. Reverting changes.
Training on augumented user 113733 30/50 current_auc = 0.7317149961250322
User 113733 AUC after training: 0.7316235038319125
User 113733 does not improve AUC. Reverting changes.
Training on augumented user 62895 31/50 current_auc = 0.7317149961250322
User 62895 AUC after training: 0.7316988504262464
User 62895 does not improve AUC. Reverting changes.
Training on augumented user 72879 32/50 current_auc = 0.7317149961250322
User 72879 AUC after training: 0.7317042323258417
User 72879 does not improve AUC. Reverting changes.
Training on augumented user 92399 33/50 current_auc = 0.7317149961250322
User 92399 AUC after training: 0.7316557952294842
User 92399 does not improve AUC. Reverting changes.
Training on augumented user 117659 34/50 current_auc = 0.7317149961250322
User 117659 AUC after training: 0.7315965943339361
User 117659 does not improve AUC. Reverting changes.
Training on augumented user 2366 35/50 current_auc = 0.7317149961250322
User 2366 AUC after training: 0.7317123051752348
User 2366 does not improve AUC. Reverting changes.
Training on augumented user 33922 36/50 current_auc = 0.7317149961250322
User 33922 AUC after training: 0.731402845948506
User 33922 does not improve AUC. Reverting changes.
Training on augumented user 34354 37/50 current_auc = 0.7317149961250322
User 34354 AUC after training: 0.7316208128821149
User 34354 does not improve AUC. Reverting changes.
Training on augumented user 17144 38/50 current_auc = 0.7317149961250322
User 17144 AUC after training: 0.7315616119865668
User 17144 does not improve AUC. Reverting changes.
Training on augumented user 33097 39/50 current_auc = 0.7317149961250322
User 33097 AUC after training: 0.7315239386893998
User 33097 does not improve AUC. Reverting changes.
Training on augumented user 30403 40/50 current_auc = 0.7317149961250322
User 30403 AUC after training: 0.7315562300869713
User 30403 does not improve AUC. Reverting changes.
Training on augumented user 77079 41/50 current_auc = 0.7317149961250322
User 77079 AUC after training: 0.7313517179023508
User 77079 does not improve AUC. Reverting changes.
Training on augumented user 132775 42/50 current_auc = 0.7317149961250322
User 132775 AUC after training: 0.7315965943339362
User 132775 does not improve AUC. Reverting changes.
Training on augumented user 102772 43/50 current_auc = 0.7317149961250322
User 102772 AUC after training: 0.7315562300869716
User 102772 does not improve AUC. Reverting changes.
Training on augumented user 23172 44/50 current_auc = 0.7317149961250322
User 23172 AUC after training: 0.7314943382416258
User 23172 does not improve AUC. Reverting changes.
Training on augumented user 94407 45/50 current_auc = 0.7317149961250322
User 94407 AUC after training: 0.7317445965728064
User 94407 improves AUC. Keeping the model.
Training on augumented user 43294 46/50 current_auc = 0.7317445965728064
User 43294 AUC after training: 0.7316557952294842
User 43294 does not improve AUC. Reverting changes.
Training on augumented user 80762 47/50 current_auc = 0.7317445965728064
User 80762 AUC after training: 0.7316235038319124
User 80762 does not improve AUC. Reverting changes.
Training on augumented user 103490 48/50 current_auc = 0.7317445965728064
User 103490 AUC after training: 0.7316154309825196
User 103490 does not improve AUC. Reverting changes.
Training on augumented user 103927 49/50 current_auc = 0.7317445965728064
User 103927 AUC after training: 0.7314378282958754
User 103927 does not improve AUC. Reverting changes.
[2024-12-02 18:46:35.640253] start test user 58953 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:36.059538] start test user 58953 126/568 recall augumented users by random, augumented_users = [36856, 70276, 4544, 39444, 72600, 109728, 56170, 87684, 61295, 75942, 71399, 9872, 57227, 25143, 13290, 30811, 23329, 135427, 134618, 130415, 105627, 35674, 59375, 18291, 73819, 76383, 7995, 14597, 26197, 73139, 89028, 51454, 12039, 55273, 64400, 83189, 90988, 93579, 128445, 50414, 125997, 2257, 422, 34177, 46776, 22822, 137081, 3836, 99922, 23561]
[2024-12-02 18:46:36.079626] user = 58953 Cloud 126/568
[2024-12-02 18:46:36.093895] user = 58953 Local 126/568
[2024-12-02 18:46:36.396251] user = 58953 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:38.546494] user = 58953 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5805515239477503
Training on augumented user 36856 0/50 current_auc = 0.5805515239477503
User 36856 AUC after training: 0.5776487663280117
User 36856 does not improve AUC. Reverting changes.
Training on augumented user 70276 1/50 current_auc = 0.5805515239477503
User 70276 AUC after training: 0.5798258345428157
User 70276 does not improve AUC. Reverting changes.
Training on augumented user 4544 2/50 current_auc = 0.5805515239477503
User 4544 AUC after training: 0.579100145137881
User 4544 does not improve AUC. Reverting changes.
Training on augumented user 39444 3/50 current_auc = 0.5805515239477503
User 39444 AUC after training: 0.5805515239477503
User 39444 does not improve AUC. Reverting changes.
Training on augumented user 72600 4/50 current_auc = 0.5805515239477503
User 72600 AUC after training: 0.5805515239477503
User 72600 does not improve AUC. Reverting changes.
Training on augumented user 109728 5/50 current_auc = 0.5805515239477503
User 109728 AUC after training: 0.5798258345428158
User 109728 does not improve AUC. Reverting changes.
Training on augumented user 56170 6/50 current_auc = 0.5805515239477503
User 56170 AUC after training: 0.579100145137881
User 56170 does not improve AUC. Reverting changes.
Training on augumented user 87684 7/50 current_auc = 0.5805515239477503
User 87684 AUC after training: 0.5798258345428157
User 87684 does not improve AUC. Reverting changes.
Training on augumented user 61295 8/50 current_auc = 0.5805515239477503
User 61295 AUC after training: 0.5805515239477503
User 61295 does not improve AUC. Reverting changes.
Training on augumented user 75942 9/50 current_auc = 0.5805515239477503
User 75942 AUC after training: 0.5812772133526851
User 75942 improves AUC. Keeping the model.
Training on augumented user 71399 10/50 current_auc = 0.5812772133526851
User 71399 AUC after training: 0.5805515239477503
User 71399 does not improve AUC. Reverting changes.
Training on augumented user 9872 11/50 current_auc = 0.5812772133526851
User 9872 AUC after training: 0.579100145137881
User 9872 does not improve AUC. Reverting changes.
Training on augumented user 57227 12/50 current_auc = 0.5812772133526851
User 57227 AUC after training: 0.5798258345428158
User 57227 does not improve AUC. Reverting changes.
Training on augumented user 25143 13/50 current_auc = 0.5812772133526851
User 25143 AUC after training: 0.5812772133526851
User 25143 does not improve AUC. Reverting changes.
Training on augumented user 13290 14/50 current_auc = 0.5812772133526851
User 13290 AUC after training: 0.5812772133526851
User 13290 does not improve AUC. Reverting changes.
Training on augumented user 30811 15/50 current_auc = 0.5812772133526851
User 30811 AUC after training: 0.5812772133526851
User 30811 does not improve AUC. Reverting changes.
Training on augumented user 23329 16/50 current_auc = 0.5812772133526851
User 23329 AUC after training: 0.5812772133526851
User 23329 does not improve AUC. Reverting changes.
Training on augumented user 135427 17/50 current_auc = 0.5812772133526851
User 135427 AUC after training: 0.5820029027576198
User 135427 improves AUC. Keeping the model.
Training on augumented user 134618 18/50 current_auc = 0.5820029027576198
User 134618 AUC after training: 0.5820029027576198
User 134618 does not improve AUC. Reverting changes.
Training on augumented user 130415 19/50 current_auc = 0.5820029027576198
User 130415 AUC after training: 0.5805515239477503
User 130415 does not improve AUC. Reverting changes.
Training on augumented user 105627 20/50 current_auc = 0.5820029027576198
User 105627 AUC after training: 0.5812772133526851
User 105627 does not improve AUC. Reverting changes.
Training on augumented user 35674 21/50 current_auc = 0.5820029027576198
User 35674 AUC after training: 0.579100145137881
User 35674 does not improve AUC. Reverting changes.
Training on augumented user 59375 22/50 current_auc = 0.5820029027576198
User 59375 AUC after training: 0.5805515239477503
User 59375 does not improve AUC. Reverting changes.
Training on augumented user 18291 23/50 current_auc = 0.5820029027576198
User 18291 AUC after training: 0.579100145137881
User 18291 does not improve AUC. Reverting changes.
Training on augumented user 73819 24/50 current_auc = 0.5820029027576198
User 73819 AUC after training: 0.5812772133526851
User 73819 does not improve AUC. Reverting changes.
Training on augumented user 76383 25/50 current_auc = 0.5820029027576198
User 76383 AUC after training: 0.5798258345428157
User 76383 does not improve AUC. Reverting changes.
Training on augumented user 7995 26/50 current_auc = 0.5820029027576198
User 7995 AUC after training: 0.5805515239477504
User 7995 does not improve AUC. Reverting changes.
Training on augumented user 14597 27/50 current_auc = 0.5820029027576198
User 14597 AUC after training: 0.5798258345428157
User 14597 does not improve AUC. Reverting changes.
Training on augumented user 26197 28/50 current_auc = 0.5820029027576198
User 26197 AUC after training: 0.5761973875181422
User 26197 does not improve AUC. Reverting changes.
Training on augumented user 73139 29/50 current_auc = 0.5820029027576198
User 73139 AUC after training: 0.5798258345428157
User 73139 does not improve AUC. Reverting changes.
Training on augumented user 89028 30/50 current_auc = 0.5820029027576198
User 89028 AUC after training: 0.579100145137881
User 89028 does not improve AUC. Reverting changes.
Training on augumented user 51454 31/50 current_auc = 0.5820029027576198
User 51454 AUC after training: 0.5805515239477504
User 51454 does not improve AUC. Reverting changes.
Training on augumented user 12039 32/50 current_auc = 0.5820029027576198
User 12039 AUC after training: 0.5791001451378811
User 12039 does not improve AUC. Reverting changes.
Training on augumented user 55273 33/50 current_auc = 0.5820029027576198
User 55273 AUC after training: 0.5805515239477503
User 55273 does not improve AUC. Reverting changes.
Training on augumented user 64400 34/50 current_auc = 0.5820029027576198
User 64400 AUC after training: 0.5783744557329464
User 64400 does not improve AUC. Reverting changes.
Training on augumented user 83189 35/50 current_auc = 0.5820029027576198
User 83189 AUC after training: 0.5798258345428157
User 83189 does not improve AUC. Reverting changes.
Training on augumented user 90988 36/50 current_auc = 0.5820029027576198
User 90988 AUC after training: 0.5783744557329463
User 90988 does not improve AUC. Reverting changes.
Training on augumented user 93579 37/50 current_auc = 0.5820029027576198
User 93579 AUC after training: 0.5805515239477503
User 93579 does not improve AUC. Reverting changes.
Training on augumented user 128445 38/50 current_auc = 0.5820029027576198
User 128445 AUC after training: 0.5798258345428157
User 128445 does not improve AUC. Reverting changes.
Training on augumented user 50414 39/50 current_auc = 0.5820029027576198
User 50414 AUC after training: 0.581277213352685
User 50414 does not improve AUC. Reverting changes.
Training on augumented user 125997 40/50 current_auc = 0.5820029027576198
User 125997 AUC after training: 0.5798258345428157
User 125997 does not improve AUC. Reverting changes.
Training on augumented user 2257 41/50 current_auc = 0.5820029027576198
User 2257 AUC after training: 0.5798258345428158
User 2257 does not improve AUC. Reverting changes.
Training on augumented user 422 42/50 current_auc = 0.5820029027576198
User 422 AUC after training: 0.5820029027576198
User 422 does not improve AUC. Reverting changes.
Training on augumented user 34177 43/50 current_auc = 0.5820029027576198
User 34177 AUC after training: 0.5776487663280115
User 34177 does not improve AUC. Reverting changes.
Training on augumented user 46776 44/50 current_auc = 0.5820029027576198
User 46776 AUC after training: 0.576923076923077
User 46776 does not improve AUC. Reverting changes.
Training on augumented user 22822 45/50 current_auc = 0.5820029027576198
User 22822 AUC after training: 0.5820029027576198
User 22822 does not improve AUC. Reverting changes.
Training on augumented user 137081 46/50 current_auc = 0.5820029027576198
User 137081 AUC after training: 0.579100145137881
User 137081 does not improve AUC. Reverting changes.
Training on augumented user 3836 47/50 current_auc = 0.5820029027576198
User 3836 AUC after training: 0.5812772133526851
User 3836 does not improve AUC. Reverting changes.
Training on augumented user 99922 48/50 current_auc = 0.5820029027576198
User 99922 AUC after training: 0.579100145137881
User 99922 does not improve AUC. Reverting changes.
Training on augumented user 23561 49/50 current_auc = 0.5820029027576198
User 23561 AUC after training: 0.5798258345428157
User 23561 does not improve AUC. Reverting changes.
[2024-12-02 18:47:10.022760] start test user 58970 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:10.665414] start test user 58970 127/568 recall augumented users by random, augumented_users = [117037, 15242, 107199, 35497, 42204, 59043, 51055, 2657, 136213, 63819, 132660, 89698, 66438, 94297, 772, 84084, 43859, 6772, 607, 33996, 84841, 62041, 62270, 121337, 11973, 138228, 29593, 83722, 116517, 71174, 14949, 6483, 27598, 93098, 122087, 58005, 41387, 33792, 549, 130666, 61627, 58822, 118724, 7505, 71721, 96036, 131111, 69320, 87650, 77077]
[2024-12-02 18:47:10.680988] user = 58970 Cloud 127/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:10.694530] user = 58970 Local 127/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:10.739673] user = 58970 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:14.196035] user = 58970 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 117037 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117037 AUC after training: 0.5
User 117037 does not improve AUC. Reverting changes.
Training on augumented user 15242 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15242 AUC after training: 0.5
User 15242 does not improve AUC. Reverting changes.
Training on augumented user 107199 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107199 AUC after training: 0.5
User 107199 does not improve AUC. Reverting changes.
Training on augumented user 35497 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35497 AUC after training: 0.5
User 35497 does not improve AUC. Reverting changes.
Training on augumented user 42204 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42204 AUC after training: 0.5
User 42204 does not improve AUC. Reverting changes.
Training on augumented user 59043 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59043 AUC after training: 0.5
User 59043 does not improve AUC. Reverting changes.
Training on augumented user 51055 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51055 AUC after training: 0.5
User 51055 does not improve AUC. Reverting changes.
Training on augumented user 2657 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2657 AUC after training: 0.5
User 2657 does not improve AUC. Reverting changes.
Training on augumented user 136213 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136213 AUC after training: 0.5
User 136213 does not improve AUC. Reverting changes.
Training on augumented user 63819 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63819 AUC after training: 0.5
User 63819 does not improve AUC. Reverting changes.
Training on augumented user 132660 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132660 AUC after training: 0.5
User 132660 does not improve AUC. Reverting changes.
Training on augumented user 89698 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89698 AUC after training: 0.5
User 89698 does not improve AUC. Reverting changes.
Training on augumented user 66438 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66438 AUC after training: 0.5
User 66438 does not improve AUC. Reverting changes.
Training on augumented user 94297 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94297 AUC after training: 0.5
User 94297 does not improve AUC. Reverting changes.
Training on augumented user 772 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 772 AUC after training: 0.5
User 772 does not improve AUC. Reverting changes.
Training on augumented user 84084 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84084 AUC after training: 0.5
User 84084 does not improve AUC. Reverting changes.
Training on augumented user 43859 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43859 AUC after training: 0.5
User 43859 does not improve AUC. Reverting changes.
Training on augumented user 6772 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6772 AUC after training: 0.5
User 6772 does not improve AUC. Reverting changes.
Training on augumented user 607 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 607 AUC after training: 0.5
User 607 does not improve AUC. Reverting changes.
Training on augumented user 33996 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33996 AUC after training: 0.5
User 33996 does not improve AUC. Reverting changes.
Training on augumented user 84841 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84841 AUC after training: 0.5
User 84841 does not improve AUC. Reverting changes.
Training on augumented user 62041 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62041 AUC after training: 0.5
User 62041 does not improve AUC. Reverting changes.
Training on augumented user 62270 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62270 AUC after training: 0.5
User 62270 does not improve AUC. Reverting changes.
Training on augumented user 121337 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121337 AUC after training: 0.5
User 121337 does not improve AUC. Reverting changes.
Training on augumented user 11973 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11973 AUC after training: 0.5
User 11973 does not improve AUC. Reverting changes.
Training on augumented user 138228 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138228 AUC after training: 0.5
User 138228 does not improve AUC. Reverting changes.
Training on augumented user 29593 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29593 AUC after training: 0.5
User 29593 does not improve AUC. Reverting changes.
Training on augumented user 83722 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83722 AUC after training: 0.5
User 83722 does not improve AUC. Reverting changes.
Training on augumented user 116517 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116517 AUC after training: 0.5
User 116517 does not improve AUC. Reverting changes.
Training on augumented user 71174 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71174 AUC after training: 0.5
User 71174 does not improve AUC. Reverting changes.
Training on augumented user 14949 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14949 AUC after training: 0.5
User 14949 does not improve AUC. Reverting changes.
Training on augumented user 6483 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6483 AUC after training: 0.5
User 6483 does not improve AUC. Reverting changes.
Training on augumented user 27598 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27598 AUC after training: 0.5
User 27598 does not improve AUC. Reverting changes.
Training on augumented user 93098 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93098 AUC after training: 0.5
User 93098 does not improve AUC. Reverting changes.
Training on augumented user 122087 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122087 AUC after training: 0.5
User 122087 does not improve AUC. Reverting changes.
Training on augumented user 58005 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58005 AUC after training: 0.5
User 58005 does not improve AUC. Reverting changes.
Training on augumented user 41387 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41387 AUC after training: 0.5
User 41387 does not improve AUC. Reverting changes.
Training on augumented user 33792 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33792 AUC after training: 0.5
User 33792 does not improve AUC. Reverting changes.
Training on augumented user 549 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 549 AUC after training: 0.5
User 549 does not improve AUC. Reverting changes.
Training on augumented user 130666 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130666 AUC after training: 0.5
User 130666 does not improve AUC. Reverting changes.
Training on augumented user 61627 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61627 AUC after training: 0.5
User 61627 does not improve AUC. Reverting changes.
Training on augumented user 58822 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58822 AUC after training: 0.5
User 58822 does not improve AUC. Reverting changes.
Training on augumented user 118724 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118724 AUC after training: 0.5
User 118724 does not improve AUC. Reverting changes.
Training on augumented user 7505 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7505 AUC after training: 0.5
User 7505 does not improve AUC. Reverting changes.
Training on augumented user 71721 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71721 AUC after training: 0.5
User 71721 does not improve AUC. Reverting changes.
Training on augumented user 96036 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96036 AUC after training: 0.5
User 96036 does not improve AUC. Reverting changes.
Training on augumented user 131111 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131111 AUC after training: 0.5
User 131111 does not improve AUC. Reverting changes.
Training on augumented user 69320 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69320 AUC after training: 0.5
User 69320 does not improve AUC. Reverting changes.
Training on augumented user 87650 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87650 AUC after training: 0.5
User 87650 does not improve AUC. Reverting changes.
Training on augumented user 77077 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77077 AUC after training: 0.5
User 77077 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:37.783495] start test user 58987 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:38.195379] start test user 58987 128/568 recall augumented users by random, augumented_users = [92428, 62221, 43651, 124729, 48263, 75957, 52073, 102903, 131083, 89740, 85606, 21136, 114426, 90899, 129185, 11652, 83728, 132560, 56644, 43461, 81507, 8900, 80550, 55204, 3689, 125879, 112042, 25939, 51805, 78197, 119614, 87261, 97026, 76691, 1159, 63557, 128326, 28668, 22267, 123714, 89864, 45464, 132326, 82672, 26779, 18537, 4567, 90965, 131458, 84423]
[2024-12-02 18:47:38.212390] user = 58987 Cloud 128/568
[2024-12-02 18:47:38.234461] user = 58987 Local 128/568
[2024-12-02 18:47:38.482871] user = 58987 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:41.409935] user = 58987 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6472742943331178
Training on augumented user 92428 0/50 current_auc = 0.6472742943331178
User 92428 AUC after training: 0.6470588235294117
User 92428 does not improve AUC. Reverting changes.
Training on augumented user 62221 1/50 current_auc = 0.6472742943331178
User 62221 AUC after training: 0.6470588235294117
User 62221 does not improve AUC. Reverting changes.
Training on augumented user 43651 2/50 current_auc = 0.6472742943331178
User 43651 AUC after training: 0.6470588235294117
User 43651 does not improve AUC. Reverting changes.
Training on augumented user 124729 3/50 current_auc = 0.6472742943331178
User 124729 AUC after training: 0.6472742943331178
User 124729 does not improve AUC. Reverting changes.
Training on augumented user 48263 4/50 current_auc = 0.6472742943331178
User 48263 AUC after training: 0.6470588235294118
User 48263 does not improve AUC. Reverting changes.
Training on augumented user 75957 5/50 current_auc = 0.6472742943331178
User 75957 AUC after training: 0.6481361775479423
User 75957 improves AUC. Keeping the model.
Training on augumented user 52073 6/50 current_auc = 0.6481361775479423
User 52073 AUC after training: 0.6481361775479423
User 52073 does not improve AUC. Reverting changes.
Training on augumented user 102903 7/50 current_auc = 0.6481361775479423
User 102903 AUC after training: 0.6481361775479423
User 102903 does not improve AUC. Reverting changes.
Training on augumented user 131083 8/50 current_auc = 0.6481361775479423
User 131083 AUC after training: 0.647489765136824
User 131083 does not improve AUC. Reverting changes.
Training on augumented user 89740 9/50 current_auc = 0.6481361775479423
User 89740 AUC after training: 0.6483516483516484
User 89740 improves AUC. Keeping the model.
Training on augumented user 85606 10/50 current_auc = 0.6483516483516484
User 85606 AUC after training: 0.6477052359405301
User 85606 does not improve AUC. Reverting changes.
Training on augumented user 21136 11/50 current_auc = 0.6483516483516484
User 21136 AUC after training: 0.6479207067442362
User 21136 does not improve AUC. Reverting changes.
Training on augumented user 114426 12/50 current_auc = 0.6483516483516484
User 114426 AUC after training: 0.6483516483516484
User 114426 does not improve AUC. Reverting changes.
Training on augumented user 90899 13/50 current_auc = 0.6483516483516484
User 90899 AUC after training: 0.6483516483516484
User 90899 does not improve AUC. Reverting changes.
Training on augumented user 129185 14/50 current_auc = 0.6483516483516484
User 129185 AUC after training: 0.6477052359405301
User 129185 does not improve AUC. Reverting changes.
Training on augumented user 11652 15/50 current_auc = 0.6483516483516484
User 11652 AUC after training: 0.6483516483516484
User 11652 does not improve AUC. Reverting changes.
Training on augumented user 83728 16/50 current_auc = 0.6483516483516484
User 83728 AUC after training: 0.6477052359405301
User 83728 does not improve AUC. Reverting changes.
Training on augumented user 132560 17/50 current_auc = 0.6483516483516484
User 132560 AUC after training: 0.6483516483516484
User 132560 does not improve AUC. Reverting changes.
Training on augumented user 56644 18/50 current_auc = 0.6483516483516484
User 56644 AUC after training: 0.6485671191553545
User 56644 improves AUC. Keeping the model.
Training on augumented user 43461 19/50 current_auc = 0.6485671191553545
User 43461 AUC after training: 0.6489980607627667
User 43461 improves AUC. Keeping the model.
Training on augumented user 81507 20/50 current_auc = 0.6489980607627667
User 81507 AUC after training: 0.6472742943331179
User 81507 does not improve AUC. Reverting changes.
Training on augumented user 8900 21/50 current_auc = 0.6489980607627667
User 8900 AUC after training: 0.6481361775479423
User 8900 does not improve AUC. Reverting changes.
Training on augumented user 80550 22/50 current_auc = 0.6489980607627667
User 80550 AUC after training: 0.6481361775479423
User 80550 does not improve AUC. Reverting changes.
Training on augumented user 55204 23/50 current_auc = 0.6489980607627667
User 55204 AUC after training: 0.6477052359405301
User 55204 does not improve AUC. Reverting changes.
Training on augumented user 3689 24/50 current_auc = 0.6489980607627667
User 3689 AUC after training: 0.6489980607627667
User 3689 does not improve AUC. Reverting changes.
Training on augumented user 125879 25/50 current_auc = 0.6489980607627667
User 125879 AUC after training: 0.6494290023701789
User 125879 improves AUC. Keeping the model.
Training on augumented user 112042 26/50 current_auc = 0.6494290023701789
User 112042 AUC after training: 0.649644473173885
User 112042 improves AUC. Keeping the model.
Training on augumented user 25939 27/50 current_auc = 0.649644473173885
User 25939 AUC after training: 0.6492135315664728
User 25939 does not improve AUC. Reverting changes.
Training on augumented user 51805 28/50 current_auc = 0.649644473173885
User 51805 AUC after training: 0.6494290023701788
User 51805 does not improve AUC. Reverting changes.
Training on augumented user 78197 29/50 current_auc = 0.649644473173885
User 78197 AUC after training: 0.649644473173885
User 78197 does not improve AUC. Reverting changes.
Training on augumented user 119614 30/50 current_auc = 0.649644473173885
User 119614 AUC after training: 0.6489980607627667
User 119614 does not improve AUC. Reverting changes.
Training on augumented user 87261 31/50 current_auc = 0.649644473173885
User 87261 AUC after training: 0.6496444731738849
User 87261 does not improve AUC. Reverting changes.
Training on augumented user 97026 32/50 current_auc = 0.649644473173885
User 97026 AUC after training: 0.6494290023701788
User 97026 does not improve AUC. Reverting changes.
Training on augumented user 76691 33/50 current_auc = 0.649644473173885
User 76691 AUC after training: 0.6487825899590606
User 76691 does not improve AUC. Reverting changes.
Training on augumented user 1159 34/50 current_auc = 0.649644473173885
User 1159 AUC after training: 0.647489765136824
User 1159 does not improve AUC. Reverting changes.
Training on augumented user 63557 35/50 current_auc = 0.649644473173885
User 63557 AUC after training: 0.6466278819219996
User 63557 does not improve AUC. Reverting changes.
Training on augumented user 128326 36/50 current_auc = 0.649644473173885
User 128326 AUC after training: 0.6461969403145874
User 128326 does not improve AUC. Reverting changes.
Training on augumented user 28668 37/50 current_auc = 0.649644473173885
User 28668 AUC after training: 0.6492135315664728
User 28668 does not improve AUC. Reverting changes.
Training on augumented user 22267 38/50 current_auc = 0.649644473173885
User 22267 AUC after training: 0.6500754147812972
User 22267 improves AUC. Keeping the model.
Training on augumented user 123714 39/50 current_auc = 0.6500754147812972
User 123714 AUC after training: 0.6498599439775911
User 123714 does not improve AUC. Reverting changes.
Training on augumented user 89864 40/50 current_auc = 0.6500754147812972
User 89864 AUC after training: 0.6489980607627666
User 89864 does not improve AUC. Reverting changes.
Training on augumented user 45464 41/50 current_auc = 0.6500754147812972
User 45464 AUC after training: 0.6498599439775911
User 45464 does not improve AUC. Reverting changes.
Training on augumented user 132326 42/50 current_auc = 0.6500754147812972
User 132326 AUC after training: 0.6502908855850033
User 132326 improves AUC. Keeping the model.
Training on augumented user 82672 43/50 current_auc = 0.6502908855850033
User 82672 AUC after training: 0.6485671191553544
User 82672 does not improve AUC. Reverting changes.
Training on augumented user 26779 44/50 current_auc = 0.6502908855850033
User 26779 AUC after training: 0.6498599439775911
User 26779 does not improve AUC. Reverting changes.
Training on augumented user 18537 45/50 current_auc = 0.6502908855850033
User 18537 AUC after training: 0.6494290023701789
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 4567 46/50 current_auc = 0.6502908855850033
User 4567 AUC after training: 0.6494290023701789
User 4567 does not improve AUC. Reverting changes.
Training on augumented user 90965 47/50 current_auc = 0.6502908855850033
User 90965 AUC after training: 0.649644473173885
User 90965 does not improve AUC. Reverting changes.
Training on augumented user 131458 48/50 current_auc = 0.6502908855850033
User 131458 AUC after training: 0.6481361775479423
User 131458 does not improve AUC. Reverting changes.
Training on augumented user 84423 49/50 current_auc = 0.6502908855850033
User 84423 AUC after training: 0.6485671191553545
User 84423 does not improve AUC. Reverting changes.
[2024-12-02 18:48:11.421398] start test user 59047 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:12.242310] start test user 59047 129/568 recall augumented users by random, augumented_users = [113731, 99084, 66365, 43704, 115790, 88761, 106959, 21387, 48886, 107293, 89944, 53643, 6048, 24263, 13138, 119958, 82282, 123216, 91270, 40493, 67047, 23440, 101433, 60193, 81769, 73482, 30239, 13068, 31521, 96927, 35435, 66359, 90437, 22796, 151, 8040, 41750, 7094, 44301, 118753, 131823, 122367, 31301, 23700, 116403, 123344, 28624, 77752, 112754, 96459]
[2024-12-02 18:48:12.265442] user = 59047 Cloud 129/568
[2024-12-02 18:48:12.283193] user = 59047 Local 129/568
[2024-12-02 18:48:12.436592] user = 59047 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:14.820039] user = 59047 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7200000000000001
Training on augumented user 113731 0/50 current_auc = 0.7200000000000001
User 113731 AUC after training: 0.7200000000000001
User 113731 does not improve AUC. Reverting changes.
Training on augumented user 99084 1/50 current_auc = 0.7200000000000001
User 99084 AUC after training: 0.7257142857142858
User 99084 improves AUC. Keeping the model.
Training on augumented user 66365 2/50 current_auc = 0.7257142857142858
User 66365 AUC after training: 0.7200000000000001
User 66365 does not improve AUC. Reverting changes.
Training on augumented user 43704 3/50 current_auc = 0.7257142857142858
User 43704 AUC after training: 0.7200000000000001
User 43704 does not improve AUC. Reverting changes.
Training on augumented user 115790 4/50 current_auc = 0.7257142857142858
User 115790 AUC after training: 0.7200000000000001
User 115790 does not improve AUC. Reverting changes.
Training on augumented user 88761 5/50 current_auc = 0.7257142857142858
User 88761 AUC after training: 0.7200000000000001
User 88761 does not improve AUC. Reverting changes.
Training on augumented user 106959 6/50 current_auc = 0.7257142857142858
User 106959 AUC after training: 0.7200000000000001
User 106959 does not improve AUC. Reverting changes.
Training on augumented user 21387 7/50 current_auc = 0.7257142857142858
User 21387 AUC after training: 0.7257142857142858
User 21387 does not improve AUC. Reverting changes.
Training on augumented user 48886 8/50 current_auc = 0.7257142857142858
User 48886 AUC after training: 0.7200000000000001
User 48886 does not improve AUC. Reverting changes.
Training on augumented user 107293 9/50 current_auc = 0.7257142857142858
User 107293 AUC after training: 0.7257142857142858
User 107293 does not improve AUC. Reverting changes.
Training on augumented user 89944 10/50 current_auc = 0.7257142857142858
User 89944 AUC after training: 0.7200000000000001
User 89944 does not improve AUC. Reverting changes.
Training on augumented user 53643 11/50 current_auc = 0.7257142857142858
User 53643 AUC after training: 0.7200000000000001
User 53643 does not improve AUC. Reverting changes.
Training on augumented user 6048 12/50 current_auc = 0.7257142857142858
User 6048 AUC after training: 0.7200000000000001
User 6048 does not improve AUC. Reverting changes.
Training on augumented user 24263 13/50 current_auc = 0.7257142857142858
User 24263 AUC after training: 0.7257142857142858
User 24263 does not improve AUC. Reverting changes.
Training on augumented user 13138 14/50 current_auc = 0.7257142857142858
User 13138 AUC after training: 0.7200000000000001
User 13138 does not improve AUC. Reverting changes.
Training on augumented user 119958 15/50 current_auc = 0.7257142857142858
User 119958 AUC after training: 0.7257142857142858
User 119958 does not improve AUC. Reverting changes.
Training on augumented user 82282 16/50 current_auc = 0.7257142857142858
User 82282 AUC after training: 0.7257142857142858
User 82282 does not improve AUC. Reverting changes.
Training on augumented user 123216 17/50 current_auc = 0.7257142857142858
User 123216 AUC after training: 0.7200000000000001
User 123216 does not improve AUC. Reverting changes.
Training on augumented user 91270 18/50 current_auc = 0.7257142857142858
User 91270 AUC after training: 0.7200000000000001
User 91270 does not improve AUC. Reverting changes.
Training on augumented user 40493 19/50 current_auc = 0.7257142857142858
User 40493 AUC after training: 0.7257142857142858
User 40493 does not improve AUC. Reverting changes.
Training on augumented user 67047 20/50 current_auc = 0.7257142857142858
User 67047 AUC after training: 0.7257142857142858
User 67047 does not improve AUC. Reverting changes.
Training on augumented user 23440 21/50 current_auc = 0.7257142857142858
User 23440 AUC after training: 0.7257142857142858
User 23440 does not improve AUC. Reverting changes.
Training on augumented user 101433 22/50 current_auc = 0.7257142857142858
User 101433 AUC after training: 0.7200000000000001
User 101433 does not improve AUC. Reverting changes.
Training on augumented user 60193 23/50 current_auc = 0.7257142857142858
User 60193 AUC after training: 0.7200000000000001
User 60193 does not improve AUC. Reverting changes.
Training on augumented user 81769 24/50 current_auc = 0.7257142857142858
User 81769 AUC after training: 0.7257142857142858
User 81769 does not improve AUC. Reverting changes.
Training on augumented user 73482 25/50 current_auc = 0.7257142857142858
User 73482 AUC after training: 0.7200000000000001
User 73482 does not improve AUC. Reverting changes.
Training on augumented user 30239 26/50 current_auc = 0.7257142857142858
User 30239 AUC after training: 0.7200000000000001
User 30239 does not improve AUC. Reverting changes.
Training on augumented user 13068 27/50 current_auc = 0.7257142857142858
User 13068 AUC after training: 0.7200000000000001
User 13068 does not improve AUC. Reverting changes.
Training on augumented user 31521 28/50 current_auc = 0.7257142857142858
User 31521 AUC after training: 0.7257142857142858
User 31521 does not improve AUC. Reverting changes.
Training on augumented user 96927 29/50 current_auc = 0.7257142857142858
User 96927 AUC after training: 0.7200000000000001
User 96927 does not improve AUC. Reverting changes.
Training on augumented user 35435 30/50 current_auc = 0.7257142857142858
User 35435 AUC after training: 0.7257142857142858
User 35435 does not improve AUC. Reverting changes.
Training on augumented user 66359 31/50 current_auc = 0.7257142857142858
User 66359 AUC after training: 0.7200000000000001
User 66359 does not improve AUC. Reverting changes.
Training on augumented user 90437 32/50 current_auc = 0.7257142857142858
User 90437 AUC after training: 0.7257142857142858
User 90437 does not improve AUC. Reverting changes.
Training on augumented user 22796 33/50 current_auc = 0.7257142857142858
User 22796 AUC after training: 0.7200000000000001
User 22796 does not improve AUC. Reverting changes.
Training on augumented user 151 34/50 current_auc = 0.7257142857142858
User 151 AUC after training: 0.7200000000000001
User 151 does not improve AUC. Reverting changes.
Training on augumented user 8040 35/50 current_auc = 0.7257142857142858
User 8040 AUC after training: 0.7200000000000001
User 8040 does not improve AUC. Reverting changes.
Training on augumented user 41750 36/50 current_auc = 0.7257142857142858
User 41750 AUC after training: 0.7200000000000001
User 41750 does not improve AUC. Reverting changes.
Training on augumented user 7094 37/50 current_auc = 0.7257142857142858
User 7094 AUC after training: 0.7200000000000001
User 7094 does not improve AUC. Reverting changes.
Training on augumented user 44301 38/50 current_auc = 0.7257142857142858
User 44301 AUC after training: 0.7200000000000001
User 44301 does not improve AUC. Reverting changes.
Training on augumented user 118753 39/50 current_auc = 0.7257142857142858
User 118753 AUC after training: 0.7200000000000001
User 118753 does not improve AUC. Reverting changes.
Training on augumented user 131823 40/50 current_auc = 0.7257142857142858
User 131823 AUC after training: 0.7200000000000001
User 131823 does not improve AUC. Reverting changes.
Training on augumented user 122367 41/50 current_auc = 0.7257142857142858
User 122367 AUC after training: 0.7257142857142858
User 122367 does not improve AUC. Reverting changes.
Training on augumented user 31301 42/50 current_auc = 0.7257142857142858
User 31301 AUC after training: 0.7200000000000001
User 31301 does not improve AUC. Reverting changes.
Training on augumented user 23700 43/50 current_auc = 0.7257142857142858
User 23700 AUC after training: 0.7200000000000001
User 23700 does not improve AUC. Reverting changes.
Training on augumented user 116403 44/50 current_auc = 0.7257142857142858
User 116403 AUC after training: 0.7257142857142858
User 116403 does not improve AUC. Reverting changes.
Training on augumented user 123344 45/50 current_auc = 0.7257142857142858
User 123344 AUC after training: 0.7200000000000001
User 123344 does not improve AUC. Reverting changes.
Training on augumented user 28624 46/50 current_auc = 0.7257142857142858
User 28624 AUC after training: 0.7257142857142858
User 28624 does not improve AUC. Reverting changes.
Training on augumented user 77752 47/50 current_auc = 0.7257142857142858
User 77752 AUC after training: 0.7200000000000001
User 77752 does not improve AUC. Reverting changes.
Training on augumented user 112754 48/50 current_auc = 0.7257142857142858
User 112754 AUC after training: 0.7200000000000001
User 112754 does not improve AUC. Reverting changes.
Training on augumented user 96459 49/50 current_auc = 0.7257142857142858
User 96459 AUC after training: 0.7200000000000001
User 96459 does not improve AUC. Reverting changes.
[2024-12-02 18:48:44.713345] start test user 59097 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:45.158382] start test user 59097 130/568 recall augumented users by random, augumented_users = [38212, 76412, 45873, 17890, 118864, 92923, 137000, 27295, 22311, 85396, 58526, 106155, 1652, 132754, 14728, 127503, 22045, 22684, 99917, 56880, 84327, 94324, 11281, 19511, 103987, 105859, 44992, 92585, 97073, 64438, 128734, 23766, 118892, 129785, 91741, 34175, 73570, 29430, 44765, 124639, 22953, 92123, 129648, 57917, 101075, 109915, 13186, 93101, 43025, 102180]
[2024-12-02 18:48:45.173823] user = 59097 Cloud 130/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:45.180499] user = 59097 Local 130/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:45.241781] user = 59097 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:47.494149] user = 59097 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 38212 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38212 AUC after training: 0.5
User 38212 does not improve AUC. Reverting changes.
Training on augumented user 76412 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76412 AUC after training: 0.5
User 76412 does not improve AUC. Reverting changes.
Training on augumented user 45873 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45873 AUC after training: 0.5
User 45873 does not improve AUC. Reverting changes.
Training on augumented user 17890 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17890 AUC after training: 0.5
User 17890 does not improve AUC. Reverting changes.
Training on augumented user 118864 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118864 AUC after training: 0.5
User 118864 does not improve AUC. Reverting changes.
Training on augumented user 92923 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92923 AUC after training: 0.5
User 92923 does not improve AUC. Reverting changes.
Training on augumented user 137000 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137000 AUC after training: 0.5
User 137000 does not improve AUC. Reverting changes.
Training on augumented user 27295 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27295 AUC after training: 0.5
User 27295 does not improve AUC. Reverting changes.
Training on augumented user 22311 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22311 AUC after training: 0.5
User 22311 does not improve AUC. Reverting changes.
Training on augumented user 85396 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85396 AUC after training: 0.5
User 85396 does not improve AUC. Reverting changes.
Training on augumented user 58526 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58526 AUC after training: 0.5
User 58526 does not improve AUC. Reverting changes.
Training on augumented user 106155 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106155 AUC after training: 0.5
User 106155 does not improve AUC. Reverting changes.
Training on augumented user 1652 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1652 AUC after training: 0.5
User 1652 does not improve AUC. Reverting changes.
Training on augumented user 132754 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132754 AUC after training: 0.5
User 132754 does not improve AUC. Reverting changes.
Training on augumented user 14728 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14728 AUC after training: 0.5
User 14728 does not improve AUC. Reverting changes.
Training on augumented user 127503 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127503 AUC after training: 0.5
User 127503 does not improve AUC. Reverting changes.
Training on augumented user 22045 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22045 AUC after training: 0.5
User 22045 does not improve AUC. Reverting changes.
Training on augumented user 22684 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22684 AUC after training: 0.5
User 22684 does not improve AUC. Reverting changes.
Training on augumented user 99917 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99917 AUC after training: 0.5
User 99917 does not improve AUC. Reverting changes.
Training on augumented user 56880 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56880 AUC after training: 0.5
User 56880 does not improve AUC. Reverting changes.
Training on augumented user 84327 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84327 AUC after training: 0.5
User 84327 does not improve AUC. Reverting changes.
Training on augumented user 94324 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94324 AUC after training: 0.5
User 94324 does not improve AUC. Reverting changes.
Training on augumented user 11281 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11281 AUC after training: 0.5
User 11281 does not improve AUC. Reverting changes.
Training on augumented user 19511 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19511 AUC after training: 0.5
User 19511 does not improve AUC. Reverting changes.
Training on augumented user 103987 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103987 AUC after training: 0.5
User 103987 does not improve AUC. Reverting changes.
Training on augumented user 105859 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105859 AUC after training: 0.5
User 105859 does not improve AUC. Reverting changes.
Training on augumented user 44992 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44992 AUC after training: 0.5
User 44992 does not improve AUC. Reverting changes.
Training on augumented user 92585 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92585 AUC after training: 0.5
User 92585 does not improve AUC. Reverting changes.
Training on augumented user 97073 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97073 AUC after training: 0.5
User 97073 does not improve AUC. Reverting changes.
Training on augumented user 64438 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64438 AUC after training: 0.5
User 64438 does not improve AUC. Reverting changes.
Training on augumented user 128734 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128734 AUC after training: 0.5
User 128734 does not improve AUC. Reverting changes.
Training on augumented user 23766 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23766 AUC after training: 0.5
User 23766 does not improve AUC. Reverting changes.
Training on augumented user 118892 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118892 AUC after training: 0.5
User 118892 does not improve AUC. Reverting changes.
Training on augumented user 129785 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129785 AUC after training: 0.5
User 129785 does not improve AUC. Reverting changes.
Training on augumented user 91741 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91741 AUC after training: 0.5
User 91741 does not improve AUC. Reverting changes.
Training on augumented user 34175 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34175 AUC after training: 0.5
User 34175 does not improve AUC. Reverting changes.
Training on augumented user 73570 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73570 AUC after training: 0.5
User 73570 does not improve AUC. Reverting changes.
Training on augumented user 29430 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29430 AUC after training: 0.5
User 29430 does not improve AUC. Reverting changes.
Training on augumented user 44765 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44765 AUC after training: 0.5
User 44765 does not improve AUC. Reverting changes.
Training on augumented user 124639 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124639 AUC after training: 0.5
User 124639 does not improve AUC. Reverting changes.
Training on augumented user 22953 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22953 AUC after training: 0.5
User 22953 does not improve AUC. Reverting changes.
Training on augumented user 92123 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92123 AUC after training: 0.5
User 92123 does not improve AUC. Reverting changes.
Training on augumented user 129648 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129648 AUC after training: 0.5
User 129648 does not improve AUC. Reverting changes.
Training on augumented user 57917 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57917 AUC after training: 0.5
User 57917 does not improve AUC. Reverting changes.
Training on augumented user 101075 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101075 AUC after training: 0.5
User 101075 does not improve AUC. Reverting changes.
Training on augumented user 109915 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109915 AUC after training: 0.5
User 109915 does not improve AUC. Reverting changes.
Training on augumented user 13186 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13186 AUC after training: 0.5
User 13186 does not improve AUC. Reverting changes.
Training on augumented user 93101 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93101 AUC after training: 0.5
User 93101 does not improve AUC. Reverting changes.
Training on augumented user 43025 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43025 AUC after training: 0.5
User 43025 does not improve AUC. Reverting changes.
Training on augumented user 102180 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102180 AUC after training: 0.5
User 102180 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:18.090930] start test user 59117 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:18.534804] start test user 59117 131/568 recall augumented users by random, augumented_users = [135696, 79706, 6803, 55517, 35230, 79134, 17084, 117234, 119323, 26197, 125064, 4076, 80690, 111429, 102939, 125117, 19383, 104125, 86237, 41617, 47579, 138449, 36497, 3655, 18266, 134855, 75360, 92162, 116373, 5222, 109515, 28998, 52865, 68092, 89989, 122415, 48246, 130997, 46744, 112121, 17894, 49211, 5357, 135075, 87631, 99674, 72125, 119219, 72531, 59531]
[2024-12-02 18:49:18.551205] user = 59117 Cloud 131/568
[2024-12-02 18:49:18.566193] user = 59117 Local 131/568
[2024-12-02 18:49:18.607255] user = 59117 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:20.784378] user = 59117 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7106879606879606
Training on augumented user 135696 0/50 current_auc = 0.7106879606879606
User 135696 AUC after training: 0.7094594594594594
User 135696 does not improve AUC. Reverting changes.
Training on augumented user 79706 1/50 current_auc = 0.7106879606879606
User 79706 AUC after training: 0.711916461916462
User 79706 improves AUC. Keeping the model.
Training on augumented user 6803 2/50 current_auc = 0.711916461916462
User 6803 AUC after training: 0.7082309582309583
User 6803 does not improve AUC. Reverting changes.
Training on augumented user 55517 3/50 current_auc = 0.711916461916462
User 55517 AUC after training: 0.7082309582309583
User 55517 does not improve AUC. Reverting changes.
Training on augumented user 35230 4/50 current_auc = 0.711916461916462
User 35230 AUC after training: 0.7106879606879606
User 35230 does not improve AUC. Reverting changes.
Training on augumented user 79134 5/50 current_auc = 0.711916461916462
User 79134 AUC after training: 0.7106879606879607
User 79134 does not improve AUC. Reverting changes.
Training on augumented user 17084 6/50 current_auc = 0.711916461916462
User 17084 AUC after training: 0.7106879606879606
User 17084 does not improve AUC. Reverting changes.
Training on augumented user 117234 7/50 current_auc = 0.711916461916462
User 117234 AUC after training: 0.7131449631449631
User 117234 improves AUC. Keeping the model.
Training on augumented user 119323 8/50 current_auc = 0.7131449631449631
User 119323 AUC after training: 0.7131449631449631
User 119323 does not improve AUC. Reverting changes.
Training on augumented user 26197 9/50 current_auc = 0.7131449631449631
User 26197 AUC after training: 0.7143734643734644
User 26197 improves AUC. Keeping the model.
Training on augumented user 125064 10/50 current_auc = 0.7143734643734644
User 125064 AUC after training: 0.7143734643734644
User 125064 does not improve AUC. Reverting changes.
Training on augumented user 4076 11/50 current_auc = 0.7143734643734644
User 4076 AUC after training: 0.7131449631449631
User 4076 does not improve AUC. Reverting changes.
Training on augumented user 80690 12/50 current_auc = 0.7143734643734644
User 80690 AUC after training: 0.7137592137592137
User 80690 does not improve AUC. Reverting changes.
Training on augumented user 111429 13/50 current_auc = 0.7143734643734644
User 111429 AUC after training: 0.7131449631449631
User 111429 does not improve AUC. Reverting changes.
Training on augumented user 102939 14/50 current_auc = 0.7143734643734644
User 102939 AUC after training: 0.7131449631449631
User 102939 does not improve AUC. Reverting changes.
Training on augumented user 125117 15/50 current_auc = 0.7143734643734644
User 125117 AUC after training: 0.7131449631449631
User 125117 does not improve AUC. Reverting changes.
Training on augumented user 19383 16/50 current_auc = 0.7143734643734644
User 19383 AUC after training: 0.7131449631449631
User 19383 does not improve AUC. Reverting changes.
Training on augumented user 104125 17/50 current_auc = 0.7143734643734644
User 104125 AUC after training: 0.7106879606879606
User 104125 does not improve AUC. Reverting changes.
Training on augumented user 86237 18/50 current_auc = 0.7143734643734644
User 86237 AUC after training: 0.711916461916462
User 86237 does not improve AUC. Reverting changes.
Training on augumented user 41617 19/50 current_auc = 0.7143734643734644
User 41617 AUC after training: 0.7131449631449631
User 41617 does not improve AUC. Reverting changes.
Training on augumented user 47579 20/50 current_auc = 0.7143734643734644
User 47579 AUC after training: 0.7143734643734644
User 47579 does not improve AUC. Reverting changes.
Training on augumented user 138449 21/50 current_auc = 0.7143734643734644
User 138449 AUC after training: 0.7106879606879606
User 138449 does not improve AUC. Reverting changes.
Training on augumented user 36497 22/50 current_auc = 0.7143734643734644
User 36497 AUC after training: 0.7131449631449631
User 36497 does not improve AUC. Reverting changes.
Training on augumented user 3655 23/50 current_auc = 0.7143734643734644
User 3655 AUC after training: 0.7131449631449631
User 3655 does not improve AUC. Reverting changes.
Training on augumented user 18266 24/50 current_auc = 0.7143734643734644
User 18266 AUC after training: 0.7131449631449631
User 18266 does not improve AUC. Reverting changes.
Training on augumented user 134855 25/50 current_auc = 0.7143734643734644
User 134855 AUC after training: 0.7143734643734644
User 134855 does not improve AUC. Reverting changes.
Training on augumented user 75360 26/50 current_auc = 0.7143734643734644
User 75360 AUC after training: 0.7131449631449631
User 75360 does not improve AUC. Reverting changes.
Training on augumented user 92162 27/50 current_auc = 0.7143734643734644
User 92162 AUC after training: 0.711916461916462
User 92162 does not improve AUC. Reverting changes.
Training on augumented user 116373 28/50 current_auc = 0.7143734643734644
User 116373 AUC after training: 0.7143734643734644
User 116373 does not improve AUC. Reverting changes.
Training on augumented user 5222 29/50 current_auc = 0.7143734643734644
User 5222 AUC after training: 0.7131449631449631
User 5222 does not improve AUC. Reverting changes.
Training on augumented user 109515 30/50 current_auc = 0.7143734643734644
User 109515 AUC after training: 0.7143734643734644
User 109515 does not improve AUC. Reverting changes.
Training on augumented user 28998 31/50 current_auc = 0.7143734643734644
User 28998 AUC after training: 0.7143734643734644
User 28998 does not improve AUC. Reverting changes.
Training on augumented user 52865 32/50 current_auc = 0.7143734643734644
User 52865 AUC after training: 0.7131449631449631
User 52865 does not improve AUC. Reverting changes.
Training on augumented user 68092 33/50 current_auc = 0.7143734643734644
User 68092 AUC after training: 0.7131449631449631
User 68092 does not improve AUC. Reverting changes.
Training on augumented user 89989 34/50 current_auc = 0.7143734643734644
User 89989 AUC after training: 0.7131449631449631
User 89989 does not improve AUC. Reverting changes.
Training on augumented user 122415 35/50 current_auc = 0.7143734643734644
User 122415 AUC after training: 0.7143734643734644
User 122415 does not improve AUC. Reverting changes.
Training on augumented user 48246 36/50 current_auc = 0.7143734643734644
User 48246 AUC after training: 0.7131449631449631
User 48246 does not improve AUC. Reverting changes.
Training on augumented user 130997 37/50 current_auc = 0.7143734643734644
User 130997 AUC after training: 0.7143734643734644
User 130997 does not improve AUC. Reverting changes.
Training on augumented user 46744 38/50 current_auc = 0.7143734643734644
User 46744 AUC after training: 0.7131449631449631
User 46744 does not improve AUC. Reverting changes.
Training on augumented user 112121 39/50 current_auc = 0.7143734643734644
User 112121 AUC after training: 0.7143734643734644
User 112121 does not improve AUC. Reverting changes.
Training on augumented user 17894 40/50 current_auc = 0.7143734643734644
User 17894 AUC after training: 0.7131449631449631
User 17894 does not improve AUC. Reverting changes.
Training on augumented user 49211 41/50 current_auc = 0.7143734643734644
User 49211 AUC after training: 0.7131449631449631
User 49211 does not improve AUC. Reverting changes.
Training on augumented user 5357 42/50 current_auc = 0.7143734643734644
User 5357 AUC after training: 0.7143734643734644
User 5357 does not improve AUC. Reverting changes.
Training on augumented user 135075 43/50 current_auc = 0.7143734643734644
User 135075 AUC after training: 0.7113022113022113
User 135075 does not improve AUC. Reverting changes.
Training on augumented user 87631 44/50 current_auc = 0.7143734643734644
User 87631 AUC after training: 0.7131449631449631
User 87631 does not improve AUC. Reverting changes.
Training on augumented user 99674 45/50 current_auc = 0.7143734643734644
User 99674 AUC after training: 0.7131449631449631
User 99674 does not improve AUC. Reverting changes.
Training on augumented user 72125 46/50 current_auc = 0.7143734643734644
User 72125 AUC after training: 0.7131449631449631
User 72125 does not improve AUC. Reverting changes.
Training on augumented user 119219 47/50 current_auc = 0.7143734643734644
User 119219 AUC after training: 0.7143734643734644
User 119219 does not improve AUC. Reverting changes.
Training on augumented user 72531 48/50 current_auc = 0.7143734643734644
User 72531 AUC after training: 0.7131449631449631
User 72531 does not improve AUC. Reverting changes.
Training on augumented user 59531 49/50 current_auc = 0.7143734643734644
User 59531 AUC after training: 0.7113022113022113
User 59531 does not improve AUC. Reverting changes.
[2024-12-02 18:49:52.150202] start test user 59122 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:52.668570] start test user 59122 132/568 recall augumented users by random, augumented_users = [131446, 4723, 91768, 114985, 11687, 88851, 107245, 110348, 3381, 53252, 90912, 71246, 1833, 83823, 32680, 18344, 67614, 50731, 81211, 45950, 54537, 138053, 97452, 9050, 17970, 136836, 90204, 120736, 130873, 26283, 71197, 61191, 439, 7614, 130566, 85147, 47034, 7533, 5351, 74935, 88649, 60948, 120224, 33433, 24114, 79528, 16705, 9504, 97221, 123961]
[2024-12-02 18:49:52.683966] user = 59122 Cloud 132/568
[2024-12-02 18:49:52.694382] user = 59122 Local 132/568
[2024-12-02 18:49:52.730050] user = 59122 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:55.408770] user = 59122 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49572649572649574
Training on augumented user 131446 0/50 current_auc = 0.49572649572649574
User 131446 AUC after training: 0.4871794871794872
User 131446 does not improve AUC. Reverting changes.
Training on augumented user 4723 1/50 current_auc = 0.49572649572649574
User 4723 AUC after training: 0.49572649572649574
User 4723 does not improve AUC. Reverting changes.
Training on augumented user 91768 2/50 current_auc = 0.49572649572649574
User 91768 AUC after training: 0.49572649572649574
User 91768 does not improve AUC. Reverting changes.
Training on augumented user 114985 3/50 current_auc = 0.49572649572649574
User 114985 AUC after training: 0.49572649572649574
User 114985 does not improve AUC. Reverting changes.
Training on augumented user 11687 4/50 current_auc = 0.49572649572649574
User 11687 AUC after training: 0.49572649572649574
User 11687 does not improve AUC. Reverting changes.
Training on augumented user 88851 5/50 current_auc = 0.49572649572649574
User 88851 AUC after training: 0.49572649572649574
User 88851 does not improve AUC. Reverting changes.
Training on augumented user 107245 6/50 current_auc = 0.49572649572649574
User 107245 AUC after training: 0.49572649572649574
User 107245 does not improve AUC. Reverting changes.
Training on augumented user 110348 7/50 current_auc = 0.49572649572649574
User 110348 AUC after training: 0.49572649572649574
User 110348 does not improve AUC. Reverting changes.
Training on augumented user 3381 8/50 current_auc = 0.49572649572649574
User 3381 AUC after training: 0.49572649572649574
User 3381 does not improve AUC. Reverting changes.
Training on augumented user 53252 9/50 current_auc = 0.49572649572649574
User 53252 AUC after training: 0.49572649572649574
User 53252 does not improve AUC. Reverting changes.
Training on augumented user 90912 10/50 current_auc = 0.49572649572649574
User 90912 AUC after training: 0.48717948717948717
User 90912 does not improve AUC. Reverting changes.
Training on augumented user 71246 11/50 current_auc = 0.49572649572649574
User 71246 AUC after training: 0.49572649572649574
User 71246 does not improve AUC. Reverting changes.
Training on augumented user 1833 12/50 current_auc = 0.49572649572649574
User 1833 AUC after training: 0.49572649572649574
User 1833 does not improve AUC. Reverting changes.
Training on augumented user 83823 13/50 current_auc = 0.49572649572649574
User 83823 AUC after training: 0.49572649572649574
User 83823 does not improve AUC. Reverting changes.
Training on augumented user 32680 14/50 current_auc = 0.49572649572649574
User 32680 AUC after training: 0.49572649572649574
User 32680 does not improve AUC. Reverting changes.
Training on augumented user 18344 15/50 current_auc = 0.49572649572649574
User 18344 AUC after training: 0.4871794871794872
User 18344 does not improve AUC. Reverting changes.
Training on augumented user 67614 16/50 current_auc = 0.49572649572649574
User 67614 AUC after training: 0.4871794871794872
User 67614 does not improve AUC. Reverting changes.
Training on augumented user 50731 17/50 current_auc = 0.49572649572649574
User 50731 AUC after training: 0.4871794871794872
User 50731 does not improve AUC. Reverting changes.
Training on augumented user 81211 18/50 current_auc = 0.49572649572649574
User 81211 AUC after training: 0.49572649572649574
User 81211 does not improve AUC. Reverting changes.
Training on augumented user 45950 19/50 current_auc = 0.49572649572649574
User 45950 AUC after training: 0.49572649572649574
User 45950 does not improve AUC. Reverting changes.
Training on augumented user 54537 20/50 current_auc = 0.49572649572649574
User 54537 AUC after training: 0.49572649572649574
User 54537 does not improve AUC. Reverting changes.
Training on augumented user 138053 21/50 current_auc = 0.49572649572649574
User 138053 AUC after training: 0.49572649572649574
User 138053 does not improve AUC. Reverting changes.
Training on augumented user 97452 22/50 current_auc = 0.49572649572649574
User 97452 AUC after training: 0.49572649572649574
User 97452 does not improve AUC. Reverting changes.
Training on augumented user 9050 23/50 current_auc = 0.49572649572649574
User 9050 AUC after training: 0.49572649572649574
User 9050 does not improve AUC. Reverting changes.
Training on augumented user 17970 24/50 current_auc = 0.49572649572649574
User 17970 AUC after training: 0.49572649572649574
User 17970 does not improve AUC. Reverting changes.
Training on augumented user 136836 25/50 current_auc = 0.49572649572649574
User 136836 AUC after training: 0.49572649572649574
User 136836 does not improve AUC. Reverting changes.
Training on augumented user 90204 26/50 current_auc = 0.49572649572649574
User 90204 AUC after training: 0.49572649572649574
User 90204 does not improve AUC. Reverting changes.
Training on augumented user 120736 27/50 current_auc = 0.49572649572649574
User 120736 AUC after training: 0.4871794871794872
User 120736 does not improve AUC. Reverting changes.
Training on augumented user 130873 28/50 current_auc = 0.49572649572649574
User 130873 AUC after training: 0.49572649572649574
User 130873 does not improve AUC. Reverting changes.
Training on augumented user 26283 29/50 current_auc = 0.49572649572649574
User 26283 AUC after training: 0.49572649572649574
User 26283 does not improve AUC. Reverting changes.
Training on augumented user 71197 30/50 current_auc = 0.49572649572649574
User 71197 AUC after training: 0.4871794871794872
User 71197 does not improve AUC. Reverting changes.
Training on augumented user 61191 31/50 current_auc = 0.49572649572649574
User 61191 AUC after training: 0.49572649572649574
User 61191 does not improve AUC. Reverting changes.
Training on augumented user 439 32/50 current_auc = 0.49572649572649574
User 439 AUC after training: 0.49572649572649574
User 439 does not improve AUC. Reverting changes.
Training on augumented user 7614 33/50 current_auc = 0.49572649572649574
User 7614 AUC after training: 0.4871794871794872
User 7614 does not improve AUC. Reverting changes.
Training on augumented user 130566 34/50 current_auc = 0.49572649572649574
User 130566 AUC after training: 0.49572649572649574
User 130566 does not improve AUC. Reverting changes.
Training on augumented user 85147 35/50 current_auc = 0.49572649572649574
User 85147 AUC after training: 0.49572649572649574
User 85147 does not improve AUC. Reverting changes.
Training on augumented user 47034 36/50 current_auc = 0.49572649572649574
User 47034 AUC after training: 0.49572649572649574
User 47034 does not improve AUC. Reverting changes.
Training on augumented user 7533 37/50 current_auc = 0.49572649572649574
User 7533 AUC after training: 0.49572649572649574
User 7533 does not improve AUC. Reverting changes.
Training on augumented user 5351 38/50 current_auc = 0.49572649572649574
User 5351 AUC after training: 0.49572649572649574
User 5351 does not improve AUC. Reverting changes.
Training on augumented user 74935 39/50 current_auc = 0.49572649572649574
User 74935 AUC after training: 0.49572649572649574
User 74935 does not improve AUC. Reverting changes.
Training on augumented user 88649 40/50 current_auc = 0.49572649572649574
User 88649 AUC after training: 0.4871794871794872
User 88649 does not improve AUC. Reverting changes.
Training on augumented user 60948 41/50 current_auc = 0.49572649572649574
User 60948 AUC after training: 0.49572649572649574
User 60948 does not improve AUC. Reverting changes.
Training on augumented user 120224 42/50 current_auc = 0.49572649572649574
User 120224 AUC after training: 0.49572649572649574
User 120224 does not improve AUC. Reverting changes.
Training on augumented user 33433 43/50 current_auc = 0.49572649572649574
User 33433 AUC after training: 0.49572649572649574
User 33433 does not improve AUC. Reverting changes.
Training on augumented user 24114 44/50 current_auc = 0.49572649572649574
User 24114 AUC after training: 0.49572649572649574
User 24114 does not improve AUC. Reverting changes.
Training on augumented user 79528 45/50 current_auc = 0.49572649572649574
User 79528 AUC after training: 0.49572649572649574
User 79528 does not improve AUC. Reverting changes.
Training on augumented user 16705 46/50 current_auc = 0.49572649572649574
User 16705 AUC after training: 0.49572649572649574
User 16705 does not improve AUC. Reverting changes.
Training on augumented user 9504 47/50 current_auc = 0.49572649572649574
User 9504 AUC after training: 0.49572649572649574
User 9504 does not improve AUC. Reverting changes.
Training on augumented user 97221 48/50 current_auc = 0.49572649572649574
User 97221 AUC after training: 0.49572649572649574
User 97221 does not improve AUC. Reverting changes.
Training on augumented user 123961 49/50 current_auc = 0.49572649572649574
User 123961 AUC after training: 0.49572649572649574
User 123961 does not improve AUC. Reverting changes.
[2024-12-02 18:50:25.002904] start test user 59151 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:25.559365] start test user 59151 133/568 recall augumented users by random, augumented_users = [31722, 85908, 134280, 92786, 19109, 88741, 55188, 20389, 115933, 47690, 135471, 6366, 121808, 117778, 102131, 98099, 111282, 129056, 103297, 119517, 76679, 58953, 35209, 60443, 113921, 13497, 21081, 105550, 91882, 133917, 69921, 113221, 49830, 50839, 1247, 43705, 7830, 120103, 347, 132088, 57949, 4477, 137957, 88021, 38850, 122978, 38526, 131489, 23901, 74507]
[2024-12-02 18:50:25.599004] user = 59151 Cloud 133/568
[2024-12-02 18:50:25.621843] user = 59151 Local 133/568
[2024-12-02 18:50:25.671719] user = 59151 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:29.091397] user = 59151 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8563878676470589
Training on augumented user 31722 0/50 current_auc = 0.8563878676470589
User 31722 AUC after training: 0.8568474264705882
User 31722 improves AUC. Keeping the model.
Training on augumented user 85908 1/50 current_auc = 0.8568474264705882
User 85908 AUC after training: 0.8573069852941176
User 85908 improves AUC. Keeping the model.
Training on augumented user 134280 2/50 current_auc = 0.8573069852941176
User 134280 AUC after training: 0.8573069852941176
User 134280 does not improve AUC. Reverting changes.
Training on augumented user 92786 3/50 current_auc = 0.8573069852941176
User 92786 AUC after training: 0.857766544117647
User 92786 improves AUC. Keeping the model.
Training on augumented user 19109 4/50 current_auc = 0.857766544117647
User 19109 AUC after training: 0.8575367647058822
User 19109 does not improve AUC. Reverting changes.
Training on augumented user 88741 5/50 current_auc = 0.857766544117647
User 88741 AUC after training: 0.8586856617647058
User 88741 improves AUC. Keeping the model.
Training on augumented user 55188 6/50 current_auc = 0.8586856617647058
User 55188 AUC after training: 0.8586856617647058
User 55188 does not improve AUC. Reverting changes.
Training on augumented user 20389 7/50 current_auc = 0.8586856617647058
User 20389 AUC after training: 0.8586856617647058
User 20389 does not improve AUC. Reverting changes.
Training on augumented user 115933 8/50 current_auc = 0.8586856617647058
User 115933 AUC after training: 0.8561580882352942
User 115933 does not improve AUC. Reverting changes.
Training on augumented user 47690 9/50 current_auc = 0.8586856617647058
User 47690 AUC after training: 0.8573069852941176
User 47690 does not improve AUC. Reverting changes.
Training on augumented user 135471 10/50 current_auc = 0.8586856617647058
User 135471 AUC after training: 0.8579963235294117
User 135471 does not improve AUC. Reverting changes.
Training on augumented user 6366 11/50 current_auc = 0.8586856617647058
User 6366 AUC after training: 0.8566176470588235
User 6366 does not improve AUC. Reverting changes.
Training on augumented user 121808 12/50 current_auc = 0.8586856617647058
User 121808 AUC after training: 0.8575367647058825
User 121808 does not improve AUC. Reverting changes.
Training on augumented user 117778 13/50 current_auc = 0.8586856617647058
User 117778 AUC after training: 0.8582261029411765
User 117778 does not improve AUC. Reverting changes.
Training on augumented user 102131 14/50 current_auc = 0.8586856617647058
User 102131 AUC after training: 0.8556985294117647
User 102131 does not improve AUC. Reverting changes.
Training on augumented user 98099 15/50 current_auc = 0.8586856617647058
User 98099 AUC after training: 0.8582261029411765
User 98099 does not improve AUC. Reverting changes.
Training on augumented user 111282 16/50 current_auc = 0.8586856617647058
User 111282 AUC after training: 0.8586856617647058
User 111282 does not improve AUC. Reverting changes.
Training on augumented user 129056 17/50 current_auc = 0.8586856617647058
User 129056 AUC after training: 0.8577665441176471
User 129056 does not improve AUC. Reverting changes.
Training on augumented user 103297 18/50 current_auc = 0.8586856617647058
User 103297 AUC after training: 0.8586856617647058
User 103297 does not improve AUC. Reverting changes.
Training on augumented user 119517 19/50 current_auc = 0.8586856617647058
User 119517 AUC after training: 0.8568474264705882
User 119517 does not improve AUC. Reverting changes.
Training on augumented user 76679 20/50 current_auc = 0.8586856617647058
User 76679 AUC after training: 0.8586856617647058
User 76679 does not improve AUC. Reverting changes.
Training on augumented user 58953 21/50 current_auc = 0.8586856617647058
User 58953 AUC after training: 0.8573069852941176
User 58953 does not improve AUC. Reverting changes.
Training on augumented user 35209 22/50 current_auc = 0.8586856617647058
User 35209 AUC after training: 0.8586856617647058
User 35209 does not improve AUC. Reverting changes.
Training on augumented user 60443 23/50 current_auc = 0.8586856617647058
User 60443 AUC after training: 0.8586856617647058
User 60443 does not improve AUC. Reverting changes.
Training on augumented user 113921 24/50 current_auc = 0.8586856617647058
User 113921 AUC after training: 0.8586856617647058
User 113921 does not improve AUC. Reverting changes.
Training on augumented user 13497 25/50 current_auc = 0.8586856617647058
User 13497 AUC after training: 0.857766544117647
User 13497 does not improve AUC. Reverting changes.
Training on augumented user 21081 26/50 current_auc = 0.8586856617647058
User 21081 AUC after training: 0.8582261029411764
User 21081 does not improve AUC. Reverting changes.
Training on augumented user 105550 27/50 current_auc = 0.8586856617647058
User 105550 AUC after training: 0.8584558823529411
User 105550 does not improve AUC. Reverting changes.
Training on augumented user 91882 28/50 current_auc = 0.8586856617647058
User 91882 AUC after training: 0.8586856617647058
User 91882 does not improve AUC. Reverting changes.
Training on augumented user 133917 29/50 current_auc = 0.8586856617647058
User 133917 AUC after training: 0.8550091911764706
User 133917 does not improve AUC. Reverting changes.
Training on augumented user 69921 30/50 current_auc = 0.8586856617647058
User 69921 AUC after training: 0.8586856617647058
User 69921 does not improve AUC. Reverting changes.
Training on augumented user 113221 31/50 current_auc = 0.8586856617647058
User 113221 AUC after training: 0.8586856617647058
User 113221 does not improve AUC. Reverting changes.
Training on augumented user 49830 32/50 current_auc = 0.8586856617647058
User 49830 AUC after training: 0.8570772058823529
User 49830 does not improve AUC. Reverting changes.
Training on augumented user 50839 33/50 current_auc = 0.8586856617647058
User 50839 AUC after training: 0.8586856617647058
User 50839 does not improve AUC. Reverting changes.
Training on augumented user 1247 34/50 current_auc = 0.8586856617647058
User 1247 AUC after training: 0.8584558823529411
User 1247 does not improve AUC. Reverting changes.
Training on augumented user 43705 35/50 current_auc = 0.8586856617647058
User 43705 AUC after training: 0.8586856617647058
User 43705 does not improve AUC. Reverting changes.
Training on augumented user 7830 36/50 current_auc = 0.8586856617647058
User 7830 AUC after training: 0.8586856617647058
User 7830 does not improve AUC. Reverting changes.
Training on augumented user 120103 37/50 current_auc = 0.8586856617647058
User 120103 AUC after training: 0.8582261029411764
User 120103 does not improve AUC. Reverting changes.
Training on augumented user 347 38/50 current_auc = 0.8586856617647058
User 347 AUC after training: 0.8556985294117647
User 347 does not improve AUC. Reverting changes.
Training on augumented user 132088 39/50 current_auc = 0.8586856617647058
User 132088 AUC after training: 0.857766544117647
User 132088 does not improve AUC. Reverting changes.
Training on augumented user 57949 40/50 current_auc = 0.8586856617647058
User 57949 AUC after training: 0.8586856617647058
User 57949 does not improve AUC. Reverting changes.
Training on augumented user 4477 41/50 current_auc = 0.8586856617647058
User 4477 AUC after training: 0.8582261029411765
User 4477 does not improve AUC. Reverting changes.
Training on augumented user 137957 42/50 current_auc = 0.8586856617647058
User 137957 AUC after training: 0.8579963235294117
User 137957 does not improve AUC. Reverting changes.
Training on augumented user 88021 43/50 current_auc = 0.8586856617647058
User 88021 AUC after training: 0.8575367647058824
User 88021 does not improve AUC. Reverting changes.
Training on augumented user 38850 44/50 current_auc = 0.8586856617647058
User 38850 AUC after training: 0.8586856617647058
User 38850 does not improve AUC. Reverting changes.
Training on augumented user 122978 45/50 current_auc = 0.8586856617647058
User 122978 AUC after training: 0.8582261029411764
User 122978 does not improve AUC. Reverting changes.
Training on augumented user 38526 46/50 current_auc = 0.8586856617647058
User 38526 AUC after training: 0.8586856617647058
User 38526 does not improve AUC. Reverting changes.
Training on augumented user 131489 47/50 current_auc = 0.8586856617647058
User 131489 AUC after training: 0.8584558823529411
User 131489 does not improve AUC. Reverting changes.
Training on augumented user 23901 48/50 current_auc = 0.8586856617647058
User 23901 AUC after training: 0.8582261029411764
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 74507 49/50 current_auc = 0.8586856617647058
User 74507 AUC after training: 0.8566176470588234
User 74507 does not improve AUC. Reverting changes.
[2024-12-02 18:51:01.281301] start test user 59178 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:02.059919] start test user 59178 134/568 recall augumented users by random, augumented_users = [8291, 90634, 123899, 11650, 85761, 76621, 79329, 136139, 106308, 96370, 38126, 40564, 5720, 111051, 86446, 87964, 20919, 20307, 23432, 31645, 45479, 23557, 39786, 130552, 10250, 126510, 83466, 118127, 106956, 19727, 64012, 94342, 31887, 42505, 98547, 13222, 46513, 80279, 117146, 67055, 114442, 9767, 9419, 108882, 38434, 52931, 125374, 109896, 117539, 118770]
[2024-12-02 18:51:02.077553] user = 59178 Cloud 134/568
[2024-12-02 18:51:02.088724] user = 59178 Local 134/568
[2024-12-02 18:51:02.139030] user = 59178 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:05.165827] user = 59178 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8291 0/50 current_auc = 0.5
User 8291 AUC after training: 0.75
User 8291 improves AUC. Keeping the model.
Training on augumented user 90634 1/50 current_auc = 0.75
User 90634 AUC after training: 0.5
User 90634 does not improve AUC. Reverting changes.
Training on augumented user 123899 2/50 current_auc = 0.75
User 123899 AUC after training: 0.75
User 123899 does not improve AUC. Reverting changes.
Training on augumented user 11650 3/50 current_auc = 0.75
User 11650 AUC after training: 0.5
User 11650 does not improve AUC. Reverting changes.
Training on augumented user 85761 4/50 current_auc = 0.75
User 85761 AUC after training: 0.75
User 85761 does not improve AUC. Reverting changes.
Training on augumented user 76621 5/50 current_auc = 0.75
User 76621 AUC after training: 0.5
User 76621 does not improve AUC. Reverting changes.
Training on augumented user 79329 6/50 current_auc = 0.75
User 79329 AUC after training: 0.5
User 79329 does not improve AUC. Reverting changes.
Training on augumented user 136139 7/50 current_auc = 0.75
User 136139 AUC after training: 0.75
User 136139 does not improve AUC. Reverting changes.
Training on augumented user 106308 8/50 current_auc = 0.75
User 106308 AUC after training: 0.5
User 106308 does not improve AUC. Reverting changes.
Training on augumented user 96370 9/50 current_auc = 0.75
User 96370 AUC after training: 0.5
User 96370 does not improve AUC. Reverting changes.
Training on augumented user 38126 10/50 current_auc = 0.75
User 38126 AUC after training: 0.5
User 38126 does not improve AUC. Reverting changes.
Training on augumented user 40564 11/50 current_auc = 0.75
User 40564 AUC after training: 0.5
User 40564 does not improve AUC. Reverting changes.
Training on augumented user 5720 12/50 current_auc = 0.75
User 5720 AUC after training: 0.5
User 5720 does not improve AUC. Reverting changes.
Training on augumented user 111051 13/50 current_auc = 0.75
User 111051 AUC after training: 0.5
User 111051 does not improve AUC. Reverting changes.
Training on augumented user 86446 14/50 current_auc = 0.75
User 86446 AUC after training: 0.75
User 86446 does not improve AUC. Reverting changes.
Training on augumented user 87964 15/50 current_auc = 0.75
User 87964 AUC after training: 0.75
User 87964 does not improve AUC. Reverting changes.
Training on augumented user 20919 16/50 current_auc = 0.75
User 20919 AUC after training: 0.5
User 20919 does not improve AUC. Reverting changes.
Training on augumented user 20307 17/50 current_auc = 0.75
User 20307 AUC after training: 0.75
User 20307 does not improve AUC. Reverting changes.
Training on augumented user 23432 18/50 current_auc = 0.75
User 23432 AUC after training: 0.75
User 23432 does not improve AUC. Reverting changes.
Training on augumented user 31645 19/50 current_auc = 0.75
User 31645 AUC after training: 0.5
User 31645 does not improve AUC. Reverting changes.
Training on augumented user 45479 20/50 current_auc = 0.75
User 45479 AUC after training: 0.75
User 45479 does not improve AUC. Reverting changes.
Training on augumented user 23557 21/50 current_auc = 0.75
User 23557 AUC after training: 0.5
User 23557 does not improve AUC. Reverting changes.
Training on augumented user 39786 22/50 current_auc = 0.75
User 39786 AUC after training: 0.75
User 39786 does not improve AUC. Reverting changes.
Training on augumented user 130552 23/50 current_auc = 0.75
User 130552 AUC after training: 0.5
User 130552 does not improve AUC. Reverting changes.
Training on augumented user 10250 24/50 current_auc = 0.75
User 10250 AUC after training: 0.5
User 10250 does not improve AUC. Reverting changes.
Training on augumented user 126510 25/50 current_auc = 0.75
User 126510 AUC after training: 0.75
User 126510 does not improve AUC. Reverting changes.
Training on augumented user 83466 26/50 current_auc = 0.75
User 83466 AUC after training: 0.75
User 83466 does not improve AUC. Reverting changes.
Training on augumented user 118127 27/50 current_auc = 0.75
User 118127 AUC after training: 0.75
User 118127 does not improve AUC. Reverting changes.
Training on augumented user 106956 28/50 current_auc = 0.75
User 106956 AUC after training: 0.75
User 106956 does not improve AUC. Reverting changes.
Training on augumented user 19727 29/50 current_auc = 0.75
User 19727 AUC after training: 0.75
User 19727 does not improve AUC. Reverting changes.
Training on augumented user 64012 30/50 current_auc = 0.75
User 64012 AUC after training: 0.5
User 64012 does not improve AUC. Reverting changes.
Training on augumented user 94342 31/50 current_auc = 0.75
User 94342 AUC after training: 0.5
User 94342 does not improve AUC. Reverting changes.
Training on augumented user 31887 32/50 current_auc = 0.75
User 31887 AUC after training: 0.5
User 31887 does not improve AUC. Reverting changes.
Training on augumented user 42505 33/50 current_auc = 0.75
User 42505 AUC after training: 0.75
User 42505 does not improve AUC. Reverting changes.
Training on augumented user 98547 34/50 current_auc = 0.75
User 98547 AUC after training: 0.75
User 98547 does not improve AUC. Reverting changes.
Training on augumented user 13222 35/50 current_auc = 0.75
User 13222 AUC after training: 0.5
User 13222 does not improve AUC. Reverting changes.
Training on augumented user 46513 36/50 current_auc = 0.75
User 46513 AUC after training: 0.75
User 46513 does not improve AUC. Reverting changes.
Training on augumented user 80279 37/50 current_auc = 0.75
User 80279 AUC after training: 0.75
User 80279 does not improve AUC. Reverting changes.
Training on augumented user 117146 38/50 current_auc = 0.75
User 117146 AUC after training: 0.75
User 117146 does not improve AUC. Reverting changes.
Training on augumented user 67055 39/50 current_auc = 0.75
User 67055 AUC after training: 0.75
User 67055 does not improve AUC. Reverting changes.
Training on augumented user 114442 40/50 current_auc = 0.75
User 114442 AUC after training: 0.75
User 114442 does not improve AUC. Reverting changes.
Training on augumented user 9767 41/50 current_auc = 0.75
User 9767 AUC after training: 0.5
User 9767 does not improve AUC. Reverting changes.
Training on augumented user 9419 42/50 current_auc = 0.75
User 9419 AUC after training: 0.75
User 9419 does not improve AUC. Reverting changes.
Training on augumented user 108882 43/50 current_auc = 0.75
User 108882 AUC after training: 0.75
User 108882 does not improve AUC. Reverting changes.
Training on augumented user 38434 44/50 current_auc = 0.75
User 38434 AUC after training: 0.75
User 38434 does not improve AUC. Reverting changes.
Training on augumented user 52931 45/50 current_auc = 0.75
User 52931 AUC after training: 0.5
User 52931 does not improve AUC. Reverting changes.
Training on augumented user 125374 46/50 current_auc = 0.75
User 125374 AUC after training: 0.75
User 125374 does not improve AUC. Reverting changes.
Training on augumented user 109896 47/50 current_auc = 0.75
User 109896 AUC after training: 0.75
User 109896 does not improve AUC. Reverting changes.
Training on augumented user 117539 48/50 current_auc = 0.75
User 117539 AUC after training: 0.5
User 117539 does not improve AUC. Reverting changes.
Training on augumented user 118770 49/50 current_auc = 0.75
User 118770 AUC after training: 0.75
User 118770 does not improve AUC. Reverting changes.
[2024-12-02 18:51:33.838005] start test user 59203 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:34.335809] start test user 59203 135/568 recall augumented users by random, augumented_users = [109679, 91130, 129140, 134601, 82955, 47029, 137174, 17414, 49433, 25439, 123293, 3102, 45523, 82333, 52000, 24120, 76426, 7344, 46275, 48385, 78781, 132065, 45544, 56481, 85001, 4639, 44958, 66998, 17138, 99905, 113068, 95140, 35760, 123144, 71937, 90132, 47183, 95075, 99919, 57186, 60700, 136761, 42672, 11431, 46521, 36524, 87308, 103928, 25617, 127199]
[2024-12-02 18:51:34.351596] user = 59203 Cloud 135/568
[2024-12-02 18:51:34.373068] user = 59203 Local 135/568
[2024-12-02 18:51:34.434512] user = 59203 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:36.119239] user = 59203 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5013736263736264
Training on augumented user 109679 0/50 current_auc = 0.5013736263736264
User 109679 AUC after training: 0.5013736263736264
User 109679 does not improve AUC. Reverting changes.
Training on augumented user 91130 1/50 current_auc = 0.5013736263736264
User 91130 AUC after training: 0.5027472527472527
User 91130 improves AUC. Keeping the model.
Training on augumented user 129140 2/50 current_auc = 0.5027472527472527
User 129140 AUC after training: 0.5027472527472527
User 129140 does not improve AUC. Reverting changes.
Training on augumented user 134601 3/50 current_auc = 0.5027472527472527
User 134601 AUC after training: 0.5027472527472527
User 134601 does not improve AUC. Reverting changes.
Training on augumented user 82955 4/50 current_auc = 0.5027472527472527
User 82955 AUC after training: 0.5013736263736264
User 82955 does not improve AUC. Reverting changes.
Training on augumented user 47029 5/50 current_auc = 0.5027472527472527
User 47029 AUC after training: 0.5013736263736264
User 47029 does not improve AUC. Reverting changes.
Training on augumented user 137174 6/50 current_auc = 0.5027472527472527
User 137174 AUC after training: 0.5027472527472527
User 137174 does not improve AUC. Reverting changes.
Training on augumented user 17414 7/50 current_auc = 0.5027472527472527
User 17414 AUC after training: 0.5027472527472527
User 17414 does not improve AUC. Reverting changes.
Training on augumented user 49433 8/50 current_auc = 0.5027472527472527
User 49433 AUC after training: 0.5027472527472527
User 49433 does not improve AUC. Reverting changes.
Training on augumented user 25439 9/50 current_auc = 0.5027472527472527
User 25439 AUC after training: 0.5027472527472527
User 25439 does not improve AUC. Reverting changes.
Training on augumented user 123293 10/50 current_auc = 0.5027472527472527
User 123293 AUC after training: 0.5013736263736264
User 123293 does not improve AUC. Reverting changes.
Training on augumented user 3102 11/50 current_auc = 0.5027472527472527
User 3102 AUC after training: 0.5027472527472527
User 3102 does not improve AUC. Reverting changes.
Training on augumented user 45523 12/50 current_auc = 0.5027472527472527
User 45523 AUC after training: 0.5027472527472527
User 45523 does not improve AUC. Reverting changes.
Training on augumented user 82333 13/50 current_auc = 0.5027472527472527
User 82333 AUC after training: 0.5013736263736264
User 82333 does not improve AUC. Reverting changes.
Training on augumented user 52000 14/50 current_auc = 0.5027472527472527
User 52000 AUC after training: 0.5027472527472527
User 52000 does not improve AUC. Reverting changes.
Training on augumented user 24120 15/50 current_auc = 0.5027472527472527
User 24120 AUC after training: 0.5027472527472527
User 24120 does not improve AUC. Reverting changes.
Training on augumented user 76426 16/50 current_auc = 0.5027472527472527
User 76426 AUC after training: 0.5013736263736264
User 76426 does not improve AUC. Reverting changes.
Training on augumented user 7344 17/50 current_auc = 0.5027472527472527
User 7344 AUC after training: 0.5027472527472527
User 7344 does not improve AUC. Reverting changes.
Training on augumented user 46275 18/50 current_auc = 0.5027472527472527
User 46275 AUC after training: 0.5027472527472527
User 46275 does not improve AUC. Reverting changes.
Training on augumented user 48385 19/50 current_auc = 0.5027472527472527
User 48385 AUC after training: 0.5027472527472527
User 48385 does not improve AUC. Reverting changes.
Training on augumented user 78781 20/50 current_auc = 0.5027472527472527
User 78781 AUC after training: 0.5041208791208791
User 78781 improves AUC. Keeping the model.
Training on augumented user 132065 21/50 current_auc = 0.5041208791208791
User 132065 AUC after training: 0.5041208791208791
User 132065 does not improve AUC. Reverting changes.
Training on augumented user 45544 22/50 current_auc = 0.5041208791208791
User 45544 AUC after training: 0.5041208791208791
User 45544 does not improve AUC. Reverting changes.
Training on augumented user 56481 23/50 current_auc = 0.5041208791208791
User 56481 AUC after training: 0.5041208791208791
User 56481 does not improve AUC. Reverting changes.
Training on augumented user 85001 24/50 current_auc = 0.5041208791208791
User 85001 AUC after training: 0.5041208791208791
User 85001 does not improve AUC. Reverting changes.
Training on augumented user 4639 25/50 current_auc = 0.5041208791208791
User 4639 AUC after training: 0.5054945054945055
User 4639 improves AUC. Keeping the model.
Training on augumented user 44958 26/50 current_auc = 0.5054945054945055
User 44958 AUC after training: 0.5054945054945055
User 44958 does not improve AUC. Reverting changes.
Training on augumented user 66998 27/50 current_auc = 0.5054945054945055
User 66998 AUC after training: 0.5027472527472527
User 66998 does not improve AUC. Reverting changes.
Training on augumented user 17138 28/50 current_auc = 0.5054945054945055
User 17138 AUC after training: 0.5041208791208791
User 17138 does not improve AUC. Reverting changes.
Training on augumented user 99905 29/50 current_auc = 0.5054945054945055
User 99905 AUC after training: 0.5054945054945055
User 99905 does not improve AUC. Reverting changes.
Training on augumented user 113068 30/50 current_auc = 0.5054945054945055
User 113068 AUC after training: 0.5054945054945055
User 113068 does not improve AUC. Reverting changes.
Training on augumented user 95140 31/50 current_auc = 0.5054945054945055
User 95140 AUC after training: 0.5054945054945055
User 95140 does not improve AUC. Reverting changes.
Training on augumented user 35760 32/50 current_auc = 0.5054945054945055
User 35760 AUC after training: 0.5041208791208791
User 35760 does not improve AUC. Reverting changes.
Training on augumented user 123144 33/50 current_auc = 0.5054945054945055
User 123144 AUC after training: 0.5054945054945055
User 123144 does not improve AUC. Reverting changes.
Training on augumented user 71937 34/50 current_auc = 0.5054945054945055
User 71937 AUC after training: 0.5054945054945055
User 71937 does not improve AUC. Reverting changes.
Training on augumented user 90132 35/50 current_auc = 0.5054945054945055
User 90132 AUC after training: 0.5054945054945055
User 90132 does not improve AUC. Reverting changes.
Training on augumented user 47183 36/50 current_auc = 0.5054945054945055
User 47183 AUC after training: 0.5054945054945055
User 47183 does not improve AUC. Reverting changes.
Training on augumented user 95075 37/50 current_auc = 0.5054945054945055
User 95075 AUC after training: 0.5054945054945055
User 95075 does not improve AUC. Reverting changes.
Training on augumented user 99919 38/50 current_auc = 0.5054945054945055
User 99919 AUC after training: 0.5054945054945055
User 99919 does not improve AUC. Reverting changes.
Training on augumented user 57186 39/50 current_auc = 0.5054945054945055
User 57186 AUC after training: 0.5054945054945055
User 57186 does not improve AUC. Reverting changes.
Training on augumented user 60700 40/50 current_auc = 0.5054945054945055
User 60700 AUC after training: 0.5054945054945055
User 60700 does not improve AUC. Reverting changes.
Training on augumented user 136761 41/50 current_auc = 0.5054945054945055
User 136761 AUC after training: 0.5054945054945055
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 42672 42/50 current_auc = 0.5054945054945055
User 42672 AUC after training: 0.5041208791208791
User 42672 does not improve AUC. Reverting changes.
Training on augumented user 11431 43/50 current_auc = 0.5054945054945055
User 11431 AUC after training: 0.5027472527472527
User 11431 does not improve AUC. Reverting changes.
Training on augumented user 46521 44/50 current_auc = 0.5054945054945055
User 46521 AUC after training: 0.5041208791208791
User 46521 does not improve AUC. Reverting changes.
Training on augumented user 36524 45/50 current_auc = 0.5054945054945055
User 36524 AUC after training: 0.5027472527472527
User 36524 does not improve AUC. Reverting changes.
Training on augumented user 87308 46/50 current_auc = 0.5054945054945055
User 87308 AUC after training: 0.5041208791208791
User 87308 does not improve AUC. Reverting changes.
Training on augumented user 103928 47/50 current_auc = 0.5054945054945055
User 103928 AUC after training: 0.5054945054945055
User 103928 does not improve AUC. Reverting changes.
Training on augumented user 25617 48/50 current_auc = 0.5054945054945055
User 25617 AUC after training: 0.5054945054945055
User 25617 does not improve AUC. Reverting changes.
Training on augumented user 127199 49/50 current_auc = 0.5054945054945055
User 127199 AUC after training: 0.5054945054945055
User 127199 does not improve AUC. Reverting changes.
[2024-12-02 18:52:08.666803] start test user 59205 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:09.302120] start test user 59205 136/568 recall augumented users by random, augumented_users = [96261, 135904, 42904, 87509, 34411, 121248, 54754, 60392, 20395, 16412, 23169, 79697, 119792, 102624, 3053, 75546, 71167, 48368, 42454, 18580, 105059, 108852, 60193, 16291, 130001, 119794, 122672, 99381, 64136, 108347, 105271, 132638, 64810, 88001, 28680, 94037, 79261, 54659, 50377, 128193, 73732, 121677, 51392, 12111, 30611, 30044, 71968, 29025, 41141, 32450]
[2024-12-02 18:52:09.318391] user = 59205 Cloud 136/568
[2024-12-02 18:52:09.385656] user = 59205 Local 136/568
[2024-12-02 18:52:09.547740] user = 59205 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:12.152156] user = 59205 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.658234126984127
Training on augumented user 96261 0/50 current_auc = 0.658234126984127
User 96261 AUC after training: 0.6583829365079364
User 96261 improves AUC. Keeping the model.
Training on augumented user 135904 1/50 current_auc = 0.6583829365079364
User 135904 AUC after training: 0.6585813492063493
User 135904 improves AUC. Keeping the model.
Training on augumented user 42904 2/50 current_auc = 0.6585813492063493
User 42904 AUC after training: 0.6581845238095239
User 42904 does not improve AUC. Reverting changes.
Training on augumented user 87509 3/50 current_auc = 0.6585813492063493
User 87509 AUC after training: 0.6583333333333333
User 87509 does not improve AUC. Reverting changes.
Training on augumented user 34411 4/50 current_auc = 0.6585813492063493
User 34411 AUC after training: 0.6594246031746032
User 34411 improves AUC. Keeping the model.
Training on augumented user 121248 5/50 current_auc = 0.6594246031746032
User 121248 AUC after training: 0.6594742063492064
User 121248 improves AUC. Keeping the model.
Training on augumented user 54754 6/50 current_auc = 0.6594742063492064
User 54754 AUC after training: 0.6591765873015873
User 54754 does not improve AUC. Reverting changes.
Training on augumented user 60392 7/50 current_auc = 0.6594742063492064
User 60392 AUC after training: 0.658779761904762
User 60392 does not improve AUC. Reverting changes.
Training on augumented user 20395 8/50 current_auc = 0.6594742063492064
User 20395 AUC after training: 0.6593253968253968
User 20395 does not improve AUC. Reverting changes.
Training on augumented user 16412 9/50 current_auc = 0.6594742063492064
User 16412 AUC after training: 0.6592757936507936
User 16412 does not improve AUC. Reverting changes.
Training on augumented user 23169 10/50 current_auc = 0.6594742063492064
User 23169 AUC after training: 0.6594742063492063
User 23169 does not improve AUC. Reverting changes.
Training on augumented user 79697 11/50 current_auc = 0.6594742063492064
User 79697 AUC after training: 0.6594742063492063
User 79697 does not improve AUC. Reverting changes.
Training on augumented user 119792 12/50 current_auc = 0.6594742063492064
User 119792 AUC after training: 0.6588789682539683
User 119792 does not improve AUC. Reverting changes.
Training on augumented user 102624 13/50 current_auc = 0.6594742063492064
User 102624 AUC after training: 0.6595734126984127
User 102624 improves AUC. Keeping the model.
Training on augumented user 3053 14/50 current_auc = 0.6595734126984127
User 3053 AUC after training: 0.6586309523809524
User 3053 does not improve AUC. Reverting changes.
Training on augumented user 75546 15/50 current_auc = 0.6595734126984127
User 75546 AUC after training: 0.6595734126984126
User 75546 does not improve AUC. Reverting changes.
Training on augumented user 71167 16/50 current_auc = 0.6595734126984127
User 71167 AUC after training: 0.6593253968253968
User 71167 does not improve AUC. Reverting changes.
Training on augumented user 48368 17/50 current_auc = 0.6595734126984127
User 48368 AUC after training: 0.6591765873015873
User 48368 does not improve AUC. Reverting changes.
Training on augumented user 42454 18/50 current_auc = 0.6595734126984127
User 42454 AUC after training: 0.6585317460317461
User 42454 does not improve AUC. Reverting changes.
Training on augumented user 18580 19/50 current_auc = 0.6595734126984127
User 18580 AUC after training: 0.659077380952381
User 18580 does not improve AUC. Reverting changes.
Training on augumented user 105059 20/50 current_auc = 0.6595734126984127
User 105059 AUC after training: 0.6584325396825397
User 105059 does not improve AUC. Reverting changes.
Training on augumented user 108852 21/50 current_auc = 0.6595734126984127
User 108852 AUC after training: 0.6588789682539682
User 108852 does not improve AUC. Reverting changes.
Training on augumented user 60193 22/50 current_auc = 0.6595734126984127
User 60193 AUC after training: 0.6590277777777778
User 60193 does not improve AUC. Reverting changes.
Training on augumented user 16291 23/50 current_auc = 0.6595734126984127
User 16291 AUC after training: 0.6592757936507936
User 16291 does not improve AUC. Reverting changes.
Training on augumented user 130001 24/50 current_auc = 0.6595734126984127
User 130001 AUC after training: 0.6592261904761905
User 130001 does not improve AUC. Reverting changes.
Training on augumented user 119794 25/50 current_auc = 0.6595734126984127
User 119794 AUC after training: 0.6586805555555556
User 119794 does not improve AUC. Reverting changes.
Training on augumented user 122672 26/50 current_auc = 0.6595734126984127
User 122672 AUC after training: 0.6586805555555556
User 122672 does not improve AUC. Reverting changes.
Training on augumented user 99381 27/50 current_auc = 0.6595734126984127
User 99381 AUC after training: 0.6593749999999999
User 99381 does not improve AUC. Reverting changes.
Training on augumented user 64136 28/50 current_auc = 0.6595734126984127
User 64136 AUC after training: 0.6590277777777777
User 64136 does not improve AUC. Reverting changes.
Training on augumented user 108347 29/50 current_auc = 0.6595734126984127
User 108347 AUC after training: 0.6590277777777778
User 108347 does not improve AUC. Reverting changes.
Training on augumented user 105271 30/50 current_auc = 0.6595734126984127
User 105271 AUC after training: 0.6592261904761905
User 105271 does not improve AUC. Reverting changes.
Training on augumented user 132638 31/50 current_auc = 0.6595734126984127
User 132638 AUC after training: 0.6589781746031746
User 132638 does not improve AUC. Reverting changes.
Training on augumented user 64810 32/50 current_auc = 0.6595734126984127
User 64810 AUC after training: 0.6591765873015872
User 64810 does not improve AUC. Reverting changes.
Training on augumented user 88001 33/50 current_auc = 0.6595734126984127
User 88001 AUC after training: 0.6593749999999999
User 88001 does not improve AUC. Reverting changes.
Training on augumented user 28680 34/50 current_auc = 0.6595734126984127
User 28680 AUC after training: 0.6593253968253968
User 28680 does not improve AUC. Reverting changes.
Training on augumented user 94037 35/50 current_auc = 0.6595734126984127
User 94037 AUC after training: 0.6573412698412698
User 94037 does not improve AUC. Reverting changes.
Training on augumented user 79261 36/50 current_auc = 0.6595734126984127
User 79261 AUC after training: 0.6591269841269841
User 79261 does not improve AUC. Reverting changes.
Training on augumented user 54659 37/50 current_auc = 0.6595734126984127
User 54659 AUC after training: 0.6594246031746032
User 54659 does not improve AUC. Reverting changes.
Training on augumented user 50377 38/50 current_auc = 0.6595734126984127
User 50377 AUC after training: 0.6592261904761905
User 50377 does not improve AUC. Reverting changes.
Training on augumented user 128193 39/50 current_auc = 0.6595734126984127
User 128193 AUC after training: 0.6590773809523809
User 128193 does not improve AUC. Reverting changes.
Training on augumented user 73732 40/50 current_auc = 0.6595734126984127
User 73732 AUC after training: 0.658779761904762
User 73732 does not improve AUC. Reverting changes.
Training on augumented user 121677 41/50 current_auc = 0.6595734126984127
User 121677 AUC after training: 0.6591269841269841
User 121677 does not improve AUC. Reverting changes.
Training on augumented user 51392 42/50 current_auc = 0.6595734126984127
User 51392 AUC after training: 0.6595238095238095
User 51392 does not improve AUC. Reverting changes.
Training on augumented user 12111 43/50 current_auc = 0.6595734126984127
User 12111 AUC after training: 0.6584821428571429
User 12111 does not improve AUC. Reverting changes.
Training on augumented user 30611 44/50 current_auc = 0.6595734126984127
User 30611 AUC after training: 0.6593749999999999
User 30611 does not improve AUC. Reverting changes.
Training on augumented user 30044 45/50 current_auc = 0.6595734126984127
User 30044 AUC after training: 0.6596230158730159
User 30044 improves AUC. Keeping the model.
Training on augumented user 71968 46/50 current_auc = 0.6596230158730159
User 71968 AUC after training: 0.6590277777777778
User 71968 does not improve AUC. Reverting changes.
Training on augumented user 29025 47/50 current_auc = 0.6596230158730159
User 29025 AUC after training: 0.6592757936507937
User 29025 does not improve AUC. Reverting changes.
Training on augumented user 41141 48/50 current_auc = 0.6596230158730159
User 41141 AUC after training: 0.6594246031746032
User 41141 does not improve AUC. Reverting changes.
Training on augumented user 32450 49/50 current_auc = 0.6596230158730159
User 32450 AUC after training: 0.6596230158730159
User 32450 does not improve AUC. Reverting changes.
[2024-12-02 18:52:47.867617] start test user 59215 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:48.679055] start test user 59215 137/568 recall augumented users by random, augumented_users = [67790, 103983, 68488, 58771, 108136, 79718, 46511, 10307, 87472, 130817, 129720, 93979, 127702, 41422, 5407, 21573, 68341, 121061, 62572, 35409, 14278, 37764, 78320, 21422, 119038, 123525, 84610, 99296, 99472, 95673, 117587, 69820, 54212, 126464, 123940, 55387, 16009, 74634, 133821, 2068, 56702, 4353, 74375, 123583, 138286, 65622, 11178, 3295, 24255, 99909]
[2024-12-02 18:52:48.701662] user = 59215 Cloud 137/568
[2024-12-02 18:52:48.713273] user = 59215 Local 137/568
[2024-12-02 18:52:48.745935] user = 59215 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:51.620604] user = 59215 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857143
Training on augumented user 67790 0/50 current_auc = 0.7142857142857143
User 67790 AUC after training: 0.7142857142857143
User 67790 does not improve AUC. Reverting changes.
Training on augumented user 103983 1/50 current_auc = 0.7142857142857143
User 103983 AUC after training: 0.7142857142857143
User 103983 does not improve AUC. Reverting changes.
Training on augumented user 68488 2/50 current_auc = 0.7142857142857143
User 68488 AUC after training: 0.7142857142857143
User 68488 does not improve AUC. Reverting changes.
Training on augumented user 58771 3/50 current_auc = 0.7142857142857143
User 58771 AUC after training: 0.7142857142857143
User 58771 does not improve AUC. Reverting changes.
Training on augumented user 108136 4/50 current_auc = 0.7142857142857143
User 108136 AUC after training: 0.7142857142857143
User 108136 does not improve AUC. Reverting changes.
Training on augumented user 79718 5/50 current_auc = 0.7142857142857143
User 79718 AUC after training: 0.7142857142857143
User 79718 does not improve AUC. Reverting changes.
Training on augumented user 46511 6/50 current_auc = 0.7142857142857143
User 46511 AUC after training: 0.7142857142857143
User 46511 does not improve AUC. Reverting changes.
Training on augumented user 10307 7/50 current_auc = 0.7142857142857143
User 10307 AUC after training: 0.7142857142857143
User 10307 does not improve AUC. Reverting changes.
Training on augumented user 87472 8/50 current_auc = 0.7142857142857143
User 87472 AUC after training: 0.7142857142857143
User 87472 does not improve AUC. Reverting changes.
Training on augumented user 130817 9/50 current_auc = 0.7142857142857143
User 130817 AUC after training: 0.7142857142857143
User 130817 does not improve AUC. Reverting changes.
Training on augumented user 129720 10/50 current_auc = 0.7142857142857143
User 129720 AUC after training: 0.7142857142857143
User 129720 does not improve AUC. Reverting changes.
Training on augumented user 93979 11/50 current_auc = 0.7142857142857143
User 93979 AUC after training: 0.7142857142857143
User 93979 does not improve AUC. Reverting changes.
Training on augumented user 127702 12/50 current_auc = 0.7142857142857143
User 127702 AUC after training: 0.7142857142857143
User 127702 does not improve AUC. Reverting changes.
Training on augumented user 41422 13/50 current_auc = 0.7142857142857143
User 41422 AUC after training: 0.7142857142857143
User 41422 does not improve AUC. Reverting changes.
Training on augumented user 5407 14/50 current_auc = 0.7142857142857143
User 5407 AUC after training: 0.7142857142857143
User 5407 does not improve AUC. Reverting changes.
Training on augumented user 21573 15/50 current_auc = 0.7142857142857143
User 21573 AUC after training: 0.7142857142857143
User 21573 does not improve AUC. Reverting changes.
Training on augumented user 68341 16/50 current_auc = 0.7142857142857143
User 68341 AUC after training: 0.7142857142857143
User 68341 does not improve AUC. Reverting changes.
Training on augumented user 121061 17/50 current_auc = 0.7142857142857143
User 121061 AUC after training: 0.7142857142857143
User 121061 does not improve AUC. Reverting changes.
Training on augumented user 62572 18/50 current_auc = 0.7142857142857143
User 62572 AUC after training: 0.7142857142857143
User 62572 does not improve AUC. Reverting changes.
Training on augumented user 35409 19/50 current_auc = 0.7142857142857143
User 35409 AUC after training: 0.7142857142857143
User 35409 does not improve AUC. Reverting changes.
Training on augumented user 14278 20/50 current_auc = 0.7142857142857143
User 14278 AUC after training: 0.7142857142857143
User 14278 does not improve AUC. Reverting changes.
Training on augumented user 37764 21/50 current_auc = 0.7142857142857143
User 37764 AUC after training: 0.7142857142857143
User 37764 does not improve AUC. Reverting changes.
Training on augumented user 78320 22/50 current_auc = 0.7142857142857143
User 78320 AUC after training: 0.7142857142857143
User 78320 does not improve AUC. Reverting changes.
Training on augumented user 21422 23/50 current_auc = 0.7142857142857143
User 21422 AUC after training: 0.7142857142857143
User 21422 does not improve AUC. Reverting changes.
Training on augumented user 119038 24/50 current_auc = 0.7142857142857143
User 119038 AUC after training: 0.7142857142857143
User 119038 does not improve AUC. Reverting changes.
Training on augumented user 123525 25/50 current_auc = 0.7142857142857143
User 123525 AUC after training: 0.7142857142857143
User 123525 does not improve AUC. Reverting changes.
Training on augumented user 84610 26/50 current_auc = 0.7142857142857143
User 84610 AUC after training: 0.7142857142857143
User 84610 does not improve AUC. Reverting changes.
Training on augumented user 99296 27/50 current_auc = 0.7142857142857143
User 99296 AUC after training: 0.6785714285714286
User 99296 does not improve AUC. Reverting changes.
Training on augumented user 99472 28/50 current_auc = 0.7142857142857143
User 99472 AUC after training: 0.7142857142857143
User 99472 does not improve AUC. Reverting changes.
Training on augumented user 95673 29/50 current_auc = 0.7142857142857143
User 95673 AUC after training: 0.7142857142857143
User 95673 does not improve AUC. Reverting changes.
Training on augumented user 117587 30/50 current_auc = 0.7142857142857143
User 117587 AUC after training: 0.7142857142857143
User 117587 does not improve AUC. Reverting changes.
Training on augumented user 69820 31/50 current_auc = 0.7142857142857143
User 69820 AUC after training: 0.7142857142857143
User 69820 does not improve AUC. Reverting changes.
Training on augumented user 54212 32/50 current_auc = 0.7142857142857143
User 54212 AUC after training: 0.7142857142857143
User 54212 does not improve AUC. Reverting changes.
Training on augumented user 126464 33/50 current_auc = 0.7142857142857143
User 126464 AUC after training: 0.7142857142857143
User 126464 does not improve AUC. Reverting changes.
Training on augumented user 123940 34/50 current_auc = 0.7142857142857143
User 123940 AUC after training: 0.7142857142857143
User 123940 does not improve AUC. Reverting changes.
Training on augumented user 55387 35/50 current_auc = 0.7142857142857143
User 55387 AUC after training: 0.7142857142857143
User 55387 does not improve AUC. Reverting changes.
Training on augumented user 16009 36/50 current_auc = 0.7142857142857143
User 16009 AUC after training: 0.7142857142857143
User 16009 does not improve AUC. Reverting changes.
Training on augumented user 74634 37/50 current_auc = 0.7142857142857143
User 74634 AUC after training: 0.7142857142857143
User 74634 does not improve AUC. Reverting changes.
Training on augumented user 133821 38/50 current_auc = 0.7142857142857143
User 133821 AUC after training: 0.7142857142857143
User 133821 does not improve AUC. Reverting changes.
Training on augumented user 2068 39/50 current_auc = 0.7142857142857143
User 2068 AUC after training: 0.7142857142857143
User 2068 does not improve AUC. Reverting changes.
Training on augumented user 56702 40/50 current_auc = 0.7142857142857143
User 56702 AUC after training: 0.7142857142857143
User 56702 does not improve AUC. Reverting changes.
Training on augumented user 4353 41/50 current_auc = 0.7142857142857143
User 4353 AUC after training: 0.7142857142857143
User 4353 does not improve AUC. Reverting changes.
Training on augumented user 74375 42/50 current_auc = 0.7142857142857143
User 74375 AUC after training: 0.7142857142857143
User 74375 does not improve AUC. Reverting changes.
Training on augumented user 123583 43/50 current_auc = 0.7142857142857143
User 123583 AUC after training: 0.7142857142857143
User 123583 does not improve AUC. Reverting changes.
Training on augumented user 138286 44/50 current_auc = 0.7142857142857143
User 138286 AUC after training: 0.7142857142857143
User 138286 does not improve AUC. Reverting changes.
Training on augumented user 65622 45/50 current_auc = 0.7142857142857143
User 65622 AUC after training: 0.7142857142857143
User 65622 does not improve AUC. Reverting changes.
Training on augumented user 11178 46/50 current_auc = 0.7142857142857143
User 11178 AUC after training: 0.7142857142857143
User 11178 does not improve AUC. Reverting changes.
Training on augumented user 3295 47/50 current_auc = 0.7142857142857143
User 3295 AUC after training: 0.7142857142857143
User 3295 does not improve AUC. Reverting changes.
Training on augumented user 24255 48/50 current_auc = 0.7142857142857143
User 24255 AUC after training: 0.7142857142857143
User 24255 does not improve AUC. Reverting changes.
Training on augumented user 99909 49/50 current_auc = 0.7142857142857143
User 99909 AUC after training: 0.7142857142857143
User 99909 does not improve AUC. Reverting changes.
[2024-12-02 18:53:21.345271] start test user 59230 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:21.998585] start test user 59230 138/568 recall augumented users by random, augumented_users = [86840, 95362, 111435, 15133, 77933, 25842, 58763, 59369, 44450, 6920, 29219, 120635, 10201, 104676, 131392, 9273, 36647, 57279, 64836, 44731, 92854, 72708, 56330, 131679, 33125, 15272, 84749, 84437, 114230, 94589, 44800, 130292, 136651, 47638, 33335, 52710, 89477, 65834, 84308, 104537, 91930, 132141, 10206, 80054, 64880, 99036, 26069, 98209, 75157, 86348]
[2024-12-02 18:53:22.015712] user = 59230 Cloud 138/568
[2024-12-02 18:53:22.037741] user = 59230 Local 138/568
[2024-12-02 18:53:22.194992] user = 59230 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:24.394097] user = 59230 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45333333333333337
Training on augumented user 86840 0/50 current_auc = 0.45333333333333337
User 86840 AUC after training: 0.45333333333333337
User 86840 does not improve AUC. Reverting changes.
Training on augumented user 95362 1/50 current_auc = 0.45333333333333337
User 95362 AUC after training: 0.45333333333333337
User 95362 does not improve AUC. Reverting changes.
Training on augumented user 111435 2/50 current_auc = 0.45333333333333337
User 111435 AUC after training: 0.45333333333333337
User 111435 does not improve AUC. Reverting changes.
Training on augumented user 15133 3/50 current_auc = 0.45333333333333337
User 15133 AUC after training: 0.45333333333333337
User 15133 does not improve AUC. Reverting changes.
Training on augumented user 77933 4/50 current_auc = 0.45333333333333337
User 77933 AUC after training: 0.45333333333333337
User 77933 does not improve AUC. Reverting changes.
Training on augumented user 25842 5/50 current_auc = 0.45333333333333337
User 25842 AUC after training: 0.45111111111111113
User 25842 does not improve AUC. Reverting changes.
Training on augumented user 58763 6/50 current_auc = 0.45333333333333337
User 58763 AUC after training: 0.45333333333333337
User 58763 does not improve AUC. Reverting changes.
Training on augumented user 59369 7/50 current_auc = 0.45333333333333337
User 59369 AUC after training: 0.45333333333333337
User 59369 does not improve AUC. Reverting changes.
Training on augumented user 44450 8/50 current_auc = 0.45333333333333337
User 44450 AUC after training: 0.45333333333333337
User 44450 does not improve AUC. Reverting changes.
Training on augumented user 6920 9/50 current_auc = 0.45333333333333337
User 6920 AUC after training: 0.45333333333333337
User 6920 does not improve AUC. Reverting changes.
Training on augumented user 29219 10/50 current_auc = 0.45333333333333337
User 29219 AUC after training: 0.45111111111111113
User 29219 does not improve AUC. Reverting changes.
Training on augumented user 120635 11/50 current_auc = 0.45333333333333337
User 120635 AUC after training: 0.45111111111111113
User 120635 does not improve AUC. Reverting changes.
Training on augumented user 10201 12/50 current_auc = 0.45333333333333337
User 10201 AUC after training: 0.45333333333333337
User 10201 does not improve AUC. Reverting changes.
Training on augumented user 104676 13/50 current_auc = 0.45333333333333337
User 104676 AUC after training: 0.45333333333333337
User 104676 does not improve AUC. Reverting changes.
Training on augumented user 131392 14/50 current_auc = 0.45333333333333337
User 131392 AUC after training: 0.45333333333333337
User 131392 does not improve AUC. Reverting changes.
Training on augumented user 9273 15/50 current_auc = 0.45333333333333337
User 9273 AUC after training: 0.45333333333333337
User 9273 does not improve AUC. Reverting changes.
Training on augumented user 36647 16/50 current_auc = 0.45333333333333337
User 36647 AUC after training: 0.45333333333333337
User 36647 does not improve AUC. Reverting changes.
Training on augumented user 57279 17/50 current_auc = 0.45333333333333337
User 57279 AUC after training: 0.45333333333333337
User 57279 does not improve AUC. Reverting changes.
Training on augumented user 64836 18/50 current_auc = 0.45333333333333337
User 64836 AUC after training: 0.45333333333333337
User 64836 does not improve AUC. Reverting changes.
Training on augumented user 44731 19/50 current_auc = 0.45333333333333337
User 44731 AUC after training: 0.45333333333333337
User 44731 does not improve AUC. Reverting changes.
Training on augumented user 92854 20/50 current_auc = 0.45333333333333337
User 92854 AUC after training: 0.45111111111111113
User 92854 does not improve AUC. Reverting changes.
Training on augumented user 72708 21/50 current_auc = 0.45333333333333337
User 72708 AUC after training: 0.45111111111111113
User 72708 does not improve AUC. Reverting changes.
Training on augumented user 56330 22/50 current_auc = 0.45333333333333337
User 56330 AUC after training: 0.45111111111111113
User 56330 does not improve AUC. Reverting changes.
Training on augumented user 131679 23/50 current_auc = 0.45333333333333337
User 131679 AUC after training: 0.45333333333333337
User 131679 does not improve AUC. Reverting changes.
Training on augumented user 33125 24/50 current_auc = 0.45333333333333337
User 33125 AUC after training: 0.4555555555555556
User 33125 improves AUC. Keeping the model.
Training on augumented user 15272 25/50 current_auc = 0.4555555555555556
User 15272 AUC after training: 0.4555555555555556
User 15272 does not improve AUC. Reverting changes.
Training on augumented user 84749 26/50 current_auc = 0.4555555555555556
User 84749 AUC after training: 0.4555555555555556
User 84749 does not improve AUC. Reverting changes.
Training on augumented user 84437 27/50 current_auc = 0.4555555555555556
User 84437 AUC after training: 0.4555555555555556
User 84437 does not improve AUC. Reverting changes.
Training on augumented user 114230 28/50 current_auc = 0.4555555555555556
User 114230 AUC after training: 0.45333333333333337
User 114230 does not improve AUC. Reverting changes.
Training on augumented user 94589 29/50 current_auc = 0.4555555555555556
User 94589 AUC after training: 0.45333333333333337
User 94589 does not improve AUC. Reverting changes.
Training on augumented user 44800 30/50 current_auc = 0.4555555555555556
User 44800 AUC after training: 0.45333333333333337
User 44800 does not improve AUC. Reverting changes.
Training on augumented user 130292 31/50 current_auc = 0.4555555555555556
User 130292 AUC after training: 0.4555555555555556
User 130292 does not improve AUC. Reverting changes.
Training on augumented user 136651 32/50 current_auc = 0.4555555555555556
User 136651 AUC after training: 0.4555555555555556
User 136651 does not improve AUC. Reverting changes.
Training on augumented user 47638 33/50 current_auc = 0.4555555555555556
User 47638 AUC after training: 0.45333333333333337
User 47638 does not improve AUC. Reverting changes.
Training on augumented user 33335 34/50 current_auc = 0.4555555555555556
User 33335 AUC after training: 0.45333333333333337
User 33335 does not improve AUC. Reverting changes.
Training on augumented user 52710 35/50 current_auc = 0.4555555555555556
User 52710 AUC after training: 0.4555555555555556
User 52710 does not improve AUC. Reverting changes.
Training on augumented user 89477 36/50 current_auc = 0.4555555555555556
User 89477 AUC after training: 0.4555555555555556
User 89477 does not improve AUC. Reverting changes.
Training on augumented user 65834 37/50 current_auc = 0.4555555555555556
User 65834 AUC after training: 0.4555555555555556
User 65834 does not improve AUC. Reverting changes.
Training on augumented user 84308 38/50 current_auc = 0.4555555555555556
User 84308 AUC after training: 0.45333333333333337
User 84308 does not improve AUC. Reverting changes.
Training on augumented user 104537 39/50 current_auc = 0.4555555555555556
User 104537 AUC after training: 0.45333333333333337
User 104537 does not improve AUC. Reverting changes.
Training on augumented user 91930 40/50 current_auc = 0.4555555555555556
User 91930 AUC after training: 0.4555555555555556
User 91930 does not improve AUC. Reverting changes.
Training on augumented user 132141 41/50 current_auc = 0.4555555555555556
User 132141 AUC after training: 0.4555555555555556
User 132141 does not improve AUC. Reverting changes.
Training on augumented user 10206 42/50 current_auc = 0.4555555555555556
User 10206 AUC after training: 0.4555555555555556
User 10206 does not improve AUC. Reverting changes.
Training on augumented user 80054 43/50 current_auc = 0.4555555555555556
User 80054 AUC after training: 0.4555555555555556
User 80054 does not improve AUC. Reverting changes.
Training on augumented user 64880 44/50 current_auc = 0.4555555555555556
User 64880 AUC after training: 0.4555555555555556
User 64880 does not improve AUC. Reverting changes.
Training on augumented user 99036 45/50 current_auc = 0.4555555555555556
User 99036 AUC after training: 0.45111111111111113
User 99036 does not improve AUC. Reverting changes.
Training on augumented user 26069 46/50 current_auc = 0.4555555555555556
User 26069 AUC after training: 0.45333333333333337
User 26069 does not improve AUC. Reverting changes.
Training on augumented user 98209 47/50 current_auc = 0.4555555555555556
User 98209 AUC after training: 0.4555555555555556
User 98209 does not improve AUC. Reverting changes.
Training on augumented user 75157 48/50 current_auc = 0.4555555555555556
User 75157 AUC after training: 0.45111111111111113
User 75157 does not improve AUC. Reverting changes.
Training on augumented user 86348 49/50 current_auc = 0.4555555555555556
User 86348 AUC after training: 0.45333333333333337
User 86348 does not improve AUC. Reverting changes.
[2024-12-02 18:53:55.652608] start test user 59253 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:56.280549] start test user 59253 139/568 recall augumented users by random, augumented_users = [29497, 135042, 104593, 81618, 60576, 94301, 72838, 26155, 123414, 86245, 52136, 46412, 33766, 79151, 107401, 137209, 5552, 17910, 61279, 26700, 79360, 79855, 102634, 2099, 85484, 130503, 36752, 42363, 78588, 73450, 90062, 119840, 114163, 36516, 4664, 18897, 121656, 35038, 35930, 123923, 29878, 59009, 54976, 122372, 50949, 105373, 76240, 19795, 38756, 26252]
[2024-12-02 18:53:56.309420] user = 59253 Cloud 139/568
[2024-12-02 18:53:56.337413] user = 59253 Local 139/568
[2024-12-02 18:53:56.383307] user = 59253 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:59.036284] user = 59253 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857143
Training on augumented user 29497 0/50 current_auc = 0.7142857142857143
User 29497 AUC after training: 0.7142857142857143
User 29497 does not improve AUC. Reverting changes.
Training on augumented user 135042 1/50 current_auc = 0.7142857142857143
User 135042 AUC after training: 0.7142857142857143
User 135042 does not improve AUC. Reverting changes.
Training on augumented user 104593 2/50 current_auc = 0.7142857142857143
User 104593 AUC after training: 0.7142857142857143
User 104593 does not improve AUC. Reverting changes.
Training on augumented user 81618 3/50 current_auc = 0.7142857142857143
User 81618 AUC after training: 0.7142857142857143
User 81618 does not improve AUC. Reverting changes.
Training on augumented user 60576 4/50 current_auc = 0.7142857142857143
User 60576 AUC after training: 0.7142857142857143
User 60576 does not improve AUC. Reverting changes.
Training on augumented user 94301 5/50 current_auc = 0.7142857142857143
User 94301 AUC after training: 0.7142857142857143
User 94301 does not improve AUC. Reverting changes.
Training on augumented user 72838 6/50 current_auc = 0.7142857142857143
User 72838 AUC after training: 0.7142857142857143
User 72838 does not improve AUC. Reverting changes.
Training on augumented user 26155 7/50 current_auc = 0.7142857142857143
User 26155 AUC after training: 0.7142857142857143
User 26155 does not improve AUC. Reverting changes.
Training on augumented user 123414 8/50 current_auc = 0.7142857142857143
User 123414 AUC after training: 0.7142857142857143
User 123414 does not improve AUC. Reverting changes.
Training on augumented user 86245 9/50 current_auc = 0.7142857142857143
User 86245 AUC after training: 0.7142857142857143
User 86245 does not improve AUC. Reverting changes.
Training on augumented user 52136 10/50 current_auc = 0.7142857142857143
User 52136 AUC after training: 0.7142857142857143
User 52136 does not improve AUC. Reverting changes.
Training on augumented user 46412 11/50 current_auc = 0.7142857142857143
User 46412 AUC after training: 0.7142857142857143
User 46412 does not improve AUC. Reverting changes.
Training on augumented user 33766 12/50 current_auc = 0.7142857142857143
User 33766 AUC after training: 0.7142857142857143
User 33766 does not improve AUC. Reverting changes.
Training on augumented user 79151 13/50 current_auc = 0.7142857142857143
User 79151 AUC after training: 0.7142857142857143
User 79151 does not improve AUC. Reverting changes.
Training on augumented user 107401 14/50 current_auc = 0.7142857142857143
User 107401 AUC after training: 0.7142857142857143
User 107401 does not improve AUC. Reverting changes.
Training on augumented user 137209 15/50 current_auc = 0.7142857142857143
User 137209 AUC after training: 0.7142857142857143
User 137209 does not improve AUC. Reverting changes.
Training on augumented user 5552 16/50 current_auc = 0.7142857142857143
User 5552 AUC after training: 0.7142857142857143
User 5552 does not improve AUC. Reverting changes.
Training on augumented user 17910 17/50 current_auc = 0.7142857142857143
User 17910 AUC after training: 0.7142857142857143
User 17910 does not improve AUC. Reverting changes.
Training on augumented user 61279 18/50 current_auc = 0.7142857142857143
User 61279 AUC after training: 0.7142857142857143
User 61279 does not improve AUC. Reverting changes.
Training on augumented user 26700 19/50 current_auc = 0.7142857142857143
User 26700 AUC after training: 0.7142857142857143
User 26700 does not improve AUC. Reverting changes.
Training on augumented user 79360 20/50 current_auc = 0.7142857142857143
User 79360 AUC after training: 0.7142857142857143
User 79360 does not improve AUC. Reverting changes.
Training on augumented user 79855 21/50 current_auc = 0.7142857142857143
User 79855 AUC after training: 0.7142857142857143
User 79855 does not improve AUC. Reverting changes.
Training on augumented user 102634 22/50 current_auc = 0.7142857142857143
User 102634 AUC after training: 0.7142857142857143
User 102634 does not improve AUC. Reverting changes.
Training on augumented user 2099 23/50 current_auc = 0.7142857142857143
User 2099 AUC after training: 0.7142857142857143
User 2099 does not improve AUC. Reverting changes.
Training on augumented user 85484 24/50 current_auc = 0.7142857142857143
User 85484 AUC after training: 0.7142857142857143
User 85484 does not improve AUC. Reverting changes.
Training on augumented user 130503 25/50 current_auc = 0.7142857142857143
User 130503 AUC after training: 0.7142857142857143
User 130503 does not improve AUC. Reverting changes.
Training on augumented user 36752 26/50 current_auc = 0.7142857142857143
User 36752 AUC after training: 0.7142857142857143
User 36752 does not improve AUC. Reverting changes.
Training on augumented user 42363 27/50 current_auc = 0.7142857142857143
User 42363 AUC after training: 0.7142857142857143
User 42363 does not improve AUC. Reverting changes.
Training on augumented user 78588 28/50 current_auc = 0.7142857142857143
User 78588 AUC after training: 0.7142857142857143
User 78588 does not improve AUC. Reverting changes.
Training on augumented user 73450 29/50 current_auc = 0.7142857142857143
User 73450 AUC after training: 0.7142857142857143
User 73450 does not improve AUC. Reverting changes.
Training on augumented user 90062 30/50 current_auc = 0.7142857142857143
User 90062 AUC after training: 0.7142857142857143
User 90062 does not improve AUC. Reverting changes.
Training on augumented user 119840 31/50 current_auc = 0.7142857142857143
User 119840 AUC after training: 0.7142857142857143
User 119840 does not improve AUC. Reverting changes.
Training on augumented user 114163 32/50 current_auc = 0.7142857142857143
User 114163 AUC after training: 0.7142857142857143
User 114163 does not improve AUC. Reverting changes.
Training on augumented user 36516 33/50 current_auc = 0.7142857142857143
User 36516 AUC after training: 0.7142857142857143
User 36516 does not improve AUC. Reverting changes.
Training on augumented user 4664 34/50 current_auc = 0.7142857142857143
User 4664 AUC after training: 0.7142857142857143
User 4664 does not improve AUC. Reverting changes.
Training on augumented user 18897 35/50 current_auc = 0.7142857142857143
User 18897 AUC after training: 0.7142857142857143
User 18897 does not improve AUC. Reverting changes.
Training on augumented user 121656 36/50 current_auc = 0.7142857142857143
User 121656 AUC after training: 0.7142857142857143
User 121656 does not improve AUC. Reverting changes.
Training on augumented user 35038 37/50 current_auc = 0.7142857142857143
User 35038 AUC after training: 0.7142857142857143
User 35038 does not improve AUC. Reverting changes.
Training on augumented user 35930 38/50 current_auc = 0.7142857142857143
User 35930 AUC after training: 0.7142857142857143
User 35930 does not improve AUC. Reverting changes.
Training on augumented user 123923 39/50 current_auc = 0.7142857142857143
User 123923 AUC after training: 0.7142857142857143
User 123923 does not improve AUC. Reverting changes.
Training on augumented user 29878 40/50 current_auc = 0.7142857142857143
User 29878 AUC after training: 0.7142857142857143
User 29878 does not improve AUC. Reverting changes.
Training on augumented user 59009 41/50 current_auc = 0.7142857142857143
User 59009 AUC after training: 0.7142857142857143
User 59009 does not improve AUC. Reverting changes.
Training on augumented user 54976 42/50 current_auc = 0.7142857142857143
User 54976 AUC after training: 0.7142857142857143
User 54976 does not improve AUC. Reverting changes.
Training on augumented user 122372 43/50 current_auc = 0.7142857142857143
User 122372 AUC after training: 0.7142857142857143
User 122372 does not improve AUC. Reverting changes.
Training on augumented user 50949 44/50 current_auc = 0.7142857142857143
User 50949 AUC after training: 0.7142857142857143
User 50949 does not improve AUC. Reverting changes.
Training on augumented user 105373 45/50 current_auc = 0.7142857142857143
User 105373 AUC after training: 0.7142857142857143
User 105373 does not improve AUC. Reverting changes.
Training on augumented user 76240 46/50 current_auc = 0.7142857142857143
User 76240 AUC after training: 0.7142857142857143
User 76240 does not improve AUC. Reverting changes.
Training on augumented user 19795 47/50 current_auc = 0.7142857142857143
User 19795 AUC after training: 0.7142857142857143
User 19795 does not improve AUC. Reverting changes.
Training on augumented user 38756 48/50 current_auc = 0.7142857142857143
User 38756 AUC after training: 0.7142857142857143
User 38756 does not improve AUC. Reverting changes.
Training on augumented user 26252 49/50 current_auc = 0.7142857142857143
User 26252 AUC after training: 0.7142857142857143
User 26252 does not improve AUC. Reverting changes.
[2024-12-02 18:54:28.702248] start test user 59257 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:29.750887] start test user 59257 140/568 recall augumented users by random, augumented_users = [89019, 133105, 9567, 78711, 86549, 48911, 5460, 126731, 89522, 126476, 60249, 120262, 67668, 92319, 64922, 120431, 68729, 21253, 1207, 72537, 110854, 53002, 100194, 4915, 29136, 54796, 104251, 5636, 61233, 86741, 46211, 77462, 92496, 57816, 7963, 52154, 86256, 103053, 36271, 75414, 4904, 39410, 126970, 71425, 114545, 64906, 83795, 121701, 39396, 66558]
[2024-12-02 18:54:29.766917] user = 59257 Cloud 140/568
[2024-12-02 18:54:29.784082] user = 59257 Local 140/568
[2024-12-02 18:54:29.839752] user = 59257 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:32.292281] user = 59257 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5926612305411416
Training on augumented user 89019 0/50 current_auc = 0.5926612305411416
User 89019 AUC after training: 0.5930318754633062
User 89019 improves AUC. Keeping the model.
Training on augumented user 133105 1/50 current_auc = 0.5930318754633062
User 133105 AUC after training: 0.5934025203854707
User 133105 improves AUC. Keeping the model.
Training on augumented user 9567 2/50 current_auc = 0.5934025203854707
User 9567 AUC after training: 0.5930318754633062
User 9567 does not improve AUC. Reverting changes.
Training on augumented user 78711 3/50 current_auc = 0.5934025203854707
User 78711 AUC after training: 0.5937731653076354
User 78711 improves AUC. Keeping the model.
Training on augumented user 86549 4/50 current_auc = 0.5937731653076354
User 86549 AUC after training: 0.5945144551519644
User 86549 improves AUC. Keeping the model.
Training on augumented user 48911 5/50 current_auc = 0.5945144551519644
User 48911 AUC after training: 0.5926612305411416
User 48911 does not improve AUC. Reverting changes.
Training on augumented user 5460 6/50 current_auc = 0.5945144551519644
User 5460 AUC after training: 0.5945144551519644
User 5460 does not improve AUC. Reverting changes.
Training on augumented user 126731 7/50 current_auc = 0.5945144551519644
User 126731 AUC after training: 0.5926612305411416
User 126731 does not improve AUC. Reverting changes.
Training on augumented user 89522 8/50 current_auc = 0.5945144551519644
User 89522 AUC after training: 0.5948851000741291
User 89522 improves AUC. Keeping the model.
Training on augumented user 126476 9/50 current_auc = 0.5948851000741291
User 126476 AUC after training: 0.594885100074129
User 126476 does not improve AUC. Reverting changes.
Training on augumented user 60249 10/50 current_auc = 0.5948851000741291
User 60249 AUC after training: 0.5948851000741291
User 60249 does not improve AUC. Reverting changes.
Training on augumented user 120262 11/50 current_auc = 0.5948851000741291
User 120262 AUC after training: 0.5945144551519644
User 120262 does not improve AUC. Reverting changes.
Training on augumented user 67668 12/50 current_auc = 0.5948851000741291
User 67668 AUC after training: 0.5941438102297998
User 67668 does not improve AUC. Reverting changes.
Training on augumented user 92319 13/50 current_auc = 0.5948851000741291
User 92319 AUC after training: 0.5941438102297999
User 92319 does not improve AUC. Reverting changes.
Training on augumented user 64922 14/50 current_auc = 0.5948851000741291
User 64922 AUC after training: 0.5937731653076354
User 64922 does not improve AUC. Reverting changes.
Training on augumented user 120431 15/50 current_auc = 0.5948851000741291
User 120431 AUC after training: 0.5937731653076354
User 120431 does not improve AUC. Reverting changes.
Training on augumented user 68729 16/50 current_auc = 0.5948851000741291
User 68729 AUC after training: 0.5948851000741291
User 68729 does not improve AUC. Reverting changes.
Training on augumented user 21253 17/50 current_auc = 0.5948851000741291
User 21253 AUC after training: 0.5937731653076352
User 21253 does not improve AUC. Reverting changes.
Training on augumented user 1207 18/50 current_auc = 0.5948851000741291
User 1207 AUC after training: 0.594885100074129
User 1207 does not improve AUC. Reverting changes.
Training on augumented user 72537 19/50 current_auc = 0.5948851000741291
User 72537 AUC after training: 0.5945144551519644
User 72537 does not improve AUC. Reverting changes.
Training on augumented user 110854 20/50 current_auc = 0.5948851000741291
User 110854 AUC after training: 0.5956263899184582
User 110854 improves AUC. Keeping the model.
Training on augumented user 53002 21/50 current_auc = 0.5956263899184582
User 53002 AUC after training: 0.5989621942179394
User 53002 improves AUC. Keeping the model.
Training on augumented user 100194 22/50 current_auc = 0.5989621942179394
User 100194 AUC after training: 0.5971089696071165
User 100194 does not improve AUC. Reverting changes.
Training on augumented user 4915 23/50 current_auc = 0.5989621942179394
User 4915 AUC after training: 0.5985915492957747
User 4915 does not improve AUC. Reverting changes.
Training on augumented user 29136 24/50 current_auc = 0.5989621942179394
User 29136 AUC after training: 0.5978502594514455
User 29136 does not improve AUC. Reverting changes.
Training on augumented user 54796 25/50 current_auc = 0.5989621942179394
User 54796 AUC after training: 0.5982209043736102
User 54796 does not improve AUC. Reverting changes.
Training on augumented user 104251 26/50 current_auc = 0.5989621942179394
User 104251 AUC after training: 0.5985915492957746
User 104251 does not improve AUC. Reverting changes.
Training on augumented user 5636 27/50 current_auc = 0.5989621942179394
User 5636 AUC after training: 0.5989621942179392
User 5636 does not improve AUC. Reverting changes.
Training on augumented user 61233 28/50 current_auc = 0.5989621942179394
User 61233 AUC after training: 0.5993328391401039
User 61233 improves AUC. Keeping the model.
Training on augumented user 86741 29/50 current_auc = 0.5993328391401039
User 86741 AUC after training: 0.597479614529281
User 86741 does not improve AUC. Reverting changes.
Training on augumented user 46211 30/50 current_auc = 0.5993328391401039
User 46211 AUC after training: 0.5945144551519645
User 46211 does not improve AUC. Reverting changes.
Training on augumented user 77462 31/50 current_auc = 0.5993328391401039
User 77462 AUC after training: 0.5948851000741291
User 77462 does not improve AUC. Reverting changes.
Training on augumented user 92496 32/50 current_auc = 0.5993328391401039
User 92496 AUC after training: 0.5993328391401038
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 57816 33/50 current_auc = 0.5993328391401039
User 57816 AUC after training: 0.5993328391401038
User 57816 does not improve AUC. Reverting changes.
Training on augumented user 7963 34/50 current_auc = 0.5993328391401039
User 7963 AUC after training: 0.5978502594514455
User 7963 does not improve AUC. Reverting changes.
Training on augumented user 52154 35/50 current_auc = 0.5993328391401039
User 52154 AUC after training: 0.5982209043736101
User 52154 does not improve AUC. Reverting changes.
Training on augumented user 86256 36/50 current_auc = 0.5993328391401039
User 86256 AUC after training: 0.5989621942179393
User 86256 does not improve AUC. Reverting changes.
Training on augumented user 103053 37/50 current_auc = 0.5993328391401039
User 103053 AUC after training: 0.597479614529281
User 103053 does not improve AUC. Reverting changes.
Training on augumented user 36271 38/50 current_auc = 0.5993328391401039
User 36271 AUC after training: 0.5989621942179393
User 36271 does not improve AUC. Reverting changes.
Training on augumented user 75414 39/50 current_auc = 0.5993328391401039
User 75414 AUC after training: 0.5997034840622684
User 75414 improves AUC. Keeping the model.
Training on augumented user 4904 40/50 current_auc = 0.5997034840622684
User 4904 AUC after training: 0.5997034840622685
User 4904 improves AUC. Keeping the model.
Training on augumented user 39410 41/50 current_auc = 0.5997034840622685
User 39410 AUC after training: 0.5963676797627874
User 39410 does not improve AUC. Reverting changes.
Training on augumented user 126970 42/50 current_auc = 0.5997034840622685
User 126970 AUC after training: 0.5997034840622684
User 126970 does not improve AUC. Reverting changes.
Training on augumented user 71425 43/50 current_auc = 0.5997034840622685
User 71425 AUC after training: 0.6004447739065976
User 71425 improves AUC. Keeping the model.
Training on augumented user 114545 44/50 current_auc = 0.6004447739065976
User 114545 AUC after training: 0.5985915492957747
User 114545 does not improve AUC. Reverting changes.
Training on augumented user 64906 45/50 current_auc = 0.6004447739065976
User 64906 AUC after training: 0.5993328391401038
User 64906 does not improve AUC. Reverting changes.
Training on augumented user 83795 46/50 current_auc = 0.6004447739065976
User 83795 AUC after training: 0.5985915492957747
User 83795 does not improve AUC. Reverting changes.
Training on augumented user 121701 47/50 current_auc = 0.6004447739065976
User 121701 AUC after training: 0.600074128984433
User 121701 does not improve AUC. Reverting changes.
Training on augumented user 39396 48/50 current_auc = 0.6004447739065976
User 39396 AUC after training: 0.5989621942179393
User 39396 does not improve AUC. Reverting changes.
Training on augumented user 66558 49/50 current_auc = 0.6004447739065976
User 66558 AUC after training: 0.6004447739065976
User 66558 does not improve AUC. Reverting changes.
[2024-12-02 18:55:00.849221] start test user 59276 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:01.271039] start test user 59276 141/568 recall augumented users by random, augumented_users = [78511, 17041, 21484, 27302, 102832, 96335, 98546, 131002, 40222, 60831, 7449, 32418, 61340, 99366, 60883, 133175, 45516, 66838, 83149, 104098, 73281, 79049, 97794, 63909, 92901, 33546, 1335, 23291, 80530, 77144, 15936, 16893, 13654, 126351, 73986, 123243, 54849, 27469, 17894, 97694, 9382, 119721, 129363, 96785, 27196, 119010, 78949, 132747, 48885, 12543]
[2024-12-02 18:55:01.286257] user = 59276 Cloud 141/568
[2024-12-02 18:55:01.299897] user = 59276 Local 141/568
[2024-12-02 18:55:01.368675] user = 59276 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:03.777120] user = 59276 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5683139534883721
Training on augumented user 78511 0/50 current_auc = 0.5683139534883721
User 78511 AUC after training: 0.5675872093023255
User 78511 does not improve AUC. Reverting changes.
Training on augumented user 17041 1/50 current_auc = 0.5683139534883721
User 17041 AUC after training: 0.5675872093023255
User 17041 does not improve AUC. Reverting changes.
Training on augumented user 21484 2/50 current_auc = 0.5683139534883721
User 21484 AUC after training: 0.5690406976744187
User 21484 improves AUC. Keeping the model.
Training on augumented user 27302 3/50 current_auc = 0.5690406976744187
User 27302 AUC after training: 0.5683139534883721
User 27302 does not improve AUC. Reverting changes.
Training on augumented user 102832 4/50 current_auc = 0.5690406976744187
User 102832 AUC after training: 0.5675872093023255
User 102832 does not improve AUC. Reverting changes.
Training on augumented user 96335 5/50 current_auc = 0.5690406976744187
User 96335 AUC after training: 0.5675872093023255
User 96335 does not improve AUC. Reverting changes.
Training on augumented user 98546 6/50 current_auc = 0.5690406976744187
User 98546 AUC after training: 0.566860465116279
User 98546 does not improve AUC. Reverting changes.
Training on augumented user 131002 7/50 current_auc = 0.5690406976744187
User 131002 AUC after training: 0.5675872093023255
User 131002 does not improve AUC. Reverting changes.
Training on augumented user 40222 8/50 current_auc = 0.5690406976744187
User 40222 AUC after training: 0.5661337209302326
User 40222 does not improve AUC. Reverting changes.
Training on augumented user 60831 9/50 current_auc = 0.5690406976744187
User 60831 AUC after training: 0.5675872093023255
User 60831 does not improve AUC. Reverting changes.
Training on augumented user 7449 10/50 current_auc = 0.5690406976744187
User 7449 AUC after training: 0.5675872093023255
User 7449 does not improve AUC. Reverting changes.
Training on augumented user 32418 11/50 current_auc = 0.5690406976744187
User 32418 AUC after training: 0.5668604651162791
User 32418 does not improve AUC. Reverting changes.
Training on augumented user 61340 12/50 current_auc = 0.5690406976744187
User 61340 AUC after training: 0.5690406976744187
User 61340 does not improve AUC. Reverting changes.
Training on augumented user 99366 13/50 current_auc = 0.5690406976744187
User 99366 AUC after training: 0.5675872093023255
User 99366 does not improve AUC. Reverting changes.
Training on augumented user 60883 14/50 current_auc = 0.5690406976744187
User 60883 AUC after training: 0.5675872093023255
User 60883 does not improve AUC. Reverting changes.
Training on augumented user 133175 15/50 current_auc = 0.5690406976744187
User 133175 AUC after training: 0.5675872093023255
User 133175 does not improve AUC. Reverting changes.
Training on augumented user 45516 16/50 current_auc = 0.5690406976744187
User 45516 AUC after training: 0.5675872093023255
User 45516 does not improve AUC. Reverting changes.
Training on augumented user 66838 17/50 current_auc = 0.5690406976744187
User 66838 AUC after training: 0.5675872093023255
User 66838 does not improve AUC. Reverting changes.
Training on augumented user 83149 18/50 current_auc = 0.5690406976744187
User 83149 AUC after training: 0.5683139534883721
User 83149 does not improve AUC. Reverting changes.
Training on augumented user 104098 19/50 current_auc = 0.5690406976744187
User 104098 AUC after training: 0.5668604651162791
User 104098 does not improve AUC. Reverting changes.
Training on augumented user 73281 20/50 current_auc = 0.5690406976744187
User 73281 AUC after training: 0.5668604651162791
User 73281 does not improve AUC. Reverting changes.
Training on augumented user 79049 21/50 current_auc = 0.5690406976744187
User 79049 AUC after training: 0.5675872093023255
User 79049 does not improve AUC. Reverting changes.
Training on augumented user 97794 22/50 current_auc = 0.5690406976744187
User 97794 AUC after training: 0.5675872093023255
User 97794 does not improve AUC. Reverting changes.
Training on augumented user 63909 23/50 current_auc = 0.5690406976744187
User 63909 AUC after training: 0.5661337209302326
User 63909 does not improve AUC. Reverting changes.
Training on augumented user 92901 24/50 current_auc = 0.5690406976744187
User 92901 AUC after training: 0.5668604651162791
User 92901 does not improve AUC. Reverting changes.
Training on augumented user 33546 25/50 current_auc = 0.5690406976744187
User 33546 AUC after training: 0.5675872093023255
User 33546 does not improve AUC. Reverting changes.
Training on augumented user 1335 26/50 current_auc = 0.5690406976744187
User 1335 AUC after training: 0.5683139534883721
User 1335 does not improve AUC. Reverting changes.
Training on augumented user 23291 27/50 current_auc = 0.5690406976744187
User 23291 AUC after training: 0.5683139534883721
User 23291 does not improve AUC. Reverting changes.
Training on augumented user 80530 28/50 current_auc = 0.5690406976744187
User 80530 AUC after training: 0.565406976744186
User 80530 does not improve AUC. Reverting changes.
Training on augumented user 77144 29/50 current_auc = 0.5690406976744187
User 77144 AUC after training: 0.5675872093023255
User 77144 does not improve AUC. Reverting changes.
Training on augumented user 15936 30/50 current_auc = 0.5690406976744187
User 15936 AUC after training: 0.5675872093023255
User 15936 does not improve AUC. Reverting changes.
Training on augumented user 16893 31/50 current_auc = 0.5690406976744187
User 16893 AUC after training: 0.5668604651162791
User 16893 does not improve AUC. Reverting changes.
Training on augumented user 13654 32/50 current_auc = 0.5690406976744187
User 13654 AUC after training: 0.5675872093023255
User 13654 does not improve AUC. Reverting changes.
Training on augumented user 126351 33/50 current_auc = 0.5690406976744187
User 126351 AUC after training: 0.5683139534883721
User 126351 does not improve AUC. Reverting changes.
Training on augumented user 73986 34/50 current_auc = 0.5690406976744187
User 73986 AUC after training: 0.5683139534883721
User 73986 does not improve AUC. Reverting changes.
Training on augumented user 123243 35/50 current_auc = 0.5690406976744187
User 123243 AUC after training: 0.5683139534883721
User 123243 does not improve AUC. Reverting changes.
Training on augumented user 54849 36/50 current_auc = 0.5690406976744187
User 54849 AUC after training: 0.5683139534883721
User 54849 does not improve AUC. Reverting changes.
Training on augumented user 27469 37/50 current_auc = 0.5690406976744187
User 27469 AUC after training: 0.566860465116279
User 27469 does not improve AUC. Reverting changes.
Training on augumented user 17894 38/50 current_auc = 0.5690406976744187
User 17894 AUC after training: 0.5683139534883721
User 17894 does not improve AUC. Reverting changes.
Training on augumented user 97694 39/50 current_auc = 0.5690406976744187
User 97694 AUC after training: 0.5661337209302326
User 97694 does not improve AUC. Reverting changes.
Training on augumented user 9382 40/50 current_auc = 0.5690406976744187
User 9382 AUC after training: 0.5668604651162791
User 9382 does not improve AUC. Reverting changes.
Training on augumented user 119721 41/50 current_auc = 0.5690406976744187
User 119721 AUC after training: 0.5675872093023255
User 119721 does not improve AUC. Reverting changes.
Training on augumented user 129363 42/50 current_auc = 0.5690406976744187
User 129363 AUC after training: 0.5675872093023255
User 129363 does not improve AUC. Reverting changes.
Training on augumented user 96785 43/50 current_auc = 0.5690406976744187
User 96785 AUC after training: 0.5683139534883721
User 96785 does not improve AUC. Reverting changes.
Training on augumented user 27196 44/50 current_auc = 0.5690406976744187
User 27196 AUC after training: 0.5683139534883721
User 27196 does not improve AUC. Reverting changes.
Training on augumented user 119010 45/50 current_auc = 0.5690406976744187
User 119010 AUC after training: 0.5668604651162791
User 119010 does not improve AUC. Reverting changes.
Training on augumented user 78949 46/50 current_auc = 0.5690406976744187
User 78949 AUC after training: 0.5683139534883721
User 78949 does not improve AUC. Reverting changes.
Training on augumented user 132747 47/50 current_auc = 0.5690406976744187
User 132747 AUC after training: 0.5661337209302326
User 132747 does not improve AUC. Reverting changes.
Training on augumented user 48885 48/50 current_auc = 0.5690406976744187
User 48885 AUC after training: 0.569767441860465
User 48885 improves AUC. Keeping the model.
Training on augumented user 12543 49/50 current_auc = 0.569767441860465
User 12543 AUC after training: 0.5697674418604651
User 12543 improves AUC. Keeping the model.
[2024-12-02 18:55:35.801055] start test user 59308 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:36.220388] start test user 59308 142/568 recall augumented users by random, augumented_users = [111250, 101321, 46129, 120833, 29316, 6468, 108556, 113279, 93036, 129298, 45544, 97393, 75156, 28189, 88985, 14311, 26215, 39014, 9407, 98214, 81068, 110778, 77470, 114409, 80731, 68560, 49594, 39731, 5673, 13666, 115357, 137495, 34951, 3646, 65734, 15200, 47335, 56605, 41081, 8056, 128510, 128042, 50237, 109687, 97692, 108011, 84638, 25978, 43164, 94691]
[2024-12-02 18:55:36.235075] user = 59308 Cloud 142/568
[2024-12-02 18:55:36.245113] user = 59308 Local 142/568
[2024-12-02 18:55:36.271064] user = 59308 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:38.636901] user = 59308 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8344155844155844
Training on augumented user 111250 0/50 current_auc = 0.8344155844155844
User 111250 AUC after training: 0.8376623376623377
User 111250 improves AUC. Keeping the model.
Training on augumented user 101321 1/50 current_auc = 0.8376623376623377
User 101321 AUC after training: 0.8311688311688312
User 101321 does not improve AUC. Reverting changes.
Training on augumented user 46129 2/50 current_auc = 0.8376623376623377
User 46129 AUC after training: 0.8344155844155844
User 46129 does not improve AUC. Reverting changes.
Training on augumented user 120833 3/50 current_auc = 0.8376623376623377
User 120833 AUC after training: 0.8376623376623377
User 120833 does not improve AUC. Reverting changes.
Training on augumented user 29316 4/50 current_auc = 0.8376623376623377
User 29316 AUC after training: 0.8376623376623377
User 29316 does not improve AUC. Reverting changes.
Training on augumented user 6468 5/50 current_auc = 0.8376623376623377
User 6468 AUC after training: 0.8441558441558441
User 6468 improves AUC. Keeping the model.
Training on augumented user 108556 6/50 current_auc = 0.8441558441558441
User 108556 AUC after training: 0.8441558441558441
User 108556 does not improve AUC. Reverting changes.
Training on augumented user 113279 7/50 current_auc = 0.8441558441558441
User 113279 AUC after training: 0.8376623376623377
User 113279 does not improve AUC. Reverting changes.
Training on augumented user 93036 8/50 current_auc = 0.8441558441558441
User 93036 AUC after training: 0.8441558441558441
User 93036 does not improve AUC. Reverting changes.
Training on augumented user 129298 9/50 current_auc = 0.8441558441558441
User 129298 AUC after training: 0.8376623376623377
User 129298 does not improve AUC. Reverting changes.
Training on augumented user 45544 10/50 current_auc = 0.8441558441558441
User 45544 AUC after training: 0.8409090909090908
User 45544 does not improve AUC. Reverting changes.
Training on augumented user 97393 11/50 current_auc = 0.8441558441558441
User 97393 AUC after training: 0.8376623376623377
User 97393 does not improve AUC. Reverting changes.
Training on augumented user 75156 12/50 current_auc = 0.8441558441558441
User 75156 AUC after training: 0.8441558441558441
User 75156 does not improve AUC. Reverting changes.
Training on augumented user 28189 13/50 current_auc = 0.8441558441558441
User 28189 AUC after training: 0.8441558441558441
User 28189 does not improve AUC. Reverting changes.
Training on augumented user 88985 14/50 current_auc = 0.8441558441558441
User 88985 AUC after training: 0.8409090909090908
User 88985 does not improve AUC. Reverting changes.
Training on augumented user 14311 15/50 current_auc = 0.8441558441558441
User 14311 AUC after training: 0.8441558441558441
User 14311 does not improve AUC. Reverting changes.
Training on augumented user 26215 16/50 current_auc = 0.8441558441558441
User 26215 AUC after training: 0.8409090909090908
User 26215 does not improve AUC. Reverting changes.
Training on augumented user 39014 17/50 current_auc = 0.8441558441558441
User 39014 AUC after training: 0.8441558441558441
User 39014 does not improve AUC. Reverting changes.
Training on augumented user 9407 18/50 current_auc = 0.8441558441558441
User 9407 AUC after training: 0.8409090909090908
User 9407 does not improve AUC. Reverting changes.
Training on augumented user 98214 19/50 current_auc = 0.8441558441558441
User 98214 AUC after training: 0.8441558441558441
User 98214 does not improve AUC. Reverting changes.
Training on augumented user 81068 20/50 current_auc = 0.8441558441558441
User 81068 AUC after training: 0.8409090909090908
User 81068 does not improve AUC. Reverting changes.
Training on augumented user 110778 21/50 current_auc = 0.8441558441558441
User 110778 AUC after training: 0.8441558441558441
User 110778 does not improve AUC. Reverting changes.
Training on augumented user 77470 22/50 current_auc = 0.8441558441558441
User 77470 AUC after training: 0.8441558441558441
User 77470 does not improve AUC. Reverting changes.
Training on augumented user 114409 23/50 current_auc = 0.8441558441558441
User 114409 AUC after training: 0.8441558441558441
User 114409 does not improve AUC. Reverting changes.
Training on augumented user 80731 24/50 current_auc = 0.8441558441558441
User 80731 AUC after training: 0.8441558441558441
User 80731 does not improve AUC. Reverting changes.
Training on augumented user 68560 25/50 current_auc = 0.8441558441558441
User 68560 AUC after training: 0.8441558441558441
User 68560 does not improve AUC. Reverting changes.
Training on augumented user 49594 26/50 current_auc = 0.8441558441558441
User 49594 AUC after training: 0.8441558441558441
User 49594 does not improve AUC. Reverting changes.
Training on augumented user 39731 27/50 current_auc = 0.8441558441558441
User 39731 AUC after training: 0.8376623376623377
User 39731 does not improve AUC. Reverting changes.
Training on augumented user 5673 28/50 current_auc = 0.8441558441558441
User 5673 AUC after training: 0.8376623376623377
User 5673 does not improve AUC. Reverting changes.
Training on augumented user 13666 29/50 current_auc = 0.8441558441558441
User 13666 AUC after training: 0.8409090909090909
User 13666 does not improve AUC. Reverting changes.
Training on augumented user 115357 30/50 current_auc = 0.8441558441558441
User 115357 AUC after training: 0.8441558441558441
User 115357 does not improve AUC. Reverting changes.
Training on augumented user 137495 31/50 current_auc = 0.8441558441558441
User 137495 AUC after training: 0.8441558441558441
User 137495 does not improve AUC. Reverting changes.
Training on augumented user 34951 32/50 current_auc = 0.8441558441558441
User 34951 AUC after training: 0.8441558441558441
User 34951 does not improve AUC. Reverting changes.
Training on augumented user 3646 33/50 current_auc = 0.8441558441558441
User 3646 AUC after training: 0.8441558441558441
User 3646 does not improve AUC. Reverting changes.
Training on augumented user 65734 34/50 current_auc = 0.8441558441558441
User 65734 AUC after training: 0.8441558441558441
User 65734 does not improve AUC. Reverting changes.
Training on augumented user 15200 35/50 current_auc = 0.8441558441558441
User 15200 AUC after training: 0.8376623376623377
User 15200 does not improve AUC. Reverting changes.
Training on augumented user 47335 36/50 current_auc = 0.8441558441558441
User 47335 AUC after training: 0.8376623376623377
User 47335 does not improve AUC. Reverting changes.
Training on augumented user 56605 37/50 current_auc = 0.8441558441558441
User 56605 AUC after training: 0.8441558441558441
User 56605 does not improve AUC. Reverting changes.
Training on augumented user 41081 38/50 current_auc = 0.8441558441558441
User 41081 AUC after training: 0.8441558441558441
User 41081 does not improve AUC. Reverting changes.
Training on augumented user 8056 39/50 current_auc = 0.8441558441558441
User 8056 AUC after training: 0.8409090909090909
User 8056 does not improve AUC. Reverting changes.
Training on augumented user 128510 40/50 current_auc = 0.8441558441558441
User 128510 AUC after training: 0.8441558441558441
User 128510 does not improve AUC. Reverting changes.
Training on augumented user 128042 41/50 current_auc = 0.8441558441558441
User 128042 AUC after training: 0.8311688311688312
User 128042 does not improve AUC. Reverting changes.
Training on augumented user 50237 42/50 current_auc = 0.8441558441558441
User 50237 AUC after training: 0.8441558441558441
User 50237 does not improve AUC. Reverting changes.
Training on augumented user 109687 43/50 current_auc = 0.8441558441558441
User 109687 AUC after training: 0.8441558441558441
User 109687 does not improve AUC. Reverting changes.
Training on augumented user 97692 44/50 current_auc = 0.8441558441558441
User 97692 AUC after training: 0.8441558441558441
User 97692 does not improve AUC. Reverting changes.
Training on augumented user 108011 45/50 current_auc = 0.8441558441558441
User 108011 AUC after training: 0.8474025974025974
User 108011 improves AUC. Keeping the model.
Training on augumented user 84638 46/50 current_auc = 0.8474025974025974
User 84638 AUC after training: 0.8474025974025974
User 84638 does not improve AUC. Reverting changes.
Training on augumented user 25978 47/50 current_auc = 0.8474025974025974
User 25978 AUC after training: 0.8441558441558441
User 25978 does not improve AUC. Reverting changes.
Training on augumented user 43164 48/50 current_auc = 0.8474025974025974
User 43164 AUC after training: 0.8474025974025974
User 43164 does not improve AUC. Reverting changes.
Training on augumented user 94691 49/50 current_auc = 0.8474025974025974
User 94691 AUC after training: 0.8474025974025974
User 94691 does not improve AUC. Reverting changes.
[2024-12-02 18:56:08.913619] start test user 59341 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:09.317491] start test user 59341 143/568 recall augumented users by random, augumented_users = [18589, 77887, 30100, 109133, 71950, 43003, 67791, 132206, 122380, 106520, 36596, 91457, 55913, 114801, 49727, 129451, 27787, 9555, 24263, 126077, 34065, 24362, 104299, 129423, 63700, 133356, 74977, 85399, 117360, 82500, 62638, 58433, 60726, 103552, 72522, 67055, 47030, 34007, 84272, 105888, 13691, 58957, 39261, 80612, 38461, 68400, 19776, 1369, 24476, 124045]
[2024-12-02 18:56:09.332826] user = 59341 Cloud 143/568
[2024-12-02 18:56:09.344712] user = 59341 Local 143/568
[2024-12-02 18:56:09.479954] user = 59341 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:12.397107] user = 59341 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48484848484848486
Training on augumented user 18589 0/50 current_auc = 0.48484848484848486
User 18589 AUC after training: 0.48484848484848486
User 18589 does not improve AUC. Reverting changes.
Training on augumented user 77887 1/50 current_auc = 0.48484848484848486
User 77887 AUC after training: 0.48484848484848486
User 77887 does not improve AUC. Reverting changes.
Training on augumented user 30100 2/50 current_auc = 0.48484848484848486
User 30100 AUC after training: 0.48484848484848486
User 30100 does not improve AUC. Reverting changes.
Training on augumented user 109133 3/50 current_auc = 0.48484848484848486
User 109133 AUC after training: 0.48484848484848486
User 109133 does not improve AUC. Reverting changes.
Training on augumented user 71950 4/50 current_auc = 0.48484848484848486
User 71950 AUC after training: 0.48484848484848486
User 71950 does not improve AUC. Reverting changes.
Training on augumented user 43003 5/50 current_auc = 0.48484848484848486
User 43003 AUC after training: 0.48484848484848486
User 43003 does not improve AUC. Reverting changes.
Training on augumented user 67791 6/50 current_auc = 0.48484848484848486
User 67791 AUC after training: 0.48484848484848486
User 67791 does not improve AUC. Reverting changes.
Training on augumented user 132206 7/50 current_auc = 0.48484848484848486
User 132206 AUC after training: 0.48484848484848486
User 132206 does not improve AUC. Reverting changes.
Training on augumented user 122380 8/50 current_auc = 0.48484848484848486
User 122380 AUC after training: 0.48484848484848486
User 122380 does not improve AUC. Reverting changes.
Training on augumented user 106520 9/50 current_auc = 0.48484848484848486
User 106520 AUC after training: 0.48484848484848486
User 106520 does not improve AUC. Reverting changes.
Training on augumented user 36596 10/50 current_auc = 0.48484848484848486
User 36596 AUC after training: 0.48484848484848486
User 36596 does not improve AUC. Reverting changes.
Training on augumented user 91457 11/50 current_auc = 0.48484848484848486
User 91457 AUC after training: 0.48484848484848486
User 91457 does not improve AUC. Reverting changes.
Training on augumented user 55913 12/50 current_auc = 0.48484848484848486
User 55913 AUC after training: 0.48484848484848486
User 55913 does not improve AUC. Reverting changes.
Training on augumented user 114801 13/50 current_auc = 0.48484848484848486
User 114801 AUC after training: 0.48484848484848486
User 114801 does not improve AUC. Reverting changes.
Training on augumented user 49727 14/50 current_auc = 0.48484848484848486
User 49727 AUC after training: 0.48484848484848486
User 49727 does not improve AUC. Reverting changes.
Training on augumented user 129451 15/50 current_auc = 0.48484848484848486
User 129451 AUC after training: 0.48484848484848486
User 129451 does not improve AUC. Reverting changes.
Training on augumented user 27787 16/50 current_auc = 0.48484848484848486
User 27787 AUC after training: 0.48484848484848486
User 27787 does not improve AUC. Reverting changes.
Training on augumented user 9555 17/50 current_auc = 0.48484848484848486
User 9555 AUC after training: 0.48484848484848486
User 9555 does not improve AUC. Reverting changes.
Training on augumented user 24263 18/50 current_auc = 0.48484848484848486
User 24263 AUC after training: 0.48484848484848486
User 24263 does not improve AUC. Reverting changes.
Training on augumented user 126077 19/50 current_auc = 0.48484848484848486
User 126077 AUC after training: 0.48484848484848486
User 126077 does not improve AUC. Reverting changes.
Training on augumented user 34065 20/50 current_auc = 0.48484848484848486
User 34065 AUC after training: 0.48484848484848486
User 34065 does not improve AUC. Reverting changes.
Training on augumented user 24362 21/50 current_auc = 0.48484848484848486
User 24362 AUC after training: 0.48484848484848486
User 24362 does not improve AUC. Reverting changes.
Training on augumented user 104299 22/50 current_auc = 0.48484848484848486
User 104299 AUC after training: 0.48484848484848486
User 104299 does not improve AUC. Reverting changes.
Training on augumented user 129423 23/50 current_auc = 0.48484848484848486
User 129423 AUC after training: 0.48484848484848486
User 129423 does not improve AUC. Reverting changes.
Training on augumented user 63700 24/50 current_auc = 0.48484848484848486
User 63700 AUC after training: 0.48484848484848486
User 63700 does not improve AUC. Reverting changes.
Training on augumented user 133356 25/50 current_auc = 0.48484848484848486
User 133356 AUC after training: 0.48484848484848486
User 133356 does not improve AUC. Reverting changes.
Training on augumented user 74977 26/50 current_auc = 0.48484848484848486
User 74977 AUC after training: 0.48484848484848486
User 74977 does not improve AUC. Reverting changes.
Training on augumented user 85399 27/50 current_auc = 0.48484848484848486
User 85399 AUC after training: 0.48484848484848486
User 85399 does not improve AUC. Reverting changes.
Training on augumented user 117360 28/50 current_auc = 0.48484848484848486
User 117360 AUC after training: 0.48484848484848486
User 117360 does not improve AUC. Reverting changes.
Training on augumented user 82500 29/50 current_auc = 0.48484848484848486
User 82500 AUC after training: 0.48484848484848486
User 82500 does not improve AUC. Reverting changes.
Training on augumented user 62638 30/50 current_auc = 0.48484848484848486
User 62638 AUC after training: 0.48484848484848486
User 62638 does not improve AUC. Reverting changes.
Training on augumented user 58433 31/50 current_auc = 0.48484848484848486
User 58433 AUC after training: 0.48484848484848486
User 58433 does not improve AUC. Reverting changes.
Training on augumented user 60726 32/50 current_auc = 0.48484848484848486
User 60726 AUC after training: 0.48484848484848486
User 60726 does not improve AUC. Reverting changes.
Training on augumented user 103552 33/50 current_auc = 0.48484848484848486
User 103552 AUC after training: 0.48484848484848486
User 103552 does not improve AUC. Reverting changes.
Training on augumented user 72522 34/50 current_auc = 0.48484848484848486
User 72522 AUC after training: 0.48484848484848486
User 72522 does not improve AUC. Reverting changes.
Training on augumented user 67055 35/50 current_auc = 0.48484848484848486
User 67055 AUC after training: 0.48484848484848486
User 67055 does not improve AUC. Reverting changes.
Training on augumented user 47030 36/50 current_auc = 0.48484848484848486
User 47030 AUC after training: 0.48484848484848486
User 47030 does not improve AUC. Reverting changes.
Training on augumented user 34007 37/50 current_auc = 0.48484848484848486
User 34007 AUC after training: 0.48484848484848486
User 34007 does not improve AUC. Reverting changes.
Training on augumented user 84272 38/50 current_auc = 0.48484848484848486
User 84272 AUC after training: 0.48484848484848486
User 84272 does not improve AUC. Reverting changes.
Training on augumented user 105888 39/50 current_auc = 0.48484848484848486
User 105888 AUC after training: 0.48484848484848486
User 105888 does not improve AUC. Reverting changes.
Training on augumented user 13691 40/50 current_auc = 0.48484848484848486
User 13691 AUC after training: 0.48484848484848486
User 13691 does not improve AUC. Reverting changes.
Training on augumented user 58957 41/50 current_auc = 0.48484848484848486
User 58957 AUC after training: 0.48484848484848486
User 58957 does not improve AUC. Reverting changes.
Training on augumented user 39261 42/50 current_auc = 0.48484848484848486
User 39261 AUC after training: 0.48484848484848486
User 39261 does not improve AUC. Reverting changes.
Training on augumented user 80612 43/50 current_auc = 0.48484848484848486
User 80612 AUC after training: 0.48484848484848486
User 80612 does not improve AUC. Reverting changes.
Training on augumented user 38461 44/50 current_auc = 0.48484848484848486
User 38461 AUC after training: 0.48484848484848486
User 38461 does not improve AUC. Reverting changes.
Training on augumented user 68400 45/50 current_auc = 0.48484848484848486
User 68400 AUC after training: 0.48484848484848486
User 68400 does not improve AUC. Reverting changes.
Training on augumented user 19776 46/50 current_auc = 0.48484848484848486
User 19776 AUC after training: 0.48484848484848486
User 19776 does not improve AUC. Reverting changes.
Training on augumented user 1369 47/50 current_auc = 0.48484848484848486
User 1369 AUC after training: 0.48484848484848486
User 1369 does not improve AUC. Reverting changes.
Training on augumented user 24476 48/50 current_auc = 0.48484848484848486
User 24476 AUC after training: 0.48484848484848486
User 24476 does not improve AUC. Reverting changes.
Training on augumented user 124045 49/50 current_auc = 0.48484848484848486
User 124045 AUC after training: 0.48484848484848486
User 124045 does not improve AUC. Reverting changes.
[2024-12-02 18:56:43.799539] start test user 59352 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:44.424863] start test user 59352 144/568 recall augumented users by random, augumented_users = [62636, 26172, 131539, 15153, 10381, 127149, 88571, 63412, 8336, 113731, 94125, 89915, 136049, 130744, 85017, 112107, 92326, 4778, 49519, 78634, 79547, 84004, 128672, 67978, 82815, 44157, 128583, 63550, 48687, 69298, 48950, 87501, 8999, 4501, 136964, 5615, 60419, 58993, 44600, 59109, 100241, 50011, 80031, 37371, 61597, 29813, 59671, 11738, 65248, 47825]
[2024-12-02 18:56:44.448478] user = 59352 Cloud 144/568
[2024-12-02 18:56:44.491989] user = 59352 Local 144/568
[2024-12-02 18:56:44.622261] user = 59352 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:46.743930] user = 59352 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5778340475262953
Training on augumented user 62636 0/50 current_auc = 0.5778340475262953
User 62636 AUC after training: 0.5780677834047525
User 62636 improves AUC. Keeping the model.
Training on augumented user 26172 1/50 current_auc = 0.5780677834047525
User 26172 AUC after training: 0.5774834437086092
User 26172 does not improve AUC. Reverting changes.
Training on augumented user 131539 2/50 current_auc = 0.5780677834047525
User 131539 AUC after training: 0.5781846513439812
User 131539 improves AUC. Keeping the model.
Training on augumented user 15153 3/50 current_auc = 0.5781846513439812
User 15153 AUC after training: 0.5781846513439813
User 15153 improves AUC. Keeping the model.
Training on augumented user 10381 4/50 current_auc = 0.5781846513439813
User 10381 AUC after training: 0.5780288274250097
User 10381 does not improve AUC. Reverting changes.
Training on augumented user 127149 5/50 current_auc = 0.5781846513439813
User 127149 AUC after training: 0.5783404752629528
User 127149 improves AUC. Keeping the model.
Training on augumented user 88571 6/50 current_auc = 0.5783404752629528
User 88571 AUC after training: 0.5776392676275808
User 88571 does not improve AUC. Reverting changes.
Training on augumented user 63412 7/50 current_auc = 0.5783404752629528
User 63412 AUC after training: 0.5779898714452668
User 63412 does not improve AUC. Reverting changes.
Training on augumented user 8336 8/50 current_auc = 0.5783404752629528
User 8336 AUC after training: 0.5779898714452668
User 8336 does not improve AUC. Reverting changes.
Training on augumented user 113731 9/50 current_auc = 0.5783404752629528
User 113731 AUC after training: 0.5784962991819244
User 113731 improves AUC. Keeping the model.
Training on augumented user 94125 10/50 current_auc = 0.5784962991819244
User 94125 AUC after training: 0.5785352551616673
User 94125 improves AUC. Keeping the model.
Training on augumented user 89915 11/50 current_auc = 0.5785352551616673
User 89915 AUC after training: 0.5788858589793532
User 89915 improves AUC. Keeping the model.
Training on augumented user 136049 12/50 current_auc = 0.5788858589793532
User 136049 AUC after training: 0.5785742111414102
User 136049 does not improve AUC. Reverting changes.
Training on augumented user 130744 13/50 current_auc = 0.5788858589793532
User 130744 AUC after training: 0.5787689910401246
User 130744 does not improve AUC. Reverting changes.
Training on augumented user 85017 14/50 current_auc = 0.5788858589793532
User 85017 AUC after training: 0.5781067393844955
User 85017 does not improve AUC. Reverting changes.
Training on augumented user 112107 15/50 current_auc = 0.5788858589793532
User 112107 AUC after training: 0.5788079470198675
User 112107 does not improve AUC. Reverting changes.
Training on augumented user 92326 16/50 current_auc = 0.5788858589793532
User 92326 AUC after training: 0.5781456953642384
User 92326 does not improve AUC. Reverting changes.
Training on augumented user 4778 17/50 current_auc = 0.5788858589793532
User 4778 AUC after training: 0.5780677834047526
User 4778 does not improve AUC. Reverting changes.
Training on augumented user 49519 18/50 current_auc = 0.5788858589793532
User 49519 AUC after training: 0.5785742111414102
User 49519 does not improve AUC. Reverting changes.
Training on augumented user 78634 19/50 current_auc = 0.5788858589793532
User 78634 AUC after training: 0.5785742111414102
User 78634 does not improve AUC. Reverting changes.
Training on augumented user 79547 20/50 current_auc = 0.5788858589793532
User 79547 AUC after training: 0.5784183872224387
User 79547 does not improve AUC. Reverting changes.
Training on augumented user 84004 21/50 current_auc = 0.5788858589793532
User 84004 AUC after training: 0.5785352551616673
User 84004 does not improve AUC. Reverting changes.
Training on augumented user 128672 22/50 current_auc = 0.5788858589793532
User 128672 AUC after training: 0.577950915465524
User 128672 does not improve AUC. Reverting changes.
Training on augumented user 67978 23/50 current_auc = 0.5788858589793532
User 67978 AUC after training: 0.5786910790806389
User 67978 does not improve AUC. Reverting changes.
Training on augumented user 82815 24/50 current_auc = 0.5788858589793532
User 82815 AUC after training: 0.5782236073237241
User 82815 does not improve AUC. Reverting changes.
Training on augumented user 44157 25/50 current_auc = 0.5788858589793532
User 44157 AUC after training: 0.5785352551616673
User 44157 does not improve AUC. Reverting changes.
Training on augumented user 128583 26/50 current_auc = 0.5788858589793532
User 128583 AUC after training: 0.5781846513439812
User 128583 does not improve AUC. Reverting changes.
Training on augumented user 63550 27/50 current_auc = 0.5788858589793532
User 63550 AUC after training: 0.578652123100896
User 63550 does not improve AUC. Reverting changes.
Training on augumented user 48687 28/50 current_auc = 0.5788858589793532
User 48687 AUC after training: 0.5781456953642384
User 48687 does not improve AUC. Reverting changes.
Training on augumented user 69298 29/50 current_auc = 0.5788858589793532
User 69298 AUC after training: 0.5773665757693807
User 69298 does not improve AUC. Reverting changes.
Training on augumented user 48950 30/50 current_auc = 0.5788858589793532
User 48950 AUC after training: 0.5777561355668095
User 48950 does not improve AUC. Reverting changes.
Training on augumented user 87501 31/50 current_auc = 0.5788858589793532
User 87501 AUC after training: 0.5778730035060382
User 87501 does not improve AUC. Reverting changes.
Training on augumented user 8999 32/50 current_auc = 0.5788858589793532
User 8999 AUC after training: 0.5781067393844955
User 8999 does not improve AUC. Reverting changes.
Training on augumented user 4501 33/50 current_auc = 0.5788858589793532
User 4501 AUC after training: 0.5781067393844955
User 4501 does not improve AUC. Reverting changes.
Training on augumented user 136964 34/50 current_auc = 0.5788858589793532
User 136964 AUC after training: 0.5786131671211531
User 136964 does not improve AUC. Reverting changes.
Training on augumented user 5615 35/50 current_auc = 0.5788858589793532
User 5615 AUC after training: 0.5775223996883522
User 5615 does not improve AUC. Reverting changes.
Training on augumented user 60419 36/50 current_auc = 0.5788858589793532
User 60419 AUC after training: 0.5781846513439812
User 60419 does not improve AUC. Reverting changes.
Training on augumented user 58993 37/50 current_auc = 0.5788858589793532
User 58993 AUC after training: 0.5787300350603818
User 58993 does not improve AUC. Reverting changes.
Training on augumented user 44600 38/50 current_auc = 0.5788858589793532
User 44600 AUC after training: 0.5786910790806389
User 44600 does not improve AUC. Reverting changes.
Training on augumented user 59109 39/50 current_auc = 0.5788858589793532
User 59109 AUC after training: 0.5787300350603818
User 59109 does not improve AUC. Reverting changes.
Training on augumented user 100241 40/50 current_auc = 0.5788858589793532
User 100241 AUC after training: 0.5781846513439812
User 100241 does not improve AUC. Reverting changes.
Training on augumented user 50011 41/50 current_auc = 0.5788858589793532
User 50011 AUC after training: 0.5779509154655239
User 50011 does not improve AUC. Reverting changes.
Training on augumented user 80031 42/50 current_auc = 0.5788858589793532
User 80031 AUC after training: 0.5788858589793532
User 80031 does not improve AUC. Reverting changes.
Training on augumented user 37371 43/50 current_auc = 0.5788858589793532
User 37371 AUC after training: 0.5780677834047526
User 37371 does not improve AUC. Reverting changes.
Training on augumented user 61597 44/50 current_auc = 0.5788858589793532
User 61597 AUC after training: 0.5781456953642383
User 61597 does not improve AUC. Reverting changes.
Training on augumented user 29813 45/50 current_auc = 0.5788858589793532
User 29813 AUC after training: 0.5787689910401246
User 29813 does not improve AUC. Reverting changes.
Training on augumented user 59671 46/50 current_auc = 0.5788858589793532
User 59671 AUC after training: 0.5784962991819244
User 59671 does not improve AUC. Reverting changes.
Training on augumented user 11738 47/50 current_auc = 0.5788858589793532
User 11738 AUC after training: 0.5785352551616673
User 11738 does not improve AUC. Reverting changes.
Training on augumented user 65248 48/50 current_auc = 0.5788858589793532
User 65248 AUC after training: 0.5783404752629527
User 65248 does not improve AUC. Reverting changes.
Training on augumented user 47825 49/50 current_auc = 0.5788858589793532
User 47825 AUC after training: 0.5787689910401246
User 47825 does not improve AUC. Reverting changes.
[2024-12-02 18:57:13.694047] start test user 59359 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:14.413336] start test user 59359 145/568 recall augumented users by random, augumented_users = [67856, 108882, 112935, 109275, 120216, 41435, 129216, 21038, 19077, 74561, 99635, 122369, 9121, 93847, 34515, 97244, 72127, 64620, 102375, 73788, 72248, 79949, 95491, 87604, 110006, 9359, 105874, 94868, 12571, 68104, 67752, 22956, 95157, 13601, 119872, 117195, 130815, 132923, 76973, 84751, 30119, 8267, 49531, 49001, 87315, 51651, 88322, 96209, 72989, 60360]
[2024-12-02 18:57:14.428139] user = 59359 Cloud 145/568
[2024-12-02 18:57:14.438558] user = 59359 Local 145/568
[2024-12-02 18:57:14.529704] user = 59359 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:16.328665] user = 59359 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6517671517671517
Training on augumented user 67856 0/50 current_auc = 0.6517671517671517
User 67856 AUC after training: 0.6548856548856549
User 67856 improves AUC. Keeping the model.
Training on augumented user 108882 1/50 current_auc = 0.6548856548856549
User 108882 AUC after training: 0.6528066528066527
User 108882 does not improve AUC. Reverting changes.
Training on augumented user 112935 2/50 current_auc = 0.6548856548856549
User 112935 AUC after training: 0.656964656964657
User 112935 improves AUC. Keeping the model.
Training on augumented user 109275 3/50 current_auc = 0.656964656964657
User 109275 AUC after training: 0.658004158004158
User 109275 improves AUC. Keeping the model.
Training on augumented user 120216 4/50 current_auc = 0.658004158004158
User 120216 AUC after training: 0.6548856548856549
User 120216 does not improve AUC. Reverting changes.
Training on augumented user 41435 5/50 current_auc = 0.658004158004158
User 41435 AUC after training: 0.6559251559251559
User 41435 does not improve AUC. Reverting changes.
Training on augumented user 129216 6/50 current_auc = 0.658004158004158
User 129216 AUC after training: 0.6559251559251559
User 129216 does not improve AUC. Reverting changes.
Training on augumented user 21038 7/50 current_auc = 0.658004158004158
User 21038 AUC after training: 0.6569646569646569
User 21038 does not improve AUC. Reverting changes.
Training on augumented user 19077 8/50 current_auc = 0.658004158004158
User 19077 AUC after training: 0.6548856548856549
User 19077 does not improve AUC. Reverting changes.
Training on augumented user 74561 9/50 current_auc = 0.658004158004158
User 74561 AUC after training: 0.6517671517671518
User 74561 does not improve AUC. Reverting changes.
Training on augumented user 99635 10/50 current_auc = 0.658004158004158
User 99635 AUC after training: 0.6569646569646569
User 99635 does not improve AUC. Reverting changes.
Training on augumented user 122369 11/50 current_auc = 0.658004158004158
User 122369 AUC after training: 0.6590436590436589
User 122369 improves AUC. Keeping the model.
Training on augumented user 9121 12/50 current_auc = 0.6590436590436589
User 9121 AUC after training: 0.6491683991683992
User 9121 does not improve AUC. Reverting changes.
Training on augumented user 93847 13/50 current_auc = 0.6590436590436589
User 93847 AUC after training: 0.6569646569646569
User 93847 does not improve AUC. Reverting changes.
Training on augumented user 34515 14/50 current_auc = 0.6590436590436589
User 34515 AUC after training: 0.655925155925156
User 34515 does not improve AUC. Reverting changes.
Training on augumented user 97244 15/50 current_auc = 0.6590436590436589
User 97244 AUC after training: 0.6569646569646569
User 97244 does not improve AUC. Reverting changes.
Training on augumented user 72127 16/50 current_auc = 0.6590436590436589
User 72127 AUC after training: 0.6590436590436589
User 72127 does not improve AUC. Reverting changes.
Training on augumented user 64620 17/50 current_auc = 0.6590436590436589
User 64620 AUC after training: 0.6559251559251559
User 64620 does not improve AUC. Reverting changes.
Training on augumented user 102375 18/50 current_auc = 0.6590436590436589
User 102375 AUC after training: 0.6569646569646569
User 102375 does not improve AUC. Reverting changes.
Training on augumented user 73788 19/50 current_auc = 0.6590436590436589
User 73788 AUC after training: 0.66008316008316
User 73788 improves AUC. Keeping the model.
Training on augumented user 72248 20/50 current_auc = 0.66008316008316
User 72248 AUC after training: 0.658004158004158
User 72248 does not improve AUC. Reverting changes.
Training on augumented user 79949 21/50 current_auc = 0.66008316008316
User 79949 AUC after training: 0.658004158004158
User 79949 does not improve AUC. Reverting changes.
Training on augumented user 95491 22/50 current_auc = 0.66008316008316
User 95491 AUC after training: 0.66008316008316
User 95491 does not improve AUC. Reverting changes.
Training on augumented user 87604 23/50 current_auc = 0.66008316008316
User 87604 AUC after training: 0.6611226611226612
User 87604 improves AUC. Keeping the model.
Training on augumented user 110006 24/50 current_auc = 0.6611226611226612
User 110006 AUC after training: 0.659043659043659
User 110006 does not improve AUC. Reverting changes.
Training on augumented user 9359 25/50 current_auc = 0.6611226611226612
User 9359 AUC after training: 0.6528066528066528
User 9359 does not improve AUC. Reverting changes.
Training on augumented user 105874 26/50 current_auc = 0.6611226611226612
User 105874 AUC after training: 0.6600831600831601
User 105874 does not improve AUC. Reverting changes.
Training on augumented user 94868 27/50 current_auc = 0.6611226611226612
User 94868 AUC after training: 0.6611226611226609
User 94868 does not improve AUC. Reverting changes.
Training on augumented user 12571 28/50 current_auc = 0.6611226611226612
User 12571 AUC after training: 0.6580041580041579
User 12571 does not improve AUC. Reverting changes.
Training on augumented user 68104 29/50 current_auc = 0.6611226611226612
User 68104 AUC after training: 0.6611226611226612
User 68104 does not improve AUC. Reverting changes.
Training on augumented user 67752 30/50 current_auc = 0.6611226611226612
User 67752 AUC after training: 0.6611226611226612
User 67752 does not improve AUC. Reverting changes.
Training on augumented user 22956 31/50 current_auc = 0.6611226611226612
User 22956 AUC after training: 0.6590436590436589
User 22956 does not improve AUC. Reverting changes.
Training on augumented user 95157 32/50 current_auc = 0.6611226611226612
User 95157 AUC after training: 0.6580041580041579
User 95157 does not improve AUC. Reverting changes.
Training on augumented user 13601 33/50 current_auc = 0.6611226611226612
User 13601 AUC after training: 0.6569646569646571
User 13601 does not improve AUC. Reverting changes.
Training on augumented user 119872 34/50 current_auc = 0.6611226611226612
User 119872 AUC after training: 0.6611226611226612
User 119872 does not improve AUC. Reverting changes.
Training on augumented user 117195 35/50 current_auc = 0.6611226611226612
User 117195 AUC after training: 0.6600831600831599
User 117195 does not improve AUC. Reverting changes.
Training on augumented user 130815 36/50 current_auc = 0.6611226611226612
User 130815 AUC after training: 0.6569646569646569
User 130815 does not improve AUC. Reverting changes.
Training on augumented user 132923 37/50 current_auc = 0.6611226611226612
User 132923 AUC after training: 0.6600831600831601
User 132923 does not improve AUC. Reverting changes.
Training on augumented user 76973 38/50 current_auc = 0.6611226611226612
User 76973 AUC after training: 0.6600831600831601
User 76973 does not improve AUC. Reverting changes.
Training on augumented user 84751 39/50 current_auc = 0.6611226611226612
User 84751 AUC after training: 0.6600831600831601
User 84751 does not improve AUC. Reverting changes.
Training on augumented user 30119 40/50 current_auc = 0.6611226611226612
User 30119 AUC after training: 0.6621621621621622
User 30119 improves AUC. Keeping the model.
Training on augumented user 8267 41/50 current_auc = 0.6621621621621622
User 8267 AUC after training: 0.6611226611226609
User 8267 does not improve AUC. Reverting changes.
Training on augumented user 49531 42/50 current_auc = 0.6621621621621622
User 49531 AUC after training: 0.6611226611226609
User 49531 does not improve AUC. Reverting changes.
Training on augumented user 49001 43/50 current_auc = 0.6621621621621622
User 49001 AUC after training: 0.658004158004158
User 49001 does not improve AUC. Reverting changes.
Training on augumented user 87315 44/50 current_auc = 0.6621621621621622
User 87315 AUC after training: 0.6611226611226612
User 87315 does not improve AUC. Reverting changes.
Training on augumented user 51651 45/50 current_auc = 0.6621621621621622
User 51651 AUC after training: 0.6621621621621622
User 51651 does not improve AUC. Reverting changes.
Training on augumented user 88322 46/50 current_auc = 0.6621621621621622
User 88322 AUC after training: 0.6621621621621622
User 88322 does not improve AUC. Reverting changes.
Training on augumented user 96209 47/50 current_auc = 0.6621621621621622
User 96209 AUC after training: 0.6621621621621622
User 96209 does not improve AUC. Reverting changes.
Training on augumented user 72989 48/50 current_auc = 0.6621621621621622
User 72989 AUC after training: 0.6611226611226609
User 72989 does not improve AUC. Reverting changes.
Training on augumented user 60360 49/50 current_auc = 0.6621621621621622
User 60360 AUC after training: 0.6611226611226612
User 60360 does not improve AUC. Reverting changes.
[2024-12-02 18:57:42.637885] start test user 59407 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:43.051332] start test user 59407 146/568 recall augumented users by random, augumented_users = [134202, 131133, 92114, 14823, 117851, 11653, 107202, 9495, 72299, 4237, 94019, 43554, 54498, 81784, 83506, 100693, 3838, 138263, 93721, 73270, 12717, 81366, 93543, 109025, 39285, 22486, 40448, 81301, 114352, 22299, 106349, 133116, 15868, 6933, 61973, 35871, 63586, 10602, 59303, 119152, 77010, 4704, 91584, 102464, 24494, 62251, 34016, 81665, 74856, 103129]
[2024-12-02 18:57:43.070015] user = 59407 Cloud 146/568
[2024-12-02 18:57:43.162969] user = 59407 Local 146/568
[2024-12-02 18:57:43.575655] user = 59407 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:46.153744] user = 59407 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7017287536526045
Training on augumented user 134202 0/50 current_auc = 0.7017287536526045
User 134202 AUC after training: 0.701720004899302
User 134202 does not improve AUC. Reverting changes.
Training on augumented user 131133 1/50 current_auc = 0.7017287536526045
User 131133 AUC after training: 0.7017812461724204
User 131133 improves AUC. Keeping the model.
Training on augumented user 92114 2/50 current_auc = 0.7017812461724204
User 92114 AUC after training: 0.7016806355094399
User 92114 does not improve AUC. Reverting changes.
Training on augumented user 14823 3/50 current_auc = 0.7017812461724204
User 14823 AUC after training: 0.7017812461724204
User 14823 does not improve AUC. Reverting changes.
Training on augumented user 117851 4/50 current_auc = 0.7017812461724204
User 117851 AUC after training: 0.70161501985967
User 117851 does not improve AUC. Reverting changes.
Training on augumented user 11653 5/50 current_auc = 0.7017812461724204
User 11653 AUC after training: 0.7017724974191178
User 11653 does not improve AUC. Reverting changes.
Training on augumented user 107202 6/50 current_auc = 0.7017812461724204
User 107202 AUC after training: 0.7017812461724204
User 107202 does not improve AUC. Reverting changes.
Training on augumented user 9495 7/50 current_auc = 0.7017812461724204
User 9495 AUC after training: 0.7018512361988417
User 9495 improves AUC. Keeping the model.
Training on augumented user 72299 8/50 current_auc = 0.7018512361988417
User 72299 AUC after training: 0.7021486938111319
User 72299 improves AUC. Keeping the model.
Training on augumented user 4237 9/50 current_auc = 0.7021486938111319
User 4237 AUC after training: 0.7020262112648947
User 4237 does not improve AUC. Reverting changes.
Training on augumented user 94019 10/50 current_auc = 0.7021486938111319
User 94019 AUC after training: 0.7020262112648946
User 94019 does not improve AUC. Reverting changes.
Training on augumented user 43554 11/50 current_auc = 0.7021486938111319
User 43554 AUC after training: 0.7020962012913159
User 43554 does not improve AUC. Reverting changes.
Training on augumented user 54498 12/50 current_auc = 0.7021486938111319
User 54498 AUC after training: 0.7023936589036063
User 54498 improves AUC. Keeping the model.
Training on augumented user 81784 13/50 current_auc = 0.7023936589036063
User 81784 AUC after training: 0.7021049500446187
User 81784 does not improve AUC. Reverting changes.
Training on augumented user 83506 14/50 current_auc = 0.7023936589036063
User 83506 AUC after training: 0.7022799251106717
User 83506 does not improve AUC. Reverting changes.
Training on augumented user 100693 15/50 current_auc = 0.7023936589036063
User 100693 AUC after training: 0.7024286539168167
User 100693 improves AUC. Keeping the model.
Training on augumented user 3838 16/50 current_auc = 0.7024286539168167
User 3838 AUC after training: 0.7023761613970009
User 3838 does not improve AUC. Reverting changes.
Training on augumented user 138263 17/50 current_auc = 0.7024286539168167
User 138263 AUC after training: 0.7022974226172771
User 138263 does not improve AUC. Reverting changes.
Training on augumented user 93721 18/50 current_auc = 0.7024286539168167
User 93721 AUC after training: 0.7024723976833301
User 93721 improves AUC. Keeping the model.
Training on augumented user 73270 19/50 current_auc = 0.7024723976833301
User 73270 AUC after training: 0.7024111564102116
User 73270 does not improve AUC. Reverting changes.
Training on augumented user 12717 20/50 current_auc = 0.7024723976833301
User 12717 AUC after training: 0.7021749400710399
User 12717 does not improve AUC. Reverting changes.
Training on augumented user 81366 21/50 current_auc = 0.7024723976833301
User 81366 AUC after training: 0.702629875242778
User 81366 improves AUC. Keeping the model.
Training on augumented user 93543 22/50 current_auc = 0.702629875242778
User 93543 AUC after training: 0.7026298752427779
User 93543 does not improve AUC. Reverting changes.
Training on augumented user 109025 23/50 current_auc = 0.702629875242778
User 109025 AUC after training: 0.7025861314762646
User 109025 does not improve AUC. Reverting changes.
Training on augumented user 39285 24/50 current_auc = 0.702629875242778
User 39285 AUC after training: 0.7025336389564487
User 39285 does not improve AUC. Reverting changes.
Training on augumented user 22486 25/50 current_auc = 0.702629875242778
User 22486 AUC after training: 0.7026211264894753
User 22486 does not improve AUC. Reverting changes.
Training on augumented user 40448 26/50 current_auc = 0.702629875242778
User 40448 AUC after training: 0.7024461514234221
User 40448 does not improve AUC. Reverting changes.
Training on augumented user 81301 27/50 current_auc = 0.702629875242778
User 81301 AUC after training: 0.7024942695665868
User 81301 does not improve AUC. Reverting changes.
Training on augumented user 114352 28/50 current_auc = 0.702629875242778
User 114352 AUC after training: 0.7024374026701196
User 114352 does not improve AUC. Reverting changes.
Training on augumented user 22299 29/50 current_auc = 0.702629875242778
User 22299 AUC after training: 0.7025073926965407
User 22299 does not improve AUC. Reverting changes.
Training on augumented user 106349 30/50 current_auc = 0.702629875242778
User 106349 AUC after training: 0.7025336389564487
User 106349 does not improve AUC. Reverting changes.
Training on augumented user 133116 31/50 current_auc = 0.702629875242778
User 133116 AUC after training: 0.7027611065423176
User 133116 improves AUC. Keeping the model.
Training on augumented user 15868 32/50 current_auc = 0.7027611065423176
User 15868 AUC after training: 0.7027523577890151
User 15868 does not improve AUC. Reverting changes.
Training on augumented user 6933 33/50 current_auc = 0.7027611065423176
User 6933 AUC after training: 0.702831096568739
User 6933 improves AUC. Keeping the model.
Training on augumented user 61973 34/50 current_auc = 0.702831096568739
User 61973 AUC after training: 0.7028004759321795
User 61973 does not improve AUC. Reverting changes.
Training on augumented user 35871 35/50 current_auc = 0.702831096568739
User 35871 AUC after training: 0.702673619009291
User 35871 does not improve AUC. Reverting changes.
Training on augumented user 63586 36/50 current_auc = 0.702831096568739
User 63586 AUC after training: 0.702831096568739
User 63586 does not improve AUC. Reverting changes.
Training on augumented user 10602 37/50 current_auc = 0.702831096568739
User 10602 AUC after training: 0.7026998652691993
User 10602 does not improve AUC. Reverting changes.
Training on augumented user 59303 38/50 current_auc = 0.702831096568739
User 59303 AUC after training: 0.7027873528022257
User 59303 does not improve AUC. Reverting changes.
Training on augumented user 119152 39/50 current_auc = 0.702831096568739
User 119152 AUC after training: 0.7029098353484629
User 119152 improves AUC. Keeping the model.
Training on augumented user 77010 40/50 current_auc = 0.7029098353484629
User 77010 AUC after training: 0.7026911165158966
User 77010 does not improve AUC. Reverting changes.
Training on augumented user 4704 41/50 current_auc = 0.7029098353484629
User 4704 AUC after training: 0.702629875242778
User 4704 does not improve AUC. Reverting changes.
Training on augumented user 91584 42/50 current_auc = 0.7029098353484629
User 91584 AUC after training: 0.7027611065423177
User 91584 does not improve AUC. Reverting changes.
Training on augumented user 102464 43/50 current_auc = 0.7029098353484629
User 102464 AUC after training: 0.7028835890885549
User 102464 does not improve AUC. Reverting changes.
Training on augumented user 24494 44/50 current_auc = 0.7029098353484629
User 24494 AUC after training: 0.7022186838375531
User 24494 does not improve AUC. Reverting changes.
Training on augumented user 62251 45/50 current_auc = 0.7029098353484629
User 62251 AUC after training: 0.7027436090357124
User 62251 does not improve AUC. Reverting changes.
Training on augumented user 34016 46/50 current_auc = 0.7029098353484629
User 34016 AUC after training: 0.7027523577890151
User 34016 does not improve AUC. Reverting changes.
Training on augumented user 81665 47/50 current_auc = 0.7029098353484629
User 81665 AUC after training: 0.7025161414498433
User 81665 does not improve AUC. Reverting changes.
Training on augumented user 74856 48/50 current_auc = 0.7029098353484629
User 74856 AUC after training: 0.7021749400710398
User 74856 does not improve AUC. Reverting changes.
Training on augumented user 103129 49/50 current_auc = 0.7029098353484629
User 103129 AUC after training: 0.7026736190092912
User 103129 does not improve AUC. Reverting changes.
[2024-12-02 18:58:15.526681] start test user 59409 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:15.978809] start test user 59409 147/568 recall augumented users by random, augumented_users = [84457, 72940, 87298, 123992, 49041, 135772, 102885, 102914, 32240, 77548, 5970, 137139, 110390, 79252, 46099, 21459, 112991, 46244, 137477, 90978, 91541, 93119, 136334, 123740, 52486, 72147, 138291, 122695, 11940, 63867, 53270, 121695, 132620, 103027, 14932, 29991, 114872, 77167, 104845, 22180, 32616, 130859, 138051, 122888, 40520, 66688, 95914, 107394, 72164, 32960]
[2024-12-02 18:58:15.994139] user = 59409 Cloud 147/568
[2024-12-02 18:58:16.062065] user = 59409 Local 147/568
[2024-12-02 18:58:16.337870] user = 59409 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:19.003786] user = 59409 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6217647058823529
Training on augumented user 84457 0/50 current_auc = 0.6217647058823529
User 84457 AUC after training: 0.6214285714285714
User 84457 does not improve AUC. Reverting changes.
Training on augumented user 72940 1/50 current_auc = 0.6217647058823529
User 72940 AUC after training: 0.621764705882353
User 72940 improves AUC. Keeping the model.
Training on augumented user 87298 2/50 current_auc = 0.621764705882353
User 87298 AUC after training: 0.621344537815126
User 87298 does not improve AUC. Reverting changes.
Training on augumented user 123992 3/50 current_auc = 0.621764705882353
User 123992 AUC after training: 0.6215966386554621
User 123992 does not improve AUC. Reverting changes.
Training on augumented user 49041 4/50 current_auc = 0.621764705882353
User 49041 AUC after training: 0.6219327731092438
User 49041 improves AUC. Keeping the model.
Training on augumented user 135772 5/50 current_auc = 0.6219327731092438
User 135772 AUC after training: 0.6214285714285713
User 135772 does not improve AUC. Reverting changes.
Training on augumented user 102885 6/50 current_auc = 0.6219327731092438
User 102885 AUC after training: 0.622016806722689
User 102885 improves AUC. Keeping the model.
Training on augumented user 102914 7/50 current_auc = 0.622016806722689
User 102914 AUC after training: 0.621764705882353
User 102914 does not improve AUC. Reverting changes.
Training on augumented user 32240 8/50 current_auc = 0.622016806722689
User 32240 AUC after training: 0.6218487394957982
User 32240 does not improve AUC. Reverting changes.
Training on augumented user 77548 9/50 current_auc = 0.622016806722689
User 77548 AUC after training: 0.6221008403361343
User 77548 improves AUC. Keeping the model.
Training on augumented user 5970 10/50 current_auc = 0.6221008403361343
User 5970 AUC after training: 0.6215126050420168
User 5970 does not improve AUC. Reverting changes.
Training on augumented user 137139 11/50 current_auc = 0.6221008403361343
User 137139 AUC after training: 0.6221848739495798
User 137139 improves AUC. Keeping the model.
Training on augumented user 110390 12/50 current_auc = 0.6221848739495798
User 110390 AUC after training: 0.6218487394957983
User 110390 does not improve AUC. Reverting changes.
Training on augumented user 79252 13/50 current_auc = 0.6221848739495798
User 79252 AUC after training: 0.6221848739495799
User 79252 improves AUC. Keeping the model.
Training on augumented user 46099 14/50 current_auc = 0.6221848739495799
User 46099 AUC after training: 0.6223529411764707
User 46099 improves AUC. Keeping the model.
Training on augumented user 21459 15/50 current_auc = 0.6223529411764707
User 21459 AUC after training: 0.6221848739495798
User 21459 does not improve AUC. Reverting changes.
Training on augumented user 112991 16/50 current_auc = 0.6223529411764707
User 112991 AUC after training: 0.6221848739495797
User 112991 does not improve AUC. Reverting changes.
Training on augumented user 46244 17/50 current_auc = 0.6223529411764707
User 46244 AUC after training: 0.6222689075630251
User 46244 does not improve AUC. Reverting changes.
Training on augumented user 137477 18/50 current_auc = 0.6223529411764707
User 137477 AUC after training: 0.6221008403361344
User 137477 does not improve AUC. Reverting changes.
Training on augumented user 90978 19/50 current_auc = 0.6223529411764707
User 90978 AUC after training: 0.6219327731092437
User 90978 does not improve AUC. Reverting changes.
Training on augumented user 91541 20/50 current_auc = 0.6223529411764707
User 91541 AUC after training: 0.6219327731092437
User 91541 does not improve AUC. Reverting changes.
Training on augumented user 93119 21/50 current_auc = 0.6223529411764707
User 93119 AUC after training: 0.6226890756302521
User 93119 improves AUC. Keeping the model.
Training on augumented user 136334 22/50 current_auc = 0.6226890756302521
User 136334 AUC after training: 0.6225210084033613
User 136334 does not improve AUC. Reverting changes.
Training on augumented user 123740 23/50 current_auc = 0.6226890756302521
User 123740 AUC after training: 0.6222689075630251
User 123740 does not improve AUC. Reverting changes.
Training on augumented user 52486 24/50 current_auc = 0.6226890756302521
User 52486 AUC after training: 0.622436974789916
User 52486 does not improve AUC. Reverting changes.
Training on augumented user 72147 25/50 current_auc = 0.6226890756302521
User 72147 AUC after training: 0.622436974789916
User 72147 does not improve AUC. Reverting changes.
Training on augumented user 138291 26/50 current_auc = 0.6226890756302521
User 138291 AUC after training: 0.6230252100840336
User 138291 improves AUC. Keeping the model.
Training on augumented user 122695 27/50 current_auc = 0.6230252100840336
User 122695 AUC after training: 0.6228571428571428
User 122695 does not improve AUC. Reverting changes.
Training on augumented user 11940 28/50 current_auc = 0.6230252100840336
User 11940 AUC after training: 0.6229411764705882
User 11940 does not improve AUC. Reverting changes.
Training on augumented user 63867 29/50 current_auc = 0.6230252100840336
User 63867 AUC after training: 0.6230252100840336
User 63867 does not improve AUC. Reverting changes.
Training on augumented user 53270 30/50 current_auc = 0.6230252100840336
User 53270 AUC after training: 0.6227731092436974
User 53270 does not improve AUC. Reverting changes.
Training on augumented user 121695 31/50 current_auc = 0.6230252100840336
User 121695 AUC after training: 0.6221848739495799
User 121695 does not improve AUC. Reverting changes.
Training on augumented user 132620 32/50 current_auc = 0.6230252100840336
User 132620 AUC after training: 0.6228571428571429
User 132620 does not improve AUC. Reverting changes.
Training on augumented user 103027 33/50 current_auc = 0.6230252100840336
User 103027 AUC after training: 0.6232773109243697
User 103027 improves AUC. Keeping the model.
Training on augumented user 14932 34/50 current_auc = 0.6232773109243697
User 14932 AUC after training: 0.622436974789916
User 14932 does not improve AUC. Reverting changes.
Training on augumented user 29991 35/50 current_auc = 0.6232773109243697
User 29991 AUC after training: 0.6233613445378151
User 29991 improves AUC. Keeping the model.
Training on augumented user 114872 36/50 current_auc = 0.6233613445378151
User 114872 AUC after training: 0.6235294117647059
User 114872 improves AUC. Keeping the model.
Training on augumented user 77167 37/50 current_auc = 0.6235294117647059
User 77167 AUC after training: 0.6236974789915967
User 77167 improves AUC. Keeping the model.
Training on augumented user 104845 38/50 current_auc = 0.6236974789915967
User 104845 AUC after training: 0.6236134453781513
User 104845 does not improve AUC. Reverting changes.
Training on augumented user 22180 39/50 current_auc = 0.6236974789915967
User 22180 AUC after training: 0.6232773109243698
User 22180 does not improve AUC. Reverting changes.
Training on augumented user 32616 40/50 current_auc = 0.6236974789915967
User 32616 AUC after training: 0.623109243697479
User 32616 does not improve AUC. Reverting changes.
Training on augumented user 130859 41/50 current_auc = 0.6236974789915967
User 130859 AUC after training: 0.623361344537815
User 130859 does not improve AUC. Reverting changes.
Training on augumented user 138051 42/50 current_auc = 0.6236974789915967
User 138051 AUC after training: 0.6231932773109243
User 138051 does not improve AUC. Reverting changes.
Training on augumented user 122888 43/50 current_auc = 0.6236974789915967
User 122888 AUC after training: 0.6240336134453782
User 122888 improves AUC. Keeping the model.
Training on augumented user 40520 44/50 current_auc = 0.6240336134453782
User 40520 AUC after training: 0.6240336134453782
User 40520 does not improve AUC. Reverting changes.
Training on augumented user 66688 45/50 current_auc = 0.6240336134453782
User 66688 AUC after training: 0.6243697478991597
User 66688 improves AUC. Keeping the model.
Training on augumented user 95914 46/50 current_auc = 0.6243697478991597
User 95914 AUC after training: 0.6232773109243698
User 95914 does not improve AUC. Reverting changes.
Training on augumented user 107394 47/50 current_auc = 0.6243697478991597
User 107394 AUC after training: 0.6244537815126051
User 107394 improves AUC. Keeping the model.
Training on augumented user 72164 48/50 current_auc = 0.6244537815126051
User 72164 AUC after training: 0.6246218487394958
User 72164 improves AUC. Keeping the model.
Training on augumented user 32960 49/50 current_auc = 0.6246218487394958
User 32960 AUC after training: 0.6244537815126049
User 32960 does not improve AUC. Reverting changes.
[2024-12-02 18:58:46.987379] start test user 59414 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:47.709938] start test user 59414 148/568 recall augumented users by random, augumented_users = [16855, 47487, 22601, 127693, 89455, 136166, 108271, 64362, 55584, 79555, 15402, 129669, 107788, 103666, 80947, 80744, 19365, 16470, 39995, 7810, 98481, 12682, 71215, 129687, 47815, 88574, 34093, 114921, 33157, 66088, 2524, 15364, 34192, 107810, 66545, 91834, 136957, 28770, 74027, 120599, 125538, 104058, 78321, 93361, 74105, 27713, 75413, 120337, 108747, 43705]
[2024-12-02 18:58:47.748479] user = 59414 Cloud 148/568
[2024-12-02 18:58:47.972952] user = 59414 Local 148/568
[2024-12-02 18:58:48.276269] user = 59414 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:51.131824] user = 59414 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5454544019199192
Training on augumented user 16855 0/50 current_auc = 0.5454544019199192
User 16855 AUC after training: 0.5456786030061892
User 16855 improves AUC. Keeping the model.
Training on augumented user 47487 1/50 current_auc = 0.5456786030061892
User 47487 AUC after training: 0.5458507010231148
User 47487 improves AUC. Keeping the model.
Training on augumented user 22601 2/50 current_auc = 0.5458507010231148
User 22601 AUC after training: 0.5453123026398888
User 22601 does not improve AUC. Reverting changes.
Training on augumented user 127693 3/50 current_auc = 0.5458507010231148
User 127693 AUC after training: 0.5459612226853606
User 127693 improves AUC. Keeping the model.
Training on augumented user 89455 4/50 current_auc = 0.5459612226853606
User 89455 AUC after training: 0.5462106858658583
User 89455 improves AUC. Keeping the model.
Training on augumented user 136166 5/50 current_auc = 0.5462106858658583
User 136166 AUC after training: 0.5467443476064167
User 136166 improves AUC. Keeping the model.
Training on augumented user 108271 6/50 current_auc = 0.5467443476064167
User 108271 AUC after training: 0.5462864721485412
User 108271 does not improve AUC. Reverting changes.
Training on augumented user 64362 7/50 current_auc = 0.5467443476064167
User 64362 AUC after training: 0.5461696349627384
User 64362 does not improve AUC. Reverting changes.
Training on augumented user 55584 8/50 current_auc = 0.5467443476064167
User 55584 AUC after training: 0.5468359226979917
User 55584 improves AUC. Keeping the model.
Training on augumented user 79555 9/50 current_auc = 0.5468359226979917
User 79555 AUC after training: 0.5471627510420614
User 79555 improves AUC. Keeping the model.
Training on augumented user 15402 10/50 current_auc = 0.5471627510420614
User 15402 AUC after training: 0.547446949602122
User 15402 improves AUC. Keeping the model.
Training on augumented user 129669 11/50 current_auc = 0.547446949602122
User 129669 AUC after training: 0.546425413666793
User 129669 does not improve AUC. Reverting changes.
Training on augumented user 107788 12/50 current_auc = 0.547446949602122
User 107788 AUC after training: 0.5479442970822281
User 107788 improves AUC. Keeping the model.
Training on augumented user 103666 13/50 current_auc = 0.5479442970822281
User 103666 AUC after training: 0.5474643172919036
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 80947 14/50 current_auc = 0.5479442970822281
User 80947 AUC after training: 0.5478495642288745
User 80947 does not improve AUC. Reverting changes.
Training on augumented user 80744 15/50 current_auc = 0.5479442970822281
User 80744 AUC after training: 0.5476537829986106
User 80744 does not improve AUC. Reverting changes.
Training on augumented user 19365 16/50 current_auc = 0.5479442970822281
User 19365 AUC after training: 0.5480074523177971
User 19365 improves AUC. Keeping the model.
Training on augumented user 16470 17/50 current_auc = 0.5480074523177971
User 16470 AUC after training: 0.5484148035872174
User 16470 improves AUC. Keeping the model.
Training on augumented user 39995 18/50 current_auc = 0.5484148035872174
User 39995 AUC after training: 0.5482411266894026
User 39995 does not improve AUC. Reverting changes.
Training on augumented user 7810 19/50 current_auc = 0.5484148035872174
User 7810 AUC after training: 0.5482600732600732
User 7810 does not improve AUC. Reverting changes.
Training on augumented user 98481 20/50 current_auc = 0.5484148035872174
User 98481 AUC after training: 0.5485126942023494
User 98481 improves AUC. Keeping the model.
Training on augumented user 12682 21/50 current_auc = 0.5485126942023494
User 12682 AUC after training: 0.5483263862574207
User 12682 does not improve AUC. Reverting changes.
Training on augumented user 71215 22/50 current_auc = 0.5485126942023494
User 71215 AUC after training: 0.5484116458254389
User 71215 does not improve AUC. Reverting changes.
Training on augumented user 129687 23/50 current_auc = 0.5485126942023494
User 129687 AUC after training: 0.5481069218138184
User 129687 does not improve AUC. Reverting changes.
Training on augumented user 47815 24/50 current_auc = 0.5485126942023494
User 47815 AUC after training: 0.5475937855248201
User 47815 does not improve AUC. Reverting changes.
Training on augumented user 88574 25/50 current_auc = 0.5485126942023494
User 88574 AUC after training: 0.548509536440571
User 88574 does not improve AUC. Reverting changes.
Training on augumented user 34093 26/50 current_auc = 0.5485126942023494
User 34093 AUC after training: 0.5483579638752053
User 34093 does not improve AUC. Reverting changes.
Training on augumented user 114921 27/50 current_auc = 0.5485126942023494
User 114921 AUC after training: 0.5483042819249715
User 114921 does not improve AUC. Reverting changes.
Training on augumented user 33157 28/50 current_auc = 0.5485126942023494
User 33157 AUC after training: 0.5486169003410383
User 33157 improves AUC. Keeping the model.
Training on augumented user 66088 29/50 current_auc = 0.5486169003410383
User 66088 AUC after training: 0.5462012125805229
User 66088 does not improve AUC. Reverting changes.
Training on augumented user 2524 30/50 current_auc = 0.5486169003410383
User 2524 AUC after training: 0.5485284830112416
User 2524 does not improve AUC. Reverting changes.
Training on augumented user 15364 31/50 current_auc = 0.5486169003410383
User 15364 AUC after training: 0.5477437792092965
User 15364 does not improve AUC. Reverting changes.
Training on augumented user 34192 32/50 current_auc = 0.5486169003410383
User 34192 AUC after training: 0.548803208285967
User 34192 improves AUC. Keeping the model.
Training on augumented user 107810 33/50 current_auc = 0.548803208285967
User 107810 AUC after training: 0.5487368952886195
User 107810 does not improve AUC. Reverting changes.
Training on augumented user 66545 34/50 current_auc = 0.548803208285967
User 66545 AUC after training: 0.5486547934823797
User 66545 does not improve AUC. Reverting changes.
Training on augumented user 91834 35/50 current_auc = 0.548803208285967
User 91834 AUC after training: 0.5484874321081218
User 91834 does not improve AUC. Reverting changes.
Training on augumented user 136957 36/50 current_auc = 0.548803208285967
User 136957 AUC after training: 0.5464964633068081
User 136957 does not improve AUC. Reverting changes.
Training on augumented user 28770 37/50 current_auc = 0.548803208285967
User 28770 AUC after training: 0.5486768978148289
User 28770 does not improve AUC. Reverting changes.
Training on augumented user 74027 38/50 current_auc = 0.548803208285967
User 74027 AUC after training: 0.5489326765188833
User 74027 improves AUC. Keeping the model.
Training on augumented user 120599 39/50 current_auc = 0.5489326765188833
User 120599 AUC after training: 0.5490874068460275
User 120599 improves AUC. Keeping the model.
Training on augumented user 125538 40/50 current_auc = 0.5490874068460275
User 125538 AUC after training: 0.54902109384868
User 125538 does not improve AUC. Reverting changes.
Training on augumented user 104058 41/50 current_auc = 0.5490874068460275
User 104058 AUC after training: 0.5489705696602248
User 104058 does not improve AUC. Reverting changes.
Training on augumented user 78321 42/50 current_auc = 0.5490874068460275
User 78321 AUC after training: 0.548768472906404
User 78321 does not improve AUC. Reverting changes.
Training on augumented user 93361 43/50 current_auc = 0.5490874068460275
User 93361 AUC after training: 0.5488189970948592
User 93361 does not improve AUC. Reverting changes.
Training on augumented user 74105 44/50 current_auc = 0.5490874068460275
User 74105 AUC after training: 0.5484479600858911
User 74105 does not improve AUC. Reverting changes.
Training on augumented user 27713 45/50 current_auc = 0.5490874068460275
User 27713 AUC after training: 0.549055829228243
User 27713 does not improve AUC. Reverting changes.
Training on augumented user 75413 46/50 current_auc = 0.5490874068460275
User 75413 AUC after training: 0.5489342553997726
User 75413 does not improve AUC. Reverting changes.
Training on augumented user 120337 47/50 current_auc = 0.5490874068460275
User 120337 AUC after training: 0.5486642667677151
User 120337 does not improve AUC. Reverting changes.
Training on augumented user 108747 48/50 current_auc = 0.5490874068460275
User 108747 AUC after training: 0.5491474043198181
User 108747 improves AUC. Keeping the model.
Training on augumented user 43705 49/50 current_auc = 0.5491474043198181
User 43705 AUC after training: 0.5491158267020336
User 43705 does not improve AUC. Reverting changes.
[2024-12-02 18:59:31.112459] start test user 59447 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:31.588450] start test user 59447 149/568 recall augumented users by random, augumented_users = [105875, 11341, 3698, 63161, 40379, 50822, 20506, 91388, 50415, 34100, 15796, 88970, 41879, 64564, 22970, 39514, 37306, 14003, 61835, 60032, 88329, 18044, 16301, 90341, 99918, 82876, 53501, 65602, 76399, 44535, 69925, 92733, 32226, 28173, 53649, 37165, 135867, 63124, 125908, 75161, 68756, 87046, 37011, 126128, 121232, 62880, 126535, 118617, 6849, 61409]
[2024-12-02 18:59:31.604158] user = 59447 Cloud 149/568
[2024-12-02 18:59:31.626467] user = 59447 Local 149/568
[2024-12-02 18:59:31.695770] user = 59447 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:33.333205] user = 59447 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7061965811965812
Training on augumented user 105875 0/50 current_auc = 0.7061965811965812
User 105875 AUC after training: 0.7073412698412699
User 105875 improves AUC. Keeping the model.
Training on augumented user 11341 1/50 current_auc = 0.7073412698412699
User 11341 AUC after training: 0.7068833943833943
User 11341 does not improve AUC. Reverting changes.
Training on augumented user 3698 2/50 current_auc = 0.7073412698412699
User 3698 AUC after training: 0.7069597069597069
User 3698 does not improve AUC. Reverting changes.
Training on augumented user 63161 3/50 current_auc = 0.7073412698412699
User 63161 AUC after training: 0.707226800976801
User 63161 does not improve AUC. Reverting changes.
Training on augumented user 40379 4/50 current_auc = 0.7073412698412699
User 40379 AUC after training: 0.706043956043956
User 40379 does not improve AUC. Reverting changes.
Training on augumented user 50822 5/50 current_auc = 0.7073412698412699
User 50822 AUC after training: 0.7071123321123322
User 50822 does not improve AUC. Reverting changes.
Training on augumented user 20506 6/50 current_auc = 0.7073412698412699
User 20506 AUC after training: 0.705242673992674
User 20506 does not improve AUC. Reverting changes.
Training on augumented user 91388 7/50 current_auc = 0.7073412698412699
User 91388 AUC after training: 0.707493894993895
User 91388 improves AUC. Keeping the model.
Training on augumented user 50415 8/50 current_auc = 0.707493894993895
User 50415 AUC after training: 0.7057005494505495
User 50415 does not improve AUC. Reverting changes.
Training on augumented user 34100 9/50 current_auc = 0.707493894993895
User 34100 AUC after training: 0.708028083028083
User 34100 improves AUC. Keeping the model.
Training on augumented user 15796 10/50 current_auc = 0.708028083028083
User 15796 AUC after training: 0.706578144078144
User 15796 does not improve AUC. Reverting changes.
Training on augumented user 88970 11/50 current_auc = 0.708028083028083
User 88970 AUC after training: 0.7081043956043956
User 88970 improves AUC. Keeping the model.
Training on augumented user 41879 12/50 current_auc = 0.7081043956043956
User 41879 AUC after training: 0.7083333333333333
User 41879 improves AUC. Keeping the model.
Training on augumented user 64564 13/50 current_auc = 0.7083333333333333
User 64564 AUC after training: 0.7048992673992674
User 64564 does not improve AUC. Reverting changes.
Training on augumented user 22970 14/50 current_auc = 0.7083333333333333
User 22970 AUC after training: 0.7090201465201464
User 22970 improves AUC. Keeping the model.
Training on augumented user 39514 15/50 current_auc = 0.7090201465201464
User 39514 AUC after training: 0.7090583028083028
User 39514 improves AUC. Keeping the model.
Training on augumented user 37306 16/50 current_auc = 0.7090583028083028
User 37306 AUC after training: 0.707226800976801
User 37306 does not improve AUC. Reverting changes.
Training on augumented user 14003 17/50 current_auc = 0.7090583028083028
User 14003 AUC after training: 0.7105463980463981
User 14003 improves AUC. Keeping the model.
Training on augumented user 61835 18/50 current_auc = 0.7105463980463981
User 61835 AUC after training: 0.7080662393162392
User 61835 does not improve AUC. Reverting changes.
Training on augumented user 60032 19/50 current_auc = 0.7105463980463981
User 60032 AUC after training: 0.7106227106227105
User 60032 improves AUC. Keeping the model.
Training on augumented user 88329 20/50 current_auc = 0.7106227106227105
User 88329 AUC after training: 0.7096688034188033
User 88329 does not improve AUC. Reverting changes.
Training on augumented user 18044 21/50 current_auc = 0.7106227106227105
User 18044 AUC after training: 0.708562271062271
User 18044 does not improve AUC. Reverting changes.
Training on augumented user 16301 22/50 current_auc = 0.7106227106227105
User 16301 AUC after training: 0.7069597069597069
User 16301 does not improve AUC. Reverting changes.
Training on augumented user 90341 23/50 current_auc = 0.7106227106227105
User 90341 AUC after training: 0.708409645909646
User 90341 does not improve AUC. Reverting changes.
Training on augumented user 99918 24/50 current_auc = 0.7106227106227105
User 99918 AUC after training: 0.7092490842490843
User 99918 does not improve AUC. Reverting changes.
Training on augumented user 82876 25/50 current_auc = 0.7106227106227105
User 82876 AUC after training: 0.7099358974358974
User 82876 does not improve AUC. Reverting changes.
Training on augumented user 53501 26/50 current_auc = 0.7106227106227105
User 53501 AUC after training: 0.7056623931623931
User 53501 does not improve AUC. Reverting changes.
Training on augumented user 65602 27/50 current_auc = 0.7106227106227105
User 65602 AUC after training: 0.7108516483516484
User 65602 improves AUC. Keeping the model.
Training on augumented user 76399 28/50 current_auc = 0.7108516483516484
User 76399 AUC after training: 0.7100885225885225
User 76399 does not improve AUC. Reverting changes.
Training on augumented user 44535 29/50 current_auc = 0.7108516483516484
User 44535 AUC after training: 0.7120726495726496
User 44535 improves AUC. Keeping the model.
Training on augumented user 69925 30/50 current_auc = 0.7120726495726496
User 69925 AUC after training: 0.7115384615384616
User 69925 does not improve AUC. Reverting changes.
Training on augumented user 92733 31/50 current_auc = 0.7120726495726496
User 92733 AUC after training: 0.7121108058608059
User 92733 improves AUC. Keeping the model.
Training on augumented user 32226 32/50 current_auc = 0.7121108058608059
User 32226 AUC after training: 0.7116529304029304
User 32226 does not improve AUC. Reverting changes.
Training on augumented user 28173 33/50 current_auc = 0.7121108058608059
User 28173 AUC after training: 0.7098214285714286
User 28173 does not improve AUC. Reverting changes.
Training on augumented user 53649 34/50 current_auc = 0.7121108058608059
User 53649 AUC after training: 0.7115003052503053
User 53649 does not improve AUC. Reverting changes.
Training on augumented user 37165 35/50 current_auc = 0.7121108058608059
User 37165 AUC after training: 0.7116147741147741
User 37165 does not improve AUC. Reverting changes.
Training on augumented user 135867 36/50 current_auc = 0.7121108058608059
User 135867 AUC after training: 0.7111568986568986
User 135867 does not improve AUC. Reverting changes.
Training on augumented user 63124 37/50 current_auc = 0.7121108058608059
User 63124 AUC after training: 0.7113858363858363
User 63124 does not improve AUC. Reverting changes.
Training on augumented user 125908 38/50 current_auc = 0.7121108058608059
User 125908 AUC after training: 0.7113095238095237
User 125908 does not improve AUC. Reverting changes.
Training on augumented user 75161 39/50 current_auc = 0.7121108058608059
User 75161 AUC after training: 0.7115766178266179
User 75161 does not improve AUC. Reverting changes.
Training on augumented user 68756 40/50 current_auc = 0.7121108058608059
User 68756 AUC after training: 0.7121871184371185
User 68756 improves AUC. Keeping the model.
Training on augumented user 87046 41/50 current_auc = 0.7121871184371185
User 87046 AUC after training: 0.710927960927961
User 87046 does not improve AUC. Reverting changes.
Training on augumented user 37011 42/50 current_auc = 0.7121871184371185
User 37011 AUC after training: 0.7115003052503052
User 37011 does not improve AUC. Reverting changes.
Training on augumented user 126128 43/50 current_auc = 0.7121871184371185
User 126128 AUC after training: 0.7113858363858363
User 126128 does not improve AUC. Reverting changes.
Training on augumented user 121232 44/50 current_auc = 0.7121871184371185
User 121232 AUC after training: 0.7122252747252746
User 121232 improves AUC. Keeping the model.
Training on augumented user 62880 45/50 current_auc = 0.7122252747252746
User 62880 AUC after training: 0.711462148962149
User 62880 does not improve AUC. Reverting changes.
Training on augumented user 126535 46/50 current_auc = 0.7122252747252746
User 126535 AUC after training: 0.7124542124542124
User 126535 improves AUC. Keeping the model.
Training on augumented user 118617 47/50 current_auc = 0.7124542124542124
User 118617 AUC after training: 0.7115766178266179
User 118617 does not improve AUC. Reverting changes.
Training on augumented user 6849 48/50 current_auc = 0.7124542124542124
User 6849 AUC after training: 0.7115384615384616
User 6849 does not improve AUC. Reverting changes.
Training on augumented user 61409 49/50 current_auc = 0.7124542124542124
User 61409 AUC after training: 0.7103937728937729
User 61409 does not improve AUC. Reverting changes.
[2024-12-02 19:00:02.543783] start test user 59466 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:03.065900] start test user 59466 150/568 recall augumented users by random, augumented_users = [68742, 18466, 69472, 61729, 1394, 93683, 98690, 111728, 73824, 89298, 24076, 126031, 7555, 96589, 11444, 111038, 1208, 134301, 79979, 23873, 58331, 109040, 94124, 108652, 105627, 41867, 59246, 67432, 119076, 21149, 68739, 373, 37538, 111816, 86719, 92758, 129373, 11243, 81735, 103172, 72210, 23933, 131432, 50141, 74855, 89460, 123355, 33300, 26462, 4861]
[2024-12-02 19:00:03.080985] user = 59466 Cloud 150/568
[2024-12-02 19:00:03.103775] user = 59466 Local 150/568
[2024-12-02 19:00:03.197423] user = 59466 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:06.742358] user = 59466 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 68742 0/50 current_auc = 0.0
User 68742 AUC after training: 0.0
User 68742 does not improve AUC. Reverting changes.
Training on augumented user 18466 1/50 current_auc = 0.0
User 18466 AUC after training: 0.0
User 18466 does not improve AUC. Reverting changes.
Training on augumented user 69472 2/50 current_auc = 0.0
User 69472 AUC after training: 0.0
User 69472 does not improve AUC. Reverting changes.
Training on augumented user 61729 3/50 current_auc = 0.0
User 61729 AUC after training: 0.0
User 61729 does not improve AUC. Reverting changes.
Training on augumented user 1394 4/50 current_auc = 0.0
User 1394 AUC after training: 0.0
User 1394 does not improve AUC. Reverting changes.
Training on augumented user 93683 5/50 current_auc = 0.0
User 93683 AUC after training: 0.0
User 93683 does not improve AUC. Reverting changes.
Training on augumented user 98690 6/50 current_auc = 0.0
User 98690 AUC after training: 0.0
User 98690 does not improve AUC. Reverting changes.
Training on augumented user 111728 7/50 current_auc = 0.0
User 111728 AUC after training: 0.0
User 111728 does not improve AUC. Reverting changes.
Training on augumented user 73824 8/50 current_auc = 0.0
User 73824 AUC after training: 0.0
User 73824 does not improve AUC. Reverting changes.
Training on augumented user 89298 9/50 current_auc = 0.0
User 89298 AUC after training: 0.0
User 89298 does not improve AUC. Reverting changes.
Training on augumented user 24076 10/50 current_auc = 0.0
User 24076 AUC after training: 0.0
User 24076 does not improve AUC. Reverting changes.
Training on augumented user 126031 11/50 current_auc = 0.0
User 126031 AUC after training: 0.0
User 126031 does not improve AUC. Reverting changes.
Training on augumented user 7555 12/50 current_auc = 0.0
User 7555 AUC after training: 0.0
User 7555 does not improve AUC. Reverting changes.
Training on augumented user 96589 13/50 current_auc = 0.0
User 96589 AUC after training: 0.0
User 96589 does not improve AUC. Reverting changes.
Training on augumented user 11444 14/50 current_auc = 0.0
User 11444 AUC after training: 0.0
User 11444 does not improve AUC. Reverting changes.
Training on augumented user 111038 15/50 current_auc = 0.0
User 111038 AUC after training: 0.0
User 111038 does not improve AUC. Reverting changes.
Training on augumented user 1208 16/50 current_auc = 0.0
User 1208 AUC after training: 0.0
User 1208 does not improve AUC. Reverting changes.
Training on augumented user 134301 17/50 current_auc = 0.0
User 134301 AUC after training: 0.0
User 134301 does not improve AUC. Reverting changes.
Training on augumented user 79979 18/50 current_auc = 0.0
User 79979 AUC after training: 0.0
User 79979 does not improve AUC. Reverting changes.
Training on augumented user 23873 19/50 current_auc = 0.0
User 23873 AUC after training: 0.0
User 23873 does not improve AUC. Reverting changes.
Training on augumented user 58331 20/50 current_auc = 0.0
User 58331 AUC after training: 0.0
User 58331 does not improve AUC. Reverting changes.
Training on augumented user 109040 21/50 current_auc = 0.0
User 109040 AUC after training: 0.0
User 109040 does not improve AUC. Reverting changes.
Training on augumented user 94124 22/50 current_auc = 0.0
User 94124 AUC after training: 0.0
User 94124 does not improve AUC. Reverting changes.
Training on augumented user 108652 23/50 current_auc = 0.0
User 108652 AUC after training: 0.0
User 108652 does not improve AUC. Reverting changes.
Training on augumented user 105627 24/50 current_auc = 0.0
User 105627 AUC after training: 0.0
User 105627 does not improve AUC. Reverting changes.
Training on augumented user 41867 25/50 current_auc = 0.0
User 41867 AUC after training: 0.0
User 41867 does not improve AUC. Reverting changes.
Training on augumented user 59246 26/50 current_auc = 0.0
User 59246 AUC after training: 0.0
User 59246 does not improve AUC. Reverting changes.
Training on augumented user 67432 27/50 current_auc = 0.0
User 67432 AUC after training: 0.0
User 67432 does not improve AUC. Reverting changes.
Training on augumented user 119076 28/50 current_auc = 0.0
User 119076 AUC after training: 0.0
User 119076 does not improve AUC. Reverting changes.
Training on augumented user 21149 29/50 current_auc = 0.0
User 21149 AUC after training: 0.0
User 21149 does not improve AUC. Reverting changes.
Training on augumented user 68739 30/50 current_auc = 0.0
User 68739 AUC after training: 0.0
User 68739 does not improve AUC. Reverting changes.
Training on augumented user 373 31/50 current_auc = 0.0
User 373 AUC after training: 0.0
User 373 does not improve AUC. Reverting changes.
Training on augumented user 37538 32/50 current_auc = 0.0
User 37538 AUC after training: 0.0
User 37538 does not improve AUC. Reverting changes.
Training on augumented user 111816 33/50 current_auc = 0.0
User 111816 AUC after training: 0.0
User 111816 does not improve AUC. Reverting changes.
Training on augumented user 86719 34/50 current_auc = 0.0
User 86719 AUC after training: 0.0
User 86719 does not improve AUC. Reverting changes.
Training on augumented user 92758 35/50 current_auc = 0.0
User 92758 AUC after training: 0.0
User 92758 does not improve AUC. Reverting changes.
Training on augumented user 129373 36/50 current_auc = 0.0
User 129373 AUC after training: 0.0
User 129373 does not improve AUC. Reverting changes.
Training on augumented user 11243 37/50 current_auc = 0.0
User 11243 AUC after training: 0.0
User 11243 does not improve AUC. Reverting changes.
Training on augumented user 81735 38/50 current_auc = 0.0
User 81735 AUC after training: 0.0
User 81735 does not improve AUC. Reverting changes.
Training on augumented user 103172 39/50 current_auc = 0.0
User 103172 AUC after training: 0.0
User 103172 does not improve AUC. Reverting changes.
Training on augumented user 72210 40/50 current_auc = 0.0
User 72210 AUC after training: 0.0
User 72210 does not improve AUC. Reverting changes.
Training on augumented user 23933 41/50 current_auc = 0.0
User 23933 AUC after training: 0.0
User 23933 does not improve AUC. Reverting changes.
Training on augumented user 131432 42/50 current_auc = 0.0
User 131432 AUC after training: 0.0
User 131432 does not improve AUC. Reverting changes.
Training on augumented user 50141 43/50 current_auc = 0.0
User 50141 AUC after training: 0.0
User 50141 does not improve AUC. Reverting changes.
Training on augumented user 74855 44/50 current_auc = 0.0
User 74855 AUC after training: 0.0
User 74855 does not improve AUC. Reverting changes.
Training on augumented user 89460 45/50 current_auc = 0.0
User 89460 AUC after training: 0.0
User 89460 does not improve AUC. Reverting changes.
Training on augumented user 123355 46/50 current_auc = 0.0
User 123355 AUC after training: 0.0
User 123355 does not improve AUC. Reverting changes.
Training on augumented user 33300 47/50 current_auc = 0.0
User 33300 AUC after training: 0.0
User 33300 does not improve AUC. Reverting changes.
Training on augumented user 26462 48/50 current_auc = 0.0
User 26462 AUC after training: 0.0
User 26462 does not improve AUC. Reverting changes.
Training on augumented user 4861 49/50 current_auc = 0.0
User 4861 AUC after training: 0.0
User 4861 does not improve AUC. Reverting changes.
[2024-12-02 19:00:33.881305] start test user 59477 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:34.359609] start test user 59477 151/568 recall augumented users by random, augumented_users = [30575, 69392, 133758, 52235, 127244, 41940, 114715, 19659, 1294, 10262, 68744, 110112, 50540, 65283, 34443, 114445, 133206, 130897, 102146, 133663, 112472, 66957, 92717, 49003, 67722, 103363, 100219, 58716, 30095, 89614, 87936, 39423, 38174, 81180, 95976, 117775, 73817, 6661, 133006, 20152, 104988, 91087, 87051, 2390, 4394, 98486, 14688, 125883, 49566, 111780]
[2024-12-02 19:00:34.383783] user = 59477 Cloud 151/568
[2024-12-02 19:00:34.513314] user = 59477 Local 151/568
[2024-12-02 19:00:35.433771] user = 59477 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:37.940130] user = 59477 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6356410256410256
Training on augumented user 30575 0/50 current_auc = 0.6356410256410256
User 30575 AUC after training: 0.6353589743589744
User 30575 does not improve AUC. Reverting changes.
Training on augumented user 69392 1/50 current_auc = 0.6356410256410256
User 69392 AUC after training: 0.6355384615384615
User 69392 does not improve AUC. Reverting changes.
Training on augumented user 133758 2/50 current_auc = 0.6356410256410256
User 133758 AUC after training: 0.6353076923076924
User 133758 does not improve AUC. Reverting changes.
Training on augumented user 52235 3/50 current_auc = 0.6356410256410256
User 52235 AUC after training: 0.6359743589743589
User 52235 improves AUC. Keeping the model.
Training on augumented user 127244 4/50 current_auc = 0.6359743589743589
User 127244 AUC after training: 0.6353076923076922
User 127244 does not improve AUC. Reverting changes.
Training on augumented user 41940 5/50 current_auc = 0.6359743589743589
User 41940 AUC after training: 0.635897435897436
User 41940 does not improve AUC. Reverting changes.
Training on augumented user 114715 6/50 current_auc = 0.6359743589743589
User 114715 AUC after training: 0.636025641025641
User 114715 improves AUC. Keeping the model.
Training on augumented user 19659 7/50 current_auc = 0.636025641025641
User 19659 AUC after training: 0.6357179487179487
User 19659 does not improve AUC. Reverting changes.
Training on augumented user 1294 8/50 current_auc = 0.636025641025641
User 1294 AUC after training: 0.636102564102564
User 1294 improves AUC. Keeping the model.
Training on augumented user 10262 9/50 current_auc = 0.636102564102564
User 10262 AUC after training: 0.6357692307692308
User 10262 does not improve AUC. Reverting changes.
Training on augumented user 68744 10/50 current_auc = 0.636102564102564
User 68744 AUC after training: 0.6373076923076922
User 68744 improves AUC. Keeping the model.
Training on augumented user 110112 11/50 current_auc = 0.6373076923076922
User 110112 AUC after training: 0.6375128205128205
User 110112 improves AUC. Keeping the model.
Training on augumented user 50540 12/50 current_auc = 0.6375128205128205
User 50540 AUC after training: 0.6374358974358975
User 50540 does not improve AUC. Reverting changes.
Training on augumented user 65283 13/50 current_auc = 0.6375128205128205
User 65283 AUC after training: 0.6377692307692308
User 65283 improves AUC. Keeping the model.
Training on augumented user 34443 14/50 current_auc = 0.6377692307692308
User 34443 AUC after training: 0.6380641025641025
User 34443 improves AUC. Keeping the model.
Training on augumented user 114445 15/50 current_auc = 0.6380641025641025
User 114445 AUC after training: 0.6367948717948718
User 114445 does not improve AUC. Reverting changes.
Training on augumented user 133206 16/50 current_auc = 0.6380641025641025
User 133206 AUC after training: 0.6374102564102564
User 133206 does not improve AUC. Reverting changes.
Training on augumented user 130897 17/50 current_auc = 0.6380641025641025
User 130897 AUC after training: 0.6378205128205129
User 130897 does not improve AUC. Reverting changes.
Training on augumented user 102146 18/50 current_auc = 0.6380641025641025
User 102146 AUC after training: 0.6382307692307692
User 102146 improves AUC. Keeping the model.
Training on augumented user 133663 19/50 current_auc = 0.6382307692307692
User 133663 AUC after training: 0.6376923076923077
User 133663 does not improve AUC. Reverting changes.
Training on augumented user 112472 20/50 current_auc = 0.6382307692307692
User 112472 AUC after training: 0.6387179487179487
User 112472 improves AUC. Keeping the model.
Training on augumented user 66957 21/50 current_auc = 0.6387179487179487
User 66957 AUC after training: 0.6386153846153846
User 66957 does not improve AUC. Reverting changes.
Training on augumented user 92717 22/50 current_auc = 0.6387179487179487
User 92717 AUC after training: 0.6388717948717949
User 92717 improves AUC. Keeping the model.
Training on augumented user 49003 23/50 current_auc = 0.6388717948717949
User 49003 AUC after training: 0.6388205128205128
User 49003 does not improve AUC. Reverting changes.
Training on augumented user 67722 24/50 current_auc = 0.6388717948717949
User 67722 AUC after training: 0.6392820512820513
User 67722 improves AUC. Keeping the model.
Training on augumented user 103363 25/50 current_auc = 0.6392820512820513
User 103363 AUC after training: 0.640025641025641
User 103363 improves AUC. Keeping the model.
Training on augumented user 100219 26/50 current_auc = 0.640025641025641
User 100219 AUC after training: 0.6402820512820513
User 100219 improves AUC. Keeping the model.
Training on augumented user 58716 27/50 current_auc = 0.6402820512820513
User 58716 AUC after training: 0.6401282051282051
User 58716 does not improve AUC. Reverting changes.
Training on augumented user 30095 28/50 current_auc = 0.6402820512820513
User 30095 AUC after training: 0.6411025641025642
User 30095 improves AUC. Keeping the model.
Training on augumented user 89614 29/50 current_auc = 0.6411025641025642
User 89614 AUC after training: 0.6408461538461538
User 89614 does not improve AUC. Reverting changes.
Training on augumented user 87936 30/50 current_auc = 0.6411025641025642
User 87936 AUC after training: 0.6412307692307693
User 87936 improves AUC. Keeping the model.
Training on augumented user 39423 31/50 current_auc = 0.6412307692307693
User 39423 AUC after training: 0.6419230769230769
User 39423 improves AUC. Keeping the model.
Training on augumented user 38174 32/50 current_auc = 0.6419230769230769
User 38174 AUC after training: 0.640974358974359
User 38174 does not improve AUC. Reverting changes.
Training on augumented user 81180 33/50 current_auc = 0.6419230769230769
User 81180 AUC after training: 0.6418717948717948
User 81180 does not improve AUC. Reverting changes.
Training on augumented user 95976 34/50 current_auc = 0.6419230769230769
User 95976 AUC after training: 0.6413589743589744
User 95976 does not improve AUC. Reverting changes.
Training on augumented user 117775 35/50 current_auc = 0.6419230769230769
User 117775 AUC after training: 0.6413846153846153
User 117775 does not improve AUC. Reverting changes.
Training on augumented user 73817 36/50 current_auc = 0.6419230769230769
User 73817 AUC after training: 0.6405384615384616
User 73817 does not improve AUC. Reverting changes.
Training on augumented user 6661 37/50 current_auc = 0.6419230769230769
User 6661 AUC after training: 0.642051282051282
User 6661 improves AUC. Keeping the model.
Training on augumented user 133006 38/50 current_auc = 0.642051282051282
User 133006 AUC after training: 0.6418461538461538
User 133006 does not improve AUC. Reverting changes.
Training on augumented user 20152 39/50 current_auc = 0.642051282051282
User 20152 AUC after training: 0.6422820512820513
User 20152 improves AUC. Keeping the model.
Training on augumented user 104988 40/50 current_auc = 0.6422820512820513
User 104988 AUC after training: 0.6416923076923077
User 104988 does not improve AUC. Reverting changes.
Training on augumented user 91087 41/50 current_auc = 0.6422820512820513
User 91087 AUC after training: 0.6419487179487179
User 91087 does not improve AUC. Reverting changes.
Training on augumented user 87051 42/50 current_auc = 0.6422820512820513
User 87051 AUC after training: 0.6415128205128204
User 87051 does not improve AUC. Reverting changes.
Training on augumented user 2390 43/50 current_auc = 0.6422820512820513
User 2390 AUC after training: 0.641897435897436
User 2390 does not improve AUC. Reverting changes.
Training on augumented user 4394 44/50 current_auc = 0.6422820512820513
User 4394 AUC after training: 0.6411538461538461
User 4394 does not improve AUC. Reverting changes.
Training on augumented user 98486 45/50 current_auc = 0.6422820512820513
User 98486 AUC after training: 0.6422051282051282
User 98486 does not improve AUC. Reverting changes.
Training on augumented user 14688 46/50 current_auc = 0.6422820512820513
User 14688 AUC after training: 0.6421794871794871
User 14688 does not improve AUC. Reverting changes.
Training on augumented user 125883 47/50 current_auc = 0.6422820512820513
User 125883 AUC after training: 0.6422051282051282
User 125883 does not improve AUC. Reverting changes.
Training on augumented user 49566 48/50 current_auc = 0.6422820512820513
User 49566 AUC after training: 0.6419487179487179
User 49566 does not improve AUC. Reverting changes.
Training on augumented user 111780 49/50 current_auc = 0.6422820512820513
User 111780 AUC after training: 0.6419743589743591
User 111780 does not improve AUC. Reverting changes.
[2024-12-02 19:01:25.215410] start test user 59491 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:25.641322] start test user 59491 152/568 recall augumented users by random, augumented_users = [34236, 119562, 136609, 56518, 86559, 96688, 120553, 49160, 79644, 70821, 40946, 95499, 8102, 119472, 114892, 91115, 75066, 77746, 112228, 76791, 68774, 116925, 44256, 41272, 28960, 97370, 109660, 86255, 109802, 49001, 129964, 38765, 88887, 69915, 28888, 15571, 49542, 42175, 57359, 111653, 112452, 31344, 17479, 100767, 128771, 112589, 41284, 87280, 90582, 122122]
[2024-12-02 19:01:25.656452] user = 59491 Cloud 152/568
[2024-12-02 19:01:25.712996] user = 59491 Local 152/568
[2024-12-02 19:01:25.797341] user = 59491 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:28.569029] user = 59491 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.679425837320574
Training on augumented user 34236 0/50 current_auc = 0.679425837320574
User 34236 AUC after training: 0.6803827751196172
User 34236 improves AUC. Keeping the model.
Training on augumented user 119562 1/50 current_auc = 0.6803827751196172
User 119562 AUC after training: 0.684688995215311
User 119562 improves AUC. Keeping the model.
Training on augumented user 136609 2/50 current_auc = 0.684688995215311
User 136609 AUC after training: 0.684688995215311
User 136609 does not improve AUC. Reverting changes.
Training on augumented user 56518 3/50 current_auc = 0.684688995215311
User 56518 AUC after training: 0.6875598086124401
User 56518 improves AUC. Keeping the model.
Training on augumented user 86559 4/50 current_auc = 0.6875598086124401
User 86559 AUC after training: 0.684688995215311
User 86559 does not improve AUC. Reverting changes.
Training on augumented user 96688 5/50 current_auc = 0.6875598086124401
User 96688 AUC after training: 0.6885167464114832
User 96688 improves AUC. Keeping the model.
Training on augumented user 120553 6/50 current_auc = 0.6885167464114832
User 120553 AUC after training: 0.6885167464114832
User 120553 does not improve AUC. Reverting changes.
Training on augumented user 49160 7/50 current_auc = 0.6885167464114832
User 49160 AUC after training: 0.6885167464114832
User 49160 does not improve AUC. Reverting changes.
Training on augumented user 79644 8/50 current_auc = 0.6885167464114832
User 79644 AUC after training: 0.6885167464114832
User 79644 does not improve AUC. Reverting changes.
Training on augumented user 70821 9/50 current_auc = 0.6885167464114832
User 70821 AUC after training: 0.6875598086124401
User 70821 does not improve AUC. Reverting changes.
Training on augumented user 40946 10/50 current_auc = 0.6885167464114832
User 40946 AUC after training: 0.6866028708133972
User 40946 does not improve AUC. Reverting changes.
Training on augumented user 95499 11/50 current_auc = 0.6885167464114832
User 95499 AUC after training: 0.6875598086124401
User 95499 does not improve AUC. Reverting changes.
Training on augumented user 8102 12/50 current_auc = 0.6885167464114832
User 8102 AUC after training: 0.6818181818181818
User 8102 does not improve AUC. Reverting changes.
Training on augumented user 119472 13/50 current_auc = 0.6885167464114832
User 119472 AUC after training: 0.6885167464114832
User 119472 does not improve AUC. Reverting changes.
Training on augumented user 114892 14/50 current_auc = 0.6885167464114832
User 114892 AUC after training: 0.6875598086124401
User 114892 does not improve AUC. Reverting changes.
Training on augumented user 91115 15/50 current_auc = 0.6885167464114832
User 91115 AUC after training: 0.6885167464114832
User 91115 does not improve AUC. Reverting changes.
Training on augumented user 75066 16/50 current_auc = 0.6885167464114832
User 75066 AUC after training: 0.6856459330143541
User 75066 does not improve AUC. Reverting changes.
Training on augumented user 77746 17/50 current_auc = 0.6885167464114832
User 77746 AUC after training: 0.6856459330143541
User 77746 does not improve AUC. Reverting changes.
Training on augumented user 112228 18/50 current_auc = 0.6885167464114832
User 112228 AUC after training: 0.6885167464114832
User 112228 does not improve AUC. Reverting changes.
Training on augumented user 76791 19/50 current_auc = 0.6885167464114832
User 76791 AUC after training: 0.6885167464114832
User 76791 does not improve AUC. Reverting changes.
Training on augumented user 68774 20/50 current_auc = 0.6885167464114832
User 68774 AUC after training: 0.6856459330143541
User 68774 does not improve AUC. Reverting changes.
Training on augumented user 116925 21/50 current_auc = 0.6885167464114832
User 116925 AUC after training: 0.6885167464114832
User 116925 does not improve AUC. Reverting changes.
Training on augumented user 44256 22/50 current_auc = 0.6885167464114832
User 44256 AUC after training: 0.684688995215311
User 44256 does not improve AUC. Reverting changes.
Training on augumented user 41272 23/50 current_auc = 0.6885167464114832
User 41272 AUC after training: 0.6875598086124401
User 41272 does not improve AUC. Reverting changes.
Training on augumented user 28960 24/50 current_auc = 0.6885167464114832
User 28960 AUC after training: 0.6837320574162679
User 28960 does not improve AUC. Reverting changes.
Training on augumented user 97370 25/50 current_auc = 0.6885167464114832
User 97370 AUC after training: 0.6875598086124401
User 97370 does not improve AUC. Reverting changes.
Training on augumented user 109660 26/50 current_auc = 0.6885167464114832
User 109660 AUC after training: 0.6894736842105262
User 109660 improves AUC. Keeping the model.
Training on augumented user 86255 27/50 current_auc = 0.6894736842105262
User 86255 AUC after training: 0.6866028708133971
User 86255 does not improve AUC. Reverting changes.
Training on augumented user 109802 28/50 current_auc = 0.6894736842105262
User 109802 AUC after training: 0.6875598086124401
User 109802 does not improve AUC. Reverting changes.
Training on augumented user 49001 29/50 current_auc = 0.6894736842105262
User 49001 AUC after training: 0.6856459330143541
User 49001 does not improve AUC. Reverting changes.
Training on augumented user 129964 30/50 current_auc = 0.6894736842105262
User 129964 AUC after training: 0.6875598086124403
User 129964 does not improve AUC. Reverting changes.
Training on augumented user 38765 31/50 current_auc = 0.6894736842105262
User 38765 AUC after training: 0.6875598086124401
User 38765 does not improve AUC. Reverting changes.
Training on augumented user 88887 32/50 current_auc = 0.6894736842105262
User 88887 AUC after training: 0.6799043062200957
User 88887 does not improve AUC. Reverting changes.
Training on augumented user 69915 33/50 current_auc = 0.6894736842105262
User 69915 AUC after training: 0.6904306220095694
User 69915 improves AUC. Keeping the model.
Training on augumented user 28888 34/50 current_auc = 0.6904306220095694
User 28888 AUC after training: 0.6904306220095694
User 28888 does not improve AUC. Reverting changes.
Training on augumented user 15571 35/50 current_auc = 0.6904306220095694
User 15571 AUC after training: 0.6866028708133971
User 15571 does not improve AUC. Reverting changes.
Training on augumented user 49542 36/50 current_auc = 0.6904306220095694
User 49542 AUC after training: 0.6875598086124401
User 49542 does not improve AUC. Reverting changes.
Training on augumented user 42175 37/50 current_auc = 0.6904306220095694
User 42175 AUC after training: 0.6827751196172249
User 42175 does not improve AUC. Reverting changes.
Training on augumented user 57359 38/50 current_auc = 0.6904306220095694
User 57359 AUC after training: 0.6894736842105262
User 57359 does not improve AUC. Reverting changes.
Training on augumented user 111653 39/50 current_auc = 0.6904306220095694
User 111653 AUC after training: 0.6866028708133971
User 111653 does not improve AUC. Reverting changes.
Training on augumented user 112452 40/50 current_auc = 0.6904306220095694
User 112452 AUC after training: 0.6885167464114832
User 112452 does not improve AUC. Reverting changes.
Training on augumented user 31344 41/50 current_auc = 0.6904306220095694
User 31344 AUC after training: 0.684688995215311
User 31344 does not improve AUC. Reverting changes.
Training on augumented user 17479 42/50 current_auc = 0.6904306220095694
User 17479 AUC after training: 0.6866028708133972
User 17479 does not improve AUC. Reverting changes.
Training on augumented user 100767 43/50 current_auc = 0.6904306220095694
User 100767 AUC after training: 0.6904306220095694
User 100767 does not improve AUC. Reverting changes.
Training on augumented user 128771 44/50 current_auc = 0.6904306220095694
User 128771 AUC after training: 0.6866028708133971
User 128771 does not improve AUC. Reverting changes.
Training on augumented user 112589 45/50 current_auc = 0.6904306220095694
User 112589 AUC after training: 0.6875598086124401
User 112589 does not improve AUC. Reverting changes.
Training on augumented user 41284 46/50 current_auc = 0.6904306220095694
User 41284 AUC after training: 0.6875598086124401
User 41284 does not improve AUC. Reverting changes.
Training on augumented user 87280 47/50 current_auc = 0.6904306220095694
User 87280 AUC after training: 0.6856459330143541
User 87280 does not improve AUC. Reverting changes.
Training on augumented user 90582 48/50 current_auc = 0.6904306220095694
User 90582 AUC after training: 0.6866028708133971
User 90582 does not improve AUC. Reverting changes.
Training on augumented user 122122 49/50 current_auc = 0.6904306220095694
User 122122 AUC after training: 0.6875598086124401
User 122122 does not improve AUC. Reverting changes.
[2024-12-02 19:01:58.212077] start test user 59576 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:58.924043] start test user 59576 153/568 recall augumented users by random, augumented_users = [53400, 64953, 101099, 122936, 108401, 122310, 16358, 26841, 52076, 107891, 110227, 137911, 26683, 85713, 19545, 19539, 104382, 77096, 63123, 135434, 126030, 2715, 129308, 46095, 82420, 39020, 96329, 104295, 36967, 99718, 93731, 135181, 12603, 51180, 23036, 41413, 5733, 116583, 81464, 43938, 87324, 36314, 131611, 84697, 28982, 54815, 38969, 94252, 90162, 122402]
[2024-12-02 19:01:58.943965] user = 59576 Cloud 153/568
[2024-12-02 19:01:58.991696] user = 59576 Local 153/568
[2024-12-02 19:01:59.080961] user = 59576 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:02.928884] user = 59576 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6904761904761905
Training on augumented user 53400 0/50 current_auc = 0.6904761904761905
User 53400 AUC after training: 0.6904761904761905
User 53400 does not improve AUC. Reverting changes.
Training on augumented user 64953 1/50 current_auc = 0.6904761904761905
User 64953 AUC after training: 0.6952380952380952
User 64953 improves AUC. Keeping the model.
Training on augumented user 101099 2/50 current_auc = 0.6952380952380952
User 101099 AUC after training: 0.6904761904761905
User 101099 does not improve AUC. Reverting changes.
Training on augumented user 122936 3/50 current_auc = 0.6952380952380952
User 122936 AUC after training: 0.6952380952380952
User 122936 does not improve AUC. Reverting changes.
Training on augumented user 108401 4/50 current_auc = 0.6952380952380952
User 108401 AUC after training: 0.6952380952380952
User 108401 does not improve AUC. Reverting changes.
Training on augumented user 122310 5/50 current_auc = 0.6952380952380952
User 122310 AUC after training: 0.7047619047619047
User 122310 improves AUC. Keeping the model.
Training on augumented user 16358 6/50 current_auc = 0.7047619047619047
User 16358 AUC after training: 0.7047619047619047
User 16358 does not improve AUC. Reverting changes.
Training on augumented user 26841 7/50 current_auc = 0.7047619047619047
User 26841 AUC after training: 0.7047619047619047
User 26841 does not improve AUC. Reverting changes.
Training on augumented user 52076 8/50 current_auc = 0.7047619047619047
User 52076 AUC after training: 0.7047619047619047
User 52076 does not improve AUC. Reverting changes.
Training on augumented user 107891 9/50 current_auc = 0.7047619047619047
User 107891 AUC after training: 0.7047619047619047
User 107891 does not improve AUC. Reverting changes.
Training on augumented user 110227 10/50 current_auc = 0.7047619047619047
User 110227 AUC after training: 0.7095238095238094
User 110227 improves AUC. Keeping the model.
Training on augumented user 137911 11/50 current_auc = 0.7095238095238094
User 137911 AUC after training: 0.7095238095238094
User 137911 does not improve AUC. Reverting changes.
Training on augumented user 26683 12/50 current_auc = 0.7095238095238094
User 26683 AUC after training: 0.7047619047619047
User 26683 does not improve AUC. Reverting changes.
Training on augumented user 85713 13/50 current_auc = 0.7095238095238094
User 85713 AUC after training: 0.7047619047619047
User 85713 does not improve AUC. Reverting changes.
Training on augumented user 19545 14/50 current_auc = 0.7095238095238094
User 19545 AUC after training: 0.7047619047619047
User 19545 does not improve AUC. Reverting changes.
Training on augumented user 19539 15/50 current_auc = 0.7095238095238094
User 19539 AUC after training: 0.7047619047619047
User 19539 does not improve AUC. Reverting changes.
Training on augumented user 104382 16/50 current_auc = 0.7095238095238094
User 104382 AUC after training: 0.7095238095238094
User 104382 does not improve AUC. Reverting changes.
Training on augumented user 77096 17/50 current_auc = 0.7095238095238094
User 77096 AUC after training: 0.7095238095238094
User 77096 does not improve AUC. Reverting changes.
Training on augumented user 63123 18/50 current_auc = 0.7095238095238094
User 63123 AUC after training: 0.7047619047619047
User 63123 does not improve AUC. Reverting changes.
Training on augumented user 135434 19/50 current_auc = 0.7095238095238094
User 135434 AUC after training: 0.7047619047619047
User 135434 does not improve AUC. Reverting changes.
Training on augumented user 126030 20/50 current_auc = 0.7095238095238094
User 126030 AUC after training: 0.7095238095238094
User 126030 does not improve AUC. Reverting changes.
Training on augumented user 2715 21/50 current_auc = 0.7095238095238094
User 2715 AUC after training: 0.7047619047619047
User 2715 does not improve AUC. Reverting changes.
Training on augumented user 129308 22/50 current_auc = 0.7095238095238094
User 129308 AUC after training: 0.7095238095238094
User 129308 does not improve AUC. Reverting changes.
Training on augumented user 46095 23/50 current_auc = 0.7095238095238094
User 46095 AUC after training: 0.7047619047619047
User 46095 does not improve AUC. Reverting changes.
Training on augumented user 82420 24/50 current_auc = 0.7095238095238094
User 82420 AUC after training: 0.7047619047619047
User 82420 does not improve AUC. Reverting changes.
Training on augumented user 39020 25/50 current_auc = 0.7095238095238094
User 39020 AUC after training: 0.7047619047619047
User 39020 does not improve AUC. Reverting changes.
Training on augumented user 96329 26/50 current_auc = 0.7095238095238094
User 96329 AUC after training: 0.7047619047619047
User 96329 does not improve AUC. Reverting changes.
Training on augumented user 104295 27/50 current_auc = 0.7095238095238094
User 104295 AUC after training: 0.7047619047619047
User 104295 does not improve AUC. Reverting changes.
Training on augumented user 36967 28/50 current_auc = 0.7095238095238094
User 36967 AUC after training: 0.7095238095238094
User 36967 does not improve AUC. Reverting changes.
Training on augumented user 99718 29/50 current_auc = 0.7095238095238094
User 99718 AUC after training: 0.7095238095238094
User 99718 does not improve AUC. Reverting changes.
Training on augumented user 93731 30/50 current_auc = 0.7095238095238094
User 93731 AUC after training: 0.7095238095238094
User 93731 does not improve AUC. Reverting changes.
Training on augumented user 135181 31/50 current_auc = 0.7095238095238094
User 135181 AUC after training: 0.7047619047619047
User 135181 does not improve AUC. Reverting changes.
Training on augumented user 12603 32/50 current_auc = 0.7095238095238094
User 12603 AUC after training: 0.7047619047619047
User 12603 does not improve AUC. Reverting changes.
Training on augumented user 51180 33/50 current_auc = 0.7095238095238094
User 51180 AUC after training: 0.7047619047619047
User 51180 does not improve AUC. Reverting changes.
Training on augumented user 23036 34/50 current_auc = 0.7095238095238094
User 23036 AUC after training: 0.7095238095238094
User 23036 does not improve AUC. Reverting changes.
Training on augumented user 41413 35/50 current_auc = 0.7095238095238094
User 41413 AUC after training: 0.7047619047619047
User 41413 does not improve AUC. Reverting changes.
Training on augumented user 5733 36/50 current_auc = 0.7095238095238094
User 5733 AUC after training: 0.7047619047619047
User 5733 does not improve AUC. Reverting changes.
Training on augumented user 116583 37/50 current_auc = 0.7095238095238094
User 116583 AUC after training: 0.7047619047619047
User 116583 does not improve AUC. Reverting changes.
Training on augumented user 81464 38/50 current_auc = 0.7095238095238094
User 81464 AUC after training: 0.7095238095238094
User 81464 does not improve AUC. Reverting changes.
Training on augumented user 43938 39/50 current_auc = 0.7095238095238094
User 43938 AUC after training: 0.7095238095238094
User 43938 does not improve AUC. Reverting changes.
Training on augumented user 87324 40/50 current_auc = 0.7095238095238094
User 87324 AUC after training: 0.7095238095238094
User 87324 does not improve AUC. Reverting changes.
Training on augumented user 36314 41/50 current_auc = 0.7095238095238094
User 36314 AUC after training: 0.7095238095238094
User 36314 does not improve AUC. Reverting changes.
Training on augumented user 131611 42/50 current_auc = 0.7095238095238094
User 131611 AUC after training: 0.7
User 131611 does not improve AUC. Reverting changes.
Training on augumented user 84697 43/50 current_auc = 0.7095238095238094
User 84697 AUC after training: 0.7095238095238094
User 84697 does not improve AUC. Reverting changes.
Training on augumented user 28982 44/50 current_auc = 0.7095238095238094
User 28982 AUC after training: 0.7095238095238094
User 28982 does not improve AUC. Reverting changes.
Training on augumented user 54815 45/50 current_auc = 0.7095238095238094
User 54815 AUC after training: 0.7047619047619047
User 54815 does not improve AUC. Reverting changes.
Training on augumented user 38969 46/50 current_auc = 0.7095238095238094
User 38969 AUC after training: 0.7095238095238094
User 38969 does not improve AUC. Reverting changes.
Training on augumented user 94252 47/50 current_auc = 0.7095238095238094
User 94252 AUC after training: 0.7047619047619047
User 94252 does not improve AUC. Reverting changes.
Training on augumented user 90162 48/50 current_auc = 0.7095238095238094
User 90162 AUC after training: 0.7047619047619047
User 90162 does not improve AUC. Reverting changes.
Training on augumented user 122402 49/50 current_auc = 0.7095238095238094
User 122402 AUC after training: 0.7095238095238094
User 122402 does not improve AUC. Reverting changes.
[2024-12-02 19:02:36.410889] start test user 59613 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:36.811092] start test user 59613 154/568 recall augumented users by random, augumented_users = [128807, 128940, 76159, 126905, 19639, 55421, 54556, 86915, 70183, 19780, 17209, 70336, 135313, 91436, 125901, 5935, 118942, 76135, 97480, 83259, 41467, 98614, 108148, 120236, 101930, 771, 66057, 26114, 115384, 50210, 11687, 26326, 112042, 15271, 90473, 71433, 67531, 27465, 19721, 16228, 6017, 43301, 70564, 80696, 100194, 90524, 75496, 49114, 46819, 60417]
[2024-12-02 19:02:36.825823] user = 59613 Cloud 154/568
[2024-12-02 19:02:36.834488] user = 59613 Local 154/568
[2024-12-02 19:02:36.888522] user = 59613 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:38.705288] user = 59613 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4583333333333333
Training on augumented user 128807 0/50 current_auc = 0.4583333333333333
User 128807 AUC after training: 0.4583333333333333
User 128807 does not improve AUC. Reverting changes.
Training on augumented user 128940 1/50 current_auc = 0.4583333333333333
User 128940 AUC after training: 0.4583333333333333
User 128940 does not improve AUC. Reverting changes.
Training on augumented user 76159 2/50 current_auc = 0.4583333333333333
User 76159 AUC after training: 0.4583333333333333
User 76159 does not improve AUC. Reverting changes.
Training on augumented user 126905 3/50 current_auc = 0.4583333333333333
User 126905 AUC after training: 0.4583333333333333
User 126905 does not improve AUC. Reverting changes.
Training on augumented user 19639 4/50 current_auc = 0.4583333333333333
User 19639 AUC after training: 0.4583333333333333
User 19639 does not improve AUC. Reverting changes.
Training on augumented user 55421 5/50 current_auc = 0.4583333333333333
User 55421 AUC after training: 0.4583333333333333
User 55421 does not improve AUC. Reverting changes.
Training on augumented user 54556 6/50 current_auc = 0.4583333333333333
User 54556 AUC after training: 0.4583333333333333
User 54556 does not improve AUC. Reverting changes.
Training on augumented user 86915 7/50 current_auc = 0.4583333333333333
User 86915 AUC after training: 0.4583333333333333
User 86915 does not improve AUC. Reverting changes.
Training on augumented user 70183 8/50 current_auc = 0.4583333333333333
User 70183 AUC after training: 0.4583333333333333
User 70183 does not improve AUC. Reverting changes.
Training on augumented user 19780 9/50 current_auc = 0.4583333333333333
User 19780 AUC after training: 0.4583333333333333
User 19780 does not improve AUC. Reverting changes.
Training on augumented user 17209 10/50 current_auc = 0.4583333333333333
User 17209 AUC after training: 0.4583333333333333
User 17209 does not improve AUC. Reverting changes.
Training on augumented user 70336 11/50 current_auc = 0.4583333333333333
User 70336 AUC after training: 0.4583333333333333
User 70336 does not improve AUC. Reverting changes.
Training on augumented user 135313 12/50 current_auc = 0.4583333333333333
User 135313 AUC after training: 0.4583333333333333
User 135313 does not improve AUC. Reverting changes.
Training on augumented user 91436 13/50 current_auc = 0.4583333333333333
User 91436 AUC after training: 0.4583333333333333
User 91436 does not improve AUC. Reverting changes.
Training on augumented user 125901 14/50 current_auc = 0.4583333333333333
User 125901 AUC after training: 0.4583333333333333
User 125901 does not improve AUC. Reverting changes.
Training on augumented user 5935 15/50 current_auc = 0.4583333333333333
User 5935 AUC after training: 0.4583333333333333
User 5935 does not improve AUC. Reverting changes.
Training on augumented user 118942 16/50 current_auc = 0.4583333333333333
User 118942 AUC after training: 0.4583333333333333
User 118942 does not improve AUC. Reverting changes.
Training on augumented user 76135 17/50 current_auc = 0.4583333333333333
User 76135 AUC after training: 0.4583333333333333
User 76135 does not improve AUC. Reverting changes.
Training on augumented user 97480 18/50 current_auc = 0.4583333333333333
User 97480 AUC after training: 0.4583333333333333
User 97480 does not improve AUC. Reverting changes.
Training on augumented user 83259 19/50 current_auc = 0.4583333333333333
User 83259 AUC after training: 0.4583333333333333
User 83259 does not improve AUC. Reverting changes.
Training on augumented user 41467 20/50 current_auc = 0.4583333333333333
User 41467 AUC after training: 0.4583333333333333
User 41467 does not improve AUC. Reverting changes.
Training on augumented user 98614 21/50 current_auc = 0.4583333333333333
User 98614 AUC after training: 0.4583333333333333
User 98614 does not improve AUC. Reverting changes.
Training on augumented user 108148 22/50 current_auc = 0.4583333333333333
User 108148 AUC after training: 0.4583333333333333
User 108148 does not improve AUC. Reverting changes.
Training on augumented user 120236 23/50 current_auc = 0.4583333333333333
User 120236 AUC after training: 0.4583333333333333
User 120236 does not improve AUC. Reverting changes.
Training on augumented user 101930 24/50 current_auc = 0.4583333333333333
User 101930 AUC after training: 0.4583333333333333
User 101930 does not improve AUC. Reverting changes.
Training on augumented user 771 25/50 current_auc = 0.4583333333333333
User 771 AUC after training: 0.4583333333333333
User 771 does not improve AUC. Reverting changes.
Training on augumented user 66057 26/50 current_auc = 0.4583333333333333
User 66057 AUC after training: 0.4583333333333333
User 66057 does not improve AUC. Reverting changes.
Training on augumented user 26114 27/50 current_auc = 0.4583333333333333
User 26114 AUC after training: 0.4583333333333333
User 26114 does not improve AUC. Reverting changes.
Training on augumented user 115384 28/50 current_auc = 0.4583333333333333
User 115384 AUC after training: 0.4583333333333333
User 115384 does not improve AUC. Reverting changes.
Training on augumented user 50210 29/50 current_auc = 0.4583333333333333
User 50210 AUC after training: 0.4583333333333333
User 50210 does not improve AUC. Reverting changes.
Training on augumented user 11687 30/50 current_auc = 0.4583333333333333
User 11687 AUC after training: 0.4583333333333333
User 11687 does not improve AUC. Reverting changes.
Training on augumented user 26326 31/50 current_auc = 0.4583333333333333
User 26326 AUC after training: 0.4583333333333333
User 26326 does not improve AUC. Reverting changes.
Training on augumented user 112042 32/50 current_auc = 0.4583333333333333
User 112042 AUC after training: 0.4583333333333333
User 112042 does not improve AUC. Reverting changes.
Training on augumented user 15271 33/50 current_auc = 0.4583333333333333
User 15271 AUC after training: 0.4583333333333333
User 15271 does not improve AUC. Reverting changes.
Training on augumented user 90473 34/50 current_auc = 0.4583333333333333
User 90473 AUC after training: 0.4583333333333333
User 90473 does not improve AUC. Reverting changes.
Training on augumented user 71433 35/50 current_auc = 0.4583333333333333
User 71433 AUC after training: 0.4583333333333333
User 71433 does not improve AUC. Reverting changes.
Training on augumented user 67531 36/50 current_auc = 0.4583333333333333
User 67531 AUC after training: 0.4583333333333333
User 67531 does not improve AUC. Reverting changes.
Training on augumented user 27465 37/50 current_auc = 0.4583333333333333
User 27465 AUC after training: 0.4583333333333333
User 27465 does not improve AUC. Reverting changes.
Training on augumented user 19721 38/50 current_auc = 0.4583333333333333
User 19721 AUC after training: 0.4583333333333333
User 19721 does not improve AUC. Reverting changes.
Training on augumented user 16228 39/50 current_auc = 0.4583333333333333
User 16228 AUC after training: 0.4583333333333333
User 16228 does not improve AUC. Reverting changes.
Training on augumented user 6017 40/50 current_auc = 0.4583333333333333
User 6017 AUC after training: 0.4583333333333333
User 6017 does not improve AUC. Reverting changes.
Training on augumented user 43301 41/50 current_auc = 0.4583333333333333
User 43301 AUC after training: 0.4583333333333333
User 43301 does not improve AUC. Reverting changes.
Training on augumented user 70564 42/50 current_auc = 0.4583333333333333
User 70564 AUC after training: 0.4583333333333333
User 70564 does not improve AUC. Reverting changes.
Training on augumented user 80696 43/50 current_auc = 0.4583333333333333
User 80696 AUC after training: 0.4583333333333333
User 80696 does not improve AUC. Reverting changes.
Training on augumented user 100194 44/50 current_auc = 0.4583333333333333
User 100194 AUC after training: 0.4583333333333333
User 100194 does not improve AUC. Reverting changes.
Training on augumented user 90524 45/50 current_auc = 0.4583333333333333
User 90524 AUC after training: 0.4583333333333333
User 90524 does not improve AUC. Reverting changes.
Training on augumented user 75496 46/50 current_auc = 0.4583333333333333
User 75496 AUC after training: 0.4583333333333333
User 75496 does not improve AUC. Reverting changes.
Training on augumented user 49114 47/50 current_auc = 0.4583333333333333
User 49114 AUC after training: 0.4583333333333333
User 49114 does not improve AUC. Reverting changes.
Training on augumented user 46819 48/50 current_auc = 0.4583333333333333
User 46819 AUC after training: 0.4583333333333333
User 46819 does not improve AUC. Reverting changes.
Training on augumented user 60417 49/50 current_auc = 0.4583333333333333
User 60417 AUC after training: 0.4583333333333333
User 60417 does not improve AUC. Reverting changes.
[2024-12-02 19:03:11.712067] start test user 59675 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:12.387686] start test user 59675 155/568 recall augumented users by random, augumented_users = [72242, 117810, 42387, 109973, 87690, 98977, 128969, 61968, 137323, 3069, 113836, 18611, 30613, 35400, 10152, 50648, 35979, 36856, 42872, 86347, 60986, 95362, 122302, 122795, 86191, 85661, 107603, 89501, 90405, 40346, 23890, 65572, 58008, 13987, 125200, 4604, 74994, 76089, 56939, 91378, 98801, 59485, 62705, 101450, 123530, 79355, 114865, 111503, 39987, 45460]
[2024-12-02 19:03:12.405172] user = 59675 Cloud 155/568
[2024-12-02 19:03:12.428916] user = 59675 Local 155/568
[2024-12-02 19:03:12.541812] user = 59675 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:17.259703] user = 59675 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6033333333333333
Training on augumented user 72242 0/50 current_auc = 0.6033333333333333
User 72242 AUC after training: 0.6033333333333333
User 72242 does not improve AUC. Reverting changes.
Training on augumented user 117810 1/50 current_auc = 0.6033333333333333
User 117810 AUC after training: 0.6022222222222221
User 117810 does not improve AUC. Reverting changes.
Training on augumented user 42387 2/50 current_auc = 0.6033333333333333
User 42387 AUC after training: 0.601111111111111
User 42387 does not improve AUC. Reverting changes.
Training on augumented user 109973 3/50 current_auc = 0.6033333333333333
User 109973 AUC after training: 0.6033333333333333
User 109973 does not improve AUC. Reverting changes.
Training on augumented user 87690 4/50 current_auc = 0.6033333333333333
User 87690 AUC after training: 0.5955555555555555
User 87690 does not improve AUC. Reverting changes.
Training on augumented user 98977 5/50 current_auc = 0.6033333333333333
User 98977 AUC after training: 0.6022222222222221
User 98977 does not improve AUC. Reverting changes.
Training on augumented user 128969 6/50 current_auc = 0.6033333333333333
User 128969 AUC after training: 0.6022222222222222
User 128969 does not improve AUC. Reverting changes.
Training on augumented user 61968 7/50 current_auc = 0.6033333333333333
User 61968 AUC after training: 0.6044444444444445
User 61968 improves AUC. Keeping the model.
Training on augumented user 137323 8/50 current_auc = 0.6044444444444445
User 137323 AUC after training: 0.6044444444444445
User 137323 does not improve AUC. Reverting changes.
Training on augumented user 3069 9/50 current_auc = 0.6044444444444445
User 3069 AUC after training: 0.6044444444444445
User 3069 does not improve AUC. Reverting changes.
Training on augumented user 113836 10/50 current_auc = 0.6044444444444445
User 113836 AUC after training: 0.5988888888888889
User 113836 does not improve AUC. Reverting changes.
Training on augumented user 18611 11/50 current_auc = 0.6044444444444445
User 18611 AUC after training: 0.6
User 18611 does not improve AUC. Reverting changes.
Training on augumented user 30613 12/50 current_auc = 0.6044444444444445
User 30613 AUC after training: 0.6033333333333333
User 30613 does not improve AUC. Reverting changes.
Training on augumented user 35400 13/50 current_auc = 0.6044444444444445
User 35400 AUC after training: 0.6022222222222221
User 35400 does not improve AUC. Reverting changes.
Training on augumented user 10152 14/50 current_auc = 0.6044444444444445
User 10152 AUC after training: 0.6022222222222221
User 10152 does not improve AUC. Reverting changes.
Training on augumented user 50648 15/50 current_auc = 0.6044444444444445
User 50648 AUC after training: 0.6022222222222222
User 50648 does not improve AUC. Reverting changes.
Training on augumented user 35979 16/50 current_auc = 0.6044444444444445
User 35979 AUC after training: 0.5977777777777777
User 35979 does not improve AUC. Reverting changes.
Training on augumented user 36856 17/50 current_auc = 0.6044444444444445
User 36856 AUC after training: 0.5988888888888888
User 36856 does not improve AUC. Reverting changes.
Training on augumented user 42872 18/50 current_auc = 0.6044444444444445
User 42872 AUC after training: 0.601111111111111
User 42872 does not improve AUC. Reverting changes.
Training on augumented user 86347 19/50 current_auc = 0.6044444444444445
User 86347 AUC after training: 0.6055555555555555
User 86347 improves AUC. Keeping the model.
Training on augumented user 60986 20/50 current_auc = 0.6055555555555555
User 60986 AUC after training: 0.6066666666666666
User 60986 improves AUC. Keeping the model.
Training on augumented user 95362 21/50 current_auc = 0.6066666666666666
User 95362 AUC after training: 0.6088888888888888
User 95362 improves AUC. Keeping the model.
Training on augumented user 122302 22/50 current_auc = 0.6088888888888888
User 122302 AUC after training: 0.6088888888888888
User 122302 does not improve AUC. Reverting changes.
Training on augumented user 122795 23/50 current_auc = 0.6088888888888888
User 122795 AUC after training: 0.6088888888888888
User 122795 does not improve AUC. Reverting changes.
Training on augumented user 86191 24/50 current_auc = 0.6088888888888888
User 86191 AUC after training: 0.6077777777777778
User 86191 does not improve AUC. Reverting changes.
Training on augumented user 85661 25/50 current_auc = 0.6088888888888888
User 85661 AUC after training: 0.6066666666666666
User 85661 does not improve AUC. Reverting changes.
Training on augumented user 107603 26/50 current_auc = 0.6088888888888888
User 107603 AUC after training: 0.6011111111111112
User 107603 does not improve AUC. Reverting changes.
Training on augumented user 89501 27/50 current_auc = 0.6088888888888888
User 89501 AUC after training: 0.6033333333333333
User 89501 does not improve AUC. Reverting changes.
Training on augumented user 90405 28/50 current_auc = 0.6088888888888888
User 90405 AUC after training: 0.6011111111111112
User 90405 does not improve AUC. Reverting changes.
Training on augumented user 40346 29/50 current_auc = 0.6088888888888888
User 40346 AUC after training: 0.6066666666666666
User 40346 does not improve AUC. Reverting changes.
Training on augumented user 23890 30/50 current_auc = 0.6088888888888888
User 23890 AUC after training: 0.6022222222222222
User 23890 does not improve AUC. Reverting changes.
Training on augumented user 65572 31/50 current_auc = 0.6088888888888888
User 65572 AUC after training: 0.6077777777777778
User 65572 does not improve AUC. Reverting changes.
Training on augumented user 58008 32/50 current_auc = 0.6088888888888888
User 58008 AUC after training: 0.6044444444444445
User 58008 does not improve AUC. Reverting changes.
Training on augumented user 13987 33/50 current_auc = 0.6088888888888888
User 13987 AUC after training: 0.6066666666666666
User 13987 does not improve AUC. Reverting changes.
Training on augumented user 125200 34/50 current_auc = 0.6088888888888888
User 125200 AUC after training: 0.5988888888888888
User 125200 does not improve AUC. Reverting changes.
Training on augumented user 4604 35/50 current_auc = 0.6088888888888888
User 4604 AUC after training: 0.6044444444444445
User 4604 does not improve AUC. Reverting changes.
Training on augumented user 74994 36/50 current_auc = 0.6088888888888888
User 74994 AUC after training: 0.6055555555555555
User 74994 does not improve AUC. Reverting changes.
Training on augumented user 76089 37/50 current_auc = 0.6088888888888888
User 76089 AUC after training: 0.6033333333333333
User 76089 does not improve AUC. Reverting changes.
Training on augumented user 56939 38/50 current_auc = 0.6088888888888888
User 56939 AUC after training: 0.6066666666666666
User 56939 does not improve AUC. Reverting changes.
Training on augumented user 91378 39/50 current_auc = 0.6088888888888888
User 91378 AUC after training: 0.6033333333333333
User 91378 does not improve AUC. Reverting changes.
Training on augumented user 98801 40/50 current_auc = 0.6088888888888888
User 98801 AUC after training: 0.6055555555555555
User 98801 does not improve AUC. Reverting changes.
Training on augumented user 59485 41/50 current_auc = 0.6088888888888888
User 59485 AUC after training: 0.6022222222222221
User 59485 does not improve AUC. Reverting changes.
Training on augumented user 62705 42/50 current_auc = 0.6088888888888888
User 62705 AUC after training: 0.601111111111111
User 62705 does not improve AUC. Reverting changes.
Training on augumented user 101450 43/50 current_auc = 0.6088888888888888
User 101450 AUC after training: 0.6044444444444445
User 101450 does not improve AUC. Reverting changes.
Training on augumented user 123530 44/50 current_auc = 0.6088888888888888
User 123530 AUC after training: 0.6055555555555555
User 123530 does not improve AUC. Reverting changes.
Training on augumented user 79355 45/50 current_auc = 0.6088888888888888
User 79355 AUC after training: 0.6055555555555555
User 79355 does not improve AUC. Reverting changes.
Training on augumented user 114865 46/50 current_auc = 0.6088888888888888
User 114865 AUC after training: 0.6033333333333333
User 114865 does not improve AUC. Reverting changes.
Training on augumented user 111503 47/50 current_auc = 0.6088888888888888
User 111503 AUC after training: 0.6066666666666666
User 111503 does not improve AUC. Reverting changes.
Training on augumented user 39987 48/50 current_auc = 0.6088888888888888
User 39987 AUC after training: 0.6044444444444445
User 39987 does not improve AUC. Reverting changes.
Training on augumented user 45460 49/50 current_auc = 0.6088888888888888
User 45460 AUC after training: 0.6088888888888888
User 45460 does not improve AUC. Reverting changes.
[2024-12-02 19:03:47.194150] start test user 59714 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:47.804996] start test user 59714 156/568 recall augumented users by random, augumented_users = [85275, 24570, 103587, 69088, 133013, 63274, 26469, 102230, 66734, 127878, 75298, 138320, 74389, 106518, 109158, 132659, 2515, 107224, 35002, 13040, 127015, 5888, 131070, 31434, 68406, 104026, 20668, 123031, 123565, 111391, 49878, 129098, 61771, 37810, 7717, 100904, 13129, 89105, 37761, 115586, 62982, 101625, 56043, 29028, 14597, 122166, 132274, 109114, 18673, 41286]
[2024-12-02 19:03:47.820727] user = 59714 Cloud 156/568
[2024-12-02 19:03:47.834986] user = 59714 Local 156/568
[2024-12-02 19:03:47.920336] user = 59714 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:50.183626] user = 59714 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6374028349336991
Training on augumented user 85275 0/50 current_auc = 0.6374028349336991
User 85275 AUC after training: 0.6378600823045268
User 85275 improves AUC. Keeping the model.
Training on augumented user 24570 1/50 current_auc = 0.6378600823045268
User 24570 AUC after training: 0.6369455875628716
User 24570 does not improve AUC. Reverting changes.
Training on augumented user 103587 2/50 current_auc = 0.6378600823045268
User 103587 AUC after training: 0.6378600823045267
User 103587 does not improve AUC. Reverting changes.
Training on augumented user 69088 3/50 current_auc = 0.6378600823045268
User 69088 AUC after training: 0.6383173296753544
User 69088 improves AUC. Keeping the model.
Training on augumented user 133013 4/50 current_auc = 0.6383173296753544
User 133013 AUC after training: 0.6383173296753544
User 133013 does not improve AUC. Reverting changes.
Training on augumented user 63274 5/50 current_auc = 0.6383173296753544
User 63274 AUC after training: 0.6396890717878372
User 63274 improves AUC. Keeping the model.
Training on augumented user 26469 6/50 current_auc = 0.6396890717878372
User 26469 AUC after training: 0.6396890717878372
User 26469 does not improve AUC. Reverting changes.
Training on augumented user 102230 7/50 current_auc = 0.6396890717878372
User 102230 AUC after training: 0.6396890717878372
User 102230 does not improve AUC. Reverting changes.
Training on augumented user 66734 8/50 current_auc = 0.6396890717878372
User 66734 AUC after training: 0.6401463191586648
User 66734 improves AUC. Keeping the model.
Training on augumented user 127878 9/50 current_auc = 0.6401463191586648
User 127878 AUC after training: 0.6396890717878372
User 127878 does not improve AUC. Reverting changes.
Training on augumented user 75298 10/50 current_auc = 0.6401463191586648
User 75298 AUC after training: 0.6406035665294925
User 75298 improves AUC. Keeping the model.
Training on augumented user 138320 11/50 current_auc = 0.6406035665294925
User 138320 AUC after training: 0.6396890717878372
User 138320 does not improve AUC. Reverting changes.
Training on augumented user 74389 12/50 current_auc = 0.6406035665294925
User 74389 AUC after training: 0.6406035665294925
User 74389 does not improve AUC. Reverting changes.
Training on augumented user 106518 13/50 current_auc = 0.6406035665294925
User 106518 AUC after training: 0.6406035665294925
User 106518 does not improve AUC. Reverting changes.
Training on augumented user 109158 14/50 current_auc = 0.6406035665294925
User 109158 AUC after training: 0.6387745770461819
User 109158 does not improve AUC. Reverting changes.
Training on augumented user 132659 15/50 current_auc = 0.6406035665294925
User 132659 AUC after training: 0.6401463191586648
User 132659 does not improve AUC. Reverting changes.
Training on augumented user 2515 16/50 current_auc = 0.6406035665294925
User 2515 AUC after training: 0.6367169638774577
User 2515 does not improve AUC. Reverting changes.
Training on augumented user 107224 17/50 current_auc = 0.6406035665294925
User 107224 AUC after training: 0.6406035665294925
User 107224 does not improve AUC. Reverting changes.
Training on augumented user 35002 18/50 current_auc = 0.6406035665294925
User 35002 AUC after training: 0.6396890717878372
User 35002 does not improve AUC. Reverting changes.
Training on augumented user 13040 19/50 current_auc = 0.6406035665294925
User 13040 AUC after training: 0.6406035665294925
User 13040 does not improve AUC. Reverting changes.
Training on augumented user 127015 20/50 current_auc = 0.6406035665294925
User 127015 AUC after training: 0.64106081390032
User 127015 improves AUC. Keeping the model.
Training on augumented user 5888 21/50 current_auc = 0.64106081390032
User 5888 AUC after training: 0.6406035665294925
User 5888 does not improve AUC. Reverting changes.
Training on augumented user 131070 22/50 current_auc = 0.64106081390032
User 131070 AUC after training: 0.64106081390032
User 131070 does not improve AUC. Reverting changes.
Training on augumented user 31434 23/50 current_auc = 0.64106081390032
User 31434 AUC after training: 0.6378600823045268
User 31434 does not improve AUC. Reverting changes.
Training on augumented user 68406 24/50 current_auc = 0.64106081390032
User 68406 AUC after training: 0.6415180612711477
User 68406 improves AUC. Keeping the model.
Training on augumented user 104026 25/50 current_auc = 0.6415180612711477
User 104026 AUC after training: 0.6419753086419753
User 104026 improves AUC. Keeping the model.
Training on augumented user 20668 26/50 current_auc = 0.6419753086419753
User 20668 AUC after training: 0.6424325560128029
User 20668 improves AUC. Keeping the model.
Training on augumented user 123031 27/50 current_auc = 0.6424325560128029
User 123031 AUC after training: 0.6424325560128029
User 123031 does not improve AUC. Reverting changes.
Training on augumented user 123565 28/50 current_auc = 0.6424325560128029
User 123565 AUC after training: 0.6424325560128029
User 123565 does not improve AUC. Reverting changes.
Training on augumented user 111391 29/50 current_auc = 0.6424325560128029
User 111391 AUC after training: 0.6442615454961134
User 111391 improves AUC. Keeping the model.
Training on augumented user 49878 30/50 current_auc = 0.6442615454961134
User 49878 AUC after training: 0.6438042981252858
User 49878 does not improve AUC. Reverting changes.
Training on augumented user 129098 31/50 current_auc = 0.6442615454961134
User 129098 AUC after training: 0.6442615454961135
User 129098 improves AUC. Keeping the model.
Training on augumented user 61771 32/50 current_auc = 0.6442615454961135
User 61771 AUC after training: 0.6419753086419754
User 61771 does not improve AUC. Reverting changes.
Training on augumented user 37810 33/50 current_auc = 0.6442615454961135
User 37810 AUC after training: 0.6419753086419754
User 37810 does not improve AUC. Reverting changes.
Training on augumented user 7717 34/50 current_auc = 0.6442615454961135
User 7717 AUC after training: 0.6442615454961135
User 7717 does not improve AUC. Reverting changes.
Training on augumented user 100904 35/50 current_auc = 0.6442615454961135
User 100904 AUC after training: 0.6433470507544582
User 100904 does not improve AUC. Reverting changes.
Training on augumented user 13129 36/50 current_auc = 0.6442615454961135
User 13129 AUC after training: 0.6438042981252858
User 13129 does not improve AUC. Reverting changes.
Training on augumented user 89105 37/50 current_auc = 0.6442615454961135
User 89105 AUC after training: 0.6401463191586648
User 89105 does not improve AUC. Reverting changes.
Training on augumented user 37761 38/50 current_auc = 0.6442615454961135
User 37761 AUC after training: 0.6428898033836306
User 37761 does not improve AUC. Reverting changes.
Training on augumented user 115586 39/50 current_auc = 0.6442615454961135
User 115586 AUC after training: 0.6442615454961135
User 115586 does not improve AUC. Reverting changes.
Training on augumented user 62982 40/50 current_auc = 0.6442615454961135
User 62982 AUC after training: 0.6442615454961134
User 62982 does not improve AUC. Reverting changes.
Training on augumented user 101625 41/50 current_auc = 0.6442615454961135
User 101625 AUC after training: 0.6438042981252858
User 101625 does not improve AUC. Reverting changes.
Training on augumented user 56043 42/50 current_auc = 0.6442615454961135
User 56043 AUC after training: 0.6428898033836306
User 56043 does not improve AUC. Reverting changes.
Training on augumented user 29028 43/50 current_auc = 0.6442615454961135
User 29028 AUC after training: 0.6438042981252858
User 29028 does not improve AUC. Reverting changes.
Training on augumented user 14597 44/50 current_auc = 0.6442615454961135
User 14597 AUC after training: 0.6438042981252858
User 14597 does not improve AUC. Reverting changes.
Training on augumented user 122166 45/50 current_auc = 0.6442615454961135
User 122166 AUC after training: 0.6380887059899406
User 122166 does not improve AUC. Reverting changes.
Training on augumented user 132274 46/50 current_auc = 0.6442615454961135
User 132274 AUC after training: 0.6433470507544582
User 132274 does not improve AUC. Reverting changes.
Training on augumented user 109114 47/50 current_auc = 0.6442615454961135
User 109114 AUC after training: 0.6442615454961134
User 109114 does not improve AUC. Reverting changes.
Training on augumented user 18673 48/50 current_auc = 0.6442615454961135
User 18673 AUC after training: 0.6442615454961134
User 18673 does not improve AUC. Reverting changes.
Training on augumented user 41286 49/50 current_auc = 0.6442615454961135
User 41286 AUC after training: 0.644718792866941
User 41286 improves AUC. Keeping the model.
[2024-12-02 19:04:16.669586] start test user 59749 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:17.443946] start test user 59749 157/568 recall augumented users by random, augumented_users = [127029, 65910, 62484, 107244, 47786, 6094, 1769, 37347, 52385, 126438, 102757, 123951, 125236, 66028, 93660, 82487, 26090, 62141, 54321, 47471, 67008, 54994, 29013, 74363, 15820, 110919, 52945, 74914, 6622, 98200, 121722, 80942, 132861, 106973, 106832, 14914, 4789, 10854, 136006, 41928, 78184, 86854, 44779, 133182, 61953, 21792, 63316, 3145, 95931, 28639]
[2024-12-02 19:04:17.459324] user = 59749 Cloud 157/568
[2024-12-02 19:04:17.469842] user = 59749 Local 157/568
[2024-12-02 19:04:17.500108] user = 59749 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:19.567120] user = 59749 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 127029 0/50 current_auc = 1.0
User 127029 AUC after training: 1.0
User 127029 does not improve AUC. Reverting changes.
Training on augumented user 65910 1/50 current_auc = 1.0
User 65910 AUC after training: 1.0
User 65910 does not improve AUC. Reverting changes.
Training on augumented user 62484 2/50 current_auc = 1.0
User 62484 AUC after training: 1.0
User 62484 does not improve AUC. Reverting changes.
Training on augumented user 107244 3/50 current_auc = 1.0
User 107244 AUC after training: 1.0
User 107244 does not improve AUC. Reverting changes.
Training on augumented user 47786 4/50 current_auc = 1.0
User 47786 AUC after training: 1.0
User 47786 does not improve AUC. Reverting changes.
Training on augumented user 6094 5/50 current_auc = 1.0
User 6094 AUC after training: 1.0
User 6094 does not improve AUC. Reverting changes.
Training on augumented user 1769 6/50 current_auc = 1.0
User 1769 AUC after training: 1.0
User 1769 does not improve AUC. Reverting changes.
Training on augumented user 37347 7/50 current_auc = 1.0
User 37347 AUC after training: 1.0
User 37347 does not improve AUC. Reverting changes.
Training on augumented user 52385 8/50 current_auc = 1.0
User 52385 AUC after training: 1.0
User 52385 does not improve AUC. Reverting changes.
Training on augumented user 126438 9/50 current_auc = 1.0
User 126438 AUC after training: 1.0
User 126438 does not improve AUC. Reverting changes.
Training on augumented user 102757 10/50 current_auc = 1.0
User 102757 AUC after training: 1.0
User 102757 does not improve AUC. Reverting changes.
Training on augumented user 123951 11/50 current_auc = 1.0
User 123951 AUC after training: 1.0
User 123951 does not improve AUC. Reverting changes.
Training on augumented user 125236 12/50 current_auc = 1.0
User 125236 AUC after training: 1.0
User 125236 does not improve AUC. Reverting changes.
Training on augumented user 66028 13/50 current_auc = 1.0
User 66028 AUC after training: 1.0
User 66028 does not improve AUC. Reverting changes.
Training on augumented user 93660 14/50 current_auc = 1.0
User 93660 AUC after training: 1.0
User 93660 does not improve AUC. Reverting changes.
Training on augumented user 82487 15/50 current_auc = 1.0
User 82487 AUC after training: 1.0
User 82487 does not improve AUC. Reverting changes.
Training on augumented user 26090 16/50 current_auc = 1.0
User 26090 AUC after training: 1.0
User 26090 does not improve AUC. Reverting changes.
Training on augumented user 62141 17/50 current_auc = 1.0
User 62141 AUC after training: 1.0
User 62141 does not improve AUC. Reverting changes.
Training on augumented user 54321 18/50 current_auc = 1.0
User 54321 AUC after training: 1.0
User 54321 does not improve AUC. Reverting changes.
Training on augumented user 47471 19/50 current_auc = 1.0
User 47471 AUC after training: 1.0
User 47471 does not improve AUC. Reverting changes.
Training on augumented user 67008 20/50 current_auc = 1.0
User 67008 AUC after training: 1.0
User 67008 does not improve AUC. Reverting changes.
Training on augumented user 54994 21/50 current_auc = 1.0
User 54994 AUC after training: 1.0
User 54994 does not improve AUC. Reverting changes.
Training on augumented user 29013 22/50 current_auc = 1.0
User 29013 AUC after training: 1.0
User 29013 does not improve AUC. Reverting changes.
Training on augumented user 74363 23/50 current_auc = 1.0
User 74363 AUC after training: 1.0
User 74363 does not improve AUC. Reverting changes.
Training on augumented user 15820 24/50 current_auc = 1.0
User 15820 AUC after training: 1.0
User 15820 does not improve AUC. Reverting changes.
Training on augumented user 110919 25/50 current_auc = 1.0
User 110919 AUC after training: 1.0
User 110919 does not improve AUC. Reverting changes.
Training on augumented user 52945 26/50 current_auc = 1.0
User 52945 AUC after training: 1.0
User 52945 does not improve AUC. Reverting changes.
Training on augumented user 74914 27/50 current_auc = 1.0
User 74914 AUC after training: 1.0
User 74914 does not improve AUC. Reverting changes.
Training on augumented user 6622 28/50 current_auc = 1.0
User 6622 AUC after training: 1.0
User 6622 does not improve AUC. Reverting changes.
Training on augumented user 98200 29/50 current_auc = 1.0
User 98200 AUC after training: 1.0
User 98200 does not improve AUC. Reverting changes.
Training on augumented user 121722 30/50 current_auc = 1.0
User 121722 AUC after training: 1.0
User 121722 does not improve AUC. Reverting changes.
Training on augumented user 80942 31/50 current_auc = 1.0
User 80942 AUC after training: 1.0
User 80942 does not improve AUC. Reverting changes.
Training on augumented user 132861 32/50 current_auc = 1.0
User 132861 AUC after training: 1.0
User 132861 does not improve AUC. Reverting changes.
Training on augumented user 106973 33/50 current_auc = 1.0
User 106973 AUC after training: 1.0
User 106973 does not improve AUC. Reverting changes.
Training on augumented user 106832 34/50 current_auc = 1.0
User 106832 AUC after training: 1.0
User 106832 does not improve AUC. Reverting changes.
Training on augumented user 14914 35/50 current_auc = 1.0
User 14914 AUC after training: 1.0
User 14914 does not improve AUC. Reverting changes.
Training on augumented user 4789 36/50 current_auc = 1.0
User 4789 AUC after training: 1.0
User 4789 does not improve AUC. Reverting changes.
Training on augumented user 10854 37/50 current_auc = 1.0
User 10854 AUC after training: 1.0
User 10854 does not improve AUC. Reverting changes.
Training on augumented user 136006 38/50 current_auc = 1.0
User 136006 AUC after training: 1.0
User 136006 does not improve AUC. Reverting changes.
Training on augumented user 41928 39/50 current_auc = 1.0
User 41928 AUC after training: 1.0
User 41928 does not improve AUC. Reverting changes.
Training on augumented user 78184 40/50 current_auc = 1.0
User 78184 AUC after training: 1.0
User 78184 does not improve AUC. Reverting changes.
Training on augumented user 86854 41/50 current_auc = 1.0
User 86854 AUC after training: 1.0
User 86854 does not improve AUC. Reverting changes.
Training on augumented user 44779 42/50 current_auc = 1.0
User 44779 AUC after training: 1.0
User 44779 does not improve AUC. Reverting changes.
Training on augumented user 133182 43/50 current_auc = 1.0
User 133182 AUC after training: 1.0
User 133182 does not improve AUC. Reverting changes.
Training on augumented user 61953 44/50 current_auc = 1.0
User 61953 AUC after training: 1.0
User 61953 does not improve AUC. Reverting changes.
Training on augumented user 21792 45/50 current_auc = 1.0
User 21792 AUC after training: 1.0
User 21792 does not improve AUC. Reverting changes.
Training on augumented user 63316 46/50 current_auc = 1.0
User 63316 AUC after training: 1.0
User 63316 does not improve AUC. Reverting changes.
Training on augumented user 3145 47/50 current_auc = 1.0
User 3145 AUC after training: 1.0
User 3145 does not improve AUC. Reverting changes.
Training on augumented user 95931 48/50 current_auc = 1.0
User 95931 AUC after training: 1.0
User 95931 does not improve AUC. Reverting changes.
Training on augumented user 28639 49/50 current_auc = 1.0
User 28639 AUC after training: 1.0
User 28639 does not improve AUC. Reverting changes.
[2024-12-02 19:04:48.931706] start test user 59781 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:49.421614] start test user 59781 158/568 recall augumented users by random, augumented_users = [71436, 14286, 56229, 21376, 22631, 37571, 53887, 69364, 68010, 59224, 60138, 135778, 90440, 109310, 61320, 103478, 97270, 54979, 76171, 123246, 112171, 100000, 69517, 72848, 70391, 136804, 77334, 109351, 69140, 40232, 1676, 134780, 127727, 78877, 69818, 111743, 81684, 36865, 32899, 102654, 33335, 64915, 23440, 109199, 66748, 18379, 109624, 31331, 29149, 97192]
[2024-12-02 19:04:49.437434] user = 59781 Cloud 158/568
[2024-12-02 19:04:49.465560] user = 59781 Local 158/568
[2024-12-02 19:04:49.580033] user = 59781 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:52.130582] user = 59781 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7809614168247945
Training on augumented user 71436 0/50 current_auc = 0.7809614168247945
User 71436 AUC after training: 0.7833017077798861
User 71436 improves AUC. Keeping the model.
Training on augumented user 14286 1/50 current_auc = 0.7833017077798861
User 14286 AUC after training: 0.783111954459203
User 14286 does not improve AUC. Reverting changes.
Training on augumented user 56229 2/50 current_auc = 0.7833017077798861
User 56229 AUC after training: 0.7832384566729917
User 56229 does not improve AUC. Reverting changes.
Training on augumented user 21376 3/50 current_auc = 0.7833017077798861
User 21376 AUC after training: 0.7833649588867805
User 21376 improves AUC. Keeping the model.
Training on augumented user 22631 4/50 current_auc = 0.7833649588867805
User 22631 AUC after training: 0.7830487033523087
User 22631 does not improve AUC. Reverting changes.
Training on augumented user 37571 5/50 current_auc = 0.7833649588867805
User 37571 AUC after training: 0.7827324478178367
User 37571 does not improve AUC. Reverting changes.
Training on augumented user 53887 6/50 current_auc = 0.7833649588867805
User 53887 AUC after training: 0.7833017077798862
User 53887 does not improve AUC. Reverting changes.
Training on augumented user 69364 7/50 current_auc = 0.7833649588867805
User 69364 AUC after training: 0.7833649588867805
User 69364 does not improve AUC. Reverting changes.
Training on augumented user 68010 8/50 current_auc = 0.7833649588867805
User 68010 AUC after training: 0.7833017077798862
User 68010 does not improve AUC. Reverting changes.
Training on augumented user 59224 9/50 current_auc = 0.7833649588867805
User 59224 AUC after training: 0.7835547122074636
User 59224 improves AUC. Keeping the model.
Training on augumented user 60138 10/50 current_auc = 0.7835547122074636
User 60138 AUC after training: 0.7833649588867805
User 60138 does not improve AUC. Reverting changes.
Training on augumented user 135778 11/50 current_auc = 0.7835547122074636
User 135778 AUC after training: 0.7833017077798861
User 135778 does not improve AUC. Reverting changes.
Training on augumented user 90440 12/50 current_auc = 0.7835547122074636
User 90440 AUC after training: 0.7839974699557242
User 90440 improves AUC. Keeping the model.
Training on augumented user 109310 13/50 current_auc = 0.7839974699557242
User 109310 AUC after training: 0.7835547122074636
User 109310 does not improve AUC. Reverting changes.
Training on augumented user 61320 14/50 current_auc = 0.7839974699557242
User 61320 AUC after training: 0.783617963314358
User 61320 does not improve AUC. Reverting changes.
Training on augumented user 103478 15/50 current_auc = 0.7839974699557242
User 103478 AUC after training: 0.7828589500316255
User 103478 does not improve AUC. Reverting changes.
Training on augumented user 97270 16/50 current_auc = 0.7839974699557242
User 97270 AUC after training: 0.7839342188488299
User 97270 does not improve AUC. Reverting changes.
Training on augumented user 54979 17/50 current_auc = 0.7839974699557242
User 54979 AUC after training: 0.7831752055660974
User 54979 does not improve AUC. Reverting changes.
Training on augumented user 76171 18/50 current_auc = 0.7839974699557242
User 76171 AUC after training: 0.7838709677419355
User 76171 does not improve AUC. Reverting changes.
Training on augumented user 123246 19/50 current_auc = 0.7839974699557242
User 123246 AUC after training: 0.783617963314358
User 123246 does not improve AUC. Reverting changes.
Training on augumented user 112171 20/50 current_auc = 0.7839974699557242
User 112171 AUC after training: 0.7834914611005692
User 112171 does not improve AUC. Reverting changes.
Training on augumented user 100000 21/50 current_auc = 0.7839974699557242
User 100000 AUC after training: 0.783807716635041
User 100000 does not improve AUC. Reverting changes.
Training on augumented user 69517 22/50 current_auc = 0.7839974699557242
User 69517 AUC after training: 0.7835547122074636
User 69517 does not improve AUC. Reverting changes.
Training on augumented user 72848 23/50 current_auc = 0.7839974699557242
User 72848 AUC after training: 0.7833649588867805
User 72848 does not improve AUC. Reverting changes.
Training on augumented user 70391 24/50 current_auc = 0.7839974699557242
User 70391 AUC after training: 0.7834914611005693
User 70391 does not improve AUC. Reverting changes.
Training on augumented user 136804 25/50 current_auc = 0.7839974699557242
User 136804 AUC after training: 0.7836179633143581
User 136804 does not improve AUC. Reverting changes.
Training on augumented user 77334 26/50 current_auc = 0.7839974699557242
User 77334 AUC after training: 0.7827324478178367
User 77334 does not improve AUC. Reverting changes.
Training on augumented user 109351 27/50 current_auc = 0.7839974699557242
User 109351 AUC after training: 0.7834914611005693
User 109351 does not improve AUC. Reverting changes.
Training on augumented user 69140 28/50 current_auc = 0.7839974699557242
User 69140 AUC after training: 0.7838709677419355
User 69140 does not improve AUC. Reverting changes.
Training on augumented user 40232 29/50 current_auc = 0.7839974699557242
User 40232 AUC after training: 0.7832384566729919
User 40232 does not improve AUC. Reverting changes.
Training on augumented user 1676 30/50 current_auc = 0.7839974699557242
User 1676 AUC after training: 0.7834282099936749
User 1676 does not improve AUC. Reverting changes.
Training on augumented user 134780 31/50 current_auc = 0.7839974699557242
User 134780 AUC after training: 0.7839342188488299
User 134780 does not improve AUC. Reverting changes.
Training on augumented user 127727 32/50 current_auc = 0.7839974699557242
User 127727 AUC after training: 0.7832384566729919
User 127727 does not improve AUC. Reverting changes.
Training on augumented user 78877 33/50 current_auc = 0.7839974699557242
User 78877 AUC after training: 0.7841239721695129
User 78877 improves AUC. Keeping the model.
Training on augumented user 69818 34/50 current_auc = 0.7841239721695129
User 69818 AUC after training: 0.7839974699557243
User 69818 does not improve AUC. Reverting changes.
Training on augumented user 111743 35/50 current_auc = 0.7841239721695129
User 111743 AUC after training: 0.7840607210626185
User 111743 does not improve AUC. Reverting changes.
Training on augumented user 81684 36/50 current_auc = 0.7841239721695129
User 81684 AUC after training: 0.7836812144212524
User 81684 does not improve AUC. Reverting changes.
Training on augumented user 36865 37/50 current_auc = 0.7841239721695129
User 36865 AUC after training: 0.7837444655281467
User 36865 does not improve AUC. Reverting changes.
Training on augumented user 32899 38/50 current_auc = 0.7841239721695129
User 32899 AUC after training: 0.7831752055660974
User 32899 does not improve AUC. Reverting changes.
Training on augumented user 102654 39/50 current_auc = 0.7841239721695129
User 102654 AUC after training: 0.7838077166350411
User 102654 does not improve AUC. Reverting changes.
Training on augumented user 33335 40/50 current_auc = 0.7841239721695129
User 33335 AUC after training: 0.784123972169513
User 33335 improves AUC. Keeping the model.
Training on augumented user 64915 41/50 current_auc = 0.784123972169513
User 64915 AUC after training: 0.7844402277039848
User 64915 improves AUC. Keeping the model.
Training on augumented user 23440 42/50 current_auc = 0.7844402277039848
User 23440 AUC after training: 0.784819734345351
User 23440 improves AUC. Keeping the model.
Training on augumented user 109199 43/50 current_auc = 0.784819734345351
User 109199 AUC after training: 0.7848829854522454
User 109199 improves AUC. Keeping the model.
Training on augumented user 66748 44/50 current_auc = 0.7848829854522454
User 66748 AUC after training: 0.7845034788108792
User 66748 does not improve AUC. Reverting changes.
Training on augumented user 18379 45/50 current_auc = 0.7848829854522454
User 18379 AUC after training: 0.7843137254901961
User 18379 does not improve AUC. Reverting changes.
Training on augumented user 109624 46/50 current_auc = 0.7848829854522454
User 109624 AUC after training: 0.7840607210626185
User 109624 does not improve AUC. Reverting changes.
Training on augumented user 31331 47/50 current_auc = 0.7848829854522454
User 31331 AUC after training: 0.784629981024668
User 31331 does not improve AUC. Reverting changes.
Training on augumented user 29149 48/50 current_auc = 0.7848829854522454
User 29149 AUC after training: 0.7850727387729286
User 29149 improves AUC. Keeping the model.
Training on augumented user 97192 49/50 current_auc = 0.7850727387729286
User 97192 AUC after training: 0.7846932321315623
User 97192 does not improve AUC. Reverting changes.
[2024-12-02 19:05:24.952276] start test user 59812 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:25.685967] start test user 59812 159/568 recall augumented users by random, augumented_users = [19688, 67423, 108407, 130436, 21880, 61070, 1973, 128509, 5221, 117235, 20750, 30533, 23245, 132998, 81931, 69933, 27066, 46973, 91247, 132983, 115803, 25558, 60936, 90043, 103066, 83053, 8324, 12507, 59962, 27517, 13079, 77544, 11181, 7691, 49787, 40709, 65555, 8041, 100872, 123149, 26881, 75919, 65581, 14753, 137250, 37193, 120633, 17872, 118664, 23068]
[2024-12-02 19:05:25.703365] user = 59812 Cloud 159/568
[2024-12-02 19:05:25.723696] user = 59812 Local 159/568
[2024-12-02 19:05:25.915513] user = 59812 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:28.623638] user = 59812 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6266203703703703
Training on augumented user 19688 0/50 current_auc = 0.6266203703703703
User 19688 AUC after training: 0.6261574074074074
User 19688 does not improve AUC. Reverting changes.
Training on augumented user 67423 1/50 current_auc = 0.6266203703703703
User 67423 AUC after training: 0.6256944444444444
User 67423 does not improve AUC. Reverting changes.
Training on augumented user 108407 2/50 current_auc = 0.6266203703703703
User 108407 AUC after training: 0.6263888888888889
User 108407 does not improve AUC. Reverting changes.
Training on augumented user 130436 3/50 current_auc = 0.6266203703703703
User 130436 AUC after training: 0.6266203703703703
User 130436 does not improve AUC. Reverting changes.
Training on augumented user 21880 4/50 current_auc = 0.6266203703703703
User 21880 AUC after training: 0.6261574074074073
User 21880 does not improve AUC. Reverting changes.
Training on augumented user 61070 5/50 current_auc = 0.6266203703703703
User 61070 AUC after training: 0.6261574074074073
User 61070 does not improve AUC. Reverting changes.
Training on augumented user 1973 6/50 current_auc = 0.6266203703703703
User 1973 AUC after training: 0.6268518518518519
User 1973 improves AUC. Keeping the model.
Training on augumented user 128509 7/50 current_auc = 0.6268518518518519
User 128509 AUC after training: 0.6256944444444444
User 128509 does not improve AUC. Reverting changes.
Training on augumented user 5221 8/50 current_auc = 0.6268518518518519
User 5221 AUC after training: 0.6270833333333333
User 5221 improves AUC. Keeping the model.
Training on augumented user 117235 9/50 current_auc = 0.6270833333333333
User 117235 AUC after training: 0.6266203703703703
User 117235 does not improve AUC. Reverting changes.
Training on augumented user 20750 10/50 current_auc = 0.6270833333333333
User 20750 AUC after training: 0.624537037037037
User 20750 does not improve AUC. Reverting changes.
Training on augumented user 30533 11/50 current_auc = 0.6270833333333333
User 30533 AUC after training: 0.6270833333333333
User 30533 does not improve AUC. Reverting changes.
Training on augumented user 23245 12/50 current_auc = 0.6270833333333333
User 23245 AUC after training: 0.6270833333333333
User 23245 does not improve AUC. Reverting changes.
Training on augumented user 132998 13/50 current_auc = 0.6270833333333333
User 132998 AUC after training: 0.6263888888888889
User 132998 does not improve AUC. Reverting changes.
Training on augumented user 81931 14/50 current_auc = 0.6270833333333333
User 81931 AUC after training: 0.6268518518518518
User 81931 does not improve AUC. Reverting changes.
Training on augumented user 69933 15/50 current_auc = 0.6270833333333333
User 69933 AUC after training: 0.6268518518518519
User 69933 does not improve AUC. Reverting changes.
Training on augumented user 27066 16/50 current_auc = 0.6270833333333333
User 27066 AUC after training: 0.6263888888888889
User 27066 does not improve AUC. Reverting changes.
Training on augumented user 46973 17/50 current_auc = 0.6270833333333333
User 46973 AUC after training: 0.6259259259259259
User 46973 does not improve AUC. Reverting changes.
Training on augumented user 91247 18/50 current_auc = 0.6270833333333333
User 91247 AUC after training: 0.6247685185185186
User 91247 does not improve AUC. Reverting changes.
Training on augumented user 132983 19/50 current_auc = 0.6270833333333333
User 132983 AUC after training: 0.6268518518518519
User 132983 does not improve AUC. Reverting changes.
Training on augumented user 115803 20/50 current_auc = 0.6270833333333333
User 115803 AUC after training: 0.6249999999999999
User 115803 does not improve AUC. Reverting changes.
Training on augumented user 25558 21/50 current_auc = 0.6270833333333333
User 25558 AUC after training: 0.6266203703703703
User 25558 does not improve AUC. Reverting changes.
Training on augumented user 60936 22/50 current_auc = 0.6270833333333333
User 60936 AUC after training: 0.6266203703703703
User 60936 does not improve AUC. Reverting changes.
Training on augumented user 90043 23/50 current_auc = 0.6270833333333333
User 90043 AUC after training: 0.6259259259259259
User 90043 does not improve AUC. Reverting changes.
Training on augumented user 103066 24/50 current_auc = 0.6270833333333333
User 103066 AUC after training: 0.6259259259259259
User 103066 does not improve AUC. Reverting changes.
Training on augumented user 83053 25/50 current_auc = 0.6270833333333333
User 83053 AUC after training: 0.6270833333333333
User 83053 does not improve AUC. Reverting changes.
Training on augumented user 8324 26/50 current_auc = 0.6270833333333333
User 8324 AUC after training: 0.6266203703703703
User 8324 does not improve AUC. Reverting changes.
Training on augumented user 12507 27/50 current_auc = 0.6270833333333333
User 12507 AUC after training: 0.6268518518518519
User 12507 does not improve AUC. Reverting changes.
Training on augumented user 59962 28/50 current_auc = 0.6270833333333333
User 59962 AUC after training: 0.6266203703703704
User 59962 does not improve AUC. Reverting changes.
Training on augumented user 27517 29/50 current_auc = 0.6270833333333333
User 27517 AUC after training: 0.6268518518518519
User 27517 does not improve AUC. Reverting changes.
Training on augumented user 13079 30/50 current_auc = 0.6270833333333333
User 13079 AUC after training: 0.6263888888888889
User 13079 does not improve AUC. Reverting changes.
Training on augumented user 77544 31/50 current_auc = 0.6270833333333333
User 77544 AUC after training: 0.6270833333333333
User 77544 does not improve AUC. Reverting changes.
Training on augumented user 11181 32/50 current_auc = 0.6270833333333333
User 11181 AUC after training: 0.6263888888888889
User 11181 does not improve AUC. Reverting changes.
Training on augumented user 7691 33/50 current_auc = 0.6270833333333333
User 7691 AUC after training: 0.6259259259259259
User 7691 does not improve AUC. Reverting changes.
Training on augumented user 49787 34/50 current_auc = 0.6270833333333333
User 49787 AUC after training: 0.6266203703703704
User 49787 does not improve AUC. Reverting changes.
Training on augumented user 40709 35/50 current_auc = 0.6270833333333333
User 40709 AUC after training: 0.6268518518518519
User 40709 does not improve AUC. Reverting changes.
Training on augumented user 65555 36/50 current_auc = 0.6270833333333333
User 65555 AUC after training: 0.6261574074074073
User 65555 does not improve AUC. Reverting changes.
Training on augumented user 8041 37/50 current_auc = 0.6270833333333333
User 8041 AUC after training: 0.6259259259259259
User 8041 does not improve AUC. Reverting changes.
Training on augumented user 100872 38/50 current_auc = 0.6270833333333333
User 100872 AUC after training: 0.6259259259259259
User 100872 does not improve AUC. Reverting changes.
Training on augumented user 123149 39/50 current_auc = 0.6270833333333333
User 123149 AUC after training: 0.6261574074074073
User 123149 does not improve AUC. Reverting changes.
Training on augumented user 26881 40/50 current_auc = 0.6270833333333333
User 26881 AUC after training: 0.6259259259259259
User 26881 does not improve AUC. Reverting changes.
Training on augumented user 75919 41/50 current_auc = 0.6270833333333333
User 75919 AUC after training: 0.6266203703703704
User 75919 does not improve AUC. Reverting changes.
Training on augumented user 65581 42/50 current_auc = 0.6270833333333333
User 65581 AUC after training: 0.6263888888888889
User 65581 does not improve AUC. Reverting changes.
Training on augumented user 14753 43/50 current_auc = 0.6270833333333333
User 14753 AUC after training: 0.625462962962963
User 14753 does not improve AUC. Reverting changes.
Training on augumented user 137250 44/50 current_auc = 0.6270833333333333
User 137250 AUC after training: 0.6263888888888889
User 137250 does not improve AUC. Reverting changes.
Training on augumented user 37193 45/50 current_auc = 0.6270833333333333
User 37193 AUC after training: 0.6268518518518519
User 37193 does not improve AUC. Reverting changes.
Training on augumented user 120633 46/50 current_auc = 0.6270833333333333
User 120633 AUC after training: 0.6261574074074074
User 120633 does not improve AUC. Reverting changes.
Training on augumented user 17872 47/50 current_auc = 0.6270833333333333
User 17872 AUC after training: 0.625462962962963
User 17872 does not improve AUC. Reverting changes.
Training on augumented user 118664 48/50 current_auc = 0.6270833333333333
User 118664 AUC after training: 0.6266203703703703
User 118664 does not improve AUC. Reverting changes.
Training on augumented user 23068 49/50 current_auc = 0.6270833333333333
User 23068 AUC after training: 0.6256944444444444
User 23068 does not improve AUC. Reverting changes.
[2024-12-02 19:05:57.319751] start test user 59816 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:57.793440] start test user 59816 160/568 recall augumented users by random, augumented_users = [132282, 79310, 52190, 79404, 87667, 9118, 115036, 32946, 4141, 8580, 23202, 43831, 114722, 9128, 55244, 47613, 75324, 75734, 105840, 8742, 67503, 135091, 30336, 136305, 67019, 9674, 54074, 126482, 22530, 100615, 58435, 66382, 3579, 16107, 97209, 71461, 53992, 8402, 87636, 97874, 7119, 64960, 15091, 81772, 55314, 22439, 2453, 40394, 99420, 111555]
[2024-12-02 19:05:57.807414] user = 59816 Cloud 160/568
[2024-12-02 19:05:57.820422] user = 59816 Local 160/568
[2024-12-02 19:05:57.838818] user = 59816 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:59.678286] user = 59816 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6285714285714286
Training on augumented user 132282 0/50 current_auc = 0.6285714285714286
User 132282 AUC after training: 0.6285714285714286
User 132282 does not improve AUC. Reverting changes.
Training on augumented user 79310 1/50 current_auc = 0.6285714285714286
User 79310 AUC after training: 0.6178571428571429
User 79310 does not improve AUC. Reverting changes.
Training on augumented user 52190 2/50 current_auc = 0.6285714285714286
User 52190 AUC after training: 0.625
User 52190 does not improve AUC. Reverting changes.
Training on augumented user 79404 3/50 current_auc = 0.6285714285714286
User 79404 AUC after training: 0.625
User 79404 does not improve AUC. Reverting changes.
Training on augumented user 87667 4/50 current_auc = 0.6285714285714286
User 87667 AUC after training: 0.6214285714285714
User 87667 does not improve AUC. Reverting changes.
Training on augumented user 9118 5/50 current_auc = 0.6285714285714286
User 9118 AUC after training: 0.6178571428571429
User 9118 does not improve AUC. Reverting changes.
Training on augumented user 115036 6/50 current_auc = 0.6285714285714286
User 115036 AUC after training: 0.625
User 115036 does not improve AUC. Reverting changes.
Training on augumented user 32946 7/50 current_auc = 0.6285714285714286
User 32946 AUC after training: 0.6321428571428571
User 32946 improves AUC. Keeping the model.
Training on augumented user 4141 8/50 current_auc = 0.6321428571428571
User 4141 AUC after training: 0.6285714285714286
User 4141 does not improve AUC. Reverting changes.
Training on augumented user 8580 9/50 current_auc = 0.6321428571428571
User 8580 AUC after training: 0.6357142857142857
User 8580 improves AUC. Keeping the model.
Training on augumented user 23202 10/50 current_auc = 0.6357142857142857
User 23202 AUC after training: 0.6285714285714286
User 23202 does not improve AUC. Reverting changes.
Training on augumented user 43831 11/50 current_auc = 0.6357142857142857
User 43831 AUC after training: 0.6357142857142857
User 43831 does not improve AUC. Reverting changes.
Training on augumented user 114722 12/50 current_auc = 0.6357142857142857
User 114722 AUC after training: 0.6357142857142857
User 114722 does not improve AUC. Reverting changes.
Training on augumented user 9128 13/50 current_auc = 0.6357142857142857
User 9128 AUC after training: 0.6357142857142857
User 9128 does not improve AUC. Reverting changes.
Training on augumented user 55244 14/50 current_auc = 0.6357142857142857
User 55244 AUC after training: 0.6142857142857143
User 55244 does not improve AUC. Reverting changes.
Training on augumented user 47613 15/50 current_auc = 0.6357142857142857
User 47613 AUC after training: 0.6357142857142857
User 47613 does not improve AUC. Reverting changes.
Training on augumented user 75324 16/50 current_auc = 0.6357142857142857
User 75324 AUC after training: 0.6321428571428571
User 75324 does not improve AUC. Reverting changes.
Training on augumented user 75734 17/50 current_auc = 0.6357142857142857
User 75734 AUC after training: 0.6321428571428571
User 75734 does not improve AUC. Reverting changes.
Training on augumented user 105840 18/50 current_auc = 0.6357142857142857
User 105840 AUC after training: 0.6392857142857142
User 105840 improves AUC. Keeping the model.
Training on augumented user 8742 19/50 current_auc = 0.6392857142857142
User 8742 AUC after training: 0.6464285714285715
User 8742 improves AUC. Keeping the model.
Training on augumented user 67503 20/50 current_auc = 0.6464285714285715
User 67503 AUC after training: 0.6357142857142857
User 67503 does not improve AUC. Reverting changes.
Training on augumented user 135091 21/50 current_auc = 0.6464285714285715
User 135091 AUC after training: 0.6464285714285715
User 135091 does not improve AUC. Reverting changes.
Training on augumented user 30336 22/50 current_auc = 0.6464285714285715
User 30336 AUC after training: 0.6285714285714286
User 30336 does not improve AUC. Reverting changes.
Training on augumented user 136305 23/50 current_auc = 0.6464285714285715
User 136305 AUC after training: 0.6357142857142857
User 136305 does not improve AUC. Reverting changes.
Training on augumented user 67019 24/50 current_auc = 0.6464285714285715
User 67019 AUC after training: 0.6464285714285715
User 67019 does not improve AUC. Reverting changes.
Training on augumented user 9674 25/50 current_auc = 0.6464285714285715
User 9674 AUC after training: 0.6357142857142857
User 9674 does not improve AUC. Reverting changes.
Training on augumented user 54074 26/50 current_auc = 0.6464285714285715
User 54074 AUC after training: 0.6392857142857142
User 54074 does not improve AUC. Reverting changes.
Training on augumented user 126482 27/50 current_auc = 0.6464285714285715
User 126482 AUC after training: 0.6392857142857142
User 126482 does not improve AUC. Reverting changes.
Training on augumented user 22530 28/50 current_auc = 0.6464285714285715
User 22530 AUC after training: 0.6464285714285715
User 22530 does not improve AUC. Reverting changes.
Training on augumented user 100615 29/50 current_auc = 0.6464285714285715
User 100615 AUC after training: 0.6464285714285714
User 100615 does not improve AUC. Reverting changes.
Training on augumented user 58435 30/50 current_auc = 0.6464285714285715
User 58435 AUC after training: 0.6464285714285715
User 58435 does not improve AUC. Reverting changes.
Training on augumented user 66382 31/50 current_auc = 0.6464285714285715
User 66382 AUC after training: 0.6392857142857142
User 66382 does not improve AUC. Reverting changes.
Training on augumented user 3579 32/50 current_auc = 0.6464285714285715
User 3579 AUC after training: 0.6357142857142857
User 3579 does not improve AUC. Reverting changes.
Training on augumented user 16107 33/50 current_auc = 0.6464285714285715
User 16107 AUC after training: 0.6428571428571429
User 16107 does not improve AUC. Reverting changes.
Training on augumented user 97209 34/50 current_auc = 0.6464285714285715
User 97209 AUC after training: 0.6428571428571428
User 97209 does not improve AUC. Reverting changes.
Training on augumented user 71461 35/50 current_auc = 0.6464285714285715
User 71461 AUC after training: 0.65
User 71461 improves AUC. Keeping the model.
Training on augumented user 53992 36/50 current_auc = 0.65
User 53992 AUC after training: 0.65
User 53992 does not improve AUC. Reverting changes.
Training on augumented user 8402 37/50 current_auc = 0.65
User 8402 AUC after training: 0.65
User 8402 does not improve AUC. Reverting changes.
Training on augumented user 87636 38/50 current_auc = 0.65
User 87636 AUC after training: 0.65
User 87636 does not improve AUC. Reverting changes.
Training on augumented user 97874 39/50 current_auc = 0.65
User 97874 AUC after training: 0.65
User 97874 does not improve AUC. Reverting changes.
Training on augumented user 7119 40/50 current_auc = 0.65
User 7119 AUC after training: 0.65
User 7119 does not improve AUC. Reverting changes.
Training on augumented user 64960 41/50 current_auc = 0.65
User 64960 AUC after training: 0.65
User 64960 does not improve AUC. Reverting changes.
Training on augumented user 15091 42/50 current_auc = 0.65
User 15091 AUC after training: 0.65
User 15091 does not improve AUC. Reverting changes.
Training on augumented user 81772 43/50 current_auc = 0.65
User 81772 AUC after training: 0.65
User 81772 does not improve AUC. Reverting changes.
Training on augumented user 55314 44/50 current_auc = 0.65
User 55314 AUC after training: 0.65
User 55314 does not improve AUC. Reverting changes.
Training on augumented user 22439 45/50 current_auc = 0.65
User 22439 AUC after training: 0.65
User 22439 does not improve AUC. Reverting changes.
Training on augumented user 2453 46/50 current_auc = 0.65
User 2453 AUC after training: 0.65
User 2453 does not improve AUC. Reverting changes.
Training on augumented user 40394 47/50 current_auc = 0.65
User 40394 AUC after training: 0.65
User 40394 does not improve AUC. Reverting changes.
Training on augumented user 99420 48/50 current_auc = 0.65
User 99420 AUC after training: 0.65
User 99420 does not improve AUC. Reverting changes.
Training on augumented user 111555 49/50 current_auc = 0.65
User 111555 AUC after training: 0.65
User 111555 does not improve AUC. Reverting changes.
[2024-12-02 19:06:25.286581] start test user 59830 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:25.755010] start test user 59830 161/568 recall augumented users by random, augumented_users = [48072, 44090, 34388, 60268, 115853, 87795, 20609, 40480, 43579, 26214, 107924, 132431, 65088, 23563, 58103, 45461, 48185, 7157, 110969, 136283, 79884, 136319, 120807, 136523, 41016, 85419, 63776, 11283, 117892, 74176, 59467, 95842, 51907, 17231, 86559, 126656, 886, 113146, 22193, 128627, 8952, 135702, 62099, 88423, 114185, 106354, 81341, 81747, 33070, 56600]
[2024-12-02 19:06:25.769767] user = 59830 Cloud 161/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:25.783619] user = 59830 Local 161/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:25.805945] user = 59830 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:27.580227] user = 59830 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 48072 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48072 AUC after training: 0.5
User 48072 does not improve AUC. Reverting changes.
Training on augumented user 44090 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44090 AUC after training: 0.5
User 44090 does not improve AUC. Reverting changes.
Training on augumented user 34388 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34388 AUC after training: 0.5
User 34388 does not improve AUC. Reverting changes.
Training on augumented user 60268 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60268 AUC after training: 0.5
User 60268 does not improve AUC. Reverting changes.
Training on augumented user 115853 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115853 AUC after training: 0.5
User 115853 does not improve AUC. Reverting changes.
Training on augumented user 87795 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87795 AUC after training: 0.5
User 87795 does not improve AUC. Reverting changes.
Training on augumented user 20609 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20609 AUC after training: 0.5
User 20609 does not improve AUC. Reverting changes.
Training on augumented user 40480 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40480 AUC after training: 0.5
User 40480 does not improve AUC. Reverting changes.
Training on augumented user 43579 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43579 AUC after training: 0.5
User 43579 does not improve AUC. Reverting changes.
Training on augumented user 26214 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26214 AUC after training: 0.5
User 26214 does not improve AUC. Reverting changes.
Training on augumented user 107924 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107924 AUC after training: 0.5
User 107924 does not improve AUC. Reverting changes.
Training on augumented user 132431 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132431 AUC after training: 0.5
User 132431 does not improve AUC. Reverting changes.
Training on augumented user 65088 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65088 AUC after training: 0.5
User 65088 does not improve AUC. Reverting changes.
Training on augumented user 23563 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23563 AUC after training: 0.5
User 23563 does not improve AUC. Reverting changes.
Training on augumented user 58103 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58103 AUC after training: 0.5
User 58103 does not improve AUC. Reverting changes.
Training on augumented user 45461 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45461 AUC after training: 0.5
User 45461 does not improve AUC. Reverting changes.
Training on augumented user 48185 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48185 AUC after training: 0.5
User 48185 does not improve AUC. Reverting changes.
Training on augumented user 7157 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7157 AUC after training: 0.5
User 7157 does not improve AUC. Reverting changes.
Training on augumented user 110969 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110969 AUC after training: 0.5
User 110969 does not improve AUC. Reverting changes.
Training on augumented user 136283 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136283 AUC after training: 0.5
User 136283 does not improve AUC. Reverting changes.
Training on augumented user 79884 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79884 AUC after training: 0.5
User 79884 does not improve AUC. Reverting changes.
Training on augumented user 136319 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136319 AUC after training: 0.5
User 136319 does not improve AUC. Reverting changes.
Training on augumented user 120807 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120807 AUC after training: 0.5
User 120807 does not improve AUC. Reverting changes.
Training on augumented user 136523 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136523 AUC after training: 0.5
User 136523 does not improve AUC. Reverting changes.
Training on augumented user 41016 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41016 AUC after training: 0.5
User 41016 does not improve AUC. Reverting changes.
Training on augumented user 85419 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85419 AUC after training: 0.5
User 85419 does not improve AUC. Reverting changes.
Training on augumented user 63776 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63776 AUC after training: 0.5
User 63776 does not improve AUC. Reverting changes.
Training on augumented user 11283 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11283 AUC after training: 0.5
User 11283 does not improve AUC. Reverting changes.
Training on augumented user 117892 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117892 AUC after training: 0.5
User 117892 does not improve AUC. Reverting changes.
Training on augumented user 74176 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74176 AUC after training: 0.5
User 74176 does not improve AUC. Reverting changes.
Training on augumented user 59467 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59467 AUC after training: 0.5
User 59467 does not improve AUC. Reverting changes.
Training on augumented user 95842 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95842 AUC after training: 0.5
User 95842 does not improve AUC. Reverting changes.
Training on augumented user 51907 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51907 AUC after training: 0.5
User 51907 does not improve AUC. Reverting changes.
Training on augumented user 17231 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17231 AUC after training: 0.5
User 17231 does not improve AUC. Reverting changes.
Training on augumented user 86559 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86559 AUC after training: 0.5
User 86559 does not improve AUC. Reverting changes.
Training on augumented user 126656 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126656 AUC after training: 0.5
User 126656 does not improve AUC. Reverting changes.
Training on augumented user 886 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 886 AUC after training: 0.5
User 886 does not improve AUC. Reverting changes.
Training on augumented user 113146 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113146 AUC after training: 0.5
User 113146 does not improve AUC. Reverting changes.
Training on augumented user 22193 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22193 AUC after training: 0.5
User 22193 does not improve AUC. Reverting changes.
Training on augumented user 128627 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128627 AUC after training: 0.5
User 128627 does not improve AUC. Reverting changes.
Training on augumented user 8952 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8952 AUC after training: 0.5
User 8952 does not improve AUC. Reverting changes.
Training on augumented user 135702 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135702 AUC after training: 0.5
User 135702 does not improve AUC. Reverting changes.
Training on augumented user 62099 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62099 AUC after training: 0.5
User 62099 does not improve AUC. Reverting changes.
Training on augumented user 88423 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88423 AUC after training: 0.5
User 88423 does not improve AUC. Reverting changes.
Training on augumented user 114185 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114185 AUC after training: 0.5
User 114185 does not improve AUC. Reverting changes.
Training on augumented user 106354 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106354 AUC after training: 0.5
User 106354 does not improve AUC. Reverting changes.
Training on augumented user 81341 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81341 AUC after training: 0.5
User 81341 does not improve AUC. Reverting changes.
Training on augumented user 81747 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81747 AUC after training: 0.5
User 81747 does not improve AUC. Reverting changes.
Training on augumented user 33070 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33070 AUC after training: 0.5
User 33070 does not improve AUC. Reverting changes.
Training on augumented user 56600 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56600 AUC after training: 0.5
User 56600 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:57.902594] start test user 59849 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:58.380166] start test user 59849 162/568 recall augumented users by random, augumented_users = [46050, 90818, 102729, 32245, 123700, 80793, 134652, 32709, 48730, 29033, 58935, 21083, 114016, 121179, 87823, 86277, 34220, 70864, 96094, 83410, 23128, 54500, 122090, 64056, 131009, 133914, 89036, 25084, 46373, 43467, 111827, 58571, 29733, 99547, 133564, 51547, 35268, 13703, 65458, 97552, 62150, 118356, 8272, 37677, 129782, 41587, 137840, 95754, 38244, 123119]
[2024-12-02 19:06:58.394998] user = 59849 Cloud 162/568
[2024-12-02 19:06:58.409975] user = 59849 Local 162/568
[2024-12-02 19:06:58.459781] user = 59849 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:59.736723] user = 59849 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7182692307692308
Training on augumented user 46050 0/50 current_auc = 0.7182692307692308
User 46050 AUC after training: 0.7190705128205128
User 46050 improves AUC. Keeping the model.
Training on augumented user 90818 1/50 current_auc = 0.7190705128205128
User 90818 AUC after training: 0.7177884615384615
User 90818 does not improve AUC. Reverting changes.
Training on augumented user 102729 2/50 current_auc = 0.7190705128205128
User 102729 AUC after training: 0.7189102564102564
User 102729 does not improve AUC. Reverting changes.
Training on augumented user 32245 3/50 current_auc = 0.7190705128205128
User 32245 AUC after training: 0.7198717948717949
User 32245 improves AUC. Keeping the model.
Training on augumented user 123700 4/50 current_auc = 0.7198717948717949
User 123700 AUC after training: 0.7185897435897436
User 123700 does not improve AUC. Reverting changes.
Training on augumented user 80793 5/50 current_auc = 0.7198717948717949
User 80793 AUC after training: 0.7184294871794872
User 80793 does not improve AUC. Reverting changes.
Training on augumented user 134652 6/50 current_auc = 0.7198717948717949
User 134652 AUC after training: 0.7185897435897436
User 134652 does not improve AUC. Reverting changes.
Training on augumented user 32709 7/50 current_auc = 0.7198717948717949
User 32709 AUC after training: 0.7197115384615385
User 32709 does not improve AUC. Reverting changes.
Training on augumented user 48730 8/50 current_auc = 0.7198717948717949
User 48730 AUC after training: 0.7189102564102564
User 48730 does not improve AUC. Reverting changes.
Training on augumented user 29033 9/50 current_auc = 0.7198717948717949
User 29033 AUC after training: 0.7189102564102564
User 29033 does not improve AUC. Reverting changes.
Training on augumented user 58935 10/50 current_auc = 0.7198717948717949
User 58935 AUC after training: 0.719551282051282
User 58935 does not improve AUC. Reverting changes.
Training on augumented user 21083 11/50 current_auc = 0.7198717948717949
User 21083 AUC after training: 0.7189102564102564
User 21083 does not improve AUC. Reverting changes.
Training on augumented user 114016 12/50 current_auc = 0.7198717948717949
User 114016 AUC after training: 0.7213141025641026
User 114016 improves AUC. Keeping the model.
Training on augumented user 121179 13/50 current_auc = 0.7213141025641026
User 121179 AUC after training: 0.7206730769230769
User 121179 does not improve AUC. Reverting changes.
Training on augumented user 87823 14/50 current_auc = 0.7213141025641026
User 87823 AUC after training: 0.7216346153846155
User 87823 improves AUC. Keeping the model.
Training on augumented user 86277 15/50 current_auc = 0.7216346153846155
User 86277 AUC after training: 0.7227564102564102
User 86277 improves AUC. Keeping the model.
Training on augumented user 34220 16/50 current_auc = 0.7227564102564102
User 34220 AUC after training: 0.7232371794871795
User 34220 improves AUC. Keeping the model.
Training on augumented user 70864 17/50 current_auc = 0.7232371794871795
User 70864 AUC after training: 0.7232371794871795
User 70864 does not improve AUC. Reverting changes.
Training on augumented user 96094 18/50 current_auc = 0.7232371794871795
User 96094 AUC after training: 0.7209935897435897
User 96094 does not improve AUC. Reverting changes.
Training on augumented user 83410 19/50 current_auc = 0.7232371794871795
User 83410 AUC after training: 0.7238782051282051
User 83410 improves AUC. Keeping the model.
Training on augumented user 23128 20/50 current_auc = 0.7238782051282051
User 23128 AUC after training: 0.7241987179487179
User 23128 improves AUC. Keeping the model.
Training on augumented user 54500 21/50 current_auc = 0.7241987179487179
User 54500 AUC after training: 0.7241987179487179
User 54500 does not improve AUC. Reverting changes.
Training on augumented user 122090 22/50 current_auc = 0.7241987179487179
User 122090 AUC after training: 0.7245192307692307
User 122090 improves AUC. Keeping the model.
Training on augumented user 64056 23/50 current_auc = 0.7245192307692307
User 64056 AUC after training: 0.7240384615384615
User 64056 does not improve AUC. Reverting changes.
Training on augumented user 131009 24/50 current_auc = 0.7245192307692307
User 131009 AUC after training: 0.7241987179487179
User 131009 does not improve AUC. Reverting changes.
Training on augumented user 133914 25/50 current_auc = 0.7245192307692307
User 133914 AUC after training: 0.7208333333333334
User 133914 does not improve AUC. Reverting changes.
Training on augumented user 89036 26/50 current_auc = 0.7245192307692307
User 89036 AUC after training: 0.7243589743589743
User 89036 does not improve AUC. Reverting changes.
Training on augumented user 25084 27/50 current_auc = 0.7245192307692307
User 25084 AUC after training: 0.7240384615384615
User 25084 does not improve AUC. Reverting changes.
Training on augumented user 46373 28/50 current_auc = 0.7245192307692307
User 46373 AUC after training: 0.7229166666666667
User 46373 does not improve AUC. Reverting changes.
Training on augumented user 43467 29/50 current_auc = 0.7245192307692307
User 43467 AUC after training: 0.7229166666666667
User 43467 does not improve AUC. Reverting changes.
Training on augumented user 111827 30/50 current_auc = 0.7245192307692307
User 111827 AUC after training: 0.7211538461538461
User 111827 does not improve AUC. Reverting changes.
Training on augumented user 58571 31/50 current_auc = 0.7245192307692307
User 58571 AUC after training: 0.7241987179487179
User 58571 does not improve AUC. Reverting changes.
Training on augumented user 29733 32/50 current_auc = 0.7245192307692307
User 29733 AUC after training: 0.7229166666666667
User 29733 does not improve AUC. Reverting changes.
Training on augumented user 99547 33/50 current_auc = 0.7245192307692307
User 99547 AUC after training: 0.7241987179487179
User 99547 does not improve AUC. Reverting changes.
Training on augumented user 133564 34/50 current_auc = 0.7245192307692307
User 133564 AUC after training: 0.7232371794871795
User 133564 does not improve AUC. Reverting changes.
Training on augumented user 51547 35/50 current_auc = 0.7245192307692307
User 51547 AUC after training: 0.7176282051282051
User 51547 does not improve AUC. Reverting changes.
Training on augumented user 35268 36/50 current_auc = 0.7245192307692307
User 35268 AUC after training: 0.7251602564102564
User 35268 improves AUC. Keeping the model.
Training on augumented user 13703 37/50 current_auc = 0.7251602564102564
User 13703 AUC after training: 0.7248397435897436
User 13703 does not improve AUC. Reverting changes.
Training on augumented user 65458 38/50 current_auc = 0.7251602564102564
User 65458 AUC after training: 0.7248397435897436
User 65458 does not improve AUC. Reverting changes.
Training on augumented user 97552 39/50 current_auc = 0.7251602564102564
User 97552 AUC after training: 0.7240384615384615
User 97552 does not improve AUC. Reverting changes.
Training on augumented user 62150 40/50 current_auc = 0.7251602564102564
User 62150 AUC after training: 0.7251602564102564
User 62150 does not improve AUC. Reverting changes.
Training on augumented user 118356 41/50 current_auc = 0.7251602564102564
User 118356 AUC after training: 0.7248397435897436
User 118356 does not improve AUC. Reverting changes.
Training on augumented user 8272 42/50 current_auc = 0.7251602564102564
User 8272 AUC after training: 0.722275641025641
User 8272 does not improve AUC. Reverting changes.
Training on augumented user 37677 43/50 current_auc = 0.7251602564102564
User 37677 AUC after training: 0.7240384615384615
User 37677 does not improve AUC. Reverting changes.
Training on augumented user 129782 44/50 current_auc = 0.7251602564102564
User 129782 AUC after training: 0.7233974358974359
User 129782 does not improve AUC. Reverting changes.
Training on augumented user 41587 45/50 current_auc = 0.7251602564102564
User 41587 AUC after training: 0.7245192307692307
User 41587 does not improve AUC. Reverting changes.
Training on augumented user 137840 46/50 current_auc = 0.7251602564102564
User 137840 AUC after training: 0.7251602564102564
User 137840 does not improve AUC. Reverting changes.
Training on augumented user 95754 47/50 current_auc = 0.7251602564102564
User 95754 AUC after training: 0.7235576923076923
User 95754 does not improve AUC. Reverting changes.
Training on augumented user 38244 48/50 current_auc = 0.7251602564102564
User 38244 AUC after training: 0.7245192307692307
User 38244 does not improve AUC. Reverting changes.
Training on augumented user 123119 49/50 current_auc = 0.7251602564102564
User 123119 AUC after training: 0.7251602564102564
User 123119 does not improve AUC. Reverting changes.
[2024-12-02 19:07:25.975741] start test user 59852 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:26.452201] start test user 59852 163/568 recall augumented users by random, augumented_users = [10226, 120526, 147, 124525, 14389, 84985, 45976, 100478, 136802, 115351, 125698, 116494, 112597, 65510, 96074, 132700, 90859, 20387, 42979, 9069, 131699, 106833, 71124, 37174, 89540, 6605, 1380, 79948, 14489, 94327, 112313, 76554, 56740, 80429, 80620, 76238, 104839, 104584, 106449, 63457, 75285, 89191, 45662, 11831, 45666, 124361, 78888, 130068, 136528, 39421]
[2024-12-02 19:07:26.470204] user = 59852 Cloud 163/568
[2024-12-02 19:07:26.500237] user = 59852 Local 163/568
[2024-12-02 19:07:27.024940] user = 59852 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:28.820975] user = 59852 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7189265536723164
Training on augumented user 10226 0/50 current_auc = 0.7189265536723164
User 10226 AUC after training: 0.7182203389830509
User 10226 does not improve AUC. Reverting changes.
Training on augumented user 120526 1/50 current_auc = 0.7189265536723164
User 120526 AUC after training: 0.719632768361582
User 120526 improves AUC. Keeping the model.
Training on augumented user 147 2/50 current_auc = 0.719632768361582
User 147 AUC after training: 0.7175141242937854
User 147 does not improve AUC. Reverting changes.
Training on augumented user 124525 3/50 current_auc = 0.719632768361582
User 124525 AUC after training: 0.7203389830508475
User 124525 improves AUC. Keeping the model.
Training on augumented user 14389 4/50 current_auc = 0.7203389830508475
User 14389 AUC after training: 0.7189265536723164
User 14389 does not improve AUC. Reverting changes.
Training on augumented user 84985 5/50 current_auc = 0.7203389830508475
User 84985 AUC after training: 0.7217514124293786
User 84985 improves AUC. Keeping the model.
Training on augumented user 45976 6/50 current_auc = 0.7217514124293786
User 45976 AUC after training: 0.7203389830508474
User 45976 does not improve AUC. Reverting changes.
Training on augumented user 100478 7/50 current_auc = 0.7217514124293786
User 100478 AUC after training: 0.7217514124293786
User 100478 does not improve AUC. Reverting changes.
Training on augumented user 136802 8/50 current_auc = 0.7217514124293786
User 136802 AUC after training: 0.7203389830508475
User 136802 does not improve AUC. Reverting changes.
Training on augumented user 115351 9/50 current_auc = 0.7217514124293786
User 115351 AUC after training: 0.7182203389830508
User 115351 does not improve AUC. Reverting changes.
Training on augumented user 125698 10/50 current_auc = 0.7217514124293786
User 125698 AUC after training: 0.7203389830508475
User 125698 does not improve AUC. Reverting changes.
Training on augumented user 116494 11/50 current_auc = 0.7217514124293786
User 116494 AUC after training: 0.7203389830508475
User 116494 does not improve AUC. Reverting changes.
Training on augumented user 112597 12/50 current_auc = 0.7217514124293786
User 112597 AUC after training: 0.719632768361582
User 112597 does not improve AUC. Reverting changes.
Training on augumented user 65510 13/50 current_auc = 0.7217514124293786
User 65510 AUC after training: 0.721045197740113
User 65510 does not improve AUC. Reverting changes.
Training on augumented user 96074 14/50 current_auc = 0.7217514124293786
User 96074 AUC after training: 0.7217514124293786
User 96074 does not improve AUC. Reverting changes.
Training on augumented user 132700 15/50 current_auc = 0.7217514124293786
User 132700 AUC after training: 0.721045197740113
User 132700 does not improve AUC. Reverting changes.
Training on augumented user 90859 16/50 current_auc = 0.7217514124293786
User 90859 AUC after training: 0.7203389830508475
User 90859 does not improve AUC. Reverting changes.
Training on augumented user 20387 17/50 current_auc = 0.7217514124293786
User 20387 AUC after training: 0.7210451977401131
User 20387 does not improve AUC. Reverting changes.
Training on augumented user 42979 18/50 current_auc = 0.7217514124293786
User 42979 AUC after training: 0.721045197740113
User 42979 does not improve AUC. Reverting changes.
Training on augumented user 9069 19/50 current_auc = 0.7217514124293786
User 9069 AUC after training: 0.7203389830508475
User 9069 does not improve AUC. Reverting changes.
Training on augumented user 131699 20/50 current_auc = 0.7217514124293786
User 131699 AUC after training: 0.7189265536723165
User 131699 does not improve AUC. Reverting changes.
Training on augumented user 106833 21/50 current_auc = 0.7217514124293786
User 106833 AUC after training: 0.7203389830508475
User 106833 does not improve AUC. Reverting changes.
Training on augumented user 71124 22/50 current_auc = 0.7217514124293786
User 71124 AUC after training: 0.719632768361582
User 71124 does not improve AUC. Reverting changes.
Training on augumented user 37174 23/50 current_auc = 0.7217514124293786
User 37174 AUC after training: 0.7203389830508475
User 37174 does not improve AUC. Reverting changes.
Training on augumented user 89540 24/50 current_auc = 0.7217514124293786
User 89540 AUC after training: 0.722457627118644
User 89540 improves AUC. Keeping the model.
Training on augumented user 6605 25/50 current_auc = 0.722457627118644
User 6605 AUC after training: 0.7217514124293786
User 6605 does not improve AUC. Reverting changes.
Training on augumented user 1380 26/50 current_auc = 0.722457627118644
User 1380 AUC after training: 0.7217514124293786
User 1380 does not improve AUC. Reverting changes.
Training on augumented user 79948 27/50 current_auc = 0.722457627118644
User 79948 AUC after training: 0.721045197740113
User 79948 does not improve AUC. Reverting changes.
Training on augumented user 14489 28/50 current_auc = 0.722457627118644
User 14489 AUC after training: 0.722457627118644
User 14489 does not improve AUC. Reverting changes.
Training on augumented user 94327 29/50 current_auc = 0.722457627118644
User 94327 AUC after training: 0.721045197740113
User 94327 does not improve AUC. Reverting changes.
Training on augumented user 112313 30/50 current_auc = 0.722457627118644
User 112313 AUC after training: 0.721045197740113
User 112313 does not improve AUC. Reverting changes.
Training on augumented user 76554 31/50 current_auc = 0.722457627118644
User 76554 AUC after training: 0.722457627118644
User 76554 does not improve AUC. Reverting changes.
Training on augumented user 56740 32/50 current_auc = 0.722457627118644
User 56740 AUC after training: 0.7217514124293786
User 56740 does not improve AUC. Reverting changes.
Training on augumented user 80429 33/50 current_auc = 0.722457627118644
User 80429 AUC after training: 0.7217514124293786
User 80429 does not improve AUC. Reverting changes.
Training on augumented user 80620 34/50 current_auc = 0.722457627118644
User 80620 AUC after training: 0.7217514124293785
User 80620 does not improve AUC. Reverting changes.
Training on augumented user 76238 35/50 current_auc = 0.722457627118644
User 76238 AUC after training: 0.7217514124293786
User 76238 does not improve AUC. Reverting changes.
Training on augumented user 104839 36/50 current_auc = 0.722457627118644
User 104839 AUC after training: 0.722457627118644
User 104839 does not improve AUC. Reverting changes.
Training on augumented user 104584 37/50 current_auc = 0.722457627118644
User 104584 AUC after training: 0.722457627118644
User 104584 does not improve AUC. Reverting changes.
Training on augumented user 106449 38/50 current_auc = 0.722457627118644
User 106449 AUC after training: 0.7217514124293786
User 106449 does not improve AUC. Reverting changes.
Training on augumented user 63457 39/50 current_auc = 0.722457627118644
User 63457 AUC after training: 0.7217514124293786
User 63457 does not improve AUC. Reverting changes.
Training on augumented user 75285 40/50 current_auc = 0.722457627118644
User 75285 AUC after training: 0.722457627118644
User 75285 does not improve AUC. Reverting changes.
Training on augumented user 89191 41/50 current_auc = 0.722457627118644
User 89191 AUC after training: 0.7217514124293786
User 89191 does not improve AUC. Reverting changes.
Training on augumented user 45662 42/50 current_auc = 0.722457627118644
User 45662 AUC after training: 0.722457627118644
User 45662 does not improve AUC. Reverting changes.
Training on augumented user 11831 43/50 current_auc = 0.722457627118644
User 11831 AUC after training: 0.7217514124293786
User 11831 does not improve AUC. Reverting changes.
Training on augumented user 45666 44/50 current_auc = 0.722457627118644
User 45666 AUC after training: 0.7224576271186441
User 45666 improves AUC. Keeping the model.
Training on augumented user 124361 45/50 current_auc = 0.7224576271186441
User 124361 AUC after training: 0.7224576271186441
User 124361 does not improve AUC. Reverting changes.
Training on augumented user 78888 46/50 current_auc = 0.7224576271186441
User 78888 AUC after training: 0.7224576271186441
User 78888 does not improve AUC. Reverting changes.
Training on augumented user 130068 47/50 current_auc = 0.7224576271186441
User 130068 AUC after training: 0.7238700564971752
User 130068 improves AUC. Keeping the model.
Training on augumented user 136528 48/50 current_auc = 0.7238700564971752
User 136528 AUC after training: 0.7224576271186441
User 136528 does not improve AUC. Reverting changes.
Training on augumented user 39421 49/50 current_auc = 0.7238700564971752
User 39421 AUC after training: 0.7231638418079096
User 39421 does not improve AUC. Reverting changes.
[2024-12-02 19:08:01.444407] start test user 59853 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:02.215853] start test user 59853 164/568 recall augumented users by random, augumented_users = [87462, 73960, 79585, 26944, 65577, 96224, 29544, 102443, 34245, 125372, 128899, 63952, 24155, 29873, 71768, 119257, 42284, 15734, 127185, 46496, 10558, 92884, 105361, 90162, 48863, 69094, 115005, 113445, 69851, 131230, 125122, 21664, 10742, 25624, 92669, 62262, 116246, 12498, 72806, 13359, 97069, 34607, 69581, 127381, 124158, 35926, 94594, 68991, 63580, 47366]
[2024-12-02 19:08:02.231514] user = 59853 Cloud 164/568
[2024-12-02 19:08:02.242682] user = 59853 Local 164/568
[2024-12-02 19:08:02.374434] user = 59853 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:05.555331] user = 59853 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5421052631578948
Training on augumented user 87462 0/50 current_auc = 0.5421052631578948
User 87462 AUC after training: 0.5403508771929825
User 87462 does not improve AUC. Reverting changes.
Training on augumented user 73960 1/50 current_auc = 0.5421052631578948
User 73960 AUC after training: 0.5368421052631579
User 73960 does not improve AUC. Reverting changes.
Training on augumented user 79585 2/50 current_auc = 0.5421052631578948
User 79585 AUC after training: 0.5403508771929825
User 79585 does not improve AUC. Reverting changes.
Training on augumented user 26944 3/50 current_auc = 0.5421052631578948
User 26944 AUC after training: 0.543859649122807
User 26944 improves AUC. Keeping the model.
Training on augumented user 65577 4/50 current_auc = 0.543859649122807
User 65577 AUC after training: 0.5456140350877193
User 65577 improves AUC. Keeping the model.
Training on augumented user 96224 5/50 current_auc = 0.5456140350877193
User 96224 AUC after training: 0.5403508771929825
User 96224 does not improve AUC. Reverting changes.
Training on augumented user 29544 6/50 current_auc = 0.5456140350877193
User 29544 AUC after training: 0.5403508771929825
User 29544 does not improve AUC. Reverting changes.
Training on augumented user 102443 7/50 current_auc = 0.5456140350877193
User 102443 AUC after training: 0.5421052631578948
User 102443 does not improve AUC. Reverting changes.
Training on augumented user 34245 8/50 current_auc = 0.5456140350877193
User 34245 AUC after training: 0.5385964912280702
User 34245 does not improve AUC. Reverting changes.
Training on augumented user 125372 9/50 current_auc = 0.5456140350877193
User 125372 AUC after training: 0.543859649122807
User 125372 does not improve AUC. Reverting changes.
Training on augumented user 128899 10/50 current_auc = 0.5456140350877193
User 128899 AUC after training: 0.5385964912280702
User 128899 does not improve AUC. Reverting changes.
Training on augumented user 63952 11/50 current_auc = 0.5456140350877193
User 63952 AUC after training: 0.5456140350877193
User 63952 does not improve AUC. Reverting changes.
Training on augumented user 24155 12/50 current_auc = 0.5456140350877193
User 24155 AUC after training: 0.5385964912280702
User 24155 does not improve AUC. Reverting changes.
Training on augumented user 29873 13/50 current_auc = 0.5456140350877193
User 29873 AUC after training: 0.5456140350877193
User 29873 does not improve AUC. Reverting changes.
Training on augumented user 71768 14/50 current_auc = 0.5456140350877193
User 71768 AUC after training: 0.524561403508772
User 71768 does not improve AUC. Reverting changes.
Training on augumented user 119257 15/50 current_auc = 0.5456140350877193
User 119257 AUC after training: 0.543859649122807
User 119257 does not improve AUC. Reverting changes.
Training on augumented user 42284 16/50 current_auc = 0.5456140350877193
User 42284 AUC after training: 0.5403508771929825
User 42284 does not improve AUC. Reverting changes.
Training on augumented user 15734 17/50 current_auc = 0.5456140350877193
User 15734 AUC after training: 0.5403508771929825
User 15734 does not improve AUC. Reverting changes.
Training on augumented user 127185 18/50 current_auc = 0.5456140350877193
User 127185 AUC after training: 0.5421052631578948
User 127185 does not improve AUC. Reverting changes.
Training on augumented user 46496 19/50 current_auc = 0.5456140350877193
User 46496 AUC after training: 0.5368421052631579
User 46496 does not improve AUC. Reverting changes.
Training on augumented user 10558 20/50 current_auc = 0.5456140350877193
User 10558 AUC after training: 0.5403508771929825
User 10558 does not improve AUC. Reverting changes.
Training on augumented user 92884 21/50 current_auc = 0.5456140350877193
User 92884 AUC after training: 0.5456140350877193
User 92884 does not improve AUC. Reverting changes.
Training on augumented user 105361 22/50 current_auc = 0.5456140350877193
User 105361 AUC after training: 0.5403508771929825
User 105361 does not improve AUC. Reverting changes.
Training on augumented user 90162 23/50 current_auc = 0.5456140350877193
User 90162 AUC after training: 0.5385964912280702
User 90162 does not improve AUC. Reverting changes.
Training on augumented user 48863 24/50 current_auc = 0.5456140350877193
User 48863 AUC after training: 0.5385964912280702
User 48863 does not improve AUC. Reverting changes.
Training on augumented user 69094 25/50 current_auc = 0.5456140350877193
User 69094 AUC after training: 0.5385964912280702
User 69094 does not improve AUC. Reverting changes.
Training on augumented user 115005 26/50 current_auc = 0.5456140350877193
User 115005 AUC after training: 0.5561403508771929
User 115005 improves AUC. Keeping the model.
Training on augumented user 113445 27/50 current_auc = 0.5561403508771929
User 113445 AUC after training: 0.531578947368421
User 113445 does not improve AUC. Reverting changes.
Training on augumented user 69851 28/50 current_auc = 0.5561403508771929
User 69851 AUC after training: 0.5403508771929825
User 69851 does not improve AUC. Reverting changes.
Training on augumented user 131230 29/50 current_auc = 0.5561403508771929
User 131230 AUC after training: 0.5491228070175439
User 131230 does not improve AUC. Reverting changes.
Training on augumented user 125122 30/50 current_auc = 0.5561403508771929
User 125122 AUC after training: 0.5403508771929825
User 125122 does not improve AUC. Reverting changes.
Training on augumented user 21664 31/50 current_auc = 0.5561403508771929
User 21664 AUC after training: 0.5385964912280702
User 21664 does not improve AUC. Reverting changes.
Training on augumented user 10742 32/50 current_auc = 0.5561403508771929
User 10742 AUC after training: 0.5526315789473684
User 10742 does not improve AUC. Reverting changes.
Training on augumented user 25624 33/50 current_auc = 0.5561403508771929
User 25624 AUC after training: 0.5561403508771929
User 25624 does not improve AUC. Reverting changes.
Training on augumented user 92669 34/50 current_auc = 0.5561403508771929
User 92669 AUC after training: 0.5473684210526316
User 92669 does not improve AUC. Reverting changes.
Training on augumented user 62262 35/50 current_auc = 0.5561403508771929
User 62262 AUC after training: 0.5526315789473684
User 62262 does not improve AUC. Reverting changes.
Training on augumented user 116246 36/50 current_auc = 0.5561403508771929
User 116246 AUC after training: 0.5631578947368421
User 116246 improves AUC. Keeping the model.
Training on augumented user 12498 37/50 current_auc = 0.5631578947368421
User 12498 AUC after training: 0.5578947368421052
User 12498 does not improve AUC. Reverting changes.
Training on augumented user 72806 38/50 current_auc = 0.5631578947368421
User 72806 AUC after training: 0.5421052631578948
User 72806 does not improve AUC. Reverting changes.
Training on augumented user 13359 39/50 current_auc = 0.5631578947368421
User 13359 AUC after training: 0.5578947368421052
User 13359 does not improve AUC. Reverting changes.
Training on augumented user 97069 40/50 current_auc = 0.5631578947368421
User 97069 AUC after training: 0.5543859649122806
User 97069 does not improve AUC. Reverting changes.
Training on augumented user 34607 41/50 current_auc = 0.5631578947368421
User 34607 AUC after training: 0.5578947368421052
User 34607 does not improve AUC. Reverting changes.
Training on augumented user 69581 42/50 current_auc = 0.5631578947368421
User 69581 AUC after training: 0.5631578947368421
User 69581 does not improve AUC. Reverting changes.
Training on augumented user 127381 43/50 current_auc = 0.5631578947368421
User 127381 AUC after training: 0.5649122807017544
User 127381 improves AUC. Keeping the model.
Training on augumented user 124158 44/50 current_auc = 0.5649122807017544
User 124158 AUC after training: 0.5526315789473684
User 124158 does not improve AUC. Reverting changes.
Training on augumented user 35926 45/50 current_auc = 0.5649122807017544
User 35926 AUC after training: 0.5614035087719298
User 35926 does not improve AUC. Reverting changes.
Training on augumented user 94594 46/50 current_auc = 0.5649122807017544
User 94594 AUC after training: 0.5561403508771929
User 94594 does not improve AUC. Reverting changes.
Training on augumented user 68991 47/50 current_auc = 0.5649122807017544
User 68991 AUC after training: 0.5596491228070175
User 68991 does not improve AUC. Reverting changes.
Training on augumented user 63580 48/50 current_auc = 0.5649122807017544
User 63580 AUC after training: 0.5368421052631579
User 63580 does not improve AUC. Reverting changes.
Training on augumented user 47366 49/50 current_auc = 0.5649122807017544
User 47366 AUC after training: 0.5614035087719298
User 47366 does not improve AUC. Reverting changes.
[2024-12-02 19:08:33.780436] start test user 59858 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:34.206385] start test user 59858 165/568 recall augumented users by random, augumented_users = [7264, 31821, 109328, 26494, 10871, 62503, 97676, 45992, 87114, 35954, 73866, 113967, 108736, 56120, 53569, 93649, 20917, 54881, 120106, 30929, 120207, 30451, 25505, 29055, 63322, 44278, 40438, 77521, 130568, 112691, 36898, 83203, 122661, 38447, 18279, 47106, 87511, 115673, 21055, 55917, 36266, 22337, 97982, 8961, 108702, 132939, 103472, 135205, 89620, 25889]
[2024-12-02 19:08:34.221692] user = 59858 Cloud 165/568
[2024-12-02 19:08:34.242938] user = 59858 Local 165/568
[2024-12-02 19:08:34.355169] user = 59858 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:36.401888] user = 59858 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7694509497788187
Training on augumented user 7264 0/50 current_auc = 0.7694509497788187
User 7264 AUC after training: 0.7691907364038512
User 7264 does not improve AUC. Reverting changes.
Training on augumented user 31821 1/50 current_auc = 0.7694509497788187
User 31821 AUC after training: 0.7689305230288838
User 31821 does not improve AUC. Reverting changes.
Training on augumented user 109328 2/50 current_auc = 0.7694509497788187
User 109328 AUC after training: 0.7691907364038512
User 109328 does not improve AUC. Reverting changes.
Training on augumented user 26494 3/50 current_auc = 0.7694509497788187
User 26494 AUC after training: 0.7689305230288838
User 26494 does not improve AUC. Reverting changes.
Training on augumented user 10871 4/50 current_auc = 0.7694509497788187
User 10871 AUC after training: 0.7694509497788186
User 10871 does not improve AUC. Reverting changes.
Training on augumented user 62503 5/50 current_auc = 0.7694509497788187
User 62503 AUC after training: 0.7694509497788186
User 62503 does not improve AUC. Reverting changes.
Training on augumented user 97676 6/50 current_auc = 0.7694509497788187
User 97676 AUC after training: 0.7694509497788186
User 97676 does not improve AUC. Reverting changes.
Training on augumented user 45992 7/50 current_auc = 0.7694509497788187
User 45992 AUC after training: 0.7694509497788186
User 45992 does not improve AUC. Reverting changes.
Training on augumented user 87114 8/50 current_auc = 0.7694509497788187
User 87114 AUC after training: 0.7689305230288837
User 87114 does not improve AUC. Reverting changes.
Training on augumented user 35954 9/50 current_auc = 0.7694509497788187
User 35954 AUC after training: 0.7691907364038512
User 35954 does not improve AUC. Reverting changes.
Training on augumented user 73866 10/50 current_auc = 0.7694509497788187
User 73866 AUC after training: 0.7691907364038512
User 73866 does not improve AUC. Reverting changes.
Training on augumented user 113967 11/50 current_auc = 0.7694509497788187
User 113967 AUC after training: 0.7686703096539163
User 113967 does not improve AUC. Reverting changes.
Training on augumented user 108736 12/50 current_auc = 0.7694509497788187
User 108736 AUC after training: 0.7694509497788187
User 108736 does not improve AUC. Reverting changes.
Training on augumented user 56120 13/50 current_auc = 0.7694509497788187
User 56120 AUC after training: 0.7699713765287536
User 56120 improves AUC. Keeping the model.
Training on augumented user 53569 14/50 current_auc = 0.7699713765287536
User 53569 AUC after training: 0.7694509497788187
User 53569 does not improve AUC. Reverting changes.
Training on augumented user 93649 15/50 current_auc = 0.7699713765287536
User 93649 AUC after training: 0.770231589903721
User 93649 improves AUC. Keeping the model.
Training on augumented user 20917 16/50 current_auc = 0.770231589903721
User 20917 AUC after training: 0.7699713765287536
User 20917 does not improve AUC. Reverting changes.
Training on augumented user 54881 17/50 current_auc = 0.770231589903721
User 54881 AUC after training: 0.7723132969034608
User 54881 improves AUC. Keeping the model.
Training on augumented user 120106 18/50 current_auc = 0.7723132969034608
User 120106 AUC after training: 0.7720530835284934
User 120106 does not improve AUC. Reverting changes.
Training on augumented user 30929 19/50 current_auc = 0.7723132969034608
User 30929 AUC after training: 0.7720530835284934
User 30929 does not improve AUC. Reverting changes.
Training on augumented user 120207 20/50 current_auc = 0.7723132969034608
User 120207 AUC after training: 0.7725735102784284
User 120207 improves AUC. Keeping the model.
Training on augumented user 30451 21/50 current_auc = 0.7725735102784284
User 30451 AUC after training: 0.7717928701535258
User 30451 does not improve AUC. Reverting changes.
Training on augumented user 25505 22/50 current_auc = 0.7725735102784284
User 25505 AUC after training: 0.7725735102784284
User 25505 does not improve AUC. Reverting changes.
Training on augumented user 29055 23/50 current_auc = 0.7725735102784284
User 29055 AUC after training: 0.7725735102784284
User 29055 does not improve AUC. Reverting changes.
Training on augumented user 63322 24/50 current_auc = 0.7725735102784284
User 63322 AUC after training: 0.7699713765287536
User 63322 does not improve AUC. Reverting changes.
Training on augumented user 44278 25/50 current_auc = 0.7725735102784284
User 44278 AUC after training: 0.7725735102784284
User 44278 does not improve AUC. Reverting changes.
Training on augumented user 40438 26/50 current_auc = 0.7725735102784284
User 40438 AUC after training: 0.7728337236533959
User 40438 improves AUC. Keeping the model.
Training on augumented user 77521 27/50 current_auc = 0.7728337236533959
User 77521 AUC after training: 0.7730939370283633
User 77521 improves AUC. Keeping the model.
Training on augumented user 130568 28/50 current_auc = 0.7730939370283633
User 130568 AUC after training: 0.7725735102784284
User 130568 does not improve AUC. Reverting changes.
Training on augumented user 112691 29/50 current_auc = 0.7730939370283633
User 112691 AUC after training: 0.7733541504033307
User 112691 improves AUC. Keeping the model.
Training on augumented user 36898 30/50 current_auc = 0.7733541504033307
User 36898 AUC after training: 0.7730939370283633
User 36898 does not improve AUC. Reverting changes.
Training on augumented user 83203 31/50 current_auc = 0.7733541504033307
User 83203 AUC after training: 0.7741347905282331
User 83203 improves AUC. Keeping the model.
Training on augumented user 122661 32/50 current_auc = 0.7741347905282331
User 122661 AUC after training: 0.7738745771532657
User 122661 does not improve AUC. Reverting changes.
Training on augumented user 38447 33/50 current_auc = 0.7741347905282331
User 38447 AUC after training: 0.7736143637782983
User 38447 does not improve AUC. Reverting changes.
Training on augumented user 18279 34/50 current_auc = 0.7741347905282331
User 18279 AUC after training: 0.7736143637782983
User 18279 does not improve AUC. Reverting changes.
Training on augumented user 47106 35/50 current_auc = 0.7741347905282331
User 47106 AUC after training: 0.7738745771532657
User 47106 does not improve AUC. Reverting changes.
Training on augumented user 87511 36/50 current_auc = 0.7741347905282331
User 87511 AUC after training: 0.7720530835284934
User 87511 does not improve AUC. Reverting changes.
Training on augumented user 115673 37/50 current_auc = 0.7741347905282331
User 115673 AUC after training: 0.7733541504033308
User 115673 does not improve AUC. Reverting changes.
Training on augumented user 21055 38/50 current_auc = 0.7741347905282331
User 21055 AUC after training: 0.7738745771532657
User 21055 does not improve AUC. Reverting changes.
Training on augumented user 55917 39/50 current_auc = 0.7741347905282331
User 55917 AUC after training: 0.7741347905282331
User 55917 does not improve AUC. Reverting changes.
Training on augumented user 36266 40/50 current_auc = 0.7741347905282331
User 36266 AUC after training: 0.7738745771532657
User 36266 does not improve AUC. Reverting changes.
Training on augumented user 22337 41/50 current_auc = 0.7741347905282331
User 22337 AUC after training: 0.7733541504033308
User 22337 does not improve AUC. Reverting changes.
Training on augumented user 97982 42/50 current_auc = 0.7741347905282331
User 97982 AUC after training: 0.7723132969034608
User 97982 does not improve AUC. Reverting changes.
Training on augumented user 8961 43/50 current_auc = 0.7741347905282331
User 8961 AUC after training: 0.7736143637782983
User 8961 does not improve AUC. Reverting changes.
Training on augumented user 108702 44/50 current_auc = 0.7741347905282331
User 108702 AUC after training: 0.7738745771532657
User 108702 does not improve AUC. Reverting changes.
Training on augumented user 132939 45/50 current_auc = 0.7741347905282331
User 132939 AUC after training: 0.7741347905282331
User 132939 does not improve AUC. Reverting changes.
Training on augumented user 103472 46/50 current_auc = 0.7741347905282331
User 103472 AUC after training: 0.7746552172781681
User 103472 improves AUC. Keeping the model.
Training on augumented user 135205 47/50 current_auc = 0.7746552172781681
User 135205 AUC after training: 0.7746552172781681
User 135205 does not improve AUC. Reverting changes.
Training on augumented user 89620 48/50 current_auc = 0.7746552172781681
User 89620 AUC after training: 0.7743950039032006
User 89620 does not improve AUC. Reverting changes.
Training on augumented user 25889 49/50 current_auc = 0.7746552172781681
User 25889 AUC after training: 0.7733541504033308
User 25889 does not improve AUC. Reverting changes.
[2024-12-02 19:09:05.884976] start test user 59873 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:06.420249] start test user 59873 166/568 recall augumented users by random, augumented_users = [56555, 68095, 49970, 64768, 74728, 123697, 90595, 38616, 80833, 110881, 45317, 8891, 46373, 43332, 48141, 132617, 50372, 113719, 61554, 90798, 105674, 104403, 102666, 43121, 69515, 73855, 3809, 18305, 122275, 11770, 83371, 82480, 11364, 42075, 49174, 58497, 2732, 119253, 60393, 37610, 85339, 66025, 134073, 23151, 2098, 129199, 58916, 77576, 69681, 16770]
[2024-12-02 19:09:06.444108] user = 59873 Cloud 166/568
[2024-12-02 19:09:06.482447] user = 59873 Local 166/568
[2024-12-02 19:09:06.799499] user = 59873 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:09.042566] user = 59873 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4333333333333333
Training on augumented user 56555 0/50 current_auc = 0.4333333333333333
User 56555 AUC after training: 0.4333333333333333
User 56555 does not improve AUC. Reverting changes.
Training on augumented user 68095 1/50 current_auc = 0.4333333333333333
User 68095 AUC after training: 0.4333333333333333
User 68095 does not improve AUC. Reverting changes.
Training on augumented user 49970 2/50 current_auc = 0.4333333333333333
User 49970 AUC after training: 0.4333333333333333
User 49970 does not improve AUC. Reverting changes.
Training on augumented user 64768 3/50 current_auc = 0.4333333333333333
User 64768 AUC after training: 0.4333333333333333
User 64768 does not improve AUC. Reverting changes.
Training on augumented user 74728 4/50 current_auc = 0.4333333333333333
User 74728 AUC after training: 0.4333333333333333
User 74728 does not improve AUC. Reverting changes.
Training on augumented user 123697 5/50 current_auc = 0.4333333333333333
User 123697 AUC after training: 0.4333333333333333
User 123697 does not improve AUC. Reverting changes.
Training on augumented user 90595 6/50 current_auc = 0.4333333333333333
User 90595 AUC after training: 0.4333333333333333
User 90595 does not improve AUC. Reverting changes.
Training on augumented user 38616 7/50 current_auc = 0.4333333333333333
User 38616 AUC after training: 0.4333333333333333
User 38616 does not improve AUC. Reverting changes.
Training on augumented user 80833 8/50 current_auc = 0.4333333333333333
User 80833 AUC after training: 0.4333333333333333
User 80833 does not improve AUC. Reverting changes.
Training on augumented user 110881 9/50 current_auc = 0.4333333333333333
User 110881 AUC after training: 0.4333333333333333
User 110881 does not improve AUC. Reverting changes.
Training on augumented user 45317 10/50 current_auc = 0.4333333333333333
User 45317 AUC after training: 0.4333333333333333
User 45317 does not improve AUC. Reverting changes.
Training on augumented user 8891 11/50 current_auc = 0.4333333333333333
User 8891 AUC after training: 0.4333333333333333
User 8891 does not improve AUC. Reverting changes.
Training on augumented user 46373 12/50 current_auc = 0.4333333333333333
User 46373 AUC after training: 0.4333333333333333
User 46373 does not improve AUC. Reverting changes.
Training on augumented user 43332 13/50 current_auc = 0.4333333333333333
User 43332 AUC after training: 0.4333333333333333
User 43332 does not improve AUC. Reverting changes.
Training on augumented user 48141 14/50 current_auc = 0.4333333333333333
User 48141 AUC after training: 0.4333333333333333
User 48141 does not improve AUC. Reverting changes.
Training on augumented user 132617 15/50 current_auc = 0.4333333333333333
User 132617 AUC after training: 0.4333333333333333
User 132617 does not improve AUC. Reverting changes.
Training on augumented user 50372 16/50 current_auc = 0.4333333333333333
User 50372 AUC after training: 0.4333333333333333
User 50372 does not improve AUC. Reverting changes.
Training on augumented user 113719 17/50 current_auc = 0.4333333333333333
User 113719 AUC after training: 0.4333333333333333
User 113719 does not improve AUC. Reverting changes.
Training on augumented user 61554 18/50 current_auc = 0.4333333333333333
User 61554 AUC after training: 0.4333333333333333
User 61554 does not improve AUC. Reverting changes.
Training on augumented user 90798 19/50 current_auc = 0.4333333333333333
User 90798 AUC after training: 0.4333333333333333
User 90798 does not improve AUC. Reverting changes.
Training on augumented user 105674 20/50 current_auc = 0.4333333333333333
User 105674 AUC after training: 0.4333333333333333
User 105674 does not improve AUC. Reverting changes.
Training on augumented user 104403 21/50 current_auc = 0.4333333333333333
User 104403 AUC after training: 0.4333333333333333
User 104403 does not improve AUC. Reverting changes.
Training on augumented user 102666 22/50 current_auc = 0.4333333333333333
User 102666 AUC after training: 0.4333333333333333
User 102666 does not improve AUC. Reverting changes.
Training on augumented user 43121 23/50 current_auc = 0.4333333333333333
User 43121 AUC after training: 0.4333333333333333
User 43121 does not improve AUC. Reverting changes.
Training on augumented user 69515 24/50 current_auc = 0.4333333333333333
User 69515 AUC after training: 0.4333333333333333
User 69515 does not improve AUC. Reverting changes.
Training on augumented user 73855 25/50 current_auc = 0.4333333333333333
User 73855 AUC after training: 0.4333333333333333
User 73855 does not improve AUC. Reverting changes.
Training on augumented user 3809 26/50 current_auc = 0.4333333333333333
User 3809 AUC after training: 0.4333333333333333
User 3809 does not improve AUC. Reverting changes.
Training on augumented user 18305 27/50 current_auc = 0.4333333333333333
User 18305 AUC after training: 0.4333333333333333
User 18305 does not improve AUC. Reverting changes.
Training on augumented user 122275 28/50 current_auc = 0.4333333333333333
User 122275 AUC after training: 0.4333333333333333
User 122275 does not improve AUC. Reverting changes.
Training on augumented user 11770 29/50 current_auc = 0.4333333333333333
User 11770 AUC after training: 0.4333333333333333
User 11770 does not improve AUC. Reverting changes.
Training on augumented user 83371 30/50 current_auc = 0.4333333333333333
User 83371 AUC after training: 0.4333333333333333
User 83371 does not improve AUC. Reverting changes.
Training on augumented user 82480 31/50 current_auc = 0.4333333333333333
User 82480 AUC after training: 0.4333333333333333
User 82480 does not improve AUC. Reverting changes.
Training on augumented user 11364 32/50 current_auc = 0.4333333333333333
User 11364 AUC after training: 0.4333333333333333
User 11364 does not improve AUC. Reverting changes.
Training on augumented user 42075 33/50 current_auc = 0.4333333333333333
User 42075 AUC after training: 0.4333333333333333
User 42075 does not improve AUC. Reverting changes.
Training on augumented user 49174 34/50 current_auc = 0.4333333333333333
User 49174 AUC after training: 0.4333333333333333
User 49174 does not improve AUC. Reverting changes.
Training on augumented user 58497 35/50 current_auc = 0.4333333333333333
User 58497 AUC after training: 0.4333333333333333
User 58497 does not improve AUC. Reverting changes.
Training on augumented user 2732 36/50 current_auc = 0.4333333333333333
User 2732 AUC after training: 0.4333333333333333
User 2732 does not improve AUC. Reverting changes.
Training on augumented user 119253 37/50 current_auc = 0.4333333333333333
User 119253 AUC after training: 0.4333333333333333
User 119253 does not improve AUC. Reverting changes.
Training on augumented user 60393 38/50 current_auc = 0.4333333333333333
User 60393 AUC after training: 0.4333333333333333
User 60393 does not improve AUC. Reverting changes.
Training on augumented user 37610 39/50 current_auc = 0.4333333333333333
User 37610 AUC after training: 0.4333333333333333
User 37610 does not improve AUC. Reverting changes.
Training on augumented user 85339 40/50 current_auc = 0.4333333333333333
User 85339 AUC after training: 0.4333333333333333
User 85339 does not improve AUC. Reverting changes.
Training on augumented user 66025 41/50 current_auc = 0.4333333333333333
User 66025 AUC after training: 0.4333333333333333
User 66025 does not improve AUC. Reverting changes.
Training on augumented user 134073 42/50 current_auc = 0.4333333333333333
User 134073 AUC after training: 0.4333333333333333
User 134073 does not improve AUC. Reverting changes.
Training on augumented user 23151 43/50 current_auc = 0.4333333333333333
User 23151 AUC after training: 0.4333333333333333
User 23151 does not improve AUC. Reverting changes.
Training on augumented user 2098 44/50 current_auc = 0.4333333333333333
User 2098 AUC after training: 0.4333333333333333
User 2098 does not improve AUC. Reverting changes.
Training on augumented user 129199 45/50 current_auc = 0.4333333333333333
User 129199 AUC after training: 0.4333333333333333
User 129199 does not improve AUC. Reverting changes.
Training on augumented user 58916 46/50 current_auc = 0.4333333333333333
User 58916 AUC after training: 0.4333333333333333
User 58916 does not improve AUC. Reverting changes.
Training on augumented user 77576 47/50 current_auc = 0.4333333333333333
User 77576 AUC after training: 0.4333333333333333
User 77576 does not improve AUC. Reverting changes.
Training on augumented user 69681 48/50 current_auc = 0.4333333333333333
User 69681 AUC after training: 0.4333333333333333
User 69681 does not improve AUC. Reverting changes.
Training on augumented user 16770 49/50 current_auc = 0.4333333333333333
User 16770 AUC after training: 0.4333333333333333
User 16770 does not improve AUC. Reverting changes.
[2024-12-02 19:09:34.962863] start test user 59909 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:35.646725] start test user 59909 167/568 recall augumented users by random, augumented_users = [60976, 42420, 15530, 50663, 121213, 137290, 25023, 48260, 78946, 79801, 69141, 104713, 8712, 5306, 135675, 111384, 7288, 16745, 14851, 127504, 35001, 119544, 95186, 38879, 50972, 55406, 73299, 75099, 52476, 29358, 65642, 93311, 68133, 121573, 20293, 30438, 67910, 112816, 76248, 6027, 62243, 76314, 75609, 6800, 58483, 54656, 45228, 24919, 55748, 22090]
[2024-12-02 19:09:35.668086] user = 59909 Cloud 167/568
[2024-12-02 19:09:35.696940] user = 59909 Local 167/568
[2024-12-02 19:09:35.777566] user = 59909 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:37.744883] user = 59909 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5441845354126056
Training on augumented user 60976 0/50 current_auc = 0.5441845354126056
User 60976 AUC after training: 0.5438596491228069
User 60976 does not improve AUC. Reverting changes.
Training on augumented user 42420 1/50 current_auc = 0.5441845354126056
User 42420 AUC after training: 0.5445094217024042
User 42420 improves AUC. Keeping the model.
Training on augumented user 15530 2/50 current_auc = 0.5445094217024042
User 15530 AUC after training: 0.5435347628330085
User 15530 does not improve AUC. Reverting changes.
Training on augumented user 50663 3/50 current_auc = 0.5445094217024042
User 50663 AUC after training: 0.5448343079922027
User 50663 improves AUC. Keeping the model.
Training on augumented user 121213 4/50 current_auc = 0.5448343079922027
User 121213 AUC after training: 0.5449967511371019
User 121213 improves AUC. Keeping the model.
Training on augumented user 137290 5/50 current_auc = 0.5449967511371019
User 137290 AUC after training: 0.5443469785575048
User 137290 does not improve AUC. Reverting changes.
Training on augumented user 25023 6/50 current_auc = 0.5449967511371019
User 25023 AUC after training: 0.5448343079922027
User 25023 does not improve AUC. Reverting changes.
Training on augumented user 48260 7/50 current_auc = 0.5449967511371019
User 48260 AUC after training: 0.5453216374269005
User 48260 improves AUC. Keeping the model.
Training on augumented user 78946 8/50 current_auc = 0.5453216374269005
User 78946 AUC after training: 0.5453216374269005
User 78946 does not improve AUC. Reverting changes.
Training on augumented user 79801 9/50 current_auc = 0.5453216374269005
User 79801 AUC after training: 0.5453216374269005
User 79801 does not improve AUC. Reverting changes.
Training on augumented user 69141 10/50 current_auc = 0.5453216374269005
User 69141 AUC after training: 0.5456465237166992
User 69141 improves AUC. Keeping the model.
Training on augumented user 104713 11/50 current_auc = 0.5456465237166992
User 104713 AUC after training: 0.5456465237166992
User 104713 does not improve AUC. Reverting changes.
Training on augumented user 8712 12/50 current_auc = 0.5456465237166992
User 8712 AUC after training: 0.5433723196881091
User 8712 does not improve AUC. Reverting changes.
Training on augumented user 5306 13/50 current_auc = 0.5456465237166992
User 5306 AUC after training: 0.5454840805717999
User 5306 does not improve AUC. Reverting changes.
Training on augumented user 135675 14/50 current_auc = 0.5456465237166992
User 135675 AUC after training: 0.5445094217024041
User 135675 does not improve AUC. Reverting changes.
Training on augumented user 111384 15/50 current_auc = 0.5456465237166992
User 111384 AUC after training: 0.5451591942820013
User 111384 does not improve AUC. Reverting changes.
Training on augumented user 7288 16/50 current_auc = 0.5456465237166992
User 7288 AUC after training: 0.5394736842105263
User 7288 does not improve AUC. Reverting changes.
Training on augumented user 16745 17/50 current_auc = 0.5456465237166992
User 16745 AUC after training: 0.5454840805717999
User 16745 does not improve AUC. Reverting changes.
Training on augumented user 14851 18/50 current_auc = 0.5456465237166992
User 14851 AUC after training: 0.5441845354126056
User 14851 does not improve AUC. Reverting changes.
Training on augumented user 127504 19/50 current_auc = 0.5456465237166992
User 127504 AUC after training: 0.5462962962962963
User 127504 improves AUC. Keeping the model.
Training on augumented user 35001 20/50 current_auc = 0.5462962962962963
User 35001 AUC after training: 0.5435347628330085
User 35001 does not improve AUC. Reverting changes.
Training on augumented user 119544 21/50 current_auc = 0.5462962962962963
User 119544 AUC after training: 0.5436972059779077
User 119544 does not improve AUC. Reverting changes.
Training on augumented user 95186 22/50 current_auc = 0.5462962962962963
User 95186 AUC after training: 0.5443469785575049
User 95186 does not improve AUC. Reverting changes.
Training on augumented user 38879 23/50 current_auc = 0.5462962962962963
User 38879 AUC after training: 0.5453216374269005
User 38879 does not improve AUC. Reverting changes.
Training on augumented user 50972 24/50 current_auc = 0.5462962962962963
User 50972 AUC after training: 0.5446718648473035
User 50972 does not improve AUC. Reverting changes.
Training on augumented user 55406 25/50 current_auc = 0.5462962962962963
User 55406 AUC after training: 0.5423976608187134
User 55406 does not improve AUC. Reverting changes.
Training on augumented user 73299 26/50 current_auc = 0.5462962962962963
User 73299 AUC after training: 0.544996751137102
User 73299 does not improve AUC. Reverting changes.
Training on augumented user 75099 27/50 current_auc = 0.5462962962962963
User 75099 AUC after training: 0.5410981156595192
User 75099 does not improve AUC. Reverting changes.
Training on augumented user 52476 28/50 current_auc = 0.5462962962962963
User 52476 AUC after training: 0.544996751137102
User 52476 does not improve AUC. Reverting changes.
Training on augumented user 29358 29/50 current_auc = 0.5462962962962963
User 29358 AUC after training: 0.541585445094217
User 29358 does not improve AUC. Reverting changes.
Training on augumented user 65642 30/50 current_auc = 0.5462962962962963
User 65642 AUC after training: 0.5458089668615984
User 65642 does not improve AUC. Reverting changes.
Training on augumented user 93311 31/50 current_auc = 0.5462962962962963
User 93311 AUC after training: 0.5451591942820013
User 93311 does not improve AUC. Reverting changes.
Training on augumented user 68133 32/50 current_auc = 0.5462962962962963
User 68133 AUC after training: 0.5443469785575049
User 68133 does not improve AUC. Reverting changes.
Training on augumented user 121573 33/50 current_auc = 0.5462962962962963
User 121573 AUC after training: 0.5440220922677064
User 121573 does not improve AUC. Reverting changes.
Training on augumented user 20293 34/50 current_auc = 0.5462962962962963
User 20293 AUC after training: 0.5435347628330084
User 20293 does not improve AUC. Reverting changes.
Training on augumented user 30438 35/50 current_auc = 0.5462962962962963
User 30438 AUC after training: 0.5438596491228069
User 30438 does not improve AUC. Reverting changes.
Training on augumented user 67910 36/50 current_auc = 0.5462962962962963
User 67910 AUC after training: 0.5466211825860948
User 67910 improves AUC. Keeping the model.
Training on augumented user 112816 37/50 current_auc = 0.5466211825860948
User 112816 AUC after training: 0.5453216374269005
User 112816 does not improve AUC. Reverting changes.
Training on augumented user 76248 38/50 current_auc = 0.5466211825860948
User 76248 AUC after training: 0.5462962962962963
User 76248 does not improve AUC. Reverting changes.
Training on augumented user 6027 39/50 current_auc = 0.5466211825860948
User 6027 AUC after training: 0.5456465237166992
User 6027 does not improve AUC. Reverting changes.
Training on augumented user 62243 40/50 current_auc = 0.5466211825860948
User 62243 AUC after training: 0.5436972059779077
User 62243 does not improve AUC. Reverting changes.
Training on augumented user 76314 41/50 current_auc = 0.5466211825860948
User 76314 AUC after training: 0.5446718648473035
User 76314 does not improve AUC. Reverting changes.
Training on augumented user 75609 42/50 current_auc = 0.5466211825860948
User 75609 AUC after training: 0.5449967511371021
User 75609 does not improve AUC. Reverting changes.
Training on augumented user 6800 43/50 current_auc = 0.5466211825860948
User 6800 AUC after training: 0.541585445094217
User 6800 does not improve AUC. Reverting changes.
Training on augumented user 58483 44/50 current_auc = 0.5466211825860948
User 58483 AUC after training: 0.5456465237166992
User 58483 does not improve AUC. Reverting changes.
Training on augumented user 54656 45/50 current_auc = 0.5466211825860948
User 54656 AUC after training: 0.5456465237166992
User 54656 does not improve AUC. Reverting changes.
Training on augumented user 45228 46/50 current_auc = 0.5466211825860948
User 45228 AUC after training: 0.5469460688758935
User 45228 improves AUC. Keeping the model.
Training on augumented user 24919 47/50 current_auc = 0.5469460688758935
User 24919 AUC after training: 0.547270955165692
User 24919 improves AUC. Keeping the model.
Training on augumented user 55748 48/50 current_auc = 0.547270955165692
User 55748 AUC after training: 0.5461338531513971
User 55748 does not improve AUC. Reverting changes.
Training on augumented user 22090 49/50 current_auc = 0.547270955165692
User 22090 AUC after training: 0.5422352176738142
User 22090 does not improve AUC. Reverting changes.
[2024-12-02 19:10:06.087816] start test user 59920 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:06.505493] start test user 59920 168/568 recall augumented users by random, augumented_users = [24728, 109302, 60079, 5847, 11632, 106156, 69413, 6629, 121405, 129481, 125668, 81290, 30900, 95327, 80176, 49167, 5532, 28847, 15149, 4423, 99570, 123543, 111374, 1601, 8695, 560, 35813, 119237, 65392, 35523, 104433, 63372, 56821, 102592, 23960, 112692, 122373, 61756, 74003, 130983, 60706, 75453, 81414, 24201, 321, 125598, 25471, 90013, 49367, 21233]
[2024-12-02 19:10:06.520533] user = 59920 Cloud 168/568
[2024-12-02 19:10:06.534158] user = 59920 Local 168/568
[2024-12-02 19:10:06.612255] user = 59920 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:08.627075] user = 59920 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6514059120403749
Training on augumented user 24728 0/50 current_auc = 0.6514059120403749
User 24728 AUC after training: 0.6521268925739006
User 24728 improves AUC. Keeping the model.
Training on augumented user 109302 1/50 current_auc = 0.6521268925739006
User 109302 AUC after training: 0.6535688536409516
User 109302 improves AUC. Keeping the model.
Training on augumented user 60079 2/50 current_auc = 0.6535688536409516
User 60079 AUC after training: 0.6544700793078587
User 60079 improves AUC. Keeping the model.
Training on augumented user 5847 3/50 current_auc = 0.6544700793078587
User 5847 AUC after training: 0.6537490987743331
User 5847 does not improve AUC. Reverting changes.
Training on augumented user 11632 4/50 current_auc = 0.6544700793078587
User 11632 AUC after training: 0.65465032444124
User 11632 improves AUC. Keeping the model.
Training on augumented user 106156 5/50 current_auc = 0.65465032444124
User 106156 AUC after training: 0.6553713049747656
User 106156 improves AUC. Keeping the model.
Training on augumented user 69413 6/50 current_auc = 0.6553713049747656
User 69413 AUC after training: 0.653208363374189
User 69413 does not improve AUC. Reverting changes.
Training on augumented user 6629 7/50 current_auc = 0.6553713049747656
User 6629 AUC after training: 0.6553713049747657
User 6629 improves AUC. Keeping the model.
Training on augumented user 121405 8/50 current_auc = 0.6553713049747657
User 121405 AUC after training: 0.6553713049747657
User 121405 does not improve AUC. Reverting changes.
Training on augumented user 129481 9/50 current_auc = 0.6553713049747657
User 129481 AUC after training: 0.6557317952415285
User 129481 improves AUC. Keeping the model.
Training on augumented user 125668 10/50 current_auc = 0.6557317952415285
User 125668 AUC after training: 0.65465032444124
User 125668 does not improve AUC. Reverting changes.
Training on augumented user 81290 11/50 current_auc = 0.6557317952415285
User 81290 AUC after training: 0.656452775775054
User 81290 improves AUC. Keeping the model.
Training on augumented user 30900 12/50 current_auc = 0.656452775775054
User 30900 AUC after training: 0.6557317952415285
User 30900 does not improve AUC. Reverting changes.
Training on augumented user 95327 13/50 current_auc = 0.656452775775054
User 95327 AUC after training: 0.6548305695746215
User 95327 does not improve AUC. Reverting changes.
Training on augumented user 80176 14/50 current_auc = 0.656452775775054
User 80176 AUC after training: 0.6550108147080029
User 80176 does not improve AUC. Reverting changes.
Training on augumented user 49167 15/50 current_auc = 0.656452775775054
User 49167 AUC after training: 0.6542898341744773
User 49167 does not improve AUC. Reverting changes.
Training on augumented user 5532 16/50 current_auc = 0.656452775775054
User 5532 AUC after training: 0.6557317952415285
User 5532 does not improve AUC. Reverting changes.
Training on augumented user 28847 17/50 current_auc = 0.656452775775054
User 28847 AUC after training: 0.6553713049747656
User 28847 does not improve AUC. Reverting changes.
Training on augumented user 15149 18/50 current_auc = 0.656452775775054
User 15149 AUC after training: 0.6560922855082912
User 15149 does not improve AUC. Reverting changes.
Training on augumented user 4423 19/50 current_auc = 0.656452775775054
User 4423 AUC after training: 0.6535688536409517
User 4423 does not improve AUC. Reverting changes.
Training on augumented user 99570 20/50 current_auc = 0.656452775775054
User 99570 AUC after training: 0.6557317952415285
User 99570 does not improve AUC. Reverting changes.
Training on augumented user 123543 21/50 current_auc = 0.656452775775054
User 123543 AUC after training: 0.6553713049747658
User 123543 does not improve AUC. Reverting changes.
Training on augumented user 111374 22/50 current_auc = 0.656452775775054
User 111374 AUC after training: 0.6560922855082914
User 111374 does not improve AUC. Reverting changes.
Training on augumented user 1601 23/50 current_auc = 0.656452775775054
User 1601 AUC after training: 0.6557317952415285
User 1601 does not improve AUC. Reverting changes.
Training on augumented user 8695 24/50 current_auc = 0.656452775775054
User 8695 AUC after training: 0.6550108147080029
User 8695 does not improve AUC. Reverting changes.
Training on augumented user 560 25/50 current_auc = 0.656452775775054
User 560 AUC after training: 0.6553713049747658
User 560 does not improve AUC. Reverting changes.
Training on augumented user 35813 26/50 current_auc = 0.656452775775054
User 35813 AUC after training: 0.6553713049747657
User 35813 does not improve AUC. Reverting changes.
Training on augumented user 119237 27/50 current_auc = 0.656452775775054
User 119237 AUC after training: 0.6550108147080029
User 119237 does not improve AUC. Reverting changes.
Training on augumented user 65392 28/50 current_auc = 0.656452775775054
User 65392 AUC after training: 0.6553713049747657
User 65392 does not improve AUC. Reverting changes.
Training on augumented user 35523 29/50 current_auc = 0.656452775775054
User 35523 AUC after training: 0.6557317952415285
User 35523 does not improve AUC. Reverting changes.
Training on augumented user 104433 30/50 current_auc = 0.656452775775054
User 104433 AUC after training: 0.6550108147080028
User 104433 does not improve AUC. Reverting changes.
Training on augumented user 63372 31/50 current_auc = 0.656452775775054
User 63372 AUC after training: 0.6553713049747656
User 63372 does not improve AUC. Reverting changes.
Training on augumented user 56821 32/50 current_auc = 0.656452775775054
User 56821 AUC after training: 0.65465032444124
User 56821 does not improve AUC. Reverting changes.
Training on augumented user 102592 33/50 current_auc = 0.656452775775054
User 102592 AUC after training: 0.6557317952415285
User 102592 does not improve AUC. Reverting changes.
Training on augumented user 23960 34/50 current_auc = 0.656452775775054
User 23960 AUC after training: 0.6535688536409516
User 23960 does not improve AUC. Reverting changes.
Training on augumented user 112692 35/50 current_auc = 0.656452775775054
User 112692 AUC after training: 0.6553713049747657
User 112692 does not improve AUC. Reverting changes.
Training on augumented user 122373 36/50 current_auc = 0.656452775775054
User 122373 AUC after training: 0.65465032444124
User 122373 does not improve AUC. Reverting changes.
Training on augumented user 61756 37/50 current_auc = 0.656452775775054
User 61756 AUC after training: 0.6560922855082912
User 61756 does not improve AUC. Reverting changes.
Training on augumented user 74003 38/50 current_auc = 0.656452775775054
User 74003 AUC after training: 0.6542898341744773
User 74003 does not improve AUC. Reverting changes.
Training on augumented user 130983 39/50 current_auc = 0.656452775775054
User 130983 AUC after training: 0.6553713049747657
User 130983 does not improve AUC. Reverting changes.
Training on augumented user 60706 40/50 current_auc = 0.656452775775054
User 60706 AUC after training: 0.6557317952415285
User 60706 does not improve AUC. Reverting changes.
Training on augumented user 75453 41/50 current_auc = 0.656452775775054
User 75453 AUC after training: 0.6553713049747657
User 75453 does not improve AUC. Reverting changes.
Training on augumented user 81414 42/50 current_auc = 0.656452775775054
User 81414 AUC after training: 0.6553713049747656
User 81414 does not improve AUC. Reverting changes.
Training on augumented user 24201 43/50 current_auc = 0.656452775775054
User 24201 AUC after training: 0.6557317952415285
User 24201 does not improve AUC. Reverting changes.
Training on augumented user 321 44/50 current_auc = 0.656452775775054
User 321 AUC after training: 0.6553713049747658
User 321 does not improve AUC. Reverting changes.
Training on augumented user 125598 45/50 current_auc = 0.656452775775054
User 125598 AUC after training: 0.6560922855082914
User 125598 does not improve AUC. Reverting changes.
Training on augumented user 25471 46/50 current_auc = 0.656452775775054
User 25471 AUC after training: 0.6550108147080029
User 25471 does not improve AUC. Reverting changes.
Training on augumented user 90013 47/50 current_auc = 0.656452775775054
User 90013 AUC after training: 0.6557317952415285
User 90013 does not improve AUC. Reverting changes.
Training on augumented user 49367 48/50 current_auc = 0.656452775775054
User 49367 AUC after training: 0.6542898341744774
User 49367 does not improve AUC. Reverting changes.
Training on augumented user 21233 49/50 current_auc = 0.656452775775054
User 21233 AUC after training: 0.6560922855082914
User 21233 does not improve AUC. Reverting changes.
[2024-12-02 19:10:40.656310] start test user 59923 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:41.425607] start test user 59923 169/568 recall augumented users by random, augumented_users = [1921, 53807, 14152, 121309, 74044, 11688, 99161, 67957, 69950, 31217, 88270, 26522, 23286, 46069, 51997, 56137, 53459, 30022, 73523, 115541, 17302, 78712, 21018, 6749, 120529, 19186, 138354, 131535, 119904, 127127, 74358, 137194, 121067, 66554, 62469, 50750, 65385, 100315, 7617, 73531, 35019, 16702, 82931, 25698, 54334, 100309, 69145, 90272, 31879, 56657]
[2024-12-02 19:10:41.448041] user = 59923 Cloud 169/568
[2024-12-02 19:10:41.479707] user = 59923 Local 169/568
[2024-12-02 19:10:41.805858] user = 59923 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:44.718939] user = 59923 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6412698412698412
Training on augumented user 1921 0/50 current_auc = 0.6412698412698412
User 1921 AUC after training: 0.6416803503010399
User 1921 improves AUC. Keeping the model.
Training on augumented user 53807 1/50 current_auc = 0.6416803503010399
User 53807 AUC after training: 0.6412698412698412
User 53807 does not improve AUC. Reverting changes.
Training on augumented user 14152 2/50 current_auc = 0.6416803503010399
User 14152 AUC after training: 0.641871921182266
User 14152 improves AUC. Keeping the model.
Training on augumented user 121309 3/50 current_auc = 0.641871921182266
User 121309 AUC after training: 0.6408866995073892
User 121309 does not improve AUC. Reverting changes.
Training on augumented user 74044 4/50 current_auc = 0.641871921182266
User 74044 AUC after training: 0.6413793103448276
User 74044 does not improve AUC. Reverting changes.
Training on augumented user 11688 5/50 current_auc = 0.641871921182266
User 11688 AUC after training: 0.6417624521072798
User 11688 does not improve AUC. Reverting changes.
Training on augumented user 99161 6/50 current_auc = 0.641871921182266
User 99161 AUC after training: 0.6417077175697865
User 99161 does not improve AUC. Reverting changes.
Training on augumented user 67957 7/50 current_auc = 0.641871921182266
User 67957 AUC after training: 0.6419266557197592
User 67957 improves AUC. Keeping the model.
Training on augumented user 69950 8/50 current_auc = 0.6419266557197592
User 69950 AUC after training: 0.6422550629447181
User 69950 improves AUC. Keeping the model.
Training on augumented user 31217 9/50 current_auc = 0.6422550629447181
User 31217 AUC after training: 0.6431308155446086
User 31217 improves AUC. Keeping the model.
Training on augumented user 88270 10/50 current_auc = 0.6431308155446086
User 88270 AUC after training: 0.6426929392446634
User 88270 does not improve AUC. Reverting changes.
Training on augumented user 26522 11/50 current_auc = 0.6431308155446086
User 26522 AUC after training: 0.6432402846195949
User 26522 improves AUC. Keeping the model.
Training on augumented user 23286 12/50 current_auc = 0.6432402846195949
User 23286 AUC after training: 0.6432950191570881
User 23286 improves AUC. Keeping the model.
Training on augumented user 46069 13/50 current_auc = 0.6432950191570881
User 46069 AUC after training: 0.6426929392446634
User 46069 does not improve AUC. Reverting changes.
Training on augumented user 51997 14/50 current_auc = 0.6432950191570881
User 51997 AUC after training: 0.6431308155446087
User 51997 does not improve AUC. Reverting changes.
Training on augumented user 56137 15/50 current_auc = 0.6432950191570881
User 56137 AUC after training: 0.6428024083196496
User 56137 does not improve AUC. Reverting changes.
Training on augumented user 53459 16/50 current_auc = 0.6432950191570881
User 53459 AUC after training: 0.6430213464696223
User 53459 does not improve AUC. Reverting changes.
Training on augumented user 30022 17/50 current_auc = 0.6432950191570881
User 30022 AUC after training: 0.6429666119321291
User 30022 does not improve AUC. Reverting changes.
Training on augumented user 73523 18/50 current_auc = 0.6432950191570881
User 73523 AUC after training: 0.6431034482758621
User 73523 does not improve AUC. Reverting changes.
Training on augumented user 115541 19/50 current_auc = 0.6432950191570881
User 115541 AUC after training: 0.6432402846195949
User 115541 does not improve AUC. Reverting changes.
Training on augumented user 17302 20/50 current_auc = 0.6432950191570881
User 17302 AUC after training: 0.6436781609195402
User 17302 improves AUC. Keeping the model.
Training on augumented user 78712 21/50 current_auc = 0.6436781609195402
User 78712 AUC after training: 0.6429666119321291
User 78712 does not improve AUC. Reverting changes.
Training on augumented user 21018 22/50 current_auc = 0.6436781609195402
User 21018 AUC after training: 0.6431308155446086
User 21018 does not improve AUC. Reverting changes.
Training on augumented user 6749 23/50 current_auc = 0.6436781609195402
User 6749 AUC after training: 0.6431308155446086
User 6749 does not improve AUC. Reverting changes.
Training on augumented user 120529 24/50 current_auc = 0.6436781609195402
User 120529 AUC after training: 0.6427476737821565
User 120529 does not improve AUC. Reverting changes.
Training on augumented user 19186 25/50 current_auc = 0.6436781609195402
User 19186 AUC after training: 0.6431855500821018
User 19186 does not improve AUC. Reverting changes.
Training on augumented user 138354 26/50 current_auc = 0.6436781609195402
User 138354 AUC after training: 0.6429666119321292
User 138354 does not improve AUC. Reverting changes.
Training on augumented user 131535 27/50 current_auc = 0.6436781609195402
User 131535 AUC after training: 0.6435139573070607
User 131535 does not improve AUC. Reverting changes.
Training on augumented user 119904 28/50 current_auc = 0.6436781609195402
User 119904 AUC after training: 0.6428571428571429
User 119904 does not improve AUC. Reverting changes.
Training on augumented user 127127 29/50 current_auc = 0.6436781609195402
User 127127 AUC after training: 0.6428571428571428
User 127127 does not improve AUC. Reverting changes.
Training on augumented user 74358 30/50 current_auc = 0.6436781609195402
User 74358 AUC after training: 0.6435139573070608
User 74358 does not improve AUC. Reverting changes.
Training on augumented user 137194 31/50 current_auc = 0.6436781609195402
User 137194 AUC after training: 0.6428024083196497
User 137194 does not improve AUC. Reverting changes.
Training on augumented user 121067 32/50 current_auc = 0.6436781609195402
User 121067 AUC after training: 0.6435139573070607
User 121067 does not improve AUC. Reverting changes.
Training on augumented user 66554 33/50 current_auc = 0.6436781609195402
User 66554 AUC after training: 0.6429666119321291
User 66554 does not improve AUC. Reverting changes.
Training on augumented user 62469 34/50 current_auc = 0.6436781609195402
User 62469 AUC after training: 0.6431308155446087
User 62469 does not improve AUC. Reverting changes.
Training on augumented user 50750 35/50 current_auc = 0.6436781609195402
User 50750 AUC after training: 0.6434592227695677
User 50750 does not improve AUC. Reverting changes.
Training on augumented user 65385 36/50 current_auc = 0.6436781609195402
User 65385 AUC after training: 0.6438970990695129
User 65385 improves AUC. Keeping the model.
Training on augumented user 100315 37/50 current_auc = 0.6438970990695129
User 100315 AUC after training: 0.6435686918445539
User 100315 does not improve AUC. Reverting changes.
Training on augumented user 7617 38/50 current_auc = 0.6438970990695129
User 7617 AUC after training: 0.6430213464696223
User 7617 does not improve AUC. Reverting changes.
Training on augumented user 73531 39/50 current_auc = 0.6438970990695129
User 73531 AUC after training: 0.6440065681444992
User 73531 improves AUC. Keeping the model.
Training on augumented user 35019 40/50 current_auc = 0.6440065681444992
User 35019 AUC after training: 0.6441160372194855
User 35019 improves AUC. Keeping the model.
Training on augumented user 16702 41/50 current_auc = 0.6441160372194855
User 16702 AUC after training: 0.6435139573070607
User 16702 does not improve AUC. Reverting changes.
Training on augumented user 82931 42/50 current_auc = 0.6441160372194855
User 82931 AUC after training: 0.6432402846195949
User 82931 does not improve AUC. Reverting changes.
Training on augumented user 25698 43/50 current_auc = 0.6441160372194855
User 25698 AUC after training: 0.6439518336070059
User 25698 does not improve AUC. Reverting changes.
Training on augumented user 54334 44/50 current_auc = 0.6441160372194855
User 54334 AUC after training: 0.6434592227695677
User 54334 does not improve AUC. Reverting changes.
Training on augumented user 100309 45/50 current_auc = 0.6441160372194855
User 100309 AUC after training: 0.6434592227695676
User 100309 does not improve AUC. Reverting changes.
Training on augumented user 69145 46/50 current_auc = 0.6441160372194855
User 69145 AUC after training: 0.6436781609195402
User 69145 does not improve AUC. Reverting changes.
Training on augumented user 90272 47/50 current_auc = 0.6441160372194855
User 90272 AUC after training: 0.6434044882320744
User 90272 does not improve AUC. Reverting changes.
Training on augumented user 31879 48/50 current_auc = 0.6441160372194855
User 31879 AUC after training: 0.6433497536945813
User 31879 does not improve AUC. Reverting changes.
Training on augumented user 56657 49/50 current_auc = 0.6441160372194855
User 56657 AUC after training: 0.6441160372194855
User 56657 does not improve AUC. Reverting changes.
[2024-12-02 19:11:17.843972] start test user 59971 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:18.467780] start test user 59971 170/568 recall augumented users by random, augumented_users = [115074, 123314, 42884, 76427, 130109, 63092, 46250, 87263, 36814, 43379, 12892, 27226, 10071, 137556, 69579, 116411, 38057, 728, 132119, 9794, 38366, 68460, 65653, 50550, 111006, 90703, 29520, 106244, 59937, 136009, 10506, 62598, 56073, 107033, 102064, 108645, 11291, 78885, 92073, 54532, 11591, 95685, 136995, 82691, 53673, 39088, 90298, 9106, 46627, 87266]
[2024-12-02 19:11:18.489808] user = 59971 Cloud 170/568
[2024-12-02 19:11:18.560233] user = 59971 Local 170/568
[2024-12-02 19:11:18.706883] user = 59971 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:21.351405] user = 59971 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6447064543576031
Training on augumented user 115074 0/50 current_auc = 0.6447064543576031
User 115074 AUC after training: 0.6446942992585389
User 115074 does not improve AUC. Reverting changes.
Training on augumented user 123314 1/50 current_auc = 0.6447064543576031
User 123314 AUC after training: 0.644913091041692
User 123314 improves AUC. Keeping the model.
Training on augumented user 42884 2/50 current_auc = 0.644913091041692
User 42884 AUC after training: 0.6446031360155584
User 42884 does not improve AUC. Reverting changes.
Training on augumented user 76427 3/50 current_auc = 0.644913091041692
User 76427 AUC after training: 0.6450467971313966
User 76427 improves AUC. Keeping the model.
Training on augumented user 130109 4/50 current_auc = 0.6450467971313966
User 130109 AUC after training: 0.6448401604473077
User 130109 does not improve AUC. Reverting changes.
Training on augumented user 63092 5/50 current_auc = 0.6450467971313966
User 63092 AUC after training: 0.6451075726267168
User 63092 improves AUC. Keeping the model.
Training on augumented user 46250 6/50 current_auc = 0.6451075726267168
User 46250 AUC after training: 0.6450954175276528
User 46250 does not improve AUC. Reverting changes.
Training on augumented user 87263 7/50 current_auc = 0.6451075726267168
User 87263 AUC after training: 0.6451440379239092
User 87263 improves AUC. Keeping the model.
Training on augumented user 36814 8/50 current_auc = 0.6451440379239092
User 36814 AUC after training: 0.645131882824845
User 36814 does not improve AUC. Reverting changes.
Training on augumented user 43379 9/50 current_auc = 0.6451440379239092
User 43379 AUC after training: 0.6449252461407561
User 43379 does not improve AUC. Reverting changes.
Training on augumented user 12892 10/50 current_auc = 0.6451440379239092
User 12892 AUC after training: 0.6449617114379482
User 12892 does not improve AUC. Reverting changes.
Training on augumented user 27226 11/50 current_auc = 0.6451440379239092
User 27226 AUC after training: 0.644913091041692
User 27226 does not improve AUC. Reverting changes.
Training on augumented user 10071 12/50 current_auc = 0.6451440379239092
User 10071 AUC after training: 0.644900935942628
User 10071 does not improve AUC. Reverting changes.
Training on augumented user 137556 13/50 current_auc = 0.6451440379239092
User 137556 AUC after training: 0.6449799440865442
User 137556 does not improve AUC. Reverting changes.
Training on augumented user 69579 14/50 current_auc = 0.6451440379239092
User 69579 AUC after training: 0.6450832624285888
User 69579 does not improve AUC. Reverting changes.
Training on augumented user 116411 15/50 current_auc = 0.6451440379239092
User 116411 AUC after training: 0.6447976176005835
User 116411 does not improve AUC. Reverting changes.
Training on augumented user 38057 16/50 current_auc = 0.6451440379239092
User 38057 AUC after training: 0.6451561930229732
User 38057 improves AUC. Keeping the model.
Training on augumented user 728 17/50 current_auc = 0.6451561930229732
User 728 AUC after training: 0.6450954175276529
User 728 does not improve AUC. Reverting changes.
Training on augumented user 132119 18/50 current_auc = 0.6451561930229732
User 132119 AUC after training: 0.6449981767351404
User 132119 does not improve AUC. Reverting changes.
Training on augumented user 9794 19/50 current_auc = 0.6451561930229732
User 9794 AUC after training: 0.6451683481220372
User 9794 improves AUC. Keeping the model.
Training on augumented user 38366 20/50 current_auc = 0.6451683481220372
User 38366 AUC after training: 0.6451926583201654
User 38366 improves AUC. Keeping the model.
Training on augumented user 68460 21/50 current_auc = 0.6451926583201654
User 68460 AUC after training: 0.6451440379239092
User 68460 does not improve AUC. Reverting changes.
Training on augumented user 65653 22/50 current_auc = 0.6451926583201654
User 65653 AUC after training: 0.6451865807706333
User 65653 does not improve AUC. Reverting changes.
Training on augumented user 50550 23/50 current_auc = 0.6451926583201654
User 50550 AUC after training: 0.6449556338884161
User 50550 does not improve AUC. Reverting changes.
Training on augumented user 111006 24/50 current_auc = 0.6451926583201654
User 111006 AUC after training: 0.6452412787164216
User 111006 improves AUC. Keeping the model.
Training on augumented user 90703 25/50 current_auc = 0.6452412787164216
User 90703 AUC after training: 0.6450954175276529
User 90703 does not improve AUC. Reverting changes.
Training on augumented user 29520 26/50 current_auc = 0.6452412787164216
User 29520 AUC after training: 0.645150115473441
User 29520 does not improve AUC. Reverting changes.
Training on augumented user 106244 27/50 current_auc = 0.6452412787164216
User 106244 AUC after training: 0.6452534338154856
User 106244 improves AUC. Keeping the model.
Training on augumented user 59937 28/50 current_auc = 0.6452534338154856
User 59937 AUC after training: 0.6450346420323327
User 59937 does not improve AUC. Reverting changes.
Training on augumented user 136009 29/50 current_auc = 0.6452534338154856
User 136009 AUC after training: 0.6452898991126778
User 136009 improves AUC. Keeping the model.
Training on augumented user 10506 30/50 current_auc = 0.6452898991126778
User 10506 AUC after training: 0.6451926583201653
User 10506 does not improve AUC. Reverting changes.
Training on augumented user 62598 31/50 current_auc = 0.6452898991126778
User 62598 AUC after training: 0.6452230460678254
User 62598 does not improve AUC. Reverting changes.
Training on augumented user 56073 32/50 current_auc = 0.6452898991126778
User 56073 AUC after training: 0.6452898991126778
User 56073 does not improve AUC. Reverting changes.
Training on augumented user 107033 33/50 current_auc = 0.6452898991126778
User 107033 AUC after training: 0.6452169685182935
User 107033 does not improve AUC. Reverting changes.
Training on augumented user 102064 34/50 current_auc = 0.6452898991126778
User 102064 AUC after training: 0.6453263644098699
User 102064 improves AUC. Keeping the model.
Training on augumented user 108645 35/50 current_auc = 0.6453263644098699
User 108645 AUC after training: 0.6452534338154856
User 108645 does not improve AUC. Reverting changes.
Training on augumented user 11291 36/50 current_auc = 0.6453263644098699
User 11291 AUC after training: 0.645350674607998
User 11291 improves AUC. Keeping the model.
Training on augumented user 78885 37/50 current_auc = 0.645350674607998
User 78885 AUC after training: 0.6454722255986387
User 78885 improves AUC. Keeping the model.
Training on augumented user 92073 38/50 current_auc = 0.6454722255986387
User 92073 AUC after training: 0.6454600704995745
User 92073 does not improve AUC. Reverting changes.
Training on augumented user 54532 39/50 current_auc = 0.6454722255986387
User 54532 AUC after training: 0.645314209310806
User 54532 does not improve AUC. Reverting changes.
Training on augumented user 11591 40/50 current_auc = 0.6454722255986387
User 11591 AUC after training: 0.6455208459948949
User 11591 improves AUC. Keeping the model.
Training on augumented user 95685 41/50 current_auc = 0.6455208459948949
User 95685 AUC after training: 0.6455086908958309
User 95685 does not improve AUC. Reverting changes.
Training on augumented user 136995 42/50 current_auc = 0.6455208459948949
User 136995 AUC after training: 0.6454783031481707
User 136995 does not improve AUC. Reverting changes.
Training on augumented user 82691 43/50 current_auc = 0.6455208459948949
User 82691 AUC after training: 0.6454479154005106
User 82691 does not improve AUC. Reverting changes.
Training on augumented user 53673 44/50 current_auc = 0.6455208459948949
User 53673 AUC after training: 0.6456667071836636
User 53673 improves AUC. Keeping the model.
Training on augumented user 39088 45/50 current_auc = 0.6456667071836636
User 39088 AUC after training: 0.6456849398322596
User 39088 improves AUC. Keeping the model.
Training on augumented user 90298 46/50 current_auc = 0.6456849398322596
User 90298 AUC after training: 0.6458611887686885
User 90298 improves AUC. Keeping the model.
Training on augumented user 9106 47/50 current_auc = 0.6458611887686885
User 9106 AUC after training: 0.6455876990397471
User 9106 does not improve AUC. Reverting changes.
Training on augumented user 46627 48/50 current_auc = 0.6458611887686885
User 46627 AUC after training: 0.64577610307524
User 46627 does not improve AUC. Reverting changes.
Training on augumented user 87266 49/50 current_auc = 0.6458611887686885
User 87266 AUC after training: 0.6456423969855356
User 87266 does not improve AUC. Reverting changes.
[2024-12-02 19:11:52.944844] start test user 59981 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:53.452721] start test user 59981 171/568 recall augumented users by random, augumented_users = [69353, 68690, 18859, 3949, 22885, 116765, 110457, 58942, 124833, 118175, 70612, 2465, 64900, 44111, 133895, 122074, 17946, 46484, 115092, 75802, 76719, 97014, 52170, 59598, 75287, 32301, 11424, 9958, 109801, 9822, 169, 22982, 7125, 6592, 6999, 51729, 127565, 33899, 3149, 19928, 17139, 90779, 27083, 74213, 90441, 113749, 47354, 9767, 28079, 35995]
[2024-12-02 19:11:53.467020] user = 59981 Cloud 171/568
[2024-12-02 19:11:53.481064] user = 59981 Local 171/568
[2024-12-02 19:11:53.503974] user = 59981 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:54.994223] user = 59981 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7614814814814815
Training on augumented user 69353 0/50 current_auc = 0.7614814814814815
User 69353 AUC after training: 0.7614814814814815
User 69353 does not improve AUC. Reverting changes.
Training on augumented user 68690 1/50 current_auc = 0.7614814814814815
User 68690 AUC after training: 0.7637037037037037
User 68690 improves AUC. Keeping the model.
Training on augumented user 18859 2/50 current_auc = 0.7637037037037037
User 18859 AUC after training: 0.7637037037037036
User 18859 does not improve AUC. Reverting changes.
Training on augumented user 3949 3/50 current_auc = 0.7637037037037037
User 3949 AUC after training: 0.76
User 3949 does not improve AUC. Reverting changes.
Training on augumented user 22885 4/50 current_auc = 0.7637037037037037
User 22885 AUC after training: 0.7637037037037037
User 22885 does not improve AUC. Reverting changes.
Training on augumented user 116765 5/50 current_auc = 0.7637037037037037
User 116765 AUC after training: 0.7644444444444445
User 116765 improves AUC. Keeping the model.
Training on augumented user 110457 6/50 current_auc = 0.7644444444444445
User 110457 AUC after training: 0.7651851851851851
User 110457 improves AUC. Keeping the model.
Training on augumented user 58942 7/50 current_auc = 0.7651851851851851
User 58942 AUC after training: 0.7651851851851852
User 58942 improves AUC. Keeping the model.
Training on augumented user 124833 8/50 current_auc = 0.7651851851851852
User 124833 AUC after training: 0.7651851851851852
User 124833 does not improve AUC. Reverting changes.
Training on augumented user 118175 9/50 current_auc = 0.7651851851851852
User 118175 AUC after training: 0.7644444444444444
User 118175 does not improve AUC. Reverting changes.
Training on augumented user 70612 10/50 current_auc = 0.7651851851851852
User 70612 AUC after training: 0.7637037037037037
User 70612 does not improve AUC. Reverting changes.
Training on augumented user 2465 11/50 current_auc = 0.7651851851851852
User 2465 AUC after training: 0.7651851851851852
User 2465 does not improve AUC. Reverting changes.
Training on augumented user 64900 12/50 current_auc = 0.7651851851851852
User 64900 AUC after training: 0.7644444444444445
User 64900 does not improve AUC. Reverting changes.
Training on augumented user 44111 13/50 current_auc = 0.7651851851851852
User 44111 AUC after training: 0.7651851851851852
User 44111 does not improve AUC. Reverting changes.
Training on augumented user 133895 14/50 current_auc = 0.7651851851851852
User 133895 AUC after training: 0.7629629629629628
User 133895 does not improve AUC. Reverting changes.
Training on augumented user 122074 15/50 current_auc = 0.7651851851851852
User 122074 AUC after training: 0.7644444444444445
User 122074 does not improve AUC. Reverting changes.
Training on augumented user 17946 16/50 current_auc = 0.7651851851851852
User 17946 AUC after training: 0.7651851851851852
User 17946 does not improve AUC. Reverting changes.
Training on augumented user 46484 17/50 current_auc = 0.7651851851851852
User 46484 AUC after training: 0.7651851851851852
User 46484 does not improve AUC. Reverting changes.
Training on augumented user 115092 18/50 current_auc = 0.7651851851851852
User 115092 AUC after training: 0.7644444444444445
User 115092 does not improve AUC. Reverting changes.
Training on augumented user 75802 19/50 current_auc = 0.7651851851851852
User 75802 AUC after training: 0.7637037037037037
User 75802 does not improve AUC. Reverting changes.
Training on augumented user 76719 20/50 current_auc = 0.7651851851851852
User 76719 AUC after training: 0.7651851851851851
User 76719 does not improve AUC. Reverting changes.
Training on augumented user 97014 21/50 current_auc = 0.7651851851851852
User 97014 AUC after training: 0.7637037037037037
User 97014 does not improve AUC. Reverting changes.
Training on augumented user 52170 22/50 current_auc = 0.7651851851851852
User 52170 AUC after training: 0.7651851851851852
User 52170 does not improve AUC. Reverting changes.
Training on augumented user 59598 23/50 current_auc = 0.7651851851851852
User 59598 AUC after training: 0.7637037037037037
User 59598 does not improve AUC. Reverting changes.
Training on augumented user 75287 24/50 current_auc = 0.7651851851851852
User 75287 AUC after training: 0.7637037037037037
User 75287 does not improve AUC. Reverting changes.
Training on augumented user 32301 25/50 current_auc = 0.7651851851851852
User 32301 AUC after training: 0.7651851851851852
User 32301 does not improve AUC. Reverting changes.
Training on augumented user 11424 26/50 current_auc = 0.7651851851851852
User 11424 AUC after training: 0.7666666666666666
User 11424 improves AUC. Keeping the model.
Training on augumented user 9958 27/50 current_auc = 0.7666666666666666
User 9958 AUC after training: 0.7696296296296296
User 9958 improves AUC. Keeping the model.
Training on augumented user 109801 28/50 current_auc = 0.7696296296296296
User 109801 AUC after training: 0.7696296296296296
User 109801 does not improve AUC. Reverting changes.
Training on augumented user 9822 29/50 current_auc = 0.7696296296296296
User 9822 AUC after training: 0.7703703703703704
User 9822 improves AUC. Keeping the model.
Training on augumented user 169 30/50 current_auc = 0.7703703703703704
User 169 AUC after training: 0.7711111111111111
User 169 improves AUC. Keeping the model.
Training on augumented user 22982 31/50 current_auc = 0.7711111111111111
User 22982 AUC after training: 0.7711111111111111
User 22982 does not improve AUC. Reverting changes.
Training on augumented user 7125 32/50 current_auc = 0.7711111111111111
User 7125 AUC after training: 0.7696296296296297
User 7125 does not improve AUC. Reverting changes.
Training on augumented user 6592 33/50 current_auc = 0.7711111111111111
User 6592 AUC after training: 0.7703703703703704
User 6592 does not improve AUC. Reverting changes.
Training on augumented user 6999 34/50 current_auc = 0.7711111111111111
User 6999 AUC after training: 0.7703703703703704
User 6999 does not improve AUC. Reverting changes.
Training on augumented user 51729 35/50 current_auc = 0.7711111111111111
User 51729 AUC after training: 0.7666666666666666
User 51729 does not improve AUC. Reverting changes.
Training on augumented user 127565 36/50 current_auc = 0.7711111111111111
User 127565 AUC after training: 0.7688888888888888
User 127565 does not improve AUC. Reverting changes.
Training on augumented user 33899 37/50 current_auc = 0.7711111111111111
User 33899 AUC after training: 0.7711111111111111
User 33899 does not improve AUC. Reverting changes.
Training on augumented user 3149 38/50 current_auc = 0.7711111111111111
User 3149 AUC after training: 0.7688888888888888
User 3149 does not improve AUC. Reverting changes.
Training on augumented user 19928 39/50 current_auc = 0.7711111111111111
User 19928 AUC after training: 0.768888888888889
User 19928 does not improve AUC. Reverting changes.
Training on augumented user 17139 40/50 current_auc = 0.7711111111111111
User 17139 AUC after training: 0.7711111111111111
User 17139 does not improve AUC. Reverting changes.
Training on augumented user 90779 41/50 current_auc = 0.7711111111111111
User 90779 AUC after training: 0.7711111111111111
User 90779 does not improve AUC. Reverting changes.
Training on augumented user 27083 42/50 current_auc = 0.7711111111111111
User 27083 AUC after training: 0.7711111111111111
User 27083 does not improve AUC. Reverting changes.
Training on augumented user 74213 43/50 current_auc = 0.7711111111111111
User 74213 AUC after training: 0.7711111111111111
User 74213 does not improve AUC. Reverting changes.
Training on augumented user 90441 44/50 current_auc = 0.7711111111111111
User 90441 AUC after training: 0.7703703703703704
User 90441 does not improve AUC. Reverting changes.
Training on augumented user 113749 45/50 current_auc = 0.7711111111111111
User 113749 AUC after training: 0.7696296296296296
User 113749 does not improve AUC. Reverting changes.
Training on augumented user 47354 46/50 current_auc = 0.7711111111111111
User 47354 AUC after training: 0.7711111111111111
User 47354 does not improve AUC. Reverting changes.
Training on augumented user 9767 47/50 current_auc = 0.7711111111111111
User 9767 AUC after training: 0.7688888888888888
User 9767 does not improve AUC. Reverting changes.
Training on augumented user 28079 48/50 current_auc = 0.7711111111111111
User 28079 AUC after training: 0.7688888888888888
User 28079 does not improve AUC. Reverting changes.
Training on augumented user 35995 49/50 current_auc = 0.7711111111111111
User 35995 AUC after training: 0.7711111111111111
User 35995 does not improve AUC. Reverting changes.
[2024-12-02 19:12:26.458147] start test user 60020 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:27.259897] start test user 60020 172/568 recall augumented users by random, augumented_users = [130740, 29169, 122797, 44186, 127757, 58774, 83429, 87203, 67392, 71551, 81318, 124084, 119536, 54026, 40313, 124200, 53722, 109365, 20682, 9118, 37398, 72545, 46686, 52918, 50396, 129153, 113666, 4432, 126910, 8817, 75452, 15478, 118324, 105585, 56663, 91680, 93522, 83117, 65047, 61298, 9274, 79178, 33937, 121529, 99987, 24752, 123718, 121108, 106202, 107218]
[2024-12-02 19:12:27.275820] user = 60020 Cloud 172/568
[2024-12-02 19:12:27.290994] user = 60020 Local 172/568
[2024-12-02 19:12:27.444641] user = 60020 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:30.238450] user = 60020 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7565557729941292
Training on augumented user 130740 0/50 current_auc = 0.7565557729941292
User 130740 AUC after training: 0.7569471624266145
User 130740 improves AUC. Keeping the model.
Training on augumented user 29169 1/50 current_auc = 0.7569471624266145
User 29169 AUC after training: 0.7569471624266145
User 29169 does not improve AUC. Reverting changes.
Training on augumented user 122797 2/50 current_auc = 0.7569471624266145
User 122797 AUC after training: 0.7557729941291584
User 122797 does not improve AUC. Reverting changes.
Training on augumented user 44186 3/50 current_auc = 0.7569471624266145
User 44186 AUC after training: 0.7573385518590998
User 44186 improves AUC. Keeping the model.
Training on augumented user 127757 4/50 current_auc = 0.7573385518590998
User 127757 AUC after training: 0.7596868884540117
User 127757 improves AUC. Keeping the model.
Training on augumented user 58774 5/50 current_auc = 0.7596868884540117
User 58774 AUC after training: 0.7589041095890411
User 58774 does not improve AUC. Reverting changes.
Training on augumented user 83429 6/50 current_auc = 0.7596868884540117
User 83429 AUC after training: 0.7589041095890411
User 83429 does not improve AUC. Reverting changes.
Training on augumented user 87203 7/50 current_auc = 0.7596868884540117
User 87203 AUC after training: 0.7600782778864971
User 87203 improves AUC. Keeping the model.
Training on augumented user 67392 8/50 current_auc = 0.7600782778864971
User 67392 AUC after training: 0.7589041095890411
User 67392 does not improve AUC. Reverting changes.
Training on augumented user 71551 9/50 current_auc = 0.7600782778864971
User 71551 AUC after training: 0.7596868884540117
User 71551 does not improve AUC. Reverting changes.
Training on augumented user 81318 10/50 current_auc = 0.7600782778864971
User 81318 AUC after training: 0.7600782778864971
User 81318 does not improve AUC. Reverting changes.
Training on augumented user 124084 11/50 current_auc = 0.7600782778864971
User 124084 AUC after training: 0.7589041095890411
User 124084 does not improve AUC. Reverting changes.
Training on augumented user 119536 12/50 current_auc = 0.7600782778864971
User 119536 AUC after training: 0.7585127201565558
User 119536 does not improve AUC. Reverting changes.
Training on augumented user 54026 13/50 current_auc = 0.7600782778864971
User 54026 AUC after training: 0.7596868884540118
User 54026 does not improve AUC. Reverting changes.
Training on augumented user 40313 14/50 current_auc = 0.7600782778864971
User 40313 AUC after training: 0.7604696673189824
User 40313 improves AUC. Keeping the model.
Training on augumented user 124200 15/50 current_auc = 0.7604696673189824
User 124200 AUC after training: 0.7592954990215264
User 124200 does not improve AUC. Reverting changes.
Training on augumented user 53722 16/50 current_auc = 0.7604696673189824
User 53722 AUC after training: 0.7600782778864971
User 53722 does not improve AUC. Reverting changes.
Training on augumented user 109365 17/50 current_auc = 0.7604696673189824
User 109365 AUC after training: 0.7592954990215264
User 109365 does not improve AUC. Reverting changes.
Training on augumented user 20682 18/50 current_auc = 0.7604696673189824
User 20682 AUC after training: 0.7596868884540117
User 20682 does not improve AUC. Reverting changes.
Training on augumented user 9118 19/50 current_auc = 0.7604696673189824
User 9118 AUC after training: 0.7592954990215264
User 9118 does not improve AUC. Reverting changes.
Training on augumented user 37398 20/50 current_auc = 0.7604696673189824
User 37398 AUC after training: 0.7565557729941291
User 37398 does not improve AUC. Reverting changes.
Training on augumented user 72545 21/50 current_auc = 0.7604696673189824
User 72545 AUC after training: 0.7604696673189824
User 72545 does not improve AUC. Reverting changes.
Training on augumented user 46686 22/50 current_auc = 0.7604696673189824
User 46686 AUC after training: 0.7604696673189824
User 46686 does not improve AUC. Reverting changes.
Training on augumented user 52918 23/50 current_auc = 0.7604696673189824
User 52918 AUC after training: 0.7565557729941291
User 52918 does not improve AUC. Reverting changes.
Training on augumented user 50396 24/50 current_auc = 0.7604696673189824
User 50396 AUC after training: 0.7596868884540117
User 50396 does not improve AUC. Reverting changes.
Training on augumented user 129153 25/50 current_auc = 0.7604696673189824
User 129153 AUC after training: 0.7585127201565558
User 129153 does not improve AUC. Reverting changes.
Training on augumented user 113666 26/50 current_auc = 0.7604696673189824
User 113666 AUC after training: 0.7592954990215264
User 113666 does not improve AUC. Reverting changes.
Training on augumented user 4432 27/50 current_auc = 0.7604696673189824
User 4432 AUC after training: 0.7596868884540118
User 4432 does not improve AUC. Reverting changes.
Training on augumented user 126910 28/50 current_auc = 0.7604696673189824
User 126910 AUC after training: 0.7596868884540117
User 126910 does not improve AUC. Reverting changes.
Training on augumented user 8817 29/50 current_auc = 0.7604696673189824
User 8817 AUC after training: 0.7596868884540118
User 8817 does not improve AUC. Reverting changes.
Training on augumented user 75452 30/50 current_auc = 0.7604696673189824
User 75452 AUC after training: 0.7600782778864971
User 75452 does not improve AUC. Reverting changes.
Training on augumented user 15478 31/50 current_auc = 0.7604696673189824
User 15478 AUC after training: 0.7592954990215264
User 15478 does not improve AUC. Reverting changes.
Training on augumented user 118324 32/50 current_auc = 0.7604696673189824
User 118324 AUC after training: 0.7600782778864971
User 118324 does not improve AUC. Reverting changes.
Training on augumented user 105585 33/50 current_auc = 0.7604696673189824
User 105585 AUC after training: 0.7581213307240705
User 105585 does not improve AUC. Reverting changes.
Training on augumented user 56663 34/50 current_auc = 0.7604696673189824
User 56663 AUC after training: 0.7596868884540117
User 56663 does not improve AUC. Reverting changes.
Training on augumented user 91680 35/50 current_auc = 0.7604696673189824
User 91680 AUC after training: 0.7596868884540117
User 91680 does not improve AUC. Reverting changes.
Training on augumented user 93522 36/50 current_auc = 0.7604696673189824
User 93522 AUC after training: 0.7608610567514678
User 93522 improves AUC. Keeping the model.
Training on augumented user 83117 37/50 current_auc = 0.7608610567514678
User 83117 AUC after training: 0.7585127201565558
User 83117 does not improve AUC. Reverting changes.
Training on augumented user 65047 38/50 current_auc = 0.7608610567514678
User 65047 AUC after training: 0.7604696673189825
User 65047 does not improve AUC. Reverting changes.
Training on augumented user 61298 39/50 current_auc = 0.7608610567514678
User 61298 AUC after training: 0.7589041095890411
User 61298 does not improve AUC. Reverting changes.
Training on augumented user 9274 40/50 current_auc = 0.7608610567514678
User 9274 AUC after training: 0.7592954990215264
User 9274 does not improve AUC. Reverting changes.
Training on augumented user 79178 41/50 current_auc = 0.7608610567514678
User 79178 AUC after training: 0.7600782778864971
User 79178 does not improve AUC. Reverting changes.
Training on augumented user 33937 42/50 current_auc = 0.7608610567514678
User 33937 AUC after training: 0.761252446183953
User 33937 improves AUC. Keeping the model.
Training on augumented user 121529 43/50 current_auc = 0.761252446183953
User 121529 AUC after training: 0.7600782778864971
User 121529 does not improve AUC. Reverting changes.
Training on augumented user 99987 44/50 current_auc = 0.761252446183953
User 99987 AUC after training: 0.761252446183953
User 99987 does not improve AUC. Reverting changes.
Training on augumented user 24752 45/50 current_auc = 0.761252446183953
User 24752 AUC after training: 0.7604696673189824
User 24752 does not improve AUC. Reverting changes.
Training on augumented user 123718 46/50 current_auc = 0.761252446183953
User 123718 AUC after training: 0.7600782778864971
User 123718 does not improve AUC. Reverting changes.
Training on augumented user 121108 47/50 current_auc = 0.761252446183953
User 121108 AUC after training: 0.7608610567514678
User 121108 does not improve AUC. Reverting changes.
Training on augumented user 106202 48/50 current_auc = 0.761252446183953
User 106202 AUC after training: 0.7608610567514676
User 106202 does not improve AUC. Reverting changes.
Training on augumented user 107218 49/50 current_auc = 0.761252446183953
User 107218 AUC after training: 0.7596868884540117
User 107218 does not improve AUC. Reverting changes.
[2024-12-02 19:13:02.511751] start test user 60022 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:03.153071] start test user 60022 173/568 recall augumented users by random, augumented_users = [117565, 110707, 72389, 77248, 32306, 136643, 45005, 48590, 52880, 68423, 12880, 102121, 27328, 80463, 16502, 70277, 124885, 126063, 98572, 75838, 50457, 92554, 57607, 66713, 817, 2255, 34844, 73878, 61340, 19483, 4609, 8983, 54403, 5085, 70135, 27917, 50585, 10387, 23466, 61393, 102949, 84275, 110318, 116354, 117961, 52427, 62085, 34654, 123322, 114731]
[2024-12-02 19:13:03.167926] user = 60022 Cloud 173/568
[2024-12-02 19:13:03.196879] user = 60022 Local 173/568
[2024-12-02 19:13:03.232466] user = 60022 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:04.992548] user = 60022 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.664023631840796
Training on augumented user 117565 0/50 current_auc = 0.664023631840796
User 117565 AUC after training: 0.66386815920398
User 117565 does not improve AUC. Reverting changes.
Training on augumented user 110707 1/50 current_auc = 0.664023631840796
User 110707 AUC after training: 0.6644900497512437
User 110707 improves AUC. Keeping the model.
Training on augumented user 72389 2/50 current_auc = 0.6644900497512437
User 72389 AUC after training: 0.6632462686567163
User 72389 does not improve AUC. Reverting changes.
Training on augumented user 77248 3/50 current_auc = 0.6644900497512437
User 77248 AUC after training: 0.6634017412935322
User 77248 does not improve AUC. Reverting changes.
Training on augumented user 32306 4/50 current_auc = 0.6644900497512437
User 32306 AUC after training: 0.6634017412935324
User 32306 does not improve AUC. Reverting changes.
Training on augumented user 136643 5/50 current_auc = 0.6644900497512437
User 136643 AUC after training: 0.6641791044776119
User 136643 does not improve AUC. Reverting changes.
Training on augumented user 45005 6/50 current_auc = 0.6644900497512437
User 45005 AUC after training: 0.6629353233830846
User 45005 does not improve AUC. Reverting changes.
Training on augumented user 48590 7/50 current_auc = 0.6644900497512437
User 48590 AUC after training: 0.6635572139303482
User 48590 does not improve AUC. Reverting changes.
Training on augumented user 52880 8/50 current_auc = 0.6644900497512437
User 52880 AUC after training: 0.664023631840796
User 52880 does not improve AUC. Reverting changes.
Training on augumented user 68423 9/50 current_auc = 0.6644900497512437
User 68423 AUC after training: 0.6634017412935324
User 68423 does not improve AUC. Reverting changes.
Training on augumented user 12880 10/50 current_auc = 0.6644900497512437
User 12880 AUC after training: 0.6643345771144279
User 12880 does not improve AUC. Reverting changes.
Training on augumented user 102121 11/50 current_auc = 0.6644900497512437
User 102121 AUC after training: 0.6635572139303482
User 102121 does not improve AUC. Reverting changes.
Training on augumented user 27328 12/50 current_auc = 0.6644900497512437
User 27328 AUC after training: 0.6635572139303483
User 27328 does not improve AUC. Reverting changes.
Training on augumented user 80463 13/50 current_auc = 0.6644900497512437
User 80463 AUC after training: 0.6634017412935324
User 80463 does not improve AUC. Reverting changes.
Training on augumented user 16502 14/50 current_auc = 0.6644900497512437
User 16502 AUC after training: 0.6637126865671642
User 16502 does not improve AUC. Reverting changes.
Training on augumented user 70277 15/50 current_auc = 0.6644900497512437
User 70277 AUC after training: 0.6641791044776119
User 70277 does not improve AUC. Reverting changes.
Training on augumented user 124885 16/50 current_auc = 0.6644900497512437
User 124885 AUC after training: 0.664023631840796
User 124885 does not improve AUC. Reverting changes.
Training on augumented user 126063 17/50 current_auc = 0.6644900497512437
User 126063 AUC after training: 0.6632462686567163
User 126063 does not improve AUC. Reverting changes.
Training on augumented user 98572 18/50 current_auc = 0.6644900497512437
User 98572 AUC after training: 0.66386815920398
User 98572 does not improve AUC. Reverting changes.
Training on augumented user 75838 19/50 current_auc = 0.6644900497512437
User 75838 AUC after training: 0.6634017412935324
User 75838 does not improve AUC. Reverting changes.
Training on augumented user 50457 20/50 current_auc = 0.6644900497512437
User 50457 AUC after training: 0.6629353233830846
User 50457 does not improve AUC. Reverting changes.
Training on augumented user 92554 21/50 current_auc = 0.6644900497512437
User 92554 AUC after training: 0.6641791044776119
User 92554 does not improve AUC. Reverting changes.
Training on augumented user 57607 22/50 current_auc = 0.6644900497512437
User 57607 AUC after training: 0.6635572139303482
User 57607 does not improve AUC. Reverting changes.
Training on augumented user 66713 23/50 current_auc = 0.6644900497512437
User 66713 AUC after training: 0.6635572139303482
User 66713 does not improve AUC. Reverting changes.
Training on augumented user 817 24/50 current_auc = 0.6644900497512437
User 817 AUC after training: 0.664023631840796
User 817 does not improve AUC. Reverting changes.
Training on augumented user 2255 25/50 current_auc = 0.6644900497512437
User 2255 AUC after training: 0.6638681592039801
User 2255 does not improve AUC. Reverting changes.
Training on augumented user 34844 26/50 current_auc = 0.6644900497512437
User 34844 AUC after training: 0.6632462686567164
User 34844 does not improve AUC. Reverting changes.
Training on augumented user 73878 27/50 current_auc = 0.6644900497512437
User 73878 AUC after training: 0.6637126865671642
User 73878 does not improve AUC. Reverting changes.
Training on augumented user 61340 28/50 current_auc = 0.6644900497512437
User 61340 AUC after training: 0.6640236318407959
User 61340 does not improve AUC. Reverting changes.
Training on augumented user 19483 29/50 current_auc = 0.6644900497512437
User 19483 AUC after training: 0.6643345771144278
User 19483 does not improve AUC. Reverting changes.
Training on augumented user 4609 30/50 current_auc = 0.6644900497512437
User 4609 AUC after training: 0.6644900497512438
User 4609 improves AUC. Keeping the model.
Training on augumented user 8983 31/50 current_auc = 0.6644900497512438
User 8983 AUC after training: 0.664023631840796
User 8983 does not improve AUC. Reverting changes.
Training on augumented user 54403 32/50 current_auc = 0.6644900497512438
User 54403 AUC after training: 0.66386815920398
User 54403 does not improve AUC. Reverting changes.
Training on augumented user 5085 33/50 current_auc = 0.6644900497512438
User 5085 AUC after training: 0.6646455223880597
User 5085 improves AUC. Keeping the model.
Training on augumented user 70135 34/50 current_auc = 0.6646455223880597
User 70135 AUC after training: 0.6648009950248756
User 70135 improves AUC. Keeping the model.
Training on augumented user 27917 35/50 current_auc = 0.6648009950248756
User 27917 AUC after training: 0.6635572139303482
User 27917 does not improve AUC. Reverting changes.
Training on augumented user 50585 36/50 current_auc = 0.6648009950248756
User 50585 AUC after training: 0.6634017412935325
User 50585 does not improve AUC. Reverting changes.
Training on augumented user 10387 37/50 current_auc = 0.6648009950248756
User 10387 AUC after training: 0.664023631840796
User 10387 does not improve AUC. Reverting changes.
Training on augumented user 23466 38/50 current_auc = 0.6648009950248756
User 23466 AUC after training: 0.6644900497512437
User 23466 does not improve AUC. Reverting changes.
Training on augumented user 61393 39/50 current_auc = 0.6648009950248756
User 61393 AUC after training: 0.6654228855721392
User 61393 improves AUC. Keeping the model.
Training on augumented user 102949 40/50 current_auc = 0.6654228855721392
User 102949 AUC after training: 0.6654228855721392
User 102949 does not improve AUC. Reverting changes.
Training on augumented user 84275 41/50 current_auc = 0.6654228855721392
User 84275 AUC after training: 0.6651119402985074
User 84275 does not improve AUC. Reverting changes.
Training on augumented user 110318 42/50 current_auc = 0.6654228855721392
User 110318 AUC after training: 0.6649564676616916
User 110318 does not improve AUC. Reverting changes.
Training on augumented user 116354 43/50 current_auc = 0.6654228855721392
User 116354 AUC after training: 0.6654228855721392
User 116354 does not improve AUC. Reverting changes.
Training on augumented user 117961 44/50 current_auc = 0.6654228855721392
User 117961 AUC after training: 0.6648009950248756
User 117961 does not improve AUC. Reverting changes.
Training on augumented user 52427 45/50 current_auc = 0.6654228855721392
User 52427 AUC after training: 0.6651119402985074
User 52427 does not improve AUC. Reverting changes.
Training on augumented user 62085 46/50 current_auc = 0.6654228855721392
User 62085 AUC after training: 0.6648009950248756
User 62085 does not improve AUC. Reverting changes.
Training on augumented user 34654 47/50 current_auc = 0.6654228855721392
User 34654 AUC after training: 0.6658893034825869
User 34654 improves AUC. Keeping the model.
Training on augumented user 123322 48/50 current_auc = 0.6658893034825869
User 123322 AUC after training: 0.6652674129353233
User 123322 does not improve AUC. Reverting changes.
Training on augumented user 114731 49/50 current_auc = 0.6658893034825869
User 114731 AUC after training: 0.666044776119403
User 114731 improves AUC. Keeping the model.
[2024-12-02 19:13:35.282969] start test user 60135 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:35.852947] start test user 60135 174/568 recall augumented users by random, augumented_users = [5833, 80164, 11008, 134824, 10463, 35769, 81270, 93463, 78863, 104143, 124395, 108918, 87625, 123587, 16793, 99309, 107954, 76378, 3185, 41934, 73168, 133127, 108529, 127498, 89210, 14958, 113781, 66959, 43478, 118135, 39596, 61015, 20145, 123332, 86880, 55154, 120089, 60905, 124153, 18791, 86865, 4229, 133921, 75571, 914, 42810, 81487, 100167, 91616, 90166]
[2024-12-02 19:13:35.875008] user = 60135 Cloud 174/568
[2024-12-02 19:13:35.947423] user = 60135 Local 174/568
[2024-12-02 19:13:36.121091] user = 60135 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:37.667193] user = 60135 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6731555555555556
Training on augumented user 5833 0/50 current_auc = 0.6731555555555556
User 5833 AUC after training: 0.6731555555555555
User 5833 does not improve AUC. Reverting changes.
Training on augumented user 80164 1/50 current_auc = 0.6731555555555556
User 80164 AUC after training: 0.6732888888888889
User 80164 improves AUC. Keeping the model.
Training on augumented user 11008 2/50 current_auc = 0.6732888888888889
User 11008 AUC after training: 0.6732888888888888
User 11008 does not improve AUC. Reverting changes.
Training on augumented user 134824 3/50 current_auc = 0.6732888888888889
User 134824 AUC after training: 0.6733111111111112
User 134824 improves AUC. Keeping the model.
Training on augumented user 10463 4/50 current_auc = 0.6733111111111112
User 10463 AUC after training: 0.6731777777777779
User 10463 does not improve AUC. Reverting changes.
Training on augumented user 35769 5/50 current_auc = 0.6733111111111112
User 35769 AUC after training: 0.6729555555555556
User 35769 does not improve AUC. Reverting changes.
Training on augumented user 81270 6/50 current_auc = 0.6733111111111112
User 81270 AUC after training: 0.6733111111111111
User 81270 does not improve AUC. Reverting changes.
Training on augumented user 93463 7/50 current_auc = 0.6733111111111112
User 93463 AUC after training: 0.6731555555555556
User 93463 does not improve AUC. Reverting changes.
Training on augumented user 78863 8/50 current_auc = 0.6733111111111112
User 78863 AUC after training: 0.6732666666666666
User 78863 does not improve AUC. Reverting changes.
Training on augumented user 104143 9/50 current_auc = 0.6733111111111112
User 104143 AUC after training: 0.6734222222222221
User 104143 improves AUC. Keeping the model.
Training on augumented user 124395 10/50 current_auc = 0.6734222222222221
User 124395 AUC after training: 0.6733111111111112
User 124395 does not improve AUC. Reverting changes.
Training on augumented user 108918 11/50 current_auc = 0.6734222222222221
User 108918 AUC after training: 0.6734
User 108918 does not improve AUC. Reverting changes.
Training on augumented user 87625 12/50 current_auc = 0.6734222222222221
User 87625 AUC after training: 0.6735333333333334
User 87625 improves AUC. Keeping the model.
Training on augumented user 123587 13/50 current_auc = 0.6735333333333334
User 123587 AUC after training: 0.6736888888888888
User 123587 improves AUC. Keeping the model.
Training on augumented user 16793 14/50 current_auc = 0.6736888888888888
User 16793 AUC after training: 0.6733111111111111
User 16793 does not improve AUC. Reverting changes.
Training on augumented user 99309 15/50 current_auc = 0.6736888888888888
User 99309 AUC after training: 0.6736222222222222
User 99309 does not improve AUC. Reverting changes.
Training on augumented user 107954 16/50 current_auc = 0.6736888888888888
User 107954 AUC after training: 0.6735111111111112
User 107954 does not improve AUC. Reverting changes.
Training on augumented user 76378 17/50 current_auc = 0.6736888888888888
User 76378 AUC after training: 0.6735777777777778
User 76378 does not improve AUC. Reverting changes.
Training on augumented user 3185 18/50 current_auc = 0.6736888888888888
User 3185 AUC after training: 0.6735777777777777
User 3185 does not improve AUC. Reverting changes.
Training on augumented user 41934 19/50 current_auc = 0.6736888888888888
User 41934 AUC after training: 0.6735111111111112
User 41934 does not improve AUC. Reverting changes.
Training on augumented user 73168 20/50 current_auc = 0.6736888888888888
User 73168 AUC after training: 0.6734666666666667
User 73168 does not improve AUC. Reverting changes.
Training on augumented user 133127 21/50 current_auc = 0.6736888888888888
User 133127 AUC after training: 0.6736222222222223
User 133127 does not improve AUC. Reverting changes.
Training on augumented user 108529 22/50 current_auc = 0.6736888888888888
User 108529 AUC after training: 0.6734222222222221
User 108529 does not improve AUC. Reverting changes.
Training on augumented user 127498 23/50 current_auc = 0.6736888888888888
User 127498 AUC after training: 0.6736222222222221
User 127498 does not improve AUC. Reverting changes.
Training on augumented user 89210 24/50 current_auc = 0.6736888888888888
User 89210 AUC after training: 0.673888888888889
User 89210 improves AUC. Keeping the model.
Training on augumented user 14958 25/50 current_auc = 0.673888888888889
User 14958 AUC after training: 0.6736888888888889
User 14958 does not improve AUC. Reverting changes.
Training on augumented user 113781 26/50 current_auc = 0.673888888888889
User 113781 AUC after training: 0.6736888888888889
User 113781 does not improve AUC. Reverting changes.
Training on augumented user 66959 27/50 current_auc = 0.673888888888889
User 66959 AUC after training: 0.6737555555555557
User 66959 does not improve AUC. Reverting changes.
Training on augumented user 43478 28/50 current_auc = 0.673888888888889
User 43478 AUC after training: 0.6730444444444443
User 43478 does not improve AUC. Reverting changes.
Training on augumented user 118135 29/50 current_auc = 0.673888888888889
User 118135 AUC after training: 0.6734
User 118135 does not improve AUC. Reverting changes.
Training on augumented user 39596 30/50 current_auc = 0.673888888888889
User 39596 AUC after training: 0.6736222222222222
User 39596 does not improve AUC. Reverting changes.
Training on augumented user 61015 31/50 current_auc = 0.673888888888889
User 61015 AUC after training: 0.6737777777777778
User 61015 does not improve AUC. Reverting changes.
Training on augumented user 20145 32/50 current_auc = 0.673888888888889
User 20145 AUC after training: 0.6736222222222222
User 20145 does not improve AUC. Reverting changes.
Training on augumented user 123332 33/50 current_auc = 0.673888888888889
User 123332 AUC after training: 0.6734444444444444
User 123332 does not improve AUC. Reverting changes.
Training on augumented user 86880 34/50 current_auc = 0.673888888888889
User 86880 AUC after training: 0.6736666666666666
User 86880 does not improve AUC. Reverting changes.
Training on augumented user 55154 35/50 current_auc = 0.673888888888889
User 55154 AUC after training: 0.6736222222222222
User 55154 does not improve AUC. Reverting changes.
Training on augumented user 120089 36/50 current_auc = 0.673888888888889
User 120089 AUC after training: 0.6730777777777778
User 120089 does not improve AUC. Reverting changes.
Training on augumented user 60905 37/50 current_auc = 0.673888888888889
User 60905 AUC after training: 0.6733333333333333
User 60905 does not improve AUC. Reverting changes.
Training on augumented user 124153 38/50 current_auc = 0.673888888888889
User 124153 AUC after training: 0.6736666666666666
User 124153 does not improve AUC. Reverting changes.
Training on augumented user 18791 39/50 current_auc = 0.673888888888889
User 18791 AUC after training: 0.6736888888888889
User 18791 does not improve AUC. Reverting changes.
Training on augumented user 86865 40/50 current_auc = 0.673888888888889
User 86865 AUC after training: 0.6739555555555556
User 86865 improves AUC. Keeping the model.
Training on augumented user 4229 41/50 current_auc = 0.6739555555555556
User 4229 AUC after training: 0.6734666666666668
User 4229 does not improve AUC. Reverting changes.
Training on augumented user 133921 42/50 current_auc = 0.6739555555555556
User 133921 AUC after training: 0.6738000000000001
User 133921 does not improve AUC. Reverting changes.
Training on augumented user 75571 43/50 current_auc = 0.6739555555555556
User 75571 AUC after training: 0.6741111111111112
User 75571 improves AUC. Keeping the model.
Training on augumented user 914 44/50 current_auc = 0.6741111111111112
User 914 AUC after training: 0.6740888888888888
User 914 does not improve AUC. Reverting changes.
Training on augumented user 42810 45/50 current_auc = 0.6741111111111112
User 42810 AUC after training: 0.6740666666666666
User 42810 does not improve AUC. Reverting changes.
Training on augumented user 81487 46/50 current_auc = 0.6741111111111112
User 81487 AUC after training: 0.6734666666666667
User 81487 does not improve AUC. Reverting changes.
Training on augumented user 100167 47/50 current_auc = 0.6741111111111112
User 100167 AUC after training: 0.6738666666666667
User 100167 does not improve AUC. Reverting changes.
Training on augumented user 91616 48/50 current_auc = 0.6741111111111112
User 91616 AUC after training: 0.6739777777777778
User 91616 does not improve AUC. Reverting changes.
Training on augumented user 90166 49/50 current_auc = 0.6741111111111112
User 90166 AUC after training: 0.6739999999999999
User 90166 does not improve AUC. Reverting changes.
[2024-12-02 19:14:09.096823] start test user 60138 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:09.508420] start test user 60138 175/568 recall augumented users by random, augumented_users = [15753, 4351, 88022, 130076, 97475, 137648, 69789, 64525, 66865, 131561, 24069, 68448, 58013, 68975, 136712, 93580, 10560, 87025, 129624, 123096, 117734, 19097, 38632, 113657, 57393, 46236, 94341, 4465, 93491, 56635, 115119, 104095, 130137, 63717, 28183, 35991, 135101, 111807, 51035, 95264, 76540, 131662, 37317, 46027, 84161, 119644, 9442, 44009, 12393, 102325]
[2024-12-02 19:14:09.525141] user = 60138 Cloud 175/568
[2024-12-02 19:14:09.592899] user = 60138 Local 175/568
[2024-12-02 19:14:09.754641] user = 60138 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:13.143596] user = 60138 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8091017214397497
Training on augumented user 15753 0/50 current_auc = 0.8091017214397497
User 15753 AUC after training: 0.8075743348982787
User 15753 does not improve AUC. Reverting changes.
Training on augumented user 4351 1/50 current_auc = 0.8091017214397497
User 4351 AUC after training: 0.8086885758998434
User 4351 does not improve AUC. Reverting changes.
Training on augumented user 88022 2/50 current_auc = 0.8091017214397497
User 88022 AUC after training: 0.809151799687011
User 88022 improves AUC. Keeping the model.
Training on augumented user 130076 3/50 current_auc = 0.809151799687011
User 130076 AUC after training: 0.8094021909233178
User 130076 improves AUC. Keeping the model.
Training on augumented user 97475 4/50 current_auc = 0.8094021909233178
User 97475 AUC after training: 0.8090015649452269
User 97475 does not improve AUC. Reverting changes.
Training on augumented user 137648 5/50 current_auc = 0.8094021909233178
User 137648 AUC after training: 0.8090516431924882
User 137648 does not improve AUC. Reverting changes.
Training on augumented user 69789 6/50 current_auc = 0.8094021909233178
User 69789 AUC after training: 0.8094021909233177
User 69789 does not improve AUC. Reverting changes.
Training on augumented user 64525 7/50 current_auc = 0.8094021909233178
User 64525 AUC after training: 0.8094021909233177
User 64525 does not improve AUC. Reverting changes.
Training on augumented user 66865 8/50 current_auc = 0.8094021909233178
User 66865 AUC after training: 0.8093270735524256
User 66865 does not improve AUC. Reverting changes.
Training on augumented user 131561 9/50 current_auc = 0.8094021909233178
User 131561 AUC after training: 0.8092769953051643
User 131561 does not improve AUC. Reverting changes.
Training on augumented user 24069 10/50 current_auc = 0.8094021909233178
User 24069 AUC after training: 0.8089389671361502
User 24069 does not improve AUC. Reverting changes.
Training on augumented user 68448 11/50 current_auc = 0.8094021909233178
User 68448 AUC after training: 0.809189358372457
User 68448 does not improve AUC. Reverting changes.
Training on augumented user 58013 12/50 current_auc = 0.8094021909233178
User 58013 AUC after training: 0.809489827856025
User 58013 improves AUC. Keeping the model.
Training on augumented user 68975 13/50 current_auc = 0.809489827856025
User 68975 AUC after training: 0.8096025039123631
User 68975 improves AUC. Keeping the model.
Training on augumented user 136712 14/50 current_auc = 0.8096025039123631
User 136712 AUC after training: 0.8087386541471049
User 136712 does not improve AUC. Reverting changes.
Training on augumented user 93580 15/50 current_auc = 0.8096025039123631
User 93580 AUC after training: 0.8091142410015649
User 93580 does not improve AUC. Reverting changes.
Training on augumented user 10560 16/50 current_auc = 0.8096025039123631
User 10560 AUC after training: 0.8064976525821597
User 10560 does not improve AUC. Reverting changes.
Training on augumented user 87025 17/50 current_auc = 0.8096025039123631
User 87025 AUC after training: 0.8094397496087636
User 87025 does not improve AUC. Reverting changes.
Training on augumented user 129624 18/50 current_auc = 0.8096025039123631
User 129624 AUC after training: 0.8095023474178403
User 129624 does not improve AUC. Reverting changes.
Training on augumented user 123096 19/50 current_auc = 0.8096025039123631
User 123096 AUC after training: 0.8092769953051644
User 123096 does not improve AUC. Reverting changes.
Training on augumented user 117734 20/50 current_auc = 0.8096025039123631
User 117734 AUC after training: 0.8094647887323944
User 117734 does not improve AUC. Reverting changes.
Training on augumented user 19097 21/50 current_auc = 0.8096025039123631
User 19097 AUC after training: 0.8095399061032863
User 19097 does not improve AUC. Reverting changes.
Training on augumented user 38632 22/50 current_auc = 0.8096025039123631
User 38632 AUC after training: 0.8095399061032864
User 38632 does not improve AUC. Reverting changes.
Training on augumented user 113657 23/50 current_auc = 0.8096025039123631
User 113657 AUC after training: 0.809715179968701
User 113657 improves AUC. Keeping the model.
Training on augumented user 57393 24/50 current_auc = 0.809715179968701
User 57393 AUC after training: 0.8095399061032864
User 57393 does not improve AUC. Reverting changes.
Training on augumented user 46236 25/50 current_auc = 0.809715179968701
User 46236 AUC after training: 0.8093020344287951
User 46236 does not improve AUC. Reverting changes.
Training on augumented user 94341 26/50 current_auc = 0.809715179968701
User 94341 AUC after training: 0.8094647887323945
User 94341 does not improve AUC. Reverting changes.
Training on augumented user 4465 27/50 current_auc = 0.809715179968701
User 4465 AUC after training: 0.8096150234741784
User 4465 does not improve AUC. Reverting changes.
Training on augumented user 93491 28/50 current_auc = 0.809715179968701
User 93491 AUC after training: 0.8096150234741785
User 93491 does not improve AUC. Reverting changes.
Training on augumented user 56635 29/50 current_auc = 0.809715179968701
User 56635 AUC after training: 0.8097527386541471
User 56635 improves AUC. Keeping the model.
Training on augumented user 115119 30/50 current_auc = 0.8097527386541471
User 115119 AUC after training: 0.8096901408450705
User 115119 does not improve AUC. Reverting changes.
Training on augumented user 104095 31/50 current_auc = 0.8097527386541471
User 104095 AUC after training: 0.810153364632238
User 104095 improves AUC. Keeping the model.
Training on augumented user 130137 32/50 current_auc = 0.810153364632238
User 130137 AUC after training: 0.8101032863849765
User 130137 does not improve AUC. Reverting changes.
Training on augumented user 63717 33/50 current_auc = 0.810153364632238
User 63717 AUC after training: 0.8099029733959312
User 63717 does not improve AUC. Reverting changes.
Training on augumented user 28183 34/50 current_auc = 0.810153364632238
User 28183 AUC after training: 0.810378716744914
User 28183 improves AUC. Keeping the model.
Training on augumented user 35991 35/50 current_auc = 0.810378716744914
User 35991 AUC after training: 0.8103411580594679
User 35991 does not improve AUC. Reverting changes.
Training on augumented user 135101 36/50 current_auc = 0.810378716744914
User 135101 AUC after training: 0.8103912363067292
User 135101 improves AUC. Keeping the model.
Training on augumented user 111807 37/50 current_auc = 0.8103912363067292
User 111807 AUC after training: 0.8105039123630673
User 111807 improves AUC. Keeping the model.
Training on augumented user 51035 38/50 current_auc = 0.8105039123630673
User 51035 AUC after training: 0.8105164319248825
User 51035 improves AUC. Keeping the model.
Training on augumented user 95264 39/50 current_auc = 0.8105164319248825
User 95264 AUC after training: 0.8105539906103286
User 95264 improves AUC. Keeping the model.
Training on augumented user 76540 40/50 current_auc = 0.8105539906103286
User 76540 AUC after training: 0.809339593114241
User 76540 does not improve AUC. Reverting changes.
Training on augumented user 131662 41/50 current_auc = 0.8105539906103286
User 131662 AUC after training: 0.8105414710485133
User 131662 does not improve AUC. Reverting changes.
Training on augumented user 37317 42/50 current_auc = 0.8105539906103286
User 37317 AUC after training: 0.8093771517996871
User 37317 does not improve AUC. Reverting changes.
Training on augumented user 46027 43/50 current_auc = 0.8105539906103286
User 46027 AUC after training: 0.8105289514866979
User 46027 does not improve AUC. Reverting changes.
Training on augumented user 84161 44/50 current_auc = 0.8105539906103286
User 84161 AUC after training: 0.8104162754303599
User 84161 does not improve AUC. Reverting changes.
Training on augumented user 119644 45/50 current_auc = 0.8105539906103286
User 119644 AUC after training: 0.810435054773083
User 119644 does not improve AUC. Reverting changes.
Training on augumented user 9442 46/50 current_auc = 0.8105539906103286
User 9442 AUC after training: 0.8105414710485135
User 9442 does not improve AUC. Reverting changes.
Training on augumented user 44009 47/50 current_auc = 0.8105539906103286
User 44009 AUC after training: 0.8097902973395932
User 44009 does not improve AUC. Reverting changes.
Training on augumented user 12393 48/50 current_auc = 0.8105539906103286
User 12393 AUC after training: 0.81060406885759
User 12393 improves AUC. Keeping the model.
Training on augumented user 102325 49/50 current_auc = 0.81060406885759
User 102325 AUC after training: 0.8105915492957747
User 102325 does not improve AUC. Reverting changes.
[2024-12-02 19:14:51.008566] start test user 60159 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:52.075159] start test user 60159 176/568 recall augumented users by random, augumented_users = [69048, 37613, 68148, 57590, 113777, 43547, 45839, 67069, 20478, 40451, 59348, 23486, 99721, 37775, 53950, 89368, 119821, 93210, 60278, 42181, 37788, 76565, 38611, 62618, 53612, 29826, 3452, 96691, 127239, 92860, 52893, 71093, 93130, 71849, 455, 31032, 74947, 60226, 10551, 19149, 31459, 40851, 71269, 41118, 58217, 104098, 15446, 63041, 37203, 63643]
[2024-12-02 19:14:52.100486] user = 60159 Cloud 176/568
[2024-12-02 19:14:52.173257] user = 60159 Local 176/568
[2024-12-02 19:14:52.680790] user = 60159 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:55.677652] user = 60159 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5966195812982591
Training on augumented user 69048 0/50 current_auc = 0.5966195812982591
User 69048 AUC after training: 0.600551243337454
User 69048 improves AUC. Keeping the model.
Training on augumented user 37613 1/50 current_auc = 0.600551243337454
User 37613 AUC after training: 0.6006931074316519
User 37613 improves AUC. Keeping the model.
Training on augumented user 68148 2/50 current_auc = 0.6006931074316519
User 68148 AUC after training: 0.6001256510548608
User 68148 does not improve AUC. Reverting changes.
Training on augumented user 57590 3/50 current_auc = 0.6006931074316519
User 57590 AUC after training: 0.6000648521573475
User 57590 does not improve AUC. Reverting changes.
Training on augumented user 113777 4/50 current_auc = 0.6006931074316519
User 113777 AUC after training: 0.6011997649109296
User 113777 improves AUC. Keeping the model.
Training on augumented user 43547 5/50 current_auc = 0.6011997649109296
User 43547 AUC after training: 0.595829195630586
User 43547 does not improve AUC. Reverting changes.
Training on augumented user 45839 6/50 current_auc = 0.6011997649109296
User 45839 AUC after training: 0.6023549439636828
User 45839 improves AUC. Keeping the model.
Training on augumented user 67069 7/50 current_auc = 0.6023549439636828
User 67069 AUC after training: 0.6020104168777738
User 67069 does not improve AUC. Reverting changes.
Training on augumented user 20478 8/50 current_auc = 0.6023549439636828
User 20478 AUC after training: 0.6018685527835761
User 20478 does not improve AUC. Reverting changes.
Training on augumented user 40451 9/50 current_auc = 0.6023549439636828
User 40451 AUC after training: 0.6016253571935228
User 40451 does not improve AUC. Reverting changes.
Training on augumented user 59348 10/50 current_auc = 0.6023549439636828
User 59348 AUC after training: 0.6032871937255537
User 59348 improves AUC. Keeping the model.
Training on augumented user 23486 11/50 current_auc = 0.6032871937255537
User 23486 AUC after training: 0.603327726323896
User 23486 improves AUC. Keeping the model.
Training on augumented user 99721 12/50 current_auc = 0.603327726323896
User 99721 AUC after training: 0.603550655614778
User 99721 improves AUC. Keeping the model.
Training on augumented user 37775 13/50 current_auc = 0.603550655614778
User 37775 AUC after training: 0.6013213627059563
User 37775 does not improve AUC. Reverting changes.
Training on augumented user 53950 14/50 current_auc = 0.603550655614778
User 53950 AUC after training: 0.6033885252214093
User 53950 does not improve AUC. Reverting changes.
Training on augumented user 89368 15/50 current_auc = 0.603550655614778
User 89368 AUC after training: 0.6022738787669983
User 89368 does not improve AUC. Reverting changes.
Training on augumented user 119821 16/50 current_auc = 0.603550655614778
User 119821 AUC after training: 0.6023144113653405
User 119821 does not improve AUC. Reverting changes.
Training on augumented user 93210 17/50 current_auc = 0.603550655614778
User 93210 AUC after training: 0.603712786008147
User 93210 improves AUC. Keeping the model.
Training on augumented user 60278 18/50 current_auc = 0.603712786008147
User 60278 AUC after training: 0.6038546501023447
User 60278 improves AUC. Keeping the model.
Training on augumented user 42181 19/50 current_auc = 0.6038546501023447
User 42181 AUC after training: 0.6038141175040026
User 42181 does not improve AUC. Reverting changes.
Training on augumented user 37788 20/50 current_auc = 0.6038546501023447
User 37788 AUC after training: 0.6040370467948848
User 37788 improves AUC. Keeping the model.
Training on augumented user 76565 21/50 current_auc = 0.6040370467948848
User 76565 AUC after training: 0.6043005086841091
User 76565 improves AUC. Keeping the model.
Training on augumented user 38611 22/50 current_auc = 0.6043005086841091
User 38611 AUC after training: 0.6037735849056604
User 38611 does not improve AUC. Reverting changes.
Training on augumented user 62618 23/50 current_auc = 0.6043005086841091
User 62618 AUC after training: 0.6031250633321849
User 62618 does not improve AUC. Reverting changes.
Training on augumented user 53612 24/50 current_auc = 0.6043005086841091
User 53612 AUC after training: 0.604645035770018
User 53612 improves AUC. Keeping the model.
Training on augumented user 29826 25/50 current_auc = 0.604645035770018
User 29826 AUC after training: 0.6024360091603672
User 29826 does not improve AUC. Reverting changes.
Training on augumented user 3452 26/50 current_auc = 0.604645035770018
User 3452 AUC after training: 0.6047261009667024
User 3452 improves AUC. Keeping the model.
Training on augumented user 96691 27/50 current_auc = 0.6047261009667024
User 96691 AUC after training: 0.6049895628559269
User 96691 improves AUC. Keeping the model.
Training on augumented user 127239 28/50 current_auc = 0.6049895628559269
User 127239 AUC after training: 0.603145329631356
User 127239 does not improve AUC. Reverting changes.
Training on augumented user 92860 29/50 current_auc = 0.6049895628559269
User 92860 AUC after training: 0.6048882313600714
User 92860 does not improve AUC. Reverting changes.
Training on augumented user 52893 30/50 current_auc = 0.6049895628559269
User 52893 AUC after training: 0.6043410412824515
User 52893 does not improve AUC. Reverting changes.
Training on augumented user 71093 31/50 current_auc = 0.6049895628559269
User 71093 AUC after training: 0.6059623452161401
User 71093 improves AUC. Keeping the model.
Training on augumented user 93130 32/50 current_auc = 0.6059623452161401
User 93130 AUC after training: 0.6051314269501247
User 93130 does not improve AUC. Reverting changes.
Training on augumented user 71849 33/50 current_auc = 0.6059623452161401
User 71849 AUC after training: 0.605759682224429
User 71849 does not improve AUC. Reverting changes.
Training on augumented user 455 34/50 current_auc = 0.6059623452161401
User 455 AUC after training: 0.6060839430111665
User 455 improves AUC. Keeping the model.
Training on augumented user 31032 35/50 current_auc = 0.6060839430111665
User 31032 AUC after training: 0.606124475609509
User 31032 improves AUC. Keeping the model.
Training on augumented user 74947 36/50 current_auc = 0.606124475609509
User 74947 AUC after training: 0.6060636767119956
User 74947 does not improve AUC. Reverting changes.
Training on augumented user 60226 37/50 current_auc = 0.606124475609509
User 60226 AUC after training: 0.6028818677421316
User 60226 does not improve AUC. Reverting changes.
Training on augumented user 10551 38/50 current_auc = 0.606124475609509
User 10551 AUC after training: 0.6061447419086801
User 10551 improves AUC. Keeping the model.
Training on augumented user 19149 39/50 current_auc = 0.6061447419086801
User 19149 AUC after training: 0.6063474049003911
User 19149 improves AUC. Keeping the model.
Training on augumented user 31459 40/50 current_auc = 0.6063474049003911
User 31459 AUC after training: 0.6051719595484668
User 31459 does not improve AUC. Reverting changes.
Training on augumented user 40851 41/50 current_auc = 0.6063474049003911
User 40851 AUC after training: 0.6063879374987334
User 40851 improves AUC. Keeping the model.
Training on augumented user 71269 42/50 current_auc = 0.6063879374987334
User 71269 AUC after training: 0.6063879374987333
User 71269 does not improve AUC. Reverting changes.
Training on augumented user 41118 43/50 current_auc = 0.6063879374987334
User 41118 AUC after training: 0.6058407474211135
User 41118 does not improve AUC. Reverting changes.
Training on augumented user 58217 44/50 current_auc = 0.6063879374987334
User 58217 AUC after training: 0.6062764728532923
User 58217 does not improve AUC. Reverting changes.
Training on augumented user 104098 45/50 current_auc = 0.6063879374987334
User 104098 AUC after training: 0.60650953529376
User 104098 improves AUC. Keeping the model.
Training on augumented user 15446 46/50 current_auc = 0.60650953529376
User 15446 AUC after training: 0.6059826115153111
User 15446 does not improve AUC. Reverting changes.
Training on augumented user 63041 47/50 current_auc = 0.60650953529376
User 63041 AUC after training: 0.6065500678921021
User 63041 improves AUC. Keeping the model.
Training on augumented user 37203 48/50 current_auc = 0.6065500678921021
User 37203 AUC after training: 0.6061244756095089
User 37203 does not improve AUC. Reverting changes.
Training on augumented user 63643 49/50 current_auc = 0.6065500678921021
User 63643 AUC after training: 0.6061447419086801
User 63643 does not improve AUC. Reverting changes.
[2024-12-02 19:15:26.513495] start test user 60205 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:26.936759] start test user 60205 177/568 recall augumented users by random, augumented_users = [81622, 106813, 11216, 69839, 35592, 73872, 113414, 127187, 91674, 18537, 20504, 67865, 42489, 126106, 8086, 132019, 115885, 99984, 23081, 60284, 92141, 35201, 113156, 50933, 73199, 48408, 8518, 114645, 11784, 79441, 136604, 116418, 22177, 136203, 43499, 38897, 108841, 90132, 31120, 46943, 29418, 59759, 87874, 130277, 18442, 40368, 105996, 124813, 7128, 120530]
[2024-12-02 19:15:26.970345] user = 60205 Cloud 177/568
[2024-12-02 19:15:26.994672] user = 60205 Local 177/568
[2024-12-02 19:15:27.069634] user = 60205 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:29.316912] user = 60205 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7708333333333334
Training on augumented user 81622 0/50 current_auc = 0.7708333333333334
User 81622 AUC after training: 0.7708333333333334
User 81622 does not improve AUC. Reverting changes.
Training on augumented user 106813 1/50 current_auc = 0.7708333333333334
User 106813 AUC after training: 0.75
User 106813 does not improve AUC. Reverting changes.
Training on augumented user 11216 2/50 current_auc = 0.7708333333333334
User 11216 AUC after training: 0.7708333333333334
User 11216 does not improve AUC. Reverting changes.
Training on augumented user 69839 3/50 current_auc = 0.7708333333333334
User 69839 AUC after training: 0.7708333333333334
User 69839 does not improve AUC. Reverting changes.
Training on augumented user 35592 4/50 current_auc = 0.7708333333333334
User 35592 AUC after training: 0.7708333333333334
User 35592 does not improve AUC. Reverting changes.
Training on augumented user 73872 5/50 current_auc = 0.7708333333333334
User 73872 AUC after training: 0.7708333333333334
User 73872 does not improve AUC. Reverting changes.
Training on augumented user 113414 6/50 current_auc = 0.7708333333333334
User 113414 AUC after training: 0.7708333333333334
User 113414 does not improve AUC. Reverting changes.
Training on augumented user 127187 7/50 current_auc = 0.7708333333333334
User 127187 AUC after training: 0.7708333333333334
User 127187 does not improve AUC. Reverting changes.
Training on augumented user 91674 8/50 current_auc = 0.7708333333333334
User 91674 AUC after training: 0.7708333333333334
User 91674 does not improve AUC. Reverting changes.
Training on augumented user 18537 9/50 current_auc = 0.7708333333333334
User 18537 AUC after training: 0.7708333333333334
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 20504 10/50 current_auc = 0.7708333333333334
User 20504 AUC after training: 0.7708333333333334
User 20504 does not improve AUC. Reverting changes.
Training on augumented user 67865 11/50 current_auc = 0.7708333333333334
User 67865 AUC after training: 0.7708333333333334
User 67865 does not improve AUC. Reverting changes.
Training on augumented user 42489 12/50 current_auc = 0.7708333333333334
User 42489 AUC after training: 0.7708333333333334
User 42489 does not improve AUC. Reverting changes.
Training on augumented user 126106 13/50 current_auc = 0.7708333333333334
User 126106 AUC after training: 0.7708333333333334
User 126106 does not improve AUC. Reverting changes.
Training on augumented user 8086 14/50 current_auc = 0.7708333333333334
User 8086 AUC after training: 0.7708333333333334
User 8086 does not improve AUC. Reverting changes.
Training on augumented user 132019 15/50 current_auc = 0.7708333333333334
User 132019 AUC after training: 0.7708333333333334
User 132019 does not improve AUC. Reverting changes.
Training on augumented user 115885 16/50 current_auc = 0.7708333333333334
User 115885 AUC after training: 0.7708333333333334
User 115885 does not improve AUC. Reverting changes.
Training on augumented user 99984 17/50 current_auc = 0.7708333333333334
User 99984 AUC after training: 0.7708333333333334
User 99984 does not improve AUC. Reverting changes.
Training on augumented user 23081 18/50 current_auc = 0.7708333333333334
User 23081 AUC after training: 0.7708333333333334
User 23081 does not improve AUC. Reverting changes.
Training on augumented user 60284 19/50 current_auc = 0.7708333333333334
User 60284 AUC after training: 0.7708333333333334
User 60284 does not improve AUC. Reverting changes.
Training on augumented user 92141 20/50 current_auc = 0.7708333333333334
User 92141 AUC after training: 0.7708333333333334
User 92141 does not improve AUC. Reverting changes.
Training on augumented user 35201 21/50 current_auc = 0.7708333333333334
User 35201 AUC after training: 0.7708333333333334
User 35201 does not improve AUC. Reverting changes.
Training on augumented user 113156 22/50 current_auc = 0.7708333333333334
User 113156 AUC after training: 0.7708333333333334
User 113156 does not improve AUC. Reverting changes.
Training on augumented user 50933 23/50 current_auc = 0.7708333333333334
User 50933 AUC after training: 0.7708333333333334
User 50933 does not improve AUC. Reverting changes.
Training on augumented user 73199 24/50 current_auc = 0.7708333333333334
User 73199 AUC after training: 0.7708333333333334
User 73199 does not improve AUC. Reverting changes.
Training on augumented user 48408 25/50 current_auc = 0.7708333333333334
User 48408 AUC after training: 0.7708333333333334
User 48408 does not improve AUC. Reverting changes.
Training on augumented user 8518 26/50 current_auc = 0.7708333333333334
User 8518 AUC after training: 0.7708333333333334
User 8518 does not improve AUC. Reverting changes.
Training on augumented user 114645 27/50 current_auc = 0.7708333333333334
User 114645 AUC after training: 0.75
User 114645 does not improve AUC. Reverting changes.
Training on augumented user 11784 28/50 current_auc = 0.7708333333333334
User 11784 AUC after training: 0.7708333333333334
User 11784 does not improve AUC. Reverting changes.
Training on augumented user 79441 29/50 current_auc = 0.7708333333333334
User 79441 AUC after training: 0.75
User 79441 does not improve AUC. Reverting changes.
Training on augumented user 136604 30/50 current_auc = 0.7708333333333334
User 136604 AUC after training: 0.7708333333333334
User 136604 does not improve AUC. Reverting changes.
Training on augumented user 116418 31/50 current_auc = 0.7708333333333334
User 116418 AUC after training: 0.7708333333333334
User 116418 does not improve AUC. Reverting changes.
Training on augumented user 22177 32/50 current_auc = 0.7708333333333334
User 22177 AUC after training: 0.7708333333333334
User 22177 does not improve AUC. Reverting changes.
Training on augumented user 136203 33/50 current_auc = 0.7708333333333334
User 136203 AUC after training: 0.7708333333333334
User 136203 does not improve AUC. Reverting changes.
Training on augumented user 43499 34/50 current_auc = 0.7708333333333334
User 43499 AUC after training: 0.7708333333333334
User 43499 does not improve AUC. Reverting changes.
Training on augumented user 38897 35/50 current_auc = 0.7708333333333334
User 38897 AUC after training: 0.7708333333333334
User 38897 does not improve AUC. Reverting changes.
Training on augumented user 108841 36/50 current_auc = 0.7708333333333334
User 108841 AUC after training: 0.7708333333333334
User 108841 does not improve AUC. Reverting changes.
Training on augumented user 90132 37/50 current_auc = 0.7708333333333334
User 90132 AUC after training: 0.7708333333333334
User 90132 does not improve AUC. Reverting changes.
Training on augumented user 31120 38/50 current_auc = 0.7708333333333334
User 31120 AUC after training: 0.7708333333333334
User 31120 does not improve AUC. Reverting changes.
Training on augumented user 46943 39/50 current_auc = 0.7708333333333334
User 46943 AUC after training: 0.7708333333333334
User 46943 does not improve AUC. Reverting changes.
Training on augumented user 29418 40/50 current_auc = 0.7708333333333334
User 29418 AUC after training: 0.7708333333333334
User 29418 does not improve AUC. Reverting changes.
Training on augumented user 59759 41/50 current_auc = 0.7708333333333334
User 59759 AUC after training: 0.7708333333333334
User 59759 does not improve AUC. Reverting changes.
Training on augumented user 87874 42/50 current_auc = 0.7708333333333334
User 87874 AUC after training: 0.7708333333333334
User 87874 does not improve AUC. Reverting changes.
Training on augumented user 130277 43/50 current_auc = 0.7708333333333334
User 130277 AUC after training: 0.7708333333333334
User 130277 does not improve AUC. Reverting changes.
Training on augumented user 18442 44/50 current_auc = 0.7708333333333334
User 18442 AUC after training: 0.7708333333333334
User 18442 does not improve AUC. Reverting changes.
Training on augumented user 40368 45/50 current_auc = 0.7708333333333334
User 40368 AUC after training: 0.7708333333333334
User 40368 does not improve AUC. Reverting changes.
Training on augumented user 105996 46/50 current_auc = 0.7708333333333334
User 105996 AUC after training: 0.7708333333333334
User 105996 does not improve AUC. Reverting changes.
Training on augumented user 124813 47/50 current_auc = 0.7708333333333334
User 124813 AUC after training: 0.7708333333333334
User 124813 does not improve AUC. Reverting changes.
Training on augumented user 7128 48/50 current_auc = 0.7708333333333334
User 7128 AUC after training: 0.7708333333333334
User 7128 does not improve AUC. Reverting changes.
Training on augumented user 120530 49/50 current_auc = 0.7708333333333334
User 120530 AUC after training: 0.7708333333333334
User 120530 does not improve AUC. Reverting changes.
[2024-12-02 19:15:58.587760] start test user 60265 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:59.025441] start test user 60265 178/568 recall augumented users by random, augumented_users = [98632, 73355, 107181, 42773, 128340, 112503, 85099, 26951, 62176, 20229, 35444, 7073, 107393, 126724, 123614, 69875, 23514, 58168, 13559, 2041, 45436, 43118, 107822, 59636, 95987, 87453, 45068, 83105, 97372, 88432, 101086, 130384, 8293, 19269, 15245, 3350, 128632, 93676, 71408, 4085, 586, 123382, 26281, 53247, 24366, 120990, 133197, 66903, 75698, 89756]
[2024-12-02 19:15:59.039632] user = 60265 Cloud 178/568
[2024-12-02 19:15:59.052081] user = 60265 Local 178/568
[2024-12-02 19:15:59.087430] user = 60265 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:01.707414] user = 60265 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6459330143540669
Training on augumented user 98632 0/50 current_auc = 0.6459330143540669
User 98632 AUC after training: 0.6451355661881977
User 98632 does not improve AUC. Reverting changes.
Training on augumented user 73355 1/50 current_auc = 0.6459330143540669
User 73355 AUC after training: 0.6443381180223285
User 73355 does not improve AUC. Reverting changes.
Training on augumented user 107181 2/50 current_auc = 0.6459330143540669
User 107181 AUC after training: 0.6483253588516746
User 107181 improves AUC. Keeping the model.
Training on augumented user 42773 3/50 current_auc = 0.6483253588516746
User 42773 AUC after training: 0.6427432216905901
User 42773 does not improve AUC. Reverting changes.
Training on augumented user 128340 4/50 current_auc = 0.6483253588516746
User 128340 AUC after training: 0.6491228070175439
User 128340 improves AUC. Keeping the model.
Training on augumented user 112503 5/50 current_auc = 0.6491228070175439
User 112503 AUC after training: 0.6483253588516746
User 112503 does not improve AUC. Reverting changes.
Training on augumented user 85099 6/50 current_auc = 0.6491228070175439
User 85099 AUC after training: 0.6515151515151515
User 85099 improves AUC. Keeping the model.
Training on augumented user 26951 7/50 current_auc = 0.6515151515151515
User 26951 AUC after training: 0.6483253588516746
User 26951 does not improve AUC. Reverting changes.
Training on augumented user 62176 8/50 current_auc = 0.6515151515151515
User 62176 AUC after training: 0.6507177033492823
User 62176 does not improve AUC. Reverting changes.
Training on augumented user 20229 9/50 current_auc = 0.6515151515151515
User 20229 AUC after training: 0.6491228070175439
User 20229 does not improve AUC. Reverting changes.
Training on augumented user 35444 10/50 current_auc = 0.6515151515151515
User 35444 AUC after training: 0.6491228070175439
User 35444 does not improve AUC. Reverting changes.
Training on augumented user 7073 11/50 current_auc = 0.6515151515151515
User 7073 AUC after training: 0.6507177033492823
User 7073 does not improve AUC. Reverting changes.
Training on augumented user 107393 12/50 current_auc = 0.6515151515151515
User 107393 AUC after training: 0.6515151515151515
User 107393 does not improve AUC. Reverting changes.
Training on augumented user 126724 13/50 current_auc = 0.6515151515151515
User 126724 AUC after training: 0.6483253588516746
User 126724 does not improve AUC. Reverting changes.
Training on augumented user 123614 14/50 current_auc = 0.6515151515151515
User 123614 AUC after training: 0.6515151515151515
User 123614 does not improve AUC. Reverting changes.
Training on augumented user 69875 15/50 current_auc = 0.6515151515151515
User 69875 AUC after training: 0.6499202551834131
User 69875 does not improve AUC. Reverting changes.
Training on augumented user 23514 16/50 current_auc = 0.6515151515151515
User 23514 AUC after training: 0.6491228070175439
User 23514 does not improve AUC. Reverting changes.
Training on augumented user 58168 17/50 current_auc = 0.6515151515151515
User 58168 AUC after training: 0.6499202551834131
User 58168 does not improve AUC. Reverting changes.
Training on augumented user 13559 18/50 current_auc = 0.6515151515151515
User 13559 AUC after training: 0.6475279106858054
User 13559 does not improve AUC. Reverting changes.
Training on augumented user 2041 19/50 current_auc = 0.6515151515151515
User 2041 AUC after training: 0.6499202551834131
User 2041 does not improve AUC. Reverting changes.
Training on augumented user 45436 20/50 current_auc = 0.6515151515151515
User 45436 AUC after training: 0.6499202551834131
User 45436 does not improve AUC. Reverting changes.
Training on augumented user 43118 21/50 current_auc = 0.6515151515151515
User 43118 AUC after training: 0.6491228070175439
User 43118 does not improve AUC. Reverting changes.
Training on augumented user 107822 22/50 current_auc = 0.6515151515151515
User 107822 AUC after training: 0.6475279106858054
User 107822 does not improve AUC. Reverting changes.
Training on augumented user 59636 23/50 current_auc = 0.6515151515151515
User 59636 AUC after training: 0.6435406698564593
User 59636 does not improve AUC. Reverting changes.
Training on augumented user 95987 24/50 current_auc = 0.6515151515151515
User 95987 AUC after training: 0.6483253588516746
User 95987 does not improve AUC. Reverting changes.
Training on augumented user 87453 25/50 current_auc = 0.6515151515151515
User 87453 AUC after training: 0.6499202551834131
User 87453 does not improve AUC. Reverting changes.
Training on augumented user 45068 26/50 current_auc = 0.6515151515151515
User 45068 AUC after training: 0.6475279106858054
User 45068 does not improve AUC. Reverting changes.
Training on augumented user 83105 27/50 current_auc = 0.6515151515151515
User 83105 AUC after training: 0.645933014354067
User 83105 does not improve AUC. Reverting changes.
Training on augumented user 97372 28/50 current_auc = 0.6515151515151515
User 97372 AUC after training: 0.6507177033492824
User 97372 does not improve AUC. Reverting changes.
Training on augumented user 88432 29/50 current_auc = 0.6515151515151515
User 88432 AUC after training: 0.6507177033492824
User 88432 does not improve AUC. Reverting changes.
Training on augumented user 101086 30/50 current_auc = 0.6515151515151515
User 101086 AUC after training: 0.6507177033492824
User 101086 does not improve AUC. Reverting changes.
Training on augumented user 130384 31/50 current_auc = 0.6515151515151515
User 130384 AUC after training: 0.6467304625199362
User 130384 does not improve AUC. Reverting changes.
Training on augumented user 8293 32/50 current_auc = 0.6515151515151515
User 8293 AUC after training: 0.6515151515151515
User 8293 does not improve AUC. Reverting changes.
Training on augumented user 19269 33/50 current_auc = 0.6515151515151515
User 19269 AUC after training: 0.6483253588516746
User 19269 does not improve AUC. Reverting changes.
Training on augumented user 15245 34/50 current_auc = 0.6515151515151515
User 15245 AUC after training: 0.6499202551834131
User 15245 does not improve AUC. Reverting changes.
Training on augumented user 3350 35/50 current_auc = 0.6515151515151515
User 3350 AUC after training: 0.6515151515151515
User 3350 does not improve AUC. Reverting changes.
Training on augumented user 128632 36/50 current_auc = 0.6515151515151515
User 128632 AUC after training: 0.6499202551834131
User 128632 does not improve AUC. Reverting changes.
Training on augumented user 93676 37/50 current_auc = 0.6515151515151515
User 93676 AUC after training: 0.6507177033492824
User 93676 does not improve AUC. Reverting changes.
Training on augumented user 71408 38/50 current_auc = 0.6515151515151515
User 71408 AUC after training: 0.6515151515151515
User 71408 does not improve AUC. Reverting changes.
Training on augumented user 4085 39/50 current_auc = 0.6515151515151515
User 4085 AUC after training: 0.6507177033492823
User 4085 does not improve AUC. Reverting changes.
Training on augumented user 586 40/50 current_auc = 0.6515151515151515
User 586 AUC after training: 0.6507177033492823
User 586 does not improve AUC. Reverting changes.
Training on augumented user 123382 41/50 current_auc = 0.6515151515151515
User 123382 AUC after training: 0.6515151515151516
User 123382 improves AUC. Keeping the model.
Training on augumented user 26281 42/50 current_auc = 0.6515151515151516
User 26281 AUC after training: 0.6507177033492824
User 26281 does not improve AUC. Reverting changes.
Training on augumented user 53247 43/50 current_auc = 0.6515151515151516
User 53247 AUC after training: 0.6507177033492823
User 53247 does not improve AUC. Reverting changes.
Training on augumented user 24366 44/50 current_auc = 0.6515151515151516
User 24366 AUC after training: 0.6491228070175439
User 24366 does not improve AUC. Reverting changes.
Training on augumented user 120990 45/50 current_auc = 0.6515151515151516
User 120990 AUC after training: 0.6507177033492824
User 120990 does not improve AUC. Reverting changes.
Training on augumented user 133197 46/50 current_auc = 0.6515151515151516
User 133197 AUC after training: 0.6515151515151515
User 133197 does not improve AUC. Reverting changes.
Training on augumented user 66903 47/50 current_auc = 0.6515151515151516
User 66903 AUC after training: 0.6515151515151515
User 66903 does not improve AUC. Reverting changes.
Training on augumented user 75698 48/50 current_auc = 0.6515151515151516
User 75698 AUC after training: 0.6507177033492824
User 75698 does not improve AUC. Reverting changes.
Training on augumented user 89756 49/50 current_auc = 0.6515151515151516
User 89756 AUC after training: 0.6491228070175439
User 89756 does not improve AUC. Reverting changes.
[2024-12-02 19:16:32.483950] start test user 60290 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:32.963468] start test user 60290 179/568 recall augumented users by random, augumented_users = [71191, 37588, 26327, 119686, 4441, 125964, 27076, 73423, 46035, 30574, 99697, 86245, 56604, 22334, 89397, 18260, 1462, 96914, 48105, 32419, 97401, 36040, 92285, 103757, 120487, 48021, 6497, 74103, 55853, 88965, 111833, 82740, 19947, 53728, 29639, 83644, 102177, 40648, 47652, 112108, 118165, 14253, 12251, 132181, 23559, 120585, 100387, 64954, 92322, 64676]
[2024-12-02 19:16:32.997060] user = 60290 Cloud 179/568
[2024-12-02 19:16:33.008319] user = 60290 Local 179/568
[2024-12-02 19:16:33.057544] user = 60290 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:35.124270] user = 60290 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5844875346260389
Training on augumented user 71191 0/50 current_auc = 0.5844875346260389
User 71191 AUC after training: 0.5844875346260389
User 71191 does not improve AUC. Reverting changes.
Training on augumented user 37588 1/50 current_auc = 0.5844875346260389
User 37588 AUC after training: 0.5844875346260389
User 37588 does not improve AUC. Reverting changes.
Training on augumented user 26327 2/50 current_auc = 0.5844875346260389
User 26327 AUC after training: 0.5858725761772853
User 26327 improves AUC. Keeping the model.
Training on augumented user 119686 3/50 current_auc = 0.5858725761772853
User 119686 AUC after training: 0.5844875346260389
User 119686 does not improve AUC. Reverting changes.
Training on augumented user 4441 4/50 current_auc = 0.5858725761772853
User 4441 AUC after training: 0.5844875346260389
User 4441 does not improve AUC. Reverting changes.
Training on augumented user 125964 5/50 current_auc = 0.5858725761772853
User 125964 AUC after training: 0.5844875346260388
User 125964 does not improve AUC. Reverting changes.
Training on augumented user 27076 6/50 current_auc = 0.5858725761772853
User 27076 AUC after training: 0.5844875346260389
User 27076 does not improve AUC. Reverting changes.
Training on augumented user 73423 7/50 current_auc = 0.5858725761772853
User 73423 AUC after training: 0.5844875346260389
User 73423 does not improve AUC. Reverting changes.
Training on augumented user 46035 8/50 current_auc = 0.5858725761772853
User 46035 AUC after training: 0.5844875346260389
User 46035 does not improve AUC. Reverting changes.
Training on augumented user 30574 9/50 current_auc = 0.5858725761772853
User 30574 AUC after training: 0.5858725761772853
User 30574 does not improve AUC. Reverting changes.
Training on augumented user 99697 10/50 current_auc = 0.5858725761772853
User 99697 AUC after training: 0.5844875346260389
User 99697 does not improve AUC. Reverting changes.
Training on augumented user 86245 11/50 current_auc = 0.5858725761772853
User 86245 AUC after training: 0.5844875346260389
User 86245 does not improve AUC. Reverting changes.
Training on augumented user 56604 12/50 current_auc = 0.5858725761772853
User 56604 AUC after training: 0.5844875346260389
User 56604 does not improve AUC. Reverting changes.
Training on augumented user 22334 13/50 current_auc = 0.5858725761772853
User 22334 AUC after training: 0.5844875346260389
User 22334 does not improve AUC. Reverting changes.
Training on augumented user 89397 14/50 current_auc = 0.5858725761772853
User 89397 AUC after training: 0.5844875346260389
User 89397 does not improve AUC. Reverting changes.
Training on augumented user 18260 15/50 current_auc = 0.5858725761772853
User 18260 AUC after training: 0.5872576177285318
User 18260 improves AUC. Keeping the model.
Training on augumented user 1462 16/50 current_auc = 0.5872576177285318
User 1462 AUC after training: 0.5858725761772853
User 1462 does not improve AUC. Reverting changes.
Training on augumented user 96914 17/50 current_auc = 0.5872576177285318
User 96914 AUC after training: 0.5872576177285318
User 96914 does not improve AUC. Reverting changes.
Training on augumented user 48105 18/50 current_auc = 0.5872576177285318
User 48105 AUC after training: 0.5872576177285318
User 48105 does not improve AUC. Reverting changes.
Training on augumented user 32419 19/50 current_auc = 0.5872576177285318
User 32419 AUC after training: 0.5844875346260388
User 32419 does not improve AUC. Reverting changes.
Training on augumented user 97401 20/50 current_auc = 0.5872576177285318
User 97401 AUC after training: 0.5872576177285318
User 97401 does not improve AUC. Reverting changes.
Training on augumented user 36040 21/50 current_auc = 0.5872576177285318
User 36040 AUC after training: 0.5872576177285318
User 36040 does not improve AUC. Reverting changes.
Training on augumented user 92285 22/50 current_auc = 0.5872576177285318
User 92285 AUC after training: 0.5872576177285318
User 92285 does not improve AUC. Reverting changes.
Training on augumented user 103757 23/50 current_auc = 0.5872576177285318
User 103757 AUC after training: 0.5858725761772854
User 103757 does not improve AUC. Reverting changes.
Training on augumented user 120487 24/50 current_auc = 0.5872576177285318
User 120487 AUC after training: 0.5872576177285318
User 120487 does not improve AUC. Reverting changes.
Training on augumented user 48021 25/50 current_auc = 0.5872576177285318
User 48021 AUC after training: 0.5872576177285318
User 48021 does not improve AUC. Reverting changes.
Training on augumented user 6497 26/50 current_auc = 0.5872576177285318
User 6497 AUC after training: 0.5858725761772853
User 6497 does not improve AUC. Reverting changes.
Training on augumented user 74103 27/50 current_auc = 0.5872576177285318
User 74103 AUC after training: 0.5872576177285318
User 74103 does not improve AUC. Reverting changes.
Training on augumented user 55853 28/50 current_auc = 0.5872576177285318
User 55853 AUC after training: 0.5858725761772853
User 55853 does not improve AUC. Reverting changes.
Training on augumented user 88965 29/50 current_auc = 0.5872576177285318
User 88965 AUC after training: 0.5872576177285319
User 88965 improves AUC. Keeping the model.
Training on augumented user 111833 30/50 current_auc = 0.5872576177285319
User 111833 AUC after training: 0.5844875346260389
User 111833 does not improve AUC. Reverting changes.
Training on augumented user 82740 31/50 current_auc = 0.5872576177285319
User 82740 AUC after training: 0.5858725761772854
User 82740 does not improve AUC. Reverting changes.
Training on augumented user 19947 32/50 current_auc = 0.5872576177285319
User 19947 AUC after training: 0.5872576177285319
User 19947 does not improve AUC. Reverting changes.
Training on augumented user 53728 33/50 current_auc = 0.5872576177285319
User 53728 AUC after training: 0.5872576177285319
User 53728 does not improve AUC. Reverting changes.
Training on augumented user 29639 34/50 current_auc = 0.5872576177285319
User 29639 AUC after training: 0.5858725761772853
User 29639 does not improve AUC. Reverting changes.
Training on augumented user 83644 35/50 current_auc = 0.5872576177285319
User 83644 AUC after training: 0.5844875346260388
User 83644 does not improve AUC. Reverting changes.
Training on augumented user 102177 36/50 current_auc = 0.5872576177285319
User 102177 AUC after training: 0.5844875346260388
User 102177 does not improve AUC. Reverting changes.
Training on augumented user 40648 37/50 current_auc = 0.5872576177285319
User 40648 AUC after training: 0.5817174515235457
User 40648 does not improve AUC. Reverting changes.
Training on augumented user 47652 38/50 current_auc = 0.5872576177285319
User 47652 AUC after training: 0.5858725761772854
User 47652 does not improve AUC. Reverting changes.
Training on augumented user 112108 39/50 current_auc = 0.5872576177285319
User 112108 AUC after training: 0.5858725761772854
User 112108 does not improve AUC. Reverting changes.
Training on augumented user 118165 40/50 current_auc = 0.5872576177285319
User 118165 AUC after training: 0.5872576177285319
User 118165 does not improve AUC. Reverting changes.
Training on augumented user 14253 41/50 current_auc = 0.5872576177285319
User 14253 AUC after training: 0.5872576177285319
User 14253 does not improve AUC. Reverting changes.
Training on augumented user 12251 42/50 current_auc = 0.5872576177285319
User 12251 AUC after training: 0.5886426592797784
User 12251 improves AUC. Keeping the model.
Training on augumented user 132181 43/50 current_auc = 0.5886426592797784
User 132181 AUC after training: 0.5872576177285319
User 132181 does not improve AUC. Reverting changes.
Training on augumented user 23559 44/50 current_auc = 0.5886426592797784
User 23559 AUC after training: 0.5872576177285319
User 23559 does not improve AUC. Reverting changes.
Training on augumented user 120585 45/50 current_auc = 0.5886426592797784
User 120585 AUC after training: 0.5858725761772853
User 120585 does not improve AUC. Reverting changes.
Training on augumented user 100387 46/50 current_auc = 0.5886426592797784
User 100387 AUC after training: 0.5872576177285319
User 100387 does not improve AUC. Reverting changes.
Training on augumented user 64954 47/50 current_auc = 0.5886426592797784
User 64954 AUC after training: 0.5886426592797784
User 64954 does not improve AUC. Reverting changes.
Training on augumented user 92322 48/50 current_auc = 0.5886426592797784
User 92322 AUC after training: 0.5858725761772854
User 92322 does not improve AUC. Reverting changes.
Training on augumented user 64676 49/50 current_auc = 0.5886426592797784
User 64676 AUC after training: 0.5872576177285319
User 64676 does not improve AUC. Reverting changes.
[2024-12-02 19:17:09.034724] start test user 60294 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:09.737610] start test user 60294 180/568 recall augumented users by random, augumented_users = [111848, 44356, 89935, 103530, 13108, 110309, 67893, 52575, 97501, 43053, 70191, 47034, 46309, 100785, 134954, 136775, 25855, 136089, 6619, 134206, 101329, 40885, 125720, 85353, 62495, 41833, 108292, 69999, 101209, 134742, 95633, 40511, 128422, 54840, 130527, 131273, 104106, 36816, 35999, 18316, 117304, 93066, 136258, 100003, 95219, 5418, 15765, 101035, 24318, 29915]
[2024-12-02 19:17:09.757312] user = 60294 Cloud 180/568
[2024-12-02 19:17:09.800913] user = 60294 Local 180/568
[2024-12-02 19:17:09.880045] user = 60294 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:12.383671] user = 60294 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5482965543941155
Training on augumented user 111848 0/50 current_auc = 0.5482965543941155
User 111848 AUC after training: 0.5474254742547425
User 111848 does not improve AUC. Reverting changes.
Training on augumented user 44356 1/50 current_auc = 0.5482965543941155
User 44356 AUC after training: 0.5506194347657762
User 44356 improves AUC. Keeping the model.
Training on augumented user 89935 2/50 current_auc = 0.5506194347657762
User 89935 AUC after training: 0.5504258614014712
User 89935 does not improve AUC. Reverting changes.
Training on augumented user 103530 3/50 current_auc = 0.5506194347657762
User 103530 AUC after training: 0.549651567944251
User 103530 does not improve AUC. Reverting changes.
Training on augumented user 13108 4/50 current_auc = 0.5506194347657762
User 13108 AUC after training: 0.5512001548586916
User 13108 improves AUC. Keeping the model.
Training on augumented user 110309 5/50 current_auc = 0.5512001548586916
User 110309 AUC after training: 0.549845141308556
User 110309 does not improve AUC. Reverting changes.
Training on augumented user 67893 6/50 current_auc = 0.5512001548586916
User 67893 AUC after training: 0.5512001548586914
User 67893 does not improve AUC. Reverting changes.
Training on augumented user 52575 7/50 current_auc = 0.5512001548586916
User 52575 AUC after training: 0.5503290747193187
User 52575 does not improve AUC. Reverting changes.
Training on augumented user 97501 8/50 current_auc = 0.5512001548586916
User 97501 AUC after training: 0.5493612078977933
User 97501 does not improve AUC. Reverting changes.
Training on augumented user 43053 9/50 current_auc = 0.5512001548586916
User 43053 AUC after training: 0.5515873015873016
User 43053 improves AUC. Keeping the model.
Training on augumented user 70191 10/50 current_auc = 0.5515873015873016
User 70191 AUC after training: 0.5500387146728611
User 70191 does not improve AUC. Reverting changes.
Training on augumented user 47034 11/50 current_auc = 0.5515873015873016
User 47034 AUC after training: 0.5504258614014712
User 47034 does not improve AUC. Reverting changes.
Training on augumented user 46309 12/50 current_auc = 0.5515873015873016
User 46309 AUC after training: 0.5509097948122339
User 46309 does not improve AUC. Reverting changes.
Training on augumented user 100785 13/50 current_auc = 0.5515873015873016
User 100785 AUC after training: 0.5506194347657762
User 100785 does not improve AUC. Reverting changes.
Training on augumented user 134954 14/50 current_auc = 0.5515873015873016
User 134954 AUC after training: 0.5505226480836237
User 134954 does not improve AUC. Reverting changes.
Training on augumented user 136775 15/50 current_auc = 0.5515873015873016
User 136775 AUC after training: 0.5503290747193187
User 136775 does not improve AUC. Reverting changes.
Training on augumented user 25855 16/50 current_auc = 0.5515873015873016
User 25855 AUC after training: 0.5502322880371661
User 25855 does not improve AUC. Reverting changes.
Training on augumented user 136089 17/50 current_auc = 0.5515873015873016
User 136089 AUC after training: 0.5506194347657763
User 136089 does not improve AUC. Reverting changes.
Training on augumented user 6619 18/50 current_auc = 0.5515873015873016
User 6619 AUC after training: 0.5510065814943864
User 6619 does not improve AUC. Reverting changes.
Training on augumented user 134206 19/50 current_auc = 0.5515873015873016
User 134206 AUC after training: 0.5511033681765389
User 134206 does not improve AUC. Reverting changes.
Training on augumented user 101329 20/50 current_auc = 0.5515873015873016
User 101329 AUC after training: 0.5577816492450639
User 101329 improves AUC. Keeping the model.
Training on augumented user 40885 21/50 current_auc = 0.5577816492450639
User 40885 AUC after training: 0.5583623693379791
User 40885 improves AUC. Keeping the model.
Training on augumented user 125720 22/50 current_auc = 0.5583623693379791
User 125720 AUC after training: 0.5574912891986064
User 125720 does not improve AUC. Reverting changes.
Training on augumented user 85353 23/50 current_auc = 0.5583623693379791
User 85353 AUC after training: 0.5542973286875725
User 85353 does not improve AUC. Reverting changes.
Training on augumented user 62495 24/50 current_auc = 0.5583623693379791
User 62495 AUC after training: 0.5577816492450639
User 62495 does not improve AUC. Reverting changes.
Training on augumented user 41833 25/50 current_auc = 0.5583623693379791
User 41833 AUC after training: 0.5574912891986062
User 41833 does not improve AUC. Reverting changes.
Training on augumented user 108292 26/50 current_auc = 0.5583623693379791
User 108292 AUC after training: 0.5578784359272164
User 108292 does not improve AUC. Reverting changes.
Training on augumented user 69999 27/50 current_auc = 0.5583623693379791
User 69999 AUC after training: 0.5568137824235385
User 69999 does not improve AUC. Reverting changes.
Training on augumented user 101209 28/50 current_auc = 0.5583623693379791
User 101209 AUC after training: 0.5582655826558265
User 101209 does not improve AUC. Reverting changes.
Training on augumented user 134742 29/50 current_auc = 0.5583623693379791
User 134742 AUC after training: 0.5580720092915215
User 134742 does not improve AUC. Reverting changes.
Training on augumented user 95633 30/50 current_auc = 0.5583623693379791
User 95633 AUC after training: 0.5573945025164537
User 95633 does not improve AUC. Reverting changes.
Training on augumented user 40511 31/50 current_auc = 0.5583623693379791
User 40511 AUC after training: 0.5558459156020132
User 40511 does not improve AUC. Reverting changes.
Training on augumented user 128422 32/50 current_auc = 0.5583623693379791
User 128422 AUC after training: 0.557781649245064
User 128422 does not improve AUC. Reverting changes.
Training on augumented user 54840 33/50 current_auc = 0.5583623693379791
User 54840 AUC after training: 0.5558459156020132
User 54840 does not improve AUC. Reverting changes.
Training on augumented user 130527 34/50 current_auc = 0.5583623693379791
User 130527 AUC after training: 0.556910569105691
User 130527 does not improve AUC. Reverting changes.
Training on augumented user 131273 35/50 current_auc = 0.5583623693379791
User 131273 AUC after training: 0.5583623693379791
User 131273 does not improve AUC. Reverting changes.
Training on augumented user 104106 36/50 current_auc = 0.5583623693379791
User 104106 AUC after training: 0.5582655826558266
User 104106 does not improve AUC. Reverting changes.
Training on augumented user 36816 37/50 current_auc = 0.5583623693379791
User 36816 AUC after training: 0.5586527293844368
User 36816 improves AUC. Keeping the model.
Training on augumented user 35999 38/50 current_auc = 0.5586527293844368
User 35999 AUC after training: 0.559620596205962
User 35999 improves AUC. Keeping the model.
Training on augumented user 18316 39/50 current_auc = 0.559620596205962
User 18316 AUC after training: 0.5586527293844367
User 18316 does not improve AUC. Reverting changes.
Training on augumented user 117304 40/50 current_auc = 0.559620596205962
User 117304 AUC after training: 0.5598141695702672
User 117304 improves AUC. Keeping the model.
Training on augumented user 93066 41/50 current_auc = 0.5598141695702672
User 93066 AUC after training: 0.5613627564847077
User 93066 improves AUC. Keeping the model.
Training on augumented user 136258 42/50 current_auc = 0.5613627564847077
User 136258 AUC after training: 0.5605884630274874
User 136258 does not improve AUC. Reverting changes.
Training on augumented user 100003 43/50 current_auc = 0.5613627564847077
User 100003 AUC after training: 0.5599109562524198
User 100003 does not improve AUC. Reverting changes.
Training on augumented user 95219 44/50 current_auc = 0.5613627564847077
User 95219 AUC after training: 0.5606368563685636
User 95219 does not improve AUC. Reverting changes.
Training on augumented user 5418 45/50 current_auc = 0.5613627564847077
User 5418 AUC after training: 0.5598141695702671
User 5418 does not improve AUC. Reverting changes.
Training on augumented user 15765 46/50 current_auc = 0.5613627564847077
User 15765 AUC after training: 0.5604916763453349
User 15765 does not improve AUC. Reverting changes.
Training on augumented user 101035 47/50 current_auc = 0.5613627564847077
User 101035 AUC after training: 0.5602981029810299
User 101035 does not improve AUC. Reverting changes.
Training on augumented user 24318 48/50 current_auc = 0.5613627564847077
User 24318 AUC after training: 0.559427022841657
User 24318 does not improve AUC. Reverting changes.
Training on augumented user 29915 49/50 current_auc = 0.5613627564847077
User 29915 AUC after training: 0.5610723964382501
User 29915 does not improve AUC. Reverting changes.
[2024-12-02 19:17:40.347328] start test user 60361 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:40.763761] start test user 60361 181/568 recall augumented users by random, augumented_users = [14425, 94982, 119976, 27066, 20982, 128914, 88458, 30027, 103322, 52926, 40603, 59833, 23759, 58114, 35165, 107727, 107045, 129676, 67612, 18069, 86523, 33967, 107913, 16582, 120347, 71868, 123579, 27808, 91707, 130664, 15527, 60813, 91825, 108195, 40431, 124689, 58645, 130793, 114422, 83476, 74914, 23350, 56240, 24751, 16890, 48855, 92471, 77124, 89363, 8266]
[2024-12-02 19:17:40.780116] user = 60361 Cloud 181/568
[2024-12-02 19:17:40.858395] user = 60361 Local 181/568
[2024-12-02 19:17:41.094810] user = 60361 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:42.644949] user = 60361 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6341479003771012
Training on augumented user 14425 0/50 current_auc = 0.6341479003771012
User 14425 AUC after training: 0.6340733323390928
User 14425 does not improve AUC. Reverting changes.
Training on augumented user 94982 1/50 current_auc = 0.6341479003771012
User 94982 AUC after training: 0.6339987643010844
User 94982 does not improve AUC. Reverting changes.
Training on augumented user 119976 2/50 current_auc = 0.6341479003771012
User 119976 AUC after training: 0.6339348488399343
User 119976 does not improve AUC. Reverting changes.
Training on augumented user 27066 3/50 current_auc = 0.6341479003771012
User 27066 AUC after training: 0.6340307220316594
User 27066 does not improve AUC. Reverting changes.
Training on augumented user 20982 4/50 current_auc = 0.6341479003771012
User 20982 AUC after training: 0.6340413746085178
User 20982 does not improve AUC. Reverting changes.
Training on augumented user 128914 5/50 current_auc = 0.6341479003771012
User 128914 AUC after training: 0.6340413746085177
User 128914 does not improve AUC. Reverting changes.
Training on augumented user 88458 6/50 current_auc = 0.6341479003771012
User 88458 AUC after training: 0.6341798581076762
User 88458 improves AUC. Keeping the model.
Training on augumented user 30027 7/50 current_auc = 0.6341798581076762
User 30027 AUC after training: 0.6342224684151097
User 30027 improves AUC. Keeping the model.
Training on augumented user 103322 8/50 current_auc = 0.6342224684151097
User 103322 AUC after training: 0.6341265952233845
User 103322 does not improve AUC. Reverting changes.
Training on augumented user 52926 9/50 current_auc = 0.6342224684151097
User 52926 AUC after training: 0.6339987643010845
User 52926 does not improve AUC. Reverting changes.
Training on augumented user 40603 10/50 current_auc = 0.6342224684151097
User 40603 AUC after training: 0.6340733323390928
User 40603 does not improve AUC. Reverting changes.
Training on augumented user 59833 11/50 current_auc = 0.6342224684151097
User 59833 AUC after training: 0.6341052900696678
User 59833 does not improve AUC. Reverting changes.
Training on augumented user 23759 12/50 current_auc = 0.6342224684151097
User 23759 AUC after training: 0.633924196263076
User 23759 does not improve AUC. Reverting changes.
Training on augumented user 58114 13/50 current_auc = 0.6342224684151097
User 58114 AUC after training: 0.6342118158382513
User 58114 does not improve AUC. Reverting changes.
Training on augumented user 35165 14/50 current_auc = 0.6342224684151097
User 35165 AUC after training: 0.6342970364531181
User 35165 improves AUC. Keeping the model.
Training on augumented user 107727 15/50 current_auc = 0.6342970364531181
User 107727 AUC after training: 0.6343609519142681
User 107727 improves AUC. Keeping the model.
Training on augumented user 107045 16/50 current_auc = 0.6343609519142681
User 107045 AUC after training: 0.6345953086051515
User 107045 improves AUC. Keeping the model.
Training on augumented user 129676 17/50 current_auc = 0.6345953086051515
User 129676 AUC after training: 0.6346166137588682
User 129676 improves AUC. Keeping the model.
Training on augumented user 67612 18/50 current_auc = 0.6346166137588682
User 67612 AUC after training: 0.6348616230266102
User 67612 improves AUC. Keeping the model.
Training on augumented user 18069 19/50 current_auc = 0.6348616230266102
User 18069 AUC after training: 0.633423525150734
User 18069 does not improve AUC. Reverting changes.
Training on augumented user 86523 20/50 current_auc = 0.6348616230266102
User 86523 AUC after training: 0.6344355199522764
User 86523 does not improve AUC. Reverting changes.
Training on augumented user 33967 21/50 current_auc = 0.6348616230266102
User 33967 AUC after training: 0.6350107591026269
User 33967 improves AUC. Keeping the model.
Training on augumented user 107913 22/50 current_auc = 0.6350107591026269
User 107913 AUC after training: 0.6343609519142681
User 107913 does not improve AUC. Reverting changes.
Training on augumented user 16582 23/50 current_auc = 0.6350107591026269
User 16582 AUC after training: 0.63460596118201
User 16582 does not improve AUC. Reverting changes.
Training on augumented user 120347 24/50 current_auc = 0.6350107591026269
User 120347 AUC after training: 0.635138590024927
User 120347 improves AUC. Keeping the model.
Training on augumented user 71868 25/50 current_auc = 0.635138590024927
User 71868 AUC after training: 0.634328994183693
User 71868 does not improve AUC. Reverting changes.
Training on augumented user 123579 26/50 current_auc = 0.635138590024927
User 123579 AUC after training: 0.6349255384877602
User 123579 does not improve AUC. Reverting changes.
Training on augumented user 27808 27/50 current_auc = 0.635138590024927
User 27808 AUC after training: 0.6347124869505935
User 27808 does not improve AUC. Reverting changes.
Training on augumented user 91707 28/50 current_auc = 0.635138590024927
User 91707 AUC after training: 0.6350427168332019
User 91707 does not improve AUC. Reverting changes.
Training on augumented user 130664 29/50 current_auc = 0.635138590024927
User 130664 AUC after training: 0.634920212199331
User 130664 does not improve AUC. Reverting changes.
Training on augumented user 15527 30/50 current_auc = 0.635138590024927
User 15527 AUC after training: 0.6351705477555021
User 15527 improves AUC. Keeping the model.
Training on augumented user 60813 31/50 current_auc = 0.6351705477555021
User 60813 AUC after training: 0.6351598951786437
User 60813 does not improve AUC. Reverting changes.
Training on augumented user 91825 32/50 current_auc = 0.6351705477555021
User 91825 AUC after training: 0.6343716044911264
User 91825 does not improve AUC. Reverting changes.
Training on augumented user 108195 33/50 current_auc = 0.6351705477555021
User 108195 AUC after training: 0.6344994354134265
User 108195 does not improve AUC. Reverting changes.
Training on augumented user 40431 34/50 current_auc = 0.6351705477555021
User 40431 AUC after training: 0.6353516415620939
User 40431 improves AUC. Keeping the model.
Training on augumented user 124689 35/50 current_auc = 0.6353516415620939
User 124689 AUC after training: 0.6345420457208599
User 124689 does not improve AUC. Reverting changes.
Training on augumented user 58645 36/50 current_auc = 0.6353516415620939
User 58645 AUC after training: 0.6352664209472271
User 58645 does not improve AUC. Reverting changes.
Training on augumented user 130793 37/50 current_auc = 0.6353516415620939
User 130793 AUC after training: 0.6349894539489103
User 130793 does not improve AUC. Reverting changes.
Training on augumented user 114422 38/50 current_auc = 0.6353516415620939
User 114422 AUC after training: 0.6343716044911264
User 114422 does not improve AUC. Reverting changes.
Training on augumented user 83476 39/50 current_auc = 0.6353516415620939
User 83476 AUC after training: 0.6350214116794852
User 83476 does not improve AUC. Reverting changes.
Training on augumented user 74914 40/50 current_auc = 0.6353516415620939
User 74914 AUC after training: 0.6352451157935104
User 74914 does not improve AUC. Reverting changes.
Training on augumented user 23350 41/50 current_auc = 0.6353516415620939
User 23350 AUC after training: 0.6353409889852355
User 23350 does not improve AUC. Reverting changes.
Training on augumented user 56240 42/50 current_auc = 0.6353516415620939
User 56240 AUC after training: 0.6349788013720519
User 56240 does not improve AUC. Reverting changes.
Training on augumented user 24751 43/50 current_auc = 0.6353516415620939
User 24751 AUC after training: 0.6351812003323604
User 24751 does not improve AUC. Reverting changes.
Training on augumented user 16890 44/50 current_auc = 0.6353516415620939
User 16890 AUC after training: 0.6351279374480688
User 16890 does not improve AUC. Reverting changes.
Training on augumented user 48855 45/50 current_auc = 0.6353516415620939
User 48855 AUC after training: 0.6344248673754181
User 48855 does not improve AUC. Reverting changes.
Training on augumented user 92471 46/50 current_auc = 0.6353516415620939
User 92471 AUC after training: 0.6350214116794854
User 92471 does not improve AUC. Reverting changes.
Training on augumented user 77124 47/50 current_auc = 0.6353516415620939
User 77124 AUC after training: 0.6350533694100602
User 77124 does not improve AUC. Reverting changes.
Training on augumented user 89363 48/50 current_auc = 0.6353516415620939
User 89363 AUC after training: 0.6352025054860772
User 89363 does not improve AUC. Reverting changes.
Training on augumented user 8266 49/50 current_auc = 0.6353516415620939
User 8266 AUC after training: 0.635197179197648
User 8266 does not improve AUC. Reverting changes.
[2024-12-02 19:18:12.573422] start test user 60398 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:13.182945] start test user 60398 182/568 recall augumented users by random, augumented_users = [22137, 36423, 16671, 51896, 117091, 88764, 117103, 122856, 51176, 10495, 55337, 118747, 22234, 1905, 18040, 101571, 2970, 42682, 68829, 54018, 35833, 49597, 125481, 64176, 23403, 45582, 52418, 87481, 46727, 59927, 112132, 10646, 24137, 31181, 4831, 17838, 93451, 4561, 118548, 50451, 61859, 37612, 63516, 112217, 97213, 104563, 65231, 7900, 96720, 81757]
[2024-12-02 19:18:13.203667] user = 60398 Cloud 182/568
[2024-12-02 19:18:13.222922] user = 60398 Local 182/568
[2024-12-02 19:18:13.486384] user = 60398 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:16.314208] user = 60398 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6823821339950372
Training on augumented user 22137 0/50 current_auc = 0.6823821339950372
User 22137 AUC after training: 0.6823821339950372
User 22137 does not improve AUC. Reverting changes.
Training on augumented user 36423 1/50 current_auc = 0.6823821339950372
User 36423 AUC after training: 0.6823821339950372
User 36423 does not improve AUC. Reverting changes.
Training on augumented user 16671 2/50 current_auc = 0.6823821339950372
User 16671 AUC after training: 0.6774193548387097
User 16671 does not improve AUC. Reverting changes.
Training on augumented user 51896 3/50 current_auc = 0.6823821339950372
User 51896 AUC after training: 0.6823821339950372
User 51896 does not improve AUC. Reverting changes.
Training on augumented user 117091 4/50 current_auc = 0.6823821339950372
User 117091 AUC after training: 0.6865177832919769
User 117091 improves AUC. Keeping the model.
Training on augumented user 88764 5/50 current_auc = 0.6865177832919769
User 88764 AUC after training: 0.6865177832919769
User 88764 does not improve AUC. Reverting changes.
Training on augumented user 117103 6/50 current_auc = 0.6865177832919769
User 117103 AUC after training: 0.6873449131513648
User 117103 improves AUC. Keeping the model.
Training on augumented user 122856 7/50 current_auc = 0.6873449131513648
User 122856 AUC after training: 0.6873449131513648
User 122856 does not improve AUC. Reverting changes.
Training on augumented user 51176 8/50 current_auc = 0.6873449131513648
User 51176 AUC after training: 0.6790736145574855
User 51176 does not improve AUC. Reverting changes.
Training on augumented user 10495 9/50 current_auc = 0.6873449131513648
User 10495 AUC after training: 0.6823821339950372
User 10495 does not improve AUC. Reverting changes.
Training on augumented user 55337 10/50 current_auc = 0.6873449131513648
User 55337 AUC after training: 0.685690653432589
User 55337 does not improve AUC. Reverting changes.
Training on augumented user 118747 11/50 current_auc = 0.6873449131513648
User 118747 AUC after training: 0.6865177832919769
User 118747 does not improve AUC. Reverting changes.
Training on augumented user 22234 12/50 current_auc = 0.6873449131513648
User 22234 AUC after training: 0.6873449131513648
User 22234 does not improve AUC. Reverting changes.
Training on augumented user 1905 13/50 current_auc = 0.6873449131513648
User 1905 AUC after training: 0.6865177832919769
User 1905 does not improve AUC. Reverting changes.
Training on augumented user 18040 14/50 current_auc = 0.6873449131513648
User 18040 AUC after training: 0.6873449131513648
User 18040 does not improve AUC. Reverting changes.
Training on augumented user 101571 15/50 current_auc = 0.6873449131513648
User 101571 AUC after training: 0.6873449131513648
User 101571 does not improve AUC. Reverting changes.
Training on augumented user 2970 16/50 current_auc = 0.6873449131513648
User 2970 AUC after training: 0.6873449131513648
User 2970 does not improve AUC. Reverting changes.
Training on augumented user 42682 17/50 current_auc = 0.6873449131513648
User 42682 AUC after training: 0.6873449131513648
User 42682 does not improve AUC. Reverting changes.
Training on augumented user 68829 18/50 current_auc = 0.6873449131513648
User 68829 AUC after training: 0.685690653432589
User 68829 does not improve AUC. Reverting changes.
Training on augumented user 54018 19/50 current_auc = 0.6873449131513648
User 54018 AUC after training: 0.6865177832919769
User 54018 does not improve AUC. Reverting changes.
Training on augumented user 35833 20/50 current_auc = 0.6873449131513648
User 35833 AUC after training: 0.6865177832919769
User 35833 does not improve AUC. Reverting changes.
Training on augumented user 49597 21/50 current_auc = 0.6873449131513648
User 49597 AUC after training: 0.6865177832919769
User 49597 does not improve AUC. Reverting changes.
Training on augumented user 125481 22/50 current_auc = 0.6873449131513648
User 125481 AUC after training: 0.6865177832919769
User 125481 does not improve AUC. Reverting changes.
Training on augumented user 64176 23/50 current_auc = 0.6873449131513648
User 64176 AUC after training: 0.6873449131513648
User 64176 does not improve AUC. Reverting changes.
Training on augumented user 23403 24/50 current_auc = 0.6873449131513648
User 23403 AUC after training: 0.6873449131513648
User 23403 does not improve AUC. Reverting changes.
Training on augumented user 45582 25/50 current_auc = 0.6873449131513648
User 45582 AUC after training: 0.6873449131513648
User 45582 does not improve AUC. Reverting changes.
Training on augumented user 52418 26/50 current_auc = 0.6873449131513648
User 52418 AUC after training: 0.6873449131513648
User 52418 does not improve AUC. Reverting changes.
Training on augumented user 87481 27/50 current_auc = 0.6873449131513648
User 87481 AUC after training: 0.6873449131513648
User 87481 does not improve AUC. Reverting changes.
Training on augumented user 46727 28/50 current_auc = 0.6873449131513648
User 46727 AUC after training: 0.6873449131513648
User 46727 does not improve AUC. Reverting changes.
Training on augumented user 59927 29/50 current_auc = 0.6873449131513648
User 59927 AUC after training: 0.6873449131513648
User 59927 does not improve AUC. Reverting changes.
Training on augumented user 112132 30/50 current_auc = 0.6873449131513648
User 112132 AUC after training: 0.6865177832919769
User 112132 does not improve AUC. Reverting changes.
Training on augumented user 10646 31/50 current_auc = 0.6873449131513648
User 10646 AUC after training: 0.6873449131513648
User 10646 does not improve AUC. Reverting changes.
Training on augumented user 24137 32/50 current_auc = 0.6873449131513648
User 24137 AUC after training: 0.6873449131513648
User 24137 does not improve AUC. Reverting changes.
Training on augumented user 31181 33/50 current_auc = 0.6873449131513648
User 31181 AUC after training: 0.6865177832919769
User 31181 does not improve AUC. Reverting changes.
Training on augumented user 4831 34/50 current_auc = 0.6873449131513648
User 4831 AUC after training: 0.6865177832919769
User 4831 does not improve AUC. Reverting changes.
Training on augumented user 17838 35/50 current_auc = 0.6873449131513648
User 17838 AUC after training: 0.6832092638544252
User 17838 does not improve AUC. Reverting changes.
Training on augumented user 93451 36/50 current_auc = 0.6873449131513648
User 93451 AUC after training: 0.6865177832919769
User 93451 does not improve AUC. Reverting changes.
Training on augumented user 4561 37/50 current_auc = 0.6873449131513648
User 4561 AUC after training: 0.6873449131513648
User 4561 does not improve AUC. Reverting changes.
Training on augumented user 118548 38/50 current_auc = 0.6873449131513648
User 118548 AUC after training: 0.6865177832919769
User 118548 does not improve AUC. Reverting changes.
Training on augumented user 50451 39/50 current_auc = 0.6873449131513648
User 50451 AUC after training: 0.6782464846980977
User 50451 does not improve AUC. Reverting changes.
Training on augumented user 61859 40/50 current_auc = 0.6873449131513648
User 61859 AUC after training: 0.6865177832919769
User 61859 does not improve AUC. Reverting changes.
Training on augumented user 37612 41/50 current_auc = 0.6873449131513648
User 37612 AUC after training: 0.6873449131513648
User 37612 does not improve AUC. Reverting changes.
Training on augumented user 63516 42/50 current_auc = 0.6873449131513648
User 63516 AUC after training: 0.6873449131513648
User 63516 does not improve AUC. Reverting changes.
Training on augumented user 112217 43/50 current_auc = 0.6873449131513648
User 112217 AUC after training: 0.6782464846980977
User 112217 does not improve AUC. Reverting changes.
Training on augumented user 97213 44/50 current_auc = 0.6873449131513648
User 97213 AUC after training: 0.6865177832919769
User 97213 does not improve AUC. Reverting changes.
Training on augumented user 104563 45/50 current_auc = 0.6873449131513648
User 104563 AUC after training: 0.6865177832919769
User 104563 does not improve AUC. Reverting changes.
Training on augumented user 65231 46/50 current_auc = 0.6873449131513648
User 65231 AUC after training: 0.6873449131513648
User 65231 does not improve AUC. Reverting changes.
Training on augumented user 7900 47/50 current_auc = 0.6873449131513648
User 7900 AUC after training: 0.6873449131513648
User 7900 does not improve AUC. Reverting changes.
Training on augumented user 96720 48/50 current_auc = 0.6873449131513648
User 96720 AUC after training: 0.6782464846980976
User 96720 does not improve AUC. Reverting changes.
Training on augumented user 81757 49/50 current_auc = 0.6873449131513648
User 81757 AUC after training: 0.6873449131513648
User 81757 does not improve AUC. Reverting changes.
[2024-12-02 19:18:47.504899] start test user 60407 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:48.071457] start test user 60407 183/568 recall augumented users by random, augumented_users = [7668, 32917, 6603, 106397, 28932, 84500, 5972, 126320, 36098, 81450, 52057, 115221, 7171, 2925, 128372, 25924, 20726, 82557, 89443, 96156, 84454, 131788, 73616, 50036, 102910, 44252, 26668, 111639, 111117, 110700, 134901, 137827, 104151, 85999, 60192, 1015, 1512, 21920, 33192, 5752, 61069, 16502, 67925, 79748, 119055, 111254, 80663, 77007, 132573, 135462]
[2024-12-02 19:18:48.095059] user = 60407 Cloud 183/568
[2024-12-02 19:18:48.110471] user = 60407 Local 183/568
[2024-12-02 19:18:48.133386] user = 60407 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:50.589481] user = 60407 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7916666666666667
Training on augumented user 7668 0/50 current_auc = 0.7916666666666667
User 7668 AUC after training: 0.7857142857142858
User 7668 does not improve AUC. Reverting changes.
Training on augumented user 32917 1/50 current_auc = 0.7916666666666667
User 32917 AUC after training: 0.7916666666666667
User 32917 does not improve AUC. Reverting changes.
Training on augumented user 6603 2/50 current_auc = 0.7916666666666667
User 6603 AUC after training: 0.7916666666666667
User 6603 does not improve AUC. Reverting changes.
Training on augumented user 106397 3/50 current_auc = 0.7916666666666667
User 106397 AUC after training: 0.7916666666666667
User 106397 does not improve AUC. Reverting changes.
Training on augumented user 28932 4/50 current_auc = 0.7916666666666667
User 28932 AUC after training: 0.7916666666666667
User 28932 does not improve AUC. Reverting changes.
Training on augumented user 84500 5/50 current_auc = 0.7916666666666667
User 84500 AUC after training: 0.7916666666666667
User 84500 does not improve AUC. Reverting changes.
Training on augumented user 5972 6/50 current_auc = 0.7916666666666667
User 5972 AUC after training: 0.7857142857142858
User 5972 does not improve AUC. Reverting changes.
Training on augumented user 126320 7/50 current_auc = 0.7916666666666667
User 126320 AUC after training: 0.7857142857142858
User 126320 does not improve AUC. Reverting changes.
Training on augumented user 36098 8/50 current_auc = 0.7916666666666667
User 36098 AUC after training: 0.7797619047619049
User 36098 does not improve AUC. Reverting changes.
Training on augumented user 81450 9/50 current_auc = 0.7916666666666667
User 81450 AUC after training: 0.7857142857142858
User 81450 does not improve AUC. Reverting changes.
Training on augumented user 52057 10/50 current_auc = 0.7916666666666667
User 52057 AUC after training: 0.7857142857142858
User 52057 does not improve AUC. Reverting changes.
Training on augumented user 115221 11/50 current_auc = 0.7916666666666667
User 115221 AUC after training: 0.7916666666666667
User 115221 does not improve AUC. Reverting changes.
Training on augumented user 7171 12/50 current_auc = 0.7916666666666667
User 7171 AUC after training: 0.7916666666666667
User 7171 does not improve AUC. Reverting changes.
Training on augumented user 2925 13/50 current_auc = 0.7916666666666667
User 2925 AUC after training: 0.7857142857142858
User 2925 does not improve AUC. Reverting changes.
Training on augumented user 128372 14/50 current_auc = 0.7916666666666667
User 128372 AUC after training: 0.7857142857142858
User 128372 does not improve AUC. Reverting changes.
Training on augumented user 25924 15/50 current_auc = 0.7916666666666667
User 25924 AUC after training: 0.7916666666666667
User 25924 does not improve AUC. Reverting changes.
Training on augumented user 20726 16/50 current_auc = 0.7916666666666667
User 20726 AUC after training: 0.7916666666666667
User 20726 does not improve AUC. Reverting changes.
Training on augumented user 82557 17/50 current_auc = 0.7916666666666667
User 82557 AUC after training: 0.7916666666666667
User 82557 does not improve AUC. Reverting changes.
Training on augumented user 89443 18/50 current_auc = 0.7916666666666667
User 89443 AUC after training: 0.7857142857142858
User 89443 does not improve AUC. Reverting changes.
Training on augumented user 96156 19/50 current_auc = 0.7916666666666667
User 96156 AUC after training: 0.7857142857142858
User 96156 does not improve AUC. Reverting changes.
Training on augumented user 84454 20/50 current_auc = 0.7916666666666667
User 84454 AUC after training: 0.7857142857142858
User 84454 does not improve AUC. Reverting changes.
Training on augumented user 131788 21/50 current_auc = 0.7916666666666667
User 131788 AUC after training: 0.7857142857142858
User 131788 does not improve AUC. Reverting changes.
Training on augumented user 73616 22/50 current_auc = 0.7916666666666667
User 73616 AUC after training: 0.7916666666666667
User 73616 does not improve AUC. Reverting changes.
Training on augumented user 50036 23/50 current_auc = 0.7916666666666667
User 50036 AUC after training: 0.7857142857142858
User 50036 does not improve AUC. Reverting changes.
Training on augumented user 102910 24/50 current_auc = 0.7916666666666667
User 102910 AUC after training: 0.7916666666666667
User 102910 does not improve AUC. Reverting changes.
Training on augumented user 44252 25/50 current_auc = 0.7916666666666667
User 44252 AUC after training: 0.7857142857142858
User 44252 does not improve AUC. Reverting changes.
Training on augumented user 26668 26/50 current_auc = 0.7916666666666667
User 26668 AUC after training: 0.7916666666666667
User 26668 does not improve AUC. Reverting changes.
Training on augumented user 111639 27/50 current_auc = 0.7916666666666667
User 111639 AUC after training: 0.7857142857142858
User 111639 does not improve AUC. Reverting changes.
Training on augumented user 111117 28/50 current_auc = 0.7916666666666667
User 111117 AUC after training: 0.7857142857142858
User 111117 does not improve AUC. Reverting changes.
Training on augumented user 110700 29/50 current_auc = 0.7916666666666667
User 110700 AUC after training: 0.7916666666666667
User 110700 does not improve AUC. Reverting changes.
Training on augumented user 134901 30/50 current_auc = 0.7916666666666667
User 134901 AUC after training: 0.7857142857142858
User 134901 does not improve AUC. Reverting changes.
Training on augumented user 137827 31/50 current_auc = 0.7916666666666667
User 137827 AUC after training: 0.7857142857142858
User 137827 does not improve AUC. Reverting changes.
Training on augumented user 104151 32/50 current_auc = 0.7916666666666667
User 104151 AUC after training: 0.7857142857142858
User 104151 does not improve AUC. Reverting changes.
Training on augumented user 85999 33/50 current_auc = 0.7916666666666667
User 85999 AUC after training: 0.7916666666666667
User 85999 does not improve AUC. Reverting changes.
Training on augumented user 60192 34/50 current_auc = 0.7916666666666667
User 60192 AUC after training: 0.7857142857142858
User 60192 does not improve AUC. Reverting changes.
Training on augumented user 1015 35/50 current_auc = 0.7916666666666667
User 1015 AUC after training: 0.7916666666666667
User 1015 does not improve AUC. Reverting changes.
Training on augumented user 1512 36/50 current_auc = 0.7916666666666667
User 1512 AUC after training: 0.7916666666666667
User 1512 does not improve AUC. Reverting changes.
Training on augumented user 21920 37/50 current_auc = 0.7916666666666667
User 21920 AUC after training: 0.7857142857142858
User 21920 does not improve AUC. Reverting changes.
Training on augumented user 33192 38/50 current_auc = 0.7916666666666667
User 33192 AUC after training: 0.7916666666666667
User 33192 does not improve AUC. Reverting changes.
Training on augumented user 5752 39/50 current_auc = 0.7916666666666667
User 5752 AUC after training: 0.7857142857142858
User 5752 does not improve AUC. Reverting changes.
Training on augumented user 61069 40/50 current_auc = 0.7916666666666667
User 61069 AUC after training: 0.7916666666666667
User 61069 does not improve AUC. Reverting changes.
Training on augumented user 16502 41/50 current_auc = 0.7916666666666667
User 16502 AUC after training: 0.7857142857142858
User 16502 does not improve AUC. Reverting changes.
Training on augumented user 67925 42/50 current_auc = 0.7916666666666667
User 67925 AUC after training: 0.7857142857142858
User 67925 does not improve AUC. Reverting changes.
Training on augumented user 79748 43/50 current_auc = 0.7916666666666667
User 79748 AUC after training: 0.7857142857142858
User 79748 does not improve AUC. Reverting changes.
Training on augumented user 119055 44/50 current_auc = 0.7916666666666667
User 119055 AUC after training: 0.7916666666666667
User 119055 does not improve AUC. Reverting changes.
Training on augumented user 111254 45/50 current_auc = 0.7916666666666667
User 111254 AUC after training: 0.7857142857142858
User 111254 does not improve AUC. Reverting changes.
Training on augumented user 80663 46/50 current_auc = 0.7916666666666667
User 80663 AUC after training: 0.7857142857142858
User 80663 does not improve AUC. Reverting changes.
Training on augumented user 77007 47/50 current_auc = 0.7916666666666667
User 77007 AUC after training: 0.7976190476190477
User 77007 improves AUC. Keeping the model.
Training on augumented user 132573 48/50 current_auc = 0.7976190476190477
User 132573 AUC after training: 0.7976190476190477
User 132573 does not improve AUC. Reverting changes.
Training on augumented user 135462 49/50 current_auc = 0.7976190476190477
User 135462 AUC after training: 0.7976190476190477
User 135462 does not improve AUC. Reverting changes.
[2024-12-02 19:19:21.070075] start test user 60408 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:21.604063] start test user 60408 184/568 recall augumented users by random, augumented_users = [85071, 47793, 71993, 134844, 23734, 8566, 81282, 93073, 136676, 1025, 77648, 7382, 90331, 29193, 6944, 111180, 114103, 135466, 128685, 87506, 77333, 67755, 100147, 16265, 105204, 33666, 124375, 20777, 98560, 118657, 88732, 80441, 117873, 54539, 20519, 129383, 46809, 9210, 41357, 47683, 12846, 103569, 64773, 129943, 97245, 113092, 53745, 115787, 126310, 33847]
[2024-12-02 19:19:21.619121] user = 60408 Cloud 184/568
[2024-12-02 19:19:21.631660] user = 60408 Local 184/568
[2024-12-02 19:19:21.668120] user = 60408 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:24.009933] user = 60408 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.771889400921659
Training on augumented user 85071 0/50 current_auc = 0.771889400921659
User 85071 AUC after training: 0.7695852534562213
User 85071 does not improve AUC. Reverting changes.
Training on augumented user 47793 1/50 current_auc = 0.771889400921659
User 47793 AUC after training: 0.771889400921659
User 47793 does not improve AUC. Reverting changes.
Training on augumented user 71993 2/50 current_auc = 0.771889400921659
User 71993 AUC after training: 0.771889400921659
User 71993 does not improve AUC. Reverting changes.
Training on augumented user 134844 3/50 current_auc = 0.771889400921659
User 134844 AUC after training: 0.7741935483870969
User 134844 improves AUC. Keeping the model.
Training on augumented user 23734 4/50 current_auc = 0.7741935483870969
User 23734 AUC after training: 0.7764976958525347
User 23734 improves AUC. Keeping the model.
Training on augumented user 8566 5/50 current_auc = 0.7764976958525347
User 8566 AUC after training: 0.7764976958525347
User 8566 does not improve AUC. Reverting changes.
Training on augumented user 81282 6/50 current_auc = 0.7764976958525347
User 81282 AUC after training: 0.7764976958525347
User 81282 does not improve AUC. Reverting changes.
Training on augumented user 93073 7/50 current_auc = 0.7764976958525347
User 93073 AUC after training: 0.771889400921659
User 93073 does not improve AUC. Reverting changes.
Training on augumented user 136676 8/50 current_auc = 0.7764976958525347
User 136676 AUC after training: 0.7764976958525347
User 136676 does not improve AUC. Reverting changes.
Training on augumented user 1025 9/50 current_auc = 0.7764976958525347
User 1025 AUC after training: 0.771889400921659
User 1025 does not improve AUC. Reverting changes.
Training on augumented user 77648 10/50 current_auc = 0.7764976958525347
User 77648 AUC after training: 0.7764976958525347
User 77648 does not improve AUC. Reverting changes.
Training on augumented user 7382 11/50 current_auc = 0.7764976958525347
User 7382 AUC after training: 0.7764976958525346
User 7382 does not improve AUC. Reverting changes.
Training on augumented user 90331 12/50 current_auc = 0.7764976958525347
User 90331 AUC after training: 0.771889400921659
User 90331 does not improve AUC. Reverting changes.
Training on augumented user 29193 13/50 current_auc = 0.7764976958525347
User 29193 AUC after training: 0.7764976958525347
User 29193 does not improve AUC. Reverting changes.
Training on augumented user 6944 14/50 current_auc = 0.7764976958525347
User 6944 AUC after training: 0.771889400921659
User 6944 does not improve AUC. Reverting changes.
Training on augumented user 111180 15/50 current_auc = 0.7764976958525347
User 111180 AUC after training: 0.7764976958525347
User 111180 does not improve AUC. Reverting changes.
Training on augumented user 114103 16/50 current_auc = 0.7764976958525347
User 114103 AUC after training: 0.7741935483870969
User 114103 does not improve AUC. Reverting changes.
Training on augumented user 135466 17/50 current_auc = 0.7764976958525347
User 135466 AUC after training: 0.7764976958525347
User 135466 does not improve AUC. Reverting changes.
Training on augumented user 128685 18/50 current_auc = 0.7764976958525347
User 128685 AUC after training: 0.7695852534562213
User 128685 does not improve AUC. Reverting changes.
Training on augumented user 87506 19/50 current_auc = 0.7764976958525347
User 87506 AUC after training: 0.7741935483870968
User 87506 does not improve AUC. Reverting changes.
Training on augumented user 77333 20/50 current_auc = 0.7764976958525347
User 77333 AUC after training: 0.7764976958525347
User 77333 does not improve AUC. Reverting changes.
Training on augumented user 67755 21/50 current_auc = 0.7764976958525347
User 67755 AUC after training: 0.7788018433179724
User 67755 improves AUC. Keeping the model.
Training on augumented user 100147 22/50 current_auc = 0.7788018433179724
User 100147 AUC after training: 0.7764976958525347
User 100147 does not improve AUC. Reverting changes.
Training on augumented user 16265 23/50 current_auc = 0.7788018433179724
User 16265 AUC after training: 0.7764976958525347
User 16265 does not improve AUC. Reverting changes.
Training on augumented user 105204 24/50 current_auc = 0.7788018433179724
User 105204 AUC after training: 0.7788018433179724
User 105204 does not improve AUC. Reverting changes.
Training on augumented user 33666 25/50 current_auc = 0.7788018433179724
User 33666 AUC after training: 0.7788018433179724
User 33666 does not improve AUC. Reverting changes.
Training on augumented user 124375 26/50 current_auc = 0.7788018433179724
User 124375 AUC after training: 0.7764976958525347
User 124375 does not improve AUC. Reverting changes.
Training on augumented user 20777 27/50 current_auc = 0.7788018433179724
User 20777 AUC after training: 0.7741935483870969
User 20777 does not improve AUC. Reverting changes.
Training on augumented user 98560 28/50 current_auc = 0.7788018433179724
User 98560 AUC after training: 0.7788018433179724
User 98560 does not improve AUC. Reverting changes.
Training on augumented user 118657 29/50 current_auc = 0.7788018433179724
User 118657 AUC after training: 0.7764976958525347
User 118657 does not improve AUC. Reverting changes.
Training on augumented user 88732 30/50 current_auc = 0.7788018433179724
User 88732 AUC after training: 0.7764976958525347
User 88732 does not improve AUC. Reverting changes.
Training on augumented user 80441 31/50 current_auc = 0.7788018433179724
User 80441 AUC after training: 0.7788018433179724
User 80441 does not improve AUC. Reverting changes.
Training on augumented user 117873 32/50 current_auc = 0.7788018433179724
User 117873 AUC after training: 0.7764976958525347
User 117873 does not improve AUC. Reverting changes.
Training on augumented user 54539 33/50 current_auc = 0.7788018433179724
User 54539 AUC after training: 0.7764976958525347
User 54539 does not improve AUC. Reverting changes.
Training on augumented user 20519 34/50 current_auc = 0.7788018433179724
User 20519 AUC after training: 0.7764976958525347
User 20519 does not improve AUC. Reverting changes.
Training on augumented user 129383 35/50 current_auc = 0.7788018433179724
User 129383 AUC after training: 0.7788018433179724
User 129383 does not improve AUC. Reverting changes.
Training on augumented user 46809 36/50 current_auc = 0.7788018433179724
User 46809 AUC after training: 0.7788018433179724
User 46809 does not improve AUC. Reverting changes.
Training on augumented user 9210 37/50 current_auc = 0.7788018433179724
User 9210 AUC after training: 0.771889400921659
User 9210 does not improve AUC. Reverting changes.
Training on augumented user 41357 38/50 current_auc = 0.7788018433179724
User 41357 AUC after training: 0.7741935483870969
User 41357 does not improve AUC. Reverting changes.
Training on augumented user 47683 39/50 current_auc = 0.7788018433179724
User 47683 AUC after training: 0.7764976958525347
User 47683 does not improve AUC. Reverting changes.
Training on augumented user 12846 40/50 current_auc = 0.7788018433179724
User 12846 AUC after training: 0.7788018433179724
User 12846 does not improve AUC. Reverting changes.
Training on augumented user 103569 41/50 current_auc = 0.7788018433179724
User 103569 AUC after training: 0.7788018433179724
User 103569 does not improve AUC. Reverting changes.
Training on augumented user 64773 42/50 current_auc = 0.7788018433179724
User 64773 AUC after training: 0.7741935483870969
User 64773 does not improve AUC. Reverting changes.
Training on augumented user 129943 43/50 current_auc = 0.7788018433179724
User 129943 AUC after training: 0.7764976958525347
User 129943 does not improve AUC. Reverting changes.
Training on augumented user 97245 44/50 current_auc = 0.7788018433179724
User 97245 AUC after training: 0.7764976958525347
User 97245 does not improve AUC. Reverting changes.
Training on augumented user 113092 45/50 current_auc = 0.7788018433179724
User 113092 AUC after training: 0.7764976958525347
User 113092 does not improve AUC. Reverting changes.
Training on augumented user 53745 46/50 current_auc = 0.7788018433179724
User 53745 AUC after training: 0.7764976958525347
User 53745 does not improve AUC. Reverting changes.
Training on augumented user 115787 47/50 current_auc = 0.7788018433179724
User 115787 AUC after training: 0.7764976958525347
User 115787 does not improve AUC. Reverting changes.
Training on augumented user 126310 48/50 current_auc = 0.7788018433179724
User 126310 AUC after training: 0.7788018433179724
User 126310 does not improve AUC. Reverting changes.
Training on augumented user 33847 49/50 current_auc = 0.7788018433179724
User 33847 AUC after training: 0.7764976958525347
User 33847 does not improve AUC. Reverting changes.
[2024-12-02 19:19:53.521264] start test user 60427 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:53.928064] start test user 60427 185/568 recall augumented users by random, augumented_users = [6135, 112021, 56415, 102588, 57060, 56541, 107320, 34273, 2774, 71669, 10482, 8394, 39168, 40293, 24877, 11746, 41502, 69440, 51795, 70278, 45264, 70680, 110972, 30992, 137986, 123782, 9534, 28117, 107338, 44774, 101990, 88050, 117085, 26355, 113290, 15102, 99632, 98628, 110820, 61253, 121962, 118926, 25639, 76178, 19400, 138359, 89879, 69655, 30780, 120226]
[2024-12-02 19:19:53.944687] user = 60427 Cloud 185/568
[2024-12-02 19:19:53.996635] user = 60427 Local 185/568
[2024-12-02 19:19:54.160084] user = 60427 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:56.144960] user = 60427 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6098951060305914
Training on augumented user 6135 0/50 current_auc = 0.6098951060305914
User 6135 AUC after training: 0.6110966778163869
User 6135 improves AUC. Keeping the model.
Training on augumented user 112021 1/50 current_auc = 0.6110966778163869
User 112021 AUC after training: 0.6110966778163869
User 112021 does not improve AUC. Reverting changes.
Training on augumented user 56415 2/50 current_auc = 0.6110966778163869
User 56415 AUC after training: 0.6091481830286104
User 56415 does not improve AUC. Reverting changes.
Training on augumented user 102588 3/50 current_auc = 0.6110966778163869
User 102588 AUC after training: 0.6121845874062287
User 102588 improves AUC. Keeping the model.
Training on augumented user 57060 4/50 current_auc = 0.6121845874062287
User 57060 AUC after training: 0.6101549053356281
User 57060 does not improve AUC. Reverting changes.
Training on augumented user 56541 5/50 current_auc = 0.6121845874062287
User 56541 AUC after training: 0.6125905238203488
User 56541 improves AUC. Keeping the model.
Training on augumented user 107320 6/50 current_auc = 0.6125905238203488
User 107320 AUC after training: 0.6126554736466079
User 107320 improves AUC. Keeping the model.
Training on augumented user 34273 7/50 current_auc = 0.6126554736466079
User 34273 AUC after training: 0.612736660929432
User 34273 improves AUC. Keeping the model.
Training on augumented user 2774 8/50 current_auc = 0.612736660929432
User 2774 AUC after training: 0.6141493196505698
User 2774 improves AUC. Keeping the model.
Training on augumented user 71669 9/50 current_auc = 0.6141493196505698
User 71669 AUC after training: 0.6128016107556913
User 71669 does not improve AUC. Reverting changes.
Training on augumented user 10482 10/50 current_auc = 0.6141493196505698
User 10482 AUC after training: 0.6155295034585784
User 10482 improves AUC. Keeping the model.
Training on augumented user 8394 11/50 current_auc = 0.6155295034585784
User 8394 AUC after training: 0.617201961484753
User 8394 improves AUC. Keeping the model.
Training on augumented user 39168 12/50 current_auc = 0.617201961484753
User 39168 AUC after training: 0.6168772123534569
User 39168 does not improve AUC. Reverting changes.
Training on augumented user 40293 13/50 current_auc = 0.617201961484753
User 40293 AUC after training: 0.6182736336180301
User 40293 improves AUC. Keeping the model.
Training on augumented user 24877 14/50 current_auc = 0.6182736336180301
User 24877 AUC after training: 0.6176566102685676
User 24877 does not improve AUC. Reverting changes.
Training on augumented user 11746 15/50 current_auc = 0.6182736336180301
User 11746 AUC after training: 0.61992985418764
User 11746 improves AUC. Keeping the model.
Training on augumented user 41502 16/50 current_auc = 0.61992985418764
User 41502 AUC after training: 0.6187932322281038
User 41502 does not improve AUC. Reverting changes.
Training on augumented user 69440 17/50 current_auc = 0.61992985418764
User 69440 AUC after training: 0.6208553892118339
User 69440 improves AUC. Keeping the model.
Training on augumented user 51795 18/50 current_auc = 0.6208553892118339
User 51795 AUC after training: 0.6209203390380931
User 51795 improves AUC. Keeping the model.
Training on augumented user 70278 19/50 current_auc = 0.6209203390380931
User 70278 AUC after training: 0.6195076803169551
User 70278 does not improve AUC. Reverting changes.
Training on augumented user 45264 20/50 current_auc = 0.6209203390380931
User 45264 AUC after training: 0.6201815347643945
User 45264 does not improve AUC. Reverting changes.
Training on augumented user 70680 21/50 current_auc = 0.6209203390380931
User 70680 AUC after training: 0.6202383658623714
User 70680 does not improve AUC. Reverting changes.
Training on augumented user 110972 22/50 current_auc = 0.6209203390380931
User 110972 AUC after training: 0.6204819277108433
User 110972 does not improve AUC. Reverting changes.
Training on augumented user 30992 23/50 current_auc = 0.6209203390380931
User 30992 AUC after training: 0.6208797453966811
User 30992 does not improve AUC. Reverting changes.
Training on augumented user 137986 24/50 current_auc = 0.6209203390380931
User 137986 AUC after training: 0.6205631149936673
User 137986 does not improve AUC. Reverting changes.
Training on augumented user 123782 25/50 current_auc = 0.6209203390380931
User 123782 AUC after training: 0.6209041015815282
User 123782 does not improve AUC. Reverting changes.
Training on augumented user 9534 26/50 current_auc = 0.6209203390380931
User 9534 AUC after training: 0.6212288507128243
User 9534 improves AUC. Keeping the model.
Training on augumented user 28117 27/50 current_auc = 0.6212288507128243
User 28117 AUC after training: 0.6211801383431299
User 28117 does not improve AUC. Reverting changes.
Training on augumented user 107338 28/50 current_auc = 0.6212288507128243
User 107338 AUC after training: 0.6202464845906537
User 107338 does not improve AUC. Reverting changes.
Training on augumented user 44774 29/50 current_auc = 0.6212288507128243
User 44774 AUC after training: 0.6217403305946156
User 44774 improves AUC. Keeping the model.
Training on augumented user 101990 30/50 current_auc = 0.6217403305946156
User 101990 AUC after training: 0.6198324294482512
User 101990 does not improve AUC. Reverting changes.
Training on augumented user 88050 31/50 current_auc = 0.6217403305946156
User 88050 AUC after training: 0.6215535998441203
User 88050 does not improve AUC. Reverting changes.
Training on augumented user 117085 32/50 current_auc = 0.6217403305946156
User 117085 AUC after training: 0.6219108238885461
User 117085 improves AUC. Keeping the model.
Training on augumented user 26355 33/50 current_auc = 0.6219108238885461
User 26355 AUC after training: 0.6218621115188516
User 26355 does not improve AUC. Reverting changes.
Training on augumented user 113290 34/50 current_auc = 0.6219108238885461
User 113290 AUC after training: 0.61992985418764
User 113290 does not improve AUC. Reverting changes.
Training on augumented user 15102 35/50 current_auc = 0.6219108238885461
User 15102 AUC after training: 0.6215535998441204
User 15102 does not improve AUC. Reverting changes.
Training on augumented user 99632 36/50 current_auc = 0.6219108238885461
User 99632 AUC after training: 0.6214561751047316
User 99632 does not improve AUC. Reverting changes.
Training on augumented user 98628 37/50 current_auc = 0.6219108238885461
User 98628 AUC after training: 0.6207823206572922
User 98628 does not improve AUC. Reverting changes.
Training on augumented user 110820 38/50 current_auc = 0.6219108238885461
User 110820 AUC after training: 0.6216997369532036
User 110820 does not improve AUC. Reverting changes.
Training on augumented user 61253 39/50 current_auc = 0.6219108238885461
User 61253 AUC after training: 0.6207092521027506
User 61253 does not improve AUC. Reverting changes.
Training on augumented user 121962 40/50 current_auc = 0.6219108238885461
User 121962 AUC after training: 0.621504887474426
User 121962 does not improve AUC. Reverting changes.
Training on augumented user 118926 41/50 current_auc = 0.6219108238885461
User 118926 AUC after training: 0.6215211249309909
User 118926 does not improve AUC. Reverting changes.
Training on augumented user 25639 42/50 current_auc = 0.6219108238885461
User 25639 AUC after training: 0.6196944110674503
User 25639 does not improve AUC. Reverting changes.
Training on augumented user 76178 43/50 current_auc = 0.6219108238885461
User 76178 AUC after training: 0.6207092521027506
User 76178 does not improve AUC. Reverting changes.
Training on augumented user 19400 44/50 current_auc = 0.6219108238885461
User 19400 AUC after training: 0.621423700191602
User 19400 does not improve AUC. Reverting changes.
Training on augumented user 138359 45/50 current_auc = 0.6219108238885461
User 138359 AUC after training: 0.6214561751047316
User 138359 does not improve AUC. Reverting changes.
Training on augumented user 89879 46/50 current_auc = 0.6219108238885461
User 89879 AUC after training: 0.6218458740622868
User 89879 does not improve AUC. Reverting changes.
Training on augumented user 69655 47/50 current_auc = 0.6219108238885461
User 69655 AUC after training: 0.6211963757996947
User 69655 does not improve AUC. Reverting changes.
Training on augumented user 30780 48/50 current_auc = 0.6219108238885461
User 30780 AUC after training: 0.6217322118663333
User 30780 does not improve AUC. Reverting changes.
Training on augumented user 120226 49/50 current_auc = 0.6219108238885461
User 120226 AUC after training: 0.6213912252784725
User 120226 does not improve AUC. Reverting changes.
[2024-12-02 19:20:26.602543] start test user 60441 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:27.072953] start test user 60441 186/568 recall augumented users by random, augumented_users = [100693, 77751, 73300, 42037, 62090, 27420, 104441, 28151, 129206, 85096, 137051, 119149, 1645, 76636, 47145, 14629, 121919, 55756, 137558, 112758, 130478, 8852, 101264, 26722, 122049, 105199, 126700, 34083, 13981, 10005, 119892, 69617, 24820, 47464, 72607, 65696, 49107, 119031, 19413, 128672, 70083, 12611, 62080, 114857, 98999, 61015, 77996, 16561, 29491, 52172]
[2024-12-02 19:20:27.110327] user = 60441 Cloud 186/568
[2024-12-02 19:20:27.235991] user = 60441 Local 186/568
[2024-12-02 19:20:27.464163] user = 60441 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:30.372957] user = 60441 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7295047514619882
Training on augumented user 100693 0/50 current_auc = 0.7295047514619882
User 100693 AUC after training: 0.7295413011695906
User 100693 improves AUC. Keeping the model.
Training on augumented user 77751 1/50 current_auc = 0.7295413011695906
User 77751 AUC after training: 0.7290113304093567
User 77751 does not improve AUC. Reverting changes.
Training on augumented user 73300 2/50 current_auc = 0.7295413011695906
User 73300 AUC after training: 0.7291940789473684
User 73300 does not improve AUC. Reverting changes.
Training on augumented user 42037 3/50 current_auc = 0.7295413011695906
User 42037 AUC after training: 0.7293220029239766
User 42037 does not improve AUC. Reverting changes.
Training on augumented user 62090 4/50 current_auc = 0.7295413011695906
User 62090 AUC after training: 0.7291392543859649
User 62090 does not improve AUC. Reverting changes.
Training on augumented user 27420 5/50 current_auc = 0.7295413011695906
User 27420 AUC after training: 0.7296692251461989
User 27420 improves AUC. Keeping the model.
Training on augumented user 104441 6/50 current_auc = 0.7296692251461989
User 104441 AUC after training: 0.7296692251461988
User 104441 does not improve AUC. Reverting changes.
Training on augumented user 28151 7/50 current_auc = 0.7296692251461989
User 28151 AUC after training: 0.7296144005847953
User 28151 does not improve AUC. Reverting changes.
Training on augumented user 129206 8/50 current_auc = 0.7296692251461989
User 129206 AUC after training: 0.7289930555555555
User 129206 does not improve AUC. Reverting changes.
Training on augumented user 85096 9/50 current_auc = 0.7296692251461989
User 85096 AUC after training: 0.7298885233918128
User 85096 improves AUC. Keeping the model.
Training on augumented user 137051 10/50 current_auc = 0.7298885233918128
User 137051 AUC after training: 0.7303179824561403
User 137051 improves AUC. Keeping the model.
Training on augumented user 119149 11/50 current_auc = 0.7303179824561403
User 119149 AUC after training: 0.72984283625731
User 119149 does not improve AUC. Reverting changes.
Training on augumented user 1645 12/50 current_auc = 0.7303179824561403
User 1645 AUC after training: 0.7302448830409356
User 1645 does not improve AUC. Reverting changes.
Training on augumented user 76636 13/50 current_auc = 0.7303179824561403
User 76636 AUC after training: 0.7300986842105263
User 76636 does not improve AUC. Reverting changes.
Training on augumented user 47145 14/50 current_auc = 0.7303179824561403
User 47145 AUC after training: 0.7302631578947368
User 47145 does not improve AUC. Reverting changes.
Training on augumented user 14629 15/50 current_auc = 0.7303179824561403
User 14629 AUC after training: 0.7303362573099416
User 14629 improves AUC. Keeping the model.
Training on augumented user 121919 16/50 current_auc = 0.7303362573099416
User 121919 AUC after training: 0.7303545321637426
User 121919 improves AUC. Keeping the model.
Training on augumented user 55756 17/50 current_auc = 0.7303545321637426
User 55756 AUC after training: 0.730171783625731
User 55756 does not improve AUC. Reverting changes.
Training on augumented user 137558 18/50 current_auc = 0.7303545321637426
User 137558 AUC after training: 0.7308296783625731
User 137558 improves AUC. Keeping the model.
Training on augumented user 112758 19/50 current_auc = 0.7308296783625731
User 112758 AUC after training: 0.7304459064327484
User 112758 does not improve AUC. Reverting changes.
Training on augumented user 130478 20/50 current_auc = 0.7308296783625731
User 130478 AUC after training: 0.7311038011695907
User 130478 improves AUC. Keeping the model.
Training on augumented user 8852 21/50 current_auc = 0.7311038011695907
User 8852 AUC after training: 0.7313230994152047
User 8852 improves AUC. Keeping the model.
Training on augumented user 101264 22/50 current_auc = 0.7313230994152047
User 101264 AUC after training: 0.7312865497076024
User 101264 does not improve AUC. Reverting changes.
Training on augumented user 26722 23/50 current_auc = 0.7313230994152047
User 26722 AUC after training: 0.7316885964912281
User 26722 improves AUC. Keeping the model.
Training on augumented user 122049 24/50 current_auc = 0.7316885964912281
User 122049 AUC after training: 0.7315789473684211
User 122049 does not improve AUC. Reverting changes.
Training on augumented user 105199 25/50 current_auc = 0.7316885964912281
User 105199 AUC after training: 0.7314875730994153
User 105199 does not improve AUC. Reverting changes.
Training on augumented user 126700 26/50 current_auc = 0.7316885964912281
User 126700 AUC after training: 0.7318713450292397
User 126700 improves AUC. Keeping the model.
Training on augumented user 34083 27/50 current_auc = 0.7318713450292397
User 34083 AUC after training: 0.7314510233918129
User 34083 does not improve AUC. Reverting changes.
Training on augumented user 13981 28/50 current_auc = 0.7318713450292397
User 13981 AUC after training: 0.7317251461988304
User 13981 does not improve AUC. Reverting changes.
Training on augumented user 10005 29/50 current_auc = 0.7318713450292397
User 10005 AUC after training: 0.7315241228070175
User 10005 does not improve AUC. Reverting changes.
Training on augumented user 119892 30/50 current_auc = 0.7318713450292397
User 119892 AUC after training: 0.7319444444444444
User 119892 improves AUC. Keeping the model.
Training on augumented user 69617 31/50 current_auc = 0.7319444444444444
User 69617 AUC after training: 0.7317799707602339
User 69617 does not improve AUC. Reverting changes.
Training on augumented user 24820 32/50 current_auc = 0.7319444444444444
User 24820 AUC after training: 0.7316520467836257
User 24820 does not improve AUC. Reverting changes.
Training on augumented user 47464 33/50 current_auc = 0.7319444444444444
User 47464 AUC after training: 0.7316520467836256
User 47464 does not improve AUC. Reverting changes.
Training on augumented user 72607 34/50 current_auc = 0.7319444444444444
User 72607 AUC after training: 0.7320723684210526
User 72607 improves AUC. Keeping the model.
Training on augumented user 65696 35/50 current_auc = 0.7320723684210526
User 65696 AUC after training: 0.7319261695906433
User 65696 does not improve AUC. Reverting changes.
Training on augumented user 49107 36/50 current_auc = 0.7320723684210526
User 49107 AUC after training: 0.7318165204678362
User 49107 does not improve AUC. Reverting changes.
Training on augumented user 119031 37/50 current_auc = 0.7320723684210526
User 119031 AUC after training: 0.7317068713450292
User 119031 does not improve AUC. Reverting changes.
Training on augumented user 19413 38/50 current_auc = 0.7320723684210526
User 19413 AUC after training: 0.7319809941520469
User 19413 does not improve AUC. Reverting changes.
Training on augumented user 128672 39/50 current_auc = 0.7320723684210526
User 128672 AUC after training: 0.7319078947368421
User 128672 does not improve AUC. Reverting changes.
Training on augumented user 70083 40/50 current_auc = 0.7320723684210526
User 70083 AUC after training: 0.7319261695906433
User 70083 does not improve AUC. Reverting changes.
Training on augumented user 12611 41/50 current_auc = 0.7320723684210526
User 12611 AUC after training: 0.7317799707602339
User 12611 does not improve AUC. Reverting changes.
Training on augumented user 62080 42/50 current_auc = 0.7320723684210526
User 62080 AUC after training: 0.7320175438596491
User 62080 does not improve AUC. Reverting changes.
Training on augumented user 114857 43/50 current_auc = 0.7320723684210526
User 114857 AUC after training: 0.731204312865497
User 114857 does not improve AUC. Reverting changes.
Training on augumented user 98999 44/50 current_auc = 0.7320723684210526
User 98999 AUC after training: 0.7312865497076023
User 98999 does not improve AUC. Reverting changes.
Training on augumented user 61015 45/50 current_auc = 0.7320723684210526
User 61015 AUC after training: 0.7319261695906432
User 61015 does not improve AUC. Reverting changes.
Training on augumented user 77996 46/50 current_auc = 0.7320723684210526
User 77996 AUC after training: 0.7311769005847953
User 77996 does not improve AUC. Reverting changes.
Training on augumented user 16561 47/50 current_auc = 0.7320723684210526
User 16561 AUC after training: 0.7309027777777778
User 16561 does not improve AUC. Reverting changes.
Training on augumented user 29491 48/50 current_auc = 0.7320723684210526
User 29491 AUC after training: 0.7310672514619884
User 29491 does not improve AUC. Reverting changes.
Training on augumented user 52172 49/50 current_auc = 0.7320723684210526
User 52172 AUC after training: 0.7320723684210526
User 52172 does not improve AUC. Reverting changes.
[2024-12-02 19:21:05.218101] start test user 60457 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:05.701170] start test user 60457 187/568 recall augumented users by random, augumented_users = [117908, 105767, 76921, 54230, 44905, 13811, 66314, 23693, 100203, 57038, 31387, 78988, 37068, 53170, 44711, 85080, 113745, 14099, 76882, 102135, 49800, 28030, 60902, 95544, 93224, 5656, 57208, 71081, 90868, 113189, 15483, 107299, 50870, 105204, 93630, 23243, 69881, 134706, 81052, 53626, 21320, 5655, 8658, 86003, 43701, 82797, 77443, 10562, 44926, 10818]
[2024-12-02 19:21:05.715737] user = 60457 Cloud 187/568
[2024-12-02 19:21:05.730247] user = 60457 Local 187/568
[2024-12-02 19:21:05.805772] user = 60457 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:07.846256] user = 60457 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.656597774244833
Training on augumented user 117908 0/50 current_auc = 0.656597774244833
User 117908 AUC after training: 0.656597774244833
User 117908 does not improve AUC. Reverting changes.
Training on augumented user 105767 1/50 current_auc = 0.656597774244833
User 105767 AUC after training: 0.6571277159512454
User 105767 improves AUC. Keeping the model.
Training on augumented user 76921 2/50 current_auc = 0.6571277159512454
User 76921 AUC after training: 0.6565977742448331
User 76921 does not improve AUC. Reverting changes.
Training on augumented user 54230 3/50 current_auc = 0.6571277159512454
User 54230 AUC after training: 0.656597774244833
User 54230 does not improve AUC. Reverting changes.
Training on augumented user 44905 4/50 current_auc = 0.6571277159512454
User 44905 AUC after training: 0.656597774244833
User 44905 does not improve AUC. Reverting changes.
Training on augumented user 13811 5/50 current_auc = 0.6571277159512454
User 13811 AUC after training: 0.6571277159512454
User 13811 does not improve AUC. Reverting changes.
Training on augumented user 66314 6/50 current_auc = 0.6571277159512454
User 66314 AUC after training: 0.6571277159512454
User 66314 does not improve AUC. Reverting changes.
Training on augumented user 23693 7/50 current_auc = 0.6571277159512454
User 23693 AUC after training: 0.6550079491255962
User 23693 does not improve AUC. Reverting changes.
Training on augumented user 100203 8/50 current_auc = 0.6571277159512454
User 100203 AUC after training: 0.6560678325384208
User 100203 does not improve AUC. Reverting changes.
Training on augumented user 57038 9/50 current_auc = 0.6571277159512454
User 57038 AUC after training: 0.6581875993640699
User 57038 improves AUC. Keeping the model.
Training on augumented user 31387 10/50 current_auc = 0.6581875993640699
User 31387 AUC after training: 0.6571277159512454
User 31387 does not improve AUC. Reverting changes.
Training on augumented user 78988 11/50 current_auc = 0.6581875993640699
User 78988 AUC after training: 0.6539480657127716
User 78988 does not improve AUC. Reverting changes.
Training on augumented user 37068 12/50 current_auc = 0.6581875993640699
User 37068 AUC after training: 0.6555378908320085
User 37068 does not improve AUC. Reverting changes.
Training on augumented user 53170 13/50 current_auc = 0.6581875993640699
User 53170 AUC after training: 0.6571277159512454
User 53170 does not improve AUC. Reverting changes.
Training on augumented user 44711 14/50 current_auc = 0.6581875993640699
User 44711 AUC after training: 0.6560678325384208
User 44711 does not improve AUC. Reverting changes.
Training on augumented user 85080 15/50 current_auc = 0.6581875993640699
User 85080 AUC after training: 0.6555378908320085
User 85080 does not improve AUC. Reverting changes.
Training on augumented user 113745 16/50 current_auc = 0.6581875993640699
User 113745 AUC after training: 0.6581875993640699
User 113745 does not improve AUC. Reverting changes.
Training on augumented user 14099 17/50 current_auc = 0.6581875993640699
User 14099 AUC after training: 0.6571277159512453
User 14099 does not improve AUC. Reverting changes.
Training on augumented user 76882 18/50 current_auc = 0.6581875993640699
User 76882 AUC after training: 0.6552729199788023
User 76882 does not improve AUC. Reverting changes.
Training on augumented user 102135 19/50 current_auc = 0.6581875993640699
User 102135 AUC after training: 0.6555378908320084
User 102135 does not improve AUC. Reverting changes.
Training on augumented user 49800 20/50 current_auc = 0.6581875993640699
User 49800 AUC after training: 0.6565977742448331
User 49800 does not improve AUC. Reverting changes.
Training on augumented user 28030 21/50 current_auc = 0.6581875993640699
User 28030 AUC after training: 0.65474297827239
User 28030 does not improve AUC. Reverting changes.
Training on augumented user 60902 22/50 current_auc = 0.6581875993640699
User 60902 AUC after training: 0.6550079491255961
User 60902 does not improve AUC. Reverting changes.
Training on augumented user 95544 23/50 current_auc = 0.6581875993640699
User 95544 AUC after training: 0.6576576576576577
User 95544 does not improve AUC. Reverting changes.
Training on augumented user 93224 24/50 current_auc = 0.6581875993640699
User 93224 AUC after training: 0.6571277159512454
User 93224 does not improve AUC. Reverting changes.
Training on augumented user 5656 25/50 current_auc = 0.6581875993640699
User 5656 AUC after training: 0.6581875993640699
User 5656 does not improve AUC. Reverting changes.
Training on augumented user 57208 26/50 current_auc = 0.6581875993640699
User 57208 AUC after training: 0.6560678325384207
User 57208 does not improve AUC. Reverting changes.
Training on augumented user 71081 27/50 current_auc = 0.6581875993640699
User 71081 AUC after training: 0.6550079491255962
User 71081 does not improve AUC. Reverting changes.
Training on augumented user 90868 28/50 current_auc = 0.6581875993640699
User 90868 AUC after training: 0.6534181240063593
User 90868 does not improve AUC. Reverting changes.
Training on augumented user 113189 29/50 current_auc = 0.6581875993640699
User 113189 AUC after training: 0.6576576576576577
User 113189 does not improve AUC. Reverting changes.
Training on augumented user 15483 30/50 current_auc = 0.6581875993640699
User 15483 AUC after training: 0.6552729199788023
User 15483 does not improve AUC. Reverting changes.
Training on augumented user 107299 31/50 current_auc = 0.6581875993640699
User 107299 AUC after training: 0.6571277159512454
User 107299 does not improve AUC. Reverting changes.
Training on augumented user 50870 32/50 current_auc = 0.6581875993640699
User 50870 AUC after training: 0.6555378908320084
User 50870 does not improve AUC. Reverting changes.
Training on augumented user 105204 33/50 current_auc = 0.6581875993640699
User 105204 AUC after training: 0.65818759936407
User 105204 improves AUC. Keeping the model.
Training on augumented user 93630 34/50 current_auc = 0.65818759936407
User 93630 AUC after training: 0.6563328033916269
User 93630 does not improve AUC. Reverting changes.
Training on augumented user 23243 35/50 current_auc = 0.65818759936407
User 23243 AUC after training: 0.6571277159512453
User 23243 does not improve AUC. Reverting changes.
Training on augumented user 69881 36/50 current_auc = 0.65818759936407
User 69881 AUC after training: 0.6576576576576576
User 69881 does not improve AUC. Reverting changes.
Training on augumented user 134706 37/50 current_auc = 0.65818759936407
User 134706 AUC after training: 0.6571277159512453
User 134706 does not improve AUC. Reverting changes.
Training on augumented user 81052 38/50 current_auc = 0.65818759936407
User 81052 AUC after training: 0.656597774244833
User 81052 does not improve AUC. Reverting changes.
Training on augumented user 53626 39/50 current_auc = 0.65818759936407
User 53626 AUC after training: 0.6576576576576577
User 53626 does not improve AUC. Reverting changes.
Training on augumented user 21320 40/50 current_auc = 0.65818759936407
User 21320 AUC after training: 0.65818759936407
User 21320 does not improve AUC. Reverting changes.
Training on augumented user 5655 41/50 current_auc = 0.65818759936407
User 5655 AUC after training: 0.6560678325384207
User 5655 does not improve AUC. Reverting changes.
Training on augumented user 8658 42/50 current_auc = 0.65818759936407
User 8658 AUC after training: 0.6576576576576576
User 8658 does not improve AUC. Reverting changes.
Training on augumented user 86003 43/50 current_auc = 0.65818759936407
User 86003 AUC after training: 0.6555378908320084
User 86003 does not improve AUC. Reverting changes.
Training on augumented user 43701 44/50 current_auc = 0.65818759936407
User 43701 AUC after training: 0.6576576576576576
User 43701 does not improve AUC. Reverting changes.
Training on augumented user 82797 45/50 current_auc = 0.65818759936407
User 82797 AUC after training: 0.6576576576576576
User 82797 does not improve AUC. Reverting changes.
Training on augumented user 77443 46/50 current_auc = 0.65818759936407
User 77443 AUC after training: 0.6576576576576576
User 77443 does not improve AUC. Reverting changes.
Training on augumented user 10562 47/50 current_auc = 0.65818759936407
User 10562 AUC after training: 0.65818759936407
User 10562 does not improve AUC. Reverting changes.
Training on augumented user 44926 48/50 current_auc = 0.65818759936407
User 44926 AUC after training: 0.6560678325384208
User 44926 does not improve AUC. Reverting changes.
Training on augumented user 10818 49/50 current_auc = 0.65818759936407
User 10818 AUC after training: 0.6576576576576577
User 10818 does not improve AUC. Reverting changes.
[2024-12-02 19:21:36.971497] start test user 60482 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:37.381415] start test user 60482 188/568 recall augumented users by random, augumented_users = [17265, 72610, 57895, 100943, 93545, 11164, 4471, 980, 108617, 115637, 41508, 81433, 80622, 36360, 54871, 41555, 119411, 122775, 107100, 135914, 79775, 10733, 120070, 97193, 92582, 127980, 54311, 101388, 95961, 3988, 79878, 65885, 91663, 43628, 52035, 27574, 21804, 127262, 115553, 10150, 119674, 962, 39410, 70127, 97108, 105020, 33140, 104399, 122145, 67338]
[2024-12-02 19:21:37.395870] user = 60482 Cloud 188/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:37.402899] user = 60482 Local 188/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:37.419382] user = 60482 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:39.586373] user = 60482 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 17265 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17265 AUC after training: 0.5
User 17265 does not improve AUC. Reverting changes.
Training on augumented user 72610 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72610 AUC after training: 0.5
User 72610 does not improve AUC. Reverting changes.
Training on augumented user 57895 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57895 AUC after training: 0.5
User 57895 does not improve AUC. Reverting changes.
Training on augumented user 100943 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100943 AUC after training: 0.5
User 100943 does not improve AUC. Reverting changes.
Training on augumented user 93545 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93545 AUC after training: 0.5
User 93545 does not improve AUC. Reverting changes.
Training on augumented user 11164 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11164 AUC after training: 0.5
User 11164 does not improve AUC. Reverting changes.
Training on augumented user 4471 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4471 AUC after training: 0.5
User 4471 does not improve AUC. Reverting changes.
Training on augumented user 980 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 980 AUC after training: 0.5
User 980 does not improve AUC. Reverting changes.
Training on augumented user 108617 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108617 AUC after training: 0.5
User 108617 does not improve AUC. Reverting changes.
Training on augumented user 115637 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115637 AUC after training: 0.5
User 115637 does not improve AUC. Reverting changes.
Training on augumented user 41508 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41508 AUC after training: 0.5
User 41508 does not improve AUC. Reverting changes.
Training on augumented user 81433 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81433 AUC after training: 0.5
User 81433 does not improve AUC. Reverting changes.
Training on augumented user 80622 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80622 AUC after training: 0.5
User 80622 does not improve AUC. Reverting changes.
Training on augumented user 36360 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36360 AUC after training: 0.5
User 36360 does not improve AUC. Reverting changes.
Training on augumented user 54871 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54871 AUC after training: 0.5
User 54871 does not improve AUC. Reverting changes.
Training on augumented user 41555 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41555 AUC after training: 0.5
User 41555 does not improve AUC. Reverting changes.
Training on augumented user 119411 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119411 AUC after training: 0.5
User 119411 does not improve AUC. Reverting changes.
Training on augumented user 122775 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122775 AUC after training: 0.5
User 122775 does not improve AUC. Reverting changes.
Training on augumented user 107100 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107100 AUC after training: 0.5
User 107100 does not improve AUC. Reverting changes.
Training on augumented user 135914 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135914 AUC after training: 0.5
User 135914 does not improve AUC. Reverting changes.
Training on augumented user 79775 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79775 AUC after training: 0.5
User 79775 does not improve AUC. Reverting changes.
Training on augumented user 10733 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10733 AUC after training: 0.5
User 10733 does not improve AUC. Reverting changes.
Training on augumented user 120070 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120070 AUC after training: 0.5
User 120070 does not improve AUC. Reverting changes.
Training on augumented user 97193 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97193 AUC after training: 0.5
User 97193 does not improve AUC. Reverting changes.
Training on augumented user 92582 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92582 AUC after training: 0.5
User 92582 does not improve AUC. Reverting changes.
Training on augumented user 127980 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127980 AUC after training: 0.5
User 127980 does not improve AUC. Reverting changes.
Training on augumented user 54311 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54311 AUC after training: 0.5
User 54311 does not improve AUC. Reverting changes.
Training on augumented user 101388 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101388 AUC after training: 0.5
User 101388 does not improve AUC. Reverting changes.
Training on augumented user 95961 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95961 AUC after training: 0.5
User 95961 does not improve AUC. Reverting changes.
Training on augumented user 3988 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3988 AUC after training: 0.5
User 3988 does not improve AUC. Reverting changes.
Training on augumented user 79878 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79878 AUC after training: 0.5
User 79878 does not improve AUC. Reverting changes.
Training on augumented user 65885 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65885 AUC after training: 0.5
User 65885 does not improve AUC. Reverting changes.
Training on augumented user 91663 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91663 AUC after training: 0.5
User 91663 does not improve AUC. Reverting changes.
Training on augumented user 43628 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43628 AUC after training: 0.5
User 43628 does not improve AUC. Reverting changes.
Training on augumented user 52035 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52035 AUC after training: 0.5
User 52035 does not improve AUC. Reverting changes.
Training on augumented user 27574 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27574 AUC after training: 0.5
User 27574 does not improve AUC. Reverting changes.
Training on augumented user 21804 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21804 AUC after training: 0.5
User 21804 does not improve AUC. Reverting changes.
Training on augumented user 127262 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127262 AUC after training: 0.5
User 127262 does not improve AUC. Reverting changes.
Training on augumented user 115553 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115553 AUC after training: 0.5
User 115553 does not improve AUC. Reverting changes.
Training on augumented user 10150 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10150 AUC after training: 0.5
User 10150 does not improve AUC. Reverting changes.
Training on augumented user 119674 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119674 AUC after training: 0.5
User 119674 does not improve AUC. Reverting changes.
Training on augumented user 962 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 962 AUC after training: 0.5
User 962 does not improve AUC. Reverting changes.
Training on augumented user 39410 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39410 AUC after training: 0.5
User 39410 does not improve AUC. Reverting changes.
Training on augumented user 70127 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70127 AUC after training: 0.5
User 70127 does not improve AUC. Reverting changes.
Training on augumented user 97108 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97108 AUC after training: 0.5
User 97108 does not improve AUC. Reverting changes.
Training on augumented user 105020 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105020 AUC after training: 0.5
User 105020 does not improve AUC. Reverting changes.
Training on augumented user 33140 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33140 AUC after training: 0.5
User 33140 does not improve AUC. Reverting changes.
Training on augumented user 104399 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104399 AUC after training: 0.5
User 104399 does not improve AUC. Reverting changes.
Training on augumented user 122145 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122145 AUC after training: 0.5
User 122145 does not improve AUC. Reverting changes.
Training on augumented user 67338 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67338 AUC after training: 0.5
User 67338 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:22:05.507439] start test user 60491 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:05.919808] start test user 60491 189/568 recall augumented users by random, augumented_users = [45781, 54719, 75606, 72491, 125236, 80511, 133421, 27905, 52202, 106314, 68517, 101114, 42351, 35899, 66931, 994, 87713, 114765, 18683, 79867, 25204, 22698, 35614, 126506, 34909, 99532, 137938, 7722, 82448, 95255, 104745, 128361, 81096, 131998, 77731, 678, 26621, 45799, 14653, 102712, 76302, 95327, 60694, 67464, 65629, 110059, 21012, 87118, 136823, 58945]
[2024-12-02 19:22:05.934647] user = 60491 Cloud 189/568
[2024-12-02 19:22:05.945265] user = 60491 Local 189/568
[2024-12-02 19:22:05.985149] user = 60491 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:08.353885] user = 60491 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4444444444444444
Training on augumented user 45781 0/50 current_auc = 0.4444444444444444
User 45781 AUC after training: 0.4222222222222222
User 45781 does not improve AUC. Reverting changes.
Training on augumented user 54719 1/50 current_auc = 0.4444444444444444
User 54719 AUC after training: 0.4
User 54719 does not improve AUC. Reverting changes.
Training on augumented user 75606 2/50 current_auc = 0.4444444444444444
User 75606 AUC after training: 0.4222222222222222
User 75606 does not improve AUC. Reverting changes.
Training on augumented user 72491 3/50 current_auc = 0.4444444444444444
User 72491 AUC after training: 0.4444444444444444
User 72491 does not improve AUC. Reverting changes.
Training on augumented user 125236 4/50 current_auc = 0.4444444444444444
User 125236 AUC after training: 0.4222222222222222
User 125236 does not improve AUC. Reverting changes.
Training on augumented user 80511 5/50 current_auc = 0.4444444444444444
User 80511 AUC after training: 0.4444444444444444
User 80511 does not improve AUC. Reverting changes.
Training on augumented user 133421 6/50 current_auc = 0.4444444444444444
User 133421 AUC after training: 0.4444444444444444
User 133421 does not improve AUC. Reverting changes.
Training on augumented user 27905 7/50 current_auc = 0.4444444444444444
User 27905 AUC after training: 0.4444444444444444
User 27905 does not improve AUC. Reverting changes.
Training on augumented user 52202 8/50 current_auc = 0.4444444444444444
User 52202 AUC after training: 0.4
User 52202 does not improve AUC. Reverting changes.
Training on augumented user 106314 9/50 current_auc = 0.4444444444444444
User 106314 AUC after training: 0.4222222222222222
User 106314 does not improve AUC. Reverting changes.
Training on augumented user 68517 10/50 current_auc = 0.4444444444444444
User 68517 AUC after training: 0.4222222222222222
User 68517 does not improve AUC. Reverting changes.
Training on augumented user 101114 11/50 current_auc = 0.4444444444444444
User 101114 AUC after training: 0.4444444444444444
User 101114 does not improve AUC. Reverting changes.
Training on augumented user 42351 12/50 current_auc = 0.4444444444444444
User 42351 AUC after training: 0.4222222222222222
User 42351 does not improve AUC. Reverting changes.
Training on augumented user 35899 13/50 current_auc = 0.4444444444444444
User 35899 AUC after training: 0.4222222222222222
User 35899 does not improve AUC. Reverting changes.
Training on augumented user 66931 14/50 current_auc = 0.4444444444444444
User 66931 AUC after training: 0.4444444444444444
User 66931 does not improve AUC. Reverting changes.
Training on augumented user 994 15/50 current_auc = 0.4444444444444444
User 994 AUC after training: 0.4444444444444444
User 994 does not improve AUC. Reverting changes.
Training on augumented user 87713 16/50 current_auc = 0.4444444444444444
User 87713 AUC after training: 0.4222222222222222
User 87713 does not improve AUC. Reverting changes.
Training on augumented user 114765 17/50 current_auc = 0.4444444444444444
User 114765 AUC after training: 0.4444444444444444
User 114765 does not improve AUC. Reverting changes.
Training on augumented user 18683 18/50 current_auc = 0.4444444444444444
User 18683 AUC after training: 0.4444444444444444
User 18683 does not improve AUC. Reverting changes.
Training on augumented user 79867 19/50 current_auc = 0.4444444444444444
User 79867 AUC after training: 0.4222222222222222
User 79867 does not improve AUC. Reverting changes.
Training on augumented user 25204 20/50 current_auc = 0.4444444444444444
User 25204 AUC after training: 0.4444444444444444
User 25204 does not improve AUC. Reverting changes.
Training on augumented user 22698 21/50 current_auc = 0.4444444444444444
User 22698 AUC after training: 0.4222222222222222
User 22698 does not improve AUC. Reverting changes.
Training on augumented user 35614 22/50 current_auc = 0.4444444444444444
User 35614 AUC after training: 0.4222222222222222
User 35614 does not improve AUC. Reverting changes.
Training on augumented user 126506 23/50 current_auc = 0.4444444444444444
User 126506 AUC after training: 0.4222222222222222
User 126506 does not improve AUC. Reverting changes.
Training on augumented user 34909 24/50 current_auc = 0.4444444444444444
User 34909 AUC after training: 0.4222222222222222
User 34909 does not improve AUC. Reverting changes.
Training on augumented user 99532 25/50 current_auc = 0.4444444444444444
User 99532 AUC after training: 0.4444444444444444
User 99532 does not improve AUC. Reverting changes.
Training on augumented user 137938 26/50 current_auc = 0.4444444444444444
User 137938 AUC after training: 0.4444444444444444
User 137938 does not improve AUC. Reverting changes.
Training on augumented user 7722 27/50 current_auc = 0.4444444444444444
User 7722 AUC after training: 0.4444444444444444
User 7722 does not improve AUC. Reverting changes.
Training on augumented user 82448 28/50 current_auc = 0.4444444444444444
User 82448 AUC after training: 0.4222222222222222
User 82448 does not improve AUC. Reverting changes.
Training on augumented user 95255 29/50 current_auc = 0.4444444444444444
User 95255 AUC after training: 0.4222222222222222
User 95255 does not improve AUC. Reverting changes.
Training on augumented user 104745 30/50 current_auc = 0.4444444444444444
User 104745 AUC after training: 0.4444444444444444
User 104745 does not improve AUC. Reverting changes.
Training on augumented user 128361 31/50 current_auc = 0.4444444444444444
User 128361 AUC after training: 0.4444444444444444
User 128361 does not improve AUC. Reverting changes.
Training on augumented user 81096 32/50 current_auc = 0.4444444444444444
User 81096 AUC after training: 0.4222222222222222
User 81096 does not improve AUC. Reverting changes.
Training on augumented user 131998 33/50 current_auc = 0.4444444444444444
User 131998 AUC after training: 0.4444444444444444
User 131998 does not improve AUC. Reverting changes.
Training on augumented user 77731 34/50 current_auc = 0.4444444444444444
User 77731 AUC after training: 0.4222222222222222
User 77731 does not improve AUC. Reverting changes.
Training on augumented user 678 35/50 current_auc = 0.4444444444444444
User 678 AUC after training: 0.4222222222222222
User 678 does not improve AUC. Reverting changes.
Training on augumented user 26621 36/50 current_auc = 0.4444444444444444
User 26621 AUC after training: 0.4
User 26621 does not improve AUC. Reverting changes.
Training on augumented user 45799 37/50 current_auc = 0.4444444444444444
User 45799 AUC after training: 0.4444444444444444
User 45799 does not improve AUC. Reverting changes.
Training on augumented user 14653 38/50 current_auc = 0.4444444444444444
User 14653 AUC after training: 0.4444444444444444
User 14653 does not improve AUC. Reverting changes.
Training on augumented user 102712 39/50 current_auc = 0.4444444444444444
User 102712 AUC after training: 0.4444444444444444
User 102712 does not improve AUC. Reverting changes.
Training on augumented user 76302 40/50 current_auc = 0.4444444444444444
User 76302 AUC after training: 0.4444444444444444
User 76302 does not improve AUC. Reverting changes.
Training on augumented user 95327 41/50 current_auc = 0.4444444444444444
User 95327 AUC after training: 0.4222222222222222
User 95327 does not improve AUC. Reverting changes.
Training on augumented user 60694 42/50 current_auc = 0.4444444444444444
User 60694 AUC after training: 0.4222222222222222
User 60694 does not improve AUC. Reverting changes.
Training on augumented user 67464 43/50 current_auc = 0.4444444444444444
User 67464 AUC after training: 0.4222222222222222
User 67464 does not improve AUC. Reverting changes.
Training on augumented user 65629 44/50 current_auc = 0.4444444444444444
User 65629 AUC after training: 0.4444444444444444
User 65629 does not improve AUC. Reverting changes.
Training on augumented user 110059 45/50 current_auc = 0.4444444444444444
User 110059 AUC after training: 0.4444444444444444
User 110059 does not improve AUC. Reverting changes.
Training on augumented user 21012 46/50 current_auc = 0.4444444444444444
User 21012 AUC after training: 0.4222222222222222
User 21012 does not improve AUC. Reverting changes.
Training on augumented user 87118 47/50 current_auc = 0.4444444444444444
User 87118 AUC after training: 0.4222222222222222
User 87118 does not improve AUC. Reverting changes.
Training on augumented user 136823 48/50 current_auc = 0.4444444444444444
User 136823 AUC after training: 0.4222222222222222
User 136823 does not improve AUC. Reverting changes.
Training on augumented user 58945 49/50 current_auc = 0.4444444444444444
User 58945 AUC after training: 0.4444444444444444
User 58945 does not improve AUC. Reverting changes.
[2024-12-02 19:22:34.255042] start test user 60501 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:34.881244] start test user 60501 190/568 recall augumented users by random, augumented_users = [65473, 44260, 96705, 27935, 120030, 77343, 105760, 38152, 16820, 102927, 86056, 35425, 114638, 33696, 73146, 28488, 127674, 66201, 39716, 44784, 18423, 17379, 48, 45481, 126200, 121287, 58926, 91189, 64230, 18521, 2022, 87108, 18374, 131562, 99157, 73309, 136581, 36211, 102315, 69235, 115891, 89515, 95272, 113916, 135262, 116339, 8210, 46908, 32476, 64780]
[2024-12-02 19:22:34.895850] user = 60501 Cloud 190/568
[2024-12-02 19:22:34.922310] user = 60501 Local 190/568
[2024-12-02 19:22:34.975677] user = 60501 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:37.426792] user = 60501 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7583333333333333
Training on augumented user 65473 0/50 current_auc = 0.7583333333333333
User 65473 AUC after training: 0.7583333333333333
User 65473 does not improve AUC. Reverting changes.
Training on augumented user 44260 1/50 current_auc = 0.7583333333333333
User 44260 AUC after training: 0.7583333333333333
User 44260 does not improve AUC. Reverting changes.
Training on augumented user 96705 2/50 current_auc = 0.7583333333333333
User 96705 AUC after training: 0.7666666666666666
User 96705 improves AUC. Keeping the model.
Training on augumented user 27935 3/50 current_auc = 0.7666666666666666
User 27935 AUC after training: 0.7666666666666666
User 27935 does not improve AUC. Reverting changes.
Training on augumented user 120030 4/50 current_auc = 0.7666666666666666
User 120030 AUC after training: 0.7666666666666666
User 120030 does not improve AUC. Reverting changes.
Training on augumented user 77343 5/50 current_auc = 0.7666666666666666
User 77343 AUC after training: 0.7583333333333333
User 77343 does not improve AUC. Reverting changes.
Training on augumented user 105760 6/50 current_auc = 0.7666666666666666
User 105760 AUC after training: 0.7666666666666666
User 105760 does not improve AUC. Reverting changes.
Training on augumented user 38152 7/50 current_auc = 0.7666666666666666
User 38152 AUC after training: 0.75
User 38152 does not improve AUC. Reverting changes.
Training on augumented user 16820 8/50 current_auc = 0.7666666666666666
User 16820 AUC after training: 0.7666666666666666
User 16820 does not improve AUC. Reverting changes.
Training on augumented user 102927 9/50 current_auc = 0.7666666666666666
User 102927 AUC after training: 0.7666666666666666
User 102927 does not improve AUC. Reverting changes.
Training on augumented user 86056 10/50 current_auc = 0.7666666666666666
User 86056 AUC after training: 0.7666666666666666
User 86056 does not improve AUC. Reverting changes.
Training on augumented user 35425 11/50 current_auc = 0.7666666666666666
User 35425 AUC after training: 0.7583333333333333
User 35425 does not improve AUC. Reverting changes.
Training on augumented user 114638 12/50 current_auc = 0.7666666666666666
User 114638 AUC after training: 0.7666666666666666
User 114638 does not improve AUC. Reverting changes.
Training on augumented user 33696 13/50 current_auc = 0.7666666666666666
User 33696 AUC after training: 0.7666666666666666
User 33696 does not improve AUC. Reverting changes.
Training on augumented user 73146 14/50 current_auc = 0.7666666666666666
User 73146 AUC after training: 0.7666666666666666
User 73146 does not improve AUC. Reverting changes.
Training on augumented user 28488 15/50 current_auc = 0.7666666666666666
User 28488 AUC after training: 0.7666666666666666
User 28488 does not improve AUC. Reverting changes.
Training on augumented user 127674 16/50 current_auc = 0.7666666666666666
User 127674 AUC after training: 0.7666666666666666
User 127674 does not improve AUC. Reverting changes.
Training on augumented user 66201 17/50 current_auc = 0.7666666666666666
User 66201 AUC after training: 0.7583333333333333
User 66201 does not improve AUC. Reverting changes.
Training on augumented user 39716 18/50 current_auc = 0.7666666666666666
User 39716 AUC after training: 0.7666666666666666
User 39716 does not improve AUC. Reverting changes.
Training on augumented user 44784 19/50 current_auc = 0.7666666666666666
User 44784 AUC after training: 0.7583333333333333
User 44784 does not improve AUC. Reverting changes.
Training on augumented user 18423 20/50 current_auc = 0.7666666666666666
User 18423 AUC after training: 0.7666666666666666
User 18423 does not improve AUC. Reverting changes.
Training on augumented user 17379 21/50 current_auc = 0.7666666666666666
User 17379 AUC after training: 0.7666666666666666
User 17379 does not improve AUC. Reverting changes.
Training on augumented user 48 22/50 current_auc = 0.7666666666666666
User 48 AUC after training: 0.7666666666666666
User 48 does not improve AUC. Reverting changes.
Training on augumented user 45481 23/50 current_auc = 0.7666666666666666
User 45481 AUC after training: 0.7583333333333333
User 45481 does not improve AUC. Reverting changes.
Training on augumented user 126200 24/50 current_auc = 0.7666666666666666
User 126200 AUC after training: 0.7666666666666666
User 126200 does not improve AUC. Reverting changes.
Training on augumented user 121287 25/50 current_auc = 0.7666666666666666
User 121287 AUC after training: 0.7666666666666666
User 121287 does not improve AUC. Reverting changes.
Training on augumented user 58926 26/50 current_auc = 0.7666666666666666
User 58926 AUC after training: 0.7666666666666666
User 58926 does not improve AUC. Reverting changes.
Training on augumented user 91189 27/50 current_auc = 0.7666666666666666
User 91189 AUC after training: 0.7666666666666666
User 91189 does not improve AUC. Reverting changes.
Training on augumented user 64230 28/50 current_auc = 0.7666666666666666
User 64230 AUC after training: 0.7666666666666666
User 64230 does not improve AUC. Reverting changes.
Training on augumented user 18521 29/50 current_auc = 0.7666666666666666
User 18521 AUC after training: 0.7583333333333333
User 18521 does not improve AUC. Reverting changes.
Training on augumented user 2022 30/50 current_auc = 0.7666666666666666
User 2022 AUC after training: 0.7666666666666666
User 2022 does not improve AUC. Reverting changes.
Training on augumented user 87108 31/50 current_auc = 0.7666666666666666
User 87108 AUC after training: 0.7666666666666666
User 87108 does not improve AUC. Reverting changes.
Training on augumented user 18374 32/50 current_auc = 0.7666666666666666
User 18374 AUC after training: 0.7666666666666666
User 18374 does not improve AUC. Reverting changes.
Training on augumented user 131562 33/50 current_auc = 0.7666666666666666
User 131562 AUC after training: 0.7666666666666666
User 131562 does not improve AUC. Reverting changes.
Training on augumented user 99157 34/50 current_auc = 0.7666666666666666
User 99157 AUC after training: 0.7666666666666666
User 99157 does not improve AUC. Reverting changes.
Training on augumented user 73309 35/50 current_auc = 0.7666666666666666
User 73309 AUC after training: 0.7666666666666666
User 73309 does not improve AUC. Reverting changes.
Training on augumented user 136581 36/50 current_auc = 0.7666666666666666
User 136581 AUC after training: 0.7666666666666666
User 136581 does not improve AUC. Reverting changes.
Training on augumented user 36211 37/50 current_auc = 0.7666666666666666
User 36211 AUC after training: 0.7666666666666666
User 36211 does not improve AUC. Reverting changes.
Training on augumented user 102315 38/50 current_auc = 0.7666666666666666
User 102315 AUC after training: 0.7666666666666666
User 102315 does not improve AUC. Reverting changes.
Training on augumented user 69235 39/50 current_auc = 0.7666666666666666
User 69235 AUC after training: 0.7666666666666666
User 69235 does not improve AUC. Reverting changes.
Training on augumented user 115891 40/50 current_auc = 0.7666666666666666
User 115891 AUC after training: 0.7583333333333333
User 115891 does not improve AUC. Reverting changes.
Training on augumented user 89515 41/50 current_auc = 0.7666666666666666
User 89515 AUC after training: 0.7583333333333333
User 89515 does not improve AUC. Reverting changes.
Training on augumented user 95272 42/50 current_auc = 0.7666666666666666
User 95272 AUC after training: 0.7666666666666666
User 95272 does not improve AUC. Reverting changes.
Training on augumented user 113916 43/50 current_auc = 0.7666666666666666
User 113916 AUC after training: 0.7666666666666666
User 113916 does not improve AUC. Reverting changes.
Training on augumented user 135262 44/50 current_auc = 0.7666666666666666
User 135262 AUC after training: 0.7666666666666666
User 135262 does not improve AUC. Reverting changes.
Training on augumented user 116339 45/50 current_auc = 0.7666666666666666
User 116339 AUC after training: 0.7666666666666666
User 116339 does not improve AUC. Reverting changes.
Training on augumented user 8210 46/50 current_auc = 0.7666666666666666
User 8210 AUC after training: 0.7666666666666666
User 8210 does not improve AUC. Reverting changes.
Training on augumented user 46908 47/50 current_auc = 0.7666666666666666
User 46908 AUC after training: 0.7666666666666666
User 46908 does not improve AUC. Reverting changes.
Training on augumented user 32476 48/50 current_auc = 0.7666666666666666
User 32476 AUC after training: 0.7666666666666666
User 32476 does not improve AUC. Reverting changes.
Training on augumented user 64780 49/50 current_auc = 0.7666666666666666
User 64780 AUC after training: 0.7666666666666666
User 64780 does not improve AUC. Reverting changes.
[2024-12-02 19:23:05.077665] start test user 60510 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:05.488290] start test user 60510 191/568 recall augumented users by random, augumented_users = [17262, 90047, 88722, 74501, 50341, 46746, 36513, 4194, 93941, 113687, 49316, 98818, 134385, 125313, 38740, 130936, 110527, 92418, 135856, 102679, 6334, 128676, 8591, 45918, 102561, 79515, 106518, 122577, 61075, 6502, 32474, 16416, 98102, 4159, 88475, 98406, 67417, 36265, 67195, 117082, 20764, 14093, 47749, 84730, 89610, 43553, 39761, 83651, 28411, 96178]
[2024-12-02 19:23:05.503489] user = 60510 Cloud 191/568
[2024-12-02 19:23:05.523765] user = 60510 Local 191/568
[2024-12-02 19:23:05.590306] user = 60510 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:07.978398] user = 60510 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 17262 0/50 current_auc = 1.0
User 17262 AUC after training: 1.0
User 17262 does not improve AUC. Reverting changes.
Training on augumented user 90047 1/50 current_auc = 1.0
User 90047 AUC after training: 1.0
User 90047 does not improve AUC. Reverting changes.
Training on augumented user 88722 2/50 current_auc = 1.0
User 88722 AUC after training: 1.0
User 88722 does not improve AUC. Reverting changes.
Training on augumented user 74501 3/50 current_auc = 1.0
User 74501 AUC after training: 1.0
User 74501 does not improve AUC. Reverting changes.
Training on augumented user 50341 4/50 current_auc = 1.0
User 50341 AUC after training: 1.0
User 50341 does not improve AUC. Reverting changes.
Training on augumented user 46746 5/50 current_auc = 1.0
User 46746 AUC after training: 1.0
User 46746 does not improve AUC. Reverting changes.
Training on augumented user 36513 6/50 current_auc = 1.0
User 36513 AUC after training: 1.0
User 36513 does not improve AUC. Reverting changes.
Training on augumented user 4194 7/50 current_auc = 1.0
User 4194 AUC after training: 1.0
User 4194 does not improve AUC. Reverting changes.
Training on augumented user 93941 8/50 current_auc = 1.0
User 93941 AUC after training: 1.0
User 93941 does not improve AUC. Reverting changes.
Training on augumented user 113687 9/50 current_auc = 1.0
User 113687 AUC after training: 1.0
User 113687 does not improve AUC. Reverting changes.
Training on augumented user 49316 10/50 current_auc = 1.0
User 49316 AUC after training: 1.0
User 49316 does not improve AUC. Reverting changes.
Training on augumented user 98818 11/50 current_auc = 1.0
User 98818 AUC after training: 1.0
User 98818 does not improve AUC. Reverting changes.
Training on augumented user 134385 12/50 current_auc = 1.0
User 134385 AUC after training: 1.0
User 134385 does not improve AUC. Reverting changes.
Training on augumented user 125313 13/50 current_auc = 1.0
User 125313 AUC after training: 1.0
User 125313 does not improve AUC. Reverting changes.
Training on augumented user 38740 14/50 current_auc = 1.0
User 38740 AUC after training: 1.0
User 38740 does not improve AUC. Reverting changes.
Training on augumented user 130936 15/50 current_auc = 1.0
User 130936 AUC after training: 1.0
User 130936 does not improve AUC. Reverting changes.
Training on augumented user 110527 16/50 current_auc = 1.0
User 110527 AUC after training: 1.0
User 110527 does not improve AUC. Reverting changes.
Training on augumented user 92418 17/50 current_auc = 1.0
User 92418 AUC after training: 1.0
User 92418 does not improve AUC. Reverting changes.
Training on augumented user 135856 18/50 current_auc = 1.0
User 135856 AUC after training: 1.0
User 135856 does not improve AUC. Reverting changes.
Training on augumented user 102679 19/50 current_auc = 1.0
User 102679 AUC after training: 1.0
User 102679 does not improve AUC. Reverting changes.
Training on augumented user 6334 20/50 current_auc = 1.0
User 6334 AUC after training: 1.0
User 6334 does not improve AUC. Reverting changes.
Training on augumented user 128676 21/50 current_auc = 1.0
User 128676 AUC after training: 1.0
User 128676 does not improve AUC. Reverting changes.
Training on augumented user 8591 22/50 current_auc = 1.0
User 8591 AUC after training: 1.0
User 8591 does not improve AUC. Reverting changes.
Training on augumented user 45918 23/50 current_auc = 1.0
User 45918 AUC after training: 1.0
User 45918 does not improve AUC. Reverting changes.
Training on augumented user 102561 24/50 current_auc = 1.0
User 102561 AUC after training: 1.0
User 102561 does not improve AUC. Reverting changes.
Training on augumented user 79515 25/50 current_auc = 1.0
User 79515 AUC after training: 1.0
User 79515 does not improve AUC. Reverting changes.
Training on augumented user 106518 26/50 current_auc = 1.0
User 106518 AUC after training: 1.0
User 106518 does not improve AUC. Reverting changes.
Training on augumented user 122577 27/50 current_auc = 1.0
User 122577 AUC after training: 1.0
User 122577 does not improve AUC. Reverting changes.
Training on augumented user 61075 28/50 current_auc = 1.0
User 61075 AUC after training: 1.0
User 61075 does not improve AUC. Reverting changes.
Training on augumented user 6502 29/50 current_auc = 1.0
User 6502 AUC after training: 1.0
User 6502 does not improve AUC. Reverting changes.
Training on augumented user 32474 30/50 current_auc = 1.0
User 32474 AUC after training: 1.0
User 32474 does not improve AUC. Reverting changes.
Training on augumented user 16416 31/50 current_auc = 1.0
User 16416 AUC after training: 1.0
User 16416 does not improve AUC. Reverting changes.
Training on augumented user 98102 32/50 current_auc = 1.0
User 98102 AUC after training: 1.0
User 98102 does not improve AUC. Reverting changes.
Training on augumented user 4159 33/50 current_auc = 1.0
User 4159 AUC after training: 1.0
User 4159 does not improve AUC. Reverting changes.
Training on augumented user 88475 34/50 current_auc = 1.0
User 88475 AUC after training: 1.0
User 88475 does not improve AUC. Reverting changes.
Training on augumented user 98406 35/50 current_auc = 1.0
User 98406 AUC after training: 1.0
User 98406 does not improve AUC. Reverting changes.
Training on augumented user 67417 36/50 current_auc = 1.0
User 67417 AUC after training: 1.0
User 67417 does not improve AUC. Reverting changes.
Training on augumented user 36265 37/50 current_auc = 1.0
User 36265 AUC after training: 1.0
User 36265 does not improve AUC. Reverting changes.
Training on augumented user 67195 38/50 current_auc = 1.0
User 67195 AUC after training: 1.0
User 67195 does not improve AUC. Reverting changes.
Training on augumented user 117082 39/50 current_auc = 1.0
User 117082 AUC after training: 1.0
User 117082 does not improve AUC. Reverting changes.
Training on augumented user 20764 40/50 current_auc = 1.0
User 20764 AUC after training: 1.0
User 20764 does not improve AUC. Reverting changes.
Training on augumented user 14093 41/50 current_auc = 1.0
User 14093 AUC after training: 1.0
User 14093 does not improve AUC. Reverting changes.
Training on augumented user 47749 42/50 current_auc = 1.0
User 47749 AUC after training: 1.0
User 47749 does not improve AUC. Reverting changes.
Training on augumented user 84730 43/50 current_auc = 1.0
User 84730 AUC after training: 1.0
User 84730 does not improve AUC. Reverting changes.
Training on augumented user 89610 44/50 current_auc = 1.0
User 89610 AUC after training: 1.0
User 89610 does not improve AUC. Reverting changes.
Training on augumented user 43553 45/50 current_auc = 1.0
User 43553 AUC after training: 1.0
User 43553 does not improve AUC. Reverting changes.
Training on augumented user 39761 46/50 current_auc = 1.0
User 39761 AUC after training: 1.0
User 39761 does not improve AUC. Reverting changes.
Training on augumented user 83651 47/50 current_auc = 1.0
User 83651 AUC after training: 1.0
User 83651 does not improve AUC. Reverting changes.
Training on augumented user 28411 48/50 current_auc = 1.0
User 28411 AUC after training: 1.0
User 28411 does not improve AUC. Reverting changes.
Training on augumented user 96178 49/50 current_auc = 1.0
User 96178 AUC after training: 1.0
User 96178 does not improve AUC. Reverting changes.
[2024-12-02 19:23:33.829491] start test user 60519 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:34.504277] start test user 60519 192/568 recall augumented users by random, augumented_users = [3185, 62101, 66679, 127235, 66196, 84295, 1537, 1670, 108910, 45202, 73587, 19878, 38152, 90598, 127103, 53702, 72057, 31943, 132636, 6407, 65995, 27785, 100138, 106040, 81788, 22467, 82077, 66579, 55346, 49551, 34090, 113550, 100896, 29165, 20840, 16754, 91138, 20312, 1392, 32384, 101698, 27933, 80625, 34392, 38102, 94908, 16768, 90201, 18199, 20962]
[2024-12-02 19:23:34.518774] user = 60519 Cloud 192/568
[2024-12-02 19:23:34.534325] user = 60519 Local 192/568
[2024-12-02 19:23:34.654880] user = 60519 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:37.432154] user = 60519 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.861111111111111
Training on augumented user 3185 0/50 current_auc = 0.861111111111111
User 3185 AUC after training: 0.861111111111111
User 3185 does not improve AUC. Reverting changes.
Training on augumented user 62101 1/50 current_auc = 0.861111111111111
User 62101 AUC after training: 0.861111111111111
User 62101 does not improve AUC. Reverting changes.
Training on augumented user 66679 2/50 current_auc = 0.861111111111111
User 66679 AUC after training: 0.861111111111111
User 66679 does not improve AUC. Reverting changes.
Training on augumented user 127235 3/50 current_auc = 0.861111111111111
User 127235 AUC after training: 0.861111111111111
User 127235 does not improve AUC. Reverting changes.
Training on augumented user 66196 4/50 current_auc = 0.861111111111111
User 66196 AUC after training: 0.861111111111111
User 66196 does not improve AUC. Reverting changes.
Training on augumented user 84295 5/50 current_auc = 0.861111111111111
User 84295 AUC after training: 0.861111111111111
User 84295 does not improve AUC. Reverting changes.
Training on augumented user 1537 6/50 current_auc = 0.861111111111111
User 1537 AUC after training: 0.861111111111111
User 1537 does not improve AUC. Reverting changes.
Training on augumented user 1670 7/50 current_auc = 0.861111111111111
User 1670 AUC after training: 0.861111111111111
User 1670 does not improve AUC. Reverting changes.
Training on augumented user 108910 8/50 current_auc = 0.861111111111111
User 108910 AUC after training: 0.861111111111111
User 108910 does not improve AUC. Reverting changes.
Training on augumented user 45202 9/50 current_auc = 0.861111111111111
User 45202 AUC after training: 0.861111111111111
User 45202 does not improve AUC. Reverting changes.
Training on augumented user 73587 10/50 current_auc = 0.861111111111111
User 73587 AUC after training: 0.861111111111111
User 73587 does not improve AUC. Reverting changes.
Training on augumented user 19878 11/50 current_auc = 0.861111111111111
User 19878 AUC after training: 0.861111111111111
User 19878 does not improve AUC. Reverting changes.
Training on augumented user 38152 12/50 current_auc = 0.861111111111111
User 38152 AUC after training: 0.861111111111111
User 38152 does not improve AUC. Reverting changes.
Training on augumented user 90598 13/50 current_auc = 0.861111111111111
User 90598 AUC after training: 0.861111111111111
User 90598 does not improve AUC. Reverting changes.
Training on augumented user 127103 14/50 current_auc = 0.861111111111111
User 127103 AUC after training: 0.861111111111111
User 127103 does not improve AUC. Reverting changes.
Training on augumented user 53702 15/50 current_auc = 0.861111111111111
User 53702 AUC after training: 0.861111111111111
User 53702 does not improve AUC. Reverting changes.
Training on augumented user 72057 16/50 current_auc = 0.861111111111111
User 72057 AUC after training: 0.861111111111111
User 72057 does not improve AUC. Reverting changes.
Training on augumented user 31943 17/50 current_auc = 0.861111111111111
User 31943 AUC after training: 0.861111111111111
User 31943 does not improve AUC. Reverting changes.
Training on augumented user 132636 18/50 current_auc = 0.861111111111111
User 132636 AUC after training: 0.861111111111111
User 132636 does not improve AUC. Reverting changes.
Training on augumented user 6407 19/50 current_auc = 0.861111111111111
User 6407 AUC after training: 0.861111111111111
User 6407 does not improve AUC. Reverting changes.
Training on augumented user 65995 20/50 current_auc = 0.861111111111111
User 65995 AUC after training: 0.861111111111111
User 65995 does not improve AUC. Reverting changes.
Training on augumented user 27785 21/50 current_auc = 0.861111111111111
User 27785 AUC after training: 0.861111111111111
User 27785 does not improve AUC. Reverting changes.
Training on augumented user 100138 22/50 current_auc = 0.861111111111111
User 100138 AUC after training: 0.861111111111111
User 100138 does not improve AUC. Reverting changes.
Training on augumented user 106040 23/50 current_auc = 0.861111111111111
User 106040 AUC after training: 0.861111111111111
User 106040 does not improve AUC. Reverting changes.
Training on augumented user 81788 24/50 current_auc = 0.861111111111111
User 81788 AUC after training: 0.861111111111111
User 81788 does not improve AUC. Reverting changes.
Training on augumented user 22467 25/50 current_auc = 0.861111111111111
User 22467 AUC after training: 0.861111111111111
User 22467 does not improve AUC. Reverting changes.
Training on augumented user 82077 26/50 current_auc = 0.861111111111111
User 82077 AUC after training: 0.861111111111111
User 82077 does not improve AUC. Reverting changes.
Training on augumented user 66579 27/50 current_auc = 0.861111111111111
User 66579 AUC after training: 0.861111111111111
User 66579 does not improve AUC. Reverting changes.
Training on augumented user 55346 28/50 current_auc = 0.861111111111111
User 55346 AUC after training: 0.861111111111111
User 55346 does not improve AUC. Reverting changes.
Training on augumented user 49551 29/50 current_auc = 0.861111111111111
User 49551 AUC after training: 0.861111111111111
User 49551 does not improve AUC. Reverting changes.
Training on augumented user 34090 30/50 current_auc = 0.861111111111111
User 34090 AUC after training: 0.861111111111111
User 34090 does not improve AUC. Reverting changes.
Training on augumented user 113550 31/50 current_auc = 0.861111111111111
User 113550 AUC after training: 0.861111111111111
User 113550 does not improve AUC. Reverting changes.
Training on augumented user 100896 32/50 current_auc = 0.861111111111111
User 100896 AUC after training: 0.861111111111111
User 100896 does not improve AUC. Reverting changes.
Training on augumented user 29165 33/50 current_auc = 0.861111111111111
User 29165 AUC after training: 0.861111111111111
User 29165 does not improve AUC. Reverting changes.
Training on augumented user 20840 34/50 current_auc = 0.861111111111111
User 20840 AUC after training: 0.861111111111111
User 20840 does not improve AUC. Reverting changes.
Training on augumented user 16754 35/50 current_auc = 0.861111111111111
User 16754 AUC after training: 0.861111111111111
User 16754 does not improve AUC. Reverting changes.
Training on augumented user 91138 36/50 current_auc = 0.861111111111111
User 91138 AUC after training: 0.861111111111111
User 91138 does not improve AUC. Reverting changes.
Training on augumented user 20312 37/50 current_auc = 0.861111111111111
User 20312 AUC after training: 0.861111111111111
User 20312 does not improve AUC. Reverting changes.
Training on augumented user 1392 38/50 current_auc = 0.861111111111111
User 1392 AUC after training: 0.861111111111111
User 1392 does not improve AUC. Reverting changes.
Training on augumented user 32384 39/50 current_auc = 0.861111111111111
User 32384 AUC after training: 0.861111111111111
User 32384 does not improve AUC. Reverting changes.
Training on augumented user 101698 40/50 current_auc = 0.861111111111111
User 101698 AUC after training: 0.861111111111111
User 101698 does not improve AUC. Reverting changes.
Training on augumented user 27933 41/50 current_auc = 0.861111111111111
User 27933 AUC after training: 0.861111111111111
User 27933 does not improve AUC. Reverting changes.
Training on augumented user 80625 42/50 current_auc = 0.861111111111111
User 80625 AUC after training: 0.861111111111111
User 80625 does not improve AUC. Reverting changes.
Training on augumented user 34392 43/50 current_auc = 0.861111111111111
User 34392 AUC after training: 0.861111111111111
User 34392 does not improve AUC. Reverting changes.
Training on augumented user 38102 44/50 current_auc = 0.861111111111111
User 38102 AUC after training: 0.861111111111111
User 38102 does not improve AUC. Reverting changes.
Training on augumented user 94908 45/50 current_auc = 0.861111111111111
User 94908 AUC after training: 0.861111111111111
User 94908 does not improve AUC. Reverting changes.
Training on augumented user 16768 46/50 current_auc = 0.861111111111111
User 16768 AUC after training: 0.861111111111111
User 16768 does not improve AUC. Reverting changes.
Training on augumented user 90201 47/50 current_auc = 0.861111111111111
User 90201 AUC after training: 0.861111111111111
User 90201 does not improve AUC. Reverting changes.
Training on augumented user 18199 48/50 current_auc = 0.861111111111111
User 18199 AUC after training: 0.861111111111111
User 18199 does not improve AUC. Reverting changes.
Training on augumented user 20962 49/50 current_auc = 0.861111111111111
User 20962 AUC after training: 0.861111111111111
User 20962 does not improve AUC. Reverting changes.
[2024-12-02 19:24:04.911728] start test user 60533 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:05.329948] start test user 60533 193/568 recall augumented users by random, augumented_users = [25618, 4952, 28926, 3225, 72646, 47536, 116792, 44217, 19704, 85051, 53898, 100919, 30161, 57061, 36436, 73545, 137822, 30834, 41376, 122336, 23235, 62052, 99213, 9211, 98025, 9120, 30071, 19537, 133456, 15073, 40073, 1221, 10897, 63920, 13287, 104337, 64305, 23924, 138483, 64907, 91393, 18054, 66841, 77181, 41420, 93952, 49193, 88498, 9035, 68229]
[2024-12-02 19:24:05.345805] user = 60533 Cloud 193/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:05.352204] user = 60533 Local 193/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:05.412730] user = 60533 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:07.403756] user = 60533 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 25618 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25618 AUC after training: 0.5
User 25618 does not improve AUC. Reverting changes.
Training on augumented user 4952 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4952 AUC after training: 0.5
User 4952 does not improve AUC. Reverting changes.
Training on augumented user 28926 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28926 AUC after training: 0.5
User 28926 does not improve AUC. Reverting changes.
Training on augumented user 3225 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3225 AUC after training: 0.5
User 3225 does not improve AUC. Reverting changes.
Training on augumented user 72646 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72646 AUC after training: 0.5
User 72646 does not improve AUC. Reverting changes.
Training on augumented user 47536 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47536 AUC after training: 0.5
User 47536 does not improve AUC. Reverting changes.
Training on augumented user 116792 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116792 AUC after training: 0.5
User 116792 does not improve AUC. Reverting changes.
Training on augumented user 44217 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44217 AUC after training: 0.5
User 44217 does not improve AUC. Reverting changes.
Training on augumented user 19704 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19704 AUC after training: 0.5
User 19704 does not improve AUC. Reverting changes.
Training on augumented user 85051 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85051 AUC after training: 0.5
User 85051 does not improve AUC. Reverting changes.
Training on augumented user 53898 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53898 AUC after training: 0.5
User 53898 does not improve AUC. Reverting changes.
Training on augumented user 100919 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100919 AUC after training: 0.5
User 100919 does not improve AUC. Reverting changes.
Training on augumented user 30161 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30161 AUC after training: 0.5
User 30161 does not improve AUC. Reverting changes.
Training on augumented user 57061 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57061 AUC after training: 0.5
User 57061 does not improve AUC. Reverting changes.
Training on augumented user 36436 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36436 AUC after training: 0.5
User 36436 does not improve AUC. Reverting changes.
Training on augumented user 73545 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73545 AUC after training: 0.5
User 73545 does not improve AUC. Reverting changes.
Training on augumented user 137822 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137822 AUC after training: 0.5
User 137822 does not improve AUC. Reverting changes.
Training on augumented user 30834 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30834 AUC after training: 0.5
User 30834 does not improve AUC. Reverting changes.
Training on augumented user 41376 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41376 AUC after training: 0.5
User 41376 does not improve AUC. Reverting changes.
Training on augumented user 122336 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122336 AUC after training: 0.5
User 122336 does not improve AUC. Reverting changes.
Training on augumented user 23235 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23235 AUC after training: 0.5
User 23235 does not improve AUC. Reverting changes.
Training on augumented user 62052 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62052 AUC after training: 0.5
User 62052 does not improve AUC. Reverting changes.
Training on augumented user 99213 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99213 AUC after training: 0.5
User 99213 does not improve AUC. Reverting changes.
Training on augumented user 9211 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9211 AUC after training: 0.5
User 9211 does not improve AUC. Reverting changes.
Training on augumented user 98025 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98025 AUC after training: 0.5
User 98025 does not improve AUC. Reverting changes.
Training on augumented user 9120 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9120 AUC after training: 0.5
User 9120 does not improve AUC. Reverting changes.
Training on augumented user 30071 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30071 AUC after training: 0.5
User 30071 does not improve AUC. Reverting changes.
Training on augumented user 19537 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19537 AUC after training: 0.5
User 19537 does not improve AUC. Reverting changes.
Training on augumented user 133456 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133456 AUC after training: 0.5
User 133456 does not improve AUC. Reverting changes.
Training on augumented user 15073 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15073 AUC after training: 0.5
User 15073 does not improve AUC. Reverting changes.
Training on augumented user 40073 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40073 AUC after training: 0.5
User 40073 does not improve AUC. Reverting changes.
Training on augumented user 1221 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1221 AUC after training: 0.5
User 1221 does not improve AUC. Reverting changes.
Training on augumented user 10897 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10897 AUC after training: 0.5
User 10897 does not improve AUC. Reverting changes.
Training on augumented user 63920 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63920 AUC after training: 0.5
User 63920 does not improve AUC. Reverting changes.
Training on augumented user 13287 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13287 AUC after training: 0.5
User 13287 does not improve AUC. Reverting changes.
Training on augumented user 104337 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104337 AUC after training: 0.5
User 104337 does not improve AUC. Reverting changes.
Training on augumented user 64305 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64305 AUC after training: 0.5
User 64305 does not improve AUC. Reverting changes.
Training on augumented user 23924 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23924 AUC after training: 0.5
User 23924 does not improve AUC. Reverting changes.
Training on augumented user 138483 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138483 AUC after training: 0.5
User 138483 does not improve AUC. Reverting changes.
Training on augumented user 64907 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64907 AUC after training: 0.5
User 64907 does not improve AUC. Reverting changes.
Training on augumented user 91393 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91393 AUC after training: 0.5
User 91393 does not improve AUC. Reverting changes.
Training on augumented user 18054 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18054 AUC after training: 0.5
User 18054 does not improve AUC. Reverting changes.
Training on augumented user 66841 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66841 AUC after training: 0.5
User 66841 does not improve AUC. Reverting changes.
Training on augumented user 77181 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77181 AUC after training: 0.5
User 77181 does not improve AUC. Reverting changes.
Training on augumented user 41420 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41420 AUC after training: 0.5
User 41420 does not improve AUC. Reverting changes.
Training on augumented user 93952 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93952 AUC after training: 0.5
User 93952 does not improve AUC. Reverting changes.
Training on augumented user 49193 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49193 AUC after training: 0.5
User 49193 does not improve AUC. Reverting changes.
Training on augumented user 88498 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88498 AUC after training: 0.5
User 88498 does not improve AUC. Reverting changes.
Training on augumented user 9035 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9035 AUC after training: 0.5
User 9035 does not improve AUC. Reverting changes.
Training on augumented user 68229 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68229 AUC after training: 0.5
User 68229 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:35.654594] start test user 60562 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:36.192245] start test user 60562 194/568 recall augumented users by random, augumented_users = [34421, 39113, 43966, 683, 118152, 27602, 5450, 37404, 4175, 4951, 12827, 38507, 51412, 2703, 37610, 71374, 12568, 59612, 53500, 89562, 59607, 137694, 101472, 109229, 87733, 61593, 4806, 6826, 62587, 51440, 112298, 11218, 1412, 14765, 36060, 61878, 57233, 39166, 20993, 31889, 61695, 132103, 4460, 63301, 84236, 125495, 119787, 60550, 13361, 25132]
[2024-12-02 19:24:36.207442] user = 60562 Cloud 194/568
[2024-12-02 19:24:36.221215] user = 60562 Local 194/568
[2024-12-02 19:24:36.331393] user = 60562 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:38.876386] user = 60562 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5302066772655007
Training on augumented user 34421 0/50 current_auc = 0.5302066772655007
User 34421 AUC after training: 0.5310015898251192
User 34421 improves AUC. Keeping the model.
Training on augumented user 39113 1/50 current_auc = 0.5310015898251192
User 39113 AUC after training: 0.5317965023847376
User 39113 improves AUC. Keeping the model.
Training on augumented user 43966 2/50 current_auc = 0.5317965023847376
User 43966 AUC after training: 0.5333863275039745
User 43966 improves AUC. Keeping the model.
Training on augumented user 683 3/50 current_auc = 0.5333863275039745
User 683 AUC after training: 0.5333863275039745
User 683 does not improve AUC. Reverting changes.
Training on augumented user 118152 4/50 current_auc = 0.5333863275039745
User 118152 AUC after training: 0.5317965023847376
User 118152 does not improve AUC. Reverting changes.
Training on augumented user 27602 5/50 current_auc = 0.5333863275039745
User 27602 AUC after training: 0.5325914149443561
User 27602 does not improve AUC. Reverting changes.
Training on augumented user 5450 6/50 current_auc = 0.5333863275039745
User 5450 AUC after training: 0.5333863275039745
User 5450 does not improve AUC. Reverting changes.
Training on augumented user 37404 7/50 current_auc = 0.5333863275039745
User 37404 AUC after training: 0.5325914149443561
User 37404 does not improve AUC. Reverting changes.
Training on augumented user 4175 8/50 current_auc = 0.5333863275039745
User 4175 AUC after training: 0.5317965023847376
User 4175 does not improve AUC. Reverting changes.
Training on augumented user 4951 9/50 current_auc = 0.5333863275039745
User 4951 AUC after training: 0.5325914149443561
User 4951 does not improve AUC. Reverting changes.
Training on augumented user 12827 10/50 current_auc = 0.5333863275039745
User 12827 AUC after training: 0.5325914149443561
User 12827 does not improve AUC. Reverting changes.
Training on augumented user 38507 11/50 current_auc = 0.5333863275039745
User 38507 AUC after training: 0.5310015898251192
User 38507 does not improve AUC. Reverting changes.
Training on augumented user 51412 12/50 current_auc = 0.5333863275039745
User 51412 AUC after training: 0.5325914149443561
User 51412 does not improve AUC. Reverting changes.
Training on augumented user 2703 13/50 current_auc = 0.5333863275039745
User 2703 AUC after training: 0.5325914149443561
User 2703 does not improve AUC. Reverting changes.
Training on augumented user 37610 14/50 current_auc = 0.5333863275039745
User 37610 AUC after training: 0.534181240063593
User 37610 improves AUC. Keeping the model.
Training on augumented user 71374 15/50 current_auc = 0.534181240063593
User 71374 AUC after training: 0.5325914149443561
User 71374 does not improve AUC. Reverting changes.
Training on augumented user 12568 16/50 current_auc = 0.534181240063593
User 12568 AUC after training: 0.5325914149443561
User 12568 does not improve AUC. Reverting changes.
Training on augumented user 59612 17/50 current_auc = 0.534181240063593
User 59612 AUC after training: 0.5325914149443561
User 59612 does not improve AUC. Reverting changes.
Training on augumented user 53500 18/50 current_auc = 0.534181240063593
User 53500 AUC after training: 0.5325914149443561
User 53500 does not improve AUC. Reverting changes.
Training on augumented user 89562 19/50 current_auc = 0.534181240063593
User 89562 AUC after training: 0.5302066772655007
User 89562 does not improve AUC. Reverting changes.
Training on augumented user 59607 20/50 current_auc = 0.534181240063593
User 59607 AUC after training: 0.534181240063593
User 59607 does not improve AUC. Reverting changes.
Training on augumented user 137694 21/50 current_auc = 0.534181240063593
User 137694 AUC after training: 0.5333863275039745
User 137694 does not improve AUC. Reverting changes.
Training on augumented user 101472 22/50 current_auc = 0.534181240063593
User 101472 AUC after training: 0.5325914149443561
User 101472 does not improve AUC. Reverting changes.
Training on augumented user 109229 23/50 current_auc = 0.534181240063593
User 109229 AUC after training: 0.5333863275039745
User 109229 does not improve AUC. Reverting changes.
Training on augumented user 87733 24/50 current_auc = 0.534181240063593
User 87733 AUC after training: 0.5325914149443561
User 87733 does not improve AUC. Reverting changes.
Training on augumented user 61593 25/50 current_auc = 0.534181240063593
User 61593 AUC after training: 0.534181240063593
User 61593 does not improve AUC. Reverting changes.
Training on augumented user 4806 26/50 current_auc = 0.534181240063593
User 4806 AUC after training: 0.5333863275039745
User 4806 does not improve AUC. Reverting changes.
Training on augumented user 6826 27/50 current_auc = 0.534181240063593
User 6826 AUC after training: 0.534181240063593
User 6826 does not improve AUC. Reverting changes.
Training on augumented user 62587 28/50 current_auc = 0.534181240063593
User 62587 AUC after training: 0.5317965023847376
User 62587 does not improve AUC. Reverting changes.
Training on augumented user 51440 29/50 current_auc = 0.534181240063593
User 51440 AUC after training: 0.5325914149443561
User 51440 does not improve AUC. Reverting changes.
Training on augumented user 112298 30/50 current_auc = 0.534181240063593
User 112298 AUC after training: 0.534181240063593
User 112298 does not improve AUC. Reverting changes.
Training on augumented user 11218 31/50 current_auc = 0.534181240063593
User 11218 AUC after training: 0.5325914149443561
User 11218 does not improve AUC. Reverting changes.
Training on augumented user 1412 32/50 current_auc = 0.534181240063593
User 1412 AUC after training: 0.5325914149443561
User 1412 does not improve AUC. Reverting changes.
Training on augumented user 14765 33/50 current_auc = 0.534181240063593
User 14765 AUC after training: 0.534181240063593
User 14765 does not improve AUC. Reverting changes.
Training on augumented user 36060 34/50 current_auc = 0.534181240063593
User 36060 AUC after training: 0.534181240063593
User 36060 does not improve AUC. Reverting changes.
Training on augumented user 61878 35/50 current_auc = 0.534181240063593
User 61878 AUC after training: 0.5325914149443561
User 61878 does not improve AUC. Reverting changes.
Training on augumented user 57233 36/50 current_auc = 0.534181240063593
User 57233 AUC after training: 0.534181240063593
User 57233 does not improve AUC. Reverting changes.
Training on augumented user 39166 37/50 current_auc = 0.534181240063593
User 39166 AUC after training: 0.5333863275039745
User 39166 does not improve AUC. Reverting changes.
Training on augumented user 20993 38/50 current_auc = 0.534181240063593
User 20993 AUC after training: 0.5349761526232114
User 20993 improves AUC. Keeping the model.
Training on augumented user 31889 39/50 current_auc = 0.5349761526232114
User 31889 AUC after training: 0.5349761526232114
User 31889 does not improve AUC. Reverting changes.
Training on augumented user 61695 40/50 current_auc = 0.5349761526232114
User 61695 AUC after training: 0.534181240063593
User 61695 does not improve AUC. Reverting changes.
Training on augumented user 132103 41/50 current_auc = 0.5349761526232114
User 132103 AUC after training: 0.5349761526232114
User 132103 does not improve AUC. Reverting changes.
Training on augumented user 4460 42/50 current_auc = 0.5349761526232114
User 4460 AUC after training: 0.5349761526232114
User 4460 does not improve AUC. Reverting changes.
Training on augumented user 63301 43/50 current_auc = 0.5349761526232114
User 63301 AUC after training: 0.5349761526232114
User 63301 does not improve AUC. Reverting changes.
Training on augumented user 84236 44/50 current_auc = 0.5349761526232114
User 84236 AUC after training: 0.5349761526232114
User 84236 does not improve AUC. Reverting changes.
Training on augumented user 125495 45/50 current_auc = 0.5349761526232114
User 125495 AUC after training: 0.5357710651828299
User 125495 improves AUC. Keeping the model.
Training on augumented user 119787 46/50 current_auc = 0.5357710651828299
User 119787 AUC after training: 0.5357710651828299
User 119787 does not improve AUC. Reverting changes.
Training on augumented user 60550 47/50 current_auc = 0.5357710651828299
User 60550 AUC after training: 0.5349761526232114
User 60550 does not improve AUC. Reverting changes.
Training on augumented user 13361 48/50 current_auc = 0.5357710651828299
User 13361 AUC after training: 0.534181240063593
User 13361 does not improve AUC. Reverting changes.
Training on augumented user 25132 49/50 current_auc = 0.5357710651828299
User 25132 AUC after training: 0.5357710651828299
User 25132 does not improve AUC. Reverting changes.
[2024-12-02 19:25:05.820503] start test user 60653 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:06.363694] start test user 60653 195/568 recall augumented users by random, augumented_users = [109550, 101781, 120585, 109125, 7251, 97447, 105501, 120142, 131060, 133989, 75033, 44762, 39113, 86821, 39695, 61708, 36726, 51331, 50626, 2992, 731, 52764, 6131, 123620, 78734, 13814, 101853, 48147, 84523, 117644, 41449, 76802, 110030, 39575, 45376, 50673, 81290, 96361, 84540, 93598, 47973, 9541, 99868, 13151, 132907, 96554, 28414, 29534, 79436, 86116]
[2024-12-02 19:25:06.392820] user = 60653 Cloud 195/568
[2024-12-02 19:25:06.409618] user = 60653 Local 195/568
[2024-12-02 19:25:06.551107] user = 60653 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:08.884076] user = 60653 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5736263736263736
Training on augumented user 109550 0/50 current_auc = 0.5736263736263736
User 109550 AUC after training: 0.5747252747252748
User 109550 improves AUC. Keeping the model.
Training on augumented user 101781 1/50 current_auc = 0.5747252747252748
User 101781 AUC after training: 0.5730769230769232
User 101781 does not improve AUC. Reverting changes.
Training on augumented user 120585 2/50 current_auc = 0.5747252747252748
User 120585 AUC after training: 0.5752747252747253
User 120585 improves AUC. Keeping the model.
Training on augumented user 109125 3/50 current_auc = 0.5752747252747253
User 109125 AUC after training: 0.576923076923077
User 109125 improves AUC. Keeping the model.
Training on augumented user 7251 4/50 current_auc = 0.576923076923077
User 7251 AUC after training: 0.5763736263736264
User 7251 does not improve AUC. Reverting changes.
Training on augumented user 97447 5/50 current_auc = 0.576923076923077
User 97447 AUC after training: 0.5780219780219781
User 97447 improves AUC. Keeping the model.
Training on augumented user 105501 6/50 current_auc = 0.5780219780219781
User 105501 AUC after training: 0.5846153846153846
User 105501 improves AUC. Keeping the model.
Training on augumented user 120142 7/50 current_auc = 0.5846153846153846
User 120142 AUC after training: 0.5824175824175825
User 120142 does not improve AUC. Reverting changes.
Training on augumented user 131060 8/50 current_auc = 0.5846153846153846
User 131060 AUC after training: 0.5802197802197803
User 131060 does not improve AUC. Reverting changes.
Training on augumented user 133989 9/50 current_auc = 0.5846153846153846
User 133989 AUC after training: 0.5763736263736264
User 133989 does not improve AUC. Reverting changes.
Training on augumented user 75033 10/50 current_auc = 0.5846153846153846
User 75033 AUC after training: 0.5851648351648352
User 75033 improves AUC. Keeping the model.
Training on augumented user 44762 11/50 current_auc = 0.5851648351648352
User 44762 AUC after training: 0.5884615384615385
User 44762 improves AUC. Keeping the model.
Training on augumented user 39113 12/50 current_auc = 0.5884615384615385
User 39113 AUC after training: 0.5807692307692308
User 39113 does not improve AUC. Reverting changes.
Training on augumented user 86821 13/50 current_auc = 0.5884615384615385
User 86821 AUC after training: 0.5835164835164836
User 86821 does not improve AUC. Reverting changes.
Training on augumented user 39695 14/50 current_auc = 0.5884615384615385
User 39695 AUC after training: 0.5807692307692308
User 39695 does not improve AUC. Reverting changes.
Training on augumented user 61708 15/50 current_auc = 0.5884615384615385
User 61708 AUC after training: 0.5824175824175825
User 61708 does not improve AUC. Reverting changes.
Training on augumented user 36726 16/50 current_auc = 0.5884615384615385
User 36726 AUC after training: 0.5763736263736264
User 36726 does not improve AUC. Reverting changes.
Training on augumented user 51331 17/50 current_auc = 0.5884615384615385
User 51331 AUC after training: 0.5868131868131868
User 51331 does not improve AUC. Reverting changes.
Training on augumented user 50626 18/50 current_auc = 0.5884615384615385
User 50626 AUC after training: 0.5895604395604396
User 50626 improves AUC. Keeping the model.
Training on augumented user 2992 19/50 current_auc = 0.5895604395604396
User 2992 AUC after training: 0.5813186813186814
User 2992 does not improve AUC. Reverting changes.
Training on augumented user 731 20/50 current_auc = 0.5895604395604396
User 731 AUC after training: 0.589010989010989
User 731 does not improve AUC. Reverting changes.
Training on augumented user 52764 21/50 current_auc = 0.5895604395604396
User 52764 AUC after training: 0.5862637362637363
User 52764 does not improve AUC. Reverting changes.
Training on augumented user 6131 22/50 current_auc = 0.5895604395604396
User 6131 AUC after training: 0.5884615384615385
User 6131 does not improve AUC. Reverting changes.
Training on augumented user 123620 23/50 current_auc = 0.5895604395604396
User 123620 AUC after training: 0.5912087912087912
User 123620 improves AUC. Keeping the model.
Training on augumented user 78734 24/50 current_auc = 0.5912087912087912
User 78734 AUC after training: 0.5928571428571429
User 78734 improves AUC. Keeping the model.
Training on augumented user 13814 25/50 current_auc = 0.5928571428571429
User 13814 AUC after training: 0.5862637362637363
User 13814 does not improve AUC. Reverting changes.
Training on augumented user 101853 26/50 current_auc = 0.5928571428571429
User 101853 AUC after training: 0.595054945054945
User 101853 improves AUC. Keeping the model.
Training on augumented user 48147 27/50 current_auc = 0.595054945054945
User 48147 AUC after training: 0.5928571428571429
User 48147 does not improve AUC. Reverting changes.
Training on augumented user 84523 28/50 current_auc = 0.595054945054945
User 84523 AUC after training: 0.5961538461538461
User 84523 improves AUC. Keeping the model.
Training on augumented user 117644 29/50 current_auc = 0.5961538461538461
User 117644 AUC after training: 0.5923076923076923
User 117644 does not improve AUC. Reverting changes.
Training on augumented user 41449 30/50 current_auc = 0.5961538461538461
User 41449 AUC after training: 0.5901098901098901
User 41449 does not improve AUC. Reverting changes.
Training on augumented user 76802 31/50 current_auc = 0.5961538461538461
User 76802 AUC after training: 0.5928571428571429
User 76802 does not improve AUC. Reverting changes.
Training on augumented user 110030 32/50 current_auc = 0.5961538461538461
User 110030 AUC after training: 0.5978021978021978
User 110030 improves AUC. Keeping the model.
Training on augumented user 39575 33/50 current_auc = 0.5978021978021978
User 39575 AUC after training: 0.5961538461538461
User 39575 does not improve AUC. Reverting changes.
Training on augumented user 45376 34/50 current_auc = 0.5978021978021978
User 45376 AUC after training: 0.5928571428571429
User 45376 does not improve AUC. Reverting changes.
Training on augumented user 50673 35/50 current_auc = 0.5978021978021978
User 50673 AUC after training: 0.5967032967032968
User 50673 does not improve AUC. Reverting changes.
Training on augumented user 81290 36/50 current_auc = 0.5978021978021978
User 81290 AUC after training: 0.6005494505494505
User 81290 improves AUC. Keeping the model.
Training on augumented user 96361 37/50 current_auc = 0.6005494505494505
User 96361 AUC after training: 0.5989010989010989
User 96361 does not improve AUC. Reverting changes.
Training on augumented user 84540 38/50 current_auc = 0.6005494505494505
User 84540 AUC after training: 0.6021978021978022
User 84540 improves AUC. Keeping the model.
Training on augumented user 93598 39/50 current_auc = 0.6021978021978022
User 93598 AUC after training: 0.5961538461538461
User 93598 does not improve AUC. Reverting changes.
Training on augumented user 47973 40/50 current_auc = 0.6021978021978022
User 47973 AUC after training: 0.595054945054945
User 47973 does not improve AUC. Reverting changes.
Training on augumented user 9541 41/50 current_auc = 0.6021978021978022
User 9541 AUC after training: 0.6021978021978022
User 9541 does not improve AUC. Reverting changes.
Training on augumented user 99868 42/50 current_auc = 0.6021978021978022
User 99868 AUC after training: 0.6032967032967034
User 99868 improves AUC. Keeping the model.
Training on augumented user 13151 43/50 current_auc = 0.6032967032967034
User 13151 AUC after training: 0.6
User 13151 does not improve AUC. Reverting changes.
Training on augumented user 132907 44/50 current_auc = 0.6032967032967034
User 132907 AUC after training: 0.6054945054945056
User 132907 improves AUC. Keeping the model.
Training on augumented user 96554 45/50 current_auc = 0.6054945054945056
User 96554 AUC after training: 0.604945054945055
User 96554 does not improve AUC. Reverting changes.
Training on augumented user 28414 46/50 current_auc = 0.6054945054945056
User 28414 AUC after training: 0.6010989010989011
User 28414 does not improve AUC. Reverting changes.
Training on augumented user 29534 47/50 current_auc = 0.6054945054945056
User 29534 AUC after training: 0.604945054945055
User 29534 does not improve AUC. Reverting changes.
Training on augumented user 79436 48/50 current_auc = 0.6054945054945056
User 79436 AUC after training: 0.6021978021978022
User 79436 does not improve AUC. Reverting changes.
Training on augumented user 86116 49/50 current_auc = 0.6054945054945056
User 86116 AUC after training: 0.6076923076923078
User 86116 improves AUC. Keeping the model.
[2024-12-02 19:25:41.412748] start test user 60654 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:41.956906] start test user 60654 196/568 recall augumented users by random, augumented_users = [94268, 122002, 107884, 53373, 96703, 111954, 17098, 55880, 66390, 51529, 65492, 47977, 81102, 77229, 110905, 20623, 31055, 116749, 22457, 54422, 19944, 66617, 135932, 16434, 116381, 40634, 28613, 29269, 48201, 76977, 9171, 51987, 22548, 57751, 9126, 123170, 45728, 116953, 2229, 72878, 25480, 106178, 44460, 19289, 106715, 20328, 18968, 77736, 5157, 83081]
[2024-12-02 19:25:41.971952] user = 60654 Cloud 196/568
[2024-12-02 19:25:41.986892] user = 60654 Local 196/568
[2024-12-02 19:25:42.031351] user = 60654 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:44.405517] user = 60654 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6578947368421053
Training on augumented user 94268 0/50 current_auc = 0.6578947368421053
User 94268 AUC after training: 0.6513157894736843
User 94268 does not improve AUC. Reverting changes.
Training on augumented user 122002 1/50 current_auc = 0.6578947368421053
User 122002 AUC after training: 0.6513157894736843
User 122002 does not improve AUC. Reverting changes.
Training on augumented user 107884 2/50 current_auc = 0.6578947368421053
User 107884 AUC after training: 0.6578947368421053
User 107884 does not improve AUC. Reverting changes.
Training on augumented user 53373 3/50 current_auc = 0.6578947368421053
User 53373 AUC after training: 0.6513157894736843
User 53373 does not improve AUC. Reverting changes.
Training on augumented user 96703 4/50 current_auc = 0.6578947368421053
User 96703 AUC after training: 0.6578947368421053
User 96703 does not improve AUC. Reverting changes.
Training on augumented user 111954 5/50 current_auc = 0.6578947368421053
User 111954 AUC after training: 0.6578947368421053
User 111954 does not improve AUC. Reverting changes.
Training on augumented user 17098 6/50 current_auc = 0.6578947368421053
User 17098 AUC after training: 0.6578947368421053
User 17098 does not improve AUC. Reverting changes.
Training on augumented user 55880 7/50 current_auc = 0.6578947368421053
User 55880 AUC after training: 0.6513157894736843
User 55880 does not improve AUC. Reverting changes.
Training on augumented user 66390 8/50 current_auc = 0.6578947368421053
User 66390 AUC after training: 0.6578947368421053
User 66390 does not improve AUC. Reverting changes.
Training on augumented user 51529 9/50 current_auc = 0.6578947368421053
User 51529 AUC after training: 0.6513157894736843
User 51529 does not improve AUC. Reverting changes.
Training on augumented user 65492 10/50 current_auc = 0.6578947368421053
User 65492 AUC after training: 0.6578947368421053
User 65492 does not improve AUC. Reverting changes.
Training on augumented user 47977 11/50 current_auc = 0.6578947368421053
User 47977 AUC after training: 0.6513157894736843
User 47977 does not improve AUC. Reverting changes.
Training on augumented user 81102 12/50 current_auc = 0.6578947368421053
User 81102 AUC after training: 0.6513157894736843
User 81102 does not improve AUC. Reverting changes.
Training on augumented user 77229 13/50 current_auc = 0.6578947368421053
User 77229 AUC after training: 0.6447368421052633
User 77229 does not improve AUC. Reverting changes.
Training on augumented user 110905 14/50 current_auc = 0.6578947368421053
User 110905 AUC after training: 0.6513157894736843
User 110905 does not improve AUC. Reverting changes.
Training on augumented user 20623 15/50 current_auc = 0.6578947368421053
User 20623 AUC after training: 0.6578947368421053
User 20623 does not improve AUC. Reverting changes.
Training on augumented user 31055 16/50 current_auc = 0.6578947368421053
User 31055 AUC after training: 0.6513157894736843
User 31055 does not improve AUC. Reverting changes.
Training on augumented user 116749 17/50 current_auc = 0.6578947368421053
User 116749 AUC after training: 0.6513157894736843
User 116749 does not improve AUC. Reverting changes.
Training on augumented user 22457 18/50 current_auc = 0.6578947368421053
User 22457 AUC after training: 0.6513157894736843
User 22457 does not improve AUC. Reverting changes.
Training on augumented user 54422 19/50 current_auc = 0.6578947368421053
User 54422 AUC after training: 0.6513157894736843
User 54422 does not improve AUC. Reverting changes.
Training on augumented user 19944 20/50 current_auc = 0.6578947368421053
User 19944 AUC after training: 0.6578947368421053
User 19944 does not improve AUC. Reverting changes.
Training on augumented user 66617 21/50 current_auc = 0.6578947368421053
User 66617 AUC after training: 0.6447368421052633
User 66617 does not improve AUC. Reverting changes.
Training on augumented user 135932 22/50 current_auc = 0.6578947368421053
User 135932 AUC after training: 0.6578947368421053
User 135932 does not improve AUC. Reverting changes.
Training on augumented user 16434 23/50 current_auc = 0.6578947368421053
User 16434 AUC after training: 0.6513157894736843
User 16434 does not improve AUC. Reverting changes.
Training on augumented user 116381 24/50 current_auc = 0.6578947368421053
User 116381 AUC after training: 0.6578947368421053
User 116381 does not improve AUC. Reverting changes.
Training on augumented user 40634 25/50 current_auc = 0.6578947368421053
User 40634 AUC after training: 0.6578947368421053
User 40634 does not improve AUC. Reverting changes.
Training on augumented user 28613 26/50 current_auc = 0.6578947368421053
User 28613 AUC after training: 0.6447368421052633
User 28613 does not improve AUC. Reverting changes.
Training on augumented user 29269 27/50 current_auc = 0.6578947368421053
User 29269 AUC after training: 0.6578947368421053
User 29269 does not improve AUC. Reverting changes.
Training on augumented user 48201 28/50 current_auc = 0.6578947368421053
User 48201 AUC after training: 0.6513157894736843
User 48201 does not improve AUC. Reverting changes.
Training on augumented user 76977 29/50 current_auc = 0.6578947368421053
User 76977 AUC after training: 0.6513157894736843
User 76977 does not improve AUC. Reverting changes.
Training on augumented user 9171 30/50 current_auc = 0.6578947368421053
User 9171 AUC after training: 0.6578947368421053
User 9171 does not improve AUC. Reverting changes.
Training on augumented user 51987 31/50 current_auc = 0.6578947368421053
User 51987 AUC after training: 0.6578947368421053
User 51987 does not improve AUC. Reverting changes.
Training on augumented user 22548 32/50 current_auc = 0.6578947368421053
User 22548 AUC after training: 0.6578947368421053
User 22548 does not improve AUC. Reverting changes.
Training on augumented user 57751 33/50 current_auc = 0.6578947368421053
User 57751 AUC after training: 0.6578947368421053
User 57751 does not improve AUC. Reverting changes.
Training on augumented user 9126 34/50 current_auc = 0.6578947368421053
User 9126 AUC after training: 0.6578947368421053
User 9126 does not improve AUC. Reverting changes.
Training on augumented user 123170 35/50 current_auc = 0.6578947368421053
User 123170 AUC after training: 0.6578947368421053
User 123170 does not improve AUC. Reverting changes.
Training on augumented user 45728 36/50 current_auc = 0.6578947368421053
User 45728 AUC after training: 0.6513157894736843
User 45728 does not improve AUC. Reverting changes.
Training on augumented user 116953 37/50 current_auc = 0.6578947368421053
User 116953 AUC after training: 0.6513157894736843
User 116953 does not improve AUC. Reverting changes.
Training on augumented user 2229 38/50 current_auc = 0.6578947368421053
User 2229 AUC after training: 0.6513157894736843
User 2229 does not improve AUC. Reverting changes.
Training on augumented user 72878 39/50 current_auc = 0.6578947368421053
User 72878 AUC after training: 0.6578947368421053
User 72878 does not improve AUC. Reverting changes.
Training on augumented user 25480 40/50 current_auc = 0.6578947368421053
User 25480 AUC after training: 0.6513157894736843
User 25480 does not improve AUC. Reverting changes.
Training on augumented user 106178 41/50 current_auc = 0.6578947368421053
User 106178 AUC after training: 0.6513157894736843
User 106178 does not improve AUC. Reverting changes.
Training on augumented user 44460 42/50 current_auc = 0.6578947368421053
User 44460 AUC after training: 0.6513157894736843
User 44460 does not improve AUC. Reverting changes.
Training on augumented user 19289 43/50 current_auc = 0.6578947368421053
User 19289 AUC after training: 0.6578947368421053
User 19289 does not improve AUC. Reverting changes.
Training on augumented user 106715 44/50 current_auc = 0.6578947368421053
User 106715 AUC after training: 0.6578947368421053
User 106715 does not improve AUC. Reverting changes.
Training on augumented user 20328 45/50 current_auc = 0.6578947368421053
User 20328 AUC after training: 0.6578947368421053
User 20328 does not improve AUC. Reverting changes.
Training on augumented user 18968 46/50 current_auc = 0.6578947368421053
User 18968 AUC after training: 0.6578947368421053
User 18968 does not improve AUC. Reverting changes.
Training on augumented user 77736 47/50 current_auc = 0.6578947368421053
User 77736 AUC after training: 0.6513157894736843
User 77736 does not improve AUC. Reverting changes.
Training on augumented user 5157 48/50 current_auc = 0.6578947368421053
User 5157 AUC after training: 0.6513157894736843
User 5157 does not improve AUC. Reverting changes.
Training on augumented user 83081 49/50 current_auc = 0.6578947368421053
User 83081 AUC after training: 0.6578947368421053
User 83081 does not improve AUC. Reverting changes.
[2024-12-02 19:26:14.682278] start test user 60655 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:15.205726] start test user 60655 197/568 recall augumented users by random, augumented_users = [35689, 89799, 69963, 132869, 126291, 100575, 60833, 51047, 96229, 32707, 115589, 25010, 16069, 103936, 46708, 49239, 92140, 17592, 90033, 45308, 40199, 74544, 29306, 38015, 50639, 59843, 37438, 102826, 130907, 70213, 45284, 73435, 108111, 104616, 110095, 124240, 22043, 128463, 84022, 116960, 66462, 22023, 128805, 99000, 38042, 88570, 31863, 135622, 41317, 63133]
[2024-12-02 19:26:15.223574] user = 60655 Cloud 197/568
[2024-12-02 19:26:15.251624] user = 60655 Local 197/568
[2024-12-02 19:26:15.367086] user = 60655 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:17.537826] user = 60655 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5913663800987745
Training on augumented user 35689 0/50 current_auc = 0.5913663800987745
User 35689 AUC after training: 0.5919151271263947
User 35689 improves AUC. Keeping the model.
Training on augumented user 89799 1/50 current_auc = 0.5919151271263947
User 89799 AUC after training: 0.5906347173952808
User 89799 does not improve AUC. Reverting changes.
Training on augumented user 69963 2/50 current_auc = 0.5919151271263947
User 69963 AUC after training: 0.5913663800987744
User 69963 does not improve AUC. Reverting changes.
Training on augumented user 132869 3/50 current_auc = 0.5919151271263947
User 132869 AUC after training: 0.5929211633436986
User 132869 improves AUC. Keeping the model.
Training on augumented user 126291 4/50 current_auc = 0.5929211633436986
User 126291 AUC after training: 0.5914578379367111
User 126291 does not improve AUC. Reverting changes.
Training on augumented user 100575 5/50 current_auc = 0.5929211633436986
User 100575 AUC after training: 0.5931040790195721
User 100575 improves AUC. Keeping the model.
Training on augumented user 60833 6/50 current_auc = 0.5931040790195721
User 60833 AUC after training: 0.5940186573989391
User 60833 improves AUC. Keeping the model.
Training on augumented user 51047 7/50 current_auc = 0.5940186573989391
User 51047 AUC after training: 0.5932869946954454
User 51047 does not improve AUC. Reverting changes.
Training on augumented user 96229 8/50 current_auc = 0.5940186573989391
User 96229 AUC after training: 0.5934699103713188
User 96229 does not improve AUC. Reverting changes.
Training on augumented user 32707 9/50 current_auc = 0.5940186573989391
User 32707 AUC after training: 0.5942015730748125
User 32707 improves AUC. Keeping the model.
Training on augumented user 115589 10/50 current_auc = 0.5942015730748125
User 115589 AUC after training: 0.5932869946954453
User 115589 does not improve AUC. Reverting changes.
Training on augumented user 25010 11/50 current_auc = 0.5942015730748125
User 25010 AUC after training: 0.5932869946954453
User 25010 does not improve AUC. Reverting changes.
Training on augumented user 16069 12/50 current_auc = 0.5942015730748125
User 16069 AUC after training: 0.5942015730748125
User 16069 does not improve AUC. Reverting changes.
Training on augumented user 103936 13/50 current_auc = 0.5942015730748125
User 103936 AUC after training: 0.5949332357783061
User 103936 improves AUC. Keeping the model.
Training on augumented user 46708 14/50 current_auc = 0.5949332357783061
User 46708 AUC after training: 0.5945674044265593
User 46708 does not improve AUC. Reverting changes.
Training on augumented user 49239 15/50 current_auc = 0.5949332357783061
User 49239 AUC after training: 0.5946588622644962
User 49239 does not improve AUC. Reverting changes.
Training on augumented user 92140 16/50 current_auc = 0.5949332357783061
User 92140 AUC after training: 0.5947503201024327
User 92140 does not improve AUC. Reverting changes.
Training on augumented user 17592 17/50 current_auc = 0.5949332357783061
User 17592 AUC after training: 0.5945674044265592
User 17592 does not improve AUC. Reverting changes.
Training on augumented user 90033 18/50 current_auc = 0.5949332357783061
User 90033 AUC after training: 0.5949332357783063
User 90033 improves AUC. Keeping the model.
Training on augumented user 45308 19/50 current_auc = 0.5949332357783063
User 45308 AUC after training: 0.5956648984817998
User 45308 improves AUC. Keeping the model.
Training on augumented user 40199 20/50 current_auc = 0.5956648984817998
User 40199 AUC after training: 0.5956648984817998
User 40199 does not improve AUC. Reverting changes.
Training on augumented user 74544 21/50 current_auc = 0.5956648984817998
User 74544 AUC after training: 0.5945674044265594
User 74544 does not improve AUC. Reverting changes.
Training on augumented user 29306 22/50 current_auc = 0.5956648984817998
User 29306 AUC after training: 0.5960307298335467
User 29306 improves AUC. Keeping the model.
Training on augumented user 38015 23/50 current_auc = 0.5960307298335467
User 38015 AUC after training: 0.5960307298335467
User 38015 does not improve AUC. Reverting changes.
Training on augumented user 50639 24/50 current_auc = 0.5960307298335467
User 50639 AUC after training: 0.5944759465886227
User 50639 does not improve AUC. Reverting changes.
Training on augumented user 59843 25/50 current_auc = 0.5960307298335467
User 59843 AUC after training: 0.5958478141576733
User 59843 does not improve AUC. Reverting changes.
Training on augumented user 37438 26/50 current_auc = 0.5960307298335467
User 37438 AUC after training: 0.5956648984817998
User 37438 does not improve AUC. Reverting changes.
Training on augumented user 102826 27/50 current_auc = 0.5960307298335467
User 102826 AUC after training: 0.5958478141576733
User 102826 does not improve AUC. Reverting changes.
Training on augumented user 130907 28/50 current_auc = 0.5960307298335467
User 130907 AUC after training: 0.5957563563197366
User 130907 does not improve AUC. Reverting changes.
Training on augumented user 70213 29/50 current_auc = 0.5960307298335467
User 70213 AUC after training: 0.5917322114505212
User 70213 does not improve AUC. Reverting changes.
Training on augumented user 45284 30/50 current_auc = 0.5960307298335467
User 45284 AUC after training: 0.5956648984817998
User 45284 does not improve AUC. Reverting changes.
Training on augumented user 73435 31/50 current_auc = 0.5960307298335467
User 73435 AUC after training: 0.5962136455094201
User 73435 improves AUC. Keeping the model.
Training on augumented user 108111 32/50 current_auc = 0.5962136455094201
User 108111 AUC after training: 0.5984086336199012
User 108111 improves AUC. Keeping the model.
Training on augumented user 104616 33/50 current_auc = 0.5984086336199012
User 104616 AUC after training: 0.5984086336199012
User 104616 does not improve AUC. Reverting changes.
Training on augumented user 110095 34/50 current_auc = 0.5984086336199012
User 110095 AUC after training: 0.5982257179440278
User 110095 does not improve AUC. Reverting changes.
Training on augumented user 124240 35/50 current_auc = 0.5984086336199012
User 124240 AUC after training: 0.5989573806475215
User 124240 improves AUC. Keeping the model.
Training on augumented user 22043 36/50 current_auc = 0.5989573806475215
User 22043 AUC after training: 0.5982257179440278
User 22043 does not improve AUC. Reverting changes.
Training on augumented user 128463 37/50 current_auc = 0.5989573806475215
User 128463 AUC after training: 0.5979513444302176
User 128463 does not improve AUC. Reverting changes.
Training on augumented user 84022 38/50 current_auc = 0.5989573806475215
User 84022 AUC after training: 0.5988659228095847
User 84022 does not improve AUC. Reverting changes.
Training on augumented user 116960 39/50 current_auc = 0.5989573806475215
User 116960 AUC after training: 0.5949332357783061
User 116960 does not improve AUC. Reverting changes.
Training on augumented user 66462 40/50 current_auc = 0.5989573806475215
User 66462 AUC after training: 0.5985000914578379
User 66462 does not improve AUC. Reverting changes.
Training on augumented user 22023 41/50 current_auc = 0.5989573806475215
User 22023 AUC after training: 0.5963051033473568
User 22023 does not improve AUC. Reverting changes.
Training on augumented user 128805 42/50 current_auc = 0.5989573806475215
User 128805 AUC after training: 0.5955734406438631
User 128805 does not improve AUC. Reverting changes.
Training on augumented user 99000 43/50 current_auc = 0.5989573806475215
User 99000 AUC after training: 0.5999634168648253
User 99000 improves AUC. Keeping the model.
Training on augumented user 38042 44/50 current_auc = 0.5999634168648253
User 38042 AUC after training: 0.5995061276751417
User 38042 does not improve AUC. Reverting changes.
Training on augumented user 88570 45/50 current_auc = 0.5999634168648253
User 88570 AUC after training: 0.5981342601060909
User 88570 does not improve AUC. Reverting changes.
Training on augumented user 31863 46/50 current_auc = 0.5999634168648253
User 31863 AUC after training: 0.6000548747027621
User 31863 improves AUC. Keeping the model.
Training on augumented user 135622 47/50 current_auc = 0.6000548747027621
User 135622 AUC after training: 0.6017011157856228
User 135622 improves AUC. Keeping the model.
Training on augumented user 41317 48/50 current_auc = 0.6017011157856228
User 41317 AUC after training: 0.6011523687580025
User 41317 does not improve AUC. Reverting changes.
Training on augumented user 63133 49/50 current_auc = 0.6017011157856228
User 63133 AUC after training: 0.5974025974025974
User 63133 does not improve AUC. Reverting changes.
[2024-12-02 19:26:42.730287] start test user 60665 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:43.379902] start test user 60665 198/568 recall augumented users by random, augumented_users = [93321, 117911, 39474, 119891, 35843, 48894, 132112, 8286, 113721, 60804, 112911, 50125, 49404, 64749, 3823, 118431, 95386, 1803, 35608, 67763, 946, 78592, 130816, 92878, 19888, 84483, 46257, 98860, 49488, 2038, 102136, 69377, 83174, 76586, 90819, 14640, 65004, 29575, 12882, 120264, 97463, 49855, 122234, 95233, 31681, 79602, 79003, 66331, 114391, 58514]
[2024-12-02 19:26:43.395300] user = 60665 Cloud 198/568
[2024-12-02 19:26:43.414523] user = 60665 Local 198/568
[2024-12-02 19:26:43.491567] user = 60665 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:46.116681] user = 60665 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6008028545941124
Training on augumented user 93321 0/50 current_auc = 0.6008028545941124
User 93321 AUC after training: 0.596342551293488
User 93321 does not improve AUC. Reverting changes.
Training on augumented user 117911 1/50 current_auc = 0.6008028545941124
User 117911 AUC after training: 0.5999107939339876
User 117911 does not improve AUC. Reverting changes.
Training on augumented user 39474 2/50 current_auc = 0.6008028545941124
User 39474 AUC after training: 0.5985727029438002
User 39474 does not improve AUC. Reverting changes.
Training on augumented user 119891 3/50 current_auc = 0.6008028545941124
User 119891 AUC after training: 0.6012488849241748
User 119891 improves AUC. Keeping the model.
Training on augumented user 35843 4/50 current_auc = 0.6012488849241748
User 35843 AUC after training: 0.6008028545941124
User 35843 does not improve AUC. Reverting changes.
Training on augumented user 48894 5/50 current_auc = 0.6012488849241748
User 48894 AUC after training: 0.599464763603925
User 48894 does not improve AUC. Reverting changes.
Training on augumented user 132112 6/50 current_auc = 0.6012488849241748
User 132112 AUC after training: 0.6016949152542372
User 132112 improves AUC. Keeping the model.
Training on augumented user 8286 7/50 current_auc = 0.6016949152542372
User 8286 AUC after training: 0.6043710972346119
User 8286 improves AUC. Keeping the model.
Training on augumented user 113721 8/50 current_auc = 0.6043710972346119
User 113721 AUC after training: 0.6039250669045495
User 113721 does not improve AUC. Reverting changes.
Training on augumented user 60804 9/50 current_auc = 0.6043710972346119
User 60804 AUC after training: 0.6043710972346119
User 60804 does not improve AUC. Reverting changes.
Training on augumented user 112911 10/50 current_auc = 0.6043710972346119
User 112911 AUC after training: 0.6048171275646744
User 112911 improves AUC. Keeping the model.
Training on augumented user 50125 11/50 current_auc = 0.6048171275646744
User 50125 AUC after training: 0.6052631578947368
User 50125 improves AUC. Keeping the model.
Training on augumented user 49404 12/50 current_auc = 0.6052631578947368
User 49404 AUC after training: 0.6039250669045495
User 49404 does not improve AUC. Reverting changes.
Training on augumented user 64749 13/50 current_auc = 0.6052631578947368
User 64749 AUC after training: 0.6030330062444246
User 64749 does not improve AUC. Reverting changes.
Training on augumented user 3823 14/50 current_auc = 0.6052631578947368
User 3823 AUC after training: 0.6048171275646744
User 3823 does not improve AUC. Reverting changes.
Training on augumented user 118431 15/50 current_auc = 0.6052631578947368
User 118431 AUC after training: 0.6039250669045495
User 118431 does not improve AUC. Reverting changes.
Training on augumented user 95386 16/50 current_auc = 0.6052631578947368
User 95386 AUC after training: 0.6043710972346119
User 95386 does not improve AUC. Reverting changes.
Training on augumented user 1803 17/50 current_auc = 0.6052631578947368
User 1803 AUC after training: 0.6030330062444247
User 1803 does not improve AUC. Reverting changes.
Training on augumented user 35608 18/50 current_auc = 0.6052631578947368
User 35608 AUC after training: 0.6012488849241748
User 35608 does not improve AUC. Reverting changes.
Training on augumented user 67763 19/50 current_auc = 0.6052631578947368
User 67763 AUC after training: 0.6030330062444247
User 67763 does not improve AUC. Reverting changes.
Training on augumented user 946 20/50 current_auc = 0.6052631578947368
User 946 AUC after training: 0.6039250669045495
User 946 does not improve AUC. Reverting changes.
Training on augumented user 78592 21/50 current_auc = 0.6052631578947368
User 78592 AUC after training: 0.6030330062444247
User 78592 does not improve AUC. Reverting changes.
Training on augumented user 130816 22/50 current_auc = 0.6052631578947368
User 130816 AUC after training: 0.6039250669045495
User 130816 does not improve AUC. Reverting changes.
Training on augumented user 92878 23/50 current_auc = 0.6052631578947368
User 92878 AUC after training: 0.6043710972346119
User 92878 does not improve AUC. Reverting changes.
Training on augumented user 19888 24/50 current_auc = 0.6052631578947368
User 19888 AUC after training: 0.6043710972346119
User 19888 does not improve AUC. Reverting changes.
Training on augumented user 84483 25/50 current_auc = 0.6052631578947368
User 84483 AUC after training: 0.6034790365744871
User 84483 does not improve AUC. Reverting changes.
Training on augumented user 46257 26/50 current_auc = 0.6052631578947368
User 46257 AUC after training: 0.6034790365744871
User 46257 does not improve AUC. Reverting changes.
Training on augumented user 98860 27/50 current_auc = 0.6052631578947368
User 98860 AUC after training: 0.6039250669045495
User 98860 does not improve AUC. Reverting changes.
Training on augumented user 49488 28/50 current_auc = 0.6052631578947368
User 49488 AUC after training: 0.6012488849241748
User 49488 does not improve AUC. Reverting changes.
Training on augumented user 2038 29/50 current_auc = 0.6052631578947368
User 2038 AUC after training: 0.6039250669045495
User 2038 does not improve AUC. Reverting changes.
Training on augumented user 102136 30/50 current_auc = 0.6052631578947368
User 102136 AUC after training: 0.6057091882247994
User 102136 improves AUC. Keeping the model.
Training on augumented user 69377 31/50 current_auc = 0.6057091882247994
User 69377 AUC after training: 0.5999107939339876
User 69377 does not improve AUC. Reverting changes.
Training on augumented user 83174 32/50 current_auc = 0.6057091882247994
User 83174 AUC after training: 0.6039250669045495
User 83174 does not improve AUC. Reverting changes.
Training on augumented user 76586 33/50 current_auc = 0.6057091882247994
User 76586 AUC after training: 0.6057091882247994
User 76586 does not improve AUC. Reverting changes.
Training on augumented user 90819 34/50 current_auc = 0.6057091882247994
User 90819 AUC after training: 0.6034790365744871
User 90819 does not improve AUC. Reverting changes.
Training on augumented user 14640 35/50 current_auc = 0.6057091882247994
User 14640 AUC after training: 0.6043710972346119
User 14640 does not improve AUC. Reverting changes.
Training on augumented user 65004 36/50 current_auc = 0.6057091882247994
User 65004 AUC after training: 0.6048171275646743
User 65004 does not improve AUC. Reverting changes.
Training on augumented user 29575 37/50 current_auc = 0.6057091882247994
User 29575 AUC after training: 0.6039250669045495
User 29575 does not improve AUC. Reverting changes.
Training on augumented user 12882 38/50 current_auc = 0.6057091882247994
User 12882 AUC after training: 0.6039250669045495
User 12882 does not improve AUC. Reverting changes.
Training on augumented user 120264 39/50 current_auc = 0.6057091882247994
User 120264 AUC after training: 0.6057091882247994
User 120264 does not improve AUC. Reverting changes.
Training on augumented user 97463 40/50 current_auc = 0.6057091882247994
User 97463 AUC after training: 0.6016949152542372
User 97463 does not improve AUC. Reverting changes.
Training on augumented user 49855 41/50 current_auc = 0.6057091882247994
User 49855 AUC after training: 0.6030330062444247
User 49855 does not improve AUC. Reverting changes.
Training on augumented user 122234 42/50 current_auc = 0.6057091882247994
User 122234 AUC after training: 0.6066012488849242
User 122234 improves AUC. Keeping the model.
Training on augumented user 95233 43/50 current_auc = 0.6066012488849242
User 95233 AUC after training: 0.6052631578947368
User 95233 does not improve AUC. Reverting changes.
Training on augumented user 31681 44/50 current_auc = 0.6066012488849242
User 31681 AUC after training: 0.602586975914362
User 31681 does not improve AUC. Reverting changes.
Training on augumented user 79602 45/50 current_auc = 0.6066012488849242
User 79602 AUC after training: 0.6066012488849242
User 79602 does not improve AUC. Reverting changes.
Training on augumented user 79003 46/50 current_auc = 0.6066012488849242
User 79003 AUC after training: 0.6052631578947368
User 79003 does not improve AUC. Reverting changes.
Training on augumented user 66331 47/50 current_auc = 0.6066012488849242
User 66331 AUC after training: 0.607493309545049
User 66331 improves AUC. Keeping the model.
Training on augumented user 114391 48/50 current_auc = 0.607493309545049
User 114391 AUC after training: 0.6074933095450491
User 114391 improves AUC. Keeping the model.
Training on augumented user 58514 49/50 current_auc = 0.6074933095450491
User 58514 AUC after training: 0.6088314005352364
User 58514 improves AUC. Keeping the model.
[2024-12-02 19:27:14.127354] start test user 60666 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:15.156857] start test user 60666 199/568 recall augumented users by random, augumented_users = [40600, 109243, 93142, 75835, 32821, 119325, 68754, 14460, 120896, 137863, 54338, 64078, 118649, 54993, 129530, 67155, 21276, 133406, 4482, 48129, 59070, 103063, 103331, 138278, 82697, 110400, 20799, 25817, 84720, 96486, 47169, 134933, 71537, 24588, 91178, 10172, 89945, 104555, 8334, 87040, 96194, 47479, 108842, 111014, 53633, 116415, 29970, 95014, 121761, 101822]
[2024-12-02 19:27:15.234814] user = 60666 Cloud 199/568
[2024-12-02 19:27:15.247804] user = 60666 Local 199/568
[2024-12-02 19:27:15.469810] user = 60666 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:17.679964] user = 60666 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5687606112054329
Training on augumented user 40600 0/50 current_auc = 0.5687606112054329
User 40600 AUC after training: 0.5687606112054329
User 40600 does not improve AUC. Reverting changes.
Training on augumented user 109243 1/50 current_auc = 0.5687606112054329
User 109243 AUC after training: 0.5687606112054329
User 109243 does not improve AUC. Reverting changes.
Training on augumented user 93142 2/50 current_auc = 0.5687606112054329
User 93142 AUC after training: 0.5687606112054329
User 93142 does not improve AUC. Reverting changes.
Training on augumented user 75835 3/50 current_auc = 0.5687606112054329
User 75835 AUC after training: 0.5721561969439728
User 75835 improves AUC. Keeping the model.
Training on augumented user 32821 4/50 current_auc = 0.5721561969439728
User 32821 AUC after training: 0.5704584040747029
User 32821 does not improve AUC. Reverting changes.
Training on augumented user 119325 5/50 current_auc = 0.5721561969439728
User 119325 AUC after training: 0.5704584040747029
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 68754 6/50 current_auc = 0.5721561969439728
User 68754 AUC after training: 0.5721561969439728
User 68754 does not improve AUC. Reverting changes.
Training on augumented user 14460 7/50 current_auc = 0.5721561969439728
User 14460 AUC after training: 0.5721561969439728
User 14460 does not improve AUC. Reverting changes.
Training on augumented user 120896 8/50 current_auc = 0.5721561969439728
User 120896 AUC after training: 0.5721561969439728
User 120896 does not improve AUC. Reverting changes.
Training on augumented user 137863 9/50 current_auc = 0.5721561969439728
User 137863 AUC after training: 0.5721561969439728
User 137863 does not improve AUC. Reverting changes.
Training on augumented user 54338 10/50 current_auc = 0.5721561969439728
User 54338 AUC after training: 0.5704584040747029
User 54338 does not improve AUC. Reverting changes.
Training on augumented user 64078 11/50 current_auc = 0.5721561969439728
User 64078 AUC after training: 0.5721561969439728
User 64078 does not improve AUC. Reverting changes.
Training on augumented user 118649 12/50 current_auc = 0.5721561969439728
User 118649 AUC after training: 0.5738539898132428
User 118649 improves AUC. Keeping the model.
Training on augumented user 54993 13/50 current_auc = 0.5738539898132428
User 54993 AUC after training: 0.5738539898132428
User 54993 does not improve AUC. Reverting changes.
Training on augumented user 129530 14/50 current_auc = 0.5738539898132428
User 129530 AUC after training: 0.5738539898132428
User 129530 does not improve AUC. Reverting changes.
Training on augumented user 67155 15/50 current_auc = 0.5738539898132428
User 67155 AUC after training: 0.5738539898132428
User 67155 does not improve AUC. Reverting changes.
Training on augumented user 21276 16/50 current_auc = 0.5738539898132428
User 21276 AUC after training: 0.5738539898132428
User 21276 does not improve AUC. Reverting changes.
Training on augumented user 133406 17/50 current_auc = 0.5738539898132428
User 133406 AUC after training: 0.5755517826825127
User 133406 improves AUC. Keeping the model.
Training on augumented user 4482 18/50 current_auc = 0.5755517826825127
User 4482 AUC after training: 0.5738539898132428
User 4482 does not improve AUC. Reverting changes.
Training on augumented user 48129 19/50 current_auc = 0.5755517826825127
User 48129 AUC after training: 0.5738539898132428
User 48129 does not improve AUC. Reverting changes.
Training on augumented user 59070 20/50 current_auc = 0.5755517826825127
User 59070 AUC after training: 0.5738539898132428
User 59070 does not improve AUC. Reverting changes.
Training on augumented user 103063 21/50 current_auc = 0.5755517826825127
User 103063 AUC after training: 0.5738539898132428
User 103063 does not improve AUC. Reverting changes.
Training on augumented user 103331 22/50 current_auc = 0.5755517826825127
User 103331 AUC after training: 0.5738539898132428
User 103331 does not improve AUC. Reverting changes.
Training on augumented user 138278 23/50 current_auc = 0.5755517826825127
User 138278 AUC after training: 0.5738539898132428
User 138278 does not improve AUC. Reverting changes.
Training on augumented user 82697 24/50 current_auc = 0.5755517826825127
User 82697 AUC after training: 0.5738539898132428
User 82697 does not improve AUC. Reverting changes.
Training on augumented user 110400 25/50 current_auc = 0.5755517826825127
User 110400 AUC after training: 0.5738539898132428
User 110400 does not improve AUC. Reverting changes.
Training on augumented user 20799 26/50 current_auc = 0.5755517826825127
User 20799 AUC after training: 0.5738539898132428
User 20799 does not improve AUC. Reverting changes.
Training on augumented user 25817 27/50 current_auc = 0.5755517826825127
User 25817 AUC after training: 0.5755517826825127
User 25817 does not improve AUC. Reverting changes.
Training on augumented user 84720 28/50 current_auc = 0.5755517826825127
User 84720 AUC after training: 0.5721561969439728
User 84720 does not improve AUC. Reverting changes.
Training on augumented user 96486 29/50 current_auc = 0.5755517826825127
User 96486 AUC after training: 0.5738539898132428
User 96486 does not improve AUC. Reverting changes.
Training on augumented user 47169 30/50 current_auc = 0.5755517826825127
User 47169 AUC after training: 0.5738539898132428
User 47169 does not improve AUC. Reverting changes.
Training on augumented user 134933 31/50 current_auc = 0.5755517826825127
User 134933 AUC after training: 0.5738539898132428
User 134933 does not improve AUC. Reverting changes.
Training on augumented user 71537 32/50 current_auc = 0.5755517826825127
User 71537 AUC after training: 0.5755517826825127
User 71537 does not improve AUC. Reverting changes.
Training on augumented user 24588 33/50 current_auc = 0.5755517826825127
User 24588 AUC after training: 0.5755517826825127
User 24588 does not improve AUC. Reverting changes.
Training on augumented user 91178 34/50 current_auc = 0.5755517826825127
User 91178 AUC after training: 0.5755517826825127
User 91178 does not improve AUC. Reverting changes.
Training on augumented user 10172 35/50 current_auc = 0.5755517826825127
User 10172 AUC after training: 0.5738539898132428
User 10172 does not improve AUC. Reverting changes.
Training on augumented user 89945 36/50 current_auc = 0.5755517826825127
User 89945 AUC after training: 0.5738539898132428
User 89945 does not improve AUC. Reverting changes.
Training on augumented user 104555 37/50 current_auc = 0.5755517826825127
User 104555 AUC after training: 0.5738539898132428
User 104555 does not improve AUC. Reverting changes.
Training on augumented user 8334 38/50 current_auc = 0.5755517826825127
User 8334 AUC after training: 0.5755517826825127
User 8334 does not improve AUC. Reverting changes.
Training on augumented user 87040 39/50 current_auc = 0.5755517826825127
User 87040 AUC after training: 0.5755517826825127
User 87040 does not improve AUC. Reverting changes.
Training on augumented user 96194 40/50 current_auc = 0.5755517826825127
User 96194 AUC after training: 0.5738539898132428
User 96194 does not improve AUC. Reverting changes.
Training on augumented user 47479 41/50 current_auc = 0.5755517826825127
User 47479 AUC after training: 0.568760611205433
User 47479 does not improve AUC. Reverting changes.
Training on augumented user 108842 42/50 current_auc = 0.5755517826825127
User 108842 AUC after training: 0.5704584040747028
User 108842 does not improve AUC. Reverting changes.
Training on augumented user 111014 43/50 current_auc = 0.5755517826825127
User 111014 AUC after training: 0.5755517826825127
User 111014 does not improve AUC. Reverting changes.
Training on augumented user 53633 44/50 current_auc = 0.5755517826825127
User 53633 AUC after training: 0.5755517826825127
User 53633 does not improve AUC. Reverting changes.
Training on augumented user 116415 45/50 current_auc = 0.5755517826825127
User 116415 AUC after training: 0.5738539898132428
User 116415 does not improve AUC. Reverting changes.
Training on augumented user 29970 46/50 current_auc = 0.5755517826825127
User 29970 AUC after training: 0.5721561969439728
User 29970 does not improve AUC. Reverting changes.
Training on augumented user 95014 47/50 current_auc = 0.5755517826825127
User 95014 AUC after training: 0.5738539898132428
User 95014 does not improve AUC. Reverting changes.
Training on augumented user 121761 48/50 current_auc = 0.5755517826825127
User 121761 AUC after training: 0.5755517826825127
User 121761 does not improve AUC. Reverting changes.
Training on augumented user 101822 49/50 current_auc = 0.5755517826825127
User 101822 AUC after training: 0.5755517826825127
User 101822 does not improve AUC. Reverting changes.
[2024-12-02 19:27:45.924318] start test user 60722 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:46.512887] start test user 60722 200/568 recall augumented users by random, augumented_users = [15266, 108633, 97279, 2557, 131072, 91340, 42904, 96972, 57167, 63932, 126130, 90238, 19064, 42660, 56576, 100346, 118180, 100328, 64198, 9147, 9884, 92845, 86741, 92743, 35525, 127129, 88388, 132381, 47433, 92992, 65550, 88879, 32153, 102411, 114612, 24205, 61606, 348, 119412, 77220, 88707, 93471, 27002, 98326, 89341, 78041, 84448, 33656, 65098, 6855]
[2024-12-02 19:27:46.529508] user = 60722 Cloud 200/568
[2024-12-02 19:27:46.540388] user = 60722 Local 200/568
[2024-12-02 19:27:46.629054] user = 60722 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:50.041270] user = 60722 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5874999999999999
Training on augumented user 15266 0/50 current_auc = 0.5874999999999999
User 15266 AUC after training: 0.5874999999999999
User 15266 does not improve AUC. Reverting changes.
Training on augumented user 108633 1/50 current_auc = 0.5874999999999999
User 108633 AUC after training: 0.5874999999999999
User 108633 does not improve AUC. Reverting changes.
Training on augumented user 97279 2/50 current_auc = 0.5874999999999999
User 97279 AUC after training: 0.5874999999999999
User 97279 does not improve AUC. Reverting changes.
Training on augumented user 2557 3/50 current_auc = 0.5874999999999999
User 2557 AUC after training: 0.6
User 2557 improves AUC. Keeping the model.
Training on augumented user 131072 4/50 current_auc = 0.6
User 131072 AUC after training: 0.6
User 131072 does not improve AUC. Reverting changes.
Training on augumented user 91340 5/50 current_auc = 0.6
User 91340 AUC after training: 0.5874999999999999
User 91340 does not improve AUC. Reverting changes.
Training on augumented user 42904 6/50 current_auc = 0.6
User 42904 AUC after training: 0.5874999999999999
User 42904 does not improve AUC. Reverting changes.
Training on augumented user 96972 7/50 current_auc = 0.6
User 96972 AUC after training: 0.6
User 96972 does not improve AUC. Reverting changes.
Training on augumented user 57167 8/50 current_auc = 0.6
User 57167 AUC after training: 0.6
User 57167 does not improve AUC. Reverting changes.
Training on augumented user 63932 9/50 current_auc = 0.6
User 63932 AUC after training: 0.575
User 63932 does not improve AUC. Reverting changes.
Training on augumented user 126130 10/50 current_auc = 0.6
User 126130 AUC after training: 0.5874999999999999
User 126130 does not improve AUC. Reverting changes.
Training on augumented user 90238 11/50 current_auc = 0.6
User 90238 AUC after training: 0.6
User 90238 does not improve AUC. Reverting changes.
Training on augumented user 19064 12/50 current_auc = 0.6
User 19064 AUC after training: 0.6
User 19064 does not improve AUC. Reverting changes.
Training on augumented user 42660 13/50 current_auc = 0.6
User 42660 AUC after training: 0.6
User 42660 does not improve AUC. Reverting changes.
Training on augumented user 56576 14/50 current_auc = 0.6
User 56576 AUC after training: 0.6
User 56576 does not improve AUC. Reverting changes.
Training on augumented user 100346 15/50 current_auc = 0.6
User 100346 AUC after training: 0.5874999999999999
User 100346 does not improve AUC. Reverting changes.
Training on augumented user 118180 16/50 current_auc = 0.6
User 118180 AUC after training: 0.6
User 118180 does not improve AUC. Reverting changes.
Training on augumented user 100328 17/50 current_auc = 0.6
User 100328 AUC after training: 0.6
User 100328 does not improve AUC. Reverting changes.
Training on augumented user 64198 18/50 current_auc = 0.6
User 64198 AUC after training: 0.6
User 64198 does not improve AUC. Reverting changes.
Training on augumented user 9147 19/50 current_auc = 0.6
User 9147 AUC after training: 0.6
User 9147 does not improve AUC. Reverting changes.
Training on augumented user 9884 20/50 current_auc = 0.6
User 9884 AUC after training: 0.6
User 9884 does not improve AUC. Reverting changes.
Training on augumented user 92845 21/50 current_auc = 0.6
User 92845 AUC after training: 0.6
User 92845 does not improve AUC. Reverting changes.
Training on augumented user 86741 22/50 current_auc = 0.6
User 86741 AUC after training: 0.6
User 86741 does not improve AUC. Reverting changes.
Training on augumented user 92743 23/50 current_auc = 0.6
User 92743 AUC after training: 0.6
User 92743 does not improve AUC. Reverting changes.
Training on augumented user 35525 24/50 current_auc = 0.6
User 35525 AUC after training: 0.6
User 35525 does not improve AUC. Reverting changes.
Training on augumented user 127129 25/50 current_auc = 0.6
User 127129 AUC after training: 0.6
User 127129 does not improve AUC. Reverting changes.
Training on augumented user 88388 26/50 current_auc = 0.6
User 88388 AUC after training: 0.6
User 88388 does not improve AUC. Reverting changes.
Training on augumented user 132381 27/50 current_auc = 0.6
User 132381 AUC after training: 0.5874999999999999
User 132381 does not improve AUC. Reverting changes.
Training on augumented user 47433 28/50 current_auc = 0.6
User 47433 AUC after training: 0.5874999999999999
User 47433 does not improve AUC. Reverting changes.
Training on augumented user 92992 29/50 current_auc = 0.6
User 92992 AUC after training: 0.6
User 92992 does not improve AUC. Reverting changes.
Training on augumented user 65550 30/50 current_auc = 0.6
User 65550 AUC after training: 0.6
User 65550 does not improve AUC. Reverting changes.
Training on augumented user 88879 31/50 current_auc = 0.6
User 88879 AUC after training: 0.5874999999999999
User 88879 does not improve AUC. Reverting changes.
Training on augumented user 32153 32/50 current_auc = 0.6
User 32153 AUC after training: 0.6
User 32153 does not improve AUC. Reverting changes.
Training on augumented user 102411 33/50 current_auc = 0.6
User 102411 AUC after training: 0.5874999999999999
User 102411 does not improve AUC. Reverting changes.
Training on augumented user 114612 34/50 current_auc = 0.6
User 114612 AUC after training: 0.6
User 114612 does not improve AUC. Reverting changes.
Training on augumented user 24205 35/50 current_auc = 0.6
User 24205 AUC after training: 0.5874999999999999
User 24205 does not improve AUC. Reverting changes.
Training on augumented user 61606 36/50 current_auc = 0.6
User 61606 AUC after training: 0.6
User 61606 does not improve AUC. Reverting changes.
Training on augumented user 348 37/50 current_auc = 0.6
User 348 AUC after training: 0.6
User 348 does not improve AUC. Reverting changes.
Training on augumented user 119412 38/50 current_auc = 0.6
User 119412 AUC after training: 0.5875
User 119412 does not improve AUC. Reverting changes.
Training on augumented user 77220 39/50 current_auc = 0.6
User 77220 AUC after training: 0.5874999999999999
User 77220 does not improve AUC. Reverting changes.
Training on augumented user 88707 40/50 current_auc = 0.6
User 88707 AUC after training: 0.5874999999999999
User 88707 does not improve AUC. Reverting changes.
Training on augumented user 93471 41/50 current_auc = 0.6
User 93471 AUC after training: 0.6
User 93471 does not improve AUC. Reverting changes.
Training on augumented user 27002 42/50 current_auc = 0.6
User 27002 AUC after training: 0.6
User 27002 does not improve AUC. Reverting changes.
Training on augumented user 98326 43/50 current_auc = 0.6
User 98326 AUC after training: 0.6
User 98326 does not improve AUC. Reverting changes.
Training on augumented user 89341 44/50 current_auc = 0.6
User 89341 AUC after training: 0.6
User 89341 does not improve AUC. Reverting changes.
Training on augumented user 78041 45/50 current_auc = 0.6
User 78041 AUC after training: 0.6
User 78041 does not improve AUC. Reverting changes.
Training on augumented user 84448 46/50 current_auc = 0.6
User 84448 AUC after training: 0.5874999999999999
User 84448 does not improve AUC. Reverting changes.
Training on augumented user 33656 47/50 current_auc = 0.6
User 33656 AUC after training: 0.5874999999999999
User 33656 does not improve AUC. Reverting changes.
Training on augumented user 65098 48/50 current_auc = 0.6
User 65098 AUC after training: 0.5874999999999999
User 65098 does not improve AUC. Reverting changes.
Training on augumented user 6855 49/50 current_auc = 0.6
User 6855 AUC after training: 0.6
User 6855 does not improve AUC. Reverting changes.
[2024-12-02 19:28:22.766121] start test user 60726 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:23.748535] start test user 60726 201/568 recall augumented users by random, augumented_users = [117739, 43515, 8718, 7690, 107730, 62127, 1504, 2345, 35225, 64215, 101944, 116884, 17526, 135241, 129678, 6631, 91243, 41765, 23641, 99512, 62805, 65153, 54475, 136450, 1247, 27589, 115409, 108649, 26420, 59174, 122314, 12283, 17223, 24098, 39019, 134412, 44102, 25561, 34691, 48296, 113463, 76610, 26354, 52182, 13938, 26895, 70784, 9504, 83690, 128992]
[2024-12-02 19:28:23.772335] user = 60726 Cloud 201/568
[2024-12-02 19:28:23.797524] user = 60726 Local 201/568
[2024-12-02 19:28:23.836349] user = 60726 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:26.201404] user = 60726 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 117739 0/50 current_auc = 0.375
User 117739 AUC after training: 0.375
User 117739 does not improve AUC. Reverting changes.
Training on augumented user 43515 1/50 current_auc = 0.375
User 43515 AUC after training: 0.375
User 43515 does not improve AUC. Reverting changes.
Training on augumented user 8718 2/50 current_auc = 0.375
User 8718 AUC after training: 0.375
User 8718 does not improve AUC. Reverting changes.
Training on augumented user 7690 3/50 current_auc = 0.375
User 7690 AUC after training: 0.375
User 7690 does not improve AUC. Reverting changes.
Training on augumented user 107730 4/50 current_auc = 0.375
User 107730 AUC after training: 0.375
User 107730 does not improve AUC. Reverting changes.
Training on augumented user 62127 5/50 current_auc = 0.375
User 62127 AUC after training: 0.375
User 62127 does not improve AUC. Reverting changes.
Training on augumented user 1504 6/50 current_auc = 0.375
User 1504 AUC after training: 0.375
User 1504 does not improve AUC. Reverting changes.
Training on augumented user 2345 7/50 current_auc = 0.375
User 2345 AUC after training: 0.375
User 2345 does not improve AUC. Reverting changes.
Training on augumented user 35225 8/50 current_auc = 0.375
User 35225 AUC after training: 0.375
User 35225 does not improve AUC. Reverting changes.
Training on augumented user 64215 9/50 current_auc = 0.375
User 64215 AUC after training: 0.375
User 64215 does not improve AUC. Reverting changes.
Training on augumented user 101944 10/50 current_auc = 0.375
User 101944 AUC after training: 0.375
User 101944 does not improve AUC. Reverting changes.
Training on augumented user 116884 11/50 current_auc = 0.375
User 116884 AUC after training: 0.375
User 116884 does not improve AUC. Reverting changes.
Training on augumented user 17526 12/50 current_auc = 0.375
User 17526 AUC after training: 0.375
User 17526 does not improve AUC. Reverting changes.
Training on augumented user 135241 13/50 current_auc = 0.375
User 135241 AUC after training: 0.375
User 135241 does not improve AUC. Reverting changes.
Training on augumented user 129678 14/50 current_auc = 0.375
User 129678 AUC after training: 0.375
User 129678 does not improve AUC. Reverting changes.
Training on augumented user 6631 15/50 current_auc = 0.375
User 6631 AUC after training: 0.375
User 6631 does not improve AUC. Reverting changes.
Training on augumented user 91243 16/50 current_auc = 0.375
User 91243 AUC after training: 0.375
User 91243 does not improve AUC. Reverting changes.
Training on augumented user 41765 17/50 current_auc = 0.375
User 41765 AUC after training: 0.375
User 41765 does not improve AUC. Reverting changes.
Training on augumented user 23641 18/50 current_auc = 0.375
User 23641 AUC after training: 0.375
User 23641 does not improve AUC. Reverting changes.
Training on augumented user 99512 19/50 current_auc = 0.375
User 99512 AUC after training: 0.375
User 99512 does not improve AUC. Reverting changes.
Training on augumented user 62805 20/50 current_auc = 0.375
User 62805 AUC after training: 0.375
User 62805 does not improve AUC. Reverting changes.
Training on augumented user 65153 21/50 current_auc = 0.375
User 65153 AUC after training: 0.375
User 65153 does not improve AUC. Reverting changes.
Training on augumented user 54475 22/50 current_auc = 0.375
User 54475 AUC after training: 0.375
User 54475 does not improve AUC. Reverting changes.
Training on augumented user 136450 23/50 current_auc = 0.375
User 136450 AUC after training: 0.375
User 136450 does not improve AUC. Reverting changes.
Training on augumented user 1247 24/50 current_auc = 0.375
User 1247 AUC after training: 0.375
User 1247 does not improve AUC. Reverting changes.
Training on augumented user 27589 25/50 current_auc = 0.375
User 27589 AUC after training: 0.375
User 27589 does not improve AUC. Reverting changes.
Training on augumented user 115409 26/50 current_auc = 0.375
User 115409 AUC after training: 0.375
User 115409 does not improve AUC. Reverting changes.
Training on augumented user 108649 27/50 current_auc = 0.375
User 108649 AUC after training: 0.375
User 108649 does not improve AUC. Reverting changes.
Training on augumented user 26420 28/50 current_auc = 0.375
User 26420 AUC after training: 0.375
User 26420 does not improve AUC. Reverting changes.
Training on augumented user 59174 29/50 current_auc = 0.375
User 59174 AUC after training: 0.375
User 59174 does not improve AUC. Reverting changes.
Training on augumented user 122314 30/50 current_auc = 0.375
User 122314 AUC after training: 0.375
User 122314 does not improve AUC. Reverting changes.
Training on augumented user 12283 31/50 current_auc = 0.375
User 12283 AUC after training: 0.375
User 12283 does not improve AUC. Reverting changes.
Training on augumented user 17223 32/50 current_auc = 0.375
User 17223 AUC after training: 0.375
User 17223 does not improve AUC. Reverting changes.
Training on augumented user 24098 33/50 current_auc = 0.375
User 24098 AUC after training: 0.375
User 24098 does not improve AUC. Reverting changes.
Training on augumented user 39019 34/50 current_auc = 0.375
User 39019 AUC after training: 0.375
User 39019 does not improve AUC. Reverting changes.
Training on augumented user 134412 35/50 current_auc = 0.375
User 134412 AUC after training: 0.375
User 134412 does not improve AUC. Reverting changes.
Training on augumented user 44102 36/50 current_auc = 0.375
User 44102 AUC after training: 0.375
User 44102 does not improve AUC. Reverting changes.
Training on augumented user 25561 37/50 current_auc = 0.375
User 25561 AUC after training: 0.375
User 25561 does not improve AUC. Reverting changes.
Training on augumented user 34691 38/50 current_auc = 0.375
User 34691 AUC after training: 0.375
User 34691 does not improve AUC. Reverting changes.
Training on augumented user 48296 39/50 current_auc = 0.375
User 48296 AUC after training: 0.375
User 48296 does not improve AUC. Reverting changes.
Training on augumented user 113463 40/50 current_auc = 0.375
User 113463 AUC after training: 0.375
User 113463 does not improve AUC. Reverting changes.
Training on augumented user 76610 41/50 current_auc = 0.375
User 76610 AUC after training: 0.375
User 76610 does not improve AUC. Reverting changes.
Training on augumented user 26354 42/50 current_auc = 0.375
User 26354 AUC after training: 0.375
User 26354 does not improve AUC. Reverting changes.
Training on augumented user 52182 43/50 current_auc = 0.375
User 52182 AUC after training: 0.375
User 52182 does not improve AUC. Reverting changes.
Training on augumented user 13938 44/50 current_auc = 0.375
User 13938 AUC after training: 0.375
User 13938 does not improve AUC. Reverting changes.
Training on augumented user 26895 45/50 current_auc = 0.375
User 26895 AUC after training: 0.375
User 26895 does not improve AUC. Reverting changes.
Training on augumented user 70784 46/50 current_auc = 0.375
User 70784 AUC after training: 0.375
User 70784 does not improve AUC. Reverting changes.
Training on augumented user 9504 47/50 current_auc = 0.375
User 9504 AUC after training: 0.375
User 9504 does not improve AUC. Reverting changes.
Training on augumented user 83690 48/50 current_auc = 0.375
User 83690 AUC after training: 0.375
User 83690 does not improve AUC. Reverting changes.
Training on augumented user 128992 49/50 current_auc = 0.375
User 128992 AUC after training: 0.375
User 128992 does not improve AUC. Reverting changes.
[2024-12-02 19:28:54.938893] start test user 60752 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:55.472417] start test user 60752 202/568 recall augumented users by random, augumented_users = [109536, 54906, 16154, 81521, 88661, 24913, 117109, 49778, 135439, 114944, 5345, 95990, 76918, 2648, 8902, 120560, 4037, 41853, 76178, 94927, 45141, 61229, 38538, 80032, 66189, 110901, 62514, 30763, 126294, 58281, 66686, 79116, 124695, 77955, 120301, 27689, 107938, 14801, 93038, 32776, 28030, 111421, 48161, 64802, 78088, 11471, 134982, 135994, 65411, 69196]
[2024-12-02 19:28:55.488787] user = 60752 Cloud 202/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:28:55.495309] user = 60752 Local 202/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:28:55.525485] user = 60752 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:28:57.918714] user = 60752 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 109536 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109536 AUC after training: 0.5
User 109536 does not improve AUC. Reverting changes.
Training on augumented user 54906 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54906 AUC after training: 0.5
User 54906 does not improve AUC. Reverting changes.
Training on augumented user 16154 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16154 AUC after training: 0.5
User 16154 does not improve AUC. Reverting changes.
Training on augumented user 81521 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81521 AUC after training: 0.5
User 81521 does not improve AUC. Reverting changes.
Training on augumented user 88661 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88661 AUC after training: 0.5
User 88661 does not improve AUC. Reverting changes.
Training on augumented user 24913 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24913 AUC after training: 0.5
User 24913 does not improve AUC. Reverting changes.
Training on augumented user 117109 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117109 AUC after training: 0.5
User 117109 does not improve AUC. Reverting changes.
Training on augumented user 49778 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49778 AUC after training: 0.5
User 49778 does not improve AUC. Reverting changes.
Training on augumented user 135439 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135439 AUC after training: 0.5
User 135439 does not improve AUC. Reverting changes.
Training on augumented user 114944 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114944 AUC after training: 0.5
User 114944 does not improve AUC. Reverting changes.
Training on augumented user 5345 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5345 AUC after training: 0.5
User 5345 does not improve AUC. Reverting changes.
Training on augumented user 95990 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95990 AUC after training: 0.5
User 95990 does not improve AUC. Reverting changes.
Training on augumented user 76918 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76918 AUC after training: 0.5
User 76918 does not improve AUC. Reverting changes.
Training on augumented user 2648 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2648 AUC after training: 0.5
User 2648 does not improve AUC. Reverting changes.
Training on augumented user 8902 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8902 AUC after training: 0.5
User 8902 does not improve AUC. Reverting changes.
Training on augumented user 120560 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120560 AUC after training: 0.5
User 120560 does not improve AUC. Reverting changes.
Training on augumented user 4037 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4037 AUC after training: 0.5
User 4037 does not improve AUC. Reverting changes.
Training on augumented user 41853 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41853 AUC after training: 0.5
User 41853 does not improve AUC. Reverting changes.
Training on augumented user 76178 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76178 AUC after training: 0.5
User 76178 does not improve AUC. Reverting changes.
Training on augumented user 94927 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94927 AUC after training: 0.5
User 94927 does not improve AUC. Reverting changes.
Training on augumented user 45141 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45141 AUC after training: 0.5
User 45141 does not improve AUC. Reverting changes.
Training on augumented user 61229 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61229 AUC after training: 0.5
User 61229 does not improve AUC. Reverting changes.
Training on augumented user 38538 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38538 AUC after training: 0.5
User 38538 does not improve AUC. Reverting changes.
Training on augumented user 80032 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80032 AUC after training: 0.5
User 80032 does not improve AUC. Reverting changes.
Training on augumented user 66189 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66189 AUC after training: 0.5
User 66189 does not improve AUC. Reverting changes.
Training on augumented user 110901 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110901 AUC after training: 0.5
User 110901 does not improve AUC. Reverting changes.
Training on augumented user 62514 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62514 AUC after training: 0.5
User 62514 does not improve AUC. Reverting changes.
Training on augumented user 30763 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30763 AUC after training: 0.5
User 30763 does not improve AUC. Reverting changes.
Training on augumented user 126294 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126294 AUC after training: 0.5
User 126294 does not improve AUC. Reverting changes.
Training on augumented user 58281 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58281 AUC after training: 0.5
User 58281 does not improve AUC. Reverting changes.
Training on augumented user 66686 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66686 AUC after training: 0.5
User 66686 does not improve AUC. Reverting changes.
Training on augumented user 79116 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79116 AUC after training: 0.5
User 79116 does not improve AUC. Reverting changes.
Training on augumented user 124695 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124695 AUC after training: 0.5
User 124695 does not improve AUC. Reverting changes.
Training on augumented user 77955 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77955 AUC after training: 0.5
User 77955 does not improve AUC. Reverting changes.
Training on augumented user 120301 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120301 AUC after training: 0.5
User 120301 does not improve AUC. Reverting changes.
Training on augumented user 27689 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27689 AUC after training: 0.5
User 27689 does not improve AUC. Reverting changes.
Training on augumented user 107938 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107938 AUC after training: 0.5
User 107938 does not improve AUC. Reverting changes.
Training on augumented user 14801 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14801 AUC after training: 0.5
User 14801 does not improve AUC. Reverting changes.
Training on augumented user 93038 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93038 AUC after training: 0.5
User 93038 does not improve AUC. Reverting changes.
Training on augumented user 32776 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32776 AUC after training: 0.5
User 32776 does not improve AUC. Reverting changes.
Training on augumented user 28030 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28030 AUC after training: 0.5
User 28030 does not improve AUC. Reverting changes.
Training on augumented user 111421 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111421 AUC after training: 0.5
User 111421 does not improve AUC. Reverting changes.
Training on augumented user 48161 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48161 AUC after training: 0.5
User 48161 does not improve AUC. Reverting changes.
Training on augumented user 64802 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64802 AUC after training: 0.5
User 64802 does not improve AUC. Reverting changes.
Training on augumented user 78088 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78088 AUC after training: 0.5
User 78088 does not improve AUC. Reverting changes.
Training on augumented user 11471 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11471 AUC after training: 0.5
User 11471 does not improve AUC. Reverting changes.
Training on augumented user 134982 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134982 AUC after training: 0.5
User 134982 does not improve AUC. Reverting changes.
Training on augumented user 135994 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135994 AUC after training: 0.5
User 135994 does not improve AUC. Reverting changes.
Training on augumented user 65411 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65411 AUC after training: 0.5
User 65411 does not improve AUC. Reverting changes.
Training on augumented user 69196 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69196 AUC after training: 0.5
User 69196 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:27.404811] start test user 60773 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:27.947344] start test user 60773 203/568 recall augumented users by random, augumented_users = [75401, 25800, 106021, 80678, 72762, 11378, 114937, 32304, 88535, 122392, 48643, 10366, 67675, 92748, 50249, 30354, 16522, 74112, 65915, 78204, 106073, 78262, 44324, 36907, 89587, 114132, 20161, 137369, 36096, 74700, 61371, 1798, 130307, 117872, 137513, 74061, 130275, 21778, 128510, 8948, 21451, 101083, 3856, 119844, 98469, 24400, 127982, 43058, 44902, 45711]
[2024-12-02 19:29:27.963361] user = 60773 Cloud 203/568
[2024-12-02 19:29:27.973676] user = 60773 Local 203/568
[2024-12-02 19:29:28.069166] user = 60773 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:30.785770] user = 60773 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 75401 0/50 current_auc = 0.0
User 75401 AUC after training: 0.0
User 75401 does not improve AUC. Reverting changes.
Training on augumented user 25800 1/50 current_auc = 0.0
User 25800 AUC after training: 0.0
User 25800 does not improve AUC. Reverting changes.
Training on augumented user 106021 2/50 current_auc = 0.0
User 106021 AUC after training: 0.0
User 106021 does not improve AUC. Reverting changes.
Training on augumented user 80678 3/50 current_auc = 0.0
User 80678 AUC after training: 0.0
User 80678 does not improve AUC. Reverting changes.
Training on augumented user 72762 4/50 current_auc = 0.0
User 72762 AUC after training: 0.0
User 72762 does not improve AUC. Reverting changes.
Training on augumented user 11378 5/50 current_auc = 0.0
User 11378 AUC after training: 0.0
User 11378 does not improve AUC. Reverting changes.
Training on augumented user 114937 6/50 current_auc = 0.0
User 114937 AUC after training: 0.0
User 114937 does not improve AUC. Reverting changes.
Training on augumented user 32304 7/50 current_auc = 0.0
User 32304 AUC after training: 0.0
User 32304 does not improve AUC. Reverting changes.
Training on augumented user 88535 8/50 current_auc = 0.0
User 88535 AUC after training: 0.0
User 88535 does not improve AUC. Reverting changes.
Training on augumented user 122392 9/50 current_auc = 0.0
User 122392 AUC after training: 0.0
User 122392 does not improve AUC. Reverting changes.
Training on augumented user 48643 10/50 current_auc = 0.0
User 48643 AUC after training: 0.0
User 48643 does not improve AUC. Reverting changes.
Training on augumented user 10366 11/50 current_auc = 0.0
User 10366 AUC after training: 0.0
User 10366 does not improve AUC. Reverting changes.
Training on augumented user 67675 12/50 current_auc = 0.0
User 67675 AUC after training: 0.0
User 67675 does not improve AUC. Reverting changes.
Training on augumented user 92748 13/50 current_auc = 0.0
User 92748 AUC after training: 0.0
User 92748 does not improve AUC. Reverting changes.
Training on augumented user 50249 14/50 current_auc = 0.0
User 50249 AUC after training: 0.0
User 50249 does not improve AUC. Reverting changes.
Training on augumented user 30354 15/50 current_auc = 0.0
User 30354 AUC after training: 0.0
User 30354 does not improve AUC. Reverting changes.
Training on augumented user 16522 16/50 current_auc = 0.0
User 16522 AUC after training: 0.0
User 16522 does not improve AUC. Reverting changes.
Training on augumented user 74112 17/50 current_auc = 0.0
User 74112 AUC after training: 0.0
User 74112 does not improve AUC. Reverting changes.
Training on augumented user 65915 18/50 current_auc = 0.0
User 65915 AUC after training: 0.0
User 65915 does not improve AUC. Reverting changes.
Training on augumented user 78204 19/50 current_auc = 0.0
User 78204 AUC after training: 0.0
User 78204 does not improve AUC. Reverting changes.
Training on augumented user 106073 20/50 current_auc = 0.0
User 106073 AUC after training: 0.0
User 106073 does not improve AUC. Reverting changes.
Training on augumented user 78262 21/50 current_auc = 0.0
User 78262 AUC after training: 0.0
User 78262 does not improve AUC. Reverting changes.
Training on augumented user 44324 22/50 current_auc = 0.0
User 44324 AUC after training: 0.0
User 44324 does not improve AUC. Reverting changes.
Training on augumented user 36907 23/50 current_auc = 0.0
User 36907 AUC after training: 0.0
User 36907 does not improve AUC. Reverting changes.
Training on augumented user 89587 24/50 current_auc = 0.0
User 89587 AUC after training: 0.0
User 89587 does not improve AUC. Reverting changes.
Training on augumented user 114132 25/50 current_auc = 0.0
User 114132 AUC after training: 0.0
User 114132 does not improve AUC. Reverting changes.
Training on augumented user 20161 26/50 current_auc = 0.0
User 20161 AUC after training: 0.0
User 20161 does not improve AUC. Reverting changes.
Training on augumented user 137369 27/50 current_auc = 0.0
User 137369 AUC after training: 0.0
User 137369 does not improve AUC. Reverting changes.
Training on augumented user 36096 28/50 current_auc = 0.0
User 36096 AUC after training: 0.0
User 36096 does not improve AUC. Reverting changes.
Training on augumented user 74700 29/50 current_auc = 0.0
User 74700 AUC after training: 0.0
User 74700 does not improve AUC. Reverting changes.
Training on augumented user 61371 30/50 current_auc = 0.0
User 61371 AUC after training: 0.0
User 61371 does not improve AUC. Reverting changes.
Training on augumented user 1798 31/50 current_auc = 0.0
User 1798 AUC after training: 0.0
User 1798 does not improve AUC. Reverting changes.
Training on augumented user 130307 32/50 current_auc = 0.0
User 130307 AUC after training: 0.0
User 130307 does not improve AUC. Reverting changes.
Training on augumented user 117872 33/50 current_auc = 0.0
User 117872 AUC after training: 0.0
User 117872 does not improve AUC. Reverting changes.
Training on augumented user 137513 34/50 current_auc = 0.0
User 137513 AUC after training: 0.0
User 137513 does not improve AUC. Reverting changes.
Training on augumented user 74061 35/50 current_auc = 0.0
User 74061 AUC after training: 0.0
User 74061 does not improve AUC. Reverting changes.
Training on augumented user 130275 36/50 current_auc = 0.0
User 130275 AUC after training: 0.0
User 130275 does not improve AUC. Reverting changes.
Training on augumented user 21778 37/50 current_auc = 0.0
User 21778 AUC after training: 0.0
User 21778 does not improve AUC. Reverting changes.
Training on augumented user 128510 38/50 current_auc = 0.0
User 128510 AUC after training: 0.0
User 128510 does not improve AUC. Reverting changes.
Training on augumented user 8948 39/50 current_auc = 0.0
User 8948 AUC after training: 0.0
User 8948 does not improve AUC. Reverting changes.
Training on augumented user 21451 40/50 current_auc = 0.0
User 21451 AUC after training: 0.0
User 21451 does not improve AUC. Reverting changes.
Training on augumented user 101083 41/50 current_auc = 0.0
User 101083 AUC after training: 0.0
User 101083 does not improve AUC. Reverting changes.
Training on augumented user 3856 42/50 current_auc = 0.0
User 3856 AUC after training: 0.0
User 3856 does not improve AUC. Reverting changes.
Training on augumented user 119844 43/50 current_auc = 0.0
User 119844 AUC after training: 0.0
User 119844 does not improve AUC. Reverting changes.
Training on augumented user 98469 44/50 current_auc = 0.0
User 98469 AUC after training: 0.0
User 98469 does not improve AUC. Reverting changes.
Training on augumented user 24400 45/50 current_auc = 0.0
User 24400 AUC after training: 0.0
User 24400 does not improve AUC. Reverting changes.
Training on augumented user 127982 46/50 current_auc = 0.0
User 127982 AUC after training: 0.0
User 127982 does not improve AUC. Reverting changes.
Training on augumented user 43058 47/50 current_auc = 0.0
User 43058 AUC after training: 0.0
User 43058 does not improve AUC. Reverting changes.
Training on augumented user 44902 48/50 current_auc = 0.0
User 44902 AUC after training: 0.0
User 44902 does not improve AUC. Reverting changes.
Training on augumented user 45711 49/50 current_auc = 0.0
User 45711 AUC after training: 0.0
User 45711 does not improve AUC. Reverting changes.
[2024-12-02 19:29:53.767992] start test user 60777 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:54.188623] start test user 60777 204/568 recall augumented users by random, augumented_users = [63970, 53802, 82422, 65693, 118434, 43635, 52140, 115192, 5619, 132830, 125112, 121044, 113693, 137724, 128845, 85445, 113328, 55170, 100831, 48821, 15135, 118720, 134066, 56993, 43777, 88803, 10061, 86156, 91929, 17873, 109266, 21673, 72356, 105319, 87094, 43520, 17791, 39941, 70945, 87947, 107584, 73160, 1117, 113937, 70816, 60196, 113361, 125481, 97007, 68508]
[2024-12-02 19:29:54.202805] user = 60777 Cloud 204/568
[2024-12-02 19:29:54.216486] user = 60777 Local 204/568
[2024-12-02 19:29:54.265626] user = 60777 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:56.874172] user = 60777 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47476190476190483
Training on augumented user 63970 0/50 current_auc = 0.47476190476190483
User 63970 AUC after training: 0.4738095238095239
User 63970 does not improve AUC. Reverting changes.
Training on augumented user 53802 1/50 current_auc = 0.47476190476190483
User 53802 AUC after training: 0.4747619047619047
User 53802 does not improve AUC. Reverting changes.
Training on augumented user 82422 2/50 current_auc = 0.47476190476190483
User 82422 AUC after training: 0.4747619047619048
User 82422 does not improve AUC. Reverting changes.
Training on augumented user 65693 3/50 current_auc = 0.47476190476190483
User 65693 AUC after training: 0.4738095238095238
User 65693 does not improve AUC. Reverting changes.
Training on augumented user 118434 4/50 current_auc = 0.47476190476190483
User 118434 AUC after training: 0.470952380952381
User 118434 does not improve AUC. Reverting changes.
Training on augumented user 43635 5/50 current_auc = 0.47476190476190483
User 43635 AUC after training: 0.4738095238095238
User 43635 does not improve AUC. Reverting changes.
Training on augumented user 52140 6/50 current_auc = 0.47476190476190483
User 52140 AUC after training: 0.47476190476190483
User 52140 does not improve AUC. Reverting changes.
Training on augumented user 115192 7/50 current_auc = 0.47476190476190483
User 115192 AUC after training: 0.4766666666666667
User 115192 improves AUC. Keeping the model.
Training on augumented user 5619 8/50 current_auc = 0.4766666666666667
User 5619 AUC after training: 0.4757142857142857
User 5619 does not improve AUC. Reverting changes.
Training on augumented user 132830 9/50 current_auc = 0.4766666666666667
User 132830 AUC after training: 0.4766666666666667
User 132830 does not improve AUC. Reverting changes.
Training on augumented user 125112 10/50 current_auc = 0.4766666666666667
User 125112 AUC after training: 0.4766666666666667
User 125112 does not improve AUC. Reverting changes.
Training on augumented user 121044 11/50 current_auc = 0.4766666666666667
User 121044 AUC after training: 0.4747619047619047
User 121044 does not improve AUC. Reverting changes.
Training on augumented user 113693 12/50 current_auc = 0.4766666666666667
User 113693 AUC after training: 0.47333333333333333
User 113693 does not improve AUC. Reverting changes.
Training on augumented user 137724 13/50 current_auc = 0.4766666666666667
User 137724 AUC after training: 0.4771428571428572
User 137724 improves AUC. Keeping the model.
Training on augumented user 128845 14/50 current_auc = 0.4771428571428572
User 128845 AUC after training: 0.4738095238095238
User 128845 does not improve AUC. Reverting changes.
Training on augumented user 85445 15/50 current_auc = 0.4771428571428572
User 85445 AUC after training: 0.4709523809523809
User 85445 does not improve AUC. Reverting changes.
Training on augumented user 113328 16/50 current_auc = 0.4771428571428572
User 113328 AUC after training: 0.47571428571428576
User 113328 does not improve AUC. Reverting changes.
Training on augumented user 55170 17/50 current_auc = 0.4771428571428572
User 55170 AUC after training: 0.47904761904761906
User 55170 improves AUC. Keeping the model.
Training on augumented user 100831 18/50 current_auc = 0.47904761904761906
User 100831 AUC after training: 0.47809523809523813
User 100831 does not improve AUC. Reverting changes.
Training on augumented user 48821 19/50 current_auc = 0.47904761904761906
User 48821 AUC after training: 0.4738095238095238
User 48821 does not improve AUC. Reverting changes.
Training on augumented user 15135 20/50 current_auc = 0.47904761904761906
User 15135 AUC after training: 0.4776190476190476
User 15135 does not improve AUC. Reverting changes.
Training on augumented user 118720 21/50 current_auc = 0.47904761904761906
User 118720 AUC after training: 0.47809523809523813
User 118720 does not improve AUC. Reverting changes.
Training on augumented user 134066 22/50 current_auc = 0.47904761904761906
User 134066 AUC after training: 0.4747619047619048
User 134066 does not improve AUC. Reverting changes.
Training on augumented user 56993 23/50 current_auc = 0.47904761904761906
User 56993 AUC after training: 0.4776190476190476
User 56993 does not improve AUC. Reverting changes.
Training on augumented user 43777 24/50 current_auc = 0.47904761904761906
User 43777 AUC after training: 0.47809523809523813
User 43777 does not improve AUC. Reverting changes.
Training on augumented user 88803 25/50 current_auc = 0.47904761904761906
User 88803 AUC after training: 0.4771428571428572
User 88803 does not improve AUC. Reverting changes.
Training on augumented user 10061 26/50 current_auc = 0.47904761904761906
User 10061 AUC after training: 0.4776190476190476
User 10061 does not improve AUC. Reverting changes.
Training on augumented user 86156 27/50 current_auc = 0.47904761904761906
User 86156 AUC after training: 0.4785714285714286
User 86156 does not improve AUC. Reverting changes.
Training on augumented user 91929 28/50 current_auc = 0.47904761904761906
User 91929 AUC after training: 0.4795238095238095
User 91929 improves AUC. Keeping the model.
Training on augumented user 17873 29/50 current_auc = 0.4795238095238095
User 17873 AUC after training: 0.47857142857142854
User 17873 does not improve AUC. Reverting changes.
Training on augumented user 109266 30/50 current_auc = 0.4795238095238095
User 109266 AUC after training: 0.47857142857142854
User 109266 does not improve AUC. Reverting changes.
Training on augumented user 21673 31/50 current_auc = 0.4795238095238095
User 21673 AUC after training: 0.4795238095238096
User 21673 improves AUC. Keeping the model.
Training on augumented user 72356 32/50 current_auc = 0.4795238095238096
User 72356 AUC after training: 0.4804761904761905
User 72356 improves AUC. Keeping the model.
Training on augumented user 105319 33/50 current_auc = 0.4804761904761905
User 105319 AUC after training: 0.4795238095238096
User 105319 does not improve AUC. Reverting changes.
Training on augumented user 87094 34/50 current_auc = 0.4804761904761905
User 87094 AUC after training: 0.47904761904761906
User 87094 does not improve AUC. Reverting changes.
Training on augumented user 43520 35/50 current_auc = 0.4804761904761905
User 43520 AUC after training: 0.48
User 43520 does not improve AUC. Reverting changes.
Training on augumented user 17791 36/50 current_auc = 0.4804761904761905
User 17791 AUC after training: 0.48
User 17791 does not improve AUC. Reverting changes.
Training on augumented user 39941 37/50 current_auc = 0.4804761904761905
User 39941 AUC after training: 0.47857142857142854
User 39941 does not improve AUC. Reverting changes.
Training on augumented user 70945 38/50 current_auc = 0.4804761904761905
User 70945 AUC after training: 0.4761904761904762
User 70945 does not improve AUC. Reverting changes.
Training on augumented user 87947 39/50 current_auc = 0.4804761904761905
User 87947 AUC after training: 0.47809523809523813
User 87947 does not improve AUC. Reverting changes.
Training on augumented user 107584 40/50 current_auc = 0.4804761904761905
User 107584 AUC after training: 0.4795238095238096
User 107584 does not improve AUC. Reverting changes.
Training on augumented user 73160 41/50 current_auc = 0.4804761904761905
User 73160 AUC after training: 0.48142857142857143
User 73160 improves AUC. Keeping the model.
Training on augumented user 1117 42/50 current_auc = 0.48142857142857143
User 1117 AUC after training: 0.48142857142857143
User 1117 does not improve AUC. Reverting changes.
Training on augumented user 113937 43/50 current_auc = 0.48142857142857143
User 113937 AUC after training: 0.4809523809523809
User 113937 does not improve AUC. Reverting changes.
Training on augumented user 70816 44/50 current_auc = 0.48142857142857143
User 70816 AUC after training: 0.48
User 70816 does not improve AUC. Reverting changes.
Training on augumented user 60196 45/50 current_auc = 0.48142857142857143
User 60196 AUC after training: 0.48142857142857143
User 60196 does not improve AUC. Reverting changes.
Training on augumented user 113361 46/50 current_auc = 0.48142857142857143
User 113361 AUC after training: 0.48190476190476195
User 113361 improves AUC. Keeping the model.
Training on augumented user 125481 47/50 current_auc = 0.48190476190476195
User 125481 AUC after training: 0.48142857142857143
User 125481 does not improve AUC. Reverting changes.
Training on augumented user 97007 48/50 current_auc = 0.48190476190476195
User 97007 AUC after training: 0.48142857142857143
User 97007 does not improve AUC. Reverting changes.
Training on augumented user 68508 49/50 current_auc = 0.48190476190476195
User 68508 AUC after training: 0.48190476190476184
User 68508 does not improve AUC. Reverting changes.
[2024-12-02 19:30:28.454737] start test user 60805 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:28.989202] start test user 60805 205/568 recall augumented users by random, augumented_users = [51688, 79136, 12357, 45685, 64063, 107940, 123864, 13468, 108558, 48104, 56497, 39919, 129063, 64, 79704, 109594, 28494, 7311, 131595, 21945, 90493, 25392, 55157, 66995, 81164, 37390, 35206, 107947, 81088, 132912, 54054, 24501, 108780, 109083, 26862, 60943, 33882, 121585, 102924, 111394, 22223, 101093, 107171, 37345, 74675, 129909, 30988, 67509, 119707, 32753]
[2024-12-02 19:30:29.004443] user = 60805 Cloud 205/568
[2024-12-02 19:30:29.021951] user = 60805 Local 205/568
[2024-12-02 19:30:29.124061] user = 60805 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:30.965248] user = 60805 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5954838709677419
Training on augumented user 51688 0/50 current_auc = 0.5954838709677419
User 51688 AUC after training: 0.5967741935483871
User 51688 improves AUC. Keeping the model.
Training on augumented user 79136 1/50 current_auc = 0.5967741935483871
User 79136 AUC after training: 0.5967741935483871
User 79136 does not improve AUC. Reverting changes.
Training on augumented user 12357 2/50 current_auc = 0.5967741935483871
User 12357 AUC after training: 0.5967741935483871
User 12357 does not improve AUC. Reverting changes.
Training on augumented user 45685 3/50 current_auc = 0.5967741935483871
User 45685 AUC after training: 0.5980645161290322
User 45685 improves AUC. Keeping the model.
Training on augumented user 64063 4/50 current_auc = 0.5980645161290322
User 64063 AUC after training: 0.5961290322580646
User 64063 does not improve AUC. Reverting changes.
Training on augumented user 107940 5/50 current_auc = 0.5980645161290322
User 107940 AUC after training: 0.5974193548387097
User 107940 does not improve AUC. Reverting changes.
Training on augumented user 123864 6/50 current_auc = 0.5980645161290322
User 123864 AUC after training: 0.5980645161290322
User 123864 does not improve AUC. Reverting changes.
Training on augumented user 13468 7/50 current_auc = 0.5980645161290322
User 13468 AUC after training: 0.5974193548387097
User 13468 does not improve AUC. Reverting changes.
Training on augumented user 108558 8/50 current_auc = 0.5980645161290322
User 108558 AUC after training: 0.5954838709677419
User 108558 does not improve AUC. Reverting changes.
Training on augumented user 48104 9/50 current_auc = 0.5980645161290322
User 48104 AUC after training: 0.5987096774193549
User 48104 improves AUC. Keeping the model.
Training on augumented user 56497 10/50 current_auc = 0.5987096774193549
User 56497 AUC after training: 0.5993548387096774
User 56497 improves AUC. Keeping the model.
Training on augumented user 39919 11/50 current_auc = 0.5993548387096774
User 39919 AUC after training: 0.5993548387096774
User 39919 does not improve AUC. Reverting changes.
Training on augumented user 129063 12/50 current_auc = 0.5993548387096774
User 129063 AUC after training: 0.5993548387096774
User 129063 does not improve AUC. Reverting changes.
Training on augumented user 64 13/50 current_auc = 0.5993548387096774
User 64 AUC after training: 0.5993548387096774
User 64 does not improve AUC. Reverting changes.
Training on augumented user 79704 14/50 current_auc = 0.5993548387096774
User 79704 AUC after training: 0.5993548387096774
User 79704 does not improve AUC. Reverting changes.
Training on augumented user 109594 15/50 current_auc = 0.5993548387096774
User 109594 AUC after training: 0.5987096774193549
User 109594 does not improve AUC. Reverting changes.
Training on augumented user 28494 16/50 current_auc = 0.5993548387096774
User 28494 AUC after training: 0.5993548387096774
User 28494 does not improve AUC. Reverting changes.
Training on augumented user 7311 17/50 current_auc = 0.5993548387096774
User 7311 AUC after training: 0.5993548387096774
User 7311 does not improve AUC. Reverting changes.
Training on augumented user 131595 18/50 current_auc = 0.5993548387096774
User 131595 AUC after training: 0.5993548387096774
User 131595 does not improve AUC. Reverting changes.
Training on augumented user 21945 19/50 current_auc = 0.5993548387096774
User 21945 AUC after training: 0.5987096774193549
User 21945 does not improve AUC. Reverting changes.
Training on augumented user 90493 20/50 current_auc = 0.5993548387096774
User 90493 AUC after training: 0.5993548387096774
User 90493 does not improve AUC. Reverting changes.
Training on augumented user 25392 21/50 current_auc = 0.5993548387096774
User 25392 AUC after training: 0.5993548387096774
User 25392 does not improve AUC. Reverting changes.
Training on augumented user 55157 22/50 current_auc = 0.5993548387096774
User 55157 AUC after training: 0.5987096774193549
User 55157 does not improve AUC. Reverting changes.
Training on augumented user 66995 23/50 current_auc = 0.5993548387096774
User 66995 AUC after training: 0.5993548387096774
User 66995 does not improve AUC. Reverting changes.
Training on augumented user 81164 24/50 current_auc = 0.5993548387096774
User 81164 AUC after training: 0.5993548387096774
User 81164 does not improve AUC. Reverting changes.
Training on augumented user 37390 25/50 current_auc = 0.5993548387096774
User 37390 AUC after training: 0.5980645161290322
User 37390 does not improve AUC. Reverting changes.
Training on augumented user 35206 26/50 current_auc = 0.5993548387096774
User 35206 AUC after training: 0.5993548387096774
User 35206 does not improve AUC. Reverting changes.
Training on augumented user 107947 27/50 current_auc = 0.5993548387096774
User 107947 AUC after training: 0.5993548387096774
User 107947 does not improve AUC. Reverting changes.
Training on augumented user 81088 28/50 current_auc = 0.5993548387096774
User 81088 AUC after training: 0.5993548387096774
User 81088 does not improve AUC. Reverting changes.
Training on augumented user 132912 29/50 current_auc = 0.5993548387096774
User 132912 AUC after training: 0.5987096774193549
User 132912 does not improve AUC. Reverting changes.
Training on augumented user 54054 30/50 current_auc = 0.5993548387096774
User 54054 AUC after training: 0.6000000000000001
User 54054 improves AUC. Keeping the model.
Training on augumented user 24501 31/50 current_auc = 0.6000000000000001
User 24501 AUC after training: 0.5987096774193548
User 24501 does not improve AUC. Reverting changes.
Training on augumented user 108780 32/50 current_auc = 0.6000000000000001
User 108780 AUC after training: 0.5987096774193549
User 108780 does not improve AUC. Reverting changes.
Training on augumented user 109083 33/50 current_auc = 0.6000000000000001
User 109083 AUC after training: 0.5987096774193549
User 109083 does not improve AUC. Reverting changes.
Training on augumented user 26862 34/50 current_auc = 0.6000000000000001
User 26862 AUC after training: 0.6000000000000001
User 26862 does not improve AUC. Reverting changes.
Training on augumented user 60943 35/50 current_auc = 0.6000000000000001
User 60943 AUC after training: 0.5987096774193548
User 60943 does not improve AUC. Reverting changes.
Training on augumented user 33882 36/50 current_auc = 0.6000000000000001
User 33882 AUC after training: 0.5987096774193549
User 33882 does not improve AUC. Reverting changes.
Training on augumented user 121585 37/50 current_auc = 0.6000000000000001
User 121585 AUC after training: 0.5993548387096774
User 121585 does not improve AUC. Reverting changes.
Training on augumented user 102924 38/50 current_auc = 0.6000000000000001
User 102924 AUC after training: 0.5993548387096774
User 102924 does not improve AUC. Reverting changes.
Training on augumented user 111394 39/50 current_auc = 0.6000000000000001
User 111394 AUC after training: 0.5987096774193549
User 111394 does not improve AUC. Reverting changes.
Training on augumented user 22223 40/50 current_auc = 0.6000000000000001
User 22223 AUC after training: 0.5987096774193549
User 22223 does not improve AUC. Reverting changes.
Training on augumented user 101093 41/50 current_auc = 0.6000000000000001
User 101093 AUC after training: 0.5993548387096774
User 101093 does not improve AUC. Reverting changes.
Training on augumented user 107171 42/50 current_auc = 0.6000000000000001
User 107171 AUC after training: 0.5987096774193549
User 107171 does not improve AUC. Reverting changes.
Training on augumented user 37345 43/50 current_auc = 0.6000000000000001
User 37345 AUC after training: 0.5993548387096774
User 37345 does not improve AUC. Reverting changes.
Training on augumented user 74675 44/50 current_auc = 0.6000000000000001
User 74675 AUC after training: 0.5993548387096774
User 74675 does not improve AUC. Reverting changes.
Training on augumented user 129909 45/50 current_auc = 0.6000000000000001
User 129909 AUC after training: 0.5993548387096774
User 129909 does not improve AUC. Reverting changes.
Training on augumented user 30988 46/50 current_auc = 0.6000000000000001
User 30988 AUC after training: 0.5993548387096774
User 30988 does not improve AUC. Reverting changes.
Training on augumented user 67509 47/50 current_auc = 0.6000000000000001
User 67509 AUC after training: 0.5993548387096774
User 67509 does not improve AUC. Reverting changes.
Training on augumented user 119707 48/50 current_auc = 0.6000000000000001
User 119707 AUC after training: 0.5941935483870968
User 119707 does not improve AUC. Reverting changes.
Training on augumented user 32753 49/50 current_auc = 0.6000000000000001
User 32753 AUC after training: 0.6000000000000001
User 32753 does not improve AUC. Reverting changes.
[2024-12-02 19:31:05.377484] start test user 60814 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:05.963164] start test user 60814 206/568 recall augumented users by random, augumented_users = [134443, 106970, 16737, 47028, 21643, 30080, 108065, 130481, 54953, 90540, 46577, 94422, 96961, 9960, 30004, 18046, 127100, 15945, 128196, 121802, 124225, 5707, 20126, 98728, 47798, 38269, 65695, 55149, 114379, 125592, 103726, 30024, 101528, 26383, 68862, 20896, 3682, 71030, 119318, 31036, 31303, 9125, 72430, 79427, 79665, 49507, 126704, 40070, 113797, 1676]
[2024-12-02 19:31:05.982038] user = 60814 Cloud 206/568
[2024-12-02 19:31:06.011367] user = 60814 Local 206/568
[2024-12-02 19:31:06.216459] user = 60814 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:08.190564] user = 60814 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7308673469387756
Training on augumented user 134443 0/50 current_auc = 0.7308673469387756
User 134443 AUC after training: 0.7314342403628118
User 134443 improves AUC. Keeping the model.
Training on augumented user 106970 1/50 current_auc = 0.7314342403628118
User 106970 AUC after training: 0.7311507936507936
User 106970 does not improve AUC. Reverting changes.
Training on augumented user 16737 2/50 current_auc = 0.7314342403628118
User 16737 AUC after training: 0.7345521541950113
User 16737 improves AUC. Keeping the model.
Training on augumented user 47028 3/50 current_auc = 0.7345521541950113
User 47028 AUC after training: 0.733701814058957
User 47028 does not improve AUC. Reverting changes.
Training on augumented user 21643 4/50 current_auc = 0.7345521541950113
User 21643 AUC after training: 0.7328514739229025
User 21643 does not improve AUC. Reverting changes.
Training on augumented user 30080 5/50 current_auc = 0.7345521541950113
User 30080 AUC after training: 0.733701814058957
User 30080 does not improve AUC. Reverting changes.
Training on augumented user 108065 6/50 current_auc = 0.7345521541950113
User 108065 AUC after training: 0.7339852607709751
User 108065 does not improve AUC. Reverting changes.
Training on augumented user 130481 7/50 current_auc = 0.7345521541950113
User 130481 AUC after training: 0.7342687074829932
User 130481 does not improve AUC. Reverting changes.
Training on augumented user 54953 8/50 current_auc = 0.7345521541950113
User 54953 AUC after training: 0.7345521541950113
User 54953 does not improve AUC. Reverting changes.
Training on augumented user 90540 9/50 current_auc = 0.7345521541950113
User 90540 AUC after training: 0.7334183673469388
User 90540 does not improve AUC. Reverting changes.
Training on augumented user 46577 10/50 current_auc = 0.7345521541950113
User 46577 AUC after training: 0.73171768707483
User 46577 does not improve AUC. Reverting changes.
Training on augumented user 94422 11/50 current_auc = 0.7345521541950113
User 94422 AUC after training: 0.733985260770975
User 94422 does not improve AUC. Reverting changes.
Training on augumented user 96961 12/50 current_auc = 0.7345521541950113
User 96961 AUC after training: 0.7328514739229024
User 96961 does not improve AUC. Reverting changes.
Training on augumented user 9960 13/50 current_auc = 0.7345521541950113
User 9960 AUC after training: 0.7339852607709751
User 9960 does not improve AUC. Reverting changes.
Training on augumented user 30004 14/50 current_auc = 0.7345521541950113
User 30004 AUC after training: 0.7342687074829932
User 30004 does not improve AUC. Reverting changes.
Training on augumented user 18046 15/50 current_auc = 0.7345521541950113
User 18046 AUC after training: 0.7334183673469388
User 18046 does not improve AUC. Reverting changes.
Training on augumented user 127100 16/50 current_auc = 0.7345521541950113
User 127100 AUC after training: 0.7317176870748299
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 15945 17/50 current_auc = 0.7345521541950113
User 15945 AUC after training: 0.7342687074829932
User 15945 does not improve AUC. Reverting changes.
Training on augumented user 128196 18/50 current_auc = 0.7345521541950113
User 128196 AUC after training: 0.733701814058957
User 128196 does not improve AUC. Reverting changes.
Training on augumented user 121802 19/50 current_auc = 0.7345521541950113
User 121802 AUC after training: 0.7345521541950114
User 121802 improves AUC. Keeping the model.
Training on augumented user 124225 20/50 current_auc = 0.7345521541950114
User 124225 AUC after training: 0.7311507936507937
User 124225 does not improve AUC. Reverting changes.
Training on augumented user 5707 21/50 current_auc = 0.7345521541950114
User 5707 AUC after training: 0.7339852607709751
User 5707 does not improve AUC. Reverting changes.
Training on augumented user 20126 22/50 current_auc = 0.7345521541950114
User 20126 AUC after training: 0.7351190476190477
User 20126 improves AUC. Keeping the model.
Training on augumented user 98728 23/50 current_auc = 0.7351190476190477
User 98728 AUC after training: 0.7345521541950114
User 98728 does not improve AUC. Reverting changes.
Training on augumented user 47798 24/50 current_auc = 0.7351190476190477
User 47798 AUC after training: 0.7362528344671202
User 47798 improves AUC. Keeping the model.
Training on augumented user 38269 25/50 current_auc = 0.7362528344671202
User 38269 AUC after training: 0.7356859410430839
User 38269 does not improve AUC. Reverting changes.
Training on augumented user 65695 26/50 current_auc = 0.7362528344671202
User 65695 AUC after training: 0.7362528344671202
User 65695 does not improve AUC. Reverting changes.
Training on augumented user 55149 27/50 current_auc = 0.7362528344671202
User 55149 AUC after training: 0.7362528344671202
User 55149 does not improve AUC. Reverting changes.
Training on augumented user 114379 28/50 current_auc = 0.7362528344671202
User 114379 AUC after training: 0.7359693877551021
User 114379 does not improve AUC. Reverting changes.
Training on augumented user 125592 29/50 current_auc = 0.7362528344671202
User 125592 AUC after training: 0.7362528344671202
User 125592 does not improve AUC. Reverting changes.
Training on augumented user 103726 30/50 current_auc = 0.7362528344671202
User 103726 AUC after training: 0.7362528344671202
User 103726 does not improve AUC. Reverting changes.
Training on augumented user 30024 31/50 current_auc = 0.7362528344671202
User 30024 AUC after training: 0.7362528344671202
User 30024 does not improve AUC. Reverting changes.
Training on augumented user 101528 32/50 current_auc = 0.7362528344671202
User 101528 AUC after training: 0.7382369614512472
User 101528 improves AUC. Keeping the model.
Training on augumented user 26383 33/50 current_auc = 0.7382369614512472
User 26383 AUC after training: 0.7373866213151927
User 26383 does not improve AUC. Reverting changes.
Training on augumented user 68862 34/50 current_auc = 0.7382369614512472
User 68862 AUC after training: 0.7362528344671202
User 68862 does not improve AUC. Reverting changes.
Training on augumented user 20896 35/50 current_auc = 0.7382369614512472
User 20896 AUC after training: 0.7365362811791384
User 20896 does not improve AUC. Reverting changes.
Training on augumented user 3682 36/50 current_auc = 0.7382369614512472
User 3682 AUC after training: 0.7373866213151927
User 3682 does not improve AUC. Reverting changes.
Training on augumented user 71030 37/50 current_auc = 0.7382369614512472
User 71030 AUC after training: 0.7362528344671202
User 71030 does not improve AUC. Reverting changes.
Training on augumented user 119318 38/50 current_auc = 0.7382369614512472
User 119318 AUC after training: 0.7368197278911565
User 119318 does not improve AUC. Reverting changes.
Training on augumented user 31036 39/50 current_auc = 0.7382369614512472
User 31036 AUC after training: 0.7354024943310657
User 31036 does not improve AUC. Reverting changes.
Training on augumented user 31303 40/50 current_auc = 0.7382369614512472
User 31303 AUC after training: 0.7371031746031745
User 31303 does not improve AUC. Reverting changes.
Training on augumented user 9125 41/50 current_auc = 0.7382369614512472
User 9125 AUC after training: 0.7376700680272109
User 9125 does not improve AUC. Reverting changes.
Training on augumented user 72430 42/50 current_auc = 0.7382369614512472
User 72430 AUC after training: 0.7365362811791384
User 72430 does not improve AUC. Reverting changes.
Training on augumented user 79427 43/50 current_auc = 0.7382369614512472
User 79427 AUC after training: 0.7356859410430839
User 79427 does not improve AUC. Reverting changes.
Training on augumented user 79665 44/50 current_auc = 0.7382369614512472
User 79665 AUC after training: 0.7368197278911565
User 79665 does not improve AUC. Reverting changes.
Training on augumented user 49507 45/50 current_auc = 0.7382369614512472
User 49507 AUC after training: 0.7365362811791383
User 49507 does not improve AUC. Reverting changes.
Training on augumented user 126704 46/50 current_auc = 0.7382369614512472
User 126704 AUC after training: 0.7385204081632654
User 126704 improves AUC. Keeping the model.
Training on augumented user 40070 47/50 current_auc = 0.7385204081632654
User 40070 AUC after training: 0.7379535147392291
User 40070 does not improve AUC. Reverting changes.
Training on augumented user 113797 48/50 current_auc = 0.7385204081632654
User 113797 AUC after training: 0.7379535147392291
User 113797 does not improve AUC. Reverting changes.
Training on augumented user 1676 49/50 current_auc = 0.7385204081632654
User 1676 AUC after training: 0.7396541950113379
User 1676 improves AUC. Keeping the model.
[2024-12-02 19:31:36.141039] start test user 60848 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:36.793744] start test user 60848 207/568 recall augumented users by random, augumented_users = [46582, 22384, 101325, 114959, 64385, 38328, 68013, 25046, 81748, 94735, 6666, 64915, 122774, 134956, 120511, 79337, 122812, 124803, 127100, 123486, 76305, 57720, 151, 90262, 48136, 82633, 34186, 25868, 135308, 17347, 79286, 126468, 84753, 8013, 62266, 129358, 95050, 11784, 132977, 88821, 128286, 11709, 110063, 10597, 84525, 16716, 52622, 71065, 108938, 54247]
[2024-12-02 19:31:36.811275] user = 60848 Cloud 207/568
[2024-12-02 19:31:36.833899] user = 60848 Local 207/568
[2024-12-02 19:31:36.907284] user = 60848 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:38.909410] user = 60848 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4722222222222222
Training on augumented user 46582 0/50 current_auc = 0.4722222222222222
User 46582 AUC after training: 0.4722222222222222
User 46582 does not improve AUC. Reverting changes.
Training on augumented user 22384 1/50 current_auc = 0.4722222222222222
User 22384 AUC after training: 0.4722222222222222
User 22384 does not improve AUC. Reverting changes.
Training on augumented user 101325 2/50 current_auc = 0.4722222222222222
User 101325 AUC after training: 0.4722222222222222
User 101325 does not improve AUC. Reverting changes.
Training on augumented user 114959 3/50 current_auc = 0.4722222222222222
User 114959 AUC after training: 0.4722222222222222
User 114959 does not improve AUC. Reverting changes.
Training on augumented user 64385 4/50 current_auc = 0.4722222222222222
User 64385 AUC after training: 0.4722222222222222
User 64385 does not improve AUC. Reverting changes.
Training on augumented user 38328 5/50 current_auc = 0.4722222222222222
User 38328 AUC after training: 0.4722222222222222
User 38328 does not improve AUC. Reverting changes.
Training on augumented user 68013 6/50 current_auc = 0.4722222222222222
User 68013 AUC after training: 0.4722222222222222
User 68013 does not improve AUC. Reverting changes.
Training on augumented user 25046 7/50 current_auc = 0.4722222222222222
User 25046 AUC after training: 0.4722222222222222
User 25046 does not improve AUC. Reverting changes.
Training on augumented user 81748 8/50 current_auc = 0.4722222222222222
User 81748 AUC after training: 0.4722222222222222
User 81748 does not improve AUC. Reverting changes.
Training on augumented user 94735 9/50 current_auc = 0.4722222222222222
User 94735 AUC after training: 0.4722222222222222
User 94735 does not improve AUC. Reverting changes.
Training on augumented user 6666 10/50 current_auc = 0.4722222222222222
User 6666 AUC after training: 0.4722222222222222
User 6666 does not improve AUC. Reverting changes.
Training on augumented user 64915 11/50 current_auc = 0.4722222222222222
User 64915 AUC after training: 0.4722222222222222
User 64915 does not improve AUC. Reverting changes.
Training on augumented user 122774 12/50 current_auc = 0.4722222222222222
User 122774 AUC after training: 0.4722222222222222
User 122774 does not improve AUC. Reverting changes.
Training on augumented user 134956 13/50 current_auc = 0.4722222222222222
User 134956 AUC after training: 0.4722222222222222
User 134956 does not improve AUC. Reverting changes.
Training on augumented user 120511 14/50 current_auc = 0.4722222222222222
User 120511 AUC after training: 0.4722222222222222
User 120511 does not improve AUC. Reverting changes.
Training on augumented user 79337 15/50 current_auc = 0.4722222222222222
User 79337 AUC after training: 0.4722222222222222
User 79337 does not improve AUC. Reverting changes.
Training on augumented user 122812 16/50 current_auc = 0.4722222222222222
User 122812 AUC after training: 0.4444444444444444
User 122812 does not improve AUC. Reverting changes.
Training on augumented user 124803 17/50 current_auc = 0.4722222222222222
User 124803 AUC after training: 0.4722222222222222
User 124803 does not improve AUC. Reverting changes.
Training on augumented user 127100 18/50 current_auc = 0.4722222222222222
User 127100 AUC after training: 0.4722222222222222
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 123486 19/50 current_auc = 0.4722222222222222
User 123486 AUC after training: 0.4722222222222222
User 123486 does not improve AUC. Reverting changes.
Training on augumented user 76305 20/50 current_auc = 0.4722222222222222
User 76305 AUC after training: 0.4722222222222222
User 76305 does not improve AUC. Reverting changes.
Training on augumented user 57720 21/50 current_auc = 0.4722222222222222
User 57720 AUC after training: 0.4722222222222222
User 57720 does not improve AUC. Reverting changes.
Training on augumented user 151 22/50 current_auc = 0.4722222222222222
User 151 AUC after training: 0.4722222222222222
User 151 does not improve AUC. Reverting changes.
Training on augumented user 90262 23/50 current_auc = 0.4722222222222222
User 90262 AUC after training: 0.4722222222222222
User 90262 does not improve AUC. Reverting changes.
Training on augumented user 48136 24/50 current_auc = 0.4722222222222222
User 48136 AUC after training: 0.4722222222222222
User 48136 does not improve AUC. Reverting changes.
Training on augumented user 82633 25/50 current_auc = 0.4722222222222222
User 82633 AUC after training: 0.4722222222222222
User 82633 does not improve AUC. Reverting changes.
Training on augumented user 34186 26/50 current_auc = 0.4722222222222222
User 34186 AUC after training: 0.4722222222222222
User 34186 does not improve AUC. Reverting changes.
Training on augumented user 25868 27/50 current_auc = 0.4722222222222222
User 25868 AUC after training: 0.4722222222222222
User 25868 does not improve AUC. Reverting changes.
Training on augumented user 135308 28/50 current_auc = 0.4722222222222222
User 135308 AUC after training: 0.4722222222222222
User 135308 does not improve AUC. Reverting changes.
Training on augumented user 17347 29/50 current_auc = 0.4722222222222222
User 17347 AUC after training: 0.4722222222222222
User 17347 does not improve AUC. Reverting changes.
Training on augumented user 79286 30/50 current_auc = 0.4722222222222222
User 79286 AUC after training: 0.4722222222222222
User 79286 does not improve AUC. Reverting changes.
Training on augumented user 126468 31/50 current_auc = 0.4722222222222222
User 126468 AUC after training: 0.4722222222222222
User 126468 does not improve AUC. Reverting changes.
Training on augumented user 84753 32/50 current_auc = 0.4722222222222222
User 84753 AUC after training: 0.4722222222222222
User 84753 does not improve AUC. Reverting changes.
Training on augumented user 8013 33/50 current_auc = 0.4722222222222222
User 8013 AUC after training: 0.5
User 8013 improves AUC. Keeping the model.
Training on augumented user 62266 34/50 current_auc = 0.5
User 62266 AUC after training: 0.5
User 62266 does not improve AUC. Reverting changes.
Training on augumented user 129358 35/50 current_auc = 0.5
User 129358 AUC after training: 0.5
User 129358 does not improve AUC. Reverting changes.
Training on augumented user 95050 36/50 current_auc = 0.5
User 95050 AUC after training: 0.5
User 95050 does not improve AUC. Reverting changes.
Training on augumented user 11784 37/50 current_auc = 0.5
User 11784 AUC after training: 0.4722222222222222
User 11784 does not improve AUC. Reverting changes.
Training on augumented user 132977 38/50 current_auc = 0.5
User 132977 AUC after training: 0.5
User 132977 does not improve AUC. Reverting changes.
Training on augumented user 88821 39/50 current_auc = 0.5
User 88821 AUC after training: 0.4722222222222222
User 88821 does not improve AUC. Reverting changes.
Training on augumented user 128286 40/50 current_auc = 0.5
User 128286 AUC after training: 0.5
User 128286 does not improve AUC. Reverting changes.
Training on augumented user 11709 41/50 current_auc = 0.5
User 11709 AUC after training: 0.5
User 11709 does not improve AUC. Reverting changes.
Training on augumented user 110063 42/50 current_auc = 0.5
User 110063 AUC after training: 0.4722222222222222
User 110063 does not improve AUC. Reverting changes.
Training on augumented user 10597 43/50 current_auc = 0.5
User 10597 AUC after training: 0.4722222222222222
User 10597 does not improve AUC. Reverting changes.
Training on augumented user 84525 44/50 current_auc = 0.5
User 84525 AUC after training: 0.4722222222222222
User 84525 does not improve AUC. Reverting changes.
Training on augumented user 16716 45/50 current_auc = 0.5
User 16716 AUC after training: 0.5
User 16716 does not improve AUC. Reverting changes.
Training on augumented user 52622 46/50 current_auc = 0.5
User 52622 AUC after training: 0.5
User 52622 does not improve AUC. Reverting changes.
Training on augumented user 71065 47/50 current_auc = 0.5
User 71065 AUC after training: 0.5
User 71065 does not improve AUC. Reverting changes.
Training on augumented user 108938 48/50 current_auc = 0.5
User 108938 AUC after training: 0.4722222222222222
User 108938 does not improve AUC. Reverting changes.
Training on augumented user 54247 49/50 current_auc = 0.5
User 54247 AUC after training: 0.4722222222222222
User 54247 does not improve AUC. Reverting changes.
[2024-12-02 19:32:09.047653] start test user 60887 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:09.682310] start test user 60887 208/568 recall augumented users by random, augumented_users = [98966, 48321, 81464, 18936, 47672, 107419, 137771, 20158, 16911, 31919, 7523, 18122, 5439, 122424, 40657, 40803, 120270, 89564, 113828, 135561, 38044, 83627, 13714, 119603, 116938, 50324, 11387, 81384, 112008, 87939, 84210, 79652, 107767, 35225, 23228, 12899, 59924, 23686, 133105, 130361, 76660, 106728, 74313, 13556, 54991, 96279, 49198, 58427, 54741, 99523]
[2024-12-02 19:32:09.716289] user = 60887 Cloud 208/568
[2024-12-02 19:32:09.747154] user = 60887 Local 208/568
[2024-12-02 19:32:10.292340] user = 60887 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:13.137799] user = 60887 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 98966 0/50 current_auc = 1.0
User 98966 AUC after training: 1.0
User 98966 does not improve AUC. Reverting changes.
Training on augumented user 48321 1/50 current_auc = 1.0
User 48321 AUC after training: 1.0
User 48321 does not improve AUC. Reverting changes.
Training on augumented user 81464 2/50 current_auc = 1.0
User 81464 AUC after training: 1.0
User 81464 does not improve AUC. Reverting changes.
Training on augumented user 18936 3/50 current_auc = 1.0
User 18936 AUC after training: 1.0
User 18936 does not improve AUC. Reverting changes.
Training on augumented user 47672 4/50 current_auc = 1.0
User 47672 AUC after training: 1.0
User 47672 does not improve AUC. Reverting changes.
Training on augumented user 107419 5/50 current_auc = 1.0
User 107419 AUC after training: 1.0
User 107419 does not improve AUC. Reverting changes.
Training on augumented user 137771 6/50 current_auc = 1.0
User 137771 AUC after training: 1.0
User 137771 does not improve AUC. Reverting changes.
Training on augumented user 20158 7/50 current_auc = 1.0
User 20158 AUC after training: 1.0
User 20158 does not improve AUC. Reverting changes.
Training on augumented user 16911 8/50 current_auc = 1.0
User 16911 AUC after training: 1.0
User 16911 does not improve AUC. Reverting changes.
Training on augumented user 31919 9/50 current_auc = 1.0
User 31919 AUC after training: 1.0
User 31919 does not improve AUC. Reverting changes.
Training on augumented user 7523 10/50 current_auc = 1.0
User 7523 AUC after training: 1.0
User 7523 does not improve AUC. Reverting changes.
Training on augumented user 18122 11/50 current_auc = 1.0
User 18122 AUC after training: 1.0
User 18122 does not improve AUC. Reverting changes.
Training on augumented user 5439 12/50 current_auc = 1.0
User 5439 AUC after training: 1.0
User 5439 does not improve AUC. Reverting changes.
Training on augumented user 122424 13/50 current_auc = 1.0
User 122424 AUC after training: 1.0
User 122424 does not improve AUC. Reverting changes.
Training on augumented user 40657 14/50 current_auc = 1.0
User 40657 AUC after training: 1.0
User 40657 does not improve AUC. Reverting changes.
Training on augumented user 40803 15/50 current_auc = 1.0
User 40803 AUC after training: 1.0
User 40803 does not improve AUC. Reverting changes.
Training on augumented user 120270 16/50 current_auc = 1.0
User 120270 AUC after training: 1.0
User 120270 does not improve AUC. Reverting changes.
Training on augumented user 89564 17/50 current_auc = 1.0
User 89564 AUC after training: 1.0
User 89564 does not improve AUC. Reverting changes.
Training on augumented user 113828 18/50 current_auc = 1.0
User 113828 AUC after training: 1.0
User 113828 does not improve AUC. Reverting changes.
Training on augumented user 135561 19/50 current_auc = 1.0
User 135561 AUC after training: 1.0
User 135561 does not improve AUC. Reverting changes.
Training on augumented user 38044 20/50 current_auc = 1.0
User 38044 AUC after training: 1.0
User 38044 does not improve AUC. Reverting changes.
Training on augumented user 83627 21/50 current_auc = 1.0
User 83627 AUC after training: 1.0
User 83627 does not improve AUC. Reverting changes.
Training on augumented user 13714 22/50 current_auc = 1.0
User 13714 AUC after training: 1.0
User 13714 does not improve AUC. Reverting changes.
Training on augumented user 119603 23/50 current_auc = 1.0
User 119603 AUC after training: 1.0
User 119603 does not improve AUC. Reverting changes.
Training on augumented user 116938 24/50 current_auc = 1.0
User 116938 AUC after training: 1.0
User 116938 does not improve AUC. Reverting changes.
Training on augumented user 50324 25/50 current_auc = 1.0
User 50324 AUC after training: 1.0
User 50324 does not improve AUC. Reverting changes.
Training on augumented user 11387 26/50 current_auc = 1.0
User 11387 AUC after training: 1.0
User 11387 does not improve AUC. Reverting changes.
Training on augumented user 81384 27/50 current_auc = 1.0
User 81384 AUC after training: 1.0
User 81384 does not improve AUC. Reverting changes.
Training on augumented user 112008 28/50 current_auc = 1.0
User 112008 AUC after training: 1.0
User 112008 does not improve AUC. Reverting changes.
Training on augumented user 87939 29/50 current_auc = 1.0
User 87939 AUC after training: 1.0
User 87939 does not improve AUC. Reverting changes.
Training on augumented user 84210 30/50 current_auc = 1.0
User 84210 AUC after training: 1.0
User 84210 does not improve AUC. Reverting changes.
Training on augumented user 79652 31/50 current_auc = 1.0
User 79652 AUC after training: 1.0
User 79652 does not improve AUC. Reverting changes.
Training on augumented user 107767 32/50 current_auc = 1.0
User 107767 AUC after training: 1.0
User 107767 does not improve AUC. Reverting changes.
Training on augumented user 35225 33/50 current_auc = 1.0
User 35225 AUC after training: 1.0
User 35225 does not improve AUC. Reverting changes.
Training on augumented user 23228 34/50 current_auc = 1.0
User 23228 AUC after training: 1.0
User 23228 does not improve AUC. Reverting changes.
Training on augumented user 12899 35/50 current_auc = 1.0
User 12899 AUC after training: 1.0
User 12899 does not improve AUC. Reverting changes.
Training on augumented user 59924 36/50 current_auc = 1.0
User 59924 AUC after training: 1.0
User 59924 does not improve AUC. Reverting changes.
Training on augumented user 23686 37/50 current_auc = 1.0
User 23686 AUC after training: 1.0
User 23686 does not improve AUC. Reverting changes.
Training on augumented user 133105 38/50 current_auc = 1.0
User 133105 AUC after training: 1.0
User 133105 does not improve AUC. Reverting changes.
Training on augumented user 130361 39/50 current_auc = 1.0
User 130361 AUC after training: 1.0
User 130361 does not improve AUC. Reverting changes.
Training on augumented user 76660 40/50 current_auc = 1.0
User 76660 AUC after training: 1.0
User 76660 does not improve AUC. Reverting changes.
Training on augumented user 106728 41/50 current_auc = 1.0
User 106728 AUC after training: 1.0
User 106728 does not improve AUC. Reverting changes.
Training on augumented user 74313 42/50 current_auc = 1.0
User 74313 AUC after training: 1.0
User 74313 does not improve AUC. Reverting changes.
Training on augumented user 13556 43/50 current_auc = 1.0
User 13556 AUC after training: 1.0
User 13556 does not improve AUC. Reverting changes.
Training on augumented user 54991 44/50 current_auc = 1.0
User 54991 AUC after training: 1.0
User 54991 does not improve AUC. Reverting changes.
Training on augumented user 96279 45/50 current_auc = 1.0
User 96279 AUC after training: 1.0
User 96279 does not improve AUC. Reverting changes.
Training on augumented user 49198 46/50 current_auc = 1.0
User 49198 AUC after training: 1.0
User 49198 does not improve AUC. Reverting changes.
Training on augumented user 58427 47/50 current_auc = 1.0
User 58427 AUC after training: 1.0
User 58427 does not improve AUC. Reverting changes.
Training on augumented user 54741 48/50 current_auc = 1.0
User 54741 AUC after training: 1.0
User 54741 does not improve AUC. Reverting changes.
Training on augumented user 99523 49/50 current_auc = 1.0
User 99523 AUC after training: 1.0
User 99523 does not improve AUC. Reverting changes.
[2024-12-02 19:32:45.052762] start test user 60971 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:45.506075] start test user 60971 209/568 recall augumented users by random, augumented_users = [121419, 2273, 55362, 120097, 87029, 67434, 136788, 122698, 122009, 136032, 78041, 1493, 44805, 130435, 58366, 16797, 66916, 12508, 44881, 101099, 127445, 31730, 123979, 88349, 52271, 107903, 82296, 114496, 21407, 22824, 105156, 20828, 74015, 105124, 83251, 133417, 15646, 18907, 14765, 68236, 110155, 74825, 29894, 19528, 58033, 128261, 64263, 87019, 22018, 12950]
[2024-12-02 19:32:45.533633] user = 60971 Cloud 209/568
[2024-12-02 19:32:45.558386] user = 60971 Local 209/568
[2024-12-02 19:32:45.596336] user = 60971 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:48.083664] user = 60971 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9130434782608695
Training on augumented user 121419 0/50 current_auc = 0.9130434782608695
User 121419 AUC after training: 0.9130434782608695
User 121419 does not improve AUC. Reverting changes.
Training on augumented user 2273 1/50 current_auc = 0.9130434782608695
User 2273 AUC after training: 0.9130434782608695
User 2273 does not improve AUC. Reverting changes.
Training on augumented user 55362 2/50 current_auc = 0.9130434782608695
User 55362 AUC after training: 0.9130434782608695
User 55362 does not improve AUC. Reverting changes.
Training on augumented user 120097 3/50 current_auc = 0.9130434782608695
User 120097 AUC after training: 0.9130434782608695
User 120097 does not improve AUC. Reverting changes.
Training on augumented user 87029 4/50 current_auc = 0.9130434782608695
User 87029 AUC after training: 0.9130434782608695
User 87029 does not improve AUC. Reverting changes.
Training on augumented user 67434 5/50 current_auc = 0.9130434782608695
User 67434 AUC after training: 0.9130434782608695
User 67434 does not improve AUC. Reverting changes.
Training on augumented user 136788 6/50 current_auc = 0.9130434782608695
User 136788 AUC after training: 0.9130434782608695
User 136788 does not improve AUC. Reverting changes.
Training on augumented user 122698 7/50 current_auc = 0.9130434782608695
User 122698 AUC after training: 0.9130434782608695
User 122698 does not improve AUC. Reverting changes.
Training on augumented user 122009 8/50 current_auc = 0.9130434782608695
User 122009 AUC after training: 0.9130434782608695
User 122009 does not improve AUC. Reverting changes.
Training on augumented user 136032 9/50 current_auc = 0.9130434782608695
User 136032 AUC after training: 0.9130434782608695
User 136032 does not improve AUC. Reverting changes.
Training on augumented user 78041 10/50 current_auc = 0.9130434782608695
User 78041 AUC after training: 0.9130434782608695
User 78041 does not improve AUC. Reverting changes.
Training on augumented user 1493 11/50 current_auc = 0.9130434782608695
User 1493 AUC after training: 0.9130434782608695
User 1493 does not improve AUC. Reverting changes.
Training on augumented user 44805 12/50 current_auc = 0.9130434782608695
User 44805 AUC after training: 0.9130434782608695
User 44805 does not improve AUC. Reverting changes.
Training on augumented user 130435 13/50 current_auc = 0.9130434782608695
User 130435 AUC after training: 0.9130434782608695
User 130435 does not improve AUC. Reverting changes.
Training on augumented user 58366 14/50 current_auc = 0.9130434782608695
User 58366 AUC after training: 0.9130434782608695
User 58366 does not improve AUC. Reverting changes.
Training on augumented user 16797 15/50 current_auc = 0.9130434782608695
User 16797 AUC after training: 0.9130434782608695
User 16797 does not improve AUC. Reverting changes.
Training on augumented user 66916 16/50 current_auc = 0.9130434782608695
User 66916 AUC after training: 0.9130434782608695
User 66916 does not improve AUC. Reverting changes.
Training on augumented user 12508 17/50 current_auc = 0.9130434782608695
User 12508 AUC after training: 0.9130434782608695
User 12508 does not improve AUC. Reverting changes.
Training on augumented user 44881 18/50 current_auc = 0.9130434782608695
User 44881 AUC after training: 0.9130434782608695
User 44881 does not improve AUC. Reverting changes.
Training on augumented user 101099 19/50 current_auc = 0.9130434782608695
User 101099 AUC after training: 0.9130434782608695
User 101099 does not improve AUC. Reverting changes.
Training on augumented user 127445 20/50 current_auc = 0.9130434782608695
User 127445 AUC after training: 0.9130434782608695
User 127445 does not improve AUC. Reverting changes.
Training on augumented user 31730 21/50 current_auc = 0.9130434782608695
User 31730 AUC after training: 0.9130434782608695
User 31730 does not improve AUC. Reverting changes.
Training on augumented user 123979 22/50 current_auc = 0.9130434782608695
User 123979 AUC after training: 0.9130434782608695
User 123979 does not improve AUC. Reverting changes.
Training on augumented user 88349 23/50 current_auc = 0.9130434782608695
User 88349 AUC after training: 0.9130434782608695
User 88349 does not improve AUC. Reverting changes.
Training on augumented user 52271 24/50 current_auc = 0.9130434782608695
User 52271 AUC after training: 0.9130434782608695
User 52271 does not improve AUC. Reverting changes.
Training on augumented user 107903 25/50 current_auc = 0.9130434782608695
User 107903 AUC after training: 0.9130434782608695
User 107903 does not improve AUC. Reverting changes.
Training on augumented user 82296 26/50 current_auc = 0.9130434782608695
User 82296 AUC after training: 0.9130434782608695
User 82296 does not improve AUC. Reverting changes.
Training on augumented user 114496 27/50 current_auc = 0.9130434782608695
User 114496 AUC after training: 0.9130434782608695
User 114496 does not improve AUC. Reverting changes.
Training on augumented user 21407 28/50 current_auc = 0.9130434782608695
User 21407 AUC after training: 0.9130434782608695
User 21407 does not improve AUC. Reverting changes.
Training on augumented user 22824 29/50 current_auc = 0.9130434782608695
User 22824 AUC after training: 0.9130434782608695
User 22824 does not improve AUC. Reverting changes.
Training on augumented user 105156 30/50 current_auc = 0.9130434782608695
User 105156 AUC after training: 0.9130434782608695
User 105156 does not improve AUC. Reverting changes.
Training on augumented user 20828 31/50 current_auc = 0.9130434782608695
User 20828 AUC after training: 0.9130434782608695
User 20828 does not improve AUC. Reverting changes.
Training on augumented user 74015 32/50 current_auc = 0.9130434782608695
User 74015 AUC after training: 0.9130434782608695
User 74015 does not improve AUC. Reverting changes.
Training on augumented user 105124 33/50 current_auc = 0.9130434782608695
User 105124 AUC after training: 0.9130434782608695
User 105124 does not improve AUC. Reverting changes.
Training on augumented user 83251 34/50 current_auc = 0.9130434782608695
User 83251 AUC after training: 0.9130434782608695
User 83251 does not improve AUC. Reverting changes.
Training on augumented user 133417 35/50 current_auc = 0.9130434782608695
User 133417 AUC after training: 0.9130434782608695
User 133417 does not improve AUC. Reverting changes.
Training on augumented user 15646 36/50 current_auc = 0.9130434782608695
User 15646 AUC after training: 0.9130434782608695
User 15646 does not improve AUC. Reverting changes.
Training on augumented user 18907 37/50 current_auc = 0.9130434782608695
User 18907 AUC after training: 0.9130434782608695
User 18907 does not improve AUC. Reverting changes.
Training on augumented user 14765 38/50 current_auc = 0.9130434782608695
User 14765 AUC after training: 0.9130434782608695
User 14765 does not improve AUC. Reverting changes.
Training on augumented user 68236 39/50 current_auc = 0.9130434782608695
User 68236 AUC after training: 0.9130434782608695
User 68236 does not improve AUC. Reverting changes.
Training on augumented user 110155 40/50 current_auc = 0.9130434782608695
User 110155 AUC after training: 0.9130434782608695
User 110155 does not improve AUC. Reverting changes.
Training on augumented user 74825 41/50 current_auc = 0.9130434782608695
User 74825 AUC after training: 0.9130434782608695
User 74825 does not improve AUC. Reverting changes.
Training on augumented user 29894 42/50 current_auc = 0.9130434782608695
User 29894 AUC after training: 0.9130434782608695
User 29894 does not improve AUC. Reverting changes.
Training on augumented user 19528 43/50 current_auc = 0.9130434782608695
User 19528 AUC after training: 0.9130434782608695
User 19528 does not improve AUC. Reverting changes.
Training on augumented user 58033 44/50 current_auc = 0.9130434782608695
User 58033 AUC after training: 0.9130434782608695
User 58033 does not improve AUC. Reverting changes.
Training on augumented user 128261 45/50 current_auc = 0.9130434782608695
User 128261 AUC after training: 0.9130434782608695
User 128261 does not improve AUC. Reverting changes.
Training on augumented user 64263 46/50 current_auc = 0.9130434782608695
User 64263 AUC after training: 0.9130434782608695
User 64263 does not improve AUC. Reverting changes.
Training on augumented user 87019 47/50 current_auc = 0.9130434782608695
User 87019 AUC after training: 0.9130434782608695
User 87019 does not improve AUC. Reverting changes.
Training on augumented user 22018 48/50 current_auc = 0.9130434782608695
User 22018 AUC after training: 0.9130434782608695
User 22018 does not improve AUC. Reverting changes.
Training on augumented user 12950 49/50 current_auc = 0.9130434782608695
User 12950 AUC after training: 0.9130434782608695
User 12950 does not improve AUC. Reverting changes.
[2024-12-02 19:33:15.053264] start test user 61030 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:15.749808] start test user 61030 210/568 recall augumented users by random, augumented_users = [58802, 106325, 53319, 32727, 50916, 71778, 95300, 66152, 134993, 133773, 37177, 30414, 89682, 88689, 34855, 69731, 92206, 101707, 41333, 127543, 53503, 121864, 129819, 35221, 125285, 52704, 32840, 125313, 54739, 95743, 83148, 131772, 17594, 61533, 122285, 93892, 134113, 116959, 11255, 15054, 133868, 18696, 103314, 59255, 124424, 13873, 128806, 69903, 82232, 9236]
[2024-12-02 19:33:15.778450] user = 61030 Cloud 210/568
[2024-12-02 19:33:15.788349] user = 61030 Local 210/568
[2024-12-02 19:33:16.088152] user = 61030 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:18.613007] user = 61030 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7045454545454546
Training on augumented user 58802 0/50 current_auc = 0.7045454545454546
User 58802 AUC after training: 0.7077922077922079
User 58802 improves AUC. Keeping the model.
Training on augumented user 106325 1/50 current_auc = 0.7077922077922079
User 106325 AUC after training: 0.7077922077922079
User 106325 does not improve AUC. Reverting changes.
Training on augumented user 53319 2/50 current_auc = 0.7077922077922079
User 53319 AUC after training: 0.7045454545454546
User 53319 does not improve AUC. Reverting changes.
Training on augumented user 32727 3/50 current_auc = 0.7077922077922079
User 32727 AUC after training: 0.7077922077922079
User 32727 does not improve AUC. Reverting changes.
Training on augumented user 50916 4/50 current_auc = 0.7077922077922079
User 50916 AUC after training: 0.7045454545454546
User 50916 does not improve AUC. Reverting changes.
Training on augumented user 71778 5/50 current_auc = 0.7077922077922079
User 71778 AUC after training: 0.698051948051948
User 71778 does not improve AUC. Reverting changes.
Training on augumented user 95300 6/50 current_auc = 0.7077922077922079
User 95300 AUC after training: 0.7077922077922079
User 95300 does not improve AUC. Reverting changes.
Training on augumented user 66152 7/50 current_auc = 0.7077922077922079
User 66152 AUC after training: 0.7077922077922079
User 66152 does not improve AUC. Reverting changes.
Training on augumented user 134993 8/50 current_auc = 0.7077922077922079
User 134993 AUC after training: 0.7045454545454545
User 134993 does not improve AUC. Reverting changes.
Training on augumented user 133773 9/50 current_auc = 0.7077922077922079
User 133773 AUC after training: 0.7110389610389611
User 133773 improves AUC. Keeping the model.
Training on augumented user 37177 10/50 current_auc = 0.7110389610389611
User 37177 AUC after training: 0.7110389610389611
User 37177 does not improve AUC. Reverting changes.
Training on augumented user 30414 11/50 current_auc = 0.7110389610389611
User 30414 AUC after training: 0.7077922077922079
User 30414 does not improve AUC. Reverting changes.
Training on augumented user 89682 12/50 current_auc = 0.7110389610389611
User 89682 AUC after training: 0.7045454545454546
User 89682 does not improve AUC. Reverting changes.
Training on augumented user 88689 13/50 current_auc = 0.7110389610389611
User 88689 AUC after training: 0.7077922077922079
User 88689 does not improve AUC. Reverting changes.
Training on augumented user 34855 14/50 current_auc = 0.7110389610389611
User 34855 AUC after training: 0.7077922077922079
User 34855 does not improve AUC. Reverting changes.
Training on augumented user 69731 15/50 current_auc = 0.7110389610389611
User 69731 AUC after training: 0.7045454545454546
User 69731 does not improve AUC. Reverting changes.
Training on augumented user 92206 16/50 current_auc = 0.7110389610389611
User 92206 AUC after training: 0.7077922077922079
User 92206 does not improve AUC. Reverting changes.
Training on augumented user 101707 17/50 current_auc = 0.7110389610389611
User 101707 AUC after training: 0.7110389610389611
User 101707 does not improve AUC. Reverting changes.
Training on augumented user 41333 18/50 current_auc = 0.7110389610389611
User 41333 AUC after training: 0.7077922077922079
User 41333 does not improve AUC. Reverting changes.
Training on augumented user 127543 19/50 current_auc = 0.7110389610389611
User 127543 AUC after training: 0.7110389610389611
User 127543 does not improve AUC. Reverting changes.
Training on augumented user 53503 20/50 current_auc = 0.7110389610389611
User 53503 AUC after training: 0.7077922077922079
User 53503 does not improve AUC. Reverting changes.
Training on augumented user 121864 21/50 current_auc = 0.7110389610389611
User 121864 AUC after training: 0.7077922077922079
User 121864 does not improve AUC. Reverting changes.
Training on augumented user 129819 22/50 current_auc = 0.7110389610389611
User 129819 AUC after training: 0.7077922077922079
User 129819 does not improve AUC. Reverting changes.
Training on augumented user 35221 23/50 current_auc = 0.7110389610389611
User 35221 AUC after training: 0.7045454545454546
User 35221 does not improve AUC. Reverting changes.
Training on augumented user 125285 24/50 current_auc = 0.7110389610389611
User 125285 AUC after training: 0.7077922077922079
User 125285 does not improve AUC. Reverting changes.
Training on augumented user 52704 25/50 current_auc = 0.7110389610389611
User 52704 AUC after training: 0.7110389610389611
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 32840 26/50 current_auc = 0.7110389610389611
User 32840 AUC after training: 0.7110389610389611
User 32840 does not improve AUC. Reverting changes.
Training on augumented user 125313 27/50 current_auc = 0.7110389610389611
User 125313 AUC after training: 0.7077922077922079
User 125313 does not improve AUC. Reverting changes.
Training on augumented user 54739 28/50 current_auc = 0.7110389610389611
User 54739 AUC after training: 0.7012987012987013
User 54739 does not improve AUC. Reverting changes.
Training on augumented user 95743 29/50 current_auc = 0.7110389610389611
User 95743 AUC after training: 0.7110389610389611
User 95743 does not improve AUC. Reverting changes.
Training on augumented user 83148 30/50 current_auc = 0.7110389610389611
User 83148 AUC after training: 0.7077922077922079
User 83148 does not improve AUC. Reverting changes.
Training on augumented user 131772 31/50 current_auc = 0.7110389610389611
User 131772 AUC after training: 0.7077922077922079
User 131772 does not improve AUC. Reverting changes.
Training on augumented user 17594 32/50 current_auc = 0.7110389610389611
User 17594 AUC after training: 0.7077922077922079
User 17594 does not improve AUC. Reverting changes.
Training on augumented user 61533 33/50 current_auc = 0.7110389610389611
User 61533 AUC after training: 0.7077922077922079
User 61533 does not improve AUC. Reverting changes.
Training on augumented user 122285 34/50 current_auc = 0.7110389610389611
User 122285 AUC after training: 0.7110389610389611
User 122285 does not improve AUC. Reverting changes.
Training on augumented user 93892 35/50 current_auc = 0.7110389610389611
User 93892 AUC after training: 0.7045454545454546
User 93892 does not improve AUC. Reverting changes.
Training on augumented user 134113 36/50 current_auc = 0.7110389610389611
User 134113 AUC after training: 0.7110389610389611
User 134113 does not improve AUC. Reverting changes.
Training on augumented user 116959 37/50 current_auc = 0.7110389610389611
User 116959 AUC after training: 0.7012987012987013
User 116959 does not improve AUC. Reverting changes.
Training on augumented user 11255 38/50 current_auc = 0.7110389610389611
User 11255 AUC after training: 0.7077922077922079
User 11255 does not improve AUC. Reverting changes.
Training on augumented user 15054 39/50 current_auc = 0.7110389610389611
User 15054 AUC after training: 0.7110389610389611
User 15054 does not improve AUC. Reverting changes.
Training on augumented user 133868 40/50 current_auc = 0.7110389610389611
User 133868 AUC after training: 0.7110389610389611
User 133868 does not improve AUC. Reverting changes.
Training on augumented user 18696 41/50 current_auc = 0.7110389610389611
User 18696 AUC after training: 0.7110389610389611
User 18696 does not improve AUC. Reverting changes.
Training on augumented user 103314 42/50 current_auc = 0.7110389610389611
User 103314 AUC after training: 0.7077922077922079
User 103314 does not improve AUC. Reverting changes.
Training on augumented user 59255 43/50 current_auc = 0.7110389610389611
User 59255 AUC after training: 0.698051948051948
User 59255 does not improve AUC. Reverting changes.
Training on augumented user 124424 44/50 current_auc = 0.7110389610389611
User 124424 AUC after training: 0.7077922077922079
User 124424 does not improve AUC. Reverting changes.
Training on augumented user 13873 45/50 current_auc = 0.7110389610389611
User 13873 AUC after training: 0.7110389610389611
User 13873 does not improve AUC. Reverting changes.
Training on augumented user 128806 46/50 current_auc = 0.7110389610389611
User 128806 AUC after training: 0.7077922077922079
User 128806 does not improve AUC. Reverting changes.
Training on augumented user 69903 47/50 current_auc = 0.7110389610389611
User 69903 AUC after training: 0.7077922077922079
User 69903 does not improve AUC. Reverting changes.
Training on augumented user 82232 48/50 current_auc = 0.7110389610389611
User 82232 AUC after training: 0.7077922077922079
User 82232 does not improve AUC. Reverting changes.
Training on augumented user 9236 49/50 current_auc = 0.7110389610389611
User 9236 AUC after training: 0.7110389610389611
User 9236 does not improve AUC. Reverting changes.
[2024-12-02 19:33:50.645212] start test user 61049 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:51.167876] start test user 61049 211/568 recall augumented users by random, augumented_users = [16490, 111914, 16524, 37449, 95690, 137387, 66729, 74569, 67854, 71117, 50554, 70844, 78656, 129180, 74147, 37242, 38627, 112952, 127055, 22638, 37636, 86855, 71069, 122040, 69480, 103840, 108724, 43603, 114529, 136799, 53801, 135500, 31553, 86489, 1993, 32169, 112520, 112073, 33175, 54919, 3441, 41910, 15911, 104768, 92223, 13267, 90406, 1679, 75541, 22297]
[2024-12-02 19:33:51.183085] user = 61049 Cloud 211/568
[2024-12-02 19:33:51.193868] user = 61049 Local 211/568
[2024-12-02 19:33:51.355844] user = 61049 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:54.239606] user = 61049 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 16490 0/50 current_auc = 1.0
User 16490 AUC after training: 1.0
User 16490 does not improve AUC. Reverting changes.
Training on augumented user 111914 1/50 current_auc = 1.0
User 111914 AUC after training: 1.0
User 111914 does not improve AUC. Reverting changes.
Training on augumented user 16524 2/50 current_auc = 1.0
User 16524 AUC after training: 1.0
User 16524 does not improve AUC. Reverting changes.
Training on augumented user 37449 3/50 current_auc = 1.0
User 37449 AUC after training: 1.0
User 37449 does not improve AUC. Reverting changes.
Training on augumented user 95690 4/50 current_auc = 1.0
User 95690 AUC after training: 1.0
User 95690 does not improve AUC. Reverting changes.
Training on augumented user 137387 5/50 current_auc = 1.0
User 137387 AUC after training: 1.0
User 137387 does not improve AUC. Reverting changes.
Training on augumented user 66729 6/50 current_auc = 1.0
User 66729 AUC after training: 1.0
User 66729 does not improve AUC. Reverting changes.
Training on augumented user 74569 7/50 current_auc = 1.0
User 74569 AUC after training: 1.0
User 74569 does not improve AUC. Reverting changes.
Training on augumented user 67854 8/50 current_auc = 1.0
User 67854 AUC after training: 1.0
User 67854 does not improve AUC. Reverting changes.
Training on augumented user 71117 9/50 current_auc = 1.0
User 71117 AUC after training: 1.0
User 71117 does not improve AUC. Reverting changes.
Training on augumented user 50554 10/50 current_auc = 1.0
User 50554 AUC after training: 1.0
User 50554 does not improve AUC. Reverting changes.
Training on augumented user 70844 11/50 current_auc = 1.0
User 70844 AUC after training: 1.0
User 70844 does not improve AUC. Reverting changes.
Training on augumented user 78656 12/50 current_auc = 1.0
User 78656 AUC after training: 1.0
User 78656 does not improve AUC. Reverting changes.
Training on augumented user 129180 13/50 current_auc = 1.0
User 129180 AUC after training: 1.0
User 129180 does not improve AUC. Reverting changes.
Training on augumented user 74147 14/50 current_auc = 1.0
User 74147 AUC after training: 1.0
User 74147 does not improve AUC. Reverting changes.
Training on augumented user 37242 15/50 current_auc = 1.0
User 37242 AUC after training: 1.0
User 37242 does not improve AUC. Reverting changes.
Training on augumented user 38627 16/50 current_auc = 1.0
User 38627 AUC after training: 1.0
User 38627 does not improve AUC. Reverting changes.
Training on augumented user 112952 17/50 current_auc = 1.0
User 112952 AUC after training: 1.0
User 112952 does not improve AUC. Reverting changes.
Training on augumented user 127055 18/50 current_auc = 1.0
User 127055 AUC after training: 1.0
User 127055 does not improve AUC. Reverting changes.
Training on augumented user 22638 19/50 current_auc = 1.0
User 22638 AUC after training: 1.0
User 22638 does not improve AUC. Reverting changes.
Training on augumented user 37636 20/50 current_auc = 1.0
User 37636 AUC after training: 1.0
User 37636 does not improve AUC. Reverting changes.
Training on augumented user 86855 21/50 current_auc = 1.0
User 86855 AUC after training: 1.0
User 86855 does not improve AUC. Reverting changes.
Training on augumented user 71069 22/50 current_auc = 1.0
User 71069 AUC after training: 1.0
User 71069 does not improve AUC. Reverting changes.
Training on augumented user 122040 23/50 current_auc = 1.0
User 122040 AUC after training: 1.0
User 122040 does not improve AUC. Reverting changes.
Training on augumented user 69480 24/50 current_auc = 1.0
User 69480 AUC after training: 1.0
User 69480 does not improve AUC. Reverting changes.
Training on augumented user 103840 25/50 current_auc = 1.0
User 103840 AUC after training: 1.0
User 103840 does not improve AUC. Reverting changes.
Training on augumented user 108724 26/50 current_auc = 1.0
User 108724 AUC after training: 1.0
User 108724 does not improve AUC. Reverting changes.
Training on augumented user 43603 27/50 current_auc = 1.0
User 43603 AUC after training: 1.0
User 43603 does not improve AUC. Reverting changes.
Training on augumented user 114529 28/50 current_auc = 1.0
User 114529 AUC after training: 1.0
User 114529 does not improve AUC. Reverting changes.
Training on augumented user 136799 29/50 current_auc = 1.0
User 136799 AUC after training: 1.0
User 136799 does not improve AUC. Reverting changes.
Training on augumented user 53801 30/50 current_auc = 1.0
User 53801 AUC after training: 1.0
User 53801 does not improve AUC. Reverting changes.
Training on augumented user 135500 31/50 current_auc = 1.0
User 135500 AUC after training: 1.0
User 135500 does not improve AUC. Reverting changes.
Training on augumented user 31553 32/50 current_auc = 1.0
User 31553 AUC after training: 1.0
User 31553 does not improve AUC. Reverting changes.
Training on augumented user 86489 33/50 current_auc = 1.0
User 86489 AUC after training: 1.0
User 86489 does not improve AUC. Reverting changes.
Training on augumented user 1993 34/50 current_auc = 1.0
User 1993 AUC after training: 1.0
User 1993 does not improve AUC. Reverting changes.
Training on augumented user 32169 35/50 current_auc = 1.0
User 32169 AUC after training: 1.0
User 32169 does not improve AUC. Reverting changes.
Training on augumented user 112520 36/50 current_auc = 1.0
User 112520 AUC after training: 1.0
User 112520 does not improve AUC. Reverting changes.
Training on augumented user 112073 37/50 current_auc = 1.0
User 112073 AUC after training: 1.0
User 112073 does not improve AUC. Reverting changes.
Training on augumented user 33175 38/50 current_auc = 1.0
User 33175 AUC after training: 1.0
User 33175 does not improve AUC. Reverting changes.
Training on augumented user 54919 39/50 current_auc = 1.0
User 54919 AUC after training: 1.0
User 54919 does not improve AUC. Reverting changes.
Training on augumented user 3441 40/50 current_auc = 1.0
User 3441 AUC after training: 1.0
User 3441 does not improve AUC. Reverting changes.
Training on augumented user 41910 41/50 current_auc = 1.0
User 41910 AUC after training: 1.0
User 41910 does not improve AUC. Reverting changes.
Training on augumented user 15911 42/50 current_auc = 1.0
User 15911 AUC after training: 1.0
User 15911 does not improve AUC. Reverting changes.
Training on augumented user 104768 43/50 current_auc = 1.0
User 104768 AUC after training: 1.0
User 104768 does not improve AUC. Reverting changes.
Training on augumented user 92223 44/50 current_auc = 1.0
User 92223 AUC after training: 1.0
User 92223 does not improve AUC. Reverting changes.
Training on augumented user 13267 45/50 current_auc = 1.0
User 13267 AUC after training: 1.0
User 13267 does not improve AUC. Reverting changes.
Training on augumented user 90406 46/50 current_auc = 1.0
User 90406 AUC after training: 1.0
User 90406 does not improve AUC. Reverting changes.
Training on augumented user 1679 47/50 current_auc = 1.0
User 1679 AUC after training: 1.0
User 1679 does not improve AUC. Reverting changes.
Training on augumented user 75541 48/50 current_auc = 1.0
User 75541 AUC after training: 1.0
User 75541 does not improve AUC. Reverting changes.
Training on augumented user 22297 49/50 current_auc = 1.0
User 22297 AUC after training: 1.0
User 22297 does not improve AUC. Reverting changes.
[2024-12-02 19:34:24.093465] start test user 61053 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:24.562125] start test user 61053 212/568 recall augumented users by random, augumented_users = [26189, 48900, 120454, 7951, 6368, 33551, 666, 46240, 6163, 116226, 43868, 55904, 98884, 70199, 100387, 27296, 90658, 11662, 66682, 119106, 78532, 89373, 94340, 11158, 65042, 39595, 31255, 41622, 115813, 9217, 113136, 130129, 53185, 121881, 36262, 105605, 83315, 132869, 67529, 7618, 53123, 60110, 21925, 53179, 12254, 47101, 136256, 103140, 38348, 53688]
[2024-12-02 19:34:24.578568] user = 61053 Cloud 212/568
[2024-12-02 19:34:24.597481] user = 61053 Local 212/568
[2024-12-02 19:34:24.753265] user = 61053 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:26.507315] user = 61053 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5640845070422535
Training on augumented user 26189 0/50 current_auc = 0.5640845070422535
User 26189 AUC after training: 0.5643192488262911
User 26189 improves AUC. Keeping the model.
Training on augumented user 48900 1/50 current_auc = 0.5643192488262911
User 48900 AUC after training: 0.5619718309859155
User 48900 does not improve AUC. Reverting changes.
Training on augumented user 120454 2/50 current_auc = 0.5643192488262911
User 120454 AUC after training: 0.5633802816901409
User 120454 does not improve AUC. Reverting changes.
Training on augumented user 7951 3/50 current_auc = 0.5643192488262911
User 7951 AUC after training: 0.5643192488262911
User 7951 does not improve AUC. Reverting changes.
Training on augumented user 6368 4/50 current_auc = 0.5643192488262911
User 6368 AUC after training: 0.562206572769953
User 6368 does not improve AUC. Reverting changes.
Training on augumented user 33551 5/50 current_auc = 0.5643192488262911
User 33551 AUC after training: 0.5640845070422535
User 33551 does not improve AUC. Reverting changes.
Training on augumented user 666 6/50 current_auc = 0.5643192488262911
User 666 AUC after training: 0.5647887323943662
User 666 improves AUC. Keeping the model.
Training on augumented user 46240 7/50 current_auc = 0.5647887323943662
User 46240 AUC after training: 0.5645539906103286
User 46240 does not improve AUC. Reverting changes.
Training on augumented user 6163 8/50 current_auc = 0.5647887323943662
User 6163 AUC after training: 0.5654929577464789
User 6163 improves AUC. Keeping the model.
Training on augumented user 116226 9/50 current_auc = 0.5654929577464789
User 116226 AUC after training: 0.5650234741784037
User 116226 does not improve AUC. Reverting changes.
Training on augumented user 43868 10/50 current_auc = 0.5654929577464789
User 43868 AUC after training: 0.564319248826291
User 43868 does not improve AUC. Reverting changes.
Training on augumented user 55904 11/50 current_auc = 0.5654929577464789
User 55904 AUC after training: 0.5669014084507042
User 55904 improves AUC. Keeping the model.
Training on augumented user 98884 12/50 current_auc = 0.5669014084507042
User 98884 AUC after training: 0.5673708920187793
User 98884 improves AUC. Keeping the model.
Training on augumented user 70199 13/50 current_auc = 0.5673708920187793
User 70199 AUC after training: 0.5647887323943661
User 70199 does not improve AUC. Reverting changes.
Training on augumented user 100387 14/50 current_auc = 0.5673708920187793
User 100387 AUC after training: 0.5666666666666667
User 100387 does not improve AUC. Reverting changes.
Training on augumented user 27296 15/50 current_auc = 0.5673708920187793
User 27296 AUC after training: 0.565962441314554
User 27296 does not improve AUC. Reverting changes.
Training on augumented user 90658 16/50 current_auc = 0.5673708920187793
User 90658 AUC after training: 0.5652582159624413
User 90658 does not improve AUC. Reverting changes.
Training on augumented user 11662 17/50 current_auc = 0.5673708920187793
User 11662 AUC after training: 0.5671361502347418
User 11662 does not improve AUC. Reverting changes.
Training on augumented user 66682 18/50 current_auc = 0.5673708920187793
User 66682 AUC after training: 0.565962441314554
User 66682 does not improve AUC. Reverting changes.
Training on augumented user 119106 19/50 current_auc = 0.5673708920187793
User 119106 AUC after training: 0.5669014084507042
User 119106 does not improve AUC. Reverting changes.
Training on augumented user 78532 20/50 current_auc = 0.5673708920187793
User 78532 AUC after training: 0.5673708920187794
User 78532 improves AUC. Keeping the model.
Training on augumented user 89373 21/50 current_auc = 0.5673708920187794
User 89373 AUC after training: 0.5666666666666667
User 89373 does not improve AUC. Reverting changes.
Training on augumented user 94340 22/50 current_auc = 0.5673708920187794
User 94340 AUC after training: 0.5664319248826291
User 94340 does not improve AUC. Reverting changes.
Training on augumented user 11158 23/50 current_auc = 0.5673708920187794
User 11158 AUC after training: 0.5664319248826292
User 11158 does not improve AUC. Reverting changes.
Training on augumented user 65042 24/50 current_auc = 0.5673708920187794
User 65042 AUC after training: 0.5666666666666667
User 65042 does not improve AUC. Reverting changes.
Training on augumented user 39595 25/50 current_auc = 0.5673708920187794
User 39595 AUC after training: 0.5669014084507042
User 39595 does not improve AUC. Reverting changes.
Training on augumented user 31255 26/50 current_auc = 0.5673708920187794
User 31255 AUC after training: 0.5683098591549296
User 31255 improves AUC. Keeping the model.
Training on augumented user 41622 27/50 current_auc = 0.5683098591549296
User 41622 AUC after training: 0.5678403755868544
User 41622 does not improve AUC. Reverting changes.
Training on augumented user 115813 28/50 current_auc = 0.5683098591549296
User 115813 AUC after training: 0.5666666666666668
User 115813 does not improve AUC. Reverting changes.
Training on augumented user 9217 29/50 current_auc = 0.5683098591549296
User 9217 AUC after training: 0.5676056338028169
User 9217 does not improve AUC. Reverting changes.
Training on augumented user 113136 30/50 current_auc = 0.5683098591549296
User 113136 AUC after training: 0.5676056338028169
User 113136 does not improve AUC. Reverting changes.
Training on augumented user 130129 31/50 current_auc = 0.5683098591549296
User 130129 AUC after training: 0.5676056338028168
User 130129 does not improve AUC. Reverting changes.
Training on augumented user 53185 32/50 current_auc = 0.5683098591549296
User 53185 AUC after training: 0.5671361502347418
User 53185 does not improve AUC. Reverting changes.
Training on augumented user 121881 33/50 current_auc = 0.5683098591549296
User 121881 AUC after training: 0.5676056338028169
User 121881 does not improve AUC. Reverting changes.
Training on augumented user 36262 34/50 current_auc = 0.5683098591549296
User 36262 AUC after training: 0.5678403755868544
User 36262 does not improve AUC. Reverting changes.
Training on augumented user 105605 35/50 current_auc = 0.5683098591549296
User 105605 AUC after training: 0.5664319248826291
User 105605 does not improve AUC. Reverting changes.
Training on augumented user 83315 36/50 current_auc = 0.5683098591549296
User 83315 AUC after training: 0.568075117370892
User 83315 does not improve AUC. Reverting changes.
Training on augumented user 132869 37/50 current_auc = 0.5683098591549296
User 132869 AUC after training: 0.5666666666666667
User 132869 does not improve AUC. Reverting changes.
Training on augumented user 67529 38/50 current_auc = 0.5683098591549296
User 67529 AUC after training: 0.5669014084507042
User 67529 does not improve AUC. Reverting changes.
Training on augumented user 7618 39/50 current_auc = 0.5683098591549296
User 7618 AUC after training: 0.5683098591549296
User 7618 does not improve AUC. Reverting changes.
Training on augumented user 53123 40/50 current_auc = 0.5683098591549296
User 53123 AUC after training: 0.563849765258216
User 53123 does not improve AUC. Reverting changes.
Training on augumented user 60110 41/50 current_auc = 0.5683098591549296
User 60110 AUC after training: 0.5676056338028169
User 60110 does not improve AUC. Reverting changes.
Training on augumented user 21925 42/50 current_auc = 0.5683098591549296
User 21925 AUC after training: 0.5671361502347418
User 21925 does not improve AUC. Reverting changes.
Training on augumented user 53179 43/50 current_auc = 0.5683098591549296
User 53179 AUC after training: 0.5654929577464788
User 53179 does not improve AUC. Reverting changes.
Training on augumented user 12254 44/50 current_auc = 0.5683098591549296
User 12254 AUC after training: 0.5685446009389672
User 12254 improves AUC. Keeping the model.
Training on augumented user 47101 45/50 current_auc = 0.5685446009389672
User 47101 AUC after training: 0.568075117370892
User 47101 does not improve AUC. Reverting changes.
Training on augumented user 136256 46/50 current_auc = 0.5685446009389672
User 136256 AUC after training: 0.5692488262910798
User 136256 improves AUC. Keeping the model.
Training on augumented user 103140 47/50 current_auc = 0.5692488262910798
User 103140 AUC after training: 0.5713615023474179
User 103140 improves AUC. Keeping the model.
Training on augumented user 38348 48/50 current_auc = 0.5713615023474179
User 38348 AUC after training: 0.5711267605633803
User 38348 does not improve AUC. Reverting changes.
Training on augumented user 53688 49/50 current_auc = 0.5713615023474179
User 53688 AUC after training: 0.5708920187793427
User 53688 does not improve AUC. Reverting changes.
[2024-12-02 19:34:57.084806] start test user 61060 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:57.762975] start test user 61060 213/568 recall augumented users by random, augumented_users = [89929, 35038, 64319, 128996, 52486, 47433, 26069, 77028, 90096, 54606, 47092, 117974, 119392, 103977, 122907, 9499, 98328, 125783, 53121, 114903, 85792, 131880, 41976, 61154, 122051, 49347, 87234, 93911, 133520, 93133, 90956, 59258, 123259, 119475, 71927, 290, 26845, 61518, 23253, 43559, 101245, 50145, 32844, 72037, 42107, 16135, 113006, 99581, 12703, 11992]
[2024-12-02 19:34:57.777489] user = 61060 Cloud 213/568
[2024-12-02 19:34:57.795286] user = 61060 Local 213/568
[2024-12-02 19:34:57.876276] user = 61060 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:00.122600] user = 61060 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6169950738916256
Training on augumented user 89929 0/50 current_auc = 0.6169950738916256
User 89929 AUC after training: 0.6157635467980296
User 89929 does not improve AUC. Reverting changes.
Training on augumented user 35038 1/50 current_auc = 0.6169950738916256
User 35038 AUC after training: 0.6176108374384236
User 35038 improves AUC. Keeping the model.
Training on augumented user 64319 2/50 current_auc = 0.6176108374384236
User 64319 AUC after training: 0.6169950738916256
User 64319 does not improve AUC. Reverting changes.
Training on augumented user 128996 3/50 current_auc = 0.6176108374384236
User 128996 AUC after training: 0.6163793103448275
User 128996 does not improve AUC. Reverting changes.
Training on augumented user 52486 4/50 current_auc = 0.6176108374384236
User 52486 AUC after training: 0.6169950738916256
User 52486 does not improve AUC. Reverting changes.
Training on augumented user 47433 5/50 current_auc = 0.6176108374384236
User 47433 AUC after training: 0.6176108374384236
User 47433 does not improve AUC. Reverting changes.
Training on augumented user 26069 6/50 current_auc = 0.6176108374384236
User 26069 AUC after training: 0.6176108374384236
User 26069 does not improve AUC. Reverting changes.
Training on augumented user 77028 7/50 current_auc = 0.6176108374384236
User 77028 AUC after training: 0.6176108374384236
User 77028 does not improve AUC. Reverting changes.
Training on augumented user 90096 8/50 current_auc = 0.6176108374384236
User 90096 AUC after training: 0.6176108374384236
User 90096 does not improve AUC. Reverting changes.
Training on augumented user 54606 9/50 current_auc = 0.6176108374384236
User 54606 AUC after training: 0.6169950738916256
User 54606 does not improve AUC. Reverting changes.
Training on augumented user 47092 10/50 current_auc = 0.6176108374384236
User 47092 AUC after training: 0.6176108374384236
User 47092 does not improve AUC. Reverting changes.
Training on augumented user 117974 11/50 current_auc = 0.6176108374384236
User 117974 AUC after training: 0.6176108374384236
User 117974 does not improve AUC. Reverting changes.
Training on augumented user 119392 12/50 current_auc = 0.6176108374384236
User 119392 AUC after training: 0.6169950738916256
User 119392 does not improve AUC. Reverting changes.
Training on augumented user 103977 13/50 current_auc = 0.6176108374384236
User 103977 AUC after training: 0.6176108374384236
User 103977 does not improve AUC. Reverting changes.
Training on augumented user 122907 14/50 current_auc = 0.6176108374384236
User 122907 AUC after training: 0.6169950738916256
User 122907 does not improve AUC. Reverting changes.
Training on augumented user 9499 15/50 current_auc = 0.6176108374384236
User 9499 AUC after training: 0.6157635467980295
User 9499 does not improve AUC. Reverting changes.
Training on augumented user 98328 16/50 current_auc = 0.6176108374384236
User 98328 AUC after training: 0.6169950738916256
User 98328 does not improve AUC. Reverting changes.
Training on augumented user 125783 17/50 current_auc = 0.6176108374384236
User 125783 AUC after training: 0.6169950738916256
User 125783 does not improve AUC. Reverting changes.
Training on augumented user 53121 18/50 current_auc = 0.6176108374384236
User 53121 AUC after training: 0.6169950738916256
User 53121 does not improve AUC. Reverting changes.
Training on augumented user 114903 19/50 current_auc = 0.6176108374384236
User 114903 AUC after training: 0.6176108374384236
User 114903 does not improve AUC. Reverting changes.
Training on augumented user 85792 20/50 current_auc = 0.6176108374384236
User 85792 AUC after training: 0.6145320197044335
User 85792 does not improve AUC. Reverting changes.
Training on augumented user 131880 21/50 current_auc = 0.6176108374384236
User 131880 AUC after training: 0.6169950738916256
User 131880 does not improve AUC. Reverting changes.
Training on augumented user 41976 22/50 current_auc = 0.6176108374384236
User 41976 AUC after training: 0.6145320197044335
User 41976 does not improve AUC. Reverting changes.
Training on augumented user 61154 23/50 current_auc = 0.6176108374384236
User 61154 AUC after training: 0.6157635467980296
User 61154 does not improve AUC. Reverting changes.
Training on augumented user 122051 24/50 current_auc = 0.6176108374384236
User 122051 AUC after training: 0.6151477832512315
User 122051 does not improve AUC. Reverting changes.
Training on augumented user 49347 25/50 current_auc = 0.6176108374384236
User 49347 AUC after training: 0.6139162561576356
User 49347 does not improve AUC. Reverting changes.
Training on augumented user 87234 26/50 current_auc = 0.6176108374384236
User 87234 AUC after training: 0.6176108374384236
User 87234 does not improve AUC. Reverting changes.
Training on augumented user 93911 27/50 current_auc = 0.6176108374384236
User 93911 AUC after training: 0.6169950738916256
User 93911 does not improve AUC. Reverting changes.
Training on augumented user 133520 28/50 current_auc = 0.6176108374384236
User 133520 AUC after training: 0.6139162561576355
User 133520 does not improve AUC. Reverting changes.
Training on augumented user 93133 29/50 current_auc = 0.6176108374384236
User 93133 AUC after training: 0.6169950738916256
User 93133 does not improve AUC. Reverting changes.
Training on augumented user 90956 30/50 current_auc = 0.6176108374384236
User 90956 AUC after training: 0.6176108374384236
User 90956 does not improve AUC. Reverting changes.
Training on augumented user 59258 31/50 current_auc = 0.6176108374384236
User 59258 AUC after training: 0.6176108374384236
User 59258 does not improve AUC. Reverting changes.
Training on augumented user 123259 32/50 current_auc = 0.6176108374384236
User 123259 AUC after training: 0.6176108374384236
User 123259 does not improve AUC. Reverting changes.
Training on augumented user 119475 33/50 current_auc = 0.6176108374384236
User 119475 AUC after training: 0.6169950738916256
User 119475 does not improve AUC. Reverting changes.
Training on augumented user 71927 34/50 current_auc = 0.6176108374384236
User 71927 AUC after training: 0.6169950738916256
User 71927 does not improve AUC. Reverting changes.
Training on augumented user 290 35/50 current_auc = 0.6176108374384236
User 290 AUC after training: 0.6169950738916256
User 290 does not improve AUC. Reverting changes.
Training on augumented user 26845 36/50 current_auc = 0.6176108374384236
User 26845 AUC after training: 0.6176108374384236
User 26845 does not improve AUC. Reverting changes.
Training on augumented user 61518 37/50 current_auc = 0.6176108374384236
User 61518 AUC after training: 0.6169950738916256
User 61518 does not improve AUC. Reverting changes.
Training on augumented user 23253 38/50 current_auc = 0.6176108374384236
User 23253 AUC after training: 0.6169950738916256
User 23253 does not improve AUC. Reverting changes.
Training on augumented user 43559 39/50 current_auc = 0.6176108374384236
User 43559 AUC after training: 0.6169950738916256
User 43559 does not improve AUC. Reverting changes.
Training on augumented user 101245 40/50 current_auc = 0.6176108374384236
User 101245 AUC after training: 0.6176108374384236
User 101245 does not improve AUC. Reverting changes.
Training on augumented user 50145 41/50 current_auc = 0.6176108374384236
User 50145 AUC after training: 0.6163793103448276
User 50145 does not improve AUC. Reverting changes.
Training on augumented user 32844 42/50 current_auc = 0.6176108374384236
User 32844 AUC after training: 0.6163793103448275
User 32844 does not improve AUC. Reverting changes.
Training on augumented user 72037 43/50 current_auc = 0.6176108374384236
User 72037 AUC after training: 0.6176108374384236
User 72037 does not improve AUC. Reverting changes.
Training on augumented user 42107 44/50 current_auc = 0.6176108374384236
User 42107 AUC after training: 0.6145320197044335
User 42107 does not improve AUC. Reverting changes.
Training on augumented user 16135 45/50 current_auc = 0.6176108374384236
User 16135 AUC after training: 0.6151477832512314
User 16135 does not improve AUC. Reverting changes.
Training on augumented user 113006 46/50 current_auc = 0.6176108374384236
User 113006 AUC after training: 0.6157635467980296
User 113006 does not improve AUC. Reverting changes.
Training on augumented user 99581 47/50 current_auc = 0.6176108374384236
User 99581 AUC after training: 0.6169950738916256
User 99581 does not improve AUC. Reverting changes.
Training on augumented user 12703 48/50 current_auc = 0.6176108374384236
User 12703 AUC after training: 0.6176108374384236
User 12703 does not improve AUC. Reverting changes.
Training on augumented user 11992 49/50 current_auc = 0.6176108374384236
User 11992 AUC after training: 0.6176108374384236
User 11992 does not improve AUC. Reverting changes.
[2024-12-02 19:35:27.609362] start test user 61062 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:28.375771] start test user 61062 214/568 recall augumented users by random, augumented_users = [118235, 117956, 98140, 116544, 106737, 47327, 107236, 67983, 41269, 58668, 101383, 97696, 70574, 54454, 132861, 77005, 131792, 109655, 118361, 4843, 53118, 129097, 100322, 47315, 78595, 81651, 32666, 31194, 30616, 5849, 31704, 18920, 131954, 88586, 120509, 50823, 34750, 124168, 46880, 66606, 40992, 7316, 53152, 128735, 111410, 1699, 99818, 53738, 98333, 71687]
[2024-12-02 19:35:28.395509] user = 61062 Cloud 214/568
[2024-12-02 19:35:28.410501] user = 61062 Local 214/568
[2024-12-02 19:35:28.669711] user = 61062 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:31.444486] user = 61062 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6213333333333333
Training on augumented user 118235 0/50 current_auc = 0.6213333333333333
User 118235 AUC after training: 0.6226666666666667
User 118235 improves AUC. Keeping the model.
Training on augumented user 117956 1/50 current_auc = 0.6226666666666667
User 117956 AUC after training: 0.6217777777777778
User 117956 does not improve AUC. Reverting changes.
Training on augumented user 98140 2/50 current_auc = 0.6226666666666667
User 98140 AUC after training: 0.6235555555555555
User 98140 improves AUC. Keeping the model.
Training on augumented user 116544 3/50 current_auc = 0.6235555555555555
User 116544 AUC after training: 0.6248888888888889
User 116544 improves AUC. Keeping the model.
Training on augumented user 106737 4/50 current_auc = 0.6248888888888889
User 106737 AUC after training: 0.6262222222222222
User 106737 improves AUC. Keeping the model.
Training on augumented user 47327 5/50 current_auc = 0.6262222222222222
User 47327 AUC after training: 0.6253333333333334
User 47327 does not improve AUC. Reverting changes.
Training on augumented user 107236 6/50 current_auc = 0.6262222222222222
User 107236 AUC after training: 0.6262222222222222
User 107236 does not improve AUC. Reverting changes.
Training on augumented user 67983 7/50 current_auc = 0.6262222222222222
User 67983 AUC after training: 0.6235555555555556
User 67983 does not improve AUC. Reverting changes.
Training on augumented user 41269 8/50 current_auc = 0.6262222222222222
User 41269 AUC after training: 0.6257777777777778
User 41269 does not improve AUC. Reverting changes.
Training on augumented user 58668 9/50 current_auc = 0.6262222222222222
User 58668 AUC after training: 0.6288888888888889
User 58668 improves AUC. Keeping the model.
Training on augumented user 101383 10/50 current_auc = 0.6288888888888889
User 101383 AUC after training: 0.6257777777777778
User 101383 does not improve AUC. Reverting changes.
Training on augumented user 97696 11/50 current_auc = 0.6288888888888889
User 97696 AUC after training: 0.6271111111111111
User 97696 does not improve AUC. Reverting changes.
Training on augumented user 70574 12/50 current_auc = 0.6288888888888889
User 70574 AUC after training: 0.6271111111111111
User 70574 does not improve AUC. Reverting changes.
Training on augumented user 54454 13/50 current_auc = 0.6288888888888889
User 54454 AUC after training: 0.6262222222222222
User 54454 does not improve AUC. Reverting changes.
Training on augumented user 132861 14/50 current_auc = 0.6288888888888889
User 132861 AUC after training: 0.6271111111111111
User 132861 does not improve AUC. Reverting changes.
Training on augumented user 77005 15/50 current_auc = 0.6288888888888889
User 77005 AUC after training: 0.6257777777777778
User 77005 does not improve AUC. Reverting changes.
Training on augumented user 131792 16/50 current_auc = 0.6288888888888889
User 131792 AUC after training: 0.6262222222222222
User 131792 does not improve AUC. Reverting changes.
Training on augumented user 109655 17/50 current_auc = 0.6288888888888889
User 109655 AUC after training: 0.6288888888888888
User 109655 does not improve AUC. Reverting changes.
Training on augumented user 118361 18/50 current_auc = 0.6288888888888889
User 118361 AUC after training: 0.6275555555555555
User 118361 does not improve AUC. Reverting changes.
Training on augumented user 4843 19/50 current_auc = 0.6288888888888889
User 4843 AUC after training: 0.6271111111111112
User 4843 does not improve AUC. Reverting changes.
Training on augumented user 53118 20/50 current_auc = 0.6288888888888889
User 53118 AUC after training: 0.6271111111111111
User 53118 does not improve AUC. Reverting changes.
Training on augumented user 129097 21/50 current_auc = 0.6288888888888889
User 129097 AUC after training: 0.6266666666666667
User 129097 does not improve AUC. Reverting changes.
Training on augumented user 100322 22/50 current_auc = 0.6288888888888889
User 100322 AUC after training: 0.6271111111111112
User 100322 does not improve AUC. Reverting changes.
Training on augumented user 47315 23/50 current_auc = 0.6288888888888889
User 47315 AUC after training: 0.6262222222222222
User 47315 does not improve AUC. Reverting changes.
Training on augumented user 78595 24/50 current_auc = 0.6288888888888889
User 78595 AUC after training: 0.6253333333333334
User 78595 does not improve AUC. Reverting changes.
Training on augumented user 81651 25/50 current_auc = 0.6288888888888889
User 81651 AUC after training: 0.6262222222222222
User 81651 does not improve AUC. Reverting changes.
Training on augumented user 32666 26/50 current_auc = 0.6288888888888889
User 32666 AUC after training: 0.6284444444444445
User 32666 does not improve AUC. Reverting changes.
Training on augumented user 31194 27/50 current_auc = 0.6288888888888889
User 31194 AUC after training: 0.6293333333333333
User 31194 improves AUC. Keeping the model.
Training on augumented user 30616 28/50 current_auc = 0.6293333333333333
User 30616 AUC after training: 0.6284444444444445
User 30616 does not improve AUC. Reverting changes.
Training on augumented user 5849 29/50 current_auc = 0.6293333333333333
User 5849 AUC after training: 0.6293333333333333
User 5849 does not improve AUC. Reverting changes.
Training on augumented user 31704 30/50 current_auc = 0.6293333333333333
User 31704 AUC after training: 0.6288888888888889
User 31704 does not improve AUC. Reverting changes.
Training on augumented user 18920 31/50 current_auc = 0.6293333333333333
User 18920 AUC after training: 0.6293333333333334
User 18920 improves AUC. Keeping the model.
Training on augumented user 131954 32/50 current_auc = 0.6293333333333334
User 131954 AUC after training: 0.6293333333333334
User 131954 does not improve AUC. Reverting changes.
Training on augumented user 88586 33/50 current_auc = 0.6293333333333334
User 88586 AUC after training: 0.6266666666666667
User 88586 does not improve AUC. Reverting changes.
Training on augumented user 120509 34/50 current_auc = 0.6293333333333334
User 120509 AUC after training: 0.6266666666666667
User 120509 does not improve AUC. Reverting changes.
Training on augumented user 50823 35/50 current_auc = 0.6293333333333334
User 50823 AUC after training: 0.6293333333333333
User 50823 does not improve AUC. Reverting changes.
Training on augumented user 34750 36/50 current_auc = 0.6293333333333334
User 34750 AUC after training: 0.628
User 34750 does not improve AUC. Reverting changes.
Training on augumented user 124168 37/50 current_auc = 0.6293333333333334
User 124168 AUC after training: 0.6293333333333333
User 124168 does not improve AUC. Reverting changes.
Training on augumented user 46880 38/50 current_auc = 0.6293333333333334
User 46880 AUC after training: 0.6235555555555556
User 46880 does not improve AUC. Reverting changes.
Training on augumented user 66606 39/50 current_auc = 0.6293333333333334
User 66606 AUC after training: 0.6275555555555555
User 66606 does not improve AUC. Reverting changes.
Training on augumented user 40992 40/50 current_auc = 0.6293333333333334
User 40992 AUC after training: 0.6248888888888889
User 40992 does not improve AUC. Reverting changes.
Training on augumented user 7316 41/50 current_auc = 0.6293333333333334
User 7316 AUC after training: 0.6266666666666667
User 7316 does not improve AUC. Reverting changes.
Training on augumented user 53152 42/50 current_auc = 0.6293333333333334
User 53152 AUC after training: 0.6293333333333333
User 53152 does not improve AUC. Reverting changes.
Training on augumented user 128735 43/50 current_auc = 0.6293333333333334
User 128735 AUC after training: 0.6257777777777778
User 128735 does not improve AUC. Reverting changes.
Training on augumented user 111410 44/50 current_auc = 0.6293333333333334
User 111410 AUC after training: 0.6293333333333333
User 111410 does not improve AUC. Reverting changes.
Training on augumented user 1699 45/50 current_auc = 0.6293333333333334
User 1699 AUC after training: 0.6257777777777778
User 1699 does not improve AUC. Reverting changes.
Training on augumented user 99818 46/50 current_auc = 0.6293333333333334
User 99818 AUC after training: 0.6302222222222222
User 99818 improves AUC. Keeping the model.
Training on augumented user 53738 47/50 current_auc = 0.6302222222222222
User 53738 AUC after training: 0.6293333333333333
User 53738 does not improve AUC. Reverting changes.
Training on augumented user 98333 48/50 current_auc = 0.6302222222222222
User 98333 AUC after training: 0.6302222222222222
User 98333 does not improve AUC. Reverting changes.
Training on augumented user 71687 49/50 current_auc = 0.6302222222222222
User 71687 AUC after training: 0.6257777777777778
User 71687 does not improve AUC. Reverting changes.
[2024-12-02 19:36:00.219413] start test user 61112 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:01.012378] start test user 61112 215/568 recall augumented users by random, augumented_users = [31336, 91488, 23302, 35488, 45644, 127993, 41360, 38411, 96238, 100625, 22124, 61485, 101614, 122815, 18975, 108283, 28033, 35564, 116585, 90345, 6301, 84301, 136959, 93764, 45512, 87400, 133449, 56037, 78868, 79051, 12424, 23240, 57942, 16841, 59574, 19851, 128833, 119221, 116007, 67691, 43144, 109986, 39917, 104501, 26519, 6607, 122731, 8930, 93677, 128697]
[2024-12-02 19:36:01.033782] user = 61112 Cloud 215/568
[2024-12-02 19:36:01.047719] user = 61112 Local 215/568
[2024-12-02 19:36:01.129461] user = 61112 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:03.293463] user = 61112 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6987475280158207
Training on augumented user 31336 0/50 current_auc = 0.6987475280158207
User 31336 AUC after training: 0.6987475280158207
User 31336 does not improve AUC. Reverting changes.
Training on augumented user 91488 1/50 current_auc = 0.6987475280158207
User 91488 AUC after training: 0.6987475280158207
User 91488 does not improve AUC. Reverting changes.
Training on augumented user 23302 2/50 current_auc = 0.6987475280158207
User 23302 AUC after training: 0.6994067237969677
User 23302 improves AUC. Keeping the model.
Training on augumented user 35488 3/50 current_auc = 0.6994067237969677
User 35488 AUC after training: 0.6987475280158207
User 35488 does not improve AUC. Reverting changes.
Training on augumented user 45644 4/50 current_auc = 0.6994067237969677
User 45644 AUC after training: 0.6954515491100857
User 45644 does not improve AUC. Reverting changes.
Training on augumented user 127993 5/50 current_auc = 0.6994067237969677
User 127993 AUC after training: 0.6987475280158207
User 127993 does not improve AUC. Reverting changes.
Training on augumented user 41360 6/50 current_auc = 0.6994067237969677
User 41360 AUC after training: 0.6987475280158207
User 41360 does not improve AUC. Reverting changes.
Training on augumented user 38411 7/50 current_auc = 0.6994067237969677
User 38411 AUC after training: 0.6987475280158207
User 38411 does not improve AUC. Reverting changes.
Training on augumented user 96238 8/50 current_auc = 0.6994067237969677
User 96238 AUC after training: 0.6987475280158207
User 96238 does not improve AUC. Reverting changes.
Training on augumented user 100625 9/50 current_auc = 0.6994067237969677
User 100625 AUC after training: 0.6987475280158207
User 100625 does not improve AUC. Reverting changes.
Training on augumented user 22124 10/50 current_auc = 0.6994067237969677
User 22124 AUC after training: 0.6987475280158207
User 22124 does not improve AUC. Reverting changes.
Training on augumented user 61485 11/50 current_auc = 0.6994067237969677
User 61485 AUC after training: 0.6994067237969677
User 61485 does not improve AUC. Reverting changes.
Training on augumented user 101614 12/50 current_auc = 0.6994067237969677
User 101614 AUC after training: 0.6994067237969677
User 101614 does not improve AUC. Reverting changes.
Training on augumented user 122815 13/50 current_auc = 0.6994067237969677
User 122815 AUC after training: 0.6994067237969677
User 122815 does not improve AUC. Reverting changes.
Training on augumented user 18975 14/50 current_auc = 0.6994067237969677
User 18975 AUC after training: 0.6987475280158206
User 18975 does not improve AUC. Reverting changes.
Training on augumented user 108283 15/50 current_auc = 0.6994067237969677
User 108283 AUC after training: 0.6987475280158207
User 108283 does not improve AUC. Reverting changes.
Training on augumented user 28033 16/50 current_auc = 0.6994067237969677
User 28033 AUC after training: 0.6994067237969677
User 28033 does not improve AUC. Reverting changes.
Training on augumented user 35564 17/50 current_auc = 0.6994067237969677
User 35564 AUC after training: 0.6987475280158207
User 35564 does not improve AUC. Reverting changes.
Training on augumented user 116585 18/50 current_auc = 0.6994067237969677
User 116585 AUC after training: 0.6987475280158207
User 116585 does not improve AUC. Reverting changes.
Training on augumented user 90345 19/50 current_auc = 0.6994067237969677
User 90345 AUC after training: 0.6987475280158207
User 90345 does not improve AUC. Reverting changes.
Training on augumented user 6301 20/50 current_auc = 0.6994067237969677
User 6301 AUC after training: 0.6987475280158207
User 6301 does not improve AUC. Reverting changes.
Training on augumented user 84301 21/50 current_auc = 0.6994067237969677
User 84301 AUC after training: 0.6987475280158207
User 84301 does not improve AUC. Reverting changes.
Training on augumented user 136959 22/50 current_auc = 0.6994067237969677
User 136959 AUC after training: 0.6994067237969677
User 136959 does not improve AUC. Reverting changes.
Training on augumented user 93764 23/50 current_auc = 0.6994067237969677
User 93764 AUC after training: 0.6987475280158207
User 93764 does not improve AUC. Reverting changes.
Training on augumented user 45512 24/50 current_auc = 0.6994067237969677
User 45512 AUC after training: 0.6987475280158207
User 45512 does not improve AUC. Reverting changes.
Training on augumented user 87400 25/50 current_auc = 0.6994067237969677
User 87400 AUC after training: 0.6987475280158207
User 87400 does not improve AUC. Reverting changes.
Training on augumented user 133449 26/50 current_auc = 0.6994067237969677
User 133449 AUC after training: 0.6987475280158207
User 133449 does not improve AUC. Reverting changes.
Training on augumented user 56037 27/50 current_auc = 0.6994067237969677
User 56037 AUC after training: 0.6987475280158207
User 56037 does not improve AUC. Reverting changes.
Training on augumented user 78868 28/50 current_auc = 0.6994067237969677
User 78868 AUC after training: 0.6994067237969677
User 78868 does not improve AUC. Reverting changes.
Training on augumented user 79051 29/50 current_auc = 0.6994067237969677
User 79051 AUC after training: 0.6987475280158207
User 79051 does not improve AUC. Reverting changes.
Training on augumented user 12424 30/50 current_auc = 0.6994067237969677
User 12424 AUC after training: 0.6994067237969677
User 12424 does not improve AUC. Reverting changes.
Training on augumented user 23240 31/50 current_auc = 0.6994067237969677
User 23240 AUC after training: 0.6994067237969677
User 23240 does not improve AUC. Reverting changes.
Training on augumented user 57942 32/50 current_auc = 0.6994067237969677
User 57942 AUC after training: 0.6994067237969677
User 57942 does not improve AUC. Reverting changes.
Training on augumented user 16841 33/50 current_auc = 0.6994067237969677
User 16841 AUC after training: 0.6987475280158207
User 16841 does not improve AUC. Reverting changes.
Training on augumented user 59574 34/50 current_auc = 0.6994067237969677
User 59574 AUC after training: 0.6980883322346737
User 59574 does not improve AUC. Reverting changes.
Training on augumented user 19851 35/50 current_auc = 0.6994067237969677
User 19851 AUC after training: 0.6987475280158207
User 19851 does not improve AUC. Reverting changes.
Training on augumented user 128833 36/50 current_auc = 0.6994067237969677
User 128833 AUC after training: 0.6987475280158207
User 128833 does not improve AUC. Reverting changes.
Training on augumented user 119221 37/50 current_auc = 0.6994067237969677
User 119221 AUC after training: 0.6987475280158207
User 119221 does not improve AUC. Reverting changes.
Training on augumented user 116007 38/50 current_auc = 0.6994067237969677
User 116007 AUC after training: 0.6974291364535267
User 116007 does not improve AUC. Reverting changes.
Training on augumented user 67691 39/50 current_auc = 0.6994067237969677
User 67691 AUC after training: 0.6994067237969677
User 67691 does not improve AUC. Reverting changes.
Training on augumented user 43144 40/50 current_auc = 0.6994067237969677
User 43144 AUC after training: 0.6994067237969677
User 43144 does not improve AUC. Reverting changes.
Training on augumented user 109986 41/50 current_auc = 0.6994067237969677
User 109986 AUC after training: 0.6987475280158207
User 109986 does not improve AUC. Reverting changes.
Training on augumented user 39917 42/50 current_auc = 0.6994067237969677
User 39917 AUC after training: 0.6994067237969677
User 39917 does not improve AUC. Reverting changes.
Training on augumented user 104501 43/50 current_auc = 0.6994067237969677
User 104501 AUC after training: 0.6987475280158207
User 104501 does not improve AUC. Reverting changes.
Training on augumented user 26519 44/50 current_auc = 0.6994067237969677
User 26519 AUC after training: 0.6994067237969677
User 26519 does not improve AUC. Reverting changes.
Training on augumented user 6607 45/50 current_auc = 0.6994067237969677
User 6607 AUC after training: 0.6994067237969677
User 6607 does not improve AUC. Reverting changes.
Training on augumented user 122731 46/50 current_auc = 0.6994067237969677
User 122731 AUC after training: 0.6954515491100857
User 122731 does not improve AUC. Reverting changes.
Training on augumented user 8930 47/50 current_auc = 0.6994067237969677
User 8930 AUC after training: 0.6987475280158207
User 8930 does not improve AUC. Reverting changes.
Training on augumented user 93677 48/50 current_auc = 0.6994067237969677
User 93677 AUC after training: 0.6987475280158207
User 93677 does not improve AUC. Reverting changes.
Training on augumented user 128697 49/50 current_auc = 0.6994067237969677
User 128697 AUC after training: 0.6987475280158207
User 128697 does not improve AUC. Reverting changes.
[2024-12-02 19:36:28.397118] start test user 61145 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:28.837070] start test user 61145 216/568 recall augumented users by random, augumented_users = [75968, 87101, 37126, 58256, 128888, 81638, 93743, 113517, 89238, 12071, 128275, 70415, 93798, 108106, 18008, 76208, 53542, 53169, 4023, 68250, 21216, 19873, 74037, 2038, 111745, 136926, 135865, 84123, 54420, 13121, 8896, 50256, 97363, 42151, 119306, 28680, 130102, 16018, 121714, 11560, 105378, 138113, 43282, 283, 55111, 115646, 45536, 133034, 115531, 103715]
[2024-12-02 19:36:28.851567] user = 61145 Cloud 216/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:28.869171] user = 61145 Local 216/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:28.888277] user = 61145 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:31.347118] user = 61145 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 75968 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75968 AUC after training: 0.5
User 75968 does not improve AUC. Reverting changes.
Training on augumented user 87101 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87101 AUC after training: 0.5
User 87101 does not improve AUC. Reverting changes.
Training on augumented user 37126 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37126 AUC after training: 0.5
User 37126 does not improve AUC. Reverting changes.
Training on augumented user 58256 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58256 AUC after training: 0.5
User 58256 does not improve AUC. Reverting changes.
Training on augumented user 128888 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128888 AUC after training: 0.5
User 128888 does not improve AUC. Reverting changes.
Training on augumented user 81638 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81638 AUC after training: 0.5
User 81638 does not improve AUC. Reverting changes.
Training on augumented user 93743 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93743 AUC after training: 0.5
User 93743 does not improve AUC. Reverting changes.
Training on augumented user 113517 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113517 AUC after training: 0.5
User 113517 does not improve AUC. Reverting changes.
Training on augumented user 89238 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89238 AUC after training: 0.5
User 89238 does not improve AUC. Reverting changes.
Training on augumented user 12071 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12071 AUC after training: 0.5
User 12071 does not improve AUC. Reverting changes.
Training on augumented user 128275 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128275 AUC after training: 0.5
User 128275 does not improve AUC. Reverting changes.
Training on augumented user 70415 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70415 AUC after training: 0.5
User 70415 does not improve AUC. Reverting changes.
Training on augumented user 93798 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93798 AUC after training: 0.5
User 93798 does not improve AUC. Reverting changes.
Training on augumented user 108106 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108106 AUC after training: 0.5
User 108106 does not improve AUC. Reverting changes.
Training on augumented user 18008 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18008 AUC after training: 0.5
User 18008 does not improve AUC. Reverting changes.
Training on augumented user 76208 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76208 AUC after training: 0.5
User 76208 does not improve AUC. Reverting changes.
Training on augumented user 53542 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53542 AUC after training: 0.5
User 53542 does not improve AUC. Reverting changes.
Training on augumented user 53169 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53169 AUC after training: 0.5
User 53169 does not improve AUC. Reverting changes.
Training on augumented user 4023 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4023 AUC after training: 0.5
User 4023 does not improve AUC. Reverting changes.
Training on augumented user 68250 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68250 AUC after training: 0.5
User 68250 does not improve AUC. Reverting changes.
Training on augumented user 21216 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21216 AUC after training: 0.5
User 21216 does not improve AUC. Reverting changes.
Training on augumented user 19873 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19873 AUC after training: 0.5
User 19873 does not improve AUC. Reverting changes.
Training on augumented user 74037 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74037 AUC after training: 0.5
User 74037 does not improve AUC. Reverting changes.
Training on augumented user 2038 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2038 AUC after training: 0.5
User 2038 does not improve AUC. Reverting changes.
Training on augumented user 111745 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111745 AUC after training: 0.5
User 111745 does not improve AUC. Reverting changes.
Training on augumented user 136926 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136926 AUC after training: 0.5
User 136926 does not improve AUC. Reverting changes.
Training on augumented user 135865 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135865 AUC after training: 0.5
User 135865 does not improve AUC. Reverting changes.
Training on augumented user 84123 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84123 AUC after training: 0.5
User 84123 does not improve AUC. Reverting changes.
Training on augumented user 54420 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54420 AUC after training: 0.5
User 54420 does not improve AUC. Reverting changes.
Training on augumented user 13121 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13121 AUC after training: 0.5
User 13121 does not improve AUC. Reverting changes.
Training on augumented user 8896 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8896 AUC after training: 0.5
User 8896 does not improve AUC. Reverting changes.
Training on augumented user 50256 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50256 AUC after training: 0.5
User 50256 does not improve AUC. Reverting changes.
Training on augumented user 97363 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97363 AUC after training: 0.5
User 97363 does not improve AUC. Reverting changes.
Training on augumented user 42151 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42151 AUC after training: 0.5
User 42151 does not improve AUC. Reverting changes.
Training on augumented user 119306 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119306 AUC after training: 0.5
User 119306 does not improve AUC. Reverting changes.
Training on augumented user 28680 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28680 AUC after training: 0.5
User 28680 does not improve AUC. Reverting changes.
Training on augumented user 130102 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130102 AUC after training: 0.5
User 130102 does not improve AUC. Reverting changes.
Training on augumented user 16018 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16018 AUC after training: 0.5
User 16018 does not improve AUC. Reverting changes.
Training on augumented user 121714 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121714 AUC after training: 0.5
User 121714 does not improve AUC. Reverting changes.
Training on augumented user 11560 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11560 AUC after training: 0.5
User 11560 does not improve AUC. Reverting changes.
Training on augumented user 105378 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105378 AUC after training: 0.5
User 105378 does not improve AUC. Reverting changes.
Training on augumented user 138113 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138113 AUC after training: 0.5
User 138113 does not improve AUC. Reverting changes.
Training on augumented user 43282 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43282 AUC after training: 0.5
User 43282 does not improve AUC. Reverting changes.
Training on augumented user 283 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 283 AUC after training: 0.5
User 283 does not improve AUC. Reverting changes.
Training on augumented user 55111 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55111 AUC after training: 0.5
User 55111 does not improve AUC. Reverting changes.
Training on augumented user 115646 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115646 AUC after training: 0.5
User 115646 does not improve AUC. Reverting changes.
Training on augumented user 45536 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45536 AUC after training: 0.5
User 45536 does not improve AUC. Reverting changes.
Training on augumented user 133034 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133034 AUC after training: 0.5
User 133034 does not improve AUC. Reverting changes.
Training on augumented user 115531 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115531 AUC after training: 0.5
User 115531 does not improve AUC. Reverting changes.
Training on augumented user 103715 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103715 AUC after training: 0.5
User 103715 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:37:01.361077] start test user 61162 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:01.804313] start test user 61162 217/568 recall augumented users by random, augumented_users = [18663, 46895, 41093, 15351, 118707, 69423, 16499, 29043, 38890, 132093, 132650, 53318, 88076, 56291, 18435, 83629, 123204, 82781, 23948, 115986, 130152, 55725, 131992, 86895, 122818, 22729, 89892, 60747, 70360, 57062, 52169, 132721, 91395, 33050, 136052, 101989, 73306, 82830, 34146, 48667, 110571, 96721, 63123, 137988, 97935, 67766, 129414, 68330, 78645, 78568]
[2024-12-02 19:37:01.819509] user = 61162 Cloud 217/568
[2024-12-02 19:37:01.829198] user = 61162 Local 217/568
[2024-12-02 19:37:01.895605] user = 61162 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:03.420137] user = 61162 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8666666666666667
Training on augumented user 18663 0/50 current_auc = 0.8666666666666667
User 18663 AUC after training: 0.8666666666666667
User 18663 does not improve AUC. Reverting changes.
Training on augumented user 46895 1/50 current_auc = 0.8666666666666667
User 46895 AUC after training: 0.8666666666666667
User 46895 does not improve AUC. Reverting changes.
Training on augumented user 41093 2/50 current_auc = 0.8666666666666667
User 41093 AUC after training: 0.8666666666666667
User 41093 does not improve AUC. Reverting changes.
Training on augumented user 15351 3/50 current_auc = 0.8666666666666667
User 15351 AUC after training: 0.8666666666666667
User 15351 does not improve AUC. Reverting changes.
Training on augumented user 118707 4/50 current_auc = 0.8666666666666667
User 118707 AUC after training: 0.8666666666666667
User 118707 does not improve AUC. Reverting changes.
Training on augumented user 69423 5/50 current_auc = 0.8666666666666667
User 69423 AUC after training: 0.8666666666666667
User 69423 does not improve AUC. Reverting changes.
Training on augumented user 16499 6/50 current_auc = 0.8666666666666667
User 16499 AUC after training: 0.8666666666666667
User 16499 does not improve AUC. Reverting changes.
Training on augumented user 29043 7/50 current_auc = 0.8666666666666667
User 29043 AUC after training: 0.8666666666666667
User 29043 does not improve AUC. Reverting changes.
Training on augumented user 38890 8/50 current_auc = 0.8666666666666667
User 38890 AUC after training: 0.8666666666666667
User 38890 does not improve AUC. Reverting changes.
Training on augumented user 132093 9/50 current_auc = 0.8666666666666667
User 132093 AUC after training: 0.8666666666666667
User 132093 does not improve AUC. Reverting changes.
Training on augumented user 132650 10/50 current_auc = 0.8666666666666667
User 132650 AUC after training: 0.8666666666666667
User 132650 does not improve AUC. Reverting changes.
Training on augumented user 53318 11/50 current_auc = 0.8666666666666667
User 53318 AUC after training: 0.8666666666666667
User 53318 does not improve AUC. Reverting changes.
Training on augumented user 88076 12/50 current_auc = 0.8666666666666667
User 88076 AUC after training: 0.8666666666666667
User 88076 does not improve AUC. Reverting changes.
Training on augumented user 56291 13/50 current_auc = 0.8666666666666667
User 56291 AUC after training: 0.8666666666666667
User 56291 does not improve AUC. Reverting changes.
Training on augumented user 18435 14/50 current_auc = 0.8666666666666667
User 18435 AUC after training: 0.8666666666666667
User 18435 does not improve AUC. Reverting changes.
Training on augumented user 83629 15/50 current_auc = 0.8666666666666667
User 83629 AUC after training: 0.8666666666666667
User 83629 does not improve AUC. Reverting changes.
Training on augumented user 123204 16/50 current_auc = 0.8666666666666667
User 123204 AUC after training: 0.8666666666666667
User 123204 does not improve AUC. Reverting changes.
Training on augumented user 82781 17/50 current_auc = 0.8666666666666667
User 82781 AUC after training: 0.8666666666666667
User 82781 does not improve AUC. Reverting changes.
Training on augumented user 23948 18/50 current_auc = 0.8666666666666667
User 23948 AUC after training: 0.8666666666666667
User 23948 does not improve AUC. Reverting changes.
Training on augumented user 115986 19/50 current_auc = 0.8666666666666667
User 115986 AUC after training: 0.8666666666666667
User 115986 does not improve AUC. Reverting changes.
Training on augumented user 130152 20/50 current_auc = 0.8666666666666667
User 130152 AUC after training: 0.8666666666666667
User 130152 does not improve AUC. Reverting changes.
Training on augumented user 55725 21/50 current_auc = 0.8666666666666667
User 55725 AUC after training: 0.8666666666666667
User 55725 does not improve AUC. Reverting changes.
Training on augumented user 131992 22/50 current_auc = 0.8666666666666667
User 131992 AUC after training: 0.8666666666666667
User 131992 does not improve AUC. Reverting changes.
Training on augumented user 86895 23/50 current_auc = 0.8666666666666667
User 86895 AUC after training: 0.8733333333333333
User 86895 improves AUC. Keeping the model.
Training on augumented user 122818 24/50 current_auc = 0.8733333333333333
User 122818 AUC after training: 0.8666666666666667
User 122818 does not improve AUC. Reverting changes.
Training on augumented user 22729 25/50 current_auc = 0.8733333333333333
User 22729 AUC after training: 0.8733333333333333
User 22729 does not improve AUC. Reverting changes.
Training on augumented user 89892 26/50 current_auc = 0.8733333333333333
User 89892 AUC after training: 0.88
User 89892 improves AUC. Keeping the model.
Training on augumented user 60747 27/50 current_auc = 0.88
User 60747 AUC after training: 0.8666666666666667
User 60747 does not improve AUC. Reverting changes.
Training on augumented user 70360 28/50 current_auc = 0.88
User 70360 AUC after training: 0.88
User 70360 does not improve AUC. Reverting changes.
Training on augumented user 57062 29/50 current_auc = 0.88
User 57062 AUC after training: 0.8733333333333333
User 57062 does not improve AUC. Reverting changes.
Training on augumented user 52169 30/50 current_auc = 0.88
User 52169 AUC after training: 0.88
User 52169 does not improve AUC. Reverting changes.
Training on augumented user 132721 31/50 current_auc = 0.88
User 132721 AUC after training: 0.88
User 132721 does not improve AUC. Reverting changes.
Training on augumented user 91395 32/50 current_auc = 0.88
User 91395 AUC after training: 0.8733333333333333
User 91395 does not improve AUC. Reverting changes.
Training on augumented user 33050 33/50 current_auc = 0.88
User 33050 AUC after training: 0.8733333333333333
User 33050 does not improve AUC. Reverting changes.
Training on augumented user 136052 34/50 current_auc = 0.88
User 136052 AUC after training: 0.88
User 136052 does not improve AUC. Reverting changes.
Training on augumented user 101989 35/50 current_auc = 0.88
User 101989 AUC after training: 0.88
User 101989 does not improve AUC. Reverting changes.
Training on augumented user 73306 36/50 current_auc = 0.88
User 73306 AUC after training: 0.88
User 73306 does not improve AUC. Reverting changes.
Training on augumented user 82830 37/50 current_auc = 0.88
User 82830 AUC after training: 0.8866666666666667
User 82830 improves AUC. Keeping the model.
Training on augumented user 34146 38/50 current_auc = 0.8866666666666667
User 34146 AUC after training: 0.88
User 34146 does not improve AUC. Reverting changes.
Training on augumented user 48667 39/50 current_auc = 0.8866666666666667
User 48667 AUC after training: 0.8866666666666667
User 48667 does not improve AUC. Reverting changes.
Training on augumented user 110571 40/50 current_auc = 0.8866666666666667
User 110571 AUC after training: 0.8733333333333333
User 110571 does not improve AUC. Reverting changes.
Training on augumented user 96721 41/50 current_auc = 0.8866666666666667
User 96721 AUC after training: 0.8733333333333333
User 96721 does not improve AUC. Reverting changes.
Training on augumented user 63123 42/50 current_auc = 0.8866666666666667
User 63123 AUC after training: 0.88
User 63123 does not improve AUC. Reverting changes.
Training on augumented user 137988 43/50 current_auc = 0.8866666666666667
User 137988 AUC after training: 0.8866666666666667
User 137988 does not improve AUC. Reverting changes.
Training on augumented user 97935 44/50 current_auc = 0.8866666666666667
User 97935 AUC after training: 0.88
User 97935 does not improve AUC. Reverting changes.
Training on augumented user 67766 45/50 current_auc = 0.8866666666666667
User 67766 AUC after training: 0.8866666666666667
User 67766 does not improve AUC. Reverting changes.
Training on augumented user 129414 46/50 current_auc = 0.8866666666666667
User 129414 AUC after training: 0.8866666666666667
User 129414 does not improve AUC. Reverting changes.
Training on augumented user 68330 47/50 current_auc = 0.8866666666666667
User 68330 AUC after training: 0.88
User 68330 does not improve AUC. Reverting changes.
Training on augumented user 78645 48/50 current_auc = 0.8866666666666667
User 78645 AUC after training: 0.8866666666666667
User 78645 does not improve AUC. Reverting changes.
Training on augumented user 78568 49/50 current_auc = 0.8866666666666667
User 78568 AUC after training: 0.8866666666666667
User 78568 does not improve AUC. Reverting changes.
[2024-12-02 19:37:28.077253] start test user 61168 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:28.540468] start test user 61168 218/568 recall augumented users by random, augumented_users = [80114, 17656, 79527, 68053, 94197, 109827, 83412, 32867, 27465, 43271, 13153, 33355, 6062, 131623, 103520, 61674, 75339, 127661, 26845, 125838, 115522, 117101, 111525, 137100, 67972, 133283, 18667, 126386, 14841, 37230, 102294, 126899, 95036, 29253, 84949, 47069, 28275, 6933, 101923, 134612, 109793, 92482, 17152, 129241, 112172, 119552, 24599, 1832, 29112, 55304]
[2024-12-02 19:37:28.560074] user = 61168 Cloud 218/568
[2024-12-02 19:37:28.626106] user = 61168 Local 218/568
[2024-12-02 19:37:29.247675] user = 61168 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:31.708330] user = 61168 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4856797047262966
Training on augumented user 80114 0/50 current_auc = 0.4856797047262966
User 80114 AUC after training: 0.4856467500719011
User 80114 does not improve AUC. Reverting changes.
Training on augumented user 17656 1/50 current_auc = 0.4856797047262966
User 17656 AUC after training: 0.485655737704918
User 17656 does not improve AUC. Reverting changes.
Training on augumented user 79527 2/50 current_auc = 0.4856797047262966
User 79527 AUC after training: 0.48553590259802515
User 79527 does not improve AUC. Reverting changes.
Training on augumented user 68053 3/50 current_auc = 0.4856797047262966
User 68053 AUC after training: 0.4853711293260473
User 68053 does not improve AUC. Reverting changes.
Training on augumented user 94197 4/50 current_auc = 0.4856797047262966
User 94197 AUC after training: 0.48541606749113225
User 94197 does not improve AUC. Reverting changes.
Training on augumented user 109827 5/50 current_auc = 0.4856797047262966
User 109827 AUC after training: 0.4850176157607133
User 109827 does not improve AUC. Reverting changes.
Training on augumented user 83412 6/50 current_auc = 0.4856797047262966
User 83412 AUC after training: 0.4855868325184546
User 83412 does not improve AUC. Reverting changes.
Training on augumented user 32867 7/50 current_auc = 0.4856797047262966
User 32867 AUC after training: 0.485377121081392
User 32867 does not improve AUC. Reverting changes.
Training on augumented user 27465 8/50 current_auc = 0.4856797047262966
User 27465 AUC after training: 0.4856886923593136
User 27465 improves AUC. Keeping the model.
Training on augumented user 43271 9/50 current_auc = 0.4856886923593136
User 43271 AUC after training: 0.4856018119068162
User 43271 does not improve AUC. Reverting changes.
Training on augumented user 13153 10/50 current_auc = 0.4856886923593136
User 13153 AUC after training: 0.485682700603969
User 13153 does not improve AUC. Reverting changes.
Training on augumented user 33355 11/50 current_auc = 0.4856886923593136
User 33355 AUC after training: 0.4852602818521714
User 33355 does not improve AUC. Reverting changes.
Training on augumented user 6062 12/50 current_auc = 0.4856886923593136
User 6062 AUC after training: 0.4854190633688046
User 6062 does not improve AUC. Reverting changes.
Training on augumented user 131623 13/50 current_auc = 0.4856886923593136
User 131623 AUC after training: 0.48483187134502925
User 131623 does not improve AUC. Reverting changes.
Training on augumented user 103520 14/50 current_auc = 0.4856886923593136
User 103520 AUC after training: 0.48556885725242066
User 103520 does not improve AUC. Reverting changes.
Training on augumented user 61674 15/50 current_auc = 0.4856886923593136
User 61674 AUC after training: 0.48541307161346
User 61674 does not improve AUC. Reverting changes.
Training on augumented user 75339 16/50 current_auc = 0.4856886923593136
User 75339 AUC after training: 0.4856227830505224
User 75339 does not improve AUC. Reverting changes.
Training on augumented user 127661 17/50 current_auc = 0.4856886923593136
User 127661 AUC after training: 0.48555687374173134
User 127661 does not improve AUC. Reverting changes.
Training on augumented user 26845 18/50 current_auc = 0.4856886923593136
User 26845 AUC after training: 0.4856227830505225
User 26845 does not improve AUC. Reverting changes.
Training on augumented user 125838 19/50 current_auc = 0.4856886923593136
User 125838 AUC after training: 0.4856856964816413
User 125838 does not improve AUC. Reverting changes.
Training on augumented user 115522 20/50 current_auc = 0.4856886923593136
User 115522 AUC after training: 0.4854999520659573
User 115522 does not improve AUC. Reverting changes.
Training on augumented user 117101 21/50 current_auc = 0.4856886923593136
User 117101 AUC after training: 0.48564675007190106
User 117101 does not improve AUC. Reverting changes.
Training on augumented user 111525 22/50 current_auc = 0.4856886923593136
User 111525 AUC after training: 0.4857785686894832
User 111525 improves AUC. Keeping the model.
Training on augumented user 137100 23/50 current_auc = 0.4857785686894832
User 137100 AUC after training: 0.48552092320966345
User 137100 does not improve AUC. Reverting changes.
Training on augumented user 67972 24/50 current_auc = 0.4857785686894832
User 67972 AUC after training: 0.485562865497076
User 67972 does not improve AUC. Reverting changes.
Training on augumented user 133283 25/50 current_auc = 0.4857785686894832
User 133283 AUC after training: 0.48584447799827435
User 133283 improves AUC. Keeping the model.
Training on augumented user 18667 26/50 current_auc = 0.48584447799827435
User 18667 AUC after training: 0.485868445019653
User 18667 improves AUC. Keeping the model.
Training on augumented user 126386 27/50 current_auc = 0.485868445019653
User 126386 AUC after training: 0.48585646150896367
User 126386 does not improve AUC. Reverting changes.
Training on augumented user 14841 28/50 current_auc = 0.485868445019653
User 14841 AUC after training: 0.4859463378391334
User 14841 improves AUC. Keeping the model.
Training on augumented user 37230 29/50 current_auc = 0.4859463378391334
User 37230 AUC after training: 0.4860062553925798
User 37230 improves AUC. Keeping the model.
Training on augumented user 102294 30/50 current_auc = 0.4860062553925798
User 102294 AUC after training: 0.48597030486051196
User 102294 does not improve AUC. Reverting changes.
Training on augumented user 126899 31/50 current_auc = 0.4860062553925798
User 126899 AUC after training: 0.4858474738759466
User 126899 does not improve AUC. Reverting changes.
Training on augumented user 95036 32/50 current_auc = 0.4860062553925798
User 95036 AUC after training: 0.4864166906336881
User 95036 improves AUC. Keeping the model.
Training on augumented user 29253 33/50 current_auc = 0.4864166906336881
User 29253 AUC after training: 0.486248921484038
User 29253 does not improve AUC. Reverting changes.
Training on augumented user 84949 34/50 current_auc = 0.4864166906336881
User 84949 AUC after training: 0.48642268238903275
User 84949 improves AUC. Keeping the model.
Training on augumented user 47069 35/50 current_auc = 0.48642268238903275
User 47069 AUC after training: 0.4863447895695523
User 47069 does not improve AUC. Reverting changes.
Training on augumented user 28275 36/50 current_auc = 0.48642268238903275
User 28275 AUC after training: 0.48634478956955235
User 28275 does not improve AUC. Reverting changes.
Training on augumented user 6933 37/50 current_auc = 0.48642268238903275
User 6933 AUC after training: 0.4862848720161059
User 6933 does not improve AUC. Reverting changes.
Training on augumented user 101923 38/50 current_auc = 0.48642268238903275
User 101923 AUC after training: 0.4862728885054165
User 101923 does not improve AUC. Reverting changes.
Training on augumented user 134612 39/50 current_auc = 0.48642268238903275
User 134612 AUC after training: 0.4862908637714505
User 134612 does not improve AUC. Reverting changes.
Training on augumented user 109793 40/50 current_auc = 0.48642268238903275
User 109793 AUC after training: 0.48617702041990224
User 109793 does not improve AUC. Reverting changes.
Training on augumented user 92482 41/50 current_auc = 0.48642268238903275
User 92482 AUC after training: 0.48625191736171025
User 92482 does not improve AUC. Reverting changes.
Training on augumented user 17152 42/50 current_auc = 0.48642268238903275
User 17152 AUC after training: 0.48622495446265934
User 17152 does not improve AUC. Reverting changes.
Training on augumented user 129241 43/50 current_auc = 0.48642268238903275
User 129241 AUC after training: 0.48643466589972195
User 129241 improves AUC. Keeping the model.
Training on augumented user 112172 44/50 current_auc = 0.48643466589972195
User 112172 AUC after training: 0.48639272361230945
User 112172 does not improve AUC. Reverting changes.
Training on augumented user 119552 45/50 current_auc = 0.48643466589972195
User 119552 AUC after training: 0.48633280605886303
User 119552 does not improve AUC. Reverting changes.
Training on augumented user 24599 46/50 current_auc = 0.48643466589972195
User 24599 AUC after training: 0.48642268238903275
User 24599 does not improve AUC. Reverting changes.
Training on augumented user 1832 47/50 current_auc = 0.48643466589972195
User 1832 AUC after training: 0.4863747483462755
User 1832 does not improve AUC. Reverting changes.
Training on augumented user 29112 48/50 current_auc = 0.48643466589972195
User 29112 AUC after training: 0.48615305339852366
User 29112 does not improve AUC. Reverting changes.
Training on augumented user 55304 49/50 current_auc = 0.48643466589972195
User 55304 AUC after training: 0.4865784680279934
User 55304 improves AUC. Keeping the model.
[2024-12-02 19:38:04.138894] start test user 61204 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:04.636477] start test user 61204 219/568 recall augumented users by random, augumented_users = [4794, 83654, 125316, 1807, 30663, 42965, 51881, 20450, 40729, 60013, 94836, 49978, 13125, 66486, 94906, 123227, 73697, 20182, 52772, 66167, 115173, 23459, 95162, 76211, 92668, 31692, 6926, 130710, 48726, 66921, 49933, 21552, 97178, 39907, 106681, 109559, 133568, 50450, 64430, 1851, 44961, 112485, 80463, 38570, 95865, 131358, 6546, 14049, 132000, 29761]
[2024-12-02 19:38:04.651918] user = 61204 Cloud 219/568
[2024-12-02 19:38:04.666633] user = 61204 Local 219/568
[2024-12-02 19:38:04.769891] user = 61204 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:07.528745] user = 61204 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6185781006746238
Training on augumented user 4794 0/50 current_auc = 0.6185781006746238
User 4794 AUC after training: 0.6190970420342501
User 4794 improves AUC. Keeping the model.
Training on augumented user 83654 1/50 current_auc = 0.6190970420342501
User 83654 AUC after training: 0.6196159833938765
User 83654 improves AUC. Keeping the model.
Training on augumented user 125316 2/50 current_auc = 0.6196159833938765
User 125316 AUC after training: 0.6206538661131292
User 125316 improves AUC. Keeping the model.
Training on augumented user 1807 3/50 current_auc = 0.6206538661131292
User 1807 AUC after training: 0.6201349247535028
User 1807 does not improve AUC. Reverting changes.
Training on augumented user 30663 4/50 current_auc = 0.6206538661131292
User 30663 AUC after training: 0.6206538661131292
User 30663 does not improve AUC. Reverting changes.
Training on augumented user 42965 5/50 current_auc = 0.6206538661131292
User 42965 AUC after training: 0.6190970420342502
User 42965 does not improve AUC. Reverting changes.
Training on augumented user 51881 6/50 current_auc = 0.6206538661131292
User 51881 AUC after training: 0.6185781006746238
User 51881 does not improve AUC. Reverting changes.
Training on augumented user 20450 7/50 current_auc = 0.6206538661131292
User 20450 AUC after training: 0.6190970420342501
User 20450 does not improve AUC. Reverting changes.
Training on augumented user 40729 8/50 current_auc = 0.6206538661131292
User 40729 AUC after training: 0.6206538661131292
User 40729 does not improve AUC. Reverting changes.
Training on augumented user 60013 9/50 current_auc = 0.6206538661131292
User 60013 AUC after training: 0.6216917488323819
User 60013 improves AUC. Keeping the model.
Training on augumented user 94836 10/50 current_auc = 0.6216917488323819
User 94836 AUC after training: 0.6211728074727556
User 94836 does not improve AUC. Reverting changes.
Training on augumented user 49978 11/50 current_auc = 0.6216917488323819
User 49978 AUC after training: 0.6201349247535028
User 49978 does not improve AUC. Reverting changes.
Training on augumented user 13125 12/50 current_auc = 0.6216917488323819
User 13125 AUC after training: 0.6211728074727556
User 13125 does not improve AUC. Reverting changes.
Training on augumented user 66486 13/50 current_auc = 0.6216917488323819
User 66486 AUC after training: 0.6185781006746238
User 66486 does not improve AUC. Reverting changes.
Training on augumented user 94906 14/50 current_auc = 0.6216917488323819
User 94906 AUC after training: 0.6211728074727556
User 94906 does not improve AUC. Reverting changes.
Training on augumented user 123227 15/50 current_auc = 0.6216917488323819
User 123227 AUC after training: 0.6227296315516346
User 123227 improves AUC. Keeping the model.
Training on augumented user 73697 16/50 current_auc = 0.6227296315516346
User 73697 AUC after training: 0.6201349247535028
User 73697 does not improve AUC. Reverting changes.
Training on augumented user 20182 17/50 current_auc = 0.6227296315516346
User 20182 AUC after training: 0.6206538661131292
User 20182 does not improve AUC. Reverting changes.
Training on augumented user 52772 18/50 current_auc = 0.6227296315516346
User 52772 AUC after training: 0.6227296315516346
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 66167 19/50 current_auc = 0.6227296315516346
User 66167 AUC after training: 0.6222106901920083
User 66167 does not improve AUC. Reverting changes.
Training on augumented user 115173 20/50 current_auc = 0.6227296315516346
User 115173 AUC after training: 0.6206538661131292
User 115173 does not improve AUC. Reverting changes.
Training on augumented user 23459 21/50 current_auc = 0.6227296315516346
User 23459 AUC after training: 0.6201349247535028
User 23459 does not improve AUC. Reverting changes.
Training on augumented user 95162 22/50 current_auc = 0.6227296315516346
User 95162 AUC after training: 0.6227296315516346
User 95162 does not improve AUC. Reverting changes.
Training on augumented user 76211 23/50 current_auc = 0.6227296315516346
User 76211 AUC after training: 0.6201349247535028
User 76211 does not improve AUC. Reverting changes.
Training on augumented user 92668 24/50 current_auc = 0.6227296315516346
User 92668 AUC after training: 0.6227296315516346
User 92668 does not improve AUC. Reverting changes.
Training on augumented user 31692 25/50 current_auc = 0.6227296315516346
User 31692 AUC after training: 0.6227296315516346
User 31692 does not improve AUC. Reverting changes.
Training on augumented user 6926 26/50 current_auc = 0.6227296315516346
User 6926 AUC after training: 0.6222106901920084
User 6926 does not improve AUC. Reverting changes.
Training on augumented user 130710 27/50 current_auc = 0.6227296315516346
User 130710 AUC after training: 0.621951219512195
User 130710 does not improve AUC. Reverting changes.
Training on augumented user 48726 28/50 current_auc = 0.6227296315516346
User 48726 AUC after training: 0.6222106901920084
User 48726 does not improve AUC. Reverting changes.
Training on augumented user 66921 29/50 current_auc = 0.6227296315516346
User 66921 AUC after training: 0.6211728074727556
User 66921 does not improve AUC. Reverting changes.
Training on augumented user 49933 30/50 current_auc = 0.6227296315516346
User 49933 AUC after training: 0.6211728074727556
User 49933 does not improve AUC. Reverting changes.
Training on augumented user 21552 31/50 current_auc = 0.6227296315516346
User 21552 AUC after training: 0.6227296315516346
User 21552 does not improve AUC. Reverting changes.
Training on augumented user 97178 32/50 current_auc = 0.6227296315516346
User 97178 AUC after training: 0.621691748832382
User 97178 does not improve AUC. Reverting changes.
Training on augumented user 39907 33/50 current_auc = 0.6227296315516346
User 39907 AUC after training: 0.6185781006746238
User 39907 does not improve AUC. Reverting changes.
Training on augumented user 106681 34/50 current_auc = 0.6227296315516346
User 106681 AUC after training: 0.6201349247535028
User 106681 does not improve AUC. Reverting changes.
Training on augumented user 109559 35/50 current_auc = 0.6227296315516346
User 109559 AUC after training: 0.6211728074727556
User 109559 does not improve AUC. Reverting changes.
Training on augumented user 133568 36/50 current_auc = 0.6227296315516346
User 133568 AUC after training: 0.6201349247535028
User 133568 does not improve AUC. Reverting changes.
Training on augumented user 50450 37/50 current_auc = 0.6227296315516346
User 50450 AUC after training: 0.6196159833938766
User 50450 does not improve AUC. Reverting changes.
Training on augumented user 64430 38/50 current_auc = 0.6227296315516346
User 64430 AUC after training: 0.6170212765957447
User 64430 does not improve AUC. Reverting changes.
Training on augumented user 1851 39/50 current_auc = 0.6227296315516346
User 1851 AUC after training: 0.6206538661131293
User 1851 does not improve AUC. Reverting changes.
Training on augumented user 44961 40/50 current_auc = 0.6227296315516346
User 44961 AUC after training: 0.6175402179553711
User 44961 does not improve AUC. Reverting changes.
Training on augumented user 112485 41/50 current_auc = 0.6227296315516346
User 112485 AUC after training: 0.621691748832382
User 112485 does not improve AUC. Reverting changes.
Training on augumented user 80463 42/50 current_auc = 0.6227296315516346
User 80463 AUC after training: 0.6216917488323819
User 80463 does not improve AUC. Reverting changes.
Training on augumented user 38570 43/50 current_auc = 0.6227296315516346
User 38570 AUC after training: 0.6237675142708874
User 38570 improves AUC. Keeping the model.
Training on augumented user 95865 44/50 current_auc = 0.6237675142708874
User 95865 AUC after training: 0.6237675142708874
User 95865 does not improve AUC. Reverting changes.
Training on augumented user 131358 45/50 current_auc = 0.6237675142708874
User 131358 AUC after training: 0.623248572911261
User 131358 does not improve AUC. Reverting changes.
Training on augumented user 6546 46/50 current_auc = 0.6237675142708874
User 6546 AUC after training: 0.6237675142708874
User 6546 does not improve AUC. Reverting changes.
Training on augumented user 14049 47/50 current_auc = 0.6237675142708874
User 14049 AUC after training: 0.620134924753503
User 14049 does not improve AUC. Reverting changes.
Training on augumented user 132000 48/50 current_auc = 0.6237675142708874
User 132000 AUC after training: 0.6227296315516346
User 132000 does not improve AUC. Reverting changes.
Training on augumented user 29761 49/50 current_auc = 0.6237675142708874
User 29761 AUC after training: 0.6222106901920084
User 29761 does not improve AUC. Reverting changes.
[2024-12-02 19:38:27.981952] start test user 61215 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:28.224634] start test user 61215 220/568 recall augumented users by random, augumented_users = [71738, 99650, 84128, 59109, 131787, 1136, 61288, 132378, 5211, 129061, 134705, 87970, 76762, 104495, 56419, 130328, 33952, 118177, 75912, 28479, 55937, 101625, 74234, 49843, 96903, 84819, 75474, 127151, 71554, 47311, 114719, 44382, 80975, 24380, 70277, 53427, 65277, 117615, 104485, 68686, 115589, 79486, 121181, 120408, 137834, 28475, 82375, 45796, 516, 37273]
[2024-12-02 19:38:28.231873] user = 61215 Cloud 220/568
[2024-12-02 19:38:28.238502] user = 61215 Local 220/568
[2024-12-02 19:38:28.281198] user = 61215 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:29.648488] user = 61215 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.19230769230769232
Training on augumented user 71738 0/50 current_auc = 0.19230769230769232
User 71738 AUC after training: 0.19230769230769232
User 71738 does not improve AUC. Reverting changes.
Training on augumented user 99650 1/50 current_auc = 0.19230769230769232
User 99650 AUC after training: 0.19230769230769232
User 99650 does not improve AUC. Reverting changes.
Training on augumented user 84128 2/50 current_auc = 0.19230769230769232
User 84128 AUC after training: 0.21153846153846156
User 84128 improves AUC. Keeping the model.
Training on augumented user 59109 3/50 current_auc = 0.21153846153846156
User 59109 AUC after training: 0.19230769230769232
User 59109 does not improve AUC. Reverting changes.
Training on augumented user 131787 4/50 current_auc = 0.21153846153846156
User 131787 AUC after training: 0.21153846153846156
User 131787 does not improve AUC. Reverting changes.
Training on augumented user 1136 5/50 current_auc = 0.21153846153846156
User 1136 AUC after training: 0.21153846153846156
User 1136 does not improve AUC. Reverting changes.
Training on augumented user 61288 6/50 current_auc = 0.21153846153846156
User 61288 AUC after training: 0.21153846153846156
User 61288 does not improve AUC. Reverting changes.
Training on augumented user 132378 7/50 current_auc = 0.21153846153846156
User 132378 AUC after training: 0.19230769230769232
User 132378 does not improve AUC. Reverting changes.
Training on augumented user 5211 8/50 current_auc = 0.21153846153846156
User 5211 AUC after training: 0.21153846153846156
User 5211 does not improve AUC. Reverting changes.
Training on augumented user 129061 9/50 current_auc = 0.21153846153846156
User 129061 AUC after training: 0.21153846153846156
User 129061 does not improve AUC. Reverting changes.
Training on augumented user 134705 10/50 current_auc = 0.21153846153846156
User 134705 AUC after training: 0.21153846153846156
User 134705 does not improve AUC. Reverting changes.
Training on augumented user 87970 11/50 current_auc = 0.21153846153846156
User 87970 AUC after training: 0.21153846153846156
User 87970 does not improve AUC. Reverting changes.
Training on augumented user 76762 12/50 current_auc = 0.21153846153846156
User 76762 AUC after training: 0.23076923076923078
User 76762 improves AUC. Keeping the model.
Training on augumented user 104495 13/50 current_auc = 0.23076923076923078
User 104495 AUC after training: 0.23076923076923078
User 104495 does not improve AUC. Reverting changes.
Training on augumented user 56419 14/50 current_auc = 0.23076923076923078
User 56419 AUC after training: 0.23076923076923078
User 56419 does not improve AUC. Reverting changes.
Training on augumented user 130328 15/50 current_auc = 0.23076923076923078
User 130328 AUC after training: 0.19230769230769232
User 130328 does not improve AUC. Reverting changes.
Training on augumented user 33952 16/50 current_auc = 0.23076923076923078
User 33952 AUC after training: 0.23076923076923078
User 33952 does not improve AUC. Reverting changes.
Training on augumented user 118177 17/50 current_auc = 0.23076923076923078
User 118177 AUC after training: 0.25
User 118177 improves AUC. Keeping the model.
Training on augumented user 75912 18/50 current_auc = 0.25
User 75912 AUC after training: 0.25
User 75912 does not improve AUC. Reverting changes.
Training on augumented user 28479 19/50 current_auc = 0.25
User 28479 AUC after training: 0.25
User 28479 does not improve AUC. Reverting changes.
Training on augumented user 55937 20/50 current_auc = 0.25
User 55937 AUC after training: 0.25
User 55937 does not improve AUC. Reverting changes.
Training on augumented user 101625 21/50 current_auc = 0.25
User 101625 AUC after training: 0.25
User 101625 does not improve AUC. Reverting changes.
Training on augumented user 74234 22/50 current_auc = 0.25
User 74234 AUC after training: 0.25
User 74234 does not improve AUC. Reverting changes.
Training on augumented user 49843 23/50 current_auc = 0.25
User 49843 AUC after training: 0.25
User 49843 does not improve AUC. Reverting changes.
Training on augumented user 96903 24/50 current_auc = 0.25
User 96903 AUC after training: 0.23076923076923078
User 96903 does not improve AUC. Reverting changes.
Training on augumented user 84819 25/50 current_auc = 0.25
User 84819 AUC after training: 0.25
User 84819 does not improve AUC. Reverting changes.
Training on augumented user 75474 26/50 current_auc = 0.25
User 75474 AUC after training: 0.25
User 75474 does not improve AUC. Reverting changes.
Training on augumented user 127151 27/50 current_auc = 0.25
User 127151 AUC after training: 0.25
User 127151 does not improve AUC. Reverting changes.
Training on augumented user 71554 28/50 current_auc = 0.25
User 71554 AUC after training: 0.25
User 71554 does not improve AUC. Reverting changes.
Training on augumented user 47311 29/50 current_auc = 0.25
User 47311 AUC after training: 0.25
User 47311 does not improve AUC. Reverting changes.
Training on augumented user 114719 30/50 current_auc = 0.25
User 114719 AUC after training: 0.25
User 114719 does not improve AUC. Reverting changes.
Training on augumented user 44382 31/50 current_auc = 0.25
User 44382 AUC after training: 0.25
User 44382 does not improve AUC. Reverting changes.
Training on augumented user 80975 32/50 current_auc = 0.25
User 80975 AUC after training: 0.25
User 80975 does not improve AUC. Reverting changes.
Training on augumented user 24380 33/50 current_auc = 0.25
User 24380 AUC after training: 0.25
User 24380 does not improve AUC. Reverting changes.
Training on augumented user 70277 34/50 current_auc = 0.25
User 70277 AUC after training: 0.25
User 70277 does not improve AUC. Reverting changes.
Training on augumented user 53427 35/50 current_auc = 0.25
User 53427 AUC after training: 0.25
User 53427 does not improve AUC. Reverting changes.
Training on augumented user 65277 36/50 current_auc = 0.25
User 65277 AUC after training: 0.25
User 65277 does not improve AUC. Reverting changes.
Training on augumented user 117615 37/50 current_auc = 0.25
User 117615 AUC after training: 0.25
User 117615 does not improve AUC. Reverting changes.
Training on augumented user 104485 38/50 current_auc = 0.25
User 104485 AUC after training: 0.25
User 104485 does not improve AUC. Reverting changes.
Training on augumented user 68686 39/50 current_auc = 0.25
User 68686 AUC after training: 0.25
User 68686 does not improve AUC. Reverting changes.
Training on augumented user 115589 40/50 current_auc = 0.25
User 115589 AUC after training: 0.25
User 115589 does not improve AUC. Reverting changes.
Training on augumented user 79486 41/50 current_auc = 0.25
User 79486 AUC after training: 0.25
User 79486 does not improve AUC. Reverting changes.
Training on augumented user 121181 42/50 current_auc = 0.25
User 121181 AUC after training: 0.25
User 121181 does not improve AUC. Reverting changes.
Training on augumented user 120408 43/50 current_auc = 0.25
User 120408 AUC after training: 0.25
User 120408 does not improve AUC. Reverting changes.
Training on augumented user 137834 44/50 current_auc = 0.25
User 137834 AUC after training: 0.25
User 137834 does not improve AUC. Reverting changes.
Training on augumented user 28475 45/50 current_auc = 0.25
User 28475 AUC after training: 0.25
User 28475 does not improve AUC. Reverting changes.
Training on augumented user 82375 46/50 current_auc = 0.25
User 82375 AUC after training: 0.25
User 82375 does not improve AUC. Reverting changes.
Training on augumented user 45796 47/50 current_auc = 0.25
User 45796 AUC after training: 0.25
User 45796 does not improve AUC. Reverting changes.
Training on augumented user 516 48/50 current_auc = 0.25
User 516 AUC after training: 0.25
User 516 does not improve AUC. Reverting changes.
Training on augumented user 37273 49/50 current_auc = 0.25
User 37273 AUC after training: 0.25
User 37273 does not improve AUC. Reverting changes.
[2024-12-02 19:38:57.042534] start test user 61240 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:57.459304] start test user 61240 221/568 recall augumented users by random, augumented_users = [93794, 2573, 20574, 133230, 10480, 74031, 98067, 135820, 37266, 120870, 30733, 69416, 120506, 92214, 127537, 30165, 98750, 37200, 24812, 133927, 33344, 111852, 78114, 127026, 7782, 116755, 130827, 62680, 59901, 21077, 27955, 110055, 33844, 5460, 13642, 133285, 71577, 54454, 39342, 102717, 6218, 135017, 74365, 66823, 41436, 34941, 86747, 6253, 82421, 76450]
[2024-12-02 19:38:57.474092] user = 61240 Cloud 221/568
[2024-12-02 19:38:57.488204] user = 61240 Local 221/568
[2024-12-02 19:38:57.511265] user = 61240 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:59.540518] user = 61240 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6955291454442558
Training on augumented user 93794 0/50 current_auc = 0.6955291454442558
User 93794 AUC after training: 0.6963780418788907
User 93794 improves AUC. Keeping the model.
Training on augumented user 2573 1/50 current_auc = 0.6963780418788907
User 2573 AUC after training: 0.7006225240520656
User 2573 improves AUC. Keeping the model.
Training on augumented user 20574 2/50 current_auc = 0.7006225240520656
User 20574 AUC after training: 0.697792869269949
User 20574 does not improve AUC. Reverting changes.
Training on augumented user 133230 3/50 current_auc = 0.7006225240520656
User 133230 AUC after training: 0.7014714204867006
User 133230 improves AUC. Keeping the model.
Training on augumented user 10480 4/50 current_auc = 0.7014714204867006
User 10480 AUC after training: 0.7009054895302773
User 10480 does not improve AUC. Reverting changes.
Training on augumented user 74031 5/50 current_auc = 0.7014714204867006
User 74031 AUC after training: 0.698641765704584
User 74031 does not improve AUC. Reverting changes.
Training on augumented user 98067 6/50 current_auc = 0.7014714204867006
User 98067 AUC after training: 0.6975099037917374
User 98067 does not improve AUC. Reverting changes.
Training on augumented user 135820 7/50 current_auc = 0.7014714204867006
User 135820 AUC after training: 0.7014714204867006
User 135820 does not improve AUC. Reverting changes.
Training on augumented user 37266 8/50 current_auc = 0.7014714204867006
User 37266 AUC after training: 0.7023203169213356
User 37266 improves AUC. Keeping the model.
Training on augumented user 120870 9/50 current_auc = 0.7023203169213356
User 120870 AUC after training: 0.7023203169213357
User 120870 improves AUC. Keeping the model.
Training on augumented user 30733 10/50 current_auc = 0.7023203169213357
User 30733 AUC after training: 0.7026032823995473
User 30733 improves AUC. Keeping the model.
Training on augumented user 69416 11/50 current_auc = 0.7026032823995473
User 69416 AUC after training: 0.7014714204867005
User 69416 does not improve AUC. Reverting changes.
Training on augumented user 120506 12/50 current_auc = 0.7026032823995473
User 120506 AUC after training: 0.7017543859649122
User 120506 does not improve AUC. Reverting changes.
Training on augumented user 92214 13/50 current_auc = 0.7026032823995473
User 92214 AUC after training: 0.702037351443124
User 92214 does not improve AUC. Reverting changes.
Training on augumented user 127537 14/50 current_auc = 0.7026032823995473
User 127537 AUC after training: 0.7023203169213357
User 127537 does not improve AUC. Reverting changes.
Training on augumented user 30165 15/50 current_auc = 0.7026032823995473
User 30165 AUC after training: 0.7026032823995472
User 30165 does not improve AUC. Reverting changes.
Training on augumented user 98750 16/50 current_auc = 0.7026032823995473
User 98750 AUC after training: 0.7026032823995473
User 98750 does not improve AUC. Reverting changes.
Training on augumented user 37200 17/50 current_auc = 0.7026032823995473
User 37200 AUC after training: 0.6992076966610073
User 37200 does not improve AUC. Reverting changes.
Training on augumented user 24812 18/50 current_auc = 0.7026032823995473
User 24812 AUC after training: 0.7028862478777589
User 24812 improves AUC. Keeping the model.
Training on augumented user 133927 19/50 current_auc = 0.7028862478777589
User 133927 AUC after training: 0.702037351443124
User 133927 does not improve AUC. Reverting changes.
Training on augumented user 33344 20/50 current_auc = 0.7028862478777589
User 33344 AUC after training: 0.7009054895302773
User 33344 does not improve AUC. Reverting changes.
Training on augumented user 111852 21/50 current_auc = 0.7028862478777589
User 111852 AUC after training: 0.7031692133559706
User 111852 improves AUC. Keeping the model.
Training on augumented user 78114 22/50 current_auc = 0.7031692133559706
User 78114 AUC after training: 0.7028862478777589
User 78114 does not improve AUC. Reverting changes.
Training on augumented user 127026 23/50 current_auc = 0.7031692133559706
User 127026 AUC after training: 0.7031692133559705
User 127026 does not improve AUC. Reverting changes.
Training on augumented user 7782 24/50 current_auc = 0.7031692133559706
User 7782 AUC after training: 0.7028862478777589
User 7782 does not improve AUC. Reverting changes.
Training on augumented user 116755 25/50 current_auc = 0.7031692133559706
User 116755 AUC after training: 0.7037351443123938
User 116755 improves AUC. Keeping the model.
Training on augumented user 130827 26/50 current_auc = 0.7037351443123938
User 130827 AUC after training: 0.7043010752688172
User 130827 improves AUC. Keeping the model.
Training on augumented user 62680 27/50 current_auc = 0.7043010752688172
User 62680 AUC after training: 0.7000565930956424
User 62680 does not improve AUC. Reverting changes.
Training on augumented user 59901 28/50 current_auc = 0.7043010752688172
User 59901 AUC after training: 0.702037351443124
User 59901 does not improve AUC. Reverting changes.
Training on augumented user 21077 29/50 current_auc = 0.7043010752688172
User 21077 AUC after training: 0.7031692133559706
User 21077 does not improve AUC. Reverting changes.
Training on augumented user 27955 30/50 current_auc = 0.7043010752688172
User 27955 AUC after training: 0.7037351443123938
User 27955 does not improve AUC. Reverting changes.
Training on augumented user 110055 31/50 current_auc = 0.7043010752688172
User 110055 AUC after training: 0.7043010752688172
User 110055 does not improve AUC. Reverting changes.
Training on augumented user 33844 32/50 current_auc = 0.7043010752688172
User 33844 AUC after training: 0.7031692133559706
User 33844 does not improve AUC. Reverting changes.
Training on augumented user 5460 33/50 current_auc = 0.7043010752688172
User 5460 AUC after training: 0.7031692133559706
User 5460 does not improve AUC. Reverting changes.
Training on augumented user 13642 34/50 current_auc = 0.7043010752688172
User 13642 AUC after training: 0.7040181097906055
User 13642 does not improve AUC. Reverting changes.
Training on augumented user 133285 35/50 current_auc = 0.7043010752688172
User 133285 AUC after training: 0.7023203169213356
User 133285 does not improve AUC. Reverting changes.
Training on augumented user 71577 36/50 current_auc = 0.7043010752688172
User 71577 AUC after training: 0.7040181097906055
User 71577 does not improve AUC. Reverting changes.
Training on augumented user 54454 37/50 current_auc = 0.7043010752688172
User 54454 AUC after training: 0.7040181097906055
User 54454 does not improve AUC. Reverting changes.
Training on augumented user 39342 38/50 current_auc = 0.7043010752688172
User 39342 AUC after training: 0.7040181097906055
User 39342 does not improve AUC. Reverting changes.
Training on augumented user 102717 39/50 current_auc = 0.7043010752688172
User 102717 AUC after training: 0.7037351443123938
User 102717 does not improve AUC. Reverting changes.
Training on augumented user 6218 40/50 current_auc = 0.7043010752688172
User 6218 AUC after training: 0.7028862478777589
User 6218 does not improve AUC. Reverting changes.
Training on augumented user 135017 41/50 current_auc = 0.7043010752688172
User 135017 AUC after training: 0.7043010752688172
User 135017 does not improve AUC. Reverting changes.
Training on augumented user 74365 42/50 current_auc = 0.7043010752688172
User 74365 AUC after training: 0.7043010752688172
User 74365 does not improve AUC. Reverting changes.
Training on augumented user 66823 43/50 current_auc = 0.7043010752688172
User 66823 AUC after training: 0.7037351443123939
User 66823 does not improve AUC. Reverting changes.
Training on augumented user 41436 44/50 current_auc = 0.7043010752688172
User 41436 AUC after training: 0.7037351443123938
User 41436 does not improve AUC. Reverting changes.
Training on augumented user 34941 45/50 current_auc = 0.7043010752688172
User 34941 AUC after training: 0.7045840407470289
User 34941 improves AUC. Keeping the model.
Training on augumented user 86747 46/50 current_auc = 0.7045840407470289
User 86747 AUC after training: 0.7034521788341822
User 86747 does not improve AUC. Reverting changes.
Training on augumented user 6253 47/50 current_auc = 0.7045840407470289
User 6253 AUC after training: 0.7034521788341822
User 6253 does not improve AUC. Reverting changes.
Training on augumented user 82421 48/50 current_auc = 0.7045840407470289
User 82421 AUC after training: 0.7037351443123938
User 82421 does not improve AUC. Reverting changes.
Training on augumented user 76450 49/50 current_auc = 0.7045840407470289
User 76450 AUC after training: 0.7043010752688172
User 76450 does not improve AUC. Reverting changes.
[2024-12-02 19:39:26.279530] start test user 61258 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:26.923771] start test user 61258 222/568 recall augumented users by random, augumented_users = [59474, 36689, 73413, 76803, 19856, 99188, 64754, 33926, 52224, 105754, 37618, 46956, 10126, 101607, 76276, 6526, 42616, 61119, 70147, 106865, 72570, 18986, 83375, 859, 135557, 107667, 44414, 75475, 81218, 85952, 87428, 53454, 106731, 21874, 20078, 108647, 56853, 57252, 13606, 80775, 76253, 108600, 136138, 100670, 21172, 31164, 107288, 29569, 37978, 110937]
[2024-12-02 19:39:26.939676] user = 61258 Cloud 222/568
[2024-12-02 19:39:26.971879] user = 61258 Local 222/568
[2024-12-02 19:39:27.095067] user = 61258 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:29.829402] user = 61258 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6596685082872928
Training on augumented user 59474 0/50 current_auc = 0.6596685082872928
User 59474 AUC after training: 0.660036832412523
User 59474 improves AUC. Keeping the model.
Training on augumented user 36689 1/50 current_auc = 0.660036832412523
User 36689 AUC after training: 0.660036832412523
User 36689 does not improve AUC. Reverting changes.
Training on augumented user 73413 2/50 current_auc = 0.660036832412523
User 73413 AUC after training: 0.6596685082872928
User 73413 does not improve AUC. Reverting changes.
Training on augumented user 76803 3/50 current_auc = 0.660036832412523
User 76803 AUC after training: 0.660036832412523
User 76803 does not improve AUC. Reverting changes.
Training on augumented user 19856 4/50 current_auc = 0.660036832412523
User 19856 AUC after training: 0.6596685082872928
User 19856 does not improve AUC. Reverting changes.
Training on augumented user 99188 5/50 current_auc = 0.660036832412523
User 99188 AUC after training: 0.6596685082872928
User 99188 does not improve AUC. Reverting changes.
Training on augumented user 64754 6/50 current_auc = 0.660036832412523
User 64754 AUC after training: 0.6596685082872928
User 64754 does not improve AUC. Reverting changes.
Training on augumented user 33926 7/50 current_auc = 0.660036832412523
User 33926 AUC after training: 0.6596685082872928
User 33926 does not improve AUC. Reverting changes.
Training on augumented user 52224 8/50 current_auc = 0.660036832412523
User 52224 AUC after training: 0.6596685082872928
User 52224 does not improve AUC. Reverting changes.
Training on augumented user 105754 9/50 current_auc = 0.660036832412523
User 105754 AUC after training: 0.6604051565377532
User 105754 improves AUC. Keeping the model.
Training on augumented user 37618 10/50 current_auc = 0.6604051565377532
User 37618 AUC after training: 0.658195211786372
User 37618 does not improve AUC. Reverting changes.
Training on augumented user 46956 11/50 current_auc = 0.6604051565377532
User 46956 AUC after training: 0.6596685082872928
User 46956 does not improve AUC. Reverting changes.
Training on augumented user 10126 12/50 current_auc = 0.6604051565377532
User 10126 AUC after training: 0.660036832412523
User 10126 does not improve AUC. Reverting changes.
Training on augumented user 101607 13/50 current_auc = 0.6604051565377532
User 101607 AUC after training: 0.660036832412523
User 101607 does not improve AUC. Reverting changes.
Training on augumented user 76276 14/50 current_auc = 0.6604051565377532
User 76276 AUC after training: 0.660036832412523
User 76276 does not improve AUC. Reverting changes.
Training on augumented user 6526 15/50 current_auc = 0.6604051565377532
User 6526 AUC after training: 0.660036832412523
User 6526 does not improve AUC. Reverting changes.
Training on augumented user 42616 16/50 current_auc = 0.6604051565377532
User 42616 AUC after training: 0.6596685082872928
User 42616 does not improve AUC. Reverting changes.
Training on augumented user 61119 17/50 current_auc = 0.6604051565377532
User 61119 AUC after training: 0.6596685082872928
User 61119 does not improve AUC. Reverting changes.
Training on augumented user 70147 18/50 current_auc = 0.6604051565377532
User 70147 AUC after training: 0.6604051565377532
User 70147 does not improve AUC. Reverting changes.
Training on augumented user 106865 19/50 current_auc = 0.6604051565377532
User 106865 AUC after training: 0.660036832412523
User 106865 does not improve AUC. Reverting changes.
Training on augumented user 72570 20/50 current_auc = 0.6604051565377532
User 72570 AUC after training: 0.6604051565377532
User 72570 does not improve AUC. Reverting changes.
Training on augumented user 18986 21/50 current_auc = 0.6604051565377532
User 18986 AUC after training: 0.6604051565377532
User 18986 does not improve AUC. Reverting changes.
Training on augumented user 83375 22/50 current_auc = 0.6604051565377532
User 83375 AUC after training: 0.6604051565377532
User 83375 does not improve AUC. Reverting changes.
Training on augumented user 859 23/50 current_auc = 0.6604051565377532
User 859 AUC after training: 0.6596685082872928
User 859 does not improve AUC. Reverting changes.
Training on augumented user 135557 24/50 current_auc = 0.6604051565377532
User 135557 AUC after training: 0.660036832412523
User 135557 does not improve AUC. Reverting changes.
Training on augumented user 107667 25/50 current_auc = 0.6604051565377532
User 107667 AUC after training: 0.6604051565377532
User 107667 does not improve AUC. Reverting changes.
Training on augumented user 44414 26/50 current_auc = 0.6604051565377532
User 44414 AUC after training: 0.6596685082872928
User 44414 does not improve AUC. Reverting changes.
Training on augumented user 75475 27/50 current_auc = 0.6604051565377532
User 75475 AUC after training: 0.6596685082872928
User 75475 does not improve AUC. Reverting changes.
Training on augumented user 81218 28/50 current_auc = 0.6604051565377532
User 81218 AUC after training: 0.6589318600368324
User 81218 does not improve AUC. Reverting changes.
Training on augumented user 85952 29/50 current_auc = 0.6604051565377532
User 85952 AUC after training: 0.660036832412523
User 85952 does not improve AUC. Reverting changes.
Training on augumented user 87428 30/50 current_auc = 0.6604051565377532
User 87428 AUC after training: 0.6585635359116022
User 87428 does not improve AUC. Reverting changes.
Training on augumented user 53454 31/50 current_auc = 0.6604051565377532
User 53454 AUC after training: 0.6596685082872928
User 53454 does not improve AUC. Reverting changes.
Training on augumented user 106731 32/50 current_auc = 0.6604051565377532
User 106731 AUC after training: 0.660036832412523
User 106731 does not improve AUC. Reverting changes.
Training on augumented user 21874 33/50 current_auc = 0.6604051565377532
User 21874 AUC after training: 0.660036832412523
User 21874 does not improve AUC. Reverting changes.
Training on augumented user 20078 34/50 current_auc = 0.6604051565377532
User 20078 AUC after training: 0.6596685082872928
User 20078 does not improve AUC. Reverting changes.
Training on augumented user 108647 35/50 current_auc = 0.6604051565377532
User 108647 AUC after training: 0.6596685082872928
User 108647 does not improve AUC. Reverting changes.
Training on augumented user 56853 36/50 current_auc = 0.6604051565377532
User 56853 AUC after training: 0.6593001841620627
User 56853 does not improve AUC. Reverting changes.
Training on augumented user 57252 37/50 current_auc = 0.6604051565377532
User 57252 AUC after training: 0.660036832412523
User 57252 does not improve AUC. Reverting changes.
Training on augumented user 13606 38/50 current_auc = 0.6604051565377532
User 13606 AUC after training: 0.6593001841620627
User 13606 does not improve AUC. Reverting changes.
Training on augumented user 80775 39/50 current_auc = 0.6604051565377532
User 80775 AUC after training: 0.660036832412523
User 80775 does not improve AUC. Reverting changes.
Training on augumented user 76253 40/50 current_auc = 0.6604051565377532
User 76253 AUC after training: 0.6596685082872928
User 76253 does not improve AUC. Reverting changes.
Training on augumented user 108600 41/50 current_auc = 0.6604051565377532
User 108600 AUC after training: 0.6604051565377532
User 108600 does not improve AUC. Reverting changes.
Training on augumented user 136138 42/50 current_auc = 0.6604051565377532
User 136138 AUC after training: 0.6596685082872928
User 136138 does not improve AUC. Reverting changes.
Training on augumented user 100670 43/50 current_auc = 0.6604051565377532
User 100670 AUC after training: 0.660036832412523
User 100670 does not improve AUC. Reverting changes.
Training on augumented user 21172 44/50 current_auc = 0.6604051565377532
User 21172 AUC after training: 0.660036832412523
User 21172 does not improve AUC. Reverting changes.
Training on augumented user 31164 45/50 current_auc = 0.6604051565377532
User 31164 AUC after training: 0.6596685082872928
User 31164 does not improve AUC. Reverting changes.
Training on augumented user 107288 46/50 current_auc = 0.6604051565377532
User 107288 AUC after training: 0.6596685082872928
User 107288 does not improve AUC. Reverting changes.
Training on augumented user 29569 47/50 current_auc = 0.6604051565377532
User 29569 AUC after training: 0.660036832412523
User 29569 does not improve AUC. Reverting changes.
Training on augumented user 37978 48/50 current_auc = 0.6604051565377532
User 37978 AUC after training: 0.6596685082872928
User 37978 does not improve AUC. Reverting changes.
Training on augumented user 110937 49/50 current_auc = 0.6604051565377532
User 110937 AUC after training: 0.660036832412523
User 110937 does not improve AUC. Reverting changes.
[2024-12-02 19:39:53.240963] start test user 61298 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:53.651240] start test user 61298 223/568 recall augumented users by random, augumented_users = [14752, 42574, 108606, 11234, 130581, 117814, 18113, 91562, 116532, 117175, 48384, 71867, 81366, 88182, 23183, 783, 91552, 43203, 76964, 77510, 105524, 111931, 854, 116139, 121434, 92745, 133553, 59676, 27510, 125418, 38818, 83053, 45958, 50104, 119274, 134744, 24096, 56605, 94808, 81235, 73509, 38035, 61474, 63275, 44639, 30527, 28479, 35842, 82952, 97354]
[2024-12-02 19:39:53.665385] user = 61298 Cloud 223/568
[2024-12-02 19:39:53.684478] user = 61298 Local 223/568
[2024-12-02 19:39:53.723608] user = 61298 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:55.995540] user = 61298 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7260061919504645
Training on augumented user 14752 0/50 current_auc = 0.7260061919504645
User 14752 AUC after training: 0.7260061919504645
User 14752 does not improve AUC. Reverting changes.
Training on augumented user 42574 1/50 current_auc = 0.7260061919504645
User 42574 AUC after training: 0.726780185758514
User 42574 improves AUC. Keeping the model.
Training on augumented user 108606 2/50 current_auc = 0.726780185758514
User 108606 AUC after training: 0.7275541795665635
User 108606 improves AUC. Keeping the model.
Training on augumented user 11234 3/50 current_auc = 0.7275541795665635
User 11234 AUC after training: 0.726780185758514
User 11234 does not improve AUC. Reverting changes.
Training on augumented user 130581 4/50 current_auc = 0.7275541795665635
User 130581 AUC after training: 0.726780185758514
User 130581 does not improve AUC. Reverting changes.
Training on augumented user 117814 5/50 current_auc = 0.7275541795665635
User 117814 AUC after training: 0.7279411764705882
User 117814 improves AUC. Keeping the model.
Training on augumented user 18113 6/50 current_auc = 0.7279411764705882
User 18113 AUC after training: 0.7275541795665635
User 18113 does not improve AUC. Reverting changes.
Training on augumented user 91562 7/50 current_auc = 0.7279411764705882
User 91562 AUC after training: 0.726780185758514
User 91562 does not improve AUC. Reverting changes.
Training on augumented user 116532 8/50 current_auc = 0.7279411764705882
User 116532 AUC after training: 0.7275541795665635
User 116532 does not improve AUC. Reverting changes.
Training on augumented user 117175 9/50 current_auc = 0.7279411764705882
User 117175 AUC after training: 0.7271671826625387
User 117175 does not improve AUC. Reverting changes.
Training on augumented user 48384 10/50 current_auc = 0.7279411764705882
User 48384 AUC after training: 0.7260061919504645
User 48384 does not improve AUC. Reverting changes.
Training on augumented user 71867 11/50 current_auc = 0.7279411764705882
User 71867 AUC after training: 0.7279411764705882
User 71867 does not improve AUC. Reverting changes.
Training on augumented user 81366 12/50 current_auc = 0.7279411764705882
User 81366 AUC after training: 0.7275541795665635
User 81366 does not improve AUC. Reverting changes.
Training on augumented user 88182 13/50 current_auc = 0.7279411764705882
User 88182 AUC after training: 0.7271671826625387
User 88182 does not improve AUC. Reverting changes.
Training on augumented user 23183 14/50 current_auc = 0.7279411764705882
User 23183 AUC after training: 0.7275541795665635
User 23183 does not improve AUC. Reverting changes.
Training on augumented user 783 15/50 current_auc = 0.7279411764705882
User 783 AUC after training: 0.7271671826625387
User 783 does not improve AUC. Reverting changes.
Training on augumented user 91552 16/50 current_auc = 0.7279411764705882
User 91552 AUC after training: 0.7275541795665635
User 91552 does not improve AUC. Reverting changes.
Training on augumented user 43203 17/50 current_auc = 0.7279411764705882
User 43203 AUC after training: 0.7271671826625387
User 43203 does not improve AUC. Reverting changes.
Training on augumented user 76964 18/50 current_auc = 0.7279411764705882
User 76964 AUC after training: 0.726780185758514
User 76964 does not improve AUC. Reverting changes.
Training on augumented user 77510 19/50 current_auc = 0.7279411764705882
User 77510 AUC after training: 0.7279411764705882
User 77510 does not improve AUC. Reverting changes.
Training on augumented user 105524 20/50 current_auc = 0.7279411764705882
User 105524 AUC after training: 0.7275541795665635
User 105524 does not improve AUC. Reverting changes.
Training on augumented user 111931 21/50 current_auc = 0.7279411764705882
User 111931 AUC after training: 0.7279411764705882
User 111931 does not improve AUC. Reverting changes.
Training on augumented user 854 22/50 current_auc = 0.7279411764705882
User 854 AUC after training: 0.7279411764705883
User 854 improves AUC. Keeping the model.
Training on augumented user 116139 23/50 current_auc = 0.7279411764705883
User 116139 AUC after training: 0.7260061919504645
User 116139 does not improve AUC. Reverting changes.
Training on augumented user 121434 24/50 current_auc = 0.7279411764705883
User 121434 AUC after training: 0.7244582043343653
User 121434 does not improve AUC. Reverting changes.
Training on augumented user 92745 25/50 current_auc = 0.7279411764705883
User 92745 AUC after training: 0.726780185758514
User 92745 does not improve AUC. Reverting changes.
Training on augumented user 133553 26/50 current_auc = 0.7279411764705883
User 133553 AUC after training: 0.7279411764705883
User 133553 does not improve AUC. Reverting changes.
Training on augumented user 59676 27/50 current_auc = 0.7279411764705883
User 59676 AUC after training: 0.7260061919504645
User 59676 does not improve AUC. Reverting changes.
Training on augumented user 27510 28/50 current_auc = 0.7279411764705883
User 27510 AUC after training: 0.7263931888544891
User 27510 does not improve AUC. Reverting changes.
Training on augumented user 125418 29/50 current_auc = 0.7279411764705883
User 125418 AUC after training: 0.7283281733746131
User 125418 improves AUC. Keeping the model.
Training on augumented user 38818 30/50 current_auc = 0.7283281733746131
User 38818 AUC after training: 0.7283281733746131
User 38818 does not improve AUC. Reverting changes.
Training on augumented user 83053 31/50 current_auc = 0.7283281733746131
User 83053 AUC after training: 0.726780185758514
User 83053 does not improve AUC. Reverting changes.
Training on augumented user 45958 32/50 current_auc = 0.7283281733746131
User 45958 AUC after training: 0.726780185758514
User 45958 does not improve AUC. Reverting changes.
Training on augumented user 50104 33/50 current_auc = 0.7283281733746131
User 50104 AUC after training: 0.7275541795665635
User 50104 does not improve AUC. Reverting changes.
Training on augumented user 119274 34/50 current_auc = 0.7283281733746131
User 119274 AUC after training: 0.7298761609907121
User 119274 improves AUC. Keeping the model.
Training on augumented user 134744 35/50 current_auc = 0.7298761609907121
User 134744 AUC after training: 0.7275541795665635
User 134744 does not improve AUC. Reverting changes.
Training on augumented user 24096 36/50 current_auc = 0.7298761609907121
User 24096 AUC after training: 0.7302631578947368
User 24096 improves AUC. Keeping the model.
Training on augumented user 56605 37/50 current_auc = 0.7302631578947368
User 56605 AUC after training: 0.7279411764705882
User 56605 does not improve AUC. Reverting changes.
Training on augumented user 94808 38/50 current_auc = 0.7302631578947368
User 94808 AUC after training: 0.7302631578947368
User 94808 does not improve AUC. Reverting changes.
Training on augumented user 81235 39/50 current_auc = 0.7302631578947368
User 81235 AUC after training: 0.728328173374613
User 81235 does not improve AUC. Reverting changes.
Training on augumented user 73509 40/50 current_auc = 0.7302631578947368
User 73509 AUC after training: 0.7298761609907121
User 73509 does not improve AUC. Reverting changes.
Training on augumented user 38035 41/50 current_auc = 0.7302631578947368
User 38035 AUC after training: 0.7279411764705883
User 38035 does not improve AUC. Reverting changes.
Training on augumented user 61474 42/50 current_auc = 0.7302631578947368
User 61474 AUC after training: 0.7294891640866873
User 61474 does not improve AUC. Reverting changes.
Training on augumented user 63275 43/50 current_auc = 0.7302631578947368
User 63275 AUC after training: 0.7298761609907121
User 63275 does not improve AUC. Reverting changes.
Training on augumented user 44639 44/50 current_auc = 0.7302631578947368
User 44639 AUC after training: 0.7294891640866873
User 44639 does not improve AUC. Reverting changes.
Training on augumented user 30527 45/50 current_auc = 0.7302631578947368
User 30527 AUC after training: 0.7263931888544891
User 30527 does not improve AUC. Reverting changes.
Training on augumented user 28479 46/50 current_auc = 0.7302631578947368
User 28479 AUC after training: 0.7287151702786379
User 28479 does not improve AUC. Reverting changes.
Training on augumented user 35842 47/50 current_auc = 0.7302631578947368
User 35842 AUC after training: 0.7294891640866873
User 35842 does not improve AUC. Reverting changes.
Training on augumented user 82952 48/50 current_auc = 0.7302631578947368
User 82952 AUC after training: 0.7302631578947368
User 82952 does not improve AUC. Reverting changes.
Training on augumented user 97354 49/50 current_auc = 0.7302631578947368
User 97354 AUC after training: 0.7302631578947368
User 97354 does not improve AUC. Reverting changes.
[2024-12-02 19:40:25.317790] start test user 61302 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:25.743833] start test user 61302 224/568 recall augumented users by random, augumented_users = [83642, 91240, 129981, 68406, 68772, 23737, 114760, 131424, 14200, 11049, 70373, 105477, 58952, 135652, 62205, 32680, 8151, 24633, 7984, 133131, 42135, 108188, 126238, 61610, 6127, 3000, 14109, 102246, 123532, 78706, 69118, 68174, 24696, 86217, 29426, 87472, 93722, 29209, 127951, 7233, 56210, 96172, 76244, 19131, 8766, 32517, 7126, 119379, 109079, 89741]
[2024-12-02 19:40:25.758498] user = 61302 Cloud 224/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:25.765621] user = 61302 Local 224/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:25.853215] user = 61302 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:27.981830] user = 61302 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 83642 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83642 AUC after training: 0.5
User 83642 does not improve AUC. Reverting changes.
Training on augumented user 91240 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91240 AUC after training: 0.5
User 91240 does not improve AUC. Reverting changes.
Training on augumented user 129981 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129981 AUC after training: 0.5
User 129981 does not improve AUC. Reverting changes.
Training on augumented user 68406 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68406 AUC after training: 0.5
User 68406 does not improve AUC. Reverting changes.
Training on augumented user 68772 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68772 AUC after training: 0.5
User 68772 does not improve AUC. Reverting changes.
Training on augumented user 23737 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23737 AUC after training: 0.5
User 23737 does not improve AUC. Reverting changes.
Training on augumented user 114760 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114760 AUC after training: 0.5
User 114760 does not improve AUC. Reverting changes.
Training on augumented user 131424 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131424 AUC after training: 0.5
User 131424 does not improve AUC. Reverting changes.
Training on augumented user 14200 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14200 AUC after training: 0.5
User 14200 does not improve AUC. Reverting changes.
Training on augumented user 11049 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11049 AUC after training: 0.5
User 11049 does not improve AUC. Reverting changes.
Training on augumented user 70373 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70373 AUC after training: 0.5
User 70373 does not improve AUC. Reverting changes.
Training on augumented user 105477 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105477 AUC after training: 0.5
User 105477 does not improve AUC. Reverting changes.
Training on augumented user 58952 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58952 AUC after training: 0.5
User 58952 does not improve AUC. Reverting changes.
Training on augumented user 135652 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135652 AUC after training: 0.5
User 135652 does not improve AUC. Reverting changes.
Training on augumented user 62205 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62205 AUC after training: 0.5
User 62205 does not improve AUC. Reverting changes.
Training on augumented user 32680 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32680 AUC after training: 0.5
User 32680 does not improve AUC. Reverting changes.
Training on augumented user 8151 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8151 AUC after training: 0.5
User 8151 does not improve AUC. Reverting changes.
Training on augumented user 24633 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24633 AUC after training: 0.5
User 24633 does not improve AUC. Reverting changes.
Training on augumented user 7984 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7984 AUC after training: 0.5
User 7984 does not improve AUC. Reverting changes.
Training on augumented user 133131 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133131 AUC after training: 0.5
User 133131 does not improve AUC. Reverting changes.
Training on augumented user 42135 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42135 AUC after training: 0.5
User 42135 does not improve AUC. Reverting changes.
Training on augumented user 108188 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108188 AUC after training: 0.5
User 108188 does not improve AUC. Reverting changes.
Training on augumented user 126238 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126238 AUC after training: 0.5
User 126238 does not improve AUC. Reverting changes.
Training on augumented user 61610 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61610 AUC after training: 0.5
User 61610 does not improve AUC. Reverting changes.
Training on augumented user 6127 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6127 AUC after training: 0.5
User 6127 does not improve AUC. Reverting changes.
Training on augumented user 3000 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3000 AUC after training: 0.5
User 3000 does not improve AUC. Reverting changes.
Training on augumented user 14109 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14109 AUC after training: 0.5
User 14109 does not improve AUC. Reverting changes.
Training on augumented user 102246 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102246 AUC after training: 0.5
User 102246 does not improve AUC. Reverting changes.
Training on augumented user 123532 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123532 AUC after training: 0.5
User 123532 does not improve AUC. Reverting changes.
Training on augumented user 78706 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78706 AUC after training: 0.5
User 78706 does not improve AUC. Reverting changes.
Training on augumented user 69118 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69118 AUC after training: 0.5
User 69118 does not improve AUC. Reverting changes.
Training on augumented user 68174 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68174 AUC after training: 0.5
User 68174 does not improve AUC. Reverting changes.
Training on augumented user 24696 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24696 AUC after training: 0.5
User 24696 does not improve AUC. Reverting changes.
Training on augumented user 86217 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86217 AUC after training: 0.5
User 86217 does not improve AUC. Reverting changes.
Training on augumented user 29426 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29426 AUC after training: 0.5
User 29426 does not improve AUC. Reverting changes.
Training on augumented user 87472 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87472 AUC after training: 0.5
User 87472 does not improve AUC. Reverting changes.
Training on augumented user 93722 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93722 AUC after training: 0.5
User 93722 does not improve AUC. Reverting changes.
Training on augumented user 29209 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29209 AUC after training: 0.5
User 29209 does not improve AUC. Reverting changes.
Training on augumented user 127951 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127951 AUC after training: 0.5
User 127951 does not improve AUC. Reverting changes.
Training on augumented user 7233 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7233 AUC after training: 0.5
User 7233 does not improve AUC. Reverting changes.
Training on augumented user 56210 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56210 AUC after training: 0.5
User 56210 does not improve AUC. Reverting changes.
Training on augumented user 96172 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96172 AUC after training: 0.5
User 96172 does not improve AUC. Reverting changes.
Training on augumented user 76244 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76244 AUC after training: 0.5
User 76244 does not improve AUC. Reverting changes.
Training on augumented user 19131 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19131 AUC after training: 0.5
User 19131 does not improve AUC. Reverting changes.
Training on augumented user 8766 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8766 AUC after training: 0.5
User 8766 does not improve AUC. Reverting changes.
Training on augumented user 32517 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32517 AUC after training: 0.5
User 32517 does not improve AUC. Reverting changes.
Training on augumented user 7126 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7126 AUC after training: 0.5
User 7126 does not improve AUC. Reverting changes.
Training on augumented user 119379 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119379 AUC after training: 0.5
User 119379 does not improve AUC. Reverting changes.
Training on augumented user 109079 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109079 AUC after training: 0.5
User 109079 does not improve AUC. Reverting changes.
Training on augumented user 89741 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89741 AUC after training: 0.5
User 89741 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:58.707741] start test user 61303 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:59.265877] start test user 61303 225/568 recall augumented users by random, augumented_users = [87257, 80538, 39898, 71852, 69557, 42340, 113079, 38960, 68098, 23764, 50688, 51736, 93168, 41561, 22428, 62008, 78947, 84957, 24329, 127692, 11002, 130815, 55596, 60602, 121050, 71169, 76880, 54137, 21067, 73545, 50089, 41825, 4437, 8558, 95867, 74173, 138254, 45304, 94308, 26410, 49964, 244, 38588, 22036, 87874, 82317, 46718, 92833, 20655, 15071]
[2024-12-02 19:40:59.281049] user = 61303 Cloud 225/568
[2024-12-02 19:40:59.291686] user = 61303 Local 225/568
[2024-12-02 19:40:59.321426] user = 61303 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:00.846781] user = 61303 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.59375
Training on augumented user 87257 0/50 current_auc = 0.59375
User 87257 AUC after training: 0.59375
User 87257 does not improve AUC. Reverting changes.
Training on augumented user 80538 1/50 current_auc = 0.59375
User 80538 AUC after training: 0.59375
User 80538 does not improve AUC. Reverting changes.
Training on augumented user 39898 2/50 current_auc = 0.59375
User 39898 AUC after training: 0.59375
User 39898 does not improve AUC. Reverting changes.
Training on augumented user 71852 3/50 current_auc = 0.59375
User 71852 AUC after training: 0.59375
User 71852 does not improve AUC. Reverting changes.
Training on augumented user 69557 4/50 current_auc = 0.59375
User 69557 AUC after training: 0.59375
User 69557 does not improve AUC. Reverting changes.
Training on augumented user 42340 5/50 current_auc = 0.59375
User 42340 AUC after training: 0.59375
User 42340 does not improve AUC. Reverting changes.
Training on augumented user 113079 6/50 current_auc = 0.59375
User 113079 AUC after training: 0.59375
User 113079 does not improve AUC. Reverting changes.
Training on augumented user 38960 7/50 current_auc = 0.59375
User 38960 AUC after training: 0.59375
User 38960 does not improve AUC. Reverting changes.
Training on augumented user 68098 8/50 current_auc = 0.59375
User 68098 AUC after training: 0.59375
User 68098 does not improve AUC. Reverting changes.
Training on augumented user 23764 9/50 current_auc = 0.59375
User 23764 AUC after training: 0.59375
User 23764 does not improve AUC. Reverting changes.
Training on augumented user 50688 10/50 current_auc = 0.59375
User 50688 AUC after training: 0.59375
User 50688 does not improve AUC. Reverting changes.
Training on augumented user 51736 11/50 current_auc = 0.59375
User 51736 AUC after training: 0.5965909090909091
User 51736 improves AUC. Keeping the model.
Training on augumented user 93168 12/50 current_auc = 0.5965909090909091
User 93168 AUC after training: 0.5965909090909091
User 93168 does not improve AUC. Reverting changes.
Training on augumented user 41561 13/50 current_auc = 0.5965909090909091
User 41561 AUC after training: 0.5980113636363636
User 41561 improves AUC. Keeping the model.
Training on augumented user 22428 14/50 current_auc = 0.5980113636363636
User 22428 AUC after training: 0.5965909090909091
User 22428 does not improve AUC. Reverting changes.
Training on augumented user 62008 15/50 current_auc = 0.5980113636363636
User 62008 AUC after training: 0.5994318181818181
User 62008 improves AUC. Keeping the model.
Training on augumented user 78947 16/50 current_auc = 0.5994318181818181
User 78947 AUC after training: 0.5980113636363636
User 78947 does not improve AUC. Reverting changes.
Training on augumented user 84957 17/50 current_auc = 0.5994318181818181
User 84957 AUC after training: 0.5980113636363636
User 84957 does not improve AUC. Reverting changes.
Training on augumented user 24329 18/50 current_auc = 0.5994318181818181
User 24329 AUC after training: 0.5994318181818181
User 24329 does not improve AUC. Reverting changes.
Training on augumented user 127692 19/50 current_auc = 0.5994318181818181
User 127692 AUC after training: 0.5965909090909091
User 127692 does not improve AUC. Reverting changes.
Training on augumented user 11002 20/50 current_auc = 0.5994318181818181
User 11002 AUC after training: 0.5994318181818181
User 11002 does not improve AUC. Reverting changes.
Training on augumented user 130815 21/50 current_auc = 0.5994318181818181
User 130815 AUC after training: 0.5951704545454546
User 130815 does not improve AUC. Reverting changes.
Training on augumented user 55596 22/50 current_auc = 0.5994318181818181
User 55596 AUC after training: 0.5980113636363636
User 55596 does not improve AUC. Reverting changes.
Training on augumented user 60602 23/50 current_auc = 0.5994318181818181
User 60602 AUC after training: 0.5951704545454546
User 60602 does not improve AUC. Reverting changes.
Training on augumented user 121050 24/50 current_auc = 0.5994318181818181
User 121050 AUC after training: 0.5994318181818181
User 121050 does not improve AUC. Reverting changes.
Training on augumented user 71169 25/50 current_auc = 0.5994318181818181
User 71169 AUC after training: 0.5994318181818181
User 71169 does not improve AUC. Reverting changes.
Training on augumented user 76880 26/50 current_auc = 0.5994318181818181
User 76880 AUC after training: 0.5980113636363636
User 76880 does not improve AUC. Reverting changes.
Training on augumented user 54137 27/50 current_auc = 0.5994318181818181
User 54137 AUC after training: 0.5994318181818181
User 54137 does not improve AUC. Reverting changes.
Training on augumented user 21067 28/50 current_auc = 0.5994318181818181
User 21067 AUC after training: 0.5980113636363636
User 21067 does not improve AUC. Reverting changes.
Training on augumented user 73545 29/50 current_auc = 0.5994318181818181
User 73545 AUC after training: 0.5994318181818181
User 73545 does not improve AUC. Reverting changes.
Training on augumented user 50089 30/50 current_auc = 0.5994318181818181
User 50089 AUC after training: 0.5965909090909091
User 50089 does not improve AUC. Reverting changes.
Training on augumented user 41825 31/50 current_auc = 0.5994318181818181
User 41825 AUC after training: 0.5994318181818181
User 41825 does not improve AUC. Reverting changes.
Training on augumented user 4437 32/50 current_auc = 0.5994318181818181
User 4437 AUC after training: 0.5965909090909091
User 4437 does not improve AUC. Reverting changes.
Training on augumented user 8558 33/50 current_auc = 0.5994318181818181
User 8558 AUC after training: 0.5965909090909091
User 8558 does not improve AUC. Reverting changes.
Training on augumented user 95867 34/50 current_auc = 0.5994318181818181
User 95867 AUC after training: 0.5994318181818181
User 95867 does not improve AUC. Reverting changes.
Training on augumented user 74173 35/50 current_auc = 0.5994318181818181
User 74173 AUC after training: 0.5994318181818181
User 74173 does not improve AUC. Reverting changes.
Training on augumented user 138254 36/50 current_auc = 0.5994318181818181
User 138254 AUC after training: 0.5965909090909091
User 138254 does not improve AUC. Reverting changes.
Training on augumented user 45304 37/50 current_auc = 0.5994318181818181
User 45304 AUC after training: 0.5994318181818181
User 45304 does not improve AUC. Reverting changes.
Training on augumented user 94308 38/50 current_auc = 0.5994318181818181
User 94308 AUC after training: 0.5994318181818181
User 94308 does not improve AUC. Reverting changes.
Training on augumented user 26410 39/50 current_auc = 0.5994318181818181
User 26410 AUC after training: 0.5965909090909091
User 26410 does not improve AUC. Reverting changes.
Training on augumented user 49964 40/50 current_auc = 0.5994318181818181
User 49964 AUC after training: 0.5994318181818181
User 49964 does not improve AUC. Reverting changes.
Training on augumented user 244 41/50 current_auc = 0.5994318181818181
User 244 AUC after training: 0.5980113636363636
User 244 does not improve AUC. Reverting changes.
Training on augumented user 38588 42/50 current_auc = 0.5994318181818181
User 38588 AUC after training: 0.5980113636363636
User 38588 does not improve AUC. Reverting changes.
Training on augumented user 22036 43/50 current_auc = 0.5994318181818181
User 22036 AUC after training: 0.5994318181818181
User 22036 does not improve AUC. Reverting changes.
Training on augumented user 87874 44/50 current_auc = 0.5994318181818181
User 87874 AUC after training: 0.5965909090909091
User 87874 does not improve AUC. Reverting changes.
Training on augumented user 82317 45/50 current_auc = 0.5994318181818181
User 82317 AUC after training: 0.5994318181818181
User 82317 does not improve AUC. Reverting changes.
Training on augumented user 46718 46/50 current_auc = 0.5994318181818181
User 46718 AUC after training: 0.5994318181818181
User 46718 does not improve AUC. Reverting changes.
Training on augumented user 92833 47/50 current_auc = 0.5994318181818181
User 92833 AUC after training: 0.5965909090909091
User 92833 does not improve AUC. Reverting changes.
Training on augumented user 20655 48/50 current_auc = 0.5994318181818181
User 20655 AUC after training: 0.5980113636363636
User 20655 does not improve AUC. Reverting changes.
Training on augumented user 15071 49/50 current_auc = 0.5994318181818181
User 15071 AUC after training: 0.5980113636363636
User 15071 does not improve AUC. Reverting changes.
[2024-12-02 19:41:28.860373] start test user 61305 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:29.359135] start test user 61305 226/568 recall augumented users by random, augumented_users = [34221, 130967, 53796, 33025, 90512, 3912, 45440, 117078, 23708, 48334, 627, 28609, 118918, 90814, 126679, 77868, 133302, 13614, 53739, 88790, 39305, 44894, 123065, 38460, 76092, 62746, 5043, 56539, 13153, 77937, 83321, 8146, 5251, 103275, 51154, 117670, 112600, 106446, 85255, 124026, 39322, 15437, 114288, 81125, 129220, 118423, 83597, 22312, 77304, 37944]
[2024-12-02 19:41:29.380309] user = 61305 Cloud 226/568
[2024-12-02 19:41:29.392965] user = 61305 Local 226/568
[2024-12-02 19:41:29.466895] user = 61305 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:31.643366] user = 61305 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5936507936507937
Training on augumented user 34221 0/50 current_auc = 0.5936507936507937
User 34221 AUC after training: 0.5925925925925926
User 34221 does not improve AUC. Reverting changes.
Training on augumented user 130967 1/50 current_auc = 0.5936507936507937
User 130967 AUC after training: 0.5925925925925926
User 130967 does not improve AUC. Reverting changes.
Training on augumented user 53796 2/50 current_auc = 0.5936507936507937
User 53796 AUC after training: 0.5936507936507937
User 53796 does not improve AUC. Reverting changes.
Training on augumented user 33025 3/50 current_auc = 0.5936507936507937
User 33025 AUC after training: 0.5915343915343915
User 33025 does not improve AUC. Reverting changes.
Training on augumented user 90512 4/50 current_auc = 0.5936507936507937
User 90512 AUC after training: 0.5936507936507937
User 90512 does not improve AUC. Reverting changes.
Training on augumented user 3912 5/50 current_auc = 0.5936507936507937
User 3912 AUC after training: 0.5915343915343916
User 3912 does not improve AUC. Reverting changes.
Training on augumented user 45440 6/50 current_auc = 0.5936507936507937
User 45440 AUC after training: 0.5936507936507937
User 45440 does not improve AUC. Reverting changes.
Training on augumented user 117078 7/50 current_auc = 0.5936507936507937
User 117078 AUC after training: 0.5915343915343915
User 117078 does not improve AUC. Reverting changes.
Training on augumented user 23708 8/50 current_auc = 0.5936507936507937
User 23708 AUC after training: 0.5925925925925926
User 23708 does not improve AUC. Reverting changes.
Training on augumented user 48334 9/50 current_auc = 0.5936507936507937
User 48334 AUC after training: 0.5947089947089947
User 48334 improves AUC. Keeping the model.
Training on augumented user 627 10/50 current_auc = 0.5947089947089947
User 627 AUC after training: 0.5936507936507937
User 627 does not improve AUC. Reverting changes.
Training on augumented user 28609 11/50 current_auc = 0.5947089947089947
User 28609 AUC after training: 0.5904761904761905
User 28609 does not improve AUC. Reverting changes.
Training on augumented user 118918 12/50 current_auc = 0.5947089947089947
User 118918 AUC after training: 0.5915343915343916
User 118918 does not improve AUC. Reverting changes.
Training on augumented user 90814 13/50 current_auc = 0.5947089947089947
User 90814 AUC after training: 0.5936507936507937
User 90814 does not improve AUC. Reverting changes.
Training on augumented user 126679 14/50 current_auc = 0.5947089947089947
User 126679 AUC after training: 0.5915343915343916
User 126679 does not improve AUC. Reverting changes.
Training on augumented user 77868 15/50 current_auc = 0.5947089947089947
User 77868 AUC after training: 0.5936507936507937
User 77868 does not improve AUC. Reverting changes.
Training on augumented user 133302 16/50 current_auc = 0.5947089947089947
User 133302 AUC after training: 0.5947089947089947
User 133302 does not improve AUC. Reverting changes.
Training on augumented user 13614 17/50 current_auc = 0.5947089947089947
User 13614 AUC after training: 0.5915343915343916
User 13614 does not improve AUC. Reverting changes.
Training on augumented user 53739 18/50 current_auc = 0.5947089947089947
User 53739 AUC after training: 0.5915343915343916
User 53739 does not improve AUC. Reverting changes.
Training on augumented user 88790 19/50 current_auc = 0.5947089947089947
User 88790 AUC after training: 0.5936507936507937
User 88790 does not improve AUC. Reverting changes.
Training on augumented user 39305 20/50 current_auc = 0.5947089947089947
User 39305 AUC after training: 0.5925925925925926
User 39305 does not improve AUC. Reverting changes.
Training on augumented user 44894 21/50 current_auc = 0.5947089947089947
User 44894 AUC after training: 0.5936507936507937
User 44894 does not improve AUC. Reverting changes.
Training on augumented user 123065 22/50 current_auc = 0.5947089947089947
User 123065 AUC after training: 0.5915343915343916
User 123065 does not improve AUC. Reverting changes.
Training on augumented user 38460 23/50 current_auc = 0.5947089947089947
User 38460 AUC after training: 0.5925925925925927
User 38460 does not improve AUC. Reverting changes.
Training on augumented user 76092 24/50 current_auc = 0.5947089947089947
User 76092 AUC after training: 0.5915343915343916
User 76092 does not improve AUC. Reverting changes.
Training on augumented user 62746 25/50 current_auc = 0.5947089947089947
User 62746 AUC after training: 0.5915343915343916
User 62746 does not improve AUC. Reverting changes.
Training on augumented user 5043 26/50 current_auc = 0.5947089947089947
User 5043 AUC after training: 0.5862433862433862
User 5043 does not improve AUC. Reverting changes.
Training on augumented user 56539 27/50 current_auc = 0.5947089947089947
User 56539 AUC after training: 0.5915343915343916
User 56539 does not improve AUC. Reverting changes.
Training on augumented user 13153 28/50 current_auc = 0.5947089947089947
User 13153 AUC after training: 0.5925925925925927
User 13153 does not improve AUC. Reverting changes.
Training on augumented user 77937 29/50 current_auc = 0.5947089947089947
User 77937 AUC after training: 0.5936507936507937
User 77937 does not improve AUC. Reverting changes.
Training on augumented user 83321 30/50 current_auc = 0.5947089947089947
User 83321 AUC after training: 0.5915343915343916
User 83321 does not improve AUC. Reverting changes.
Training on augumented user 8146 31/50 current_auc = 0.5947089947089947
User 8146 AUC after training: 0.5915343915343916
User 8146 does not improve AUC. Reverting changes.
Training on augumented user 5251 32/50 current_auc = 0.5947089947089947
User 5251 AUC after training: 0.5936507936507937
User 5251 does not improve AUC. Reverting changes.
Training on augumented user 103275 33/50 current_auc = 0.5947089947089947
User 103275 AUC after training: 0.5915343915343916
User 103275 does not improve AUC. Reverting changes.
Training on augumented user 51154 34/50 current_auc = 0.5947089947089947
User 51154 AUC after training: 0.5894179894179894
User 51154 does not improve AUC. Reverting changes.
Training on augumented user 117670 35/50 current_auc = 0.5947089947089947
User 117670 AUC after training: 0.5925925925925926
User 117670 does not improve AUC. Reverting changes.
Training on augumented user 112600 36/50 current_auc = 0.5947089947089947
User 112600 AUC after training: 0.5936507936507935
User 112600 does not improve AUC. Reverting changes.
Training on augumented user 106446 37/50 current_auc = 0.5947089947089947
User 106446 AUC after training: 0.5925925925925926
User 106446 does not improve AUC. Reverting changes.
Training on augumented user 85255 38/50 current_auc = 0.5947089947089947
User 85255 AUC after training: 0.5904761904761905
User 85255 does not improve AUC. Reverting changes.
Training on augumented user 124026 39/50 current_auc = 0.5947089947089947
User 124026 AUC after training: 0.5904761904761905
User 124026 does not improve AUC. Reverting changes.
Training on augumented user 39322 40/50 current_auc = 0.5947089947089947
User 39322 AUC after training: 0.5936507936507937
User 39322 does not improve AUC. Reverting changes.
Training on augumented user 15437 41/50 current_auc = 0.5947089947089947
User 15437 AUC after training: 0.5947089947089947
User 15437 does not improve AUC. Reverting changes.
Training on augumented user 114288 42/50 current_auc = 0.5947089947089947
User 114288 AUC after training: 0.5947089947089947
User 114288 does not improve AUC. Reverting changes.
Training on augumented user 81125 43/50 current_auc = 0.5947089947089947
User 81125 AUC after training: 0.5925925925925927
User 81125 does not improve AUC. Reverting changes.
Training on augumented user 129220 44/50 current_auc = 0.5947089947089947
User 129220 AUC after training: 0.5925925925925926
User 129220 does not improve AUC. Reverting changes.
Training on augumented user 118423 45/50 current_auc = 0.5947089947089947
User 118423 AUC after training: 0.5947089947089947
User 118423 does not improve AUC. Reverting changes.
Training on augumented user 83597 46/50 current_auc = 0.5947089947089947
User 83597 AUC after training: 0.5925925925925926
User 83597 does not improve AUC. Reverting changes.
Training on augumented user 22312 47/50 current_auc = 0.5947089947089947
User 22312 AUC after training: 0.5915343915343916
User 22312 does not improve AUC. Reverting changes.
Training on augumented user 77304 48/50 current_auc = 0.5947089947089947
User 77304 AUC after training: 0.5925925925925926
User 77304 does not improve AUC. Reverting changes.
Training on augumented user 37944 49/50 current_auc = 0.5947089947089947
User 37944 AUC after training: 0.5957671957671958
User 37944 improves AUC. Keeping the model.
[2024-12-02 19:42:05.232329] start test user 61310 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:05.853090] start test user 61310 227/568 recall augumented users by random, augumented_users = [122228, 8520, 127970, 37223, 28229, 107566, 45595, 12785, 64634, 76864, 77287, 53986, 127793, 94371, 19905, 79913, 6648, 84619, 51742, 120478, 77330, 45940, 23165, 109681, 119790, 7288, 43496, 126212, 2852, 78823, 37075, 134443, 19778, 49006, 42394, 21744, 103502, 33755, 100804, 113708, 108552, 18868, 15378, 49824, 50740, 72440, 29806, 138095, 5052, 70096]
[2024-12-02 19:42:05.867907] user = 61310 Cloud 227/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:42:05.887278] user = 61310 Local 227/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:42:06.122618] user = 61310 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:42:08.477567] user = 61310 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 122228 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122228 AUC after training: 0.5
User 122228 does not improve AUC. Reverting changes.
Training on augumented user 8520 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8520 AUC after training: 0.5
User 8520 does not improve AUC. Reverting changes.
Training on augumented user 127970 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127970 AUC after training: 0.5
User 127970 does not improve AUC. Reverting changes.
Training on augumented user 37223 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37223 AUC after training: 0.5
User 37223 does not improve AUC. Reverting changes.
Training on augumented user 28229 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28229 AUC after training: 0.5
User 28229 does not improve AUC. Reverting changes.
Training on augumented user 107566 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107566 AUC after training: 0.5
User 107566 does not improve AUC. Reverting changes.
Training on augumented user 45595 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45595 AUC after training: 0.5
User 45595 does not improve AUC. Reverting changes.
Training on augumented user 12785 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12785 AUC after training: 0.5
User 12785 does not improve AUC. Reverting changes.
Training on augumented user 64634 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64634 AUC after training: 0.5
User 64634 does not improve AUC. Reverting changes.
Training on augumented user 76864 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76864 AUC after training: 0.5
User 76864 does not improve AUC. Reverting changes.
Training on augumented user 77287 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77287 AUC after training: 0.5
User 77287 does not improve AUC. Reverting changes.
Training on augumented user 53986 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53986 AUC after training: 0.5
User 53986 does not improve AUC. Reverting changes.
Training on augumented user 127793 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127793 AUC after training: 0.5
User 127793 does not improve AUC. Reverting changes.
Training on augumented user 94371 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94371 AUC after training: 0.5
User 94371 does not improve AUC. Reverting changes.
Training on augumented user 19905 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19905 AUC after training: 0.5
User 19905 does not improve AUC. Reverting changes.
Training on augumented user 79913 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79913 AUC after training: 0.5
User 79913 does not improve AUC. Reverting changes.
Training on augumented user 6648 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6648 AUC after training: 0.5
User 6648 does not improve AUC. Reverting changes.
Training on augumented user 84619 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84619 AUC after training: 0.5
User 84619 does not improve AUC. Reverting changes.
Training on augumented user 51742 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51742 AUC after training: 0.5
User 51742 does not improve AUC. Reverting changes.
Training on augumented user 120478 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120478 AUC after training: 0.5
User 120478 does not improve AUC. Reverting changes.
Training on augumented user 77330 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77330 AUC after training: 0.5
User 77330 does not improve AUC. Reverting changes.
Training on augumented user 45940 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45940 AUC after training: 0.5
User 45940 does not improve AUC. Reverting changes.
Training on augumented user 23165 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23165 AUC after training: 0.5
User 23165 does not improve AUC. Reverting changes.
Training on augumented user 109681 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109681 AUC after training: 0.5
User 109681 does not improve AUC. Reverting changes.
Training on augumented user 119790 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119790 AUC after training: 0.5
User 119790 does not improve AUC. Reverting changes.
Training on augumented user 7288 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7288 AUC after training: 0.5
User 7288 does not improve AUC. Reverting changes.
Training on augumented user 43496 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43496 AUC after training: 0.5
User 43496 does not improve AUC. Reverting changes.
Training on augumented user 126212 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126212 AUC after training: 0.5
User 126212 does not improve AUC. Reverting changes.
Training on augumented user 2852 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2852 AUC after training: 0.5
User 2852 does not improve AUC. Reverting changes.
Training on augumented user 78823 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78823 AUC after training: 0.5
User 78823 does not improve AUC. Reverting changes.
Training on augumented user 37075 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37075 AUC after training: 0.5
User 37075 does not improve AUC. Reverting changes.
Training on augumented user 134443 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134443 AUC after training: 0.5
User 134443 does not improve AUC. Reverting changes.
Training on augumented user 19778 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19778 AUC after training: 0.5
User 19778 does not improve AUC. Reverting changes.
Training on augumented user 49006 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49006 AUC after training: 0.5
User 49006 does not improve AUC. Reverting changes.
Training on augumented user 42394 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42394 AUC after training: 0.5
User 42394 does not improve AUC. Reverting changes.
Training on augumented user 21744 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21744 AUC after training: 0.5
User 21744 does not improve AUC. Reverting changes.
Training on augumented user 103502 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103502 AUC after training: 0.5
User 103502 does not improve AUC. Reverting changes.
Training on augumented user 33755 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33755 AUC after training: 0.5
User 33755 does not improve AUC. Reverting changes.
Training on augumented user 100804 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100804 AUC after training: 0.5
User 100804 does not improve AUC. Reverting changes.
Training on augumented user 113708 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113708 AUC after training: 0.5
User 113708 does not improve AUC. Reverting changes.
Training on augumented user 108552 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108552 AUC after training: 0.5
User 108552 does not improve AUC. Reverting changes.
Training on augumented user 18868 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18868 AUC after training: 0.5
User 18868 does not improve AUC. Reverting changes.
Training on augumented user 15378 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15378 AUC after training: 0.5
User 15378 does not improve AUC. Reverting changes.
Training on augumented user 49824 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49824 AUC after training: 0.5
User 49824 does not improve AUC. Reverting changes.
Training on augumented user 50740 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50740 AUC after training: 0.5
User 50740 does not improve AUC. Reverting changes.
Training on augumented user 72440 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72440 AUC after training: 0.5
User 72440 does not improve AUC. Reverting changes.
Training on augumented user 29806 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29806 AUC after training: 0.5
User 29806 does not improve AUC. Reverting changes.
Training on augumented user 138095 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138095 AUC after training: 0.5
User 138095 does not improve AUC. Reverting changes.
Training on augumented user 5052 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5052 AUC after training: 0.5
User 5052 does not improve AUC. Reverting changes.
Training on augumented user 70096 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70096 AUC after training: 0.5
User 70096 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:42:37.031253] start test user 61331 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:37.453668] start test user 61331 228/568 recall augumented users by random, augumented_users = [39037, 136177, 65133, 54148, 111455, 97668, 108745, 126924, 4147, 17238, 6478, 3091, 87994, 73316, 95988, 59795, 111408, 63190, 120506, 52178, 66686, 65277, 62070, 45343, 113564, 81585, 36303, 129600, 49988, 108529, 57689, 12919, 137246, 137599, 10555, 2284, 85130, 91903, 9219, 4573, 7847, 4151, 6323, 16991, 65558, 105991, 71597, 26130, 59290, 132747]
[2024-12-02 19:42:37.468222] user = 61331 Cloud 228/568
[2024-12-02 19:42:37.478585] user = 61331 Local 228/568
[2024-12-02 19:42:37.525623] user = 61331 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:39.731048] user = 61331 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 39037 0/50 current_auc = 0.6666666666666666
User 39037 AUC after training: 0.6666666666666666
User 39037 does not improve AUC. Reverting changes.
Training on augumented user 136177 1/50 current_auc = 0.6666666666666666
User 136177 AUC after training: 0.6666666666666666
User 136177 does not improve AUC. Reverting changes.
Training on augumented user 65133 2/50 current_auc = 0.6666666666666666
User 65133 AUC after training: 0.6666666666666666
User 65133 does not improve AUC. Reverting changes.
Training on augumented user 54148 3/50 current_auc = 0.6666666666666666
User 54148 AUC after training: 0.6666666666666666
User 54148 does not improve AUC. Reverting changes.
Training on augumented user 111455 4/50 current_auc = 0.6666666666666666
User 111455 AUC after training: 0.6666666666666666
User 111455 does not improve AUC. Reverting changes.
Training on augumented user 97668 5/50 current_auc = 0.6666666666666666
User 97668 AUC after training: 0.6666666666666666
User 97668 does not improve AUC. Reverting changes.
Training on augumented user 108745 6/50 current_auc = 0.6666666666666666
User 108745 AUC after training: 0.6666666666666666
User 108745 does not improve AUC. Reverting changes.
Training on augumented user 126924 7/50 current_auc = 0.6666666666666666
User 126924 AUC after training: 0.6666666666666666
User 126924 does not improve AUC. Reverting changes.
Training on augumented user 4147 8/50 current_auc = 0.6666666666666666
User 4147 AUC after training: 0.6666666666666666
User 4147 does not improve AUC. Reverting changes.
Training on augumented user 17238 9/50 current_auc = 0.6666666666666666
User 17238 AUC after training: 0.6666666666666666
User 17238 does not improve AUC. Reverting changes.
Training on augumented user 6478 10/50 current_auc = 0.6666666666666666
User 6478 AUC after training: 0.6666666666666666
User 6478 does not improve AUC. Reverting changes.
Training on augumented user 3091 11/50 current_auc = 0.6666666666666666
User 3091 AUC after training: 0.6666666666666666
User 3091 does not improve AUC. Reverting changes.
Training on augumented user 87994 12/50 current_auc = 0.6666666666666666
User 87994 AUC after training: 0.6666666666666666
User 87994 does not improve AUC. Reverting changes.
Training on augumented user 73316 13/50 current_auc = 0.6666666666666666
User 73316 AUC after training: 0.6666666666666666
User 73316 does not improve AUC. Reverting changes.
Training on augumented user 95988 14/50 current_auc = 0.6666666666666666
User 95988 AUC after training: 0.6666666666666666
User 95988 does not improve AUC. Reverting changes.
Training on augumented user 59795 15/50 current_auc = 0.6666666666666666
User 59795 AUC after training: 0.6666666666666666
User 59795 does not improve AUC. Reverting changes.
Training on augumented user 111408 16/50 current_auc = 0.6666666666666666
User 111408 AUC after training: 0.6666666666666666
User 111408 does not improve AUC. Reverting changes.
Training on augumented user 63190 17/50 current_auc = 0.6666666666666666
User 63190 AUC after training: 0.6666666666666666
User 63190 does not improve AUC. Reverting changes.
Training on augumented user 120506 18/50 current_auc = 0.6666666666666666
User 120506 AUC after training: 0.6666666666666666
User 120506 does not improve AUC. Reverting changes.
Training on augumented user 52178 19/50 current_auc = 0.6666666666666666
User 52178 AUC after training: 0.6666666666666666
User 52178 does not improve AUC. Reverting changes.
Training on augumented user 66686 20/50 current_auc = 0.6666666666666666
User 66686 AUC after training: 0.6666666666666666
User 66686 does not improve AUC. Reverting changes.
Training on augumented user 65277 21/50 current_auc = 0.6666666666666666
User 65277 AUC after training: 0.6666666666666666
User 65277 does not improve AUC. Reverting changes.
Training on augumented user 62070 22/50 current_auc = 0.6666666666666666
User 62070 AUC after training: 0.6666666666666666
User 62070 does not improve AUC. Reverting changes.
Training on augumented user 45343 23/50 current_auc = 0.6666666666666666
User 45343 AUC after training: 0.6666666666666666
User 45343 does not improve AUC. Reverting changes.
Training on augumented user 113564 24/50 current_auc = 0.6666666666666666
User 113564 AUC after training: 0.6666666666666666
User 113564 does not improve AUC. Reverting changes.
Training on augumented user 81585 25/50 current_auc = 0.6666666666666666
User 81585 AUC after training: 0.6666666666666666
User 81585 does not improve AUC. Reverting changes.
Training on augumented user 36303 26/50 current_auc = 0.6666666666666666
User 36303 AUC after training: 0.6666666666666666
User 36303 does not improve AUC. Reverting changes.
Training on augumented user 129600 27/50 current_auc = 0.6666666666666666
User 129600 AUC after training: 0.6666666666666666
User 129600 does not improve AUC. Reverting changes.
Training on augumented user 49988 28/50 current_auc = 0.6666666666666666
User 49988 AUC after training: 0.6666666666666666
User 49988 does not improve AUC. Reverting changes.
Training on augumented user 108529 29/50 current_auc = 0.6666666666666666
User 108529 AUC after training: 0.6666666666666666
User 108529 does not improve AUC. Reverting changes.
Training on augumented user 57689 30/50 current_auc = 0.6666666666666666
User 57689 AUC after training: 0.6666666666666666
User 57689 does not improve AUC. Reverting changes.
Training on augumented user 12919 31/50 current_auc = 0.6666666666666666
User 12919 AUC after training: 0.6666666666666666
User 12919 does not improve AUC. Reverting changes.
Training on augumented user 137246 32/50 current_auc = 0.6666666666666666
User 137246 AUC after training: 0.6666666666666666
User 137246 does not improve AUC. Reverting changes.
Training on augumented user 137599 33/50 current_auc = 0.6666666666666666
User 137599 AUC after training: 0.6666666666666666
User 137599 does not improve AUC. Reverting changes.
Training on augumented user 10555 34/50 current_auc = 0.6666666666666666
User 10555 AUC after training: 0.6666666666666666
User 10555 does not improve AUC. Reverting changes.
Training on augumented user 2284 35/50 current_auc = 0.6666666666666666
User 2284 AUC after training: 0.6666666666666666
User 2284 does not improve AUC. Reverting changes.
Training on augumented user 85130 36/50 current_auc = 0.6666666666666666
User 85130 AUC after training: 0.6666666666666666
User 85130 does not improve AUC. Reverting changes.
Training on augumented user 91903 37/50 current_auc = 0.6666666666666666
User 91903 AUC after training: 0.6666666666666666
User 91903 does not improve AUC. Reverting changes.
Training on augumented user 9219 38/50 current_auc = 0.6666666666666666
User 9219 AUC after training: 0.6666666666666666
User 9219 does not improve AUC. Reverting changes.
Training on augumented user 4573 39/50 current_auc = 0.6666666666666666
User 4573 AUC after training: 0.6666666666666666
User 4573 does not improve AUC. Reverting changes.
Training on augumented user 7847 40/50 current_auc = 0.6666666666666666
User 7847 AUC after training: 0.6666666666666666
User 7847 does not improve AUC. Reverting changes.
Training on augumented user 4151 41/50 current_auc = 0.6666666666666666
User 4151 AUC after training: 0.6666666666666666
User 4151 does not improve AUC. Reverting changes.
Training on augumented user 6323 42/50 current_auc = 0.6666666666666666
User 6323 AUC after training: 0.6666666666666666
User 6323 does not improve AUC. Reverting changes.
Training on augumented user 16991 43/50 current_auc = 0.6666666666666666
User 16991 AUC after training: 0.6666666666666666
User 16991 does not improve AUC. Reverting changes.
Training on augumented user 65558 44/50 current_auc = 0.6666666666666666
User 65558 AUC after training: 0.6666666666666666
User 65558 does not improve AUC. Reverting changes.
Training on augumented user 105991 45/50 current_auc = 0.6666666666666666
User 105991 AUC after training: 0.6666666666666666
User 105991 does not improve AUC. Reverting changes.
Training on augumented user 71597 46/50 current_auc = 0.6666666666666666
User 71597 AUC after training: 0.6666666666666666
User 71597 does not improve AUC. Reverting changes.
Training on augumented user 26130 47/50 current_auc = 0.6666666666666666
User 26130 AUC after training: 0.6666666666666666
User 26130 does not improve AUC. Reverting changes.
Training on augumented user 59290 48/50 current_auc = 0.6666666666666666
User 59290 AUC after training: 0.6666666666666666
User 59290 does not improve AUC. Reverting changes.
Training on augumented user 132747 49/50 current_auc = 0.6666666666666666
User 132747 AUC after training: 0.6666666666666666
User 132747 does not improve AUC. Reverting changes.
[2024-12-02 19:43:10.671894] start test user 61342 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:11.099665] start test user 61342 229/568 recall augumented users by random, augumented_users = [73508, 6059, 116148, 107984, 132697, 61066, 59882, 93560, 2701, 73388, 78741, 31232, 73804, 129032, 13270, 106521, 32265, 684, 95867, 117757, 38528, 47327, 32899, 6660, 61577, 80342, 104032, 100031, 121131, 103373, 90410, 74420, 107394, 9886, 110713, 75532, 4225, 118283, 49485, 88062, 60260, 51387, 56598, 45087, 73647, 20051, 37314, 72129, 90687, 136151]
[2024-12-02 19:43:11.114750] user = 61342 Cloud 229/568
[2024-12-02 19:43:11.128604] user = 61342 Local 229/568
[2024-12-02 19:43:11.172359] user = 61342 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:13.286365] user = 61342 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.520851818988465
Training on augumented user 73508 0/50 current_auc = 0.520851818988465
User 73508 AUC after training: 0.5211475894705708
User 73508 improves AUC. Keeping the model.
Training on augumented user 6059 1/50 current_auc = 0.5211475894705708
User 6059 AUC after training: 0.5220349009168885
User 6059 improves AUC. Keeping the model.
Training on augumented user 116148 2/50 current_auc = 0.5220349009168885
User 116148 AUC after training: 0.5205560485063591
User 116148 does not improve AUC. Reverting changes.
Training on augumented user 107984 3/50 current_auc = 0.5220349009168885
User 107984 AUC after training: 0.5214433599526767
User 107984 does not improve AUC. Reverting changes.
Training on augumented user 132697 4/50 current_auc = 0.5220349009168885
User 132697 AUC after training: 0.5217391304347826
User 132697 does not improve AUC. Reverting changes.
Training on augumented user 61066 5/50 current_auc = 0.5220349009168885
User 61066 AUC after training: 0.5205560485063591
User 61066 does not improve AUC. Reverting changes.
Training on augumented user 59882 6/50 current_auc = 0.5220349009168885
User 59882 AUC after training: 0.5229222123632062
User 59882 improves AUC. Keeping the model.
Training on augumented user 93560 7/50 current_auc = 0.5229222123632062
User 93560 AUC after training: 0.5205560485063591
User 93560 does not improve AUC. Reverting changes.
Training on augumented user 2701 8/50 current_auc = 0.5229222123632062
User 2701 AUC after training: 0.5220349009168885
User 2701 does not improve AUC. Reverting changes.
Training on augumented user 73388 9/50 current_auc = 0.5229222123632062
User 73388 AUC after training: 0.5217391304347827
User 73388 does not improve AUC. Reverting changes.
Training on augumented user 78741 10/50 current_auc = 0.5229222123632062
User 78741 AUC after training: 0.5223306713989944
User 78741 does not improve AUC. Reverting changes.
Training on augumented user 31232 11/50 current_auc = 0.5229222123632062
User 31232 AUC after training: 0.5220349009168885
User 31232 does not improve AUC. Reverting changes.
Training on augumented user 73804 12/50 current_auc = 0.5229222123632062
User 73804 AUC after training: 0.5196687370600415
User 73804 does not improve AUC. Reverting changes.
Training on augumented user 129032 13/50 current_auc = 0.5229222123632062
User 129032 AUC after training: 0.5220349009168885
User 129032 does not improve AUC. Reverting changes.
Training on augumented user 13270 14/50 current_auc = 0.5229222123632062
User 13270 AUC after training: 0.5223306713989944
User 13270 does not improve AUC. Reverting changes.
Training on augumented user 106521 15/50 current_auc = 0.5229222123632062
User 106521 AUC after training: 0.5220349009168885
User 106521 does not improve AUC. Reverting changes.
Training on augumented user 32265 16/50 current_auc = 0.5229222123632062
User 32265 AUC after training: 0.5214433599526767
User 32265 does not improve AUC. Reverting changes.
Training on augumented user 684 17/50 current_auc = 0.5229222123632062
User 684 AUC after training: 0.5220349009168885
User 684 does not improve AUC. Reverting changes.
Training on augumented user 95867 18/50 current_auc = 0.5229222123632062
User 95867 AUC after training: 0.5214433599526768
User 95867 does not improve AUC. Reverting changes.
Training on augumented user 117757 19/50 current_auc = 0.5229222123632062
User 117757 AUC after training: 0.5223306713989944
User 117757 does not improve AUC. Reverting changes.
Training on augumented user 38528 20/50 current_auc = 0.5229222123632062
User 38528 AUC after training: 0.5217391304347826
User 38528 does not improve AUC. Reverting changes.
Training on augumented user 47327 21/50 current_auc = 0.5229222123632062
User 47327 AUC after training: 0.5184856551316179
User 47327 does not improve AUC. Reverting changes.
Training on augumented user 32899 22/50 current_auc = 0.5229222123632062
User 32899 AUC after training: 0.5199645075421473
User 32899 does not improve AUC. Reverting changes.
Training on augumented user 6660 23/50 current_auc = 0.5229222123632062
User 6660 AUC after training: 0.5214433599526767
User 6660 does not improve AUC. Reverting changes.
Training on augumented user 61577 24/50 current_auc = 0.5229222123632062
User 61577 AUC after training: 0.5214433599526767
User 61577 does not improve AUC. Reverting changes.
Training on augumented user 80342 25/50 current_auc = 0.5229222123632062
User 80342 AUC after training: 0.5211475894705708
User 80342 does not improve AUC. Reverting changes.
Training on augumented user 104032 26/50 current_auc = 0.5229222123632062
User 104032 AUC after training: 0.5226264418811003
User 104032 does not improve AUC. Reverting changes.
Training on augumented user 100031 27/50 current_auc = 0.5229222123632062
User 100031 AUC after training: 0.5217391304347826
User 100031 does not improve AUC. Reverting changes.
Training on augumented user 121131 28/50 current_auc = 0.5229222123632062
User 121131 AUC after training: 0.5220349009168885
User 121131 does not improve AUC. Reverting changes.
Training on augumented user 103373 29/50 current_auc = 0.5229222123632062
User 103373 AUC after training: 0.5223306713989944
User 103373 does not improve AUC. Reverting changes.
Training on augumented user 90410 30/50 current_auc = 0.5229222123632062
User 90410 AUC after training: 0.5223306713989944
User 90410 does not improve AUC. Reverting changes.
Training on augumented user 74420 31/50 current_auc = 0.5229222123632062
User 74420 AUC after training: 0.5202602780242531
User 74420 does not improve AUC. Reverting changes.
Training on augumented user 107394 32/50 current_auc = 0.5229222123632062
User 107394 AUC after training: 0.5211475894705708
User 107394 does not improve AUC. Reverting changes.
Training on augumented user 9886 33/50 current_auc = 0.5229222123632062
User 9886 AUC after training: 0.5226264418811002
User 9886 does not improve AUC. Reverting changes.
Training on augumented user 110713 34/50 current_auc = 0.5229222123632062
User 110713 AUC after training: 0.5223306713989944
User 110713 does not improve AUC. Reverting changes.
Training on augumented user 75532 35/50 current_auc = 0.5229222123632062
User 75532 AUC after training: 0.5223306713989944
User 75532 does not improve AUC. Reverting changes.
Training on augumented user 4225 36/50 current_auc = 0.5229222123632062
User 4225 AUC after training: 0.5205560485063591
User 4225 does not improve AUC. Reverting changes.
Training on augumented user 118283 37/50 current_auc = 0.5229222123632062
User 118283 AUC after training: 0.5220349009168885
User 118283 does not improve AUC. Reverting changes.
Training on augumented user 49485 38/50 current_auc = 0.5229222123632062
User 49485 AUC after training: 0.5229222123632062
User 49485 does not improve AUC. Reverting changes.
Training on augumented user 88062 39/50 current_auc = 0.5229222123632062
User 88062 AUC after training: 0.5208518189884649
User 88062 does not improve AUC. Reverting changes.
Training on augumented user 60260 40/50 current_auc = 0.5229222123632062
User 60260 AUC after training: 0.5217391304347826
User 60260 does not improve AUC. Reverting changes.
Training on augumented user 51387 41/50 current_auc = 0.5229222123632062
User 51387 AUC after training: 0.5223306713989944
User 51387 does not improve AUC. Reverting changes.
Training on augumented user 56598 42/50 current_auc = 0.5229222123632062
User 56598 AUC after training: 0.5220349009168885
User 56598 does not improve AUC. Reverting changes.
Training on augumented user 45087 43/50 current_auc = 0.5229222123632062
User 45087 AUC after training: 0.5232179828453121
User 45087 improves AUC. Keeping the model.
Training on augumented user 73647 44/50 current_auc = 0.5232179828453121
User 73647 AUC after training: 0.5232179828453121
User 73647 does not improve AUC. Reverting changes.
Training on augumented user 20051 45/50 current_auc = 0.5232179828453121
User 20051 AUC after training: 0.5232179828453121
User 20051 does not improve AUC. Reverting changes.
Training on augumented user 37314 46/50 current_auc = 0.5232179828453121
User 37314 AUC after training: 0.5229222123632062
User 37314 does not improve AUC. Reverting changes.
Training on augumented user 72129 47/50 current_auc = 0.5232179828453121
User 72129 AUC after training: 0.5217391304347826
User 72129 does not improve AUC. Reverting changes.
Training on augumented user 90687 48/50 current_auc = 0.5232179828453121
User 90687 AUC after training: 0.5223306713989944
User 90687 does not improve AUC. Reverting changes.
Training on augumented user 136151 49/50 current_auc = 0.5232179828453121
User 136151 AUC after training: 0.5202602780242531
User 136151 does not improve AUC. Reverting changes.
[2024-12-02 19:43:42.203350] start test user 61374 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:42.758771] start test user 61374 230/568 recall augumented users by random, augumented_users = [49676, 70607, 119683, 23179, 29403, 51210, 55618, 110879, 130558, 5217, 109635, 10353, 107388, 32329, 21216, 79621, 2354, 129162, 121958, 59617, 2291, 87660, 4843, 84935, 134127, 1071, 22372, 21516, 119615, 105334, 133518, 74428, 136890, 2118, 87465, 1445, 46015, 27065, 18949, 877, 4995, 113844, 102510, 41068, 69737, 132775, 15933, 41939, 135219, 59471]
[2024-12-02 19:43:42.799670] user = 61374 Cloud 230/568
[2024-12-02 19:43:42.839017] user = 61374 Local 230/568
[2024-12-02 19:43:42.982756] user = 61374 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:45.908157] user = 61374 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7849056603773585
Training on augumented user 49676 0/50 current_auc = 0.7849056603773585
User 49676 AUC after training: 0.7849056603773585
User 49676 does not improve AUC. Reverting changes.
Training on augumented user 70607 1/50 current_auc = 0.7849056603773585
User 70607 AUC after training: 0.7839622641509434
User 70607 does not improve AUC. Reverting changes.
Training on augumented user 119683 2/50 current_auc = 0.7849056603773585
User 119683 AUC after training: 0.7839622641509434
User 119683 does not improve AUC. Reverting changes.
Training on augumented user 23179 3/50 current_auc = 0.7849056603773585
User 23179 AUC after training: 0.7783018867924528
User 23179 does not improve AUC. Reverting changes.
Training on augumented user 29403 4/50 current_auc = 0.7849056603773585
User 29403 AUC after training: 0.7839622641509434
User 29403 does not improve AUC. Reverting changes.
Training on augumented user 51210 5/50 current_auc = 0.7849056603773585
User 51210 AUC after training: 0.7877358490566038
User 51210 improves AUC. Keeping the model.
Training on augumented user 55618 6/50 current_auc = 0.7877358490566038
User 55618 AUC after training: 0.7849056603773584
User 55618 does not improve AUC. Reverting changes.
Training on augumented user 110879 7/50 current_auc = 0.7877358490566038
User 110879 AUC after training: 0.7877358490566038
User 110879 does not improve AUC. Reverting changes.
Training on augumented user 130558 8/50 current_auc = 0.7877358490566038
User 130558 AUC after training: 0.7820754716981132
User 130558 does not improve AUC. Reverting changes.
Training on augumented user 5217 9/50 current_auc = 0.7877358490566038
User 5217 AUC after training: 0.7877358490566038
User 5217 does not improve AUC. Reverting changes.
Training on augumented user 109635 10/50 current_auc = 0.7877358490566038
User 109635 AUC after training: 0.7886792452830189
User 109635 improves AUC. Keeping the model.
Training on augumented user 10353 11/50 current_auc = 0.7886792452830189
User 10353 AUC after training: 0.7867924528301886
User 10353 does not improve AUC. Reverting changes.
Training on augumented user 107388 12/50 current_auc = 0.7886792452830189
User 107388 AUC after training: 0.7867924528301886
User 107388 does not improve AUC. Reverting changes.
Training on augumented user 32329 13/50 current_auc = 0.7886792452830189
User 32329 AUC after training: 0.7886792452830189
User 32329 does not improve AUC. Reverting changes.
Training on augumented user 21216 14/50 current_auc = 0.7886792452830189
User 21216 AUC after training: 0.7886792452830189
User 21216 does not improve AUC. Reverting changes.
Training on augumented user 79621 15/50 current_auc = 0.7886792452830189
User 79621 AUC after training: 0.7886792452830189
User 79621 does not improve AUC. Reverting changes.
Training on augumented user 2354 16/50 current_auc = 0.7886792452830189
User 2354 AUC after training: 0.7886792452830189
User 2354 does not improve AUC. Reverting changes.
Training on augumented user 129162 17/50 current_auc = 0.7886792452830189
User 129162 AUC after training: 0.7877358490566038
User 129162 does not improve AUC. Reverting changes.
Training on augumented user 121958 18/50 current_auc = 0.7886792452830189
User 121958 AUC after training: 0.7886792452830189
User 121958 does not improve AUC. Reverting changes.
Training on augumented user 59617 19/50 current_auc = 0.7886792452830189
User 59617 AUC after training: 0.7867924528301886
User 59617 does not improve AUC. Reverting changes.
Training on augumented user 2291 20/50 current_auc = 0.7886792452830189
User 2291 AUC after training: 0.7886792452830189
User 2291 does not improve AUC. Reverting changes.
Training on augumented user 87660 21/50 current_auc = 0.7886792452830189
User 87660 AUC after training: 0.7877358490566038
User 87660 does not improve AUC. Reverting changes.
Training on augumented user 4843 22/50 current_auc = 0.7886792452830189
User 4843 AUC after training: 0.7877358490566038
User 4843 does not improve AUC. Reverting changes.
Training on augumented user 84935 23/50 current_auc = 0.7886792452830189
User 84935 AUC after training: 0.7886792452830189
User 84935 does not improve AUC. Reverting changes.
Training on augumented user 134127 24/50 current_auc = 0.7886792452830189
User 134127 AUC after training: 0.7886792452830189
User 134127 does not improve AUC. Reverting changes.
Training on augumented user 1071 25/50 current_auc = 0.7886792452830189
User 1071 AUC after training: 0.789622641509434
User 1071 improves AUC. Keeping the model.
Training on augumented user 22372 26/50 current_auc = 0.789622641509434
User 22372 AUC after training: 0.7886792452830189
User 22372 does not improve AUC. Reverting changes.
Training on augumented user 21516 27/50 current_auc = 0.789622641509434
User 21516 AUC after training: 0.789622641509434
User 21516 does not improve AUC. Reverting changes.
Training on augumented user 119615 28/50 current_auc = 0.789622641509434
User 119615 AUC after training: 0.789622641509434
User 119615 does not improve AUC. Reverting changes.
Training on augumented user 105334 29/50 current_auc = 0.789622641509434
User 105334 AUC after training: 0.789622641509434
User 105334 does not improve AUC. Reverting changes.
Training on augumented user 133518 30/50 current_auc = 0.789622641509434
User 133518 AUC after training: 0.7877358490566038
User 133518 does not improve AUC. Reverting changes.
Training on augumented user 74428 31/50 current_auc = 0.789622641509434
User 74428 AUC after training: 0.789622641509434
User 74428 does not improve AUC. Reverting changes.
Training on augumented user 136890 32/50 current_auc = 0.789622641509434
User 136890 AUC after training: 0.7886792452830188
User 136890 does not improve AUC. Reverting changes.
Training on augumented user 2118 33/50 current_auc = 0.789622641509434
User 2118 AUC after training: 0.789622641509434
User 2118 does not improve AUC. Reverting changes.
Training on augumented user 87465 34/50 current_auc = 0.789622641509434
User 87465 AUC after training: 0.789622641509434
User 87465 does not improve AUC. Reverting changes.
Training on augumented user 1445 35/50 current_auc = 0.789622641509434
User 1445 AUC after training: 0.7886792452830189
User 1445 does not improve AUC. Reverting changes.
Training on augumented user 46015 36/50 current_auc = 0.789622641509434
User 46015 AUC after training: 0.789622641509434
User 46015 does not improve AUC. Reverting changes.
Training on augumented user 27065 37/50 current_auc = 0.789622641509434
User 27065 AUC after training: 0.789622641509434
User 27065 does not improve AUC. Reverting changes.
Training on augumented user 18949 38/50 current_auc = 0.789622641509434
User 18949 AUC after training: 0.7886792452830188
User 18949 does not improve AUC. Reverting changes.
Training on augumented user 877 39/50 current_auc = 0.789622641509434
User 877 AUC after training: 0.7886792452830189
User 877 does not improve AUC. Reverting changes.
Training on augumented user 4995 40/50 current_auc = 0.789622641509434
User 4995 AUC after training: 0.7886792452830189
User 4995 does not improve AUC. Reverting changes.
Training on augumented user 113844 41/50 current_auc = 0.789622641509434
User 113844 AUC after training: 0.7886792452830188
User 113844 does not improve AUC. Reverting changes.
Training on augumented user 102510 42/50 current_auc = 0.789622641509434
User 102510 AUC after training: 0.7886792452830189
User 102510 does not improve AUC. Reverting changes.
Training on augumented user 41068 43/50 current_auc = 0.789622641509434
User 41068 AUC after training: 0.7877358490566038
User 41068 does not improve AUC. Reverting changes.
Training on augumented user 69737 44/50 current_auc = 0.789622641509434
User 69737 AUC after training: 0.7886792452830189
User 69737 does not improve AUC. Reverting changes.
Training on augumented user 132775 45/50 current_auc = 0.789622641509434
User 132775 AUC after training: 0.789622641509434
User 132775 does not improve AUC. Reverting changes.
Training on augumented user 15933 46/50 current_auc = 0.789622641509434
User 15933 AUC after training: 0.790566037735849
User 15933 improves AUC. Keeping the model.
Training on augumented user 41939 47/50 current_auc = 0.790566037735849
User 41939 AUC after training: 0.7886792452830189
User 41939 does not improve AUC. Reverting changes.
Training on augumented user 135219 48/50 current_auc = 0.790566037735849
User 135219 AUC after training: 0.790566037735849
User 135219 does not improve AUC. Reverting changes.
Training on augumented user 59471 49/50 current_auc = 0.790566037735849
User 59471 AUC after training: 0.789622641509434
User 59471 does not improve AUC. Reverting changes.
[2024-12-02 19:44:12.432552] start test user 61394 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:12.921813] start test user 61394 231/568 recall augumented users by random, augumented_users = [135237, 99618, 6270, 117296, 50114, 20549, 37626, 111948, 26522, 5074, 16298, 87853, 44185, 52840, 20725, 31166, 21807, 80563, 111080, 122718, 77942, 107757, 82764, 13511, 90405, 47901, 72866, 63991, 69767, 31530, 19045, 19379, 4767, 14560, 127998, 31242, 57026, 64862, 86778, 16279, 131244, 78038, 20036, 117494, 66423, 104709, 5238, 137251, 94641, 40668]
[2024-12-02 19:44:12.937592] user = 61394 Cloud 231/568
[2024-12-02 19:44:12.965682] user = 61394 Local 231/568
[2024-12-02 19:44:13.142373] user = 61394 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:15.501879] user = 61394 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6690169491525424
Training on augumented user 135237 0/50 current_auc = 0.6690169491525424
User 135237 AUC after training: 0.6683389830508475
User 135237 does not improve AUC. Reverting changes.
Training on augumented user 99618 1/50 current_auc = 0.6690169491525424
User 99618 AUC after training: 0.6687457627118645
User 99618 does not improve AUC. Reverting changes.
Training on augumented user 6270 2/50 current_auc = 0.6690169491525424
User 6270 AUC after training: 0.6703728813559322
User 6270 improves AUC. Keeping the model.
Training on augumented user 117296 3/50 current_auc = 0.6703728813559322
User 117296 AUC after training: 0.6710508474576271
User 117296 improves AUC. Keeping the model.
Training on augumented user 50114 4/50 current_auc = 0.6710508474576271
User 50114 AUC after training: 0.671728813559322
User 50114 improves AUC. Keeping the model.
Training on augumented user 20549 5/50 current_auc = 0.671728813559322
User 20549 AUC after training: 0.671728813559322
User 20549 does not improve AUC. Reverting changes.
Training on augumented user 37626 6/50 current_auc = 0.671728813559322
User 37626 AUC after training: 0.6702372881355932
User 37626 does not improve AUC. Reverting changes.
Training on augumented user 111948 7/50 current_auc = 0.671728813559322
User 111948 AUC after training: 0.6714576271186441
User 111948 does not improve AUC. Reverting changes.
Training on augumented user 26522 8/50 current_auc = 0.671728813559322
User 26522 AUC after training: 0.6714576271186441
User 26522 does not improve AUC. Reverting changes.
Training on augumented user 5074 9/50 current_auc = 0.671728813559322
User 5074 AUC after training: 0.6703728813559322
User 5074 does not improve AUC. Reverting changes.
Training on augumented user 16298 10/50 current_auc = 0.671728813559322
User 16298 AUC after training: 0.6714576271186441
User 16298 does not improve AUC. Reverting changes.
Training on augumented user 87853 11/50 current_auc = 0.671728813559322
User 87853 AUC after training: 0.6710508474576271
User 87853 does not improve AUC. Reverting changes.
Training on augumented user 44185 12/50 current_auc = 0.671728813559322
User 44185 AUC after training: 0.6706440677966101
User 44185 does not improve AUC. Reverting changes.
Training on augumented user 52840 13/50 current_auc = 0.671728813559322
User 52840 AUC after training: 0.671728813559322
User 52840 does not improve AUC. Reverting changes.
Training on augumented user 20725 14/50 current_auc = 0.671728813559322
User 20725 AUC after training: 0.6714576271186441
User 20725 does not improve AUC. Reverting changes.
Training on augumented user 31166 15/50 current_auc = 0.671728813559322
User 31166 AUC after training: 0.6717288135593221
User 31166 improves AUC. Keeping the model.
Training on augumented user 21807 16/50 current_auc = 0.6717288135593221
User 21807 AUC after training: 0.6710508474576271
User 21807 does not improve AUC. Reverting changes.
Training on augumented user 80563 17/50 current_auc = 0.6717288135593221
User 80563 AUC after training: 0.6714576271186441
User 80563 does not improve AUC. Reverting changes.
Training on augumented user 111080 18/50 current_auc = 0.6717288135593221
User 111080 AUC after training: 0.6710508474576271
User 111080 does not improve AUC. Reverting changes.
Training on augumented user 122718 19/50 current_auc = 0.6717288135593221
User 122718 AUC after training: 0.672271186440678
User 122718 improves AUC. Keeping the model.
Training on augumented user 77942 20/50 current_auc = 0.672271186440678
User 77942 AUC after training: 0.671728813559322
User 77942 does not improve AUC. Reverting changes.
Training on augumented user 107757 21/50 current_auc = 0.672271186440678
User 107757 AUC after training: 0.672
User 107757 does not improve AUC. Reverting changes.
Training on augumented user 82764 22/50 current_auc = 0.672271186440678
User 82764 AUC after training: 0.6692881355932203
User 82764 does not improve AUC. Reverting changes.
Training on augumented user 13511 23/50 current_auc = 0.672271186440678
User 13511 AUC after training: 0.6719999999999999
User 13511 does not improve AUC. Reverting changes.
Training on augumented user 90405 24/50 current_auc = 0.672271186440678
User 90405 AUC after training: 0.6699661016949152
User 90405 does not improve AUC. Reverting changes.
Training on augumented user 47901 25/50 current_auc = 0.672271186440678
User 47901 AUC after training: 0.6682033898305084
User 47901 does not improve AUC. Reverting changes.
Training on augumented user 72866 26/50 current_auc = 0.672271186440678
User 72866 AUC after training: 0.672406779661017
User 72866 improves AUC. Keeping the model.
Training on augumented user 63991 27/50 current_auc = 0.672406779661017
User 63991 AUC after training: 0.6719999999999999
User 63991 does not improve AUC. Reverting changes.
Training on augumented user 69767 28/50 current_auc = 0.672406779661017
User 69767 AUC after training: 0.672677966101695
User 69767 improves AUC. Keeping the model.
Training on augumented user 31530 29/50 current_auc = 0.672677966101695
User 31530 AUC after training: 0.6725423728813559
User 31530 does not improve AUC. Reverting changes.
Training on augumented user 19045 30/50 current_auc = 0.672677966101695
User 19045 AUC after training: 0.672135593220339
User 19045 does not improve AUC. Reverting changes.
Training on augumented user 19379 31/50 current_auc = 0.672677966101695
User 19379 AUC after training: 0.672271186440678
User 19379 does not improve AUC. Reverting changes.
Training on augumented user 4767 32/50 current_auc = 0.672677966101695
User 4767 AUC after training: 0.672949152542373
User 4767 improves AUC. Keeping the model.
Training on augumented user 14560 33/50 current_auc = 0.672949152542373
User 14560 AUC after training: 0.672677966101695
User 14560 does not improve AUC. Reverting changes.
Training on augumented user 127998 34/50 current_auc = 0.672949152542373
User 127998 AUC after training: 0.672271186440678
User 127998 does not improve AUC. Reverting changes.
Training on augumented user 31242 35/50 current_auc = 0.672949152542373
User 31242 AUC after training: 0.6707796610169491
User 31242 does not improve AUC. Reverting changes.
Training on augumented user 57026 36/50 current_auc = 0.672949152542373
User 57026 AUC after training: 0.6726779661016948
User 57026 does not improve AUC. Reverting changes.
Training on augumented user 64862 37/50 current_auc = 0.672949152542373
User 64862 AUC after training: 0.6732203389830509
User 64862 improves AUC. Keeping the model.
Training on augumented user 86778 38/50 current_auc = 0.6732203389830509
User 86778 AUC after training: 0.6730847457627118
User 86778 does not improve AUC. Reverting changes.
Training on augumented user 16279 39/50 current_auc = 0.6732203389830509
User 16279 AUC after training: 0.6736271186440679
User 16279 improves AUC. Keeping the model.
Training on augumented user 131244 40/50 current_auc = 0.6736271186440679
User 131244 AUC after training: 0.6734915254237288
User 131244 does not improve AUC. Reverting changes.
Training on augumented user 78038 41/50 current_auc = 0.6736271186440679
User 78038 AUC after training: 0.6730847457627119
User 78038 does not improve AUC. Reverting changes.
Training on augumented user 20036 42/50 current_auc = 0.6736271186440679
User 20036 AUC after training: 0.6736271186440679
User 20036 does not improve AUC. Reverting changes.
Training on augumented user 117494 43/50 current_auc = 0.6736271186440679
User 117494 AUC after training: 0.6729491525423729
User 117494 does not improve AUC. Reverting changes.
Training on augumented user 66423 44/50 current_auc = 0.6736271186440679
User 66423 AUC after training: 0.6728135593220339
User 66423 does not improve AUC. Reverting changes.
Training on augumented user 104709 45/50 current_auc = 0.6736271186440679
User 104709 AUC after training: 0.6730847457627118
User 104709 does not improve AUC. Reverting changes.
Training on augumented user 5238 46/50 current_auc = 0.6736271186440679
User 5238 AUC after training: 0.6719999999999999
User 5238 does not improve AUC. Reverting changes.
Training on augumented user 137251 47/50 current_auc = 0.6736271186440679
User 137251 AUC after training: 0.6729491525423729
User 137251 does not improve AUC. Reverting changes.
Training on augumented user 94641 48/50 current_auc = 0.6736271186440679
User 94641 AUC after training: 0.6736271186440679
User 94641 does not improve AUC. Reverting changes.
Training on augumented user 40668 49/50 current_auc = 0.6736271186440679
User 40668 AUC after training: 0.6733559322033899
User 40668 does not improve AUC. Reverting changes.
[2024-12-02 19:44:40.961273] start test user 61398 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:41.594901] start test user 61398 232/568 recall augumented users by random, augumented_users = [126770, 129412, 2076, 68784, 29932, 58205, 89932, 73550, 136274, 9813, 271, 45069, 103585, 34804, 133491, 2943, 104032, 97415, 47034, 58652, 81369, 106325, 63922, 117795, 91646, 90668, 43503, 116158, 116868, 59788, 79393, 35032, 109629, 6253, 122241, 137657, 84216, 12935, 24719, 26816, 138220, 6806, 53067, 63102, 105885, 127628, 62939, 77337, 118327, 15689]
[2024-12-02 19:44:41.610059] user = 61398 Cloud 232/568
[2024-12-02 19:44:41.620105] user = 61398 Local 232/568
[2024-12-02 19:44:41.659268] user = 61398 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:44.336263] user = 61398 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.59375
Training on augumented user 126770 0/50 current_auc = 0.59375
User 126770 AUC after training: 0.59375
User 126770 does not improve AUC. Reverting changes.
Training on augumented user 129412 1/50 current_auc = 0.59375
User 129412 AUC after training: 0.59375
User 129412 does not improve AUC. Reverting changes.
Training on augumented user 2076 2/50 current_auc = 0.59375
User 2076 AUC after training: 0.59375
User 2076 does not improve AUC. Reverting changes.
Training on augumented user 68784 3/50 current_auc = 0.59375
User 68784 AUC after training: 0.59375
User 68784 does not improve AUC. Reverting changes.
Training on augumented user 29932 4/50 current_auc = 0.59375
User 29932 AUC after training: 0.59375
User 29932 does not improve AUC. Reverting changes.
Training on augumented user 58205 5/50 current_auc = 0.59375
User 58205 AUC after training: 0.59375
User 58205 does not improve AUC. Reverting changes.
Training on augumented user 89932 6/50 current_auc = 0.59375
User 89932 AUC after training: 0.59375
User 89932 does not improve AUC. Reverting changes.
Training on augumented user 73550 7/50 current_auc = 0.59375
User 73550 AUC after training: 0.59375
User 73550 does not improve AUC. Reverting changes.
Training on augumented user 136274 8/50 current_auc = 0.59375
User 136274 AUC after training: 0.59375
User 136274 does not improve AUC. Reverting changes.
Training on augumented user 9813 9/50 current_auc = 0.59375
User 9813 AUC after training: 0.59375
User 9813 does not improve AUC. Reverting changes.
Training on augumented user 271 10/50 current_auc = 0.59375
User 271 AUC after training: 0.59375
User 271 does not improve AUC. Reverting changes.
Training on augumented user 45069 11/50 current_auc = 0.59375
User 45069 AUC after training: 0.59375
User 45069 does not improve AUC. Reverting changes.
Training on augumented user 103585 12/50 current_auc = 0.59375
User 103585 AUC after training: 0.59375
User 103585 does not improve AUC. Reverting changes.
Training on augumented user 34804 13/50 current_auc = 0.59375
User 34804 AUC after training: 0.59375
User 34804 does not improve AUC. Reverting changes.
Training on augumented user 133491 14/50 current_auc = 0.59375
User 133491 AUC after training: 0.59375
User 133491 does not improve AUC. Reverting changes.
Training on augumented user 2943 15/50 current_auc = 0.59375
User 2943 AUC after training: 0.59375
User 2943 does not improve AUC. Reverting changes.
Training on augumented user 104032 16/50 current_auc = 0.59375
User 104032 AUC after training: 0.59375
User 104032 does not improve AUC. Reverting changes.
Training on augumented user 97415 17/50 current_auc = 0.59375
User 97415 AUC after training: 0.59375
User 97415 does not improve AUC. Reverting changes.
Training on augumented user 47034 18/50 current_auc = 0.59375
User 47034 AUC after training: 0.59375
User 47034 does not improve AUC. Reverting changes.
Training on augumented user 58652 19/50 current_auc = 0.59375
User 58652 AUC after training: 0.59375
User 58652 does not improve AUC. Reverting changes.
Training on augumented user 81369 20/50 current_auc = 0.59375
User 81369 AUC after training: 0.59375
User 81369 does not improve AUC. Reverting changes.
Training on augumented user 106325 21/50 current_auc = 0.59375
User 106325 AUC after training: 0.59375
User 106325 does not improve AUC. Reverting changes.
Training on augumented user 63922 22/50 current_auc = 0.59375
User 63922 AUC after training: 0.59375
User 63922 does not improve AUC. Reverting changes.
Training on augumented user 117795 23/50 current_auc = 0.59375
User 117795 AUC after training: 0.59375
User 117795 does not improve AUC. Reverting changes.
Training on augumented user 91646 24/50 current_auc = 0.59375
User 91646 AUC after training: 0.59375
User 91646 does not improve AUC. Reverting changes.
Training on augumented user 90668 25/50 current_auc = 0.59375
User 90668 AUC after training: 0.59375
User 90668 does not improve AUC. Reverting changes.
Training on augumented user 43503 26/50 current_auc = 0.59375
User 43503 AUC after training: 0.59375
User 43503 does not improve AUC. Reverting changes.
Training on augumented user 116158 27/50 current_auc = 0.59375
User 116158 AUC after training: 0.59375
User 116158 does not improve AUC. Reverting changes.
Training on augumented user 116868 28/50 current_auc = 0.59375
User 116868 AUC after training: 0.59375
User 116868 does not improve AUC. Reverting changes.
Training on augumented user 59788 29/50 current_auc = 0.59375
User 59788 AUC after training: 0.59375
User 59788 does not improve AUC. Reverting changes.
Training on augumented user 79393 30/50 current_auc = 0.59375
User 79393 AUC after training: 0.59375
User 79393 does not improve AUC. Reverting changes.
Training on augumented user 35032 31/50 current_auc = 0.59375
User 35032 AUC after training: 0.59375
User 35032 does not improve AUC. Reverting changes.
Training on augumented user 109629 32/50 current_auc = 0.59375
User 109629 AUC after training: 0.59375
User 109629 does not improve AUC. Reverting changes.
Training on augumented user 6253 33/50 current_auc = 0.59375
User 6253 AUC after training: 0.59375
User 6253 does not improve AUC. Reverting changes.
Training on augumented user 122241 34/50 current_auc = 0.59375
User 122241 AUC after training: 0.59375
User 122241 does not improve AUC. Reverting changes.
Training on augumented user 137657 35/50 current_auc = 0.59375
User 137657 AUC after training: 0.59375
User 137657 does not improve AUC. Reverting changes.
Training on augumented user 84216 36/50 current_auc = 0.59375
User 84216 AUC after training: 0.59375
User 84216 does not improve AUC. Reverting changes.
Training on augumented user 12935 37/50 current_auc = 0.59375
User 12935 AUC after training: 0.59375
User 12935 does not improve AUC. Reverting changes.
Training on augumented user 24719 38/50 current_auc = 0.59375
User 24719 AUC after training: 0.59375
User 24719 does not improve AUC. Reverting changes.
Training on augumented user 26816 39/50 current_auc = 0.59375
User 26816 AUC after training: 0.59375
User 26816 does not improve AUC. Reverting changes.
Training on augumented user 138220 40/50 current_auc = 0.59375
User 138220 AUC after training: 0.59375
User 138220 does not improve AUC. Reverting changes.
Training on augumented user 6806 41/50 current_auc = 0.59375
User 6806 AUC after training: 0.59375
User 6806 does not improve AUC. Reverting changes.
Training on augumented user 53067 42/50 current_auc = 0.59375
User 53067 AUC after training: 0.59375
User 53067 does not improve AUC. Reverting changes.
Training on augumented user 63102 43/50 current_auc = 0.59375
User 63102 AUC after training: 0.59375
User 63102 does not improve AUC. Reverting changes.
Training on augumented user 105885 44/50 current_auc = 0.59375
User 105885 AUC after training: 0.59375
User 105885 does not improve AUC. Reverting changes.
Training on augumented user 127628 45/50 current_auc = 0.59375
User 127628 AUC after training: 0.59375
User 127628 does not improve AUC. Reverting changes.
Training on augumented user 62939 46/50 current_auc = 0.59375
User 62939 AUC after training: 0.59375
User 62939 does not improve AUC. Reverting changes.
Training on augumented user 77337 47/50 current_auc = 0.59375
User 77337 AUC after training: 0.59375
User 77337 does not improve AUC. Reverting changes.
Training on augumented user 118327 48/50 current_auc = 0.59375
User 118327 AUC after training: 0.59375
User 118327 does not improve AUC. Reverting changes.
Training on augumented user 15689 49/50 current_auc = 0.59375
User 15689 AUC after training: 0.59375
User 15689 does not improve AUC. Reverting changes.
[2024-12-02 19:45:12.237895] start test user 61408 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:12.655758] start test user 61408 233/568 recall augumented users by random, augumented_users = [22553, 102492, 82799, 102754, 136818, 119242, 107084, 27316, 119615, 35318, 65167, 49587, 103773, 78630, 52893, 106955, 88183, 56981, 21185, 58494, 91577, 47308, 36499, 87367, 85153, 61862, 44448, 130150, 67302, 134985, 85665, 23120, 38095, 137794, 115071, 132228, 5977, 515, 116284, 70381, 94179, 55946, 97216, 77270, 78715, 78392, 107462, 40146, 55935, 21585]
[2024-12-02 19:45:12.672683] user = 61408 Cloud 233/568
[2024-12-02 19:45:12.691454] user = 61408 Local 233/568
[2024-12-02 19:45:12.767253] user = 61408 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:15.469633] user = 61408 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6974609375
Training on augumented user 22553 0/50 current_auc = 0.6974609375
User 22553 AUC after training: 0.6974609375
User 22553 does not improve AUC. Reverting changes.
Training on augumented user 102492 1/50 current_auc = 0.6974609375
User 102492 AUC after training: 0.6974609375
User 102492 does not improve AUC. Reverting changes.
Training on augumented user 82799 2/50 current_auc = 0.6974609375
User 82799 AUC after training: 0.6976562500000001
User 82799 improves AUC. Keeping the model.
Training on augumented user 102754 3/50 current_auc = 0.6976562500000001
User 102754 AUC after training: 0.697265625
User 102754 does not improve AUC. Reverting changes.
Training on augumented user 136818 4/50 current_auc = 0.6976562500000001
User 136818 AUC after training: 0.6976562500000001
User 136818 does not improve AUC. Reverting changes.
Training on augumented user 119242 5/50 current_auc = 0.6976562500000001
User 119242 AUC after training: 0.6966796875000001
User 119242 does not improve AUC. Reverting changes.
Training on augumented user 107084 6/50 current_auc = 0.6976562500000001
User 107084 AUC after training: 0.697265625
User 107084 does not improve AUC. Reverting changes.
Training on augumented user 27316 7/50 current_auc = 0.6976562500000001
User 27316 AUC after training: 0.697265625
User 27316 does not improve AUC. Reverting changes.
Training on augumented user 119615 8/50 current_auc = 0.6976562500000001
User 119615 AUC after training: 0.6976562500000001
User 119615 does not improve AUC. Reverting changes.
Training on augumented user 35318 9/50 current_auc = 0.6976562500000001
User 35318 AUC after training: 0.6962890625
User 35318 does not improve AUC. Reverting changes.
Training on augumented user 65167 10/50 current_auc = 0.6976562500000001
User 65167 AUC after training: 0.6974609375
User 65167 does not improve AUC. Reverting changes.
Training on augumented user 49587 11/50 current_auc = 0.6976562500000001
User 49587 AUC after training: 0.6974609375
User 49587 does not improve AUC. Reverting changes.
Training on augumented user 103773 12/50 current_auc = 0.6976562500000001
User 103773 AUC after training: 0.6976562500000001
User 103773 does not improve AUC. Reverting changes.
Training on augumented user 78630 13/50 current_auc = 0.6976562500000001
User 78630 AUC after training: 0.697265625
User 78630 does not improve AUC. Reverting changes.
Training on augumented user 52893 14/50 current_auc = 0.6976562500000001
User 52893 AUC after training: 0.6966796875
User 52893 does not improve AUC. Reverting changes.
Training on augumented user 106955 15/50 current_auc = 0.6976562500000001
User 106955 AUC after training: 0.6958984375
User 106955 does not improve AUC. Reverting changes.
Training on augumented user 88183 16/50 current_auc = 0.6976562500000001
User 88183 AUC after training: 0.6976562500000001
User 88183 does not improve AUC. Reverting changes.
Training on augumented user 56981 17/50 current_auc = 0.6976562500000001
User 56981 AUC after training: 0.69658203125
User 56981 does not improve AUC. Reverting changes.
Training on augumented user 21185 18/50 current_auc = 0.6976562500000001
User 21185 AUC after training: 0.695703125
User 21185 does not improve AUC. Reverting changes.
Training on augumented user 58494 19/50 current_auc = 0.6976562500000001
User 58494 AUC after training: 0.697265625
User 58494 does not improve AUC. Reverting changes.
Training on augumented user 91577 20/50 current_auc = 0.6976562500000001
User 91577 AUC after training: 0.6974609375
User 91577 does not improve AUC. Reverting changes.
Training on augumented user 47308 21/50 current_auc = 0.6976562500000001
User 47308 AUC after training: 0.696875
User 47308 does not improve AUC. Reverting changes.
Training on augumented user 36499 22/50 current_auc = 0.6976562500000001
User 36499 AUC after training: 0.69765625
User 36499 does not improve AUC. Reverting changes.
Training on augumented user 87367 23/50 current_auc = 0.6976562500000001
User 87367 AUC after training: 0.6974609375
User 87367 does not improve AUC. Reverting changes.
Training on augumented user 85153 24/50 current_auc = 0.6976562500000001
User 85153 AUC after training: 0.6974609375
User 85153 does not improve AUC. Reverting changes.
Training on augumented user 61862 25/50 current_auc = 0.6976562500000001
User 61862 AUC after training: 0.697265625
User 61862 does not improve AUC. Reverting changes.
Training on augumented user 44448 26/50 current_auc = 0.6976562500000001
User 44448 AUC after training: 0.6986328125
User 44448 improves AUC. Keeping the model.
Training on augumented user 130150 27/50 current_auc = 0.6986328125
User 130150 AUC after training: 0.6966796875
User 130150 does not improve AUC. Reverting changes.
Training on augumented user 67302 28/50 current_auc = 0.6986328125
User 67302 AUC after training: 0.697265625
User 67302 does not improve AUC. Reverting changes.
Training on augumented user 134985 29/50 current_auc = 0.6986328125
User 134985 AUC after training: 0.69765625
User 134985 does not improve AUC. Reverting changes.
Training on augumented user 85665 30/50 current_auc = 0.6986328125
User 85665 AUC after training: 0.6974609374999999
User 85665 does not improve AUC. Reverting changes.
Training on augumented user 23120 31/50 current_auc = 0.6986328125
User 23120 AUC after training: 0.69765625
User 23120 does not improve AUC. Reverting changes.
Training on augumented user 38095 32/50 current_auc = 0.6986328125
User 38095 AUC after training: 0.6984374999999999
User 38095 does not improve AUC. Reverting changes.
Training on augumented user 137794 33/50 current_auc = 0.6986328125
User 137794 AUC after training: 0.696875
User 137794 does not improve AUC. Reverting changes.
Training on augumented user 115071 34/50 current_auc = 0.6986328125
User 115071 AUC after training: 0.69765625
User 115071 does not improve AUC. Reverting changes.
Training on augumented user 132228 35/50 current_auc = 0.6986328125
User 132228 AUC after training: 0.6982421875
User 132228 does not improve AUC. Reverting changes.
Training on augumented user 5977 36/50 current_auc = 0.6986328125
User 5977 AUC after training: 0.6978515625
User 5977 does not improve AUC. Reverting changes.
Training on augumented user 515 37/50 current_auc = 0.6986328125
User 515 AUC after training: 0.697265625
User 515 does not improve AUC. Reverting changes.
Training on augumented user 116284 38/50 current_auc = 0.6986328125
User 116284 AUC after training: 0.6978515625
User 116284 does not improve AUC. Reverting changes.
Training on augumented user 70381 39/50 current_auc = 0.6986328125
User 70381 AUC after training: 0.6978515625
User 70381 does not improve AUC. Reverting changes.
Training on augumented user 94179 40/50 current_auc = 0.6986328125
User 94179 AUC after training: 0.6968749999999999
User 94179 does not improve AUC. Reverting changes.
Training on augumented user 55946 41/50 current_auc = 0.6986328125
User 55946 AUC after training: 0.6978515625
User 55946 does not improve AUC. Reverting changes.
Training on augumented user 97216 42/50 current_auc = 0.6986328125
User 97216 AUC after training: 0.697265625
User 97216 does not improve AUC. Reverting changes.
Training on augumented user 77270 43/50 current_auc = 0.6986328125
User 77270 AUC after training: 0.69638671875
User 77270 does not improve AUC. Reverting changes.
Training on augumented user 78715 44/50 current_auc = 0.6986328125
User 78715 AUC after training: 0.6998046875
User 78715 improves AUC. Keeping the model.
Training on augumented user 78392 45/50 current_auc = 0.6998046875
User 78392 AUC after training: 0.69853515625
User 78392 does not improve AUC. Reverting changes.
Training on augumented user 107462 46/50 current_auc = 0.6998046875
User 107462 AUC after training: 0.69921875
User 107462 does not improve AUC. Reverting changes.
Training on augumented user 40146 47/50 current_auc = 0.6998046875
User 40146 AUC after training: 0.7
User 40146 improves AUC. Keeping the model.
Training on augumented user 55935 48/50 current_auc = 0.7
User 55935 AUC after training: 0.6990234375
User 55935 does not improve AUC. Reverting changes.
Training on augumented user 21585 49/50 current_auc = 0.7
User 21585 AUC after training: 0.6998046875
User 21585 does not improve AUC. Reverting changes.
[2024-12-02 19:45:46.801664] start test user 61451 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:47.509804] start test user 61451 234/568 recall augumented users by random, augumented_users = [7928, 122273, 45597, 31276, 129082, 85151, 50716, 10424, 16737, 9944, 100269, 90193, 129293, 99399, 5248, 62572, 116911, 127215, 490, 127310, 102562, 81634, 132085, 138033, 68406, 29035, 88432, 79370, 77038, 3769, 30886, 86336, 15052, 65325, 111600, 82781, 27521, 98484, 132128, 126040, 65848, 68514, 110653, 63857, 56553, 50357, 106186, 72808, 112580, 81203]
[2024-12-02 19:45:47.524027] user = 61451 Cloud 234/568
[2024-12-02 19:45:47.543419] user = 61451 Local 234/568
[2024-12-02 19:45:47.572257] user = 61451 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:49.153289] user = 61451 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7549107142857143
Training on augumented user 7928 0/50 current_auc = 0.7549107142857143
User 7928 AUC after training: 0.7553571428571428
User 7928 improves AUC. Keeping the model.
Training on augumented user 122273 1/50 current_auc = 0.7553571428571428
User 122273 AUC after training: 0.7544642857142857
User 122273 does not improve AUC. Reverting changes.
Training on augumented user 45597 2/50 current_auc = 0.7553571428571428
User 45597 AUC after training: 0.7553571428571428
User 45597 does not improve AUC. Reverting changes.
Training on augumented user 31276 3/50 current_auc = 0.7553571428571428
User 31276 AUC after training: 0.7540178571428572
User 31276 does not improve AUC. Reverting changes.
Training on augumented user 129082 4/50 current_auc = 0.7553571428571428
User 129082 AUC after training: 0.7549107142857142
User 129082 does not improve AUC. Reverting changes.
Training on augumented user 85151 5/50 current_auc = 0.7553571428571428
User 85151 AUC after training: 0.7553571428571428
User 85151 does not improve AUC. Reverting changes.
Training on augumented user 50716 6/50 current_auc = 0.7553571428571428
User 50716 AUC after training: 0.7558035714285715
User 50716 improves AUC. Keeping the model.
Training on augumented user 10424 7/50 current_auc = 0.7558035714285715
User 10424 AUC after training: 0.7553571428571428
User 10424 does not improve AUC. Reverting changes.
Training on augumented user 16737 8/50 current_auc = 0.7558035714285715
User 16737 AUC after training: 0.7540178571428572
User 16737 does not improve AUC. Reverting changes.
Training on augumented user 9944 9/50 current_auc = 0.7558035714285715
User 9944 AUC after training: 0.7553571428571428
User 9944 does not improve AUC. Reverting changes.
Training on augumented user 100269 10/50 current_auc = 0.7558035714285715
User 100269 AUC after training: 0.7558035714285715
User 100269 does not improve AUC. Reverting changes.
Training on augumented user 90193 11/50 current_auc = 0.7558035714285715
User 90193 AUC after training: 0.7535714285714286
User 90193 does not improve AUC. Reverting changes.
Training on augumented user 129293 12/50 current_auc = 0.7558035714285715
User 129293 AUC after training: 0.7553571428571428
User 129293 does not improve AUC. Reverting changes.
Training on augumented user 99399 13/50 current_auc = 0.7558035714285715
User 99399 AUC after training: 0.7553571428571428
User 99399 does not improve AUC. Reverting changes.
Training on augumented user 5248 14/50 current_auc = 0.7558035714285715
User 5248 AUC after training: 0.7558035714285715
User 5248 does not improve AUC. Reverting changes.
Training on augumented user 62572 15/50 current_auc = 0.7558035714285715
User 62572 AUC after training: 0.7549107142857143
User 62572 does not improve AUC. Reverting changes.
Training on augumented user 116911 16/50 current_auc = 0.7558035714285715
User 116911 AUC after training: 0.7540178571428572
User 116911 does not improve AUC. Reverting changes.
Training on augumented user 127215 17/50 current_auc = 0.7558035714285715
User 127215 AUC after training: 0.7549107142857143
User 127215 does not improve AUC. Reverting changes.
Training on augumented user 490 18/50 current_auc = 0.7558035714285715
User 490 AUC after training: 0.7540178571428572
User 490 does not improve AUC. Reverting changes.
Training on augumented user 127310 19/50 current_auc = 0.7558035714285715
User 127310 AUC after training: 0.7558035714285714
User 127310 does not improve AUC. Reverting changes.
Training on augumented user 102562 20/50 current_auc = 0.7558035714285715
User 102562 AUC after training: 0.75625
User 102562 improves AUC. Keeping the model.
Training on augumented user 81634 21/50 current_auc = 0.75625
User 81634 AUC after training: 0.75625
User 81634 does not improve AUC. Reverting changes.
Training on augumented user 132085 22/50 current_auc = 0.75625
User 132085 AUC after training: 0.7566964285714286
User 132085 improves AUC. Keeping the model.
Training on augumented user 138033 23/50 current_auc = 0.7566964285714286
User 138033 AUC after training: 0.7566964285714286
User 138033 does not improve AUC. Reverting changes.
Training on augumented user 68406 24/50 current_auc = 0.7566964285714286
User 68406 AUC after training: 0.7558035714285715
User 68406 does not improve AUC. Reverting changes.
Training on augumented user 29035 25/50 current_auc = 0.7566964285714286
User 29035 AUC after training: 0.7580357142857144
User 29035 improves AUC. Keeping the model.
Training on augumented user 88432 26/50 current_auc = 0.7580357142857144
User 88432 AUC after training: 0.7584821428571429
User 88432 improves AUC. Keeping the model.
Training on augumented user 79370 27/50 current_auc = 0.7584821428571429
User 79370 AUC after training: 0.7589285714285715
User 79370 improves AUC. Keeping the model.
Training on augumented user 77038 28/50 current_auc = 0.7589285714285715
User 77038 AUC after training: 0.7580357142857143
User 77038 does not improve AUC. Reverting changes.
Training on augumented user 3769 29/50 current_auc = 0.7589285714285715
User 3769 AUC after training: 0.7580357142857144
User 3769 does not improve AUC. Reverting changes.
Training on augumented user 30886 30/50 current_auc = 0.7589285714285715
User 30886 AUC after training: 0.7580357142857144
User 30886 does not improve AUC. Reverting changes.
Training on augumented user 86336 31/50 current_auc = 0.7589285714285715
User 86336 AUC after training: 0.7566964285714286
User 86336 does not improve AUC. Reverting changes.
Training on augumented user 15052 32/50 current_auc = 0.7589285714285715
User 15052 AUC after training: 0.7580357142857144
User 15052 does not improve AUC. Reverting changes.
Training on augumented user 65325 33/50 current_auc = 0.7589285714285715
User 65325 AUC after training: 0.7575892857142857
User 65325 does not improve AUC. Reverting changes.
Training on augumented user 111600 34/50 current_auc = 0.7589285714285715
User 111600 AUC after training: 0.7580357142857144
User 111600 does not improve AUC. Reverting changes.
Training on augumented user 82781 35/50 current_auc = 0.7589285714285715
User 82781 AUC after training: 0.7589285714285715
User 82781 does not improve AUC. Reverting changes.
Training on augumented user 27521 36/50 current_auc = 0.7589285714285715
User 27521 AUC after training: 0.7571428571428571
User 27521 does not improve AUC. Reverting changes.
Training on augumented user 98484 37/50 current_auc = 0.7589285714285715
User 98484 AUC after training: 0.7589285714285715
User 98484 does not improve AUC. Reverting changes.
Training on augumented user 132128 38/50 current_auc = 0.7589285714285715
User 132128 AUC after training: 0.7589285714285714
User 132128 does not improve AUC. Reverting changes.
Training on augumented user 126040 39/50 current_auc = 0.7589285714285715
User 126040 AUC after training: 0.7562500000000001
User 126040 does not improve AUC. Reverting changes.
Training on augumented user 65848 40/50 current_auc = 0.7589285714285715
User 65848 AUC after training: 0.7584821428571429
User 65848 does not improve AUC. Reverting changes.
Training on augumented user 68514 41/50 current_auc = 0.7589285714285715
User 68514 AUC after training: 0.7575892857142857
User 68514 does not improve AUC. Reverting changes.
Training on augumented user 110653 42/50 current_auc = 0.7589285714285715
User 110653 AUC after training: 0.7580357142857144
User 110653 does not improve AUC. Reverting changes.
Training on augumented user 63857 43/50 current_auc = 0.7589285714285715
User 63857 AUC after training: 0.7571428571428571
User 63857 does not improve AUC. Reverting changes.
Training on augumented user 56553 44/50 current_auc = 0.7589285714285715
User 56553 AUC after training: 0.7584821428571429
User 56553 does not improve AUC. Reverting changes.
Training on augumented user 50357 45/50 current_auc = 0.7589285714285715
User 50357 AUC after training: 0.7575892857142857
User 50357 does not improve AUC. Reverting changes.
Training on augumented user 106186 46/50 current_auc = 0.7589285714285715
User 106186 AUC after training: 0.7584821428571429
User 106186 does not improve AUC. Reverting changes.
Training on augumented user 72808 47/50 current_auc = 0.7589285714285715
User 72808 AUC after training: 0.7580357142857144
User 72808 does not improve AUC. Reverting changes.
Training on augumented user 112580 48/50 current_auc = 0.7589285714285715
User 112580 AUC after training: 0.7571428571428571
User 112580 does not improve AUC. Reverting changes.
Training on augumented user 81203 49/50 current_auc = 0.7589285714285715
User 81203 AUC after training: 0.7580357142857144
User 81203 does not improve AUC. Reverting changes.
[2024-12-02 19:46:18.282457] start test user 61470 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:18.706329] start test user 61470 235/568 recall augumented users by random, augumented_users = [116877, 75064, 67191, 20590, 89164, 106663, 1105, 5332, 92304, 91474, 1935, 2345, 75537, 103631, 93805, 115330, 67007, 123874, 6185, 108903, 20892, 132983, 57268, 94925, 101749, 58097, 15013, 77706, 13381, 121224, 69837, 8751, 122854, 12260, 28968, 36171, 73432, 119341, 77935, 74779, 46062, 137113, 98932, 70663, 48951, 43180, 65814, 79821, 18451, 131520]
[2024-12-02 19:46:18.721347] user = 61470 Cloud 235/568
[2024-12-02 19:46:18.731653] user = 61470 Local 235/568
[2024-12-02 19:46:18.771869] user = 61470 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:21.263710] user = 61470 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6964285714285714
Training on augumented user 116877 0/50 current_auc = 0.6964285714285714
User 116877 AUC after training: 0.6964285714285714
User 116877 does not improve AUC. Reverting changes.
Training on augumented user 75064 1/50 current_auc = 0.6964285714285714
User 75064 AUC after training: 0.6964285714285714
User 75064 does not improve AUC. Reverting changes.
Training on augumented user 67191 2/50 current_auc = 0.6964285714285714
User 67191 AUC after training: 0.6964285714285714
User 67191 does not improve AUC. Reverting changes.
Training on augumented user 20590 3/50 current_auc = 0.6964285714285714
User 20590 AUC after training: 0.6964285714285714
User 20590 does not improve AUC. Reverting changes.
Training on augumented user 89164 4/50 current_auc = 0.6964285714285714
User 89164 AUC after training: 0.6964285714285714
User 89164 does not improve AUC. Reverting changes.
Training on augumented user 106663 5/50 current_auc = 0.6964285714285714
User 106663 AUC after training: 0.6964285714285714
User 106663 does not improve AUC. Reverting changes.
Training on augumented user 1105 6/50 current_auc = 0.6964285714285714
User 1105 AUC after training: 0.6964285714285714
User 1105 does not improve AUC. Reverting changes.
Training on augumented user 5332 7/50 current_auc = 0.6964285714285714
User 5332 AUC after training: 0.6964285714285714
User 5332 does not improve AUC. Reverting changes.
Training on augumented user 92304 8/50 current_auc = 0.6964285714285714
User 92304 AUC after training: 0.6964285714285714
User 92304 does not improve AUC. Reverting changes.
Training on augumented user 91474 9/50 current_auc = 0.6964285714285714
User 91474 AUC after training: 0.6964285714285714
User 91474 does not improve AUC. Reverting changes.
Training on augumented user 1935 10/50 current_auc = 0.6964285714285714
User 1935 AUC after training: 0.6964285714285714
User 1935 does not improve AUC. Reverting changes.
Training on augumented user 2345 11/50 current_auc = 0.6964285714285714
User 2345 AUC after training: 0.6964285714285714
User 2345 does not improve AUC. Reverting changes.
Training on augumented user 75537 12/50 current_auc = 0.6964285714285714
User 75537 AUC after training: 0.6964285714285714
User 75537 does not improve AUC. Reverting changes.
Training on augumented user 103631 13/50 current_auc = 0.6964285714285714
User 103631 AUC after training: 0.6964285714285714
User 103631 does not improve AUC. Reverting changes.
Training on augumented user 93805 14/50 current_auc = 0.6964285714285714
User 93805 AUC after training: 0.6964285714285714
User 93805 does not improve AUC. Reverting changes.
Training on augumented user 115330 15/50 current_auc = 0.6964285714285714
User 115330 AUC after training: 0.6964285714285714
User 115330 does not improve AUC. Reverting changes.
Training on augumented user 67007 16/50 current_auc = 0.6964285714285714
User 67007 AUC after training: 0.6964285714285714
User 67007 does not improve AUC. Reverting changes.
Training on augumented user 123874 17/50 current_auc = 0.6964285714285714
User 123874 AUC after training: 0.6964285714285714
User 123874 does not improve AUC. Reverting changes.
Training on augumented user 6185 18/50 current_auc = 0.6964285714285714
User 6185 AUC after training: 0.6964285714285714
User 6185 does not improve AUC. Reverting changes.
Training on augumented user 108903 19/50 current_auc = 0.6964285714285714
User 108903 AUC after training: 0.6964285714285714
User 108903 does not improve AUC. Reverting changes.
Training on augumented user 20892 20/50 current_auc = 0.6964285714285714
User 20892 AUC after training: 0.6964285714285714
User 20892 does not improve AUC. Reverting changes.
Training on augumented user 132983 21/50 current_auc = 0.6964285714285714
User 132983 AUC after training: 0.6964285714285714
User 132983 does not improve AUC. Reverting changes.
Training on augumented user 57268 22/50 current_auc = 0.6964285714285714
User 57268 AUC after training: 0.6964285714285714
User 57268 does not improve AUC. Reverting changes.
Training on augumented user 94925 23/50 current_auc = 0.6964285714285714
User 94925 AUC after training: 0.6964285714285714
User 94925 does not improve AUC. Reverting changes.
Training on augumented user 101749 24/50 current_auc = 0.6964285714285714
User 101749 AUC after training: 0.6964285714285714
User 101749 does not improve AUC. Reverting changes.
Training on augumented user 58097 25/50 current_auc = 0.6964285714285714
User 58097 AUC after training: 0.6964285714285714
User 58097 does not improve AUC. Reverting changes.
Training on augumented user 15013 26/50 current_auc = 0.6964285714285714
User 15013 AUC after training: 0.6964285714285714
User 15013 does not improve AUC. Reverting changes.
Training on augumented user 77706 27/50 current_auc = 0.6964285714285714
User 77706 AUC after training: 0.6964285714285714
User 77706 does not improve AUC. Reverting changes.
Training on augumented user 13381 28/50 current_auc = 0.6964285714285714
User 13381 AUC after training: 0.6964285714285714
User 13381 does not improve AUC. Reverting changes.
Training on augumented user 121224 29/50 current_auc = 0.6964285714285714
User 121224 AUC after training: 0.6964285714285714
User 121224 does not improve AUC. Reverting changes.
Training on augumented user 69837 30/50 current_auc = 0.6964285714285714
User 69837 AUC after training: 0.6964285714285714
User 69837 does not improve AUC. Reverting changes.
Training on augumented user 8751 31/50 current_auc = 0.6964285714285714
User 8751 AUC after training: 0.6964285714285714
User 8751 does not improve AUC. Reverting changes.
Training on augumented user 122854 32/50 current_auc = 0.6964285714285714
User 122854 AUC after training: 0.6964285714285714
User 122854 does not improve AUC. Reverting changes.
Training on augumented user 12260 33/50 current_auc = 0.6964285714285714
User 12260 AUC after training: 0.6964285714285714
User 12260 does not improve AUC. Reverting changes.
Training on augumented user 28968 34/50 current_auc = 0.6964285714285714
User 28968 AUC after training: 0.6964285714285714
User 28968 does not improve AUC. Reverting changes.
Training on augumented user 36171 35/50 current_auc = 0.6964285714285714
User 36171 AUC after training: 0.6964285714285714
User 36171 does not improve AUC. Reverting changes.
Training on augumented user 73432 36/50 current_auc = 0.6964285714285714
User 73432 AUC after training: 0.6964285714285714
User 73432 does not improve AUC. Reverting changes.
Training on augumented user 119341 37/50 current_auc = 0.6964285714285714
User 119341 AUC after training: 0.6964285714285714
User 119341 does not improve AUC. Reverting changes.
Training on augumented user 77935 38/50 current_auc = 0.6964285714285714
User 77935 AUC after training: 0.6964285714285714
User 77935 does not improve AUC. Reverting changes.
Training on augumented user 74779 39/50 current_auc = 0.6964285714285714
User 74779 AUC after training: 0.6964285714285714
User 74779 does not improve AUC. Reverting changes.
Training on augumented user 46062 40/50 current_auc = 0.6964285714285714
User 46062 AUC after training: 0.6964285714285714
User 46062 does not improve AUC. Reverting changes.
Training on augumented user 137113 41/50 current_auc = 0.6964285714285714
User 137113 AUC after training: 0.6964285714285714
User 137113 does not improve AUC. Reverting changes.
Training on augumented user 98932 42/50 current_auc = 0.6964285714285714
User 98932 AUC after training: 0.6964285714285714
User 98932 does not improve AUC. Reverting changes.
Training on augumented user 70663 43/50 current_auc = 0.6964285714285714
User 70663 AUC after training: 0.6964285714285714
User 70663 does not improve AUC. Reverting changes.
Training on augumented user 48951 44/50 current_auc = 0.6964285714285714
User 48951 AUC after training: 0.6964285714285714
User 48951 does not improve AUC. Reverting changes.
Training on augumented user 43180 45/50 current_auc = 0.6964285714285714
User 43180 AUC after training: 0.6964285714285714
User 43180 does not improve AUC. Reverting changes.
Training on augumented user 65814 46/50 current_auc = 0.6964285714285714
User 65814 AUC after training: 0.6964285714285714
User 65814 does not improve AUC. Reverting changes.
Training on augumented user 79821 47/50 current_auc = 0.6964285714285714
User 79821 AUC after training: 0.6964285714285714
User 79821 does not improve AUC. Reverting changes.
Training on augumented user 18451 48/50 current_auc = 0.6964285714285714
User 18451 AUC after training: 0.6964285714285714
User 18451 does not improve AUC. Reverting changes.
Training on augumented user 131520 49/50 current_auc = 0.6964285714285714
User 131520 AUC after training: 0.6964285714285714
User 131520 does not improve AUC. Reverting changes.
[2024-12-02 19:46:52.207858] start test user 61481 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:52.786768] start test user 61481 236/568 recall augumented users by random, augumented_users = [84756, 12502, 132724, 14348, 68760, 94760, 20637, 82403, 108051, 79604, 38841, 109150, 7229, 70591, 7092, 84730, 32335, 76221, 29801, 70410, 50697, 115757, 83657, 20224, 38802, 35076, 59329, 77877, 113927, 116927, 60364, 78602, 137734, 19882, 61372, 131849, 111161, 109968, 84661, 10397, 47814, 17262, 97151, 35954, 1957, 35158, 22556, 72051, 97657, 55285]
[2024-12-02 19:46:52.807934] user = 61481 Cloud 236/568
[2024-12-02 19:46:52.827901] user = 61481 Local 236/568
[2024-12-02 19:46:52.893750] user = 61481 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:55.908092] user = 61481 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7130769230769232
Training on augumented user 84756 0/50 current_auc = 0.7130769230769232
User 84756 AUC after training: 0.7107692307692308
User 84756 does not improve AUC. Reverting changes.
Training on augumented user 12502 1/50 current_auc = 0.7130769230769232
User 12502 AUC after training: 0.7130769230769232
User 12502 does not improve AUC. Reverting changes.
Training on augumented user 132724 2/50 current_auc = 0.7130769230769232
User 132724 AUC after training: 0.7130769230769232
User 132724 does not improve AUC. Reverting changes.
Training on augumented user 14348 3/50 current_auc = 0.7130769230769232
User 14348 AUC after training: 0.71
User 14348 does not improve AUC. Reverting changes.
Training on augumented user 68760 4/50 current_auc = 0.7130769230769232
User 68760 AUC after training: 0.7130769230769232
User 68760 does not improve AUC. Reverting changes.
Training on augumented user 94760 5/50 current_auc = 0.7130769230769232
User 94760 AUC after training: 0.7123076923076923
User 94760 does not improve AUC. Reverting changes.
Training on augumented user 20637 6/50 current_auc = 0.7130769230769232
User 20637 AUC after training: 0.7130769230769232
User 20637 does not improve AUC. Reverting changes.
Training on augumented user 82403 7/50 current_auc = 0.7130769230769232
User 82403 AUC after training: 0.7130769230769232
User 82403 does not improve AUC. Reverting changes.
Training on augumented user 108051 8/50 current_auc = 0.7130769230769232
User 108051 AUC after training: 0.7111538461538461
User 108051 does not improve AUC. Reverting changes.
Training on augumented user 79604 9/50 current_auc = 0.7130769230769232
User 79604 AUC after training: 0.7130769230769232
User 79604 does not improve AUC. Reverting changes.
Training on augumented user 38841 10/50 current_auc = 0.7130769230769232
User 38841 AUC after training: 0.7115384615384616
User 38841 does not improve AUC. Reverting changes.
Training on augumented user 109150 11/50 current_auc = 0.7130769230769232
User 109150 AUC after training: 0.7123076923076924
User 109150 does not improve AUC. Reverting changes.
Training on augumented user 7229 12/50 current_auc = 0.7130769230769232
User 7229 AUC after training: 0.7138461538461539
User 7229 improves AUC. Keeping the model.
Training on augumented user 70591 13/50 current_auc = 0.7138461538461539
User 70591 AUC after training: 0.7138461538461539
User 70591 does not improve AUC. Reverting changes.
Training on augumented user 7092 14/50 current_auc = 0.7138461538461539
User 7092 AUC after training: 0.7130769230769232
User 7092 does not improve AUC. Reverting changes.
Training on augumented user 84730 15/50 current_auc = 0.7138461538461539
User 84730 AUC after training: 0.7138461538461539
User 84730 does not improve AUC. Reverting changes.
Training on augumented user 32335 16/50 current_auc = 0.7138461538461539
User 32335 AUC after training: 0.7130769230769232
User 32335 does not improve AUC. Reverting changes.
Training on augumented user 76221 17/50 current_auc = 0.7138461538461539
User 76221 AUC after training: 0.7130769230769232
User 76221 does not improve AUC. Reverting changes.
Training on augumented user 29801 18/50 current_auc = 0.7138461538461539
User 29801 AUC after training: 0.7138461538461539
User 29801 does not improve AUC. Reverting changes.
Training on augumented user 70410 19/50 current_auc = 0.7138461538461539
User 70410 AUC after training: 0.7130769230769232
User 70410 does not improve AUC. Reverting changes.
Training on augumented user 50697 20/50 current_auc = 0.7138461538461539
User 50697 AUC after training: 0.7130769230769232
User 50697 does not improve AUC. Reverting changes.
Training on augumented user 115757 21/50 current_auc = 0.7138461538461539
User 115757 AUC after training: 0.7130769230769232
User 115757 does not improve AUC. Reverting changes.
Training on augumented user 83657 22/50 current_auc = 0.7138461538461539
User 83657 AUC after training: 0.7130769230769232
User 83657 does not improve AUC. Reverting changes.
Training on augumented user 20224 23/50 current_auc = 0.7138461538461539
User 20224 AUC after training: 0.7130769230769232
User 20224 does not improve AUC. Reverting changes.
Training on augumented user 38802 24/50 current_auc = 0.7138461538461539
User 38802 AUC after training: 0.7123076923076923
User 38802 does not improve AUC. Reverting changes.
Training on augumented user 35076 25/50 current_auc = 0.7138461538461539
User 35076 AUC after training: 0.7138461538461539
User 35076 does not improve AUC. Reverting changes.
Training on augumented user 59329 26/50 current_auc = 0.7138461538461539
User 59329 AUC after training: 0.7138461538461539
User 59329 does not improve AUC. Reverting changes.
Training on augumented user 77877 27/50 current_auc = 0.7138461538461539
User 77877 AUC after training: 0.7130769230769232
User 77877 does not improve AUC. Reverting changes.
Training on augumented user 113927 28/50 current_auc = 0.7138461538461539
User 113927 AUC after training: 0.7123076923076923
User 113927 does not improve AUC. Reverting changes.
Training on augumented user 116927 29/50 current_auc = 0.7138461538461539
User 116927 AUC after training: 0.7138461538461539
User 116927 does not improve AUC. Reverting changes.
Training on augumented user 60364 30/50 current_auc = 0.7138461538461539
User 60364 AUC after training: 0.7138461538461539
User 60364 does not improve AUC. Reverting changes.
Training on augumented user 78602 31/50 current_auc = 0.7138461538461539
User 78602 AUC after training: 0.7142307692307692
User 78602 improves AUC. Keeping the model.
Training on augumented user 137734 32/50 current_auc = 0.7142307692307692
User 137734 AUC after training: 0.7142307692307692
User 137734 does not improve AUC. Reverting changes.
Training on augumented user 19882 33/50 current_auc = 0.7142307692307692
User 19882 AUC after training: 0.7142307692307692
User 19882 does not improve AUC. Reverting changes.
Training on augumented user 61372 34/50 current_auc = 0.7142307692307692
User 61372 AUC after training: 0.7142307692307692
User 61372 does not improve AUC. Reverting changes.
Training on augumented user 131849 35/50 current_auc = 0.7142307692307692
User 131849 AUC after training: 0.7138461538461538
User 131849 does not improve AUC. Reverting changes.
Training on augumented user 111161 36/50 current_auc = 0.7142307692307692
User 111161 AUC after training: 0.7138461538461538
User 111161 does not improve AUC. Reverting changes.
Training on augumented user 109968 37/50 current_auc = 0.7142307692307692
User 109968 AUC after training: 0.7142307692307692
User 109968 does not improve AUC. Reverting changes.
Training on augumented user 84661 38/50 current_auc = 0.7142307692307692
User 84661 AUC after training: 0.7138461538461538
User 84661 does not improve AUC. Reverting changes.
Training on augumented user 10397 39/50 current_auc = 0.7142307692307692
User 10397 AUC after training: 0.7142307692307692
User 10397 does not improve AUC. Reverting changes.
Training on augumented user 47814 40/50 current_auc = 0.7142307692307692
User 47814 AUC after training: 0.7142307692307692
User 47814 does not improve AUC. Reverting changes.
Training on augumented user 17262 41/50 current_auc = 0.7142307692307692
User 17262 AUC after training: 0.7142307692307692
User 17262 does not improve AUC. Reverting changes.
Training on augumented user 97151 42/50 current_auc = 0.7142307692307692
User 97151 AUC after training: 0.7142307692307692
User 97151 does not improve AUC. Reverting changes.
Training on augumented user 35954 43/50 current_auc = 0.7142307692307692
User 35954 AUC after training: 0.7138461538461538
User 35954 does not improve AUC. Reverting changes.
Training on augumented user 1957 44/50 current_auc = 0.7142307692307692
User 1957 AUC after training: 0.7138461538461538
User 1957 does not improve AUC. Reverting changes.
Training on augumented user 35158 45/50 current_auc = 0.7142307692307692
User 35158 AUC after training: 0.7134615384615385
User 35158 does not improve AUC. Reverting changes.
Training on augumented user 22556 46/50 current_auc = 0.7142307692307692
User 22556 AUC after training: 0.7142307692307692
User 22556 does not improve AUC. Reverting changes.
Training on augumented user 72051 47/50 current_auc = 0.7142307692307692
User 72051 AUC after training: 0.7142307692307692
User 72051 does not improve AUC. Reverting changes.
Training on augumented user 97657 48/50 current_auc = 0.7142307692307692
User 97657 AUC after training: 0.7142307692307692
User 97657 does not improve AUC. Reverting changes.
Training on augumented user 55285 49/50 current_auc = 0.7142307692307692
User 55285 AUC after training: 0.7142307692307692
User 55285 does not improve AUC. Reverting changes.
[2024-12-02 19:47:23.991678] start test user 61493 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:24.428587] start test user 61493 237/568 recall augumented users by random, augumented_users = [810, 105572, 64357, 10682, 131567, 130160, 37777, 62660, 100028, 46096, 43736, 47899, 125673, 95736, 136268, 137517, 55236, 116914, 69733, 117613, 53922, 62700, 52056, 135081, 70914, 131135, 46161, 133133, 46500, 17962, 119509, 73505, 108275, 136687, 110463, 96752, 65738, 134448, 32399, 1918, 129459, 72391, 129627, 20487, 43177, 29816, 30687, 41229, 121352, 103900]
[2024-12-02 19:47:24.442285] user = 61493 Cloud 237/568
[2024-12-02 19:47:24.470705] user = 61493 Local 237/568
[2024-12-02 19:47:24.606097] user = 61493 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:28.755895] user = 61493 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7796934865900382
Training on augumented user 810 0/50 current_auc = 0.7796934865900382
User 810 AUC after training: 0.7792145593869731
User 810 does not improve AUC. Reverting changes.
Training on augumented user 105572 1/50 current_auc = 0.7796934865900382
User 105572 AUC after training: 0.7801724137931034
User 105572 improves AUC. Keeping the model.
Training on augumented user 64357 2/50 current_auc = 0.7801724137931034
User 64357 AUC after training: 0.77985312899106
User 64357 does not improve AUC. Reverting changes.
Training on augumented user 10682 3/50 current_auc = 0.7801724137931034
User 10682 AUC after training: 0.7796934865900382
User 10682 does not improve AUC. Reverting changes.
Training on augumented user 131567 4/50 current_auc = 0.7801724137931034
User 131567 AUC after training: 0.7808109833971902
User 131567 improves AUC. Keeping the model.
Training on augumented user 130160 5/50 current_auc = 0.7808109833971902
User 130160 AUC after training: 0.7801724137931034
User 130160 does not improve AUC. Reverting changes.
Training on augumented user 37777 6/50 current_auc = 0.7808109833971902
User 37777 AUC after training: 0.7804916985951469
User 37777 does not improve AUC. Reverting changes.
Training on augumented user 62660 7/50 current_auc = 0.7808109833971902
User 62660 AUC after training: 0.7795338441890165
User 62660 does not improve AUC. Reverting changes.
Training on augumented user 100028 8/50 current_auc = 0.7808109833971902
User 100028 AUC after training: 0.780970625798212
User 100028 improves AUC. Keeping the model.
Training on augumented user 46096 9/50 current_auc = 0.780970625798212
User 46096 AUC after training: 0.780970625798212
User 46096 does not improve AUC. Reverting changes.
Training on augumented user 43736 10/50 current_auc = 0.780970625798212
User 43736 AUC after training: 0.7806513409961686
User 43736 does not improve AUC. Reverting changes.
Training on augumented user 47899 11/50 current_auc = 0.780970625798212
User 47899 AUC after training: 0.7808109833971904
User 47899 does not improve AUC. Reverting changes.
Training on augumented user 125673 12/50 current_auc = 0.780970625798212
User 125673 AUC after training: 0.7808109833971902
User 125673 does not improve AUC. Reverting changes.
Training on augumented user 95736 13/50 current_auc = 0.780970625798212
User 95736 AUC after training: 0.77985312899106
User 95736 does not improve AUC. Reverting changes.
Training on augumented user 136268 14/50 current_auc = 0.780970625798212
User 136268 AUC after training: 0.7787356321839081
User 136268 does not improve AUC. Reverting changes.
Training on augumented user 137517 15/50 current_auc = 0.780970625798212
User 137517 AUC after training: 0.7811302681992336
User 137517 improves AUC. Keeping the model.
Training on augumented user 55236 16/50 current_auc = 0.7811302681992336
User 55236 AUC after training: 0.7800127713920817
User 55236 does not improve AUC. Reverting changes.
Training on augumented user 116914 17/50 current_auc = 0.7811302681992336
User 116914 AUC after training: 0.780970625798212
User 116914 does not improve AUC. Reverting changes.
Training on augumented user 69733 18/50 current_auc = 0.7811302681992336
User 69733 AUC after training: 0.7804916985951469
User 69733 does not improve AUC. Reverting changes.
Training on augumented user 117613 19/50 current_auc = 0.7811302681992336
User 117613 AUC after training: 0.7816091954022988
User 117613 improves AUC. Keeping the model.
Training on augumented user 53922 20/50 current_auc = 0.7816091954022988
User 53922 AUC after training: 0.781449553001277
User 53922 does not improve AUC. Reverting changes.
Training on augumented user 62700 21/50 current_auc = 0.7816091954022988
User 62700 AUC after training: 0.7817688378033205
User 62700 improves AUC. Keeping the model.
Training on augumented user 52056 22/50 current_auc = 0.7817688378033205
User 52056 AUC after training: 0.7795338441890166
User 52056 does not improve AUC. Reverting changes.
Training on augumented user 135081 23/50 current_auc = 0.7817688378033205
User 135081 AUC after training: 0.7817688378033205
User 135081 does not improve AUC. Reverting changes.
Training on augumented user 70914 24/50 current_auc = 0.7817688378033205
User 70914 AUC after training: 0.7814495530012772
User 70914 does not improve AUC. Reverting changes.
Training on augumented user 131135 25/50 current_auc = 0.7817688378033205
User 131135 AUC after training: 0.7812899106002554
User 131135 does not improve AUC. Reverting changes.
Training on augumented user 46161 26/50 current_auc = 0.7817688378033205
User 46161 AUC after training: 0.7804916985951469
User 46161 does not improve AUC. Reverting changes.
Training on augumented user 133133 27/50 current_auc = 0.7817688378033205
User 133133 AUC after training: 0.7787356321839081
User 133133 does not improve AUC. Reverting changes.
Training on augumented user 46500 28/50 current_auc = 0.7817688378033205
User 46500 AUC after training: 0.782088122605364
User 46500 improves AUC. Keeping the model.
Training on augumented user 17962 29/50 current_auc = 0.782088122605364
User 17962 AUC after training: 0.7819284802043422
User 17962 does not improve AUC. Reverting changes.
Training on augumented user 119509 30/50 current_auc = 0.782088122605364
User 119509 AUC after training: 0.7817688378033205
User 119509 does not improve AUC. Reverting changes.
Training on augumented user 73505 31/50 current_auc = 0.782088122605364
User 73505 AUC after training: 0.7814495530012772
User 73505 does not improve AUC. Reverting changes.
Training on augumented user 108275 32/50 current_auc = 0.782088122605364
User 108275 AUC after training: 0.782088122605364
User 108275 does not improve AUC. Reverting changes.
Training on augumented user 136687 33/50 current_auc = 0.782088122605364
User 136687 AUC after training: 0.7825670498084292
User 136687 improves AUC. Keeping the model.
Training on augumented user 110463 34/50 current_auc = 0.7825670498084292
User 110463 AUC after training: 0.782088122605364
User 110463 does not improve AUC. Reverting changes.
Training on augumented user 96752 35/50 current_auc = 0.7825670498084292
User 96752 AUC after training: 0.7819284802043422
User 96752 does not improve AUC. Reverting changes.
Training on augumented user 65738 36/50 current_auc = 0.7825670498084292
User 65738 AUC after training: 0.7817688378033205
User 65738 does not improve AUC. Reverting changes.
Training on augumented user 134448 37/50 current_auc = 0.7825670498084292
User 134448 AUC after training: 0.782088122605364
User 134448 does not improve AUC. Reverting changes.
Training on augumented user 32399 38/50 current_auc = 0.7825670498084292
User 32399 AUC after training: 0.7827266922094509
User 32399 improves AUC. Keeping the model.
Training on augumented user 1918 39/50 current_auc = 0.7827266922094509
User 1918 AUC after training: 0.7830459770114943
User 1918 improves AUC. Keeping the model.
Training on augumented user 129459 40/50 current_auc = 0.7830459770114943
User 129459 AUC after training: 0.7825670498084292
User 129459 does not improve AUC. Reverting changes.
Training on augumented user 72391 41/50 current_auc = 0.7830459770114943
User 72391 AUC after training: 0.7822477650063857
User 72391 does not improve AUC. Reverting changes.
Training on augumented user 129627 42/50 current_auc = 0.7830459770114943
User 129627 AUC after training: 0.7830459770114943
User 129627 does not improve AUC. Reverting changes.
Training on augumented user 20487 43/50 current_auc = 0.7830459770114943
User 20487 AUC after training: 0.7828863346104725
User 20487 does not improve AUC. Reverting changes.
Training on augumented user 43177 44/50 current_auc = 0.7830459770114943
User 43177 AUC after training: 0.7833652618135376
User 43177 improves AUC. Keeping the model.
Training on augumented user 29816 45/50 current_auc = 0.7833652618135376
User 29816 AUC after training: 0.7828863346104725
User 29816 does not improve AUC. Reverting changes.
Training on augumented user 30687 46/50 current_auc = 0.7833652618135376
User 30687 AUC after training: 0.7824074074074074
User 30687 does not improve AUC. Reverting changes.
Training on augumented user 41229 47/50 current_auc = 0.7833652618135376
User 41229 AUC after training: 0.7817688378033205
User 41229 does not improve AUC. Reverting changes.
Training on augumented user 121352 48/50 current_auc = 0.7833652618135376
User 121352 AUC after training: 0.783205619412516
User 121352 does not improve AUC. Reverting changes.
Training on augumented user 103900 49/50 current_auc = 0.7833652618135376
User 103900 AUC after training: 0.7828863346104725
User 103900 does not improve AUC. Reverting changes.
[2024-12-02 19:48:03.082731] start test user 61495 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:04.030199] start test user 61495 238/568 recall augumented users by random, augumented_users = [132983, 101393, 65147, 93510, 77791, 69586, 52870, 129003, 30135, 91976, 2285, 58700, 73411, 75290, 37013, 50260, 35891, 24537, 110901, 20948, 21887, 89686, 31479, 33339, 35934, 42290, 109494, 124559, 71128, 104145, 116235, 93379, 63687, 46285, 133311, 107006, 115969, 19275, 54854, 70177, 108016, 13366, 129884, 129932, 21023, 82411, 12908, 27489, 57606, 108632]
[2024-12-02 19:48:04.075269] user = 61495 Cloud 238/568
[2024-12-02 19:48:04.145404] user = 61495 Local 238/568
[2024-12-02 19:48:04.437382] user = 61495 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:06.319744] user = 61495 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.744
Training on augumented user 132983 0/50 current_auc = 0.744
User 132983 AUC after training: 0.7434999999999999
User 132983 does not improve AUC. Reverting changes.
Training on augumented user 101393 1/50 current_auc = 0.744
User 101393 AUC after training: 0.7445
User 101393 improves AUC. Keeping the model.
Training on augumented user 65147 2/50 current_auc = 0.7445
User 65147 AUC after training: 0.7445
User 65147 does not improve AUC. Reverting changes.
Training on augumented user 93510 3/50 current_auc = 0.7445
User 93510 AUC after training: 0.744
User 93510 does not improve AUC. Reverting changes.
Training on augumented user 77791 4/50 current_auc = 0.7445
User 77791 AUC after training: 0.745
User 77791 improves AUC. Keeping the model.
Training on augumented user 69586 5/50 current_auc = 0.745
User 69586 AUC after training: 0.7454999999999999
User 69586 improves AUC. Keeping the model.
Training on augumented user 52870 6/50 current_auc = 0.7454999999999999
User 52870 AUC after training: 0.7445
User 52870 does not improve AUC. Reverting changes.
Training on augumented user 129003 7/50 current_auc = 0.7454999999999999
User 129003 AUC after training: 0.745
User 129003 does not improve AUC. Reverting changes.
Training on augumented user 30135 8/50 current_auc = 0.7454999999999999
User 30135 AUC after training: 0.7454999999999999
User 30135 does not improve AUC. Reverting changes.
Training on augumented user 91976 9/50 current_auc = 0.7454999999999999
User 91976 AUC after training: 0.7455
User 91976 improves AUC. Keeping the model.
Training on augumented user 2285 10/50 current_auc = 0.7455
User 2285 AUC after training: 0.7465
User 2285 improves AUC. Keeping the model.
Training on augumented user 58700 11/50 current_auc = 0.7465
User 58700 AUC after training: 0.748
User 58700 improves AUC. Keeping the model.
Training on augumented user 73411 12/50 current_auc = 0.748
User 73411 AUC after training: 0.7484999999999999
User 73411 improves AUC. Keeping the model.
Training on augumented user 75290 13/50 current_auc = 0.7484999999999999
User 75290 AUC after training: 0.747
User 75290 does not improve AUC. Reverting changes.
Training on augumented user 37013 14/50 current_auc = 0.7484999999999999
User 37013 AUC after training: 0.748
User 37013 does not improve AUC. Reverting changes.
Training on augumented user 50260 15/50 current_auc = 0.7484999999999999
User 50260 AUC after training: 0.7494999999999999
User 50260 improves AUC. Keeping the model.
Training on augumented user 35891 16/50 current_auc = 0.7494999999999999
User 35891 AUC after training: 0.7505000000000001
User 35891 improves AUC. Keeping the model.
Training on augumented user 24537 17/50 current_auc = 0.7505000000000001
User 24537 AUC after training: 0.7500000000000001
User 24537 does not improve AUC. Reverting changes.
Training on augumented user 110901 18/50 current_auc = 0.7505000000000001
User 110901 AUC after training: 0.749
User 110901 does not improve AUC. Reverting changes.
Training on augumented user 20948 19/50 current_auc = 0.7505000000000001
User 20948 AUC after training: 0.7520000000000001
User 20948 improves AUC. Keeping the model.
Training on augumented user 21887 20/50 current_auc = 0.7520000000000001
User 21887 AUC after training: 0.7525000000000001
User 21887 improves AUC. Keeping the model.
Training on augumented user 89686 21/50 current_auc = 0.7525000000000001
User 89686 AUC after training: 0.753
User 89686 improves AUC. Keeping the model.
Training on augumented user 31479 22/50 current_auc = 0.753
User 31479 AUC after training: 0.7525000000000001
User 31479 does not improve AUC. Reverting changes.
Training on augumented user 33339 23/50 current_auc = 0.753
User 33339 AUC after training: 0.7515
User 33339 does not improve AUC. Reverting changes.
Training on augumented user 35934 24/50 current_auc = 0.753
User 35934 AUC after training: 0.753
User 35934 does not improve AUC. Reverting changes.
Training on augumented user 42290 25/50 current_auc = 0.753
User 42290 AUC after training: 0.7565
User 42290 improves AUC. Keeping the model.
Training on augumented user 109494 26/50 current_auc = 0.7565
User 109494 AUC after training: 0.7555000000000001
User 109494 does not improve AUC. Reverting changes.
Training on augumented user 124559 27/50 current_auc = 0.7565
User 124559 AUC after training: 0.7565000000000001
User 124559 improves AUC. Keeping the model.
Training on augumented user 71128 28/50 current_auc = 0.7565000000000001
User 71128 AUC after training: 0.758
User 71128 improves AUC. Keeping the model.
Training on augumented user 104145 29/50 current_auc = 0.758
User 104145 AUC after training: 0.7575000000000001
User 104145 does not improve AUC. Reverting changes.
Training on augumented user 116235 30/50 current_auc = 0.758
User 116235 AUC after training: 0.758
User 116235 does not improve AUC. Reverting changes.
Training on augumented user 93379 31/50 current_auc = 0.758
User 93379 AUC after training: 0.758
User 93379 does not improve AUC. Reverting changes.
Training on augumented user 63687 32/50 current_auc = 0.758
User 63687 AUC after training: 0.758
User 63687 does not improve AUC. Reverting changes.
Training on augumented user 46285 33/50 current_auc = 0.758
User 46285 AUC after training: 0.757
User 46285 does not improve AUC. Reverting changes.
Training on augumented user 133311 34/50 current_auc = 0.758
User 133311 AUC after training: 0.758
User 133311 does not improve AUC. Reverting changes.
Training on augumented user 107006 35/50 current_auc = 0.758
User 107006 AUC after training: 0.756
User 107006 does not improve AUC. Reverting changes.
Training on augumented user 115969 36/50 current_auc = 0.758
User 115969 AUC after training: 0.7575000000000001
User 115969 does not improve AUC. Reverting changes.
Training on augumented user 19275 37/50 current_auc = 0.758
User 19275 AUC after training: 0.7555000000000001
User 19275 does not improve AUC. Reverting changes.
Training on augumented user 54854 38/50 current_auc = 0.758
User 54854 AUC after training: 0.7565000000000001
User 54854 does not improve AUC. Reverting changes.
Training on augumented user 70177 39/50 current_auc = 0.758
User 70177 AUC after training: 0.7589999999999999
User 70177 improves AUC. Keeping the model.
Training on augumented user 108016 40/50 current_auc = 0.7589999999999999
User 108016 AUC after training: 0.759
User 108016 improves AUC. Keeping the model.
Training on augumented user 13366 41/50 current_auc = 0.759
User 13366 AUC after training: 0.758
User 13366 does not improve AUC. Reverting changes.
Training on augumented user 129884 42/50 current_auc = 0.759
User 129884 AUC after training: 0.758
User 129884 does not improve AUC. Reverting changes.
Training on augumented user 129932 43/50 current_auc = 0.759
User 129932 AUC after training: 0.7575
User 129932 does not improve AUC. Reverting changes.
Training on augumented user 21023 44/50 current_auc = 0.759
User 21023 AUC after training: 0.756
User 21023 does not improve AUC. Reverting changes.
Training on augumented user 82411 45/50 current_auc = 0.759
User 82411 AUC after training: 0.7585000000000001
User 82411 does not improve AUC. Reverting changes.
Training on augumented user 12908 46/50 current_auc = 0.759
User 12908 AUC after training: 0.7585000000000001
User 12908 does not improve AUC. Reverting changes.
Training on augumented user 27489 47/50 current_auc = 0.759
User 27489 AUC after training: 0.7585000000000001
User 27489 does not improve AUC. Reverting changes.
Training on augumented user 57606 48/50 current_auc = 0.759
User 57606 AUC after training: 0.7585
User 57606 does not improve AUC. Reverting changes.
Training on augumented user 108632 49/50 current_auc = 0.759
User 108632 AUC after training: 0.758
User 108632 does not improve AUC. Reverting changes.
[2024-12-02 19:48:37.129014] start test user 61527 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:37.627464] start test user 61527 239/568 recall augumented users by random, augumented_users = [28181, 13824, 73061, 24812, 80515, 4251, 134333, 88836, 122268, 22111, 7320, 98550, 54156, 30763, 80980, 10373, 94405, 58569, 118591, 70421, 125692, 85507, 108322, 135869, 97738, 69155, 5367, 84085, 5132, 118193, 11720, 34543, 57689, 9503, 34251, 35704, 62623, 105831, 107241, 35656, 123196, 90042, 102659, 131401, 130785, 10274, 75503, 62174, 52673, 124243]
[2024-12-02 19:48:37.643071] user = 61527 Cloud 239/568
[2024-12-02 19:48:37.656687] user = 61527 Local 239/568
[2024-12-02 19:48:37.812931] user = 61527 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:39.249932] user = 61527 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.72265625
Training on augumented user 28181 0/50 current_auc = 0.72265625
User 28181 AUC after training: 0.72265625
User 28181 does not improve AUC. Reverting changes.
Training on augumented user 13824 1/50 current_auc = 0.72265625
User 13824 AUC after training: 0.72265625
User 13824 does not improve AUC. Reverting changes.
Training on augumented user 73061 2/50 current_auc = 0.72265625
User 73061 AUC after training: 0.72265625
User 73061 does not improve AUC. Reverting changes.
Training on augumented user 24812 3/50 current_auc = 0.72265625
User 24812 AUC after training: 0.72265625
User 24812 does not improve AUC. Reverting changes.
Training on augumented user 80515 4/50 current_auc = 0.72265625
User 80515 AUC after training: 0.7235243055555556
User 80515 improves AUC. Keeping the model.
Training on augumented user 4251 5/50 current_auc = 0.7235243055555556
User 4251 AUC after training: 0.7261284722222222
User 4251 improves AUC. Keeping the model.
Training on augumented user 134333 6/50 current_auc = 0.7261284722222222
User 134333 AUC after training: 0.72265625
User 134333 does not improve AUC. Reverting changes.
Training on augumented user 88836 7/50 current_auc = 0.7261284722222222
User 88836 AUC after training: 0.7265625
User 88836 improves AUC. Keeping the model.
Training on augumented user 122268 8/50 current_auc = 0.7265625
User 122268 AUC after training: 0.7269965277777778
User 122268 improves AUC. Keeping the model.
Training on augumented user 22111 9/50 current_auc = 0.7269965277777778
User 22111 AUC after training: 0.7269965277777778
User 22111 does not improve AUC. Reverting changes.
Training on augumented user 7320 10/50 current_auc = 0.7269965277777778
User 7320 AUC after training: 0.7252604166666667
User 7320 does not improve AUC. Reverting changes.
Training on augumented user 98550 11/50 current_auc = 0.7269965277777778
User 98550 AUC after training: 0.7252604166666666
User 98550 does not improve AUC. Reverting changes.
Training on augumented user 54156 12/50 current_auc = 0.7269965277777778
User 54156 AUC after training: 0.7269965277777778
User 54156 does not improve AUC. Reverting changes.
Training on augumented user 30763 13/50 current_auc = 0.7269965277777778
User 30763 AUC after training: 0.7278645833333334
User 30763 improves AUC. Keeping the model.
Training on augumented user 80980 14/50 current_auc = 0.7278645833333334
User 80980 AUC after training: 0.7282986111111112
User 80980 improves AUC. Keeping the model.
Training on augumented user 10373 15/50 current_auc = 0.7282986111111112
User 10373 AUC after training: 0.7265625
User 10373 does not improve AUC. Reverting changes.
Training on augumented user 94405 16/50 current_auc = 0.7282986111111112
User 94405 AUC after training: 0.7252604166666666
User 94405 does not improve AUC. Reverting changes.
Training on augumented user 58569 17/50 current_auc = 0.7282986111111112
User 58569 AUC after training: 0.7252604166666666
User 58569 does not improve AUC. Reverting changes.
Training on augumented user 118591 18/50 current_auc = 0.7282986111111112
User 118591 AUC after training: 0.7243923611111112
User 118591 does not improve AUC. Reverting changes.
Training on augumented user 70421 19/50 current_auc = 0.7282986111111112
User 70421 AUC after training: 0.7274305555555556
User 70421 does not improve AUC. Reverting changes.
Training on augumented user 125692 20/50 current_auc = 0.7282986111111112
User 125692 AUC after training: 0.7256944444444445
User 125692 does not improve AUC. Reverting changes.
Training on augumented user 85507 21/50 current_auc = 0.7282986111111112
User 85507 AUC after training: 0.7256944444444444
User 85507 does not improve AUC. Reverting changes.
Training on augumented user 108322 22/50 current_auc = 0.7282986111111112
User 108322 AUC after training: 0.7261284722222222
User 108322 does not improve AUC. Reverting changes.
Training on augumented user 135869 23/50 current_auc = 0.7282986111111112
User 135869 AUC after training: 0.7248263888888888
User 135869 does not improve AUC. Reverting changes.
Training on augumented user 97738 24/50 current_auc = 0.7282986111111112
User 97738 AUC after training: 0.7248263888888888
User 97738 does not improve AUC. Reverting changes.
Training on augumented user 69155 25/50 current_auc = 0.7282986111111112
User 69155 AUC after training: 0.7265625
User 69155 does not improve AUC. Reverting changes.
Training on augumented user 5367 26/50 current_auc = 0.7282986111111112
User 5367 AUC after training: 0.7274305555555556
User 5367 does not improve AUC. Reverting changes.
Training on augumented user 84085 27/50 current_auc = 0.7282986111111112
User 84085 AUC after training: 0.724826388888889
User 84085 does not improve AUC. Reverting changes.
Training on augumented user 5132 28/50 current_auc = 0.7282986111111112
User 5132 AUC after training: 0.724392361111111
User 5132 does not improve AUC. Reverting changes.
Training on augumented user 118193 29/50 current_auc = 0.7282986111111112
User 118193 AUC after training: 0.7282986111111112
User 118193 does not improve AUC. Reverting changes.
Training on augumented user 11720 30/50 current_auc = 0.7282986111111112
User 11720 AUC after training: 0.7256944444444444
User 11720 does not improve AUC. Reverting changes.
Training on augumented user 34543 31/50 current_auc = 0.7282986111111112
User 34543 AUC after training: 0.724826388888889
User 34543 does not improve AUC. Reverting changes.
Training on augumented user 57689 32/50 current_auc = 0.7282986111111112
User 57689 AUC after training: 0.7239583333333334
User 57689 does not improve AUC. Reverting changes.
Training on augumented user 9503 33/50 current_auc = 0.7282986111111112
User 9503 AUC after training: 0.724826388888889
User 9503 does not improve AUC. Reverting changes.
Training on augumented user 34251 34/50 current_auc = 0.7282986111111112
User 34251 AUC after training: 0.7274305555555556
User 34251 does not improve AUC. Reverting changes.
Training on augumented user 35704 35/50 current_auc = 0.7282986111111112
User 35704 AUC after training: 0.7274305555555556
User 35704 does not improve AUC. Reverting changes.
Training on augumented user 62623 36/50 current_auc = 0.7282986111111112
User 62623 AUC after training: 0.72265625
User 62623 does not improve AUC. Reverting changes.
Training on augumented user 105831 37/50 current_auc = 0.7282986111111112
User 105831 AUC after training: 0.724826388888889
User 105831 does not improve AUC. Reverting changes.
Training on augumented user 107241 38/50 current_auc = 0.7282986111111112
User 107241 AUC after training: 0.7274305555555555
User 107241 does not improve AUC. Reverting changes.
Training on augumented user 35656 39/50 current_auc = 0.7282986111111112
User 35656 AUC after training: 0.7265625000000001
User 35656 does not improve AUC. Reverting changes.
Training on augumented user 123196 40/50 current_auc = 0.7282986111111112
User 123196 AUC after training: 0.7265625
User 123196 does not improve AUC. Reverting changes.
Training on augumented user 90042 41/50 current_auc = 0.7282986111111112
User 90042 AUC after training: 0.728732638888889
User 90042 improves AUC. Keeping the model.
Training on augumented user 102659 42/50 current_auc = 0.728732638888889
User 102659 AUC after training: 0.724392361111111
User 102659 does not improve AUC. Reverting changes.
Training on augumented user 131401 43/50 current_auc = 0.728732638888889
User 131401 AUC after training: 0.7278645833333334
User 131401 does not improve AUC. Reverting changes.
Training on augumented user 130785 44/50 current_auc = 0.728732638888889
User 130785 AUC after training: 0.728732638888889
User 130785 does not improve AUC. Reverting changes.
Training on augumented user 10274 45/50 current_auc = 0.728732638888889
User 10274 AUC after training: 0.7296006944444444
User 10274 improves AUC. Keeping the model.
Training on augumented user 75503 46/50 current_auc = 0.7296006944444444
User 75503 AUC after training: 0.728732638888889
User 75503 does not improve AUC. Reverting changes.
Training on augumented user 62174 47/50 current_auc = 0.7296006944444444
User 62174 AUC after training: 0.73046875
User 62174 improves AUC. Keeping the model.
Training on augumented user 52673 48/50 current_auc = 0.73046875
User 52673 AUC after training: 0.7296006944444444
User 52673 does not improve AUC. Reverting changes.
Training on augumented user 124243 49/50 current_auc = 0.73046875
User 124243 AUC after training: 0.7296006944444444
User 124243 does not improve AUC. Reverting changes.
[2024-12-02 19:49:06.848606] start test user 61552 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:07.443662] start test user 61552 240/568 recall augumented users by random, augumented_users = [6944, 79763, 105218, 19554, 20827, 117257, 81520, 8120, 62979, 60932, 82959, 55238, 115909, 3809, 84406, 97580, 116599, 18317, 14848, 118421, 57819, 93720, 59687, 39229, 29809, 120854, 85120, 31517, 114870, 126963, 94470, 116291, 125552, 4620, 111630, 48110, 76582, 27031, 30650, 5950, 107299, 89632, 80414, 85915, 19483, 19536, 33151, 23839, 72372, 41965]
[2024-12-02 19:49:07.459723] user = 61552 Cloud 240/568
[2024-12-02 19:49:07.469821] user = 61552 Local 240/568
[2024-12-02 19:49:07.719982] user = 61552 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:09.907418] user = 61552 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6746031746031746
Training on augumented user 6944 0/50 current_auc = 0.6746031746031746
User 6944 AUC after training: 0.6746031746031746
User 6944 does not improve AUC. Reverting changes.
Training on augumented user 79763 1/50 current_auc = 0.6746031746031746
User 79763 AUC after training: 0.6825396825396826
User 79763 improves AUC. Keeping the model.
Training on augumented user 105218 2/50 current_auc = 0.6825396825396826
User 105218 AUC after training: 0.6746031746031746
User 105218 does not improve AUC. Reverting changes.
Training on augumented user 19554 3/50 current_auc = 0.6825396825396826
User 19554 AUC after training: 0.6825396825396826
User 19554 does not improve AUC. Reverting changes.
Training on augumented user 20827 4/50 current_auc = 0.6825396825396826
User 20827 AUC after training: 0.6825396825396826
User 20827 does not improve AUC. Reverting changes.
Training on augumented user 117257 5/50 current_auc = 0.6825396825396826
User 117257 AUC after training: 0.6825396825396826
User 117257 does not improve AUC. Reverting changes.
Training on augumented user 81520 6/50 current_auc = 0.6825396825396826
User 81520 AUC after training: 0.6746031746031746
User 81520 does not improve AUC. Reverting changes.
Training on augumented user 8120 7/50 current_auc = 0.6825396825396826
User 8120 AUC after training: 0.6746031746031746
User 8120 does not improve AUC. Reverting changes.
Training on augumented user 62979 8/50 current_auc = 0.6825396825396826
User 62979 AUC after training: 0.6825396825396826
User 62979 does not improve AUC. Reverting changes.
Training on augumented user 60932 9/50 current_auc = 0.6825396825396826
User 60932 AUC after training: 0.6746031746031746
User 60932 does not improve AUC. Reverting changes.
Training on augumented user 82959 10/50 current_auc = 0.6825396825396826
User 82959 AUC after training: 0.6746031746031746
User 82959 does not improve AUC. Reverting changes.
Training on augumented user 55238 11/50 current_auc = 0.6825396825396826
User 55238 AUC after training: 0.6825396825396826
User 55238 does not improve AUC. Reverting changes.
Training on augumented user 115909 12/50 current_auc = 0.6825396825396826
User 115909 AUC after training: 0.6746031746031746
User 115909 does not improve AUC. Reverting changes.
Training on augumented user 3809 13/50 current_auc = 0.6825396825396826
User 3809 AUC after training: 0.6825396825396826
User 3809 does not improve AUC. Reverting changes.
Training on augumented user 84406 14/50 current_auc = 0.6825396825396826
User 84406 AUC after training: 0.6746031746031746
User 84406 does not improve AUC. Reverting changes.
Training on augumented user 97580 15/50 current_auc = 0.6825396825396826
User 97580 AUC after training: 0.6825396825396826
User 97580 does not improve AUC. Reverting changes.
Training on augumented user 116599 16/50 current_auc = 0.6825396825396826
User 116599 AUC after training: 0.6746031746031746
User 116599 does not improve AUC. Reverting changes.
Training on augumented user 18317 17/50 current_auc = 0.6825396825396826
User 18317 AUC after training: 0.6825396825396826
User 18317 does not improve AUC. Reverting changes.
Training on augumented user 14848 18/50 current_auc = 0.6825396825396826
User 14848 AUC after training: 0.6666666666666667
User 14848 does not improve AUC. Reverting changes.
Training on augumented user 118421 19/50 current_auc = 0.6825396825396826
User 118421 AUC after training: 0.6746031746031746
User 118421 does not improve AUC. Reverting changes.
Training on augumented user 57819 20/50 current_auc = 0.6825396825396826
User 57819 AUC after training: 0.6825396825396826
User 57819 does not improve AUC. Reverting changes.
Training on augumented user 93720 21/50 current_auc = 0.6825396825396826
User 93720 AUC after training: 0.6825396825396826
User 93720 does not improve AUC. Reverting changes.
Training on augumented user 59687 22/50 current_auc = 0.6825396825396826
User 59687 AUC after training: 0.6746031746031746
User 59687 does not improve AUC. Reverting changes.
Training on augumented user 39229 23/50 current_auc = 0.6825396825396826
User 39229 AUC after training: 0.6746031746031746
User 39229 does not improve AUC. Reverting changes.
Training on augumented user 29809 24/50 current_auc = 0.6825396825396826
User 29809 AUC after training: 0.6825396825396826
User 29809 does not improve AUC. Reverting changes.
Training on augumented user 120854 25/50 current_auc = 0.6825396825396826
User 120854 AUC after training: 0.6746031746031746
User 120854 does not improve AUC. Reverting changes.
Training on augumented user 85120 26/50 current_auc = 0.6825396825396826
User 85120 AUC after training: 0.6746031746031746
User 85120 does not improve AUC. Reverting changes.
Training on augumented user 31517 27/50 current_auc = 0.6825396825396826
User 31517 AUC after training: 0.6825396825396826
User 31517 does not improve AUC. Reverting changes.
Training on augumented user 114870 28/50 current_auc = 0.6825396825396826
User 114870 AUC after training: 0.6746031746031746
User 114870 does not improve AUC. Reverting changes.
Training on augumented user 126963 29/50 current_auc = 0.6825396825396826
User 126963 AUC after training: 0.6825396825396826
User 126963 does not improve AUC. Reverting changes.
Training on augumented user 94470 30/50 current_auc = 0.6825396825396826
User 94470 AUC after training: 0.6746031746031746
User 94470 does not improve AUC. Reverting changes.
Training on augumented user 116291 31/50 current_auc = 0.6825396825396826
User 116291 AUC after training: 0.6825396825396826
User 116291 does not improve AUC. Reverting changes.
Training on augumented user 125552 32/50 current_auc = 0.6825396825396826
User 125552 AUC after training: 0.6904761904761905
User 125552 improves AUC. Keeping the model.
Training on augumented user 4620 33/50 current_auc = 0.6904761904761905
User 4620 AUC after training: 0.6904761904761905
User 4620 does not improve AUC. Reverting changes.
Training on augumented user 111630 34/50 current_auc = 0.6904761904761905
User 111630 AUC after training: 0.6825396825396826
User 111630 does not improve AUC. Reverting changes.
Training on augumented user 48110 35/50 current_auc = 0.6904761904761905
User 48110 AUC after training: 0.6825396825396826
User 48110 does not improve AUC. Reverting changes.
Training on augumented user 76582 36/50 current_auc = 0.6904761904761905
User 76582 AUC after training: 0.6825396825396826
User 76582 does not improve AUC. Reverting changes.
Training on augumented user 27031 37/50 current_auc = 0.6904761904761905
User 27031 AUC after training: 0.6904761904761905
User 27031 does not improve AUC. Reverting changes.
Training on augumented user 30650 38/50 current_auc = 0.6904761904761905
User 30650 AUC after training: 0.6825396825396826
User 30650 does not improve AUC. Reverting changes.
Training on augumented user 5950 39/50 current_auc = 0.6904761904761905
User 5950 AUC after training: 0.6825396825396826
User 5950 does not improve AUC. Reverting changes.
Training on augumented user 107299 40/50 current_auc = 0.6904761904761905
User 107299 AUC after training: 0.6904761904761905
User 107299 does not improve AUC. Reverting changes.
Training on augumented user 89632 41/50 current_auc = 0.6904761904761905
User 89632 AUC after training: 0.6746031746031746
User 89632 does not improve AUC. Reverting changes.
Training on augumented user 80414 42/50 current_auc = 0.6904761904761905
User 80414 AUC after training: 0.6825396825396826
User 80414 does not improve AUC. Reverting changes.
Training on augumented user 85915 43/50 current_auc = 0.6904761904761905
User 85915 AUC after training: 0.6825396825396826
User 85915 does not improve AUC. Reverting changes.
Training on augumented user 19483 44/50 current_auc = 0.6904761904761905
User 19483 AUC after training: 0.6746031746031746
User 19483 does not improve AUC. Reverting changes.
Training on augumented user 19536 45/50 current_auc = 0.6904761904761905
User 19536 AUC after training: 0.6825396825396826
User 19536 does not improve AUC. Reverting changes.
Training on augumented user 33151 46/50 current_auc = 0.6904761904761905
User 33151 AUC after training: 0.6825396825396826
User 33151 does not improve AUC. Reverting changes.
Training on augumented user 23839 47/50 current_auc = 0.6904761904761905
User 23839 AUC after training: 0.6904761904761905
User 23839 does not improve AUC. Reverting changes.
Training on augumented user 72372 48/50 current_auc = 0.6904761904761905
User 72372 AUC after training: 0.6904761904761905
User 72372 does not improve AUC. Reverting changes.
Training on augumented user 41965 49/50 current_auc = 0.6904761904761905
User 41965 AUC after training: 0.6825396825396826
User 41965 does not improve AUC. Reverting changes.
[2024-12-02 19:49:39.468000] start test user 61563 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:40.233680] start test user 61563 241/568 recall augumented users by random, augumented_users = [2334, 105457, 19880, 128318, 119977, 134215, 115308, 123067, 61160, 80663, 96187, 56772, 17991, 24407, 18748, 35154, 13286, 2206, 57329, 34875, 56549, 47524, 26719, 93852, 26258, 115817, 50334, 113253, 37834, 16307, 81685, 39431, 95100, 119555, 104505, 44843, 88312, 45863, 38066, 64420, 65845, 15019, 50426, 133542, 16991, 32640, 124590, 43383, 33645, 97864]
[2024-12-02 19:49:40.249058] user = 61563 Cloud 241/568
[2024-12-02 19:49:40.269624] user = 61563 Local 241/568
[2024-12-02 19:49:40.405645] user = 61563 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:42.370115] user = 61563 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6554895302773062
Training on augumented user 2334 0/50 current_auc = 0.6554895302773062
User 2334 AUC after training: 0.6556310130164119
User 2334 improves AUC. Keeping the model.
Training on augumented user 105457 1/50 current_auc = 0.6556310130164119
User 105457 AUC after training: 0.6567628749292586
User 105457 improves AUC. Keeping the model.
Training on augumented user 19880 2/50 current_auc = 0.6567628749292586
User 19880 AUC after training: 0.6569043576683645
User 19880 improves AUC. Keeping the model.
Training on augumented user 128318 3/50 current_auc = 0.6569043576683645
User 128318 AUC after training: 0.6567628749292587
User 128318 does not improve AUC. Reverting changes.
Training on augumented user 119977 4/50 current_auc = 0.6569043576683645
User 119977 AUC after training: 0.6550650820599887
User 119977 does not improve AUC. Reverting changes.
Training on augumented user 134215 5/50 current_auc = 0.6569043576683645
User 134215 AUC after training: 0.6525183927560839
User 134215 does not improve AUC. Reverting changes.
Training on augumented user 115308 6/50 current_auc = 0.6569043576683645
User 115308 AUC after training: 0.6566213921901528
User 115308 does not improve AUC. Reverting changes.
Training on augumented user 123067 7/50 current_auc = 0.6569043576683645
User 123067 AUC after training: 0.6553480475382004
User 123067 does not improve AUC. Reverting changes.
Training on augumented user 61160 8/50 current_auc = 0.6569043576683645
User 61160 AUC after training: 0.6560554612337296
User 61160 does not improve AUC. Reverting changes.
Training on augumented user 80663 9/50 current_auc = 0.6569043576683645
User 80663 AUC after training: 0.6567628749292587
User 80663 does not improve AUC. Reverting changes.
Training on augumented user 96187 10/50 current_auc = 0.6569043576683645
User 96187 AUC after training: 0.6561969439728353
User 96187 does not improve AUC. Reverting changes.
Training on augumented user 56772 11/50 current_auc = 0.6569043576683645
User 56772 AUC after training: 0.6554895302773064
User 56772 does not improve AUC. Reverting changes.
Training on augumented user 17991 12/50 current_auc = 0.6569043576683645
User 17991 AUC after training: 0.6567628749292588
User 17991 does not improve AUC. Reverting changes.
Training on augumented user 24407 13/50 current_auc = 0.6569043576683645
User 24407 AUC after training: 0.6563384267119412
User 24407 does not improve AUC. Reverting changes.
Training on augumented user 18748 14/50 current_auc = 0.6569043576683645
User 18748 AUC after training: 0.6567628749292586
User 18748 does not improve AUC. Reverting changes.
Training on augumented user 35154 15/50 current_auc = 0.6569043576683645
User 35154 AUC after training: 0.6561969439728353
User 35154 does not improve AUC. Reverting changes.
Training on augumented user 13286 16/50 current_auc = 0.6569043576683645
User 13286 AUC after training: 0.6563384267119412
User 13286 does not improve AUC. Reverting changes.
Training on augumented user 2206 17/50 current_auc = 0.6569043576683645
User 2206 AUC after training: 0.6561969439728353
User 2206 does not improve AUC. Reverting changes.
Training on augumented user 57329 18/50 current_auc = 0.6569043576683645
User 57329 AUC after training: 0.6539332201471421
User 57329 does not improve AUC. Reverting changes.
Training on augumented user 34875 19/50 current_auc = 0.6569043576683645
User 34875 AUC after training: 0.655631013016412
User 34875 does not improve AUC. Reverting changes.
Training on augumented user 56549 20/50 current_auc = 0.6569043576683645
User 56549 AUC after training: 0.657328805885682
User 56549 improves AUC. Keeping the model.
Training on augumented user 47524 21/50 current_auc = 0.657328805885682
User 47524 AUC after training: 0.6577532541029995
User 47524 improves AUC. Keeping the model.
Training on augumented user 26719 22/50 current_auc = 0.6577532541029995
User 26719 AUC after training: 0.6577532541029995
User 26719 does not improve AUC. Reverting changes.
Training on augumented user 93852 23/50 current_auc = 0.6577532541029995
User 93852 AUC after training: 0.6574702886247877
User 93852 does not improve AUC. Reverting changes.
Training on augumented user 26258 24/50 current_auc = 0.6577532541029995
User 26258 AUC after training: 0.6576117713638937
User 26258 does not improve AUC. Reverting changes.
Training on augumented user 115817 25/50 current_auc = 0.6577532541029995
User 115817 AUC after training: 0.6576117713638937
User 115817 does not improve AUC. Reverting changes.
Training on augumented user 50334 26/50 current_auc = 0.6577532541029995
User 50334 AUC after training: 0.6564799094510471
User 50334 does not improve AUC. Reverting changes.
Training on augumented user 113253 27/50 current_auc = 0.6577532541029995
User 113253 AUC after training: 0.6574702886247877
User 113253 does not improve AUC. Reverting changes.
Training on augumented user 37834 28/50 current_auc = 0.6577532541029995
User 37834 AUC after training: 0.6570458404074703
User 37834 does not improve AUC. Reverting changes.
Training on augumented user 16307 29/50 current_auc = 0.6577532541029995
User 16307 AUC after training: 0.6578947368421053
User 16307 improves AUC. Keeping the model.
Training on augumented user 81685 30/50 current_auc = 0.6578947368421053
User 81685 AUC after training: 0.6577532541029995
User 81685 does not improve AUC. Reverting changes.
Training on augumented user 39431 31/50 current_auc = 0.6578947368421053
User 39431 AUC after training: 0.6569043576683644
User 39431 does not improve AUC. Reverting changes.
Training on augumented user 95100 32/50 current_auc = 0.6578947368421053
User 95100 AUC after training: 0.657328805885682
User 95100 does not improve AUC. Reverting changes.
Training on augumented user 119555 33/50 current_auc = 0.6578947368421053
User 119555 AUC after training: 0.6580362195812112
User 119555 improves AUC. Keeping the model.
Training on augumented user 104505 34/50 current_auc = 0.6580362195812112
User 104505 AUC after training: 0.6577532541029995
User 104505 does not improve AUC. Reverting changes.
Training on augumented user 44843 35/50 current_auc = 0.6580362195812112
User 44843 AUC after training: 0.6588851160158461
User 44843 improves AUC. Keeping the model.
Training on augumented user 88312 36/50 current_auc = 0.6588851160158461
User 88312 AUC after training: 0.6571873231465762
User 88312 does not improve AUC. Reverting changes.
Training on augumented user 45863 37/50 current_auc = 0.6588851160158461
User 45863 AUC after training: 0.6583191850594229
User 45863 does not improve AUC. Reverting changes.
Training on augumented user 38066 38/50 current_auc = 0.6588851160158461
User 38066 AUC after training: 0.6584606677985286
User 38066 does not improve AUC. Reverting changes.
Training on augumented user 64420 39/50 current_auc = 0.6588851160158461
User 64420 AUC after training: 0.6578947368421053
User 64420 does not improve AUC. Reverting changes.
Training on augumented user 65845 40/50 current_auc = 0.6588851160158461
User 65845 AUC after training: 0.6584606677985286
User 65845 does not improve AUC. Reverting changes.
Training on augumented user 15019 41/50 current_auc = 0.6588851160158461
User 15019 AUC after training: 0.6586021505376344
User 15019 does not improve AUC. Reverting changes.
Training on augumented user 50426 42/50 current_auc = 0.6588851160158461
User 50426 AUC after training: 0.6586021505376344
User 50426 does not improve AUC. Reverting changes.
Training on augumented user 133542 43/50 current_auc = 0.6588851160158461
User 133542 AUC after training: 0.6586021505376344
User 133542 does not improve AUC. Reverting changes.
Training on augumented user 16991 44/50 current_auc = 0.6588851160158461
User 16991 AUC after training: 0.6587436332767402
User 16991 does not improve AUC. Reverting changes.
Training on augumented user 32640 45/50 current_auc = 0.6588851160158461
User 32640 AUC after training: 0.6588851160158461
User 32640 does not improve AUC. Reverting changes.
Training on augumented user 124590 46/50 current_auc = 0.6588851160158461
User 124590 AUC after training: 0.6587436332767402
User 124590 does not improve AUC. Reverting changes.
Training on augumented user 43383 47/50 current_auc = 0.6588851160158461
User 43383 AUC after training: 0.6570458404074703
User 43383 does not improve AUC. Reverting changes.
Training on augumented user 33645 48/50 current_auc = 0.6588851160158461
User 33645 AUC after training: 0.6588851160158461
User 33645 does not improve AUC. Reverting changes.
Training on augumented user 97864 49/50 current_auc = 0.6588851160158461
User 97864 AUC after training: 0.6584606677985286
User 97864 does not improve AUC. Reverting changes.
[2024-12-02 19:50:14.936479] start test user 61589 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:15.377690] start test user 61589 242/568 recall augumented users by random, augumented_users = [117222, 10269, 106354, 40579, 14812, 102852, 61181, 111074, 111394, 61818, 21314, 15533, 51096, 106301, 7128, 113687, 91082, 133730, 73806, 69250, 29532, 45913, 103392, 31685, 70151, 133019, 119337, 59426, 113237, 65633, 97748, 21147, 118065, 69948, 77953, 97141, 97729, 128587, 7668, 128784, 50521, 37049, 109403, 54342, 51948, 39190, 125205, 38054, 88648, 135181]
[2024-12-02 19:50:15.393341] user = 61589 Cloud 242/568
[2024-12-02 19:50:15.404231] user = 61589 Local 242/568
[2024-12-02 19:50:15.541454] user = 61589 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:17.919071] user = 61589 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5161290322580645
Training on augumented user 117222 0/50 current_auc = 0.5161290322580645
User 117222 AUC after training: 0.5161290322580645
User 117222 does not improve AUC. Reverting changes.
Training on augumented user 10269 1/50 current_auc = 0.5161290322580645
User 10269 AUC after training: 0.5241935483870968
User 10269 improves AUC. Keeping the model.
Training on augumented user 106354 2/50 current_auc = 0.5241935483870968
User 106354 AUC after training: 0.5161290322580645
User 106354 does not improve AUC. Reverting changes.
Training on augumented user 40579 3/50 current_auc = 0.5241935483870968
User 40579 AUC after training: 0.532258064516129
User 40579 improves AUC. Keeping the model.
Training on augumented user 14812 4/50 current_auc = 0.532258064516129
User 14812 AUC after training: 0.5241935483870968
User 14812 does not improve AUC. Reverting changes.
Training on augumented user 102852 5/50 current_auc = 0.532258064516129
User 102852 AUC after training: 0.5241935483870968
User 102852 does not improve AUC. Reverting changes.
Training on augumented user 61181 6/50 current_auc = 0.532258064516129
User 61181 AUC after training: 0.532258064516129
User 61181 does not improve AUC. Reverting changes.
Training on augumented user 111074 7/50 current_auc = 0.532258064516129
User 111074 AUC after training: 0.532258064516129
User 111074 does not improve AUC. Reverting changes.
Training on augumented user 111394 8/50 current_auc = 0.532258064516129
User 111394 AUC after training: 0.532258064516129
User 111394 does not improve AUC. Reverting changes.
Training on augumented user 61818 9/50 current_auc = 0.532258064516129
User 61818 AUC after training: 0.532258064516129
User 61818 does not improve AUC. Reverting changes.
Training on augumented user 21314 10/50 current_auc = 0.532258064516129
User 21314 AUC after training: 0.532258064516129
User 21314 does not improve AUC. Reverting changes.
Training on augumented user 15533 11/50 current_auc = 0.532258064516129
User 15533 AUC after training: 0.532258064516129
User 15533 does not improve AUC. Reverting changes.
Training on augumented user 51096 12/50 current_auc = 0.532258064516129
User 51096 AUC after training: 0.532258064516129
User 51096 does not improve AUC. Reverting changes.
Training on augumented user 106301 13/50 current_auc = 0.532258064516129
User 106301 AUC after training: 0.532258064516129
User 106301 does not improve AUC. Reverting changes.
Training on augumented user 7128 14/50 current_auc = 0.532258064516129
User 7128 AUC after training: 0.5241935483870968
User 7128 does not improve AUC. Reverting changes.
Training on augumented user 113687 15/50 current_auc = 0.532258064516129
User 113687 AUC after training: 0.532258064516129
User 113687 does not improve AUC. Reverting changes.
Training on augumented user 91082 16/50 current_auc = 0.532258064516129
User 91082 AUC after training: 0.5241935483870968
User 91082 does not improve AUC. Reverting changes.
Training on augumented user 133730 17/50 current_auc = 0.532258064516129
User 133730 AUC after training: 0.532258064516129
User 133730 does not improve AUC. Reverting changes.
Training on augumented user 73806 18/50 current_auc = 0.532258064516129
User 73806 AUC after training: 0.532258064516129
User 73806 does not improve AUC. Reverting changes.
Training on augumented user 69250 19/50 current_auc = 0.532258064516129
User 69250 AUC after training: 0.5241935483870968
User 69250 does not improve AUC. Reverting changes.
Training on augumented user 29532 20/50 current_auc = 0.532258064516129
User 29532 AUC after training: 0.532258064516129
User 29532 does not improve AUC. Reverting changes.
Training on augumented user 45913 21/50 current_auc = 0.532258064516129
User 45913 AUC after training: 0.5241935483870968
User 45913 does not improve AUC. Reverting changes.
Training on augumented user 103392 22/50 current_auc = 0.532258064516129
User 103392 AUC after training: 0.5241935483870968
User 103392 does not improve AUC. Reverting changes.
Training on augumented user 31685 23/50 current_auc = 0.532258064516129
User 31685 AUC after training: 0.5080645161290323
User 31685 does not improve AUC. Reverting changes.
Training on augumented user 70151 24/50 current_auc = 0.532258064516129
User 70151 AUC after training: 0.532258064516129
User 70151 does not improve AUC. Reverting changes.
Training on augumented user 133019 25/50 current_auc = 0.532258064516129
User 133019 AUC after training: 0.532258064516129
User 133019 does not improve AUC. Reverting changes.
Training on augumented user 119337 26/50 current_auc = 0.532258064516129
User 119337 AUC after training: 0.532258064516129
User 119337 does not improve AUC. Reverting changes.
Training on augumented user 59426 27/50 current_auc = 0.532258064516129
User 59426 AUC after training: 0.5080645161290323
User 59426 does not improve AUC. Reverting changes.
Training on augumented user 113237 28/50 current_auc = 0.532258064516129
User 113237 AUC after training: 0.532258064516129
User 113237 does not improve AUC. Reverting changes.
Training on augumented user 65633 29/50 current_auc = 0.532258064516129
User 65633 AUC after training: 0.5241935483870968
User 65633 does not improve AUC. Reverting changes.
Training on augumented user 97748 30/50 current_auc = 0.532258064516129
User 97748 AUC after training: 0.5241935483870968
User 97748 does not improve AUC. Reverting changes.
Training on augumented user 21147 31/50 current_auc = 0.532258064516129
User 21147 AUC after training: 0.5241935483870968
User 21147 does not improve AUC. Reverting changes.
Training on augumented user 118065 32/50 current_auc = 0.532258064516129
User 118065 AUC after training: 0.532258064516129
User 118065 does not improve AUC. Reverting changes.
Training on augumented user 69948 33/50 current_auc = 0.532258064516129
User 69948 AUC after training: 0.532258064516129
User 69948 does not improve AUC. Reverting changes.
Training on augumented user 77953 34/50 current_auc = 0.532258064516129
User 77953 AUC after training: 0.532258064516129
User 77953 does not improve AUC. Reverting changes.
Training on augumented user 97141 35/50 current_auc = 0.532258064516129
User 97141 AUC after training: 0.5
User 97141 does not improve AUC. Reverting changes.
Training on augumented user 97729 36/50 current_auc = 0.532258064516129
User 97729 AUC after training: 0.5161290322580645
User 97729 does not improve AUC. Reverting changes.
Training on augumented user 128587 37/50 current_auc = 0.532258064516129
User 128587 AUC after training: 0.532258064516129
User 128587 does not improve AUC. Reverting changes.
Training on augumented user 7668 38/50 current_auc = 0.532258064516129
User 7668 AUC after training: 0.532258064516129
User 7668 does not improve AUC. Reverting changes.
Training on augumented user 128784 39/50 current_auc = 0.532258064516129
User 128784 AUC after training: 0.5241935483870968
User 128784 does not improve AUC. Reverting changes.
Training on augumented user 50521 40/50 current_auc = 0.532258064516129
User 50521 AUC after training: 0.5241935483870968
User 50521 does not improve AUC. Reverting changes.
Training on augumented user 37049 41/50 current_auc = 0.532258064516129
User 37049 AUC after training: 0.532258064516129
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 109403 42/50 current_auc = 0.532258064516129
User 109403 AUC after training: 0.532258064516129
User 109403 does not improve AUC. Reverting changes.
Training on augumented user 54342 43/50 current_auc = 0.532258064516129
User 54342 AUC after training: 0.532258064516129
User 54342 does not improve AUC. Reverting changes.
Training on augumented user 51948 44/50 current_auc = 0.532258064516129
User 51948 AUC after training: 0.532258064516129
User 51948 does not improve AUC. Reverting changes.
Training on augumented user 39190 45/50 current_auc = 0.532258064516129
User 39190 AUC after training: 0.532258064516129
User 39190 does not improve AUC. Reverting changes.
Training on augumented user 125205 46/50 current_auc = 0.532258064516129
User 125205 AUC after training: 0.532258064516129
User 125205 does not improve AUC. Reverting changes.
Training on augumented user 38054 47/50 current_auc = 0.532258064516129
User 38054 AUC after training: 0.5161290322580645
User 38054 does not improve AUC. Reverting changes.
Training on augumented user 88648 48/50 current_auc = 0.532258064516129
User 88648 AUC after training: 0.532258064516129
User 88648 does not improve AUC. Reverting changes.
Training on augumented user 135181 49/50 current_auc = 0.532258064516129
User 135181 AUC after training: 0.5161290322580645
User 135181 does not improve AUC. Reverting changes.
[2024-12-02 19:50:44.290837] start test user 61603 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:44.842275] start test user 61603 243/568 recall augumented users by random, augumented_users = [134576, 103886, 62990, 3325, 94026, 32123, 22143, 76346, 92496, 44837, 85712, 49983, 23999, 15560, 4015, 99852, 33460, 77418, 12492, 49891, 58716, 20754, 133373, 24505, 122779, 100380, 19272, 67052, 126142, 68038, 107501, 125730, 116415, 2995, 61816, 61680, 110033, 74918, 3350, 87929, 32554, 32217, 20336, 129548, 39595, 92537, 37993, 30427, 40132, 90954]
[2024-12-02 19:50:44.857719] user = 61603 Cloud 243/568
[2024-12-02 19:50:44.878656] user = 61603 Local 243/568
[2024-12-02 19:50:44.990876] user = 61603 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:46.422372] user = 61603 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7326388888888888
Training on augumented user 134576 0/50 current_auc = 0.7326388888888888
User 134576 AUC after training: 0.7305555555555555
User 134576 does not improve AUC. Reverting changes.
Training on augumented user 103886 1/50 current_auc = 0.7326388888888888
User 103886 AUC after training: 0.7295138888888889
User 103886 does not improve AUC. Reverting changes.
Training on augumented user 62990 2/50 current_auc = 0.7326388888888888
User 62990 AUC after training: 0.7288194444444445
User 62990 does not improve AUC. Reverting changes.
Training on augumented user 3325 3/50 current_auc = 0.7326388888888888
User 3325 AUC after training: 0.7333333333333334
User 3325 improves AUC. Keeping the model.
Training on augumented user 94026 4/50 current_auc = 0.7333333333333334
User 94026 AUC after training: 0.728125
User 94026 does not improve AUC. Reverting changes.
Training on augumented user 32123 5/50 current_auc = 0.7333333333333334
User 32123 AUC after training: 0.7347222222222223
User 32123 improves AUC. Keeping the model.
Training on augumented user 22143 6/50 current_auc = 0.7347222222222223
User 22143 AUC after training: 0.7368055555555555
User 22143 improves AUC. Keeping the model.
Training on augumented user 76346 7/50 current_auc = 0.7368055555555555
User 76346 AUC after training: 0.7354166666666667
User 76346 does not improve AUC. Reverting changes.
Training on augumented user 92496 8/50 current_auc = 0.7368055555555555
User 92496 AUC after training: 0.7361111111111112
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 44837 9/50 current_auc = 0.7368055555555555
User 44837 AUC after training: 0.7347222222222223
User 44837 does not improve AUC. Reverting changes.
Training on augumented user 85712 10/50 current_auc = 0.7368055555555555
User 85712 AUC after training: 0.7347222222222223
User 85712 does not improve AUC. Reverting changes.
Training on augumented user 49983 11/50 current_auc = 0.7368055555555555
User 49983 AUC after training: 0.7361111111111112
User 49983 does not improve AUC. Reverting changes.
Training on augumented user 23999 12/50 current_auc = 0.7368055555555555
User 23999 AUC after training: 0.7309027777777777
User 23999 does not improve AUC. Reverting changes.
Training on augumented user 15560 13/50 current_auc = 0.7368055555555555
User 15560 AUC after training: 0.7354166666666666
User 15560 does not improve AUC. Reverting changes.
Training on augumented user 4015 14/50 current_auc = 0.7368055555555555
User 4015 AUC after training: 0.7361111111111112
User 4015 does not improve AUC. Reverting changes.
Training on augumented user 99852 15/50 current_auc = 0.7368055555555555
User 99852 AUC after training: 0.7354166666666666
User 99852 does not improve AUC. Reverting changes.
Training on augumented user 33460 16/50 current_auc = 0.7368055555555555
User 33460 AUC after training: 0.7340277777777778
User 33460 does not improve AUC. Reverting changes.
Training on augumented user 77418 17/50 current_auc = 0.7368055555555555
User 77418 AUC after training: 0.7340277777777778
User 77418 does not improve AUC. Reverting changes.
Training on augumented user 12492 18/50 current_auc = 0.7368055555555555
User 12492 AUC after training: 0.7347222222222223
User 12492 does not improve AUC. Reverting changes.
Training on augumented user 49891 19/50 current_auc = 0.7368055555555555
User 49891 AUC after training: 0.7354166666666666
User 49891 does not improve AUC. Reverting changes.
Training on augumented user 58716 20/50 current_auc = 0.7368055555555555
User 58716 AUC after training: 0.7347222222222223
User 58716 does not improve AUC. Reverting changes.
Training on augumented user 20754 21/50 current_auc = 0.7368055555555555
User 20754 AUC after training: 0.7347222222222223
User 20754 does not improve AUC. Reverting changes.
Training on augumented user 133373 22/50 current_auc = 0.7368055555555555
User 133373 AUC after training: 0.7354166666666666
User 133373 does not improve AUC. Reverting changes.
Training on augumented user 24505 23/50 current_auc = 0.7368055555555555
User 24505 AUC after training: 0.7347222222222223
User 24505 does not improve AUC. Reverting changes.
Training on augumented user 122779 24/50 current_auc = 0.7368055555555555
User 122779 AUC after training: 0.7340277777777778
User 122779 does not improve AUC. Reverting changes.
Training on augumented user 100380 25/50 current_auc = 0.7368055555555555
User 100380 AUC after training: 0.7347222222222223
User 100380 does not improve AUC. Reverting changes.
Training on augumented user 19272 26/50 current_auc = 0.7368055555555555
User 19272 AUC after training: 0.7333333333333334
User 19272 does not improve AUC. Reverting changes.
Training on augumented user 67052 27/50 current_auc = 0.7368055555555555
User 67052 AUC after training: 0.7347222222222223
User 67052 does not improve AUC. Reverting changes.
Training on augumented user 126142 28/50 current_auc = 0.7368055555555555
User 126142 AUC after training: 0.7347222222222223
User 126142 does not improve AUC. Reverting changes.
Training on augumented user 68038 29/50 current_auc = 0.7368055555555555
User 68038 AUC after training: 0.7347222222222223
User 68038 does not improve AUC. Reverting changes.
Training on augumented user 107501 30/50 current_auc = 0.7368055555555555
User 107501 AUC after training: 0.7354166666666666
User 107501 does not improve AUC. Reverting changes.
Training on augumented user 125730 31/50 current_auc = 0.7368055555555555
User 125730 AUC after training: 0.7354166666666667
User 125730 does not improve AUC. Reverting changes.
Training on augumented user 116415 32/50 current_auc = 0.7368055555555555
User 116415 AUC after training: 0.7347222222222223
User 116415 does not improve AUC. Reverting changes.
Training on augumented user 2995 33/50 current_auc = 0.7368055555555555
User 2995 AUC after training: 0.7354166666666667
User 2995 does not improve AUC. Reverting changes.
Training on augumented user 61816 34/50 current_auc = 0.7368055555555555
User 61816 AUC after training: 0.7354166666666668
User 61816 does not improve AUC. Reverting changes.
Training on augumented user 61680 35/50 current_auc = 0.7368055555555555
User 61680 AUC after training: 0.7354166666666666
User 61680 does not improve AUC. Reverting changes.
Training on augumented user 110033 36/50 current_auc = 0.7368055555555555
User 110033 AUC after training: 0.7368055555555555
User 110033 does not improve AUC. Reverting changes.
Training on augumented user 74918 37/50 current_auc = 0.7368055555555555
User 74918 AUC after training: 0.7354166666666667
User 74918 does not improve AUC. Reverting changes.
Training on augumented user 3350 38/50 current_auc = 0.7368055555555555
User 3350 AUC after training: 0.7361111111111112
User 3350 does not improve AUC. Reverting changes.
Training on augumented user 87929 39/50 current_auc = 0.7368055555555555
User 87929 AUC after training: 0.7347222222222223
User 87929 does not improve AUC. Reverting changes.
Training on augumented user 32554 40/50 current_auc = 0.7368055555555555
User 32554 AUC after training: 0.7319444444444445
User 32554 does not improve AUC. Reverting changes.
Training on augumented user 32217 41/50 current_auc = 0.7368055555555555
User 32217 AUC after training: 0.7333333333333334
User 32217 does not improve AUC. Reverting changes.
Training on augumented user 20336 42/50 current_auc = 0.7368055555555555
User 20336 AUC after training: 0.7309027777777778
User 20336 does not improve AUC. Reverting changes.
Training on augumented user 129548 43/50 current_auc = 0.7368055555555555
User 129548 AUC after training: 0.7347222222222223
User 129548 does not improve AUC. Reverting changes.
Training on augumented user 39595 44/50 current_auc = 0.7368055555555555
User 39595 AUC after training: 0.7347222222222223
User 39595 does not improve AUC. Reverting changes.
Training on augumented user 92537 45/50 current_auc = 0.7368055555555555
User 92537 AUC after training: 0.7340277777777778
User 92537 does not improve AUC. Reverting changes.
Training on augumented user 37993 46/50 current_auc = 0.7368055555555555
User 37993 AUC after training: 0.7333333333333334
User 37993 does not improve AUC. Reverting changes.
Training on augumented user 30427 47/50 current_auc = 0.7368055555555555
User 30427 AUC after training: 0.7368055555555555
User 30427 does not improve AUC. Reverting changes.
Training on augumented user 40132 48/50 current_auc = 0.7368055555555555
User 40132 AUC after training: 0.7347222222222223
User 40132 does not improve AUC. Reverting changes.
Training on augumented user 90954 49/50 current_auc = 0.7368055555555555
User 90954 AUC after training: 0.7347222222222223
User 90954 does not improve AUC. Reverting changes.
[2024-12-02 19:51:18.748599] start test user 61610 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:19.426143] start test user 61610 244/568 recall augumented users by random, augumented_users = [84818, 123816, 79336, 5636, 66786, 73863, 82381, 43691, 84840, 51514, 38206, 110935, 4939, 25979, 121442, 37403, 82847, 30296, 91302, 127824, 22603, 106834, 5856, 34576, 138463, 103011, 88404, 38719, 132743, 104179, 18430, 125662, 78347, 47632, 80735, 77597, 39636, 124043, 118940, 88879, 47720, 122105, 74417, 13485, 75951, 58327, 112202, 23910, 57922, 27540]
[2024-12-02 19:51:19.468901] user = 61610 Cloud 244/568
[2024-12-02 19:51:19.492836] user = 61610 Local 244/568
[2024-12-02 19:51:19.791764] user = 61610 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:22.900583] user = 61610 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 84818 0/50 current_auc = 0.5625
User 84818 AUC after training: 0.5649038461538461
User 84818 improves AUC. Keeping the model.
Training on augumented user 123816 1/50 current_auc = 0.5649038461538461
User 123816 AUC after training: 0.5649038461538461
User 123816 does not improve AUC. Reverting changes.
Training on augumented user 79336 2/50 current_auc = 0.5649038461538461
User 79336 AUC after training: 0.5625
User 79336 does not improve AUC. Reverting changes.
Training on augumented user 5636 3/50 current_auc = 0.5649038461538461
User 5636 AUC after training: 0.5625
User 5636 does not improve AUC. Reverting changes.
Training on augumented user 66786 4/50 current_auc = 0.5649038461538461
User 66786 AUC after training: 0.5649038461538461
User 66786 does not improve AUC. Reverting changes.
Training on augumented user 73863 5/50 current_auc = 0.5649038461538461
User 73863 AUC after training: 0.5649038461538461
User 73863 does not improve AUC. Reverting changes.
Training on augumented user 82381 6/50 current_auc = 0.5649038461538461
User 82381 AUC after training: 0.5625
User 82381 does not improve AUC. Reverting changes.
Training on augumented user 43691 7/50 current_auc = 0.5649038461538461
User 43691 AUC after training: 0.5649038461538461
User 43691 does not improve AUC. Reverting changes.
Training on augumented user 84840 8/50 current_auc = 0.5649038461538461
User 84840 AUC after training: 0.5625
User 84840 does not improve AUC. Reverting changes.
Training on augumented user 51514 9/50 current_auc = 0.5649038461538461
User 51514 AUC after training: 0.5649038461538461
User 51514 does not improve AUC. Reverting changes.
Training on augumented user 38206 10/50 current_auc = 0.5649038461538461
User 38206 AUC after training: 0.5649038461538461
User 38206 does not improve AUC. Reverting changes.
Training on augumented user 110935 11/50 current_auc = 0.5649038461538461
User 110935 AUC after training: 0.5649038461538461
User 110935 does not improve AUC. Reverting changes.
Training on augumented user 4939 12/50 current_auc = 0.5649038461538461
User 4939 AUC after training: 0.5625
User 4939 does not improve AUC. Reverting changes.
Training on augumented user 25979 13/50 current_auc = 0.5649038461538461
User 25979 AUC after training: 0.5649038461538461
User 25979 does not improve AUC. Reverting changes.
Training on augumented user 121442 14/50 current_auc = 0.5649038461538461
User 121442 AUC after training: 0.5625
User 121442 does not improve AUC. Reverting changes.
Training on augumented user 37403 15/50 current_auc = 0.5649038461538461
User 37403 AUC after training: 0.5649038461538461
User 37403 does not improve AUC. Reverting changes.
Training on augumented user 82847 16/50 current_auc = 0.5649038461538461
User 82847 AUC after training: 0.5649038461538461
User 82847 does not improve AUC. Reverting changes.
Training on augumented user 30296 17/50 current_auc = 0.5649038461538461
User 30296 AUC after training: 0.5649038461538461
User 30296 does not improve AUC. Reverting changes.
Training on augumented user 91302 18/50 current_auc = 0.5649038461538461
User 91302 AUC after training: 0.5649038461538461
User 91302 does not improve AUC. Reverting changes.
Training on augumented user 127824 19/50 current_auc = 0.5649038461538461
User 127824 AUC after training: 0.5625
User 127824 does not improve AUC. Reverting changes.
Training on augumented user 22603 20/50 current_auc = 0.5649038461538461
User 22603 AUC after training: 0.5649038461538461
User 22603 does not improve AUC. Reverting changes.
Training on augumented user 106834 21/50 current_auc = 0.5649038461538461
User 106834 AUC after training: 0.5625
User 106834 does not improve AUC. Reverting changes.
Training on augumented user 5856 22/50 current_auc = 0.5649038461538461
User 5856 AUC after training: 0.5600961538461539
User 5856 does not improve AUC. Reverting changes.
Training on augumented user 34576 23/50 current_auc = 0.5649038461538461
User 34576 AUC after training: 0.5576923076923077
User 34576 does not improve AUC. Reverting changes.
Training on augumented user 138463 24/50 current_auc = 0.5649038461538461
User 138463 AUC after training: 0.5649038461538461
User 138463 does not improve AUC. Reverting changes.
Training on augumented user 103011 25/50 current_auc = 0.5649038461538461
User 103011 AUC after training: 0.5600961538461539
User 103011 does not improve AUC. Reverting changes.
Training on augumented user 88404 26/50 current_auc = 0.5649038461538461
User 88404 AUC after training: 0.5625
User 88404 does not improve AUC. Reverting changes.
Training on augumented user 38719 27/50 current_auc = 0.5649038461538461
User 38719 AUC after training: 0.5600961538461539
User 38719 does not improve AUC. Reverting changes.
Training on augumented user 132743 28/50 current_auc = 0.5649038461538461
User 132743 AUC after training: 0.5649038461538461
User 132743 does not improve AUC. Reverting changes.
Training on augumented user 104179 29/50 current_auc = 0.5649038461538461
User 104179 AUC after training: 0.5649038461538461
User 104179 does not improve AUC. Reverting changes.
Training on augumented user 18430 30/50 current_auc = 0.5649038461538461
User 18430 AUC after training: 0.5600961538461539
User 18430 does not improve AUC. Reverting changes.
Training on augumented user 125662 31/50 current_auc = 0.5649038461538461
User 125662 AUC after training: 0.5576923076923077
User 125662 does not improve AUC. Reverting changes.
Training on augumented user 78347 32/50 current_auc = 0.5649038461538461
User 78347 AUC after training: 0.5625
User 78347 does not improve AUC. Reverting changes.
Training on augumented user 47632 33/50 current_auc = 0.5649038461538461
User 47632 AUC after training: 0.5649038461538461
User 47632 does not improve AUC. Reverting changes.
Training on augumented user 80735 34/50 current_auc = 0.5649038461538461
User 80735 AUC after training: 0.5649038461538461
User 80735 does not improve AUC. Reverting changes.
Training on augumented user 77597 35/50 current_auc = 0.5649038461538461
User 77597 AUC after training: 0.5600961538461539
User 77597 does not improve AUC. Reverting changes.
Training on augumented user 39636 36/50 current_auc = 0.5649038461538461
User 39636 AUC after training: 0.5600961538461539
User 39636 does not improve AUC. Reverting changes.
Training on augumented user 124043 37/50 current_auc = 0.5649038461538461
User 124043 AUC after training: 0.5649038461538461
User 124043 does not improve AUC. Reverting changes.
Training on augumented user 118940 38/50 current_auc = 0.5649038461538461
User 118940 AUC after training: 0.5649038461538461
User 118940 does not improve AUC. Reverting changes.
Training on augumented user 88879 39/50 current_auc = 0.5649038461538461
User 88879 AUC after training: 0.5576923076923077
User 88879 does not improve AUC. Reverting changes.
Training on augumented user 47720 40/50 current_auc = 0.5649038461538461
User 47720 AUC after training: 0.5600961538461539
User 47720 does not improve AUC. Reverting changes.
Training on augumented user 122105 41/50 current_auc = 0.5649038461538461
User 122105 AUC after training: 0.5600961538461539
User 122105 does not improve AUC. Reverting changes.
Training on augumented user 74417 42/50 current_auc = 0.5649038461538461
User 74417 AUC after training: 0.5625
User 74417 does not improve AUC. Reverting changes.
Training on augumented user 13485 43/50 current_auc = 0.5649038461538461
User 13485 AUC after training: 0.5649038461538461
User 13485 does not improve AUC. Reverting changes.
Training on augumented user 75951 44/50 current_auc = 0.5649038461538461
User 75951 AUC after training: 0.5625
User 75951 does not improve AUC. Reverting changes.
Training on augumented user 58327 45/50 current_auc = 0.5649038461538461
User 58327 AUC after training: 0.5649038461538461
User 58327 does not improve AUC. Reverting changes.
Training on augumented user 112202 46/50 current_auc = 0.5649038461538461
User 112202 AUC after training: 0.5649038461538461
User 112202 does not improve AUC. Reverting changes.
Training on augumented user 23910 47/50 current_auc = 0.5649038461538461
User 23910 AUC after training: 0.5625
User 23910 does not improve AUC. Reverting changes.
Training on augumented user 57922 48/50 current_auc = 0.5649038461538461
User 57922 AUC after training: 0.5649038461538461
User 57922 does not improve AUC. Reverting changes.
Training on augumented user 27540 49/50 current_auc = 0.5649038461538461
User 27540 AUC after training: 0.5625
User 27540 does not improve AUC. Reverting changes.
[2024-12-02 19:51:50.589905] start test user 61627 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:51.113772] start test user 61627 245/568 recall augumented users by random, augumented_users = [99890, 41109, 80199, 124649, 119452, 38373, 19653, 129789, 129446, 61249, 29512, 46013, 119611, 23813, 66671, 56205, 30719, 108128, 50289, 32723, 65772, 124951, 118479, 84279, 138223, 37874, 44636, 40219, 100961, 69372, 43689, 39656, 96978, 108729, 73811, 126847, 80634, 59533, 21837, 44495, 130699, 77089, 137422, 21680, 5233, 31696, 46441, 12109, 132893, 21254]
[2024-12-02 19:51:51.129768] user = 61627 Cloud 245/568
[2024-12-02 19:51:51.144369] user = 61627 Local 245/568
[2024-12-02 19:51:51.258194] user = 61627 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:53.056592] user = 61627 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5694752402069475
Training on augumented user 99890 0/50 current_auc = 0.5694752402069475
User 99890 AUC after training: 0.5691056910569106
User 99890 does not improve AUC. Reverting changes.
Training on augumented user 41109 1/50 current_auc = 0.5694752402069475
User 41109 AUC after training: 0.5691056910569106
User 41109 does not improve AUC. Reverting changes.
Training on augumented user 80199 2/50 current_auc = 0.5694752402069475
User 80199 AUC after training: 0.5687361419068735
User 80199 does not improve AUC. Reverting changes.
Training on augumented user 124649 3/50 current_auc = 0.5694752402069475
User 124649 AUC after training: 0.5694752402069475
User 124649 does not improve AUC. Reverting changes.
Training on augumented user 119452 4/50 current_auc = 0.5694752402069475
User 119452 AUC after training: 0.5691056910569106
User 119452 does not improve AUC. Reverting changes.
Training on augumented user 38373 5/50 current_auc = 0.5694752402069475
User 38373 AUC after training: 0.5694752402069475
User 38373 does not improve AUC. Reverting changes.
Training on augumented user 19653 6/50 current_auc = 0.5694752402069475
User 19653 AUC after training: 0.5702143385070214
User 19653 improves AUC. Keeping the model.
Training on augumented user 129789 7/50 current_auc = 0.5702143385070214
User 129789 AUC after training: 0.5679970436067996
User 129789 does not improve AUC. Reverting changes.
Training on augumented user 129446 8/50 current_auc = 0.5702143385070214
User 129446 AUC after training: 0.5709534368070953
User 129446 improves AUC. Keeping the model.
Training on augumented user 61249 9/50 current_auc = 0.5709534368070953
User 61249 AUC after training: 0.5698447893569845
User 61249 does not improve AUC. Reverting changes.
Training on augumented user 29512 10/50 current_auc = 0.5709534368070953
User 29512 AUC after training: 0.5691056910569106
User 29512 does not improve AUC. Reverting changes.
Training on augumented user 46013 11/50 current_auc = 0.5709534368070953
User 46013 AUC after training: 0.5720620842572062
User 46013 improves AUC. Keeping the model.
Training on augumented user 119611 12/50 current_auc = 0.5720620842572062
User 119611 AUC after training: 0.5720620842572062
User 119611 does not improve AUC. Reverting changes.
Training on augumented user 23813 13/50 current_auc = 0.5720620842572062
User 23813 AUC after training: 0.5720620842572062
User 23813 does not improve AUC. Reverting changes.
Training on augumented user 66671 14/50 current_auc = 0.5720620842572062
User 66671 AUC after training: 0.5694752402069475
User 66671 does not improve AUC. Reverting changes.
Training on augumented user 56205 15/50 current_auc = 0.5720620842572062
User 56205 AUC after training: 0.5716925351071693
User 56205 does not improve AUC. Reverting changes.
Training on augumented user 30719 16/50 current_auc = 0.5720620842572062
User 30719 AUC after training: 0.5713229859571323
User 30719 does not improve AUC. Reverting changes.
Training on augumented user 108128 17/50 current_auc = 0.5720620842572062
User 108128 AUC after training: 0.5724316334072432
User 108128 improves AUC. Keeping the model.
Training on augumented user 50289 18/50 current_auc = 0.5724316334072432
User 50289 AUC after training: 0.5716925351071692
User 50289 does not improve AUC. Reverting changes.
Training on augumented user 32723 19/50 current_auc = 0.5724316334072432
User 32723 AUC after training: 0.5724316334072431
User 32723 does not improve AUC. Reverting changes.
Training on augumented user 65772 20/50 current_auc = 0.5724316334072432
User 65772 AUC after training: 0.5724316334072431
User 65772 does not improve AUC. Reverting changes.
Training on augumented user 124951 21/50 current_auc = 0.5724316334072432
User 124951 AUC after training: 0.5724316334072431
User 124951 does not improve AUC. Reverting changes.
Training on augumented user 118479 22/50 current_auc = 0.5724316334072432
User 118479 AUC after training: 0.5709534368070953
User 118479 does not improve AUC. Reverting changes.
Training on augumented user 84279 23/50 current_auc = 0.5724316334072432
User 84279 AUC after training: 0.5720620842572062
User 84279 does not improve AUC. Reverting changes.
Training on augumented user 138223 24/50 current_auc = 0.5724316334072432
User 138223 AUC after training: 0.5716925351071692
User 138223 does not improve AUC. Reverting changes.
Training on augumented user 37874 25/50 current_auc = 0.5724316334072432
User 37874 AUC after training: 0.5716925351071692
User 37874 does not improve AUC. Reverting changes.
Training on augumented user 44636 26/50 current_auc = 0.5724316334072432
User 44636 AUC after training: 0.5720620842572062
User 44636 does not improve AUC. Reverting changes.
Training on augumented user 40219 27/50 current_auc = 0.5724316334072432
User 40219 AUC after training: 0.5716925351071692
User 40219 does not improve AUC. Reverting changes.
Training on augumented user 100961 28/50 current_auc = 0.5724316334072432
User 100961 AUC after training: 0.5709534368070953
User 100961 does not improve AUC. Reverting changes.
Training on augumented user 69372 29/50 current_auc = 0.5724316334072432
User 69372 AUC after training: 0.5720620842572062
User 69372 does not improve AUC. Reverting changes.
Training on augumented user 43689 30/50 current_auc = 0.5724316334072432
User 43689 AUC after training: 0.5720620842572062
User 43689 does not improve AUC. Reverting changes.
Training on augumented user 39656 31/50 current_auc = 0.5724316334072432
User 39656 AUC after training: 0.5728011825572801
User 39656 improves AUC. Keeping the model.
Training on augumented user 96978 32/50 current_auc = 0.5728011825572801
User 96978 AUC after training: 0.5724316334072431
User 96978 does not improve AUC. Reverting changes.
Training on augumented user 108729 33/50 current_auc = 0.5728011825572801
User 108729 AUC after training: 0.5705838876570584
User 108729 does not improve AUC. Reverting changes.
Training on augumented user 73811 34/50 current_auc = 0.5728011825572801
User 73811 AUC after training: 0.5728011825572801
User 73811 does not improve AUC. Reverting changes.
Training on augumented user 126847 35/50 current_auc = 0.5728011825572801
User 126847 AUC after training: 0.5720620842572062
User 126847 does not improve AUC. Reverting changes.
Training on augumented user 80634 36/50 current_auc = 0.5728011825572801
User 80634 AUC after training: 0.5702143385070214
User 80634 does not improve AUC. Reverting changes.
Training on augumented user 59533 37/50 current_auc = 0.5728011825572801
User 59533 AUC after training: 0.5724316334072431
User 59533 does not improve AUC. Reverting changes.
Training on augumented user 21837 38/50 current_auc = 0.5728011825572801
User 21837 AUC after training: 0.573170731707317
User 21837 improves AUC. Keeping the model.
Training on augumented user 44495 39/50 current_auc = 0.573170731707317
User 44495 AUC after training: 0.573170731707317
User 44495 does not improve AUC. Reverting changes.
Training on augumented user 130699 40/50 current_auc = 0.573170731707317
User 130699 AUC after training: 0.5728011825572801
User 130699 does not improve AUC. Reverting changes.
Training on augumented user 77089 41/50 current_auc = 0.573170731707317
User 77089 AUC after training: 0.5716925351071692
User 77089 does not improve AUC. Reverting changes.
Training on augumented user 137422 42/50 current_auc = 0.573170731707317
User 137422 AUC after training: 0.573170731707317
User 137422 does not improve AUC. Reverting changes.
Training on augumented user 21680 43/50 current_auc = 0.573170731707317
User 21680 AUC after training: 0.5724316334072431
User 21680 does not improve AUC. Reverting changes.
Training on augumented user 5233 44/50 current_auc = 0.573170731707317
User 5233 AUC after training: 0.573170731707317
User 5233 does not improve AUC. Reverting changes.
Training on augumented user 31696 45/50 current_auc = 0.573170731707317
User 31696 AUC after training: 0.5728011825572801
User 31696 does not improve AUC. Reverting changes.
Training on augumented user 46441 46/50 current_auc = 0.573170731707317
User 46441 AUC after training: 0.573540280857354
User 46441 improves AUC. Keeping the model.
Training on augumented user 12109 47/50 current_auc = 0.573540280857354
User 12109 AUC after training: 0.5731707317073171
User 12109 does not improve AUC. Reverting changes.
Training on augumented user 132893 48/50 current_auc = 0.573540280857354
User 132893 AUC after training: 0.5720620842572062
User 132893 does not improve AUC. Reverting changes.
Training on augumented user 21254 49/50 current_auc = 0.573540280857354
User 21254 AUC after training: 0.5728011825572801
User 21254 does not improve AUC. Reverting changes.
[2024-12-02 19:52:25.104116] start test user 61628 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:25.556123] start test user 61628 246/568 recall augumented users by random, augumented_users = [84591, 83922, 124626, 3114, 132003, 31471, 113164, 73009, 40446, 9080, 4894, 39425, 70569, 22477, 66081, 125325, 133529, 102430, 54028, 53933, 58532, 63076, 110184, 9485, 114724, 77630, 113536, 56182, 133671, 55242, 28262, 67545, 71369, 179, 60180, 105982, 93282, 105421, 109048, 41984, 98358, 111175, 137929, 136197, 57312, 23228, 104898, 10930, 101520, 1956]
[2024-12-02 19:52:25.570714] user = 61628 Cloud 246/568
[2024-12-02 19:52:25.584213] user = 61628 Local 246/568
[2024-12-02 19:52:25.618684] user = 61628 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:27.996461] user = 61628 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7009803921568627
Training on augumented user 84591 0/50 current_auc = 0.7009803921568627
User 84591 AUC after training: 0.7042483660130718
User 84591 improves AUC. Keeping the model.
Training on augumented user 83922 1/50 current_auc = 0.7042483660130718
User 83922 AUC after training: 0.7058823529411764
User 83922 improves AUC. Keeping the model.
Training on augumented user 124626 2/50 current_auc = 0.7058823529411764
User 124626 AUC after training: 0.7066993464052287
User 124626 improves AUC. Keeping the model.
Training on augumented user 3114 3/50 current_auc = 0.7066993464052287
User 3114 AUC after training: 0.7066993464052287
User 3114 does not improve AUC. Reverting changes.
Training on augumented user 132003 4/50 current_auc = 0.7066993464052287
User 132003 AUC after training: 0.7058823529411764
User 132003 does not improve AUC. Reverting changes.
Training on augumented user 31471 5/50 current_auc = 0.7066993464052287
User 31471 AUC after training: 0.7083333333333333
User 31471 improves AUC. Keeping the model.
Training on augumented user 113164 6/50 current_auc = 0.7083333333333333
User 113164 AUC after training: 0.7050653594771241
User 113164 does not improve AUC. Reverting changes.
Training on augumented user 73009 7/50 current_auc = 0.7083333333333333
User 73009 AUC after training: 0.7091503267973857
User 73009 improves AUC. Keeping the model.
Training on augumented user 40446 8/50 current_auc = 0.7091503267973857
User 40446 AUC after training: 0.7058823529411765
User 40446 does not improve AUC. Reverting changes.
Training on augumented user 9080 9/50 current_auc = 0.7091503267973857
User 9080 AUC after training: 0.7083333333333333
User 9080 does not improve AUC. Reverting changes.
Training on augumented user 4894 10/50 current_auc = 0.7091503267973857
User 4894 AUC after training: 0.7091503267973857
User 4894 does not improve AUC. Reverting changes.
Training on augumented user 39425 11/50 current_auc = 0.7091503267973857
User 39425 AUC after training: 0.7050653594771241
User 39425 does not improve AUC. Reverting changes.
Training on augumented user 70569 12/50 current_auc = 0.7091503267973857
User 70569 AUC after training: 0.7091503267973857
User 70569 does not improve AUC. Reverting changes.
Training on augumented user 22477 13/50 current_auc = 0.7091503267973857
User 22477 AUC after training: 0.7083333333333334
User 22477 does not improve AUC. Reverting changes.
Training on augumented user 66081 14/50 current_auc = 0.7091503267973857
User 66081 AUC after training: 0.7091503267973857
User 66081 does not improve AUC. Reverting changes.
Training on augumented user 125325 15/50 current_auc = 0.7091503267973857
User 125325 AUC after training: 0.7075163398692811
User 125325 does not improve AUC. Reverting changes.
Training on augumented user 133529 16/50 current_auc = 0.7091503267973857
User 133529 AUC after training: 0.7083333333333333
User 133529 does not improve AUC. Reverting changes.
Training on augumented user 102430 17/50 current_auc = 0.7091503267973857
User 102430 AUC after training: 0.7099673202614378
User 102430 improves AUC. Keeping the model.
Training on augumented user 54028 18/50 current_auc = 0.7099673202614378
User 54028 AUC after training: 0.7116013071895425
User 54028 improves AUC. Keeping the model.
Training on augumented user 53933 19/50 current_auc = 0.7116013071895425
User 53933 AUC after training: 0.7116013071895425
User 53933 does not improve AUC. Reverting changes.
Training on augumented user 58532 20/50 current_auc = 0.7116013071895425
User 58532 AUC after training: 0.7116013071895425
User 58532 does not improve AUC. Reverting changes.
Training on augumented user 63076 21/50 current_auc = 0.7116013071895425
User 63076 AUC after training: 0.7124183006535947
User 63076 improves AUC. Keeping the model.
Training on augumented user 110184 22/50 current_auc = 0.7124183006535947
User 110184 AUC after training: 0.7116013071895424
User 110184 does not improve AUC. Reverting changes.
Training on augumented user 9485 23/50 current_auc = 0.7124183006535947
User 9485 AUC after training: 0.7075163398692811
User 9485 does not improve AUC. Reverting changes.
Training on augumented user 114724 24/50 current_auc = 0.7124183006535947
User 114724 AUC after training: 0.7116013071895424
User 114724 does not improve AUC. Reverting changes.
Training on augumented user 77630 25/50 current_auc = 0.7124183006535947
User 77630 AUC after training: 0.7042483660130718
User 77630 does not improve AUC. Reverting changes.
Training on augumented user 113536 26/50 current_auc = 0.7124183006535947
User 113536 AUC after training: 0.7116013071895425
User 113536 does not improve AUC. Reverting changes.
Training on augumented user 56182 27/50 current_auc = 0.7124183006535947
User 56182 AUC after training: 0.7107843137254901
User 56182 does not improve AUC. Reverting changes.
Training on augumented user 133671 28/50 current_auc = 0.7124183006535947
User 133671 AUC after training: 0.7116013071895425
User 133671 does not improve AUC. Reverting changes.
Training on augumented user 55242 29/50 current_auc = 0.7124183006535947
User 55242 AUC after training: 0.7116013071895424
User 55242 does not improve AUC. Reverting changes.
Training on augumented user 28262 30/50 current_auc = 0.7124183006535947
User 28262 AUC after training: 0.7107843137254902
User 28262 does not improve AUC. Reverting changes.
Training on augumented user 67545 31/50 current_auc = 0.7124183006535947
User 67545 AUC after training: 0.7140522875816993
User 67545 improves AUC. Keeping the model.
Training on augumented user 71369 32/50 current_auc = 0.7140522875816993
User 71369 AUC after training: 0.7075163398692811
User 71369 does not improve AUC. Reverting changes.
Training on augumented user 179 33/50 current_auc = 0.7140522875816993
User 179 AUC after training: 0.713235294117647
User 179 does not improve AUC. Reverting changes.
Training on augumented user 60180 34/50 current_auc = 0.7140522875816993
User 60180 AUC after training: 0.7140522875816993
User 60180 does not improve AUC. Reverting changes.
Training on augumented user 105982 35/50 current_auc = 0.7140522875816993
User 105982 AUC after training: 0.7124183006535948
User 105982 does not improve AUC. Reverting changes.
Training on augumented user 93282 36/50 current_auc = 0.7140522875816993
User 93282 AUC after training: 0.7124183006535948
User 93282 does not improve AUC. Reverting changes.
Training on augumented user 105421 37/50 current_auc = 0.7140522875816993
User 105421 AUC after training: 0.7124183006535948
User 105421 does not improve AUC. Reverting changes.
Training on augumented user 109048 38/50 current_auc = 0.7140522875816993
User 109048 AUC after training: 0.7124183006535947
User 109048 does not improve AUC. Reverting changes.
Training on augumented user 41984 39/50 current_auc = 0.7140522875816993
User 41984 AUC after training: 0.7124183006535947
User 41984 does not improve AUC. Reverting changes.
Training on augumented user 98358 40/50 current_auc = 0.7140522875816993
User 98358 AUC after training: 0.7116013071895425
User 98358 does not improve AUC. Reverting changes.
Training on augumented user 111175 41/50 current_auc = 0.7140522875816993
User 111175 AUC after training: 0.7116013071895424
User 111175 does not improve AUC. Reverting changes.
Training on augumented user 137929 42/50 current_auc = 0.7140522875816993
User 137929 AUC after training: 0.7140522875816993
User 137929 does not improve AUC. Reverting changes.
Training on augumented user 136197 43/50 current_auc = 0.7140522875816993
User 136197 AUC after training: 0.7116013071895424
User 136197 does not improve AUC. Reverting changes.
Training on augumented user 57312 44/50 current_auc = 0.7140522875816993
User 57312 AUC after training: 0.7132352941176471
User 57312 does not improve AUC. Reverting changes.
Training on augumented user 23228 45/50 current_auc = 0.7140522875816993
User 23228 AUC after training: 0.713235294117647
User 23228 does not improve AUC. Reverting changes.
Training on augumented user 104898 46/50 current_auc = 0.7140522875816993
User 104898 AUC after training: 0.7058823529411764
User 104898 does not improve AUC. Reverting changes.
Training on augumented user 10930 47/50 current_auc = 0.7140522875816993
User 10930 AUC after training: 0.7132352941176471
User 10930 does not improve AUC. Reverting changes.
Training on augumented user 101520 48/50 current_auc = 0.7140522875816993
User 101520 AUC after training: 0.7124183006535948
User 101520 does not improve AUC. Reverting changes.
Training on augumented user 1956 49/50 current_auc = 0.7140522875816993
User 1956 AUC after training: 0.7091503267973857
User 1956 does not improve AUC. Reverting changes.
[2024-12-02 19:52:56.905391] start test user 61661 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:57.324363] start test user 61661 247/568 recall augumented users by random, augumented_users = [127140, 34458, 135753, 28986, 25599, 42815, 33666, 34411, 124122, 84062, 22547, 72545, 125360, 33195, 28797, 41954, 3784, 47065, 130191, 103492, 16250, 29665, 87914, 94450, 103709, 59406, 29331, 87481, 58340, 125373, 3998, 44681, 30176, 58266, 105197, 115000, 59401, 32740, 65063, 16228, 117503, 66443, 18023, 109262, 97419, 137604, 7186, 7552, 31186, 123841]
[2024-12-02 19:52:57.339483] user = 61661 Cloud 247/568
[2024-12-02 19:52:57.350952] user = 61661 Local 247/568
[2024-12-02 19:52:57.372845] user = 61661 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:59.634055] user = 61661 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 127140 0/50 current_auc = 0.5555555555555556
User 127140 AUC after training: 0.5555555555555556
User 127140 does not improve AUC. Reverting changes.
Training on augumented user 34458 1/50 current_auc = 0.5555555555555556
User 34458 AUC after training: 0.5555555555555556
User 34458 does not improve AUC. Reverting changes.
Training on augumented user 135753 2/50 current_auc = 0.5555555555555556
User 135753 AUC after training: 0.5555555555555556
User 135753 does not improve AUC. Reverting changes.
Training on augumented user 28986 3/50 current_auc = 0.5555555555555556
User 28986 AUC after training: 0.5555555555555556
User 28986 does not improve AUC. Reverting changes.
Training on augumented user 25599 4/50 current_auc = 0.5555555555555556
User 25599 AUC after training: 0.5555555555555556
User 25599 does not improve AUC. Reverting changes.
Training on augumented user 42815 5/50 current_auc = 0.5555555555555556
User 42815 AUC after training: 0.5555555555555556
User 42815 does not improve AUC. Reverting changes.
Training on augumented user 33666 6/50 current_auc = 0.5555555555555556
User 33666 AUC after training: 0.5555555555555556
User 33666 does not improve AUC. Reverting changes.
Training on augumented user 34411 7/50 current_auc = 0.5555555555555556
User 34411 AUC after training: 0.5555555555555556
User 34411 does not improve AUC. Reverting changes.
Training on augumented user 124122 8/50 current_auc = 0.5555555555555556
User 124122 AUC after training: 0.5555555555555556
User 124122 does not improve AUC. Reverting changes.
Training on augumented user 84062 9/50 current_auc = 0.5555555555555556
User 84062 AUC after training: 0.5555555555555556
User 84062 does not improve AUC. Reverting changes.
Training on augumented user 22547 10/50 current_auc = 0.5555555555555556
User 22547 AUC after training: 0.5555555555555556
User 22547 does not improve AUC. Reverting changes.
Training on augumented user 72545 11/50 current_auc = 0.5555555555555556
User 72545 AUC after training: 0.5555555555555556
User 72545 does not improve AUC. Reverting changes.
Training on augumented user 125360 12/50 current_auc = 0.5555555555555556
User 125360 AUC after training: 0.5555555555555556
User 125360 does not improve AUC. Reverting changes.
Training on augumented user 33195 13/50 current_auc = 0.5555555555555556
User 33195 AUC after training: 0.5555555555555556
User 33195 does not improve AUC. Reverting changes.
Training on augumented user 28797 14/50 current_auc = 0.5555555555555556
User 28797 AUC after training: 0.5555555555555556
User 28797 does not improve AUC. Reverting changes.
Training on augumented user 41954 15/50 current_auc = 0.5555555555555556
User 41954 AUC after training: 0.5555555555555556
User 41954 does not improve AUC. Reverting changes.
Training on augumented user 3784 16/50 current_auc = 0.5555555555555556
User 3784 AUC after training: 0.5555555555555556
User 3784 does not improve AUC. Reverting changes.
Training on augumented user 47065 17/50 current_auc = 0.5555555555555556
User 47065 AUC after training: 0.5555555555555556
User 47065 does not improve AUC. Reverting changes.
Training on augumented user 130191 18/50 current_auc = 0.5555555555555556
User 130191 AUC after training: 0.5462962962962963
User 130191 does not improve AUC. Reverting changes.
Training on augumented user 103492 19/50 current_auc = 0.5555555555555556
User 103492 AUC after training: 0.537037037037037
User 103492 does not improve AUC. Reverting changes.
Training on augumented user 16250 20/50 current_auc = 0.5555555555555556
User 16250 AUC after training: 0.5555555555555556
User 16250 does not improve AUC. Reverting changes.
Training on augumented user 29665 21/50 current_auc = 0.5555555555555556
User 29665 AUC after training: 0.5555555555555556
User 29665 does not improve AUC. Reverting changes.
Training on augumented user 87914 22/50 current_auc = 0.5555555555555556
User 87914 AUC after training: 0.5555555555555556
User 87914 does not improve AUC. Reverting changes.
Training on augumented user 94450 23/50 current_auc = 0.5555555555555556
User 94450 AUC after training: 0.5555555555555556
User 94450 does not improve AUC. Reverting changes.
Training on augumented user 103709 24/50 current_auc = 0.5555555555555556
User 103709 AUC after training: 0.5555555555555556
User 103709 does not improve AUC. Reverting changes.
Training on augumented user 59406 25/50 current_auc = 0.5555555555555556
User 59406 AUC after training: 0.5648148148148149
User 59406 improves AUC. Keeping the model.
Training on augumented user 29331 26/50 current_auc = 0.5648148148148149
User 29331 AUC after training: 0.5555555555555556
User 29331 does not improve AUC. Reverting changes.
Training on augumented user 87481 27/50 current_auc = 0.5648148148148149
User 87481 AUC after training: 0.5555555555555556
User 87481 does not improve AUC. Reverting changes.
Training on augumented user 58340 28/50 current_auc = 0.5648148148148149
User 58340 AUC after training: 0.5648148148148149
User 58340 does not improve AUC. Reverting changes.
Training on augumented user 125373 29/50 current_auc = 0.5648148148148149
User 125373 AUC after training: 0.5648148148148149
User 125373 does not improve AUC. Reverting changes.
Training on augumented user 3998 30/50 current_auc = 0.5648148148148149
User 3998 AUC after training: 0.5555555555555556
User 3998 does not improve AUC. Reverting changes.
Training on augumented user 44681 31/50 current_auc = 0.5648148148148149
User 44681 AUC after training: 0.5648148148148149
User 44681 does not improve AUC. Reverting changes.
Training on augumented user 30176 32/50 current_auc = 0.5648148148148149
User 30176 AUC after training: 0.5555555555555556
User 30176 does not improve AUC. Reverting changes.
Training on augumented user 58266 33/50 current_auc = 0.5648148148148149
User 58266 AUC after training: 0.5555555555555556
User 58266 does not improve AUC. Reverting changes.
Training on augumented user 105197 34/50 current_auc = 0.5648148148148149
User 105197 AUC after training: 0.5648148148148149
User 105197 does not improve AUC. Reverting changes.
Training on augumented user 115000 35/50 current_auc = 0.5648148148148149
User 115000 AUC after training: 0.5555555555555556
User 115000 does not improve AUC. Reverting changes.
Training on augumented user 59401 36/50 current_auc = 0.5648148148148149
User 59401 AUC after training: 0.5555555555555556
User 59401 does not improve AUC. Reverting changes.
Training on augumented user 32740 37/50 current_auc = 0.5648148148148149
User 32740 AUC after training: 0.5648148148148149
User 32740 does not improve AUC. Reverting changes.
Training on augumented user 65063 38/50 current_auc = 0.5648148148148149
User 65063 AUC after training: 0.5648148148148149
User 65063 does not improve AUC. Reverting changes.
Training on augumented user 16228 39/50 current_auc = 0.5648148148148149
User 16228 AUC after training: 0.5555555555555556
User 16228 does not improve AUC. Reverting changes.
Training on augumented user 117503 40/50 current_auc = 0.5648148148148149
User 117503 AUC after training: 0.5555555555555556
User 117503 does not improve AUC. Reverting changes.
Training on augumented user 66443 41/50 current_auc = 0.5648148148148149
User 66443 AUC after training: 0.5740740740740741
User 66443 improves AUC. Keeping the model.
Training on augumented user 18023 42/50 current_auc = 0.5740740740740741
User 18023 AUC after training: 0.5740740740740741
User 18023 does not improve AUC. Reverting changes.
Training on augumented user 109262 43/50 current_auc = 0.5740740740740741
User 109262 AUC after training: 0.5740740740740741
User 109262 does not improve AUC. Reverting changes.
Training on augumented user 97419 44/50 current_auc = 0.5740740740740741
User 97419 AUC after training: 0.5740740740740741
User 97419 does not improve AUC. Reverting changes.
Training on augumented user 137604 45/50 current_auc = 0.5740740740740741
User 137604 AUC after training: 0.5648148148148149
User 137604 does not improve AUC. Reverting changes.
Training on augumented user 7186 46/50 current_auc = 0.5740740740740741
User 7186 AUC after training: 0.5648148148148149
User 7186 does not improve AUC. Reverting changes.
Training on augumented user 7552 47/50 current_auc = 0.5740740740740741
User 7552 AUC after training: 0.5648148148148149
User 7552 does not improve AUC. Reverting changes.
Training on augumented user 31186 48/50 current_auc = 0.5740740740740741
User 31186 AUC after training: 0.5648148148148149
User 31186 does not improve AUC. Reverting changes.
Training on augumented user 123841 49/50 current_auc = 0.5740740740740741
User 123841 AUC after training: 0.5648148148148149
User 123841 does not improve AUC. Reverting changes.
[2024-12-02 19:53:29.025735] start test user 61699 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:29.430593] start test user 61699 248/568 recall augumented users by random, augumented_users = [24021, 20007, 108994, 83473, 56885, 30157, 73484, 112875, 99914, 67930, 136539, 59804, 131503, 112002, 43312, 43755, 128676, 54618, 79027, 12778, 113946, 15796, 129573, 70715, 56859, 94346, 132547, 101215, 7994, 58566, 36094, 103526, 23751, 32069, 9669, 20640, 34731, 5698, 12339, 108759, 123416, 28897, 72672, 78426, 95658, 56995, 87966, 40496, 72665, 28956]
[2024-12-02 19:53:29.446214] user = 61699 Cloud 248/568
[2024-12-02 19:53:29.461120] user = 61699 Local 248/568
[2024-12-02 19:53:29.559477] user = 61699 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:31.846037] user = 61699 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5049715909090909
Training on augumented user 24021 0/50 current_auc = 0.5049715909090909
User 24021 AUC after training: 0.5054450757575758
User 24021 improves AUC. Keeping the model.
Training on augumented user 20007 1/50 current_auc = 0.5054450757575758
User 20007 AUC after training: 0.5054450757575758
User 20007 does not improve AUC. Reverting changes.
Training on augumented user 108994 2/50 current_auc = 0.5054450757575758
User 108994 AUC after training: 0.5049715909090908
User 108994 does not improve AUC. Reverting changes.
Training on augumented user 83473 3/50 current_auc = 0.5054450757575758
User 83473 AUC after training: 0.5044981060606061
User 83473 does not improve AUC. Reverting changes.
Training on augumented user 56885 4/50 current_auc = 0.5054450757575758
User 56885 AUC after training: 0.5059185606060606
User 56885 improves AUC. Keeping the model.
Training on augumented user 30157 5/50 current_auc = 0.5059185606060606
User 30157 AUC after training: 0.5049715909090909
User 30157 does not improve AUC. Reverting changes.
Training on augumented user 73484 6/50 current_auc = 0.5059185606060606
User 73484 AUC after training: 0.5049715909090909
User 73484 does not improve AUC. Reverting changes.
Training on augumented user 112875 7/50 current_auc = 0.5059185606060606
User 112875 AUC after training: 0.5044981060606061
User 112875 does not improve AUC. Reverting changes.
Training on augumented user 99914 8/50 current_auc = 0.5059185606060606
User 99914 AUC after training: 0.5054450757575757
User 99914 does not improve AUC. Reverting changes.
Training on augumented user 67930 9/50 current_auc = 0.5059185606060606
User 67930 AUC after training: 0.5063920454545454
User 67930 improves AUC. Keeping the model.
Training on augumented user 136539 10/50 current_auc = 0.5063920454545454
User 136539 AUC after training: 0.5035511363636364
User 136539 does not improve AUC. Reverting changes.
Training on augumented user 59804 11/50 current_auc = 0.5063920454545454
User 59804 AUC after training: 0.5063920454545454
User 59804 does not improve AUC. Reverting changes.
Training on augumented user 131503 12/50 current_auc = 0.5063920454545454
User 131503 AUC after training: 0.5049715909090909
User 131503 does not improve AUC. Reverting changes.
Training on augumented user 112002 13/50 current_auc = 0.5063920454545454
User 112002 AUC after training: 0.5063920454545454
User 112002 does not improve AUC. Reverting changes.
Training on augumented user 43312 14/50 current_auc = 0.5063920454545454
User 43312 AUC after training: 0.5063920454545454
User 43312 does not improve AUC. Reverting changes.
Training on augumented user 43755 15/50 current_auc = 0.5063920454545454
User 43755 AUC after training: 0.5033143939393939
User 43755 does not improve AUC. Reverting changes.
Training on augumented user 128676 16/50 current_auc = 0.5063920454545454
User 128676 AUC after training: 0.5049715909090909
User 128676 does not improve AUC. Reverting changes.
Training on augumented user 54618 17/50 current_auc = 0.5063920454545454
User 54618 AUC after training: 0.5049715909090908
User 54618 does not improve AUC. Reverting changes.
Training on augumented user 79027 18/50 current_auc = 0.5063920454545454
User 79027 AUC after training: 0.5054450757575757
User 79027 does not improve AUC. Reverting changes.
Training on augumented user 12778 19/50 current_auc = 0.5063920454545454
User 12778 AUC after training: 0.5071022727272728
User 12778 improves AUC. Keeping the model.
Training on augumented user 113946 20/50 current_auc = 0.5071022727272728
User 113946 AUC after training: 0.5042613636363636
User 113946 does not improve AUC. Reverting changes.
Training on augumented user 15796 21/50 current_auc = 0.5071022727272728
User 15796 AUC after training: 0.5080492424242424
User 15796 improves AUC. Keeping the model.
Training on augumented user 129573 22/50 current_auc = 0.5080492424242424
User 129573 AUC after training: 0.5075757575757576
User 129573 does not improve AUC. Reverting changes.
Training on augumented user 70715 23/50 current_auc = 0.5080492424242424
User 70715 AUC after training: 0.5061553030303031
User 70715 does not improve AUC. Reverting changes.
Training on augumented user 56859 24/50 current_auc = 0.5080492424242424
User 56859 AUC after training: 0.5080492424242424
User 56859 does not improve AUC. Reverting changes.
Training on augumented user 94346 25/50 current_auc = 0.5080492424242424
User 94346 AUC after training: 0.5075757575757576
User 94346 does not improve AUC. Reverting changes.
Training on augumented user 132547 26/50 current_auc = 0.5080492424242424
User 132547 AUC after training: 0.5080492424242424
User 132547 does not improve AUC. Reverting changes.
Training on augumented user 101215 27/50 current_auc = 0.5080492424242424
User 101215 AUC after training: 0.5071022727272727
User 101215 does not improve AUC. Reverting changes.
Training on augumented user 7994 28/50 current_auc = 0.5080492424242424
User 7994 AUC after training: 0.5075757575757576
User 7994 does not improve AUC. Reverting changes.
Training on augumented user 58566 29/50 current_auc = 0.5080492424242424
User 58566 AUC after training: 0.5075757575757576
User 58566 does not improve AUC. Reverting changes.
Training on augumented user 36094 30/50 current_auc = 0.5080492424242424
User 36094 AUC after training: 0.5071022727272727
User 36094 does not improve AUC. Reverting changes.
Training on augumented user 103526 31/50 current_auc = 0.5080492424242424
User 103526 AUC after training: 0.506155303030303
User 103526 does not improve AUC. Reverting changes.
Training on augumented user 23751 32/50 current_auc = 0.5080492424242424
User 23751 AUC after training: 0.5075757575757576
User 23751 does not improve AUC. Reverting changes.
Training on augumented user 32069 33/50 current_auc = 0.5080492424242424
User 32069 AUC after training: 0.5089962121212122
User 32069 improves AUC. Keeping the model.
Training on augumented user 9669 34/50 current_auc = 0.5089962121212122
User 9669 AUC after training: 0.5080492424242424
User 9669 does not improve AUC. Reverting changes.
Training on augumented user 20640 35/50 current_auc = 0.5089962121212122
User 20640 AUC after training: 0.509469696969697
User 20640 improves AUC. Keeping the model.
Training on augumented user 34731 36/50 current_auc = 0.509469696969697
User 34731 AUC after training: 0.509469696969697
User 34731 does not improve AUC. Reverting changes.
Training on augumented user 5698 37/50 current_auc = 0.509469696969697
User 5698 AUC after training: 0.508996212121212
User 5698 does not improve AUC. Reverting changes.
Training on augumented user 12339 38/50 current_auc = 0.509469696969697
User 12339 AUC after training: 0.5089962121212122
User 12339 does not improve AUC. Reverting changes.
Training on augumented user 108759 39/50 current_auc = 0.509469696969697
User 108759 AUC after training: 0.509469696969697
User 108759 does not improve AUC. Reverting changes.
Training on augumented user 123416 40/50 current_auc = 0.509469696969697
User 123416 AUC after training: 0.5075757575757576
User 123416 does not improve AUC. Reverting changes.
Training on augumented user 28897 41/50 current_auc = 0.509469696969697
User 28897 AUC after training: 0.5080492424242424
User 28897 does not improve AUC. Reverting changes.
Training on augumented user 72672 42/50 current_auc = 0.509469696969697
User 72672 AUC after training: 0.5071022727272727
User 72672 does not improve AUC. Reverting changes.
Training on augumented user 78426 43/50 current_auc = 0.509469696969697
User 78426 AUC after training: 0.5099431818181819
User 78426 improves AUC. Keeping the model.
Training on augumented user 95658 44/50 current_auc = 0.5099431818181819
User 95658 AUC after training: 0.5085227272727273
User 95658 does not improve AUC. Reverting changes.
Training on augumented user 56995 45/50 current_auc = 0.5099431818181819
User 56995 AUC after training: 0.5085227272727273
User 56995 does not improve AUC. Reverting changes.
Training on augumented user 87966 46/50 current_auc = 0.5099431818181819
User 87966 AUC after training: 0.5080492424242424
User 87966 does not improve AUC. Reverting changes.
Training on augumented user 40496 47/50 current_auc = 0.5099431818181819
User 40496 AUC after training: 0.509469696969697
User 40496 does not improve AUC. Reverting changes.
Training on augumented user 72665 48/50 current_auc = 0.5099431818181819
User 72665 AUC after training: 0.506155303030303
User 72665 does not improve AUC. Reverting changes.
Training on augumented user 28956 49/50 current_auc = 0.5099431818181819
User 28956 AUC after training: 0.5080492424242424
User 28956 does not improve AUC. Reverting changes.
[2024-12-02 19:54:02.524521] start test user 61739 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:03.090828] start test user 61739 249/568 recall augumented users by random, augumented_users = [19007, 30751, 137558, 74513, 117349, 15761, 69351, 63681, 129595, 102077, 11494, 62634, 94748, 109022, 55107, 95634, 118055, 87898, 115172, 91928, 59064, 2546, 16014, 9889, 113481, 64669, 22186, 111211, 102636, 58466, 132093, 80965, 122312, 121952, 37848, 69764, 26516, 79492, 6820, 129152, 62908, 25705, 12911, 101501, 72761, 11551, 55450, 29946, 61584, 54173]
[2024-12-02 19:54:03.105542] user = 61739 Cloud 249/568
[2024-12-02 19:54:03.127538] user = 61739 Local 249/568
[2024-12-02 19:54:03.238118] user = 61739 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:05.517153] user = 61739 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7302752293577982
Training on augumented user 19007 0/50 current_auc = 0.7302752293577982
User 19007 AUC after training: 0.731559633027523
User 19007 improves AUC. Keeping the model.
Training on augumented user 30751 1/50 current_auc = 0.731559633027523
User 30751 AUC after training: 0.7311926605504587
User 30751 does not improve AUC. Reverting changes.
Training on augumented user 137558 2/50 current_auc = 0.731559633027523
User 137558 AUC after training: 0.7311926605504587
User 137558 does not improve AUC. Reverting changes.
Training on augumented user 74513 3/50 current_auc = 0.731559633027523
User 74513 AUC after training: 0.7310091743119266
User 74513 does not improve AUC. Reverting changes.
Training on augumented user 117349 4/50 current_auc = 0.731559633027523
User 117349 AUC after training: 0.7320183486238533
User 117349 improves AUC. Keeping the model.
Training on augumented user 15761 5/50 current_auc = 0.7320183486238533
User 15761 AUC after training: 0.731743119266055
User 15761 does not improve AUC. Reverting changes.
Training on augumented user 69351 6/50 current_auc = 0.7320183486238533
User 69351 AUC after training: 0.7320183486238532
User 69351 does not improve AUC. Reverting changes.
Training on augumented user 63681 7/50 current_auc = 0.7320183486238533
User 63681 AUC after training: 0.7320183486238532
User 63681 does not improve AUC. Reverting changes.
Training on augumented user 129595 8/50 current_auc = 0.7320183486238533
User 129595 AUC after training: 0.7322935779816514
User 129595 improves AUC. Keeping the model.
Training on augumented user 102077 9/50 current_auc = 0.7322935779816514
User 102077 AUC after training: 0.7322935779816514
User 102077 does not improve AUC. Reverting changes.
Training on augumented user 11494 10/50 current_auc = 0.7322935779816514
User 11494 AUC after training: 0.731651376146789
User 11494 does not improve AUC. Reverting changes.
Training on augumented user 62634 11/50 current_auc = 0.7322935779816514
User 62634 AUC after training: 0.7321100917431193
User 62634 does not improve AUC. Reverting changes.
Training on augumented user 94748 12/50 current_auc = 0.7322935779816514
User 94748 AUC after training: 0.7322935779816513
User 94748 does not improve AUC. Reverting changes.
Training on augumented user 109022 13/50 current_auc = 0.7322935779816514
User 109022 AUC after training: 0.7327522935779817
User 109022 improves AUC. Keeping the model.
Training on augumented user 55107 14/50 current_auc = 0.7327522935779817
User 55107 AUC after training: 0.7312844036697248
User 55107 does not improve AUC. Reverting changes.
Training on augumented user 95634 15/50 current_auc = 0.7327522935779817
User 95634 AUC after training: 0.7324770642201834
User 95634 does not improve AUC. Reverting changes.
Training on augumented user 118055 16/50 current_auc = 0.7327522935779817
User 118055 AUC after training: 0.7328440366972477
User 118055 improves AUC. Keeping the model.
Training on augumented user 87898 17/50 current_auc = 0.7328440366972477
User 87898 AUC after training: 0.7322935779816514
User 87898 does not improve AUC. Reverting changes.
Training on augumented user 115172 18/50 current_auc = 0.7328440366972477
User 115172 AUC after training: 0.7322935779816514
User 115172 does not improve AUC. Reverting changes.
Training on augumented user 91928 19/50 current_auc = 0.7328440366972477
User 91928 AUC after training: 0.7326605504587157
User 91928 does not improve AUC. Reverting changes.
Training on augumented user 59064 20/50 current_auc = 0.7328440366972477
User 59064 AUC after training: 0.7326605504587157
User 59064 does not improve AUC. Reverting changes.
Training on augumented user 2546 21/50 current_auc = 0.7328440366972477
User 2546 AUC after training: 0.7321100917431193
User 2546 does not improve AUC. Reverting changes.
Training on augumented user 16014 22/50 current_auc = 0.7328440366972477
User 16014 AUC after training: 0.7324770642201834
User 16014 does not improve AUC. Reverting changes.
Training on augumented user 9889 23/50 current_auc = 0.7328440366972477
User 9889 AUC after training: 0.7332110091743119
User 9889 improves AUC. Keeping the model.
Training on augumented user 113481 24/50 current_auc = 0.7332110091743119
User 113481 AUC after training: 0.7321100917431193
User 113481 does not improve AUC. Reverting changes.
Training on augumented user 64669 25/50 current_auc = 0.7332110091743119
User 64669 AUC after training: 0.7328440366972477
User 64669 does not improve AUC. Reverting changes.
Training on augumented user 22186 26/50 current_auc = 0.7332110091743119
User 22186 AUC after training: 0.7322935779816514
User 22186 does not improve AUC. Reverting changes.
Training on augumented user 111211 27/50 current_auc = 0.7332110091743119
User 111211 AUC after training: 0.7326605504587155
User 111211 does not improve AUC. Reverting changes.
Training on augumented user 102636 28/50 current_auc = 0.7332110091743119
User 102636 AUC after training: 0.7329357798165138
User 102636 does not improve AUC. Reverting changes.
Training on augumented user 58466 29/50 current_auc = 0.7332110091743119
User 58466 AUC after training: 0.7324770642201835
User 58466 does not improve AUC. Reverting changes.
Training on augumented user 132093 30/50 current_auc = 0.7332110091743119
User 132093 AUC after training: 0.7322935779816514
User 132093 does not improve AUC. Reverting changes.
Training on augumented user 80965 31/50 current_auc = 0.7332110091743119
User 80965 AUC after training: 0.7328440366972476
User 80965 does not improve AUC. Reverting changes.
Training on augumented user 122312 32/50 current_auc = 0.7332110091743119
User 122312 AUC after training: 0.7330275229357798
User 122312 does not improve AUC. Reverting changes.
Training on augumented user 121952 33/50 current_auc = 0.7332110091743119
User 121952 AUC after training: 0.7324770642201835
User 121952 does not improve AUC. Reverting changes.
Training on augumented user 37848 34/50 current_auc = 0.7332110091743119
User 37848 AUC after training: 0.7324770642201835
User 37848 does not improve AUC. Reverting changes.
Training on augumented user 69764 35/50 current_auc = 0.7332110091743119
User 69764 AUC after training: 0.7332110091743119
User 69764 does not improve AUC. Reverting changes.
Training on augumented user 26516 36/50 current_auc = 0.7332110091743119
User 26516 AUC after training: 0.7325688073394495
User 26516 does not improve AUC. Reverting changes.
Training on augumented user 79492 37/50 current_auc = 0.7332110091743119
User 79492 AUC after training: 0.7332110091743119
User 79492 does not improve AUC. Reverting changes.
Training on augumented user 6820 38/50 current_auc = 0.7332110091743119
User 6820 AUC after training: 0.7330275229357798
User 6820 does not improve AUC. Reverting changes.
Training on augumented user 129152 39/50 current_auc = 0.7332110091743119
User 129152 AUC after training: 0.7327522935779817
User 129152 does not improve AUC. Reverting changes.
Training on augumented user 62908 40/50 current_auc = 0.7332110091743119
User 62908 AUC after training: 0.7330275229357798
User 62908 does not improve AUC. Reverting changes.
Training on augumented user 25705 41/50 current_auc = 0.7332110091743119
User 25705 AUC after training: 0.7326605504587157
User 25705 does not improve AUC. Reverting changes.
Training on augumented user 12911 42/50 current_auc = 0.7332110091743119
User 12911 AUC after training: 0.7328440366972476
User 12911 does not improve AUC. Reverting changes.
Training on augumented user 101501 43/50 current_auc = 0.7332110091743119
User 101501 AUC after training: 0.7332110091743119
User 101501 does not improve AUC. Reverting changes.
Training on augumented user 72761 44/50 current_auc = 0.7332110091743119
User 72761 AUC after training: 0.7328440366972477
User 72761 does not improve AUC. Reverting changes.
Training on augumented user 11551 45/50 current_auc = 0.7332110091743119
User 11551 AUC after training: 0.7322935779816514
User 11551 does not improve AUC. Reverting changes.
Training on augumented user 55450 46/50 current_auc = 0.7332110091743119
User 55450 AUC after training: 0.7321100917431193
User 55450 does not improve AUC. Reverting changes.
Training on augumented user 29946 47/50 current_auc = 0.7332110091743119
User 29946 AUC after training: 0.7328440366972476
User 29946 does not improve AUC. Reverting changes.
Training on augumented user 61584 48/50 current_auc = 0.7332110091743119
User 61584 AUC after training: 0.7326605504587157
User 61584 does not improve AUC. Reverting changes.
Training on augumented user 54173 49/50 current_auc = 0.7332110091743119
User 54173 AUC after training: 0.7324770642201835
User 54173 does not improve AUC. Reverting changes.
[2024-12-02 19:54:30.472935] start test user 61841 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:30.901813] start test user 61841 250/568 recall augumented users by random, augumented_users = [134761, 110541, 70120, 70891, 51679, 76320, 28212, 41203, 116318, 105603, 37699, 39530, 129885, 109947, 125161, 114758, 69301, 9373, 111500, 75431, 46287, 52004, 121293, 72397, 112796, 70359, 9605, 100568, 39436, 86015, 63374, 76552, 79661, 117754, 97325, 135693, 30582, 65990, 54101, 110892, 97258, 60081, 43700, 6084, 131393, 66017, 83624, 122318, 9125, 113982]
[2024-12-02 19:54:30.917479] user = 61841 Cloud 250/568
[2024-12-02 19:54:30.926658] user = 61841 Local 250/568
[2024-12-02 19:54:31.033089] user = 61841 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:33.562462] user = 61841 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 134761 0/50 current_auc = 0.0
User 134761 AUC after training: 0.0
User 134761 does not improve AUC. Reverting changes.
Training on augumented user 110541 1/50 current_auc = 0.0
User 110541 AUC after training: 0.0
User 110541 does not improve AUC. Reverting changes.
Training on augumented user 70120 2/50 current_auc = 0.0
User 70120 AUC after training: 0.0
User 70120 does not improve AUC. Reverting changes.
Training on augumented user 70891 3/50 current_auc = 0.0
User 70891 AUC after training: 0.0
User 70891 does not improve AUC. Reverting changes.
Training on augumented user 51679 4/50 current_auc = 0.0
User 51679 AUC after training: 0.0
User 51679 does not improve AUC. Reverting changes.
Training on augumented user 76320 5/50 current_auc = 0.0
User 76320 AUC after training: 0.0
User 76320 does not improve AUC. Reverting changes.
Training on augumented user 28212 6/50 current_auc = 0.0
User 28212 AUC after training: 0.0
User 28212 does not improve AUC. Reverting changes.
Training on augumented user 41203 7/50 current_auc = 0.0
User 41203 AUC after training: 0.0
User 41203 does not improve AUC. Reverting changes.
Training on augumented user 116318 8/50 current_auc = 0.0
User 116318 AUC after training: 0.0
User 116318 does not improve AUC. Reverting changes.
Training on augumented user 105603 9/50 current_auc = 0.0
User 105603 AUC after training: 0.0
User 105603 does not improve AUC. Reverting changes.
Training on augumented user 37699 10/50 current_auc = 0.0
User 37699 AUC after training: 0.0
User 37699 does not improve AUC. Reverting changes.
Training on augumented user 39530 11/50 current_auc = 0.0
User 39530 AUC after training: 0.0
User 39530 does not improve AUC. Reverting changes.
Training on augumented user 129885 12/50 current_auc = 0.0
User 129885 AUC after training: 0.0
User 129885 does not improve AUC. Reverting changes.
Training on augumented user 109947 13/50 current_auc = 0.0
User 109947 AUC after training: 0.0
User 109947 does not improve AUC. Reverting changes.
Training on augumented user 125161 14/50 current_auc = 0.0
User 125161 AUC after training: 0.0
User 125161 does not improve AUC. Reverting changes.
Training on augumented user 114758 15/50 current_auc = 0.0
User 114758 AUC after training: 0.0
User 114758 does not improve AUC. Reverting changes.
Training on augumented user 69301 16/50 current_auc = 0.0
User 69301 AUC after training: 0.0
User 69301 does not improve AUC. Reverting changes.
Training on augumented user 9373 17/50 current_auc = 0.0
User 9373 AUC after training: 0.0
User 9373 does not improve AUC. Reverting changes.
Training on augumented user 111500 18/50 current_auc = 0.0
User 111500 AUC after training: 0.0
User 111500 does not improve AUC. Reverting changes.
Training on augumented user 75431 19/50 current_auc = 0.0
User 75431 AUC after training: 0.0
User 75431 does not improve AUC. Reverting changes.
Training on augumented user 46287 20/50 current_auc = 0.0
User 46287 AUC after training: 0.0
User 46287 does not improve AUC. Reverting changes.
Training on augumented user 52004 21/50 current_auc = 0.0
User 52004 AUC after training: 0.0
User 52004 does not improve AUC. Reverting changes.
Training on augumented user 121293 22/50 current_auc = 0.0
User 121293 AUC after training: 0.0
User 121293 does not improve AUC. Reverting changes.
Training on augumented user 72397 23/50 current_auc = 0.0
User 72397 AUC after training: 0.0
User 72397 does not improve AUC. Reverting changes.
Training on augumented user 112796 24/50 current_auc = 0.0
User 112796 AUC after training: 0.0
User 112796 does not improve AUC. Reverting changes.
Training on augumented user 70359 25/50 current_auc = 0.0
User 70359 AUC after training: 0.0
User 70359 does not improve AUC. Reverting changes.
Training on augumented user 9605 26/50 current_auc = 0.0
User 9605 AUC after training: 0.0
User 9605 does not improve AUC. Reverting changes.
Training on augumented user 100568 27/50 current_auc = 0.0
User 100568 AUC after training: 0.0
User 100568 does not improve AUC. Reverting changes.
Training on augumented user 39436 28/50 current_auc = 0.0
User 39436 AUC after training: 0.0
User 39436 does not improve AUC. Reverting changes.
Training on augumented user 86015 29/50 current_auc = 0.0
User 86015 AUC after training: 0.0
User 86015 does not improve AUC. Reverting changes.
Training on augumented user 63374 30/50 current_auc = 0.0
User 63374 AUC after training: 0.0
User 63374 does not improve AUC. Reverting changes.
Training on augumented user 76552 31/50 current_auc = 0.0
User 76552 AUC after training: 0.0
User 76552 does not improve AUC. Reverting changes.
Training on augumented user 79661 32/50 current_auc = 0.0
User 79661 AUC after training: 0.0
User 79661 does not improve AUC. Reverting changes.
Training on augumented user 117754 33/50 current_auc = 0.0
User 117754 AUC after training: 0.0
User 117754 does not improve AUC. Reverting changes.
Training on augumented user 97325 34/50 current_auc = 0.0
User 97325 AUC after training: 0.0
User 97325 does not improve AUC. Reverting changes.
Training on augumented user 135693 35/50 current_auc = 0.0
User 135693 AUC after training: 0.0
User 135693 does not improve AUC. Reverting changes.
Training on augumented user 30582 36/50 current_auc = 0.0
User 30582 AUC after training: 0.0
User 30582 does not improve AUC. Reverting changes.
Training on augumented user 65990 37/50 current_auc = 0.0
User 65990 AUC after training: 0.0
User 65990 does not improve AUC. Reverting changes.
Training on augumented user 54101 38/50 current_auc = 0.0
User 54101 AUC after training: 0.0
User 54101 does not improve AUC. Reverting changes.
Training on augumented user 110892 39/50 current_auc = 0.0
User 110892 AUC after training: 0.0
User 110892 does not improve AUC. Reverting changes.
Training on augumented user 97258 40/50 current_auc = 0.0
User 97258 AUC after training: 0.0
User 97258 does not improve AUC. Reverting changes.
Training on augumented user 60081 41/50 current_auc = 0.0
User 60081 AUC after training: 0.0
User 60081 does not improve AUC. Reverting changes.
Training on augumented user 43700 42/50 current_auc = 0.0
User 43700 AUC after training: 0.0
User 43700 does not improve AUC. Reverting changes.
Training on augumented user 6084 43/50 current_auc = 0.0
User 6084 AUC after training: 0.0
User 6084 does not improve AUC. Reverting changes.
Training on augumented user 131393 44/50 current_auc = 0.0
User 131393 AUC after training: 0.0
User 131393 does not improve AUC. Reverting changes.
Training on augumented user 66017 45/50 current_auc = 0.0
User 66017 AUC after training: 0.0
User 66017 does not improve AUC. Reverting changes.
Training on augumented user 83624 46/50 current_auc = 0.0
User 83624 AUC after training: 0.0
User 83624 does not improve AUC. Reverting changes.
Training on augumented user 122318 47/50 current_auc = 0.0
User 122318 AUC after training: 0.0
User 122318 does not improve AUC. Reverting changes.
Training on augumented user 9125 48/50 current_auc = 0.0
User 9125 AUC after training: 0.0
User 9125 does not improve AUC. Reverting changes.
Training on augumented user 113982 49/50 current_auc = 0.0
User 113982 AUC after training: 0.0
User 113982 does not improve AUC. Reverting changes.
[2024-12-02 19:55:03.556818] start test user 61843 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:04.528868] start test user 61843 251/568 recall augumented users by random, augumented_users = [92496, 41418, 16704, 22901, 15618, 98281, 44452, 25598, 83084, 70480, 119215, 113542, 3504, 45347, 86613, 54688, 87039, 20530, 107773, 50080, 67671, 10474, 6382, 16240, 21957, 28035, 54438, 34378, 65595, 39587, 6136, 79417, 73877, 73682, 135245, 107617, 62682, 135878, 69213, 62109, 71755, 71519, 10988, 104130, 114932, 111667, 24367, 28762, 80371, 12427]
[2024-12-02 19:55:04.562606] user = 61843 Cloud 251/568
[2024-12-02 19:55:04.593334] user = 61843 Local 251/568
[2024-12-02 19:55:04.672153] user = 61843 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:08.036242] user = 61843 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 92496 0/50 current_auc = 0.5833333333333334
User 92496 AUC after training: 0.5833333333333334
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 41418 1/50 current_auc = 0.5833333333333334
User 41418 AUC after training: 0.5833333333333334
User 41418 does not improve AUC. Reverting changes.
Training on augumented user 16704 2/50 current_auc = 0.5833333333333334
User 16704 AUC after training: 0.5833333333333334
User 16704 does not improve AUC. Reverting changes.
Training on augumented user 22901 3/50 current_auc = 0.5833333333333334
User 22901 AUC after training: 0.5833333333333334
User 22901 does not improve AUC. Reverting changes.
Training on augumented user 15618 4/50 current_auc = 0.5833333333333334
User 15618 AUC after training: 0.5833333333333334
User 15618 does not improve AUC. Reverting changes.
Training on augumented user 98281 5/50 current_auc = 0.5833333333333334
User 98281 AUC after training: 0.5833333333333334
User 98281 does not improve AUC. Reverting changes.
Training on augumented user 44452 6/50 current_auc = 0.5833333333333334
User 44452 AUC after training: 0.5833333333333334
User 44452 does not improve AUC. Reverting changes.
Training on augumented user 25598 7/50 current_auc = 0.5833333333333334
User 25598 AUC after training: 0.5833333333333334
User 25598 does not improve AUC. Reverting changes.
Training on augumented user 83084 8/50 current_auc = 0.5833333333333334
User 83084 AUC after training: 0.5833333333333334
User 83084 does not improve AUC. Reverting changes.
Training on augumented user 70480 9/50 current_auc = 0.5833333333333334
User 70480 AUC after training: 0.5833333333333334
User 70480 does not improve AUC. Reverting changes.
Training on augumented user 119215 10/50 current_auc = 0.5833333333333334
User 119215 AUC after training: 0.5833333333333334
User 119215 does not improve AUC. Reverting changes.
Training on augumented user 113542 11/50 current_auc = 0.5833333333333334
User 113542 AUC after training: 0.5833333333333334
User 113542 does not improve AUC. Reverting changes.
Training on augumented user 3504 12/50 current_auc = 0.5833333333333334
User 3504 AUC after training: 0.5833333333333334
User 3504 does not improve AUC. Reverting changes.
Training on augumented user 45347 13/50 current_auc = 0.5833333333333334
User 45347 AUC after training: 0.5833333333333334
User 45347 does not improve AUC. Reverting changes.
Training on augumented user 86613 14/50 current_auc = 0.5833333333333334
User 86613 AUC after training: 0.5833333333333334
User 86613 does not improve AUC. Reverting changes.
Training on augumented user 54688 15/50 current_auc = 0.5833333333333334
User 54688 AUC after training: 0.5833333333333334
User 54688 does not improve AUC. Reverting changes.
Training on augumented user 87039 16/50 current_auc = 0.5833333333333334
User 87039 AUC after training: 0.5833333333333334
User 87039 does not improve AUC. Reverting changes.
Training on augumented user 20530 17/50 current_auc = 0.5833333333333334
User 20530 AUC after training: 0.5833333333333334
User 20530 does not improve AUC. Reverting changes.
Training on augumented user 107773 18/50 current_auc = 0.5833333333333334
User 107773 AUC after training: 0.5833333333333334
User 107773 does not improve AUC. Reverting changes.
Training on augumented user 50080 19/50 current_auc = 0.5833333333333334
User 50080 AUC after training: 0.5833333333333334
User 50080 does not improve AUC. Reverting changes.
Training on augumented user 67671 20/50 current_auc = 0.5833333333333334
User 67671 AUC after training: 0.5833333333333334
User 67671 does not improve AUC. Reverting changes.
Training on augumented user 10474 21/50 current_auc = 0.5833333333333334
User 10474 AUC after training: 0.5833333333333334
User 10474 does not improve AUC. Reverting changes.
Training on augumented user 6382 22/50 current_auc = 0.5833333333333334
User 6382 AUC after training: 0.5833333333333334
User 6382 does not improve AUC. Reverting changes.
Training on augumented user 16240 23/50 current_auc = 0.5833333333333334
User 16240 AUC after training: 0.5833333333333334
User 16240 does not improve AUC. Reverting changes.
Training on augumented user 21957 24/50 current_auc = 0.5833333333333334
User 21957 AUC after training: 0.5833333333333334
User 21957 does not improve AUC. Reverting changes.
Training on augumented user 28035 25/50 current_auc = 0.5833333333333334
User 28035 AUC after training: 0.5833333333333334
User 28035 does not improve AUC. Reverting changes.
Training on augumented user 54438 26/50 current_auc = 0.5833333333333334
User 54438 AUC after training: 0.5833333333333334
User 54438 does not improve AUC. Reverting changes.
Training on augumented user 34378 27/50 current_auc = 0.5833333333333334
User 34378 AUC after training: 0.5833333333333334
User 34378 does not improve AUC. Reverting changes.
Training on augumented user 65595 28/50 current_auc = 0.5833333333333334
User 65595 AUC after training: 0.5833333333333334
User 65595 does not improve AUC. Reverting changes.
Training on augumented user 39587 29/50 current_auc = 0.5833333333333334
User 39587 AUC after training: 0.5833333333333334
User 39587 does not improve AUC. Reverting changes.
Training on augumented user 6136 30/50 current_auc = 0.5833333333333334
User 6136 AUC after training: 0.5833333333333334
User 6136 does not improve AUC. Reverting changes.
Training on augumented user 79417 31/50 current_auc = 0.5833333333333334
User 79417 AUC after training: 0.5833333333333334
User 79417 does not improve AUC. Reverting changes.
Training on augumented user 73877 32/50 current_auc = 0.5833333333333334
User 73877 AUC after training: 0.5833333333333334
User 73877 does not improve AUC. Reverting changes.
Training on augumented user 73682 33/50 current_auc = 0.5833333333333334
User 73682 AUC after training: 0.5833333333333334
User 73682 does not improve AUC. Reverting changes.
Training on augumented user 135245 34/50 current_auc = 0.5833333333333334
User 135245 AUC after training: 0.5833333333333334
User 135245 does not improve AUC. Reverting changes.
Training on augumented user 107617 35/50 current_auc = 0.5833333333333334
User 107617 AUC after training: 0.5833333333333334
User 107617 does not improve AUC. Reverting changes.
Training on augumented user 62682 36/50 current_auc = 0.5833333333333334
User 62682 AUC after training: 0.5833333333333334
User 62682 does not improve AUC. Reverting changes.
Training on augumented user 135878 37/50 current_auc = 0.5833333333333334
User 135878 AUC after training: 0.5833333333333334
User 135878 does not improve AUC. Reverting changes.
Training on augumented user 69213 38/50 current_auc = 0.5833333333333334
User 69213 AUC after training: 0.5833333333333334
User 69213 does not improve AUC. Reverting changes.
Training on augumented user 62109 39/50 current_auc = 0.5833333333333334
User 62109 AUC after training: 0.5833333333333334
User 62109 does not improve AUC. Reverting changes.
Training on augumented user 71755 40/50 current_auc = 0.5833333333333334
User 71755 AUC after training: 0.5833333333333334
User 71755 does not improve AUC. Reverting changes.
Training on augumented user 71519 41/50 current_auc = 0.5833333333333334
User 71519 AUC after training: 0.5833333333333334
User 71519 does not improve AUC. Reverting changes.
Training on augumented user 10988 42/50 current_auc = 0.5833333333333334
User 10988 AUC after training: 0.5833333333333334
User 10988 does not improve AUC. Reverting changes.
Training on augumented user 104130 43/50 current_auc = 0.5833333333333334
User 104130 AUC after training: 0.5833333333333334
User 104130 does not improve AUC. Reverting changes.
Training on augumented user 114932 44/50 current_auc = 0.5833333333333334
User 114932 AUC after training: 0.5833333333333334
User 114932 does not improve AUC. Reverting changes.
Training on augumented user 111667 45/50 current_auc = 0.5833333333333334
User 111667 AUC after training: 0.5833333333333334
User 111667 does not improve AUC. Reverting changes.
Training on augumented user 24367 46/50 current_auc = 0.5833333333333334
User 24367 AUC after training: 0.5833333333333334
User 24367 does not improve AUC. Reverting changes.
Training on augumented user 28762 47/50 current_auc = 0.5833333333333334
User 28762 AUC after training: 0.5833333333333334
User 28762 does not improve AUC. Reverting changes.
Training on augumented user 80371 48/50 current_auc = 0.5833333333333334
User 80371 AUC after training: 0.5833333333333334
User 80371 does not improve AUC. Reverting changes.
Training on augumented user 12427 49/50 current_auc = 0.5833333333333334
User 12427 AUC after training: 0.5833333333333334
User 12427 does not improve AUC. Reverting changes.
[2024-12-02 19:55:34.713036] start test user 61902 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:35.138257] start test user 61902 252/568 recall augumented users by random, augumented_users = [83629, 127658, 123277, 104808, 128211, 15224, 95379, 60896, 95669, 12468, 10257, 53667, 13197, 95208, 1121, 51392, 125848, 120835, 125451, 57949, 43027, 19660, 84031, 101189, 24775, 100670, 120012, 116797, 89779, 27950, 128839, 12257, 120862, 50765, 32074, 44271, 9049, 5619, 79407, 127248, 46742, 61583, 108150, 11956, 62807, 93896, 14415, 70149, 138134, 86223]
[2024-12-02 19:55:35.153696] user = 61902 Cloud 252/568
[2024-12-02 19:55:35.163929] user = 61902 Local 252/568
[2024-12-02 19:55:35.241772] user = 61902 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:36.513085] user = 61902 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7000000000000001
Training on augumented user 83629 0/50 current_auc = 0.7000000000000001
User 83629 AUC after training: 0.7000000000000001
User 83629 does not improve AUC. Reverting changes.
Training on augumented user 127658 1/50 current_auc = 0.7000000000000001
User 127658 AUC after training: 0.7000000000000001
User 127658 does not improve AUC. Reverting changes.
Training on augumented user 123277 2/50 current_auc = 0.7000000000000001
User 123277 AUC after training: 0.7000000000000001
User 123277 does not improve AUC. Reverting changes.
Training on augumented user 104808 3/50 current_auc = 0.7000000000000001
User 104808 AUC after training: 0.7000000000000001
User 104808 does not improve AUC. Reverting changes.
Training on augumented user 128211 4/50 current_auc = 0.7000000000000001
User 128211 AUC after training: 0.7000000000000001
User 128211 does not improve AUC. Reverting changes.
Training on augumented user 15224 5/50 current_auc = 0.7000000000000001
User 15224 AUC after training: 0.7000000000000001
User 15224 does not improve AUC. Reverting changes.
Training on augumented user 95379 6/50 current_auc = 0.7000000000000001
User 95379 AUC after training: 0.7000000000000001
User 95379 does not improve AUC. Reverting changes.
Training on augumented user 60896 7/50 current_auc = 0.7000000000000001
User 60896 AUC after training: 0.7000000000000001
User 60896 does not improve AUC. Reverting changes.
Training on augumented user 95669 8/50 current_auc = 0.7000000000000001
User 95669 AUC after training: 0.7000000000000001
User 95669 does not improve AUC. Reverting changes.
Training on augumented user 12468 9/50 current_auc = 0.7000000000000001
User 12468 AUC after training: 0.7000000000000001
User 12468 does not improve AUC. Reverting changes.
Training on augumented user 10257 10/50 current_auc = 0.7000000000000001
User 10257 AUC after training: 0.7000000000000001
User 10257 does not improve AUC. Reverting changes.
Training on augumented user 53667 11/50 current_auc = 0.7000000000000001
User 53667 AUC after training: 0.7000000000000001
User 53667 does not improve AUC. Reverting changes.
Training on augumented user 13197 12/50 current_auc = 0.7000000000000001
User 13197 AUC after training: 0.7000000000000001
User 13197 does not improve AUC. Reverting changes.
Training on augumented user 95208 13/50 current_auc = 0.7000000000000001
User 95208 AUC after training: 0.7000000000000001
User 95208 does not improve AUC. Reverting changes.
Training on augumented user 1121 14/50 current_auc = 0.7000000000000001
User 1121 AUC after training: 0.7000000000000001
User 1121 does not improve AUC. Reverting changes.
Training on augumented user 51392 15/50 current_auc = 0.7000000000000001
User 51392 AUC after training: 0.7000000000000001
User 51392 does not improve AUC. Reverting changes.
Training on augumented user 125848 16/50 current_auc = 0.7000000000000001
User 125848 AUC after training: 0.7000000000000001
User 125848 does not improve AUC. Reverting changes.
Training on augumented user 120835 17/50 current_auc = 0.7000000000000001
User 120835 AUC after training: 0.7000000000000001
User 120835 does not improve AUC. Reverting changes.
Training on augumented user 125451 18/50 current_auc = 0.7000000000000001
User 125451 AUC after training: 0.7000000000000001
User 125451 does not improve AUC. Reverting changes.
Training on augumented user 57949 19/50 current_auc = 0.7000000000000001
User 57949 AUC after training: 0.7000000000000001
User 57949 does not improve AUC. Reverting changes.
Training on augumented user 43027 20/50 current_auc = 0.7000000000000001
User 43027 AUC after training: 0.7000000000000001
User 43027 does not improve AUC. Reverting changes.
Training on augumented user 19660 21/50 current_auc = 0.7000000000000001
User 19660 AUC after training: 0.7000000000000001
User 19660 does not improve AUC. Reverting changes.
Training on augumented user 84031 22/50 current_auc = 0.7000000000000001
User 84031 AUC after training: 0.7000000000000001
User 84031 does not improve AUC. Reverting changes.
Training on augumented user 101189 23/50 current_auc = 0.7000000000000001
User 101189 AUC after training: 0.7000000000000001
User 101189 does not improve AUC. Reverting changes.
Training on augumented user 24775 24/50 current_auc = 0.7000000000000001
User 24775 AUC after training: 0.7000000000000001
User 24775 does not improve AUC. Reverting changes.
Training on augumented user 100670 25/50 current_auc = 0.7000000000000001
User 100670 AUC after training: 0.7000000000000001
User 100670 does not improve AUC. Reverting changes.
Training on augumented user 120012 26/50 current_auc = 0.7000000000000001
User 120012 AUC after training: 0.7000000000000001
User 120012 does not improve AUC. Reverting changes.
Training on augumented user 116797 27/50 current_auc = 0.7000000000000001
User 116797 AUC after training: 0.7000000000000001
User 116797 does not improve AUC. Reverting changes.
Training on augumented user 89779 28/50 current_auc = 0.7000000000000001
User 89779 AUC after training: 0.7000000000000001
User 89779 does not improve AUC. Reverting changes.
Training on augumented user 27950 29/50 current_auc = 0.7000000000000001
User 27950 AUC after training: 0.7000000000000001
User 27950 does not improve AUC. Reverting changes.
Training on augumented user 128839 30/50 current_auc = 0.7000000000000001
User 128839 AUC after training: 0.7000000000000001
User 128839 does not improve AUC. Reverting changes.
Training on augumented user 12257 31/50 current_auc = 0.7000000000000001
User 12257 AUC after training: 0.7000000000000001
User 12257 does not improve AUC. Reverting changes.
Training on augumented user 120862 32/50 current_auc = 0.7000000000000001
User 120862 AUC after training: 0.7000000000000001
User 120862 does not improve AUC. Reverting changes.
Training on augumented user 50765 33/50 current_auc = 0.7000000000000001
User 50765 AUC after training: 0.7000000000000001
User 50765 does not improve AUC. Reverting changes.
Training on augumented user 32074 34/50 current_auc = 0.7000000000000001
User 32074 AUC after training: 0.7000000000000001
User 32074 does not improve AUC. Reverting changes.
Training on augumented user 44271 35/50 current_auc = 0.7000000000000001
User 44271 AUC after training: 0.7000000000000001
User 44271 does not improve AUC. Reverting changes.
Training on augumented user 9049 36/50 current_auc = 0.7000000000000001
User 9049 AUC after training: 0.7000000000000001
User 9049 does not improve AUC. Reverting changes.
Training on augumented user 5619 37/50 current_auc = 0.7000000000000001
User 5619 AUC after training: 0.7000000000000001
User 5619 does not improve AUC. Reverting changes.
Training on augumented user 79407 38/50 current_auc = 0.7000000000000001
User 79407 AUC after training: 0.7000000000000001
User 79407 does not improve AUC. Reverting changes.
Training on augumented user 127248 39/50 current_auc = 0.7000000000000001
User 127248 AUC after training: 0.7000000000000001
User 127248 does not improve AUC. Reverting changes.
Training on augumented user 46742 40/50 current_auc = 0.7000000000000001
User 46742 AUC after training: 0.7000000000000001
User 46742 does not improve AUC. Reverting changes.
Training on augumented user 61583 41/50 current_auc = 0.7000000000000001
User 61583 AUC after training: 0.7000000000000001
User 61583 does not improve AUC. Reverting changes.
Training on augumented user 108150 42/50 current_auc = 0.7000000000000001
User 108150 AUC after training: 0.7000000000000001
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 11956 43/50 current_auc = 0.7000000000000001
User 11956 AUC after training: 0.7000000000000001
User 11956 does not improve AUC. Reverting changes.
Training on augumented user 62807 44/50 current_auc = 0.7000000000000001
User 62807 AUC after training: 0.7000000000000001
User 62807 does not improve AUC. Reverting changes.
Training on augumented user 93896 45/50 current_auc = 0.7000000000000001
User 93896 AUC after training: 0.7000000000000001
User 93896 does not improve AUC. Reverting changes.
Training on augumented user 14415 46/50 current_auc = 0.7000000000000001
User 14415 AUC after training: 0.7000000000000001
User 14415 does not improve AUC. Reverting changes.
Training on augumented user 70149 47/50 current_auc = 0.7000000000000001
User 70149 AUC after training: 0.7000000000000001
User 70149 does not improve AUC. Reverting changes.
Training on augumented user 138134 48/50 current_auc = 0.7000000000000001
User 138134 AUC after training: 0.7000000000000001
User 138134 does not improve AUC. Reverting changes.
Training on augumented user 86223 49/50 current_auc = 0.7000000000000001
User 86223 AUC after training: 0.7000000000000001
User 86223 does not improve AUC. Reverting changes.
[2024-12-02 19:56:00.376486] start test user 61939 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:00.791567] start test user 61939 253/568 recall augumented users by random, augumented_users = [113986, 89822, 118117, 57060, 98424, 92108, 80978, 50532, 9687, 107790, 32144, 51835, 36294, 128159, 87899, 80282, 115195, 97508, 22468, 115639, 41845, 91141, 11967, 4439, 54447, 128605, 14122, 24616, 48587, 29063, 34184, 27382, 13072, 3224, 37946, 34437, 124571, 15202, 106048, 99943, 45364, 26809, 43917, 55542, 46994, 109862, 23113, 60232, 26469, 93798]
[2024-12-02 19:56:00.806319] user = 61939 Cloud 253/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:00.812755] user = 61939 Local 253/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:00.835653] user = 61939 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:03.994367] user = 61939 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 113986 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113986 AUC after training: 0.5
User 113986 does not improve AUC. Reverting changes.
Training on augumented user 89822 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89822 AUC after training: 0.5
User 89822 does not improve AUC. Reverting changes.
Training on augumented user 118117 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118117 AUC after training: 0.5
User 118117 does not improve AUC. Reverting changes.
Training on augumented user 57060 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57060 AUC after training: 0.5
User 57060 does not improve AUC. Reverting changes.
Training on augumented user 98424 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98424 AUC after training: 0.5
User 98424 does not improve AUC. Reverting changes.
Training on augumented user 92108 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92108 AUC after training: 0.5
User 92108 does not improve AUC. Reverting changes.
Training on augumented user 80978 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80978 AUC after training: 0.5
User 80978 does not improve AUC. Reverting changes.
Training on augumented user 50532 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50532 AUC after training: 0.5
User 50532 does not improve AUC. Reverting changes.
Training on augumented user 9687 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9687 AUC after training: 0.5
User 9687 does not improve AUC. Reverting changes.
Training on augumented user 107790 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107790 AUC after training: 0.5
User 107790 does not improve AUC. Reverting changes.
Training on augumented user 32144 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32144 AUC after training: 0.5
User 32144 does not improve AUC. Reverting changes.
Training on augumented user 51835 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51835 AUC after training: 0.5
User 51835 does not improve AUC. Reverting changes.
Training on augumented user 36294 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36294 AUC after training: 0.5
User 36294 does not improve AUC. Reverting changes.
Training on augumented user 128159 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128159 AUC after training: 0.5
User 128159 does not improve AUC. Reverting changes.
Training on augumented user 87899 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87899 AUC after training: 0.5
User 87899 does not improve AUC. Reverting changes.
Training on augumented user 80282 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80282 AUC after training: 0.5
User 80282 does not improve AUC. Reverting changes.
Training on augumented user 115195 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115195 AUC after training: 0.5
User 115195 does not improve AUC. Reverting changes.
Training on augumented user 97508 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97508 AUC after training: 0.5
User 97508 does not improve AUC. Reverting changes.
Training on augumented user 22468 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22468 AUC after training: 0.5
User 22468 does not improve AUC. Reverting changes.
Training on augumented user 115639 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115639 AUC after training: 0.5
User 115639 does not improve AUC. Reverting changes.
Training on augumented user 41845 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41845 AUC after training: 0.5
User 41845 does not improve AUC. Reverting changes.
Training on augumented user 91141 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91141 AUC after training: 0.5
User 91141 does not improve AUC. Reverting changes.
Training on augumented user 11967 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11967 AUC after training: 0.5
User 11967 does not improve AUC. Reverting changes.
Training on augumented user 4439 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4439 AUC after training: 0.5
User 4439 does not improve AUC. Reverting changes.
Training on augumented user 54447 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54447 AUC after training: 0.5
User 54447 does not improve AUC. Reverting changes.
Training on augumented user 128605 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128605 AUC after training: 0.5
User 128605 does not improve AUC. Reverting changes.
Training on augumented user 14122 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14122 AUC after training: 0.5
User 14122 does not improve AUC. Reverting changes.
Training on augumented user 24616 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24616 AUC after training: 0.5
User 24616 does not improve AUC. Reverting changes.
Training on augumented user 48587 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48587 AUC after training: 0.5
User 48587 does not improve AUC. Reverting changes.
Training on augumented user 29063 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29063 AUC after training: 0.5
User 29063 does not improve AUC. Reverting changes.
Training on augumented user 34184 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34184 AUC after training: 0.5
User 34184 does not improve AUC. Reverting changes.
Training on augumented user 27382 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27382 AUC after training: 0.5
User 27382 does not improve AUC. Reverting changes.
Training on augumented user 13072 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13072 AUC after training: 0.5
User 13072 does not improve AUC. Reverting changes.
Training on augumented user 3224 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3224 AUC after training: 0.5
User 3224 does not improve AUC. Reverting changes.
Training on augumented user 37946 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37946 AUC after training: 0.5
User 37946 does not improve AUC. Reverting changes.
Training on augumented user 34437 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34437 AUC after training: 0.5
User 34437 does not improve AUC. Reverting changes.
Training on augumented user 124571 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124571 AUC after training: 0.5
User 124571 does not improve AUC. Reverting changes.
Training on augumented user 15202 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15202 AUC after training: 0.5
User 15202 does not improve AUC. Reverting changes.
Training on augumented user 106048 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106048 AUC after training: 0.5
User 106048 does not improve AUC. Reverting changes.
Training on augumented user 99943 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99943 AUC after training: 0.5
User 99943 does not improve AUC. Reverting changes.
Training on augumented user 45364 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45364 AUC after training: 0.5
User 45364 does not improve AUC. Reverting changes.
Training on augumented user 26809 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26809 AUC after training: 0.5
User 26809 does not improve AUC. Reverting changes.
Training on augumented user 43917 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43917 AUC after training: 0.5
User 43917 does not improve AUC. Reverting changes.
Training on augumented user 55542 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55542 AUC after training: 0.5
User 55542 does not improve AUC. Reverting changes.
Training on augumented user 46994 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46994 AUC after training: 0.5
User 46994 does not improve AUC. Reverting changes.
Training on augumented user 109862 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109862 AUC after training: 0.5
User 109862 does not improve AUC. Reverting changes.
Training on augumented user 23113 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23113 AUC after training: 0.5
User 23113 does not improve AUC. Reverting changes.
Training on augumented user 60232 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60232 AUC after training: 0.5
User 60232 does not improve AUC. Reverting changes.
Training on augumented user 26469 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26469 AUC after training: 0.5
User 26469 does not improve AUC. Reverting changes.
Training on augumented user 93798 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93798 AUC after training: 0.5
User 93798 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:34.783542] start test user 61947 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:35.204865] start test user 61947 254/568 recall augumented users by random, augumented_users = [3308, 64447, 24114, 128924, 106335, 43402, 59932, 20064, 106720, 28284, 29094, 31664, 112942, 80158, 82541, 58668, 96454, 36961, 58511, 57884, 121064, 26715, 36956, 4114, 135759, 134599, 21439, 123448, 45065, 108880, 28022, 105919, 64413, 133796, 113164, 108280, 70687, 137718, 116040, 43927, 135330, 15531, 61472, 80422, 3555, 96495, 47205, 35242, 46350, 6941]
[2024-12-02 19:56:35.219295] user = 61947 Cloud 254/568
[2024-12-02 19:56:35.228630] user = 61947 Local 254/568
[2024-12-02 19:56:35.277454] user = 61947 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:37.532337] user = 61947 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.761904761904762
Training on augumented user 3308 0/50 current_auc = 0.761904761904762
User 3308 AUC after training: 0.761904761904762
User 3308 does not improve AUC. Reverting changes.
Training on augumented user 64447 1/50 current_auc = 0.761904761904762
User 64447 AUC after training: 0.761904761904762
User 64447 does not improve AUC. Reverting changes.
Training on augumented user 24114 2/50 current_auc = 0.761904761904762
User 24114 AUC after training: 0.761904761904762
User 24114 does not improve AUC. Reverting changes.
Training on augumented user 128924 3/50 current_auc = 0.761904761904762
User 128924 AUC after training: 0.761904761904762
User 128924 does not improve AUC. Reverting changes.
Training on augumented user 106335 4/50 current_auc = 0.761904761904762
User 106335 AUC after training: 0.761904761904762
User 106335 does not improve AUC. Reverting changes.
Training on augumented user 43402 5/50 current_auc = 0.761904761904762
User 43402 AUC after training: 0.761904761904762
User 43402 does not improve AUC. Reverting changes.
Training on augumented user 59932 6/50 current_auc = 0.761904761904762
User 59932 AUC after training: 0.761904761904762
User 59932 does not improve AUC. Reverting changes.
Training on augumented user 20064 7/50 current_auc = 0.761904761904762
User 20064 AUC after training: 0.761904761904762
User 20064 does not improve AUC. Reverting changes.
Training on augumented user 106720 8/50 current_auc = 0.761904761904762
User 106720 AUC after training: 0.761904761904762
User 106720 does not improve AUC. Reverting changes.
Training on augumented user 28284 9/50 current_auc = 0.761904761904762
User 28284 AUC after training: 0.761904761904762
User 28284 does not improve AUC. Reverting changes.
Training on augumented user 29094 10/50 current_auc = 0.761904761904762
User 29094 AUC after training: 0.761904761904762
User 29094 does not improve AUC. Reverting changes.
Training on augumented user 31664 11/50 current_auc = 0.761904761904762
User 31664 AUC after training: 0.761904761904762
User 31664 does not improve AUC. Reverting changes.
Training on augumented user 112942 12/50 current_auc = 0.761904761904762
User 112942 AUC after training: 0.761904761904762
User 112942 does not improve AUC. Reverting changes.
Training on augumented user 80158 13/50 current_auc = 0.761904761904762
User 80158 AUC after training: 0.761904761904762
User 80158 does not improve AUC. Reverting changes.
Training on augumented user 82541 14/50 current_auc = 0.761904761904762
User 82541 AUC after training: 0.761904761904762
User 82541 does not improve AUC. Reverting changes.
Training on augumented user 58668 15/50 current_auc = 0.761904761904762
User 58668 AUC after training: 0.761904761904762
User 58668 does not improve AUC. Reverting changes.
Training on augumented user 96454 16/50 current_auc = 0.761904761904762
User 96454 AUC after training: 0.761904761904762
User 96454 does not improve AUC. Reverting changes.
Training on augumented user 36961 17/50 current_auc = 0.761904761904762
User 36961 AUC after training: 0.761904761904762
User 36961 does not improve AUC. Reverting changes.
Training on augumented user 58511 18/50 current_auc = 0.761904761904762
User 58511 AUC after training: 0.761904761904762
User 58511 does not improve AUC. Reverting changes.
Training on augumented user 57884 19/50 current_auc = 0.761904761904762
User 57884 AUC after training: 0.761904761904762
User 57884 does not improve AUC. Reverting changes.
Training on augumented user 121064 20/50 current_auc = 0.761904761904762
User 121064 AUC after training: 0.761904761904762
User 121064 does not improve AUC. Reverting changes.
Training on augumented user 26715 21/50 current_auc = 0.761904761904762
User 26715 AUC after training: 0.761904761904762
User 26715 does not improve AUC. Reverting changes.
Training on augumented user 36956 22/50 current_auc = 0.761904761904762
User 36956 AUC after training: 0.761904761904762
User 36956 does not improve AUC. Reverting changes.
Training on augumented user 4114 23/50 current_auc = 0.761904761904762
User 4114 AUC after training: 0.761904761904762
User 4114 does not improve AUC. Reverting changes.
Training on augumented user 135759 24/50 current_auc = 0.761904761904762
User 135759 AUC after training: 0.761904761904762
User 135759 does not improve AUC. Reverting changes.
Training on augumented user 134599 25/50 current_auc = 0.761904761904762
User 134599 AUC after training: 0.761904761904762
User 134599 does not improve AUC. Reverting changes.
Training on augumented user 21439 26/50 current_auc = 0.761904761904762
User 21439 AUC after training: 0.761904761904762
User 21439 does not improve AUC. Reverting changes.
Training on augumented user 123448 27/50 current_auc = 0.761904761904762
User 123448 AUC after training: 0.761904761904762
User 123448 does not improve AUC. Reverting changes.
Training on augumented user 45065 28/50 current_auc = 0.761904761904762
User 45065 AUC after training: 0.761904761904762
User 45065 does not improve AUC. Reverting changes.
Training on augumented user 108880 29/50 current_auc = 0.761904761904762
User 108880 AUC after training: 0.761904761904762
User 108880 does not improve AUC. Reverting changes.
Training on augumented user 28022 30/50 current_auc = 0.761904761904762
User 28022 AUC after training: 0.761904761904762
User 28022 does not improve AUC. Reverting changes.
Training on augumented user 105919 31/50 current_auc = 0.761904761904762
User 105919 AUC after training: 0.761904761904762
User 105919 does not improve AUC. Reverting changes.
Training on augumented user 64413 32/50 current_auc = 0.761904761904762
User 64413 AUC after training: 0.761904761904762
User 64413 does not improve AUC. Reverting changes.
Training on augumented user 133796 33/50 current_auc = 0.761904761904762
User 133796 AUC after training: 0.761904761904762
User 133796 does not improve AUC. Reverting changes.
Training on augumented user 113164 34/50 current_auc = 0.761904761904762
User 113164 AUC after training: 0.761904761904762
User 113164 does not improve AUC. Reverting changes.
Training on augumented user 108280 35/50 current_auc = 0.761904761904762
User 108280 AUC after training: 0.761904761904762
User 108280 does not improve AUC. Reverting changes.
Training on augumented user 70687 36/50 current_auc = 0.761904761904762
User 70687 AUC after training: 0.761904761904762
User 70687 does not improve AUC. Reverting changes.
Training on augumented user 137718 37/50 current_auc = 0.761904761904762
User 137718 AUC after training: 0.761904761904762
User 137718 does not improve AUC. Reverting changes.
Training on augumented user 116040 38/50 current_auc = 0.761904761904762
User 116040 AUC after training: 0.761904761904762
User 116040 does not improve AUC. Reverting changes.
Training on augumented user 43927 39/50 current_auc = 0.761904761904762
User 43927 AUC after training: 0.761904761904762
User 43927 does not improve AUC. Reverting changes.
Training on augumented user 135330 40/50 current_auc = 0.761904761904762
User 135330 AUC after training: 0.761904761904762
User 135330 does not improve AUC. Reverting changes.
Training on augumented user 15531 41/50 current_auc = 0.761904761904762
User 15531 AUC after training: 0.761904761904762
User 15531 does not improve AUC. Reverting changes.
Training on augumented user 61472 42/50 current_auc = 0.761904761904762
User 61472 AUC after training: 0.761904761904762
User 61472 does not improve AUC. Reverting changes.
Training on augumented user 80422 43/50 current_auc = 0.761904761904762
User 80422 AUC after training: 0.761904761904762
User 80422 does not improve AUC. Reverting changes.
Training on augumented user 3555 44/50 current_auc = 0.761904761904762
User 3555 AUC after training: 0.761904761904762
User 3555 does not improve AUC. Reverting changes.
Training on augumented user 96495 45/50 current_auc = 0.761904761904762
User 96495 AUC after training: 0.761904761904762
User 96495 does not improve AUC. Reverting changes.
Training on augumented user 47205 46/50 current_auc = 0.761904761904762
User 47205 AUC after training: 0.761904761904762
User 47205 does not improve AUC. Reverting changes.
Training on augumented user 35242 47/50 current_auc = 0.761904761904762
User 35242 AUC after training: 0.761904761904762
User 35242 does not improve AUC. Reverting changes.
Training on augumented user 46350 48/50 current_auc = 0.761904761904762
User 46350 AUC after training: 0.761904761904762
User 46350 does not improve AUC. Reverting changes.
Training on augumented user 6941 49/50 current_auc = 0.761904761904762
User 6941 AUC after training: 0.761904761904762
User 6941 does not improve AUC. Reverting changes.
[2024-12-02 19:57:02.527766] start test user 61951 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:02.956805] start test user 61951 255/568 recall augumented users by random, augumented_users = [37989, 91690, 112276, 93893, 11548, 103098, 114117, 60853, 112990, 48470, 89398, 12079, 84951, 46910, 132151, 51342, 21991, 94559, 51996, 83625, 101173, 19267, 655, 2244, 104992, 60462, 28944, 137105, 25010, 65383, 4862, 86380, 87597, 31830, 35521, 133831, 125011, 42469, 37627, 85457, 68955, 8723, 98217, 96617, 95913, 54279, 99382, 105007, 46215, 28641]
[2024-12-02 19:57:02.972884] user = 61951 Cloud 255/568
[2024-12-02 19:57:02.983111] user = 61951 Local 255/568
[2024-12-02 19:57:03.126678] user = 61951 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:05.325541] user = 61951 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4181818181818182
Training on augumented user 37989 0/50 current_auc = 0.4181818181818182
User 37989 AUC after training: 0.4254545454545455
User 37989 improves AUC. Keeping the model.
Training on augumented user 91690 1/50 current_auc = 0.4254545454545455
User 91690 AUC after training: 0.4254545454545455
User 91690 does not improve AUC. Reverting changes.
Training on augumented user 112276 2/50 current_auc = 0.4254545454545455
User 112276 AUC after training: 0.4254545454545455
User 112276 does not improve AUC. Reverting changes.
Training on augumented user 93893 3/50 current_auc = 0.4254545454545455
User 93893 AUC after training: 0.4254545454545455
User 93893 does not improve AUC. Reverting changes.
Training on augumented user 11548 4/50 current_auc = 0.4254545454545455
User 11548 AUC after training: 0.4181818181818182
User 11548 does not improve AUC. Reverting changes.
Training on augumented user 103098 5/50 current_auc = 0.4254545454545455
User 103098 AUC after training: 0.4181818181818182
User 103098 does not improve AUC. Reverting changes.
Training on augumented user 114117 6/50 current_auc = 0.4254545454545455
User 114117 AUC after training: 0.4254545454545455
User 114117 does not improve AUC. Reverting changes.
Training on augumented user 60853 7/50 current_auc = 0.4254545454545455
User 60853 AUC after training: 0.4254545454545455
User 60853 does not improve AUC. Reverting changes.
Training on augumented user 112990 8/50 current_auc = 0.4254545454545455
User 112990 AUC after training: 0.4254545454545455
User 112990 does not improve AUC. Reverting changes.
Training on augumented user 48470 9/50 current_auc = 0.4254545454545455
User 48470 AUC after training: 0.4218181818181818
User 48470 does not improve AUC. Reverting changes.
Training on augumented user 89398 10/50 current_auc = 0.4254545454545455
User 89398 AUC after training: 0.4254545454545455
User 89398 does not improve AUC. Reverting changes.
Training on augumented user 12079 11/50 current_auc = 0.4254545454545455
User 12079 AUC after training: 0.4218181818181818
User 12079 does not improve AUC. Reverting changes.
Training on augumented user 84951 12/50 current_auc = 0.4254545454545455
User 84951 AUC after training: 0.4254545454545455
User 84951 does not improve AUC. Reverting changes.
Training on augumented user 46910 13/50 current_auc = 0.4254545454545455
User 46910 AUC after training: 0.4254545454545455
User 46910 does not improve AUC. Reverting changes.
Training on augumented user 132151 14/50 current_auc = 0.4254545454545455
User 132151 AUC after training: 0.4181818181818182
User 132151 does not improve AUC. Reverting changes.
Training on augumented user 51342 15/50 current_auc = 0.4254545454545455
User 51342 AUC after training: 0.4254545454545455
User 51342 does not improve AUC. Reverting changes.
Training on augumented user 21991 16/50 current_auc = 0.4254545454545455
User 21991 AUC after training: 0.4254545454545455
User 21991 does not improve AUC. Reverting changes.
Training on augumented user 94559 17/50 current_auc = 0.4254545454545455
User 94559 AUC after training: 0.4254545454545455
User 94559 does not improve AUC. Reverting changes.
Training on augumented user 51996 18/50 current_auc = 0.4254545454545455
User 51996 AUC after training: 0.4254545454545455
User 51996 does not improve AUC. Reverting changes.
Training on augumented user 83625 19/50 current_auc = 0.4254545454545455
User 83625 AUC after training: 0.4290909090909091
User 83625 improves AUC. Keeping the model.
Training on augumented user 101173 20/50 current_auc = 0.4290909090909091
User 101173 AUC after training: 0.4290909090909091
User 101173 does not improve AUC. Reverting changes.
Training on augumented user 19267 21/50 current_auc = 0.4290909090909091
User 19267 AUC after training: 0.4290909090909091
User 19267 does not improve AUC. Reverting changes.
Training on augumented user 655 22/50 current_auc = 0.4290909090909091
User 655 AUC after training: 0.4290909090909091
User 655 does not improve AUC. Reverting changes.
Training on augumented user 2244 23/50 current_auc = 0.4290909090909091
User 2244 AUC after training: 0.4254545454545455
User 2244 does not improve AUC. Reverting changes.
Training on augumented user 104992 24/50 current_auc = 0.4290909090909091
User 104992 AUC after training: 0.4218181818181818
User 104992 does not improve AUC. Reverting changes.
Training on augumented user 60462 25/50 current_auc = 0.4290909090909091
User 60462 AUC after training: 0.4254545454545455
User 60462 does not improve AUC. Reverting changes.
Training on augumented user 28944 26/50 current_auc = 0.4290909090909091
User 28944 AUC after training: 0.4290909090909091
User 28944 does not improve AUC. Reverting changes.
Training on augumented user 137105 27/50 current_auc = 0.4290909090909091
User 137105 AUC after training: 0.4254545454545455
User 137105 does not improve AUC. Reverting changes.
Training on augumented user 25010 28/50 current_auc = 0.4290909090909091
User 25010 AUC after training: 0.4290909090909091
User 25010 does not improve AUC. Reverting changes.
Training on augumented user 65383 29/50 current_auc = 0.4290909090909091
User 65383 AUC after training: 0.4254545454545455
User 65383 does not improve AUC. Reverting changes.
Training on augumented user 4862 30/50 current_auc = 0.4290909090909091
User 4862 AUC after training: 0.4290909090909091
User 4862 does not improve AUC. Reverting changes.
Training on augumented user 86380 31/50 current_auc = 0.4290909090909091
User 86380 AUC after training: 0.4254545454545455
User 86380 does not improve AUC. Reverting changes.
Training on augumented user 87597 32/50 current_auc = 0.4290909090909091
User 87597 AUC after training: 0.4290909090909091
User 87597 does not improve AUC. Reverting changes.
Training on augumented user 31830 33/50 current_auc = 0.4290909090909091
User 31830 AUC after training: 0.4290909090909091
User 31830 does not improve AUC. Reverting changes.
Training on augumented user 35521 34/50 current_auc = 0.4290909090909091
User 35521 AUC after training: 0.4290909090909091
User 35521 does not improve AUC. Reverting changes.
Training on augumented user 133831 35/50 current_auc = 0.4290909090909091
User 133831 AUC after training: 0.4290909090909091
User 133831 does not improve AUC. Reverting changes.
Training on augumented user 125011 36/50 current_auc = 0.4290909090909091
User 125011 AUC after training: 0.4290909090909091
User 125011 does not improve AUC. Reverting changes.
Training on augumented user 42469 37/50 current_auc = 0.4290909090909091
User 42469 AUC after training: 0.4181818181818182
User 42469 does not improve AUC. Reverting changes.
Training on augumented user 37627 38/50 current_auc = 0.4290909090909091
User 37627 AUC after training: 0.4290909090909091
User 37627 does not improve AUC. Reverting changes.
Training on augumented user 85457 39/50 current_auc = 0.4290909090909091
User 85457 AUC after training: 0.4290909090909091
User 85457 does not improve AUC. Reverting changes.
Training on augumented user 68955 40/50 current_auc = 0.4290909090909091
User 68955 AUC after training: 0.4254545454545455
User 68955 does not improve AUC. Reverting changes.
Training on augumented user 8723 41/50 current_auc = 0.4290909090909091
User 8723 AUC after training: 0.4290909090909091
User 8723 does not improve AUC. Reverting changes.
Training on augumented user 98217 42/50 current_auc = 0.4290909090909091
User 98217 AUC after training: 0.4290909090909091
User 98217 does not improve AUC. Reverting changes.
Training on augumented user 96617 43/50 current_auc = 0.4290909090909091
User 96617 AUC after training: 0.4290909090909091
User 96617 does not improve AUC. Reverting changes.
Training on augumented user 95913 44/50 current_auc = 0.4290909090909091
User 95913 AUC after training: 0.43272727272727274
User 95913 improves AUC. Keeping the model.
Training on augumented user 54279 45/50 current_auc = 0.43272727272727274
User 54279 AUC after training: 0.4363636363636364
User 54279 improves AUC. Keeping the model.
Training on augumented user 99382 46/50 current_auc = 0.4363636363636364
User 99382 AUC after training: 0.4509090909090909
User 99382 improves AUC. Keeping the model.
Training on augumented user 105007 47/50 current_auc = 0.4509090909090909
User 105007 AUC after training: 0.4509090909090909
User 105007 does not improve AUC. Reverting changes.
Training on augumented user 46215 48/50 current_auc = 0.4509090909090909
User 46215 AUC after training: 0.44727272727272727
User 46215 does not improve AUC. Reverting changes.
Training on augumented user 28641 49/50 current_auc = 0.4509090909090909
User 28641 AUC after training: 0.4509090909090909
User 28641 does not improve AUC. Reverting changes.
[2024-12-02 19:57:34.273172] start test user 61962 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:35.074356] start test user 61962 256/568 recall augumented users by random, augumented_users = [136921, 9811, 14221, 27052, 134456, 132178, 47012, 72033, 7461, 72066, 66434, 81291, 136436, 41110, 124986, 42826, 64665, 127412, 21396, 109896, 105620, 51681, 39523, 7780, 97575, 67498, 129810, 123401, 7597, 32049, 94310, 137973, 111023, 78900, 125741, 18058, 58019, 43904, 5094, 89971, 100519, 44566, 110784, 32767, 28428, 36214, 22195, 136969, 88962, 121197]
[2024-12-02 19:57:35.117942] user = 61962 Cloud 256/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:35.125070] user = 61962 Local 256/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:35.170153] user = 61962 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:37.364540] user = 61962 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 136921 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136921 AUC after training: 0.5
User 136921 does not improve AUC. Reverting changes.
Training on augumented user 9811 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9811 AUC after training: 0.5
User 9811 does not improve AUC. Reverting changes.
Training on augumented user 14221 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14221 AUC after training: 0.5
User 14221 does not improve AUC. Reverting changes.
Training on augumented user 27052 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27052 AUC after training: 0.5
User 27052 does not improve AUC. Reverting changes.
Training on augumented user 134456 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134456 AUC after training: 0.5
User 134456 does not improve AUC. Reverting changes.
Training on augumented user 132178 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132178 AUC after training: 0.5
User 132178 does not improve AUC. Reverting changes.
Training on augumented user 47012 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47012 AUC after training: 0.5
User 47012 does not improve AUC. Reverting changes.
Training on augumented user 72033 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72033 AUC after training: 0.5
User 72033 does not improve AUC. Reverting changes.
Training on augumented user 7461 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7461 AUC after training: 0.5
User 7461 does not improve AUC. Reverting changes.
Training on augumented user 72066 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72066 AUC after training: 0.5
User 72066 does not improve AUC. Reverting changes.
Training on augumented user 66434 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66434 AUC after training: 0.5
User 66434 does not improve AUC. Reverting changes.
Training on augumented user 81291 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81291 AUC after training: 0.5
User 81291 does not improve AUC. Reverting changes.
Training on augumented user 136436 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136436 AUC after training: 0.5
User 136436 does not improve AUC. Reverting changes.
Training on augumented user 41110 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41110 AUC after training: 0.5
User 41110 does not improve AUC. Reverting changes.
Training on augumented user 124986 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124986 AUC after training: 0.5
User 124986 does not improve AUC. Reverting changes.
Training on augumented user 42826 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42826 AUC after training: 0.5
User 42826 does not improve AUC. Reverting changes.
Training on augumented user 64665 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64665 AUC after training: 0.5
User 64665 does not improve AUC. Reverting changes.
Training on augumented user 127412 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127412 AUC after training: 0.5
User 127412 does not improve AUC. Reverting changes.
Training on augumented user 21396 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21396 AUC after training: 0.5
User 21396 does not improve AUC. Reverting changes.
Training on augumented user 109896 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109896 AUC after training: 0.5
User 109896 does not improve AUC. Reverting changes.
Training on augumented user 105620 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105620 AUC after training: 0.5
User 105620 does not improve AUC. Reverting changes.
Training on augumented user 51681 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51681 AUC after training: 0.5
User 51681 does not improve AUC. Reverting changes.
Training on augumented user 39523 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39523 AUC after training: 0.5
User 39523 does not improve AUC. Reverting changes.
Training on augumented user 7780 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7780 AUC after training: 0.5
User 7780 does not improve AUC. Reverting changes.
Training on augumented user 97575 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97575 AUC after training: 0.5
User 97575 does not improve AUC. Reverting changes.
Training on augumented user 67498 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67498 AUC after training: 0.5
User 67498 does not improve AUC. Reverting changes.
Training on augumented user 129810 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129810 AUC after training: 0.5
User 129810 does not improve AUC. Reverting changes.
Training on augumented user 123401 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123401 AUC after training: 0.5
User 123401 does not improve AUC. Reverting changes.
Training on augumented user 7597 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7597 AUC after training: 0.5
User 7597 does not improve AUC. Reverting changes.
Training on augumented user 32049 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32049 AUC after training: 0.5
User 32049 does not improve AUC. Reverting changes.
Training on augumented user 94310 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94310 AUC after training: 0.5
User 94310 does not improve AUC. Reverting changes.
Training on augumented user 137973 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137973 AUC after training: 0.5
User 137973 does not improve AUC. Reverting changes.
Training on augumented user 111023 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111023 AUC after training: 0.5
User 111023 does not improve AUC. Reverting changes.
Training on augumented user 78900 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78900 AUC after training: 0.5
User 78900 does not improve AUC. Reverting changes.
Training on augumented user 125741 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125741 AUC after training: 0.5
User 125741 does not improve AUC. Reverting changes.
Training on augumented user 18058 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18058 AUC after training: 0.5
User 18058 does not improve AUC. Reverting changes.
Training on augumented user 58019 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58019 AUC after training: 0.5
User 58019 does not improve AUC. Reverting changes.
Training on augumented user 43904 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43904 AUC after training: 0.5
User 43904 does not improve AUC. Reverting changes.
Training on augumented user 5094 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5094 AUC after training: 0.5
User 5094 does not improve AUC. Reverting changes.
Training on augumented user 89971 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89971 AUC after training: 0.5
User 89971 does not improve AUC. Reverting changes.
Training on augumented user 100519 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100519 AUC after training: 0.5
User 100519 does not improve AUC. Reverting changes.
Training on augumented user 44566 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44566 AUC after training: 0.5
User 44566 does not improve AUC. Reverting changes.
Training on augumented user 110784 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110784 AUC after training: 0.5
User 110784 does not improve AUC. Reverting changes.
Training on augumented user 32767 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32767 AUC after training: 0.5
User 32767 does not improve AUC. Reverting changes.
Training on augumented user 28428 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28428 AUC after training: 0.5
User 28428 does not improve AUC. Reverting changes.
Training on augumented user 36214 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36214 AUC after training: 0.5
User 36214 does not improve AUC. Reverting changes.
Training on augumented user 22195 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22195 AUC after training: 0.5
User 22195 does not improve AUC. Reverting changes.
Training on augumented user 136969 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136969 AUC after training: 0.5
User 136969 does not improve AUC. Reverting changes.
Training on augumented user 88962 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88962 AUC after training: 0.5
User 88962 does not improve AUC. Reverting changes.
Training on augumented user 121197 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121197 AUC after training: 0.5
User 121197 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:06.680079] start test user 61968 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:07.461455] start test user 61968 257/568 recall augumented users by random, augumented_users = [27997, 86814, 64583, 80481, 121965, 80361, 23613, 33819, 86663, 121184, 52909, 126640, 9893, 114035, 128740, 108552, 88444, 104625, 37630, 101599, 71200, 104435, 90828, 111780, 119923, 113906, 58570, 127843, 82797, 81567, 34513, 20666, 27413, 94902, 73305, 58008, 39251, 75510, 62196, 44278, 61756, 62684, 41592, 129196, 85620, 100107, 49824, 118104, 37801, 27186]
[2024-12-02 19:58:07.475928] user = 61968 Cloud 257/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:07.482864] user = 61968 Local 257/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:07.498292] user = 61968 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:10.451109] user = 61968 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 27997 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27997 AUC after training: 0.5
User 27997 does not improve AUC. Reverting changes.
Training on augumented user 86814 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86814 AUC after training: 0.5
User 86814 does not improve AUC. Reverting changes.
Training on augumented user 64583 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64583 AUC after training: 0.5
User 64583 does not improve AUC. Reverting changes.
Training on augumented user 80481 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80481 AUC after training: 0.5
User 80481 does not improve AUC. Reverting changes.
Training on augumented user 121965 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121965 AUC after training: 0.5
User 121965 does not improve AUC. Reverting changes.
Training on augumented user 80361 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80361 AUC after training: 0.5
User 80361 does not improve AUC. Reverting changes.
Training on augumented user 23613 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23613 AUC after training: 0.5
User 23613 does not improve AUC. Reverting changes.
Training on augumented user 33819 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33819 AUC after training: 0.5
User 33819 does not improve AUC. Reverting changes.
Training on augumented user 86663 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86663 AUC after training: 0.5
User 86663 does not improve AUC. Reverting changes.
Training on augumented user 121184 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121184 AUC after training: 0.5
User 121184 does not improve AUC. Reverting changes.
Training on augumented user 52909 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52909 AUC after training: 0.5
User 52909 does not improve AUC. Reverting changes.
Training on augumented user 126640 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126640 AUC after training: 0.5
User 126640 does not improve AUC. Reverting changes.
Training on augumented user 9893 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9893 AUC after training: 0.5
User 9893 does not improve AUC. Reverting changes.
Training on augumented user 114035 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114035 AUC after training: 0.5
User 114035 does not improve AUC. Reverting changes.
Training on augumented user 128740 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128740 AUC after training: 0.5
User 128740 does not improve AUC. Reverting changes.
Training on augumented user 108552 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108552 AUC after training: 0.5
User 108552 does not improve AUC. Reverting changes.
Training on augumented user 88444 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88444 AUC after training: 0.5
User 88444 does not improve AUC. Reverting changes.
Training on augumented user 104625 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104625 AUC after training: 0.5
User 104625 does not improve AUC. Reverting changes.
Training on augumented user 37630 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37630 AUC after training: 0.5
User 37630 does not improve AUC. Reverting changes.
Training on augumented user 101599 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101599 AUC after training: 0.5
User 101599 does not improve AUC. Reverting changes.
Training on augumented user 71200 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71200 AUC after training: 0.5
User 71200 does not improve AUC. Reverting changes.
Training on augumented user 104435 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104435 AUC after training: 0.5
User 104435 does not improve AUC. Reverting changes.
Training on augumented user 90828 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90828 AUC after training: 0.5
User 90828 does not improve AUC. Reverting changes.
Training on augumented user 111780 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111780 AUC after training: 0.5
User 111780 does not improve AUC. Reverting changes.
Training on augumented user 119923 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119923 AUC after training: 0.5
User 119923 does not improve AUC. Reverting changes.
Training on augumented user 113906 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113906 AUC after training: 0.5
User 113906 does not improve AUC. Reverting changes.
Training on augumented user 58570 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58570 AUC after training: 0.5
User 58570 does not improve AUC. Reverting changes.
Training on augumented user 127843 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127843 AUC after training: 0.5
User 127843 does not improve AUC. Reverting changes.
Training on augumented user 82797 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82797 AUC after training: 0.5
User 82797 does not improve AUC. Reverting changes.
Training on augumented user 81567 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81567 AUC after training: 0.5
User 81567 does not improve AUC. Reverting changes.
Training on augumented user 34513 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34513 AUC after training: 0.5
User 34513 does not improve AUC. Reverting changes.
Training on augumented user 20666 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20666 AUC after training: 0.5
User 20666 does not improve AUC. Reverting changes.
Training on augumented user 27413 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27413 AUC after training: 0.5
User 27413 does not improve AUC. Reverting changes.
Training on augumented user 94902 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94902 AUC after training: 0.5
User 94902 does not improve AUC. Reverting changes.
Training on augumented user 73305 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73305 AUC after training: 0.5
User 73305 does not improve AUC. Reverting changes.
Training on augumented user 58008 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58008 AUC after training: 0.5
User 58008 does not improve AUC. Reverting changes.
Training on augumented user 39251 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39251 AUC after training: 0.5
User 39251 does not improve AUC. Reverting changes.
Training on augumented user 75510 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75510 AUC after training: 0.5
User 75510 does not improve AUC. Reverting changes.
Training on augumented user 62196 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62196 AUC after training: 0.5
User 62196 does not improve AUC. Reverting changes.
Training on augumented user 44278 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44278 AUC after training: 0.5
User 44278 does not improve AUC. Reverting changes.
Training on augumented user 61756 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61756 AUC after training: 0.5
User 61756 does not improve AUC. Reverting changes.
Training on augumented user 62684 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62684 AUC after training: 0.5
User 62684 does not improve AUC. Reverting changes.
Training on augumented user 41592 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41592 AUC after training: 0.5
User 41592 does not improve AUC. Reverting changes.
Training on augumented user 129196 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129196 AUC after training: 0.5
User 129196 does not improve AUC. Reverting changes.
Training on augumented user 85620 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85620 AUC after training: 0.5
User 85620 does not improve AUC. Reverting changes.
Training on augumented user 100107 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100107 AUC after training: 0.5
User 100107 does not improve AUC. Reverting changes.
Training on augumented user 49824 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49824 AUC after training: 0.5
User 49824 does not improve AUC. Reverting changes.
Training on augumented user 118104 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118104 AUC after training: 0.5
User 118104 does not improve AUC. Reverting changes.
Training on augumented user 37801 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37801 AUC after training: 0.5
User 37801 does not improve AUC. Reverting changes.
Training on augumented user 27186 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27186 AUC after training: 0.5
User 27186 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:35.424821] start test user 62022 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:35.850551] start test user 62022 258/568 recall augumented users by random, augumented_users = [60755, 60106, 93700, 64331, 19403, 127275, 129204, 131896, 56188, 88808, 28923, 114271, 71586, 82567, 115685, 124587, 124225, 112250, 76877, 50866, 90160, 70469, 121920, 116704, 85066, 131822, 103069, 116677, 36643, 13734, 101274, 70720, 89752, 93007, 104945, 95322, 1078, 11824, 21227, 88884, 93647, 126662, 54758, 107055, 114437, 125914, 129056, 22331, 28996, 131231]
[2024-12-02 19:58:35.865696] user = 62022 Cloud 258/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:35.871482] user = 62022 Local 258/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:35.954590] user = 62022 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:37.842733] user = 62022 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 60755 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60755 AUC after training: 0.5
User 60755 does not improve AUC. Reverting changes.
Training on augumented user 60106 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60106 AUC after training: 0.5
User 60106 does not improve AUC. Reverting changes.
Training on augumented user 93700 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93700 AUC after training: 0.5
User 93700 does not improve AUC. Reverting changes.
Training on augumented user 64331 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64331 AUC after training: 0.5
User 64331 does not improve AUC. Reverting changes.
Training on augumented user 19403 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19403 AUC after training: 0.5
User 19403 does not improve AUC. Reverting changes.
Training on augumented user 127275 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127275 AUC after training: 0.5
User 127275 does not improve AUC. Reverting changes.
Training on augumented user 129204 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129204 AUC after training: 0.5
User 129204 does not improve AUC. Reverting changes.
Training on augumented user 131896 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131896 AUC after training: 0.5
User 131896 does not improve AUC. Reverting changes.
Training on augumented user 56188 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56188 AUC after training: 0.5
User 56188 does not improve AUC. Reverting changes.
Training on augumented user 88808 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88808 AUC after training: 0.5
User 88808 does not improve AUC. Reverting changes.
Training on augumented user 28923 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28923 AUC after training: 0.5
User 28923 does not improve AUC. Reverting changes.
Training on augumented user 114271 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114271 AUC after training: 0.5
User 114271 does not improve AUC. Reverting changes.
Training on augumented user 71586 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71586 AUC after training: 0.5
User 71586 does not improve AUC. Reverting changes.
Training on augumented user 82567 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82567 AUC after training: 0.5
User 82567 does not improve AUC. Reverting changes.
Training on augumented user 115685 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115685 AUC after training: 0.5
User 115685 does not improve AUC. Reverting changes.
Training on augumented user 124587 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124587 AUC after training: 0.5
User 124587 does not improve AUC. Reverting changes.
Training on augumented user 124225 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124225 AUC after training: 0.5
User 124225 does not improve AUC. Reverting changes.
Training on augumented user 112250 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112250 AUC after training: 0.5
User 112250 does not improve AUC. Reverting changes.
Training on augumented user 76877 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76877 AUC after training: 0.5
User 76877 does not improve AUC. Reverting changes.
Training on augumented user 50866 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50866 AUC after training: 0.5
User 50866 does not improve AUC. Reverting changes.
Training on augumented user 90160 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90160 AUC after training: 0.5
User 90160 does not improve AUC. Reverting changes.
Training on augumented user 70469 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70469 AUC after training: 0.5
User 70469 does not improve AUC. Reverting changes.
Training on augumented user 121920 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121920 AUC after training: 0.5
User 121920 does not improve AUC. Reverting changes.
Training on augumented user 116704 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116704 AUC after training: 0.5
User 116704 does not improve AUC. Reverting changes.
Training on augumented user 85066 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85066 AUC after training: 0.5
User 85066 does not improve AUC. Reverting changes.
Training on augumented user 131822 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131822 AUC after training: 0.5
User 131822 does not improve AUC. Reverting changes.
Training on augumented user 103069 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103069 AUC after training: 0.5
User 103069 does not improve AUC. Reverting changes.
Training on augumented user 116677 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116677 AUC after training: 0.5
User 116677 does not improve AUC. Reverting changes.
Training on augumented user 36643 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36643 AUC after training: 0.5
User 36643 does not improve AUC. Reverting changes.
Training on augumented user 13734 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13734 AUC after training: 0.5
User 13734 does not improve AUC. Reverting changes.
Training on augumented user 101274 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101274 AUC after training: 0.5
User 101274 does not improve AUC. Reverting changes.
Training on augumented user 70720 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70720 AUC after training: 0.5
User 70720 does not improve AUC. Reverting changes.
Training on augumented user 89752 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89752 AUC after training: 0.5
User 89752 does not improve AUC. Reverting changes.
Training on augumented user 93007 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93007 AUC after training: 0.5
User 93007 does not improve AUC. Reverting changes.
Training on augumented user 104945 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104945 AUC after training: 0.5
User 104945 does not improve AUC. Reverting changes.
Training on augumented user 95322 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95322 AUC after training: 0.5
User 95322 does not improve AUC. Reverting changes.
Training on augumented user 1078 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1078 AUC after training: 0.5
User 1078 does not improve AUC. Reverting changes.
Training on augumented user 11824 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11824 AUC after training: 0.5
User 11824 does not improve AUC. Reverting changes.
Training on augumented user 21227 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21227 AUC after training: 0.5
User 21227 does not improve AUC. Reverting changes.
Training on augumented user 88884 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88884 AUC after training: 0.5
User 88884 does not improve AUC. Reverting changes.
Training on augumented user 93647 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93647 AUC after training: 0.5
User 93647 does not improve AUC. Reverting changes.
Training on augumented user 126662 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126662 AUC after training: 0.5
User 126662 does not improve AUC. Reverting changes.
Training on augumented user 54758 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54758 AUC after training: 0.5
User 54758 does not improve AUC. Reverting changes.
Training on augumented user 107055 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107055 AUC after training: 0.5
User 107055 does not improve AUC. Reverting changes.
Training on augumented user 114437 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114437 AUC after training: 0.5
User 114437 does not improve AUC. Reverting changes.
Training on augumented user 125914 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125914 AUC after training: 0.5
User 125914 does not improve AUC. Reverting changes.
Training on augumented user 129056 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129056 AUC after training: 0.5
User 129056 does not improve AUC. Reverting changes.
Training on augumented user 22331 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22331 AUC after training: 0.5
User 22331 does not improve AUC. Reverting changes.
Training on augumented user 28996 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28996 AUC after training: 0.5
User 28996 does not improve AUC. Reverting changes.
Training on augumented user 131231 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131231 AUC after training: 0.5
User 131231 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:11.354555] start test user 62070 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:11.814347] start test user 62070 259/568 recall augumented users by random, augumented_users = [68352, 40524, 51624, 63088, 43008, 94988, 74847, 75034, 90922, 788, 55338, 100896, 86244, 52577, 113963, 126567, 720, 63039, 47895, 131022, 36270, 15306, 68239, 110008, 105598, 2988, 66347, 122663, 74415, 8838, 72850, 45351, 69730, 32291, 107884, 98036, 31655, 133935, 95839, 85386, 70539, 110885, 88304, 94496, 130950, 33015, 59587, 75369, 39337, 79341]
[2024-12-02 19:59:11.837006] user = 62070 Cloud 259/568
[2024-12-02 19:59:11.855931] user = 62070 Local 259/568
[2024-12-02 19:59:12.009060] user = 62070 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:13.666018] user = 62070 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6458333333333333
Training on augumented user 68352 0/50 current_auc = 0.6458333333333333
User 68352 AUC after training: 0.6458333333333333
User 68352 does not improve AUC. Reverting changes.
Training on augumented user 40524 1/50 current_auc = 0.6458333333333333
User 40524 AUC after training: 0.6458333333333333
User 40524 does not improve AUC. Reverting changes.
Training on augumented user 51624 2/50 current_auc = 0.6458333333333333
User 51624 AUC after training: 0.6458333333333333
User 51624 does not improve AUC. Reverting changes.
Training on augumented user 63088 3/50 current_auc = 0.6458333333333333
User 63088 AUC after training: 0.6458333333333333
User 63088 does not improve AUC. Reverting changes.
Training on augumented user 43008 4/50 current_auc = 0.6458333333333333
User 43008 AUC after training: 0.6458333333333333
User 43008 does not improve AUC. Reverting changes.
Training on augumented user 94988 5/50 current_auc = 0.6458333333333333
User 94988 AUC after training: 0.6458333333333333
User 94988 does not improve AUC. Reverting changes.
Training on augumented user 74847 6/50 current_auc = 0.6458333333333333
User 74847 AUC after training: 0.6458333333333333
User 74847 does not improve AUC. Reverting changes.
Training on augumented user 75034 7/50 current_auc = 0.6458333333333333
User 75034 AUC after training: 0.6666666666666667
User 75034 improves AUC. Keeping the model.
Training on augumented user 90922 8/50 current_auc = 0.6666666666666667
User 90922 AUC after training: 0.6666666666666667
User 90922 does not improve AUC. Reverting changes.
Training on augumented user 788 9/50 current_auc = 0.6666666666666667
User 788 AUC after training: 0.6666666666666667
User 788 does not improve AUC. Reverting changes.
Training on augumented user 55338 10/50 current_auc = 0.6666666666666667
User 55338 AUC after training: 0.6666666666666667
User 55338 does not improve AUC. Reverting changes.
Training on augumented user 100896 11/50 current_auc = 0.6666666666666667
User 100896 AUC after training: 0.6666666666666667
User 100896 does not improve AUC. Reverting changes.
Training on augumented user 86244 12/50 current_auc = 0.6666666666666667
User 86244 AUC after training: 0.6666666666666667
User 86244 does not improve AUC. Reverting changes.
Training on augumented user 52577 13/50 current_auc = 0.6666666666666667
User 52577 AUC after training: 0.6666666666666667
User 52577 does not improve AUC. Reverting changes.
Training on augumented user 113963 14/50 current_auc = 0.6666666666666667
User 113963 AUC after training: 0.6666666666666667
User 113963 does not improve AUC. Reverting changes.
Training on augumented user 126567 15/50 current_auc = 0.6666666666666667
User 126567 AUC after training: 0.6666666666666667
User 126567 does not improve AUC. Reverting changes.
Training on augumented user 720 16/50 current_auc = 0.6666666666666667
User 720 AUC after training: 0.6666666666666667
User 720 does not improve AUC. Reverting changes.
Training on augumented user 63039 17/50 current_auc = 0.6666666666666667
User 63039 AUC after training: 0.6666666666666667
User 63039 does not improve AUC. Reverting changes.
Training on augumented user 47895 18/50 current_auc = 0.6666666666666667
User 47895 AUC after training: 0.6666666666666667
User 47895 does not improve AUC. Reverting changes.
Training on augumented user 131022 19/50 current_auc = 0.6666666666666667
User 131022 AUC after training: 0.6666666666666667
User 131022 does not improve AUC. Reverting changes.
Training on augumented user 36270 20/50 current_auc = 0.6666666666666667
User 36270 AUC after training: 0.6666666666666667
User 36270 does not improve AUC. Reverting changes.
Training on augumented user 15306 21/50 current_auc = 0.6666666666666667
User 15306 AUC after training: 0.6666666666666667
User 15306 does not improve AUC. Reverting changes.
Training on augumented user 68239 22/50 current_auc = 0.6666666666666667
User 68239 AUC after training: 0.6666666666666667
User 68239 does not improve AUC. Reverting changes.
Training on augumented user 110008 23/50 current_auc = 0.6666666666666667
User 110008 AUC after training: 0.6666666666666667
User 110008 does not improve AUC. Reverting changes.
Training on augumented user 105598 24/50 current_auc = 0.6666666666666667
User 105598 AUC after training: 0.6666666666666667
User 105598 does not improve AUC. Reverting changes.
Training on augumented user 2988 25/50 current_auc = 0.6666666666666667
User 2988 AUC after training: 0.6666666666666667
User 2988 does not improve AUC. Reverting changes.
Training on augumented user 66347 26/50 current_auc = 0.6666666666666667
User 66347 AUC after training: 0.6666666666666667
User 66347 does not improve AUC. Reverting changes.
Training on augumented user 122663 27/50 current_auc = 0.6666666666666667
User 122663 AUC after training: 0.6458333333333333
User 122663 does not improve AUC. Reverting changes.
Training on augumented user 74415 28/50 current_auc = 0.6666666666666667
User 74415 AUC after training: 0.6666666666666667
User 74415 does not improve AUC. Reverting changes.
Training on augumented user 8838 29/50 current_auc = 0.6666666666666667
User 8838 AUC after training: 0.6666666666666667
User 8838 does not improve AUC. Reverting changes.
Training on augumented user 72850 30/50 current_auc = 0.6666666666666667
User 72850 AUC after training: 0.6458333333333333
User 72850 does not improve AUC. Reverting changes.
Training on augumented user 45351 31/50 current_auc = 0.6666666666666667
User 45351 AUC after training: 0.6666666666666667
User 45351 does not improve AUC. Reverting changes.
Training on augumented user 69730 32/50 current_auc = 0.6666666666666667
User 69730 AUC after training: 0.6666666666666667
User 69730 does not improve AUC. Reverting changes.
Training on augumented user 32291 33/50 current_auc = 0.6666666666666667
User 32291 AUC after training: 0.6666666666666667
User 32291 does not improve AUC. Reverting changes.
Training on augumented user 107884 34/50 current_auc = 0.6666666666666667
User 107884 AUC after training: 0.6666666666666667
User 107884 does not improve AUC. Reverting changes.
Training on augumented user 98036 35/50 current_auc = 0.6666666666666667
User 98036 AUC after training: 0.6666666666666667
User 98036 does not improve AUC. Reverting changes.
Training on augumented user 31655 36/50 current_auc = 0.6666666666666667
User 31655 AUC after training: 0.6666666666666667
User 31655 does not improve AUC. Reverting changes.
Training on augumented user 133935 37/50 current_auc = 0.6666666666666667
User 133935 AUC after training: 0.6666666666666667
User 133935 does not improve AUC. Reverting changes.
Training on augumented user 95839 38/50 current_auc = 0.6666666666666667
User 95839 AUC after training: 0.6666666666666667
User 95839 does not improve AUC. Reverting changes.
Training on augumented user 85386 39/50 current_auc = 0.6666666666666667
User 85386 AUC after training: 0.6666666666666667
User 85386 does not improve AUC. Reverting changes.
Training on augumented user 70539 40/50 current_auc = 0.6666666666666667
User 70539 AUC after training: 0.6666666666666667
User 70539 does not improve AUC. Reverting changes.
Training on augumented user 110885 41/50 current_auc = 0.6666666666666667
User 110885 AUC after training: 0.6458333333333333
User 110885 does not improve AUC. Reverting changes.
Training on augumented user 88304 42/50 current_auc = 0.6666666666666667
User 88304 AUC after training: 0.6666666666666667
User 88304 does not improve AUC. Reverting changes.
Training on augumented user 94496 43/50 current_auc = 0.6666666666666667
User 94496 AUC after training: 0.6666666666666667
User 94496 does not improve AUC. Reverting changes.
Training on augumented user 130950 44/50 current_auc = 0.6666666666666667
User 130950 AUC after training: 0.6666666666666667
User 130950 does not improve AUC. Reverting changes.
Training on augumented user 33015 45/50 current_auc = 0.6666666666666667
User 33015 AUC after training: 0.6666666666666667
User 33015 does not improve AUC. Reverting changes.
Training on augumented user 59587 46/50 current_auc = 0.6666666666666667
User 59587 AUC after training: 0.6666666666666667
User 59587 does not improve AUC. Reverting changes.
Training on augumented user 75369 47/50 current_auc = 0.6666666666666667
User 75369 AUC after training: 0.6666666666666667
User 75369 does not improve AUC. Reverting changes.
Training on augumented user 39337 48/50 current_auc = 0.6666666666666667
User 39337 AUC after training: 0.6666666666666667
User 39337 does not improve AUC. Reverting changes.
Training on augumented user 79341 49/50 current_auc = 0.6666666666666667
User 79341 AUC after training: 0.6666666666666667
User 79341 does not improve AUC. Reverting changes.
[2024-12-02 19:59:38.693920] start test user 62111 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:39.261518] start test user 62111 260/568 recall augumented users by random, augumented_users = [72217, 44763, 55737, 27709, 78037, 19644, 20065, 120507, 95557, 39711, 116707, 106137, 124628, 76133, 89473, 86125, 22586, 58137, 111475, 71996, 24155, 99964, 96277, 50230, 23400, 92567, 71227, 76010, 78566, 50724, 14110, 112073, 74576, 46247, 65581, 69806, 72155, 132587, 130680, 117985, 58392, 90911, 51223, 97153, 2935, 110716, 25743, 118869, 8140, 67125]
[2024-12-02 19:59:39.276015] user = 62111 Cloud 260/568
[2024-12-02 19:59:39.286699] user = 62111 Local 260/568
[2024-12-02 19:59:39.330025] user = 62111 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:41.623698] user = 62111 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6966145833333334
Training on augumented user 72217 0/50 current_auc = 0.6966145833333334
User 72217 AUC after training: 0.6979166666666667
User 72217 improves AUC. Keeping the model.
Training on augumented user 44763 1/50 current_auc = 0.6979166666666667
User 44763 AUC after training: 0.69921875
User 44763 improves AUC. Keeping the model.
Training on augumented user 55737 2/50 current_auc = 0.69921875
User 55737 AUC after training: 0.6979166666666667
User 55737 does not improve AUC. Reverting changes.
Training on augumented user 27709 3/50 current_auc = 0.69921875
User 27709 AUC after training: 0.6979166666666666
User 27709 does not improve AUC. Reverting changes.
Training on augumented user 78037 4/50 current_auc = 0.69921875
User 78037 AUC after training: 0.7005208333333333
User 78037 improves AUC. Keeping the model.
Training on augumented user 19644 5/50 current_auc = 0.7005208333333333
User 19644 AUC after training: 0.7005208333333333
User 19644 does not improve AUC. Reverting changes.
Training on augumented user 20065 6/50 current_auc = 0.7005208333333333
User 20065 AUC after training: 0.7005208333333333
User 20065 does not improve AUC. Reverting changes.
Training on augumented user 120507 7/50 current_auc = 0.7005208333333333
User 120507 AUC after training: 0.6979166666666667
User 120507 does not improve AUC. Reverting changes.
Training on augumented user 95557 8/50 current_auc = 0.7005208333333333
User 95557 AUC after training: 0.6979166666666666
User 95557 does not improve AUC. Reverting changes.
Training on augumented user 39711 9/50 current_auc = 0.7005208333333333
User 39711 AUC after training: 0.6966145833333334
User 39711 does not improve AUC. Reverting changes.
Training on augumented user 116707 10/50 current_auc = 0.7005208333333333
User 116707 AUC after training: 0.7005208333333333
User 116707 does not improve AUC. Reverting changes.
Training on augumented user 106137 11/50 current_auc = 0.7005208333333333
User 106137 AUC after training: 0.6979166666666666
User 106137 does not improve AUC. Reverting changes.
Training on augumented user 124628 12/50 current_auc = 0.7005208333333333
User 124628 AUC after training: 0.7005208333333334
User 124628 improves AUC. Keeping the model.
Training on augumented user 76133 13/50 current_auc = 0.7005208333333334
User 76133 AUC after training: 0.6979166666666667
User 76133 does not improve AUC. Reverting changes.
Training on augumented user 89473 14/50 current_auc = 0.7005208333333334
User 89473 AUC after training: 0.69921875
User 89473 does not improve AUC. Reverting changes.
Training on augumented user 86125 15/50 current_auc = 0.7005208333333334
User 86125 AUC after training: 0.69921875
User 86125 does not improve AUC. Reverting changes.
Training on augumented user 22586 16/50 current_auc = 0.7005208333333334
User 22586 AUC after training: 0.69921875
User 22586 does not improve AUC. Reverting changes.
Training on augumented user 58137 17/50 current_auc = 0.7005208333333334
User 58137 AUC after training: 0.7005208333333334
User 58137 does not improve AUC. Reverting changes.
Training on augumented user 111475 18/50 current_auc = 0.7005208333333334
User 111475 AUC after training: 0.7005208333333334
User 111475 does not improve AUC. Reverting changes.
Training on augumented user 71996 19/50 current_auc = 0.7005208333333334
User 71996 AUC after training: 0.69921875
User 71996 does not improve AUC. Reverting changes.
Training on augumented user 24155 20/50 current_auc = 0.7005208333333334
User 24155 AUC after training: 0.69921875
User 24155 does not improve AUC. Reverting changes.
Training on augumented user 99964 21/50 current_auc = 0.7005208333333334
User 99964 AUC after training: 0.6979166666666667
User 99964 does not improve AUC. Reverting changes.
Training on augumented user 96277 22/50 current_auc = 0.7005208333333334
User 96277 AUC after training: 0.7018229166666667
User 96277 improves AUC. Keeping the model.
Training on augumented user 50230 23/50 current_auc = 0.7018229166666667
User 50230 AUC after training: 0.6953125
User 50230 does not improve AUC. Reverting changes.
Training on augumented user 23400 24/50 current_auc = 0.7018229166666667
User 23400 AUC after training: 0.6979166666666666
User 23400 does not improve AUC. Reverting changes.
Training on augumented user 92567 25/50 current_auc = 0.7018229166666667
User 92567 AUC after training: 0.6979166666666667
User 92567 does not improve AUC. Reverting changes.
Training on augumented user 71227 26/50 current_auc = 0.7018229166666667
User 71227 AUC after training: 0.6998697916666667
User 71227 does not improve AUC. Reverting changes.
Training on augumented user 76010 27/50 current_auc = 0.7018229166666667
User 76010 AUC after training: 0.6979166666666667
User 76010 does not improve AUC. Reverting changes.
Training on augumented user 78566 28/50 current_auc = 0.7018229166666667
User 78566 AUC after training: 0.7018229166666667
User 78566 does not improve AUC. Reverting changes.
Training on augumented user 50724 29/50 current_auc = 0.7018229166666667
User 50724 AUC after training: 0.7005208333333334
User 50724 does not improve AUC. Reverting changes.
Training on augumented user 14110 30/50 current_auc = 0.7018229166666667
User 14110 AUC after training: 0.7005208333333333
User 14110 does not improve AUC. Reverting changes.
Training on augumented user 112073 31/50 current_auc = 0.7018229166666667
User 112073 AUC after training: 0.7005208333333334
User 112073 does not improve AUC. Reverting changes.
Training on augumented user 74576 32/50 current_auc = 0.7018229166666667
User 74576 AUC after training: 0.7018229166666667
User 74576 does not improve AUC. Reverting changes.
Training on augumented user 46247 33/50 current_auc = 0.7018229166666667
User 46247 AUC after training: 0.69921875
User 46247 does not improve AUC. Reverting changes.
Training on augumented user 65581 34/50 current_auc = 0.7018229166666667
User 65581 AUC after training: 0.6966145833333333
User 65581 does not improve AUC. Reverting changes.
Training on augumented user 69806 35/50 current_auc = 0.7018229166666667
User 69806 AUC after training: 0.69921875
User 69806 does not improve AUC. Reverting changes.
Training on augumented user 72155 36/50 current_auc = 0.7018229166666667
User 72155 AUC after training: 0.7005208333333334
User 72155 does not improve AUC. Reverting changes.
Training on augumented user 132587 37/50 current_auc = 0.7018229166666667
User 132587 AUC after training: 0.7005208333333333
User 132587 does not improve AUC. Reverting changes.
Training on augumented user 130680 38/50 current_auc = 0.7018229166666667
User 130680 AUC after training: 0.697265625
User 130680 does not improve AUC. Reverting changes.
Training on augumented user 117985 39/50 current_auc = 0.7018229166666667
User 117985 AUC after training: 0.7018229166666667
User 117985 does not improve AUC. Reverting changes.
Training on augumented user 58392 40/50 current_auc = 0.7018229166666667
User 58392 AUC after training: 0.6998697916666667
User 58392 does not improve AUC. Reverting changes.
Training on augumented user 90911 41/50 current_auc = 0.7018229166666667
User 90911 AUC after training: 0.7005208333333334
User 90911 does not improve AUC. Reverting changes.
Training on augumented user 51223 42/50 current_auc = 0.7018229166666667
User 51223 AUC after training: 0.6998697916666667
User 51223 does not improve AUC. Reverting changes.
Training on augumented user 97153 43/50 current_auc = 0.7018229166666667
User 97153 AUC after training: 0.69921875
User 97153 does not improve AUC. Reverting changes.
Training on augumented user 2935 44/50 current_auc = 0.7018229166666667
User 2935 AUC after training: 0.6966145833333333
User 2935 does not improve AUC. Reverting changes.
Training on augumented user 110716 45/50 current_auc = 0.7018229166666667
User 110716 AUC after training: 0.69921875
User 110716 does not improve AUC. Reverting changes.
Training on augumented user 25743 46/50 current_auc = 0.7018229166666667
User 25743 AUC after training: 0.69921875
User 25743 does not improve AUC. Reverting changes.
Training on augumented user 118869 47/50 current_auc = 0.7018229166666667
User 118869 AUC after training: 0.7005208333333333
User 118869 does not improve AUC. Reverting changes.
Training on augumented user 8140 48/50 current_auc = 0.7018229166666667
User 8140 AUC after training: 0.6966145833333333
User 8140 does not improve AUC. Reverting changes.
Training on augumented user 67125 49/50 current_auc = 0.7018229166666667
User 67125 AUC after training: 0.7005208333333334
User 67125 does not improve AUC. Reverting changes.
[2024-12-02 20:00:07.528490] start test user 62144 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:08.090168] start test user 62144 261/568 recall augumented users by random, augumented_users = [124681, 4079, 90022, 60114, 106093, 93033, 40842, 44392, 114668, 2706, 58746, 28603, 123230, 117320, 21261, 89890, 76784, 67940, 28076, 29899, 92495, 114404, 10083, 121623, 73348, 26748, 83223, 110526, 79962, 57894, 91284, 77402, 61012, 126030, 61817, 131469, 3233, 39956, 64525, 92660, 77739, 119239, 57820, 16912, 62860, 39880, 44876, 124025, 26360, 82158]
[2024-12-02 20:00:08.105494] user = 62144 Cloud 261/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:08.114466] user = 62144 Local 261/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:08.229379] user = 62144 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:10.546867] user = 62144 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 124681 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124681 AUC after training: 0.5
User 124681 does not improve AUC. Reverting changes.
Training on augumented user 4079 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4079 AUC after training: 0.5
User 4079 does not improve AUC. Reverting changes.
Training on augumented user 90022 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90022 AUC after training: 0.5
User 90022 does not improve AUC. Reverting changes.
Training on augumented user 60114 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60114 AUC after training: 0.5
User 60114 does not improve AUC. Reverting changes.
Training on augumented user 106093 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106093 AUC after training: 0.5
User 106093 does not improve AUC. Reverting changes.
Training on augumented user 93033 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93033 AUC after training: 0.5
User 93033 does not improve AUC. Reverting changes.
Training on augumented user 40842 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40842 AUC after training: 0.5
User 40842 does not improve AUC. Reverting changes.
Training on augumented user 44392 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44392 AUC after training: 0.5
User 44392 does not improve AUC. Reverting changes.
Training on augumented user 114668 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114668 AUC after training: 0.5
User 114668 does not improve AUC. Reverting changes.
Training on augumented user 2706 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2706 AUC after training: 0.5
User 2706 does not improve AUC. Reverting changes.
Training on augumented user 58746 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58746 AUC after training: 0.5
User 58746 does not improve AUC. Reverting changes.
Training on augumented user 28603 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28603 AUC after training: 0.5
User 28603 does not improve AUC. Reverting changes.
Training on augumented user 123230 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123230 AUC after training: 0.5
User 123230 does not improve AUC. Reverting changes.
Training on augumented user 117320 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117320 AUC after training: 0.5
User 117320 does not improve AUC. Reverting changes.
Training on augumented user 21261 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21261 AUC after training: 0.5
User 21261 does not improve AUC. Reverting changes.
Training on augumented user 89890 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89890 AUC after training: 0.5
User 89890 does not improve AUC. Reverting changes.
Training on augumented user 76784 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76784 AUC after training: 0.5
User 76784 does not improve AUC. Reverting changes.
Training on augumented user 67940 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67940 AUC after training: 0.5
User 67940 does not improve AUC. Reverting changes.
Training on augumented user 28076 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28076 AUC after training: 0.5
User 28076 does not improve AUC. Reverting changes.
Training on augumented user 29899 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29899 AUC after training: 0.5
User 29899 does not improve AUC. Reverting changes.
Training on augumented user 92495 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92495 AUC after training: 0.5
User 92495 does not improve AUC. Reverting changes.
Training on augumented user 114404 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114404 AUC after training: 0.5
User 114404 does not improve AUC. Reverting changes.
Training on augumented user 10083 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10083 AUC after training: 0.5
User 10083 does not improve AUC. Reverting changes.
Training on augumented user 121623 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121623 AUC after training: 0.5
User 121623 does not improve AUC. Reverting changes.
Training on augumented user 73348 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73348 AUC after training: 0.5
User 73348 does not improve AUC. Reverting changes.
Training on augumented user 26748 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26748 AUC after training: 0.5
User 26748 does not improve AUC. Reverting changes.
Training on augumented user 83223 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83223 AUC after training: 0.5
User 83223 does not improve AUC. Reverting changes.
Training on augumented user 110526 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110526 AUC after training: 0.5
User 110526 does not improve AUC. Reverting changes.
Training on augumented user 79962 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79962 AUC after training: 0.5
User 79962 does not improve AUC. Reverting changes.
Training on augumented user 57894 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57894 AUC after training: 0.5
User 57894 does not improve AUC. Reverting changes.
Training on augumented user 91284 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91284 AUC after training: 0.5
User 91284 does not improve AUC. Reverting changes.
Training on augumented user 77402 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77402 AUC after training: 0.5
User 77402 does not improve AUC. Reverting changes.
Training on augumented user 61012 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61012 AUC after training: 0.5
User 61012 does not improve AUC. Reverting changes.
Training on augumented user 126030 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126030 AUC after training: 0.5
User 126030 does not improve AUC. Reverting changes.
Training on augumented user 61817 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61817 AUC after training: 0.5
User 61817 does not improve AUC. Reverting changes.
Training on augumented user 131469 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131469 AUC after training: 0.5
User 131469 does not improve AUC. Reverting changes.
Training on augumented user 3233 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3233 AUC after training: 0.5
User 3233 does not improve AUC. Reverting changes.
Training on augumented user 39956 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39956 AUC after training: 0.5
User 39956 does not improve AUC. Reverting changes.
Training on augumented user 64525 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64525 AUC after training: 0.5
User 64525 does not improve AUC. Reverting changes.
Training on augumented user 92660 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92660 AUC after training: 0.5
User 92660 does not improve AUC. Reverting changes.
Training on augumented user 77739 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77739 AUC after training: 0.5
User 77739 does not improve AUC. Reverting changes.
Training on augumented user 119239 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119239 AUC after training: 0.5
User 119239 does not improve AUC. Reverting changes.
Training on augumented user 57820 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57820 AUC after training: 0.5
User 57820 does not improve AUC. Reverting changes.
Training on augumented user 16912 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16912 AUC after training: 0.5
User 16912 does not improve AUC. Reverting changes.
Training on augumented user 62860 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62860 AUC after training: 0.5
User 62860 does not improve AUC. Reverting changes.
Training on augumented user 39880 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39880 AUC after training: 0.5
User 39880 does not improve AUC. Reverting changes.
Training on augumented user 44876 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44876 AUC after training: 0.5
User 44876 does not improve AUC. Reverting changes.
Training on augumented user 124025 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124025 AUC after training: 0.5
User 124025 does not improve AUC. Reverting changes.
Training on augumented user 26360 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26360 AUC after training: 0.5
User 26360 does not improve AUC. Reverting changes.
Training on augumented user 82158 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82158 AUC after training: 0.5
User 82158 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:42.295211] start test user 62160 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:43.118731] start test user 62160 262/568 recall augumented users by random, augumented_users = [16352, 131801, 60527, 118152, 136076, 3503, 28806, 32017, 61260, 28918, 12318, 70826, 74007, 128340, 79199, 125021, 24222, 90534, 27455, 130491, 62903, 112856, 115770, 127438, 12399, 71571, 123883, 32886, 125982, 42061, 124070, 12478, 103422, 137598, 28013, 130476, 134060, 131578, 49021, 17165, 122568, 1429, 7540, 64118, 75794, 27313, 15831, 136384, 59314, 39635]
[2024-12-02 20:00:43.140415] user = 62160 Cloud 262/568
[2024-12-02 20:00:43.257045] user = 62160 Local 262/568
[2024-12-02 20:00:43.782878] user = 62160 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:46.282278] user = 62160 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6482270857191331
Training on augumented user 16352 0/50 current_auc = 0.6482270857191331
User 16352 AUC after training: 0.6482200166829255
User 16352 does not improve AUC. Reverting changes.
Training on augumented user 131801 1/50 current_auc = 0.6482270857191331
User 131801 AUC after training: 0.6481669989113685
User 131801 does not improve AUC. Reverting changes.
Training on augumented user 60527 2/50 current_auc = 0.6482270857191331
User 60527 AUC after training: 0.6480150146329049
User 60527 does not improve AUC. Reverting changes.
Training on augumented user 118152 3/50 current_auc = 0.6482270857191331
User 118152 AUC after training: 0.6480150146329049
User 118152 does not improve AUC. Reverting changes.
Training on augumented user 136076 4/50 current_auc = 0.6482270857191331
User 136076 AUC after training: 0.6483861390338042
User 136076 improves AUC. Keeping the model.
Training on augumented user 3503 5/50 current_auc = 0.6483861390338042
User 3503 AUC after training: 0.648068032404462
User 3503 does not improve AUC. Reverting changes.
Training on augumented user 28806 6/50 current_auc = 0.6483861390338042
User 28806 AUC after training: 0.6481457918027456
User 28806 does not improve AUC. Reverting changes.
Training on augumented user 32017 7/50 current_auc = 0.6483861390338042
User 32017 AUC after training: 0.648301310599313
User 32017 does not improve AUC. Reverting changes.
Training on augumented user 61260 8/50 current_auc = 0.6483861390338042
User 61260 AUC after training: 0.6481634643932647
User 61260 does not improve AUC. Reverting changes.
Training on augumented user 28918 9/50 current_auc = 0.6483861390338042
User 28918 AUC after training: 0.6484285532510498
User 28918 improves AUC. Keeping the model.
Training on augumented user 12318 10/50 current_auc = 0.6484285532510498
User 12318 AUC after training: 0.648283638008794
User 12318 does not improve AUC. Reverting changes.
Training on augumented user 70826 11/50 current_auc = 0.6484285532510498
User 70826 AUC after training: 0.6484073461424269
User 70826 does not improve AUC. Reverting changes.
Training on augumented user 74007 12/50 current_auc = 0.6484285532510498
User 74007 AUC after training: 0.648372000961389
User 74007 does not improve AUC. Reverting changes.
Training on augumented user 128340 13/50 current_auc = 0.6484285532510498
User 128340 AUC after training: 0.6482129476467178
User 128340 does not improve AUC. Reverting changes.
Training on augumented user 79199 14/50 current_auc = 0.6484285532510498
User 79199 AUC after training: 0.6482094131286141
User 79199 does not improve AUC. Reverting changes.
Training on augumented user 125021 15/50 current_auc = 0.6484285532510498
User 125021 AUC after training: 0.6486052791562399
User 125021 improves AUC. Keeping the model.
Training on augumented user 24222 16/50 current_auc = 0.6486052791562399
User 24222 AUC after training: 0.6483260522260393
User 24222 does not improve AUC. Reverting changes.
Training on augumented user 90534 17/50 current_auc = 0.6486052791562399
User 90534 AUC after training: 0.6484603639139839
User 90534 does not improve AUC. Reverting changes.
Training on augumented user 27455 18/50 current_auc = 0.6486052791562399
User 27455 AUC after training: 0.6484320877691536
User 27455 does not improve AUC. Reverting changes.
Training on augumented user 130491 19/50 current_auc = 0.6486052791562399
User 130491 AUC after training: 0.6480256181872164
User 130491 does not improve AUC. Reverting changes.
Training on augumented user 62903 20/50 current_auc = 0.6486052791562399
User 62903 AUC after training: 0.6483613974070775
User 62903 does not improve AUC. Reverting changes.
Training on augumented user 112856 21/50 current_auc = 0.6486052791562399
User 112856 AUC after training: 0.648478036504503
User 112856 does not improve AUC. Reverting changes.
Training on augumented user 115770 22/50 current_auc = 0.6486052791562399
User 115770 AUC after training: 0.6485275197579563
User 115770 does not improve AUC. Reverting changes.
Training on augumented user 127438 23/50 current_auc = 0.6486052791562399
User 127438 AUC after training: 0.6484214842148421
User 127438 does not improve AUC. Reverting changes.
Training on augumented user 12399 24/50 current_auc = 0.6486052791562399
User 12399 AUC after training: 0.6484356222872574
User 12399 does not improve AUC. Reverting changes.
Training on augumented user 71571 25/50 current_auc = 0.6486052791562399
User 71571 AUC after training: 0.6487537289165995
User 71571 improves AUC. Keeping the model.
Training on augumented user 123883 26/50 current_auc = 0.6487537289165995
User 123883 AUC after training: 0.6486476933734855
User 123883 does not improve AUC. Reverting changes.
Training on augumented user 32886 27/50 current_auc = 0.6487537289165995
User 32886 AUC after training: 0.6488032121700528
User 32886 improves AUC. Keeping the model.
Training on augumented user 125982 28/50 current_auc = 0.6488032121700528
User 125982 AUC after training: 0.6487325218079767
User 125982 does not improve AUC. Reverting changes.
Training on augumented user 42061 29/50 current_auc = 0.6488032121700528
User 42061 AUC after training: 0.6487890740976375
User 42061 does not improve AUC. Reverting changes.
Training on augumented user 124070 30/50 current_auc = 0.6488032121700528
User 124070 AUC after training: 0.6487678669890147
User 124070 does not improve AUC. Reverting changes.
Training on augumented user 12478 31/50 current_auc = 0.6488032121700528
User 12478 AUC after training: 0.648690107590731
User 12478 does not improve AUC. Reverting changes.
Training on augumented user 103422 32/50 current_auc = 0.6488032121700528
User 103422 AUC after training: 0.6487466598803918
User 103422 does not improve AUC. Reverting changes.
Training on augumented user 137598 33/50 current_auc = 0.6488032121700528
User 137598 AUC after training: 0.6486052791562399
User 137598 does not improve AUC. Reverting changes.
Training on augumented user 28013 34/50 current_auc = 0.6488032121700528
User 28013 AUC after training: 0.6488279537967794
User 28013 improves AUC. Keeping the model.
Training on augumented user 130476 35/50 current_auc = 0.6488279537967794
User 130476 AUC after training: 0.6489163167493743
User 130476 improves AUC. Keeping the model.
Training on augumented user 134060 36/50 current_auc = 0.6489163167493743
User 134060 AUC after training: 0.6487395908441843
User 134060 does not improve AUC. Reverting changes.
Training on augumented user 131578 37/50 current_auc = 0.6489163167493743
User 131578 AUC after training: 0.6487466598803919
User 131578 does not improve AUC. Reverting changes.
Training on augumented user 49021 38/50 current_auc = 0.6489163167493743
User 49021 AUC after training: 0.6488032121700528
User 49021 does not improve AUC. Reverting changes.
Training on augumented user 17165 39/50 current_auc = 0.6489163167493743
User 17165 AUC after training: 0.6488668334959211
User 17165 does not improve AUC. Reverting changes.
Training on augumented user 122568 40/50 current_auc = 0.6489163167493743
User 122568 AUC after training: 0.6489445928942047
User 122568 improves AUC. Keeping the model.
Training on augumented user 1429 41/50 current_auc = 0.6489445928942047
User 1429 AUC after training: 0.6488385573510906
User 1429 does not improve AUC. Reverting changes.
Training on augumented user 7540 42/50 current_auc = 0.6489445928942047
User 7540 AUC after training: 0.6487360563260804
User 7540 does not improve AUC. Reverting changes.
Training on augumented user 64118 43/50 current_auc = 0.6489445928942047
User 64118 AUC after training: 0.6488456263872983
User 64118 does not improve AUC. Reverting changes.
Training on augumented user 75794 44/50 current_auc = 0.6489445928942047
User 75794 AUC after training: 0.6487042456631463
User 75794 does not improve AUC. Reverting changes.
Training on augumented user 27313 45/50 current_auc = 0.6489445928942047
User 27313 AUC after training: 0.6488526954235059
User 27313 does not improve AUC. Reverting changes.
Training on augumented user 15831 46/50 current_auc = 0.6489445928942047
User 15831 AUC after training: 0.6488102812062603
User 15831 does not improve AUC. Reverting changes.
Training on augumented user 136384 47/50 current_auc = 0.6489445928942047
User 136384 AUC after training: 0.648548726866579
User 136384 does not improve AUC. Reverting changes.
Training on augumented user 59314 48/50 current_auc = 0.6489445928942047
User 59314 AUC after training: 0.64895873096662
User 59314 improves AUC. Keeping the model.
Training on augumented user 39635 49/50 current_auc = 0.64895873096662
User 39635 AUC after training: 0.6488314883148832
User 39635 does not improve AUC. Reverting changes.
[2024-12-02 20:01:16.141823] start test user 62193 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:16.592849] start test user 62193 263/568 recall augumented users by random, augumented_users = [71782, 42941, 22271, 48926, 50755, 121821, 42766, 41164, 120959, 72306, 60400, 130130, 42660, 33841, 87426, 89238, 7626, 42910, 69641, 119074, 115998, 64381, 37644, 41723, 107840, 27117, 92130, 16678, 121108, 96115, 112583, 62292, 46513, 18985, 94940, 20563, 57803, 77009, 79063, 7196, 69937, 16879, 4460, 23908, 42092, 39897, 120030, 2397, 38562, 74078]
[2024-12-02 20:01:16.607233] user = 62193 Cloud 263/568
[2024-12-02 20:01:16.617059] user = 62193 Local 263/568
[2024-12-02 20:01:16.639835] user = 62193 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:18.770714] user = 62193 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.42857142857142855
Training on augumented user 71782 0/50 current_auc = 0.42857142857142855
User 71782 AUC after training: 0.42857142857142855
User 71782 does not improve AUC. Reverting changes.
Training on augumented user 42941 1/50 current_auc = 0.42857142857142855
User 42941 AUC after training: 0.42857142857142855
User 42941 does not improve AUC. Reverting changes.
Training on augumented user 22271 2/50 current_auc = 0.42857142857142855
User 22271 AUC after training: 0.35714285714285715
User 22271 does not improve AUC. Reverting changes.
Training on augumented user 48926 3/50 current_auc = 0.42857142857142855
User 48926 AUC after training: 0.42857142857142855
User 48926 does not improve AUC. Reverting changes.
Training on augumented user 50755 4/50 current_auc = 0.42857142857142855
User 50755 AUC after training: 0.42857142857142855
User 50755 does not improve AUC. Reverting changes.
Training on augumented user 121821 5/50 current_auc = 0.42857142857142855
User 121821 AUC after training: 0.42857142857142855
User 121821 does not improve AUC. Reverting changes.
Training on augumented user 42766 6/50 current_auc = 0.42857142857142855
User 42766 AUC after training: 0.42857142857142855
User 42766 does not improve AUC. Reverting changes.
Training on augumented user 41164 7/50 current_auc = 0.42857142857142855
User 41164 AUC after training: 0.42857142857142855
User 41164 does not improve AUC. Reverting changes.
Training on augumented user 120959 8/50 current_auc = 0.42857142857142855
User 120959 AUC after training: 0.42857142857142855
User 120959 does not improve AUC. Reverting changes.
Training on augumented user 72306 9/50 current_auc = 0.42857142857142855
User 72306 AUC after training: 0.35714285714285715
User 72306 does not improve AUC. Reverting changes.
Training on augumented user 60400 10/50 current_auc = 0.42857142857142855
User 60400 AUC after training: 0.42857142857142855
User 60400 does not improve AUC. Reverting changes.
Training on augumented user 130130 11/50 current_auc = 0.42857142857142855
User 130130 AUC after training: 0.42857142857142855
User 130130 does not improve AUC. Reverting changes.
Training on augumented user 42660 12/50 current_auc = 0.42857142857142855
User 42660 AUC after training: 0.42857142857142855
User 42660 does not improve AUC. Reverting changes.
Training on augumented user 33841 13/50 current_auc = 0.42857142857142855
User 33841 AUC after training: 0.42857142857142855
User 33841 does not improve AUC. Reverting changes.
Training on augumented user 87426 14/50 current_auc = 0.42857142857142855
User 87426 AUC after training: 0.42857142857142855
User 87426 does not improve AUC. Reverting changes.
Training on augumented user 89238 15/50 current_auc = 0.42857142857142855
User 89238 AUC after training: 0.42857142857142855
User 89238 does not improve AUC. Reverting changes.
Training on augumented user 7626 16/50 current_auc = 0.42857142857142855
User 7626 AUC after training: 0.35714285714285715
User 7626 does not improve AUC. Reverting changes.
Training on augumented user 42910 17/50 current_auc = 0.42857142857142855
User 42910 AUC after training: 0.42857142857142855
User 42910 does not improve AUC. Reverting changes.
Training on augumented user 69641 18/50 current_auc = 0.42857142857142855
User 69641 AUC after training: 0.42857142857142855
User 69641 does not improve AUC. Reverting changes.
Training on augumented user 119074 19/50 current_auc = 0.42857142857142855
User 119074 AUC after training: 0.42857142857142855
User 119074 does not improve AUC. Reverting changes.
Training on augumented user 115998 20/50 current_auc = 0.42857142857142855
User 115998 AUC after training: 0.35714285714285715
User 115998 does not improve AUC. Reverting changes.
Training on augumented user 64381 21/50 current_auc = 0.42857142857142855
User 64381 AUC after training: 0.42857142857142855
User 64381 does not improve AUC. Reverting changes.
Training on augumented user 37644 22/50 current_auc = 0.42857142857142855
User 37644 AUC after training: 0.42857142857142855
User 37644 does not improve AUC. Reverting changes.
Training on augumented user 41723 23/50 current_auc = 0.42857142857142855
User 41723 AUC after training: 0.42857142857142855
User 41723 does not improve AUC. Reverting changes.
Training on augumented user 107840 24/50 current_auc = 0.42857142857142855
User 107840 AUC after training: 0.42857142857142855
User 107840 does not improve AUC. Reverting changes.
Training on augumented user 27117 25/50 current_auc = 0.42857142857142855
User 27117 AUC after training: 0.42857142857142855
User 27117 does not improve AUC. Reverting changes.
Training on augumented user 92130 26/50 current_auc = 0.42857142857142855
User 92130 AUC after training: 0.42857142857142855
User 92130 does not improve AUC. Reverting changes.
Training on augumented user 16678 27/50 current_auc = 0.42857142857142855
User 16678 AUC after training: 0.42857142857142855
User 16678 does not improve AUC. Reverting changes.
Training on augumented user 121108 28/50 current_auc = 0.42857142857142855
User 121108 AUC after training: 0.42857142857142855
User 121108 does not improve AUC. Reverting changes.
Training on augumented user 96115 29/50 current_auc = 0.42857142857142855
User 96115 AUC after training: 0.42857142857142855
User 96115 does not improve AUC. Reverting changes.
Training on augumented user 112583 30/50 current_auc = 0.42857142857142855
User 112583 AUC after training: 0.42857142857142855
User 112583 does not improve AUC. Reverting changes.
Training on augumented user 62292 31/50 current_auc = 0.42857142857142855
User 62292 AUC after training: 0.42857142857142855
User 62292 does not improve AUC. Reverting changes.
Training on augumented user 46513 32/50 current_auc = 0.42857142857142855
User 46513 AUC after training: 0.42857142857142855
User 46513 does not improve AUC. Reverting changes.
Training on augumented user 18985 33/50 current_auc = 0.42857142857142855
User 18985 AUC after training: 0.35714285714285715
User 18985 does not improve AUC. Reverting changes.
Training on augumented user 94940 34/50 current_auc = 0.42857142857142855
User 94940 AUC after training: 0.42857142857142855
User 94940 does not improve AUC. Reverting changes.
Training on augumented user 20563 35/50 current_auc = 0.42857142857142855
User 20563 AUC after training: 0.42857142857142855
User 20563 does not improve AUC. Reverting changes.
Training on augumented user 57803 36/50 current_auc = 0.42857142857142855
User 57803 AUC after training: 0.42857142857142855
User 57803 does not improve AUC. Reverting changes.
Training on augumented user 77009 37/50 current_auc = 0.42857142857142855
User 77009 AUC after training: 0.42857142857142855
User 77009 does not improve AUC. Reverting changes.
Training on augumented user 79063 38/50 current_auc = 0.42857142857142855
User 79063 AUC after training: 0.42857142857142855
User 79063 does not improve AUC. Reverting changes.
Training on augumented user 7196 39/50 current_auc = 0.42857142857142855
User 7196 AUC after training: 0.42857142857142855
User 7196 does not improve AUC. Reverting changes.
Training on augumented user 69937 40/50 current_auc = 0.42857142857142855
User 69937 AUC after training: 0.42857142857142855
User 69937 does not improve AUC. Reverting changes.
Training on augumented user 16879 41/50 current_auc = 0.42857142857142855
User 16879 AUC after training: 0.42857142857142855
User 16879 does not improve AUC. Reverting changes.
Training on augumented user 4460 42/50 current_auc = 0.42857142857142855
User 4460 AUC after training: 0.42857142857142855
User 4460 does not improve AUC. Reverting changes.
Training on augumented user 23908 43/50 current_auc = 0.42857142857142855
User 23908 AUC after training: 0.42857142857142855
User 23908 does not improve AUC. Reverting changes.
Training on augumented user 42092 44/50 current_auc = 0.42857142857142855
User 42092 AUC after training: 0.42857142857142855
User 42092 does not improve AUC. Reverting changes.
Training on augumented user 39897 45/50 current_auc = 0.42857142857142855
User 39897 AUC after training: 0.42857142857142855
User 39897 does not improve AUC. Reverting changes.
Training on augumented user 120030 46/50 current_auc = 0.42857142857142855
User 120030 AUC after training: 0.42857142857142855
User 120030 does not improve AUC. Reverting changes.
Training on augumented user 2397 47/50 current_auc = 0.42857142857142855
User 2397 AUC after training: 0.42857142857142855
User 2397 does not improve AUC. Reverting changes.
Training on augumented user 38562 48/50 current_auc = 0.42857142857142855
User 38562 AUC after training: 0.42857142857142855
User 38562 does not improve AUC. Reverting changes.
Training on augumented user 74078 49/50 current_auc = 0.42857142857142855
User 74078 AUC after training: 0.42857142857142855
User 74078 does not improve AUC. Reverting changes.
[2024-12-02 20:01:46.332163] start test user 62217 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:46.854125] start test user 62217 264/568 recall augumented users by random, augumented_users = [28457, 22048, 113334, 134650, 33071, 23217, 81398, 77447, 31622, 131187, 97401, 34002, 117550, 134549, 35027, 130497, 67635, 41961, 7831, 227, 96782, 70373, 45971, 6334, 11881, 54934, 132807, 97114, 9227, 115334, 137849, 73442, 5231, 81821, 9719, 2664, 50642, 72289, 76071, 117957, 113273, 18244, 34081, 66215, 39333, 46804, 71625, 116686, 52203, 93670]
[2024-12-02 20:01:46.869236] user = 62217 Cloud 264/568
[2024-12-02 20:01:46.885706] user = 62217 Local 264/568
[2024-12-02 20:01:46.945375] user = 62217 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:48.840092] user = 62217 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6481481481481481
Training on augumented user 28457 0/50 current_auc = 0.6481481481481481
User 28457 AUC after training: 0.6481481481481481
User 28457 does not improve AUC. Reverting changes.
Training on augumented user 22048 1/50 current_auc = 0.6481481481481481
User 22048 AUC after training: 0.6481481481481481
User 22048 does not improve AUC. Reverting changes.
Training on augumented user 113334 2/50 current_auc = 0.6481481481481481
User 113334 AUC after training: 0.6574074074074074
User 113334 improves AUC. Keeping the model.
Training on augumented user 134650 3/50 current_auc = 0.6574074074074074
User 134650 AUC after training: 0.6481481481481481
User 134650 does not improve AUC. Reverting changes.
Training on augumented user 33071 4/50 current_auc = 0.6574074074074074
User 33071 AUC after training: 0.6481481481481481
User 33071 does not improve AUC. Reverting changes.
Training on augumented user 23217 5/50 current_auc = 0.6574074074074074
User 23217 AUC after training: 0.6574074074074074
User 23217 does not improve AUC. Reverting changes.
Training on augumented user 81398 6/50 current_auc = 0.6574074074074074
User 81398 AUC after training: 0.6574074074074074
User 81398 does not improve AUC. Reverting changes.
Training on augumented user 77447 7/50 current_auc = 0.6574074074074074
User 77447 AUC after training: 0.6481481481481481
User 77447 does not improve AUC. Reverting changes.
Training on augumented user 31622 8/50 current_auc = 0.6574074074074074
User 31622 AUC after training: 0.6574074074074074
User 31622 does not improve AUC. Reverting changes.
Training on augumented user 131187 9/50 current_auc = 0.6574074074074074
User 131187 AUC after training: 0.6574074074074074
User 131187 does not improve AUC. Reverting changes.
Training on augumented user 97401 10/50 current_auc = 0.6574074074074074
User 97401 AUC after training: 0.6574074074074074
User 97401 does not improve AUC. Reverting changes.
Training on augumented user 34002 11/50 current_auc = 0.6574074074074074
User 34002 AUC after training: 0.6574074074074074
User 34002 does not improve AUC. Reverting changes.
Training on augumented user 117550 12/50 current_auc = 0.6574074074074074
User 117550 AUC after training: 0.6481481481481481
User 117550 does not improve AUC. Reverting changes.
Training on augumented user 134549 13/50 current_auc = 0.6574074074074074
User 134549 AUC after training: 0.6574074074074074
User 134549 does not improve AUC. Reverting changes.
Training on augumented user 35027 14/50 current_auc = 0.6574074074074074
User 35027 AUC after training: 0.6574074074074074
User 35027 does not improve AUC. Reverting changes.
Training on augumented user 130497 15/50 current_auc = 0.6574074074074074
User 130497 AUC after training: 0.6574074074074074
User 130497 does not improve AUC. Reverting changes.
Training on augumented user 67635 16/50 current_auc = 0.6574074074074074
User 67635 AUC after training: 0.6388888888888888
User 67635 does not improve AUC. Reverting changes.
Training on augumented user 41961 17/50 current_auc = 0.6574074074074074
User 41961 AUC after training: 0.6666666666666666
User 41961 improves AUC. Keeping the model.
Training on augumented user 7831 18/50 current_auc = 0.6666666666666666
User 7831 AUC after training: 0.6574074074074074
User 7831 does not improve AUC. Reverting changes.
Training on augumented user 227 19/50 current_auc = 0.6666666666666666
User 227 AUC after training: 0.6666666666666666
User 227 does not improve AUC. Reverting changes.
Training on augumented user 96782 20/50 current_auc = 0.6666666666666666
User 96782 AUC after training: 0.6574074074074074
User 96782 does not improve AUC. Reverting changes.
Training on augumented user 70373 21/50 current_auc = 0.6666666666666666
User 70373 AUC after training: 0.6666666666666666
User 70373 does not improve AUC. Reverting changes.
Training on augumented user 45971 22/50 current_auc = 0.6666666666666666
User 45971 AUC after training: 0.6481481481481481
User 45971 does not improve AUC. Reverting changes.
Training on augumented user 6334 23/50 current_auc = 0.6666666666666666
User 6334 AUC after training: 0.6574074074074074
User 6334 does not improve AUC. Reverting changes.
Training on augumented user 11881 24/50 current_auc = 0.6666666666666666
User 11881 AUC after training: 0.6574074074074074
User 11881 does not improve AUC. Reverting changes.
Training on augumented user 54934 25/50 current_auc = 0.6666666666666666
User 54934 AUC after training: 0.6574074074074074
User 54934 does not improve AUC. Reverting changes.
Training on augumented user 132807 26/50 current_auc = 0.6666666666666666
User 132807 AUC after training: 0.6666666666666666
User 132807 does not improve AUC. Reverting changes.
Training on augumented user 97114 27/50 current_auc = 0.6666666666666666
User 97114 AUC after training: 0.6574074074074074
User 97114 does not improve AUC. Reverting changes.
Training on augumented user 9227 28/50 current_auc = 0.6666666666666666
User 9227 AUC after training: 0.6574074074074074
User 9227 does not improve AUC. Reverting changes.
Training on augumented user 115334 29/50 current_auc = 0.6666666666666666
User 115334 AUC after training: 0.6481481481481481
User 115334 does not improve AUC. Reverting changes.
Training on augumented user 137849 30/50 current_auc = 0.6666666666666666
User 137849 AUC after training: 0.6666666666666666
User 137849 does not improve AUC. Reverting changes.
Training on augumented user 73442 31/50 current_auc = 0.6666666666666666
User 73442 AUC after training: 0.6666666666666666
User 73442 does not improve AUC. Reverting changes.
Training on augumented user 5231 32/50 current_auc = 0.6666666666666666
User 5231 AUC after training: 0.6481481481481481
User 5231 does not improve AUC. Reverting changes.
Training on augumented user 81821 33/50 current_auc = 0.6666666666666666
User 81821 AUC after training: 0.6666666666666666
User 81821 does not improve AUC. Reverting changes.
Training on augumented user 9719 34/50 current_auc = 0.6666666666666666
User 9719 AUC after training: 0.6666666666666666
User 9719 does not improve AUC. Reverting changes.
Training on augumented user 2664 35/50 current_auc = 0.6666666666666666
User 2664 AUC after training: 0.6666666666666666
User 2664 does not improve AUC. Reverting changes.
Training on augumented user 50642 36/50 current_auc = 0.6666666666666666
User 50642 AUC after training: 0.6574074074074074
User 50642 does not improve AUC. Reverting changes.
Training on augumented user 72289 37/50 current_auc = 0.6666666666666666
User 72289 AUC after training: 0.6666666666666666
User 72289 does not improve AUC. Reverting changes.
Training on augumented user 76071 38/50 current_auc = 0.6666666666666666
User 76071 AUC after training: 0.6666666666666666
User 76071 does not improve AUC. Reverting changes.
Training on augumented user 117957 39/50 current_auc = 0.6666666666666666
User 117957 AUC after training: 0.6666666666666666
User 117957 does not improve AUC. Reverting changes.
Training on augumented user 113273 40/50 current_auc = 0.6666666666666666
User 113273 AUC after training: 0.6666666666666666
User 113273 does not improve AUC. Reverting changes.
Training on augumented user 18244 41/50 current_auc = 0.6666666666666666
User 18244 AUC after training: 0.6574074074074074
User 18244 does not improve AUC. Reverting changes.
Training on augumented user 34081 42/50 current_auc = 0.6666666666666666
User 34081 AUC after training: 0.6666666666666666
User 34081 does not improve AUC. Reverting changes.
Training on augumented user 66215 43/50 current_auc = 0.6666666666666666
User 66215 AUC after training: 0.6481481481481481
User 66215 does not improve AUC. Reverting changes.
Training on augumented user 39333 44/50 current_auc = 0.6666666666666666
User 39333 AUC after training: 0.6574074074074074
User 39333 does not improve AUC. Reverting changes.
Training on augumented user 46804 45/50 current_auc = 0.6666666666666666
User 46804 AUC after training: 0.6574074074074074
User 46804 does not improve AUC. Reverting changes.
Training on augumented user 71625 46/50 current_auc = 0.6666666666666666
User 71625 AUC after training: 0.6574074074074074
User 71625 does not improve AUC. Reverting changes.
Training on augumented user 116686 47/50 current_auc = 0.6666666666666666
User 116686 AUC after training: 0.6481481481481481
User 116686 does not improve AUC. Reverting changes.
Training on augumented user 52203 48/50 current_auc = 0.6666666666666666
User 52203 AUC after training: 0.6666666666666666
User 52203 does not improve AUC. Reverting changes.
Training on augumented user 93670 49/50 current_auc = 0.6666666666666666
User 93670 AUC after training: 0.6574074074074074
User 93670 does not improve AUC. Reverting changes.
[2024-12-02 20:02:15.594704] start test user 62218 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:16.422658] start test user 62218 265/568 recall augumented users by random, augumented_users = [62227, 119785, 34831, 50969, 136512, 67773, 22581, 120134, 82471, 92633, 37521, 115083, 45925, 93729, 68019, 90989, 16289, 125999, 17678, 106064, 99890, 59332, 83190, 88728, 123010, 58050, 94118, 43243, 107487, 16007, 126530, 23860, 123326, 45572, 76080, 76521, 104107, 88152, 80895, 37269, 129806, 64489, 96578, 62528, 29357, 38512, 115126, 82767, 7122, 41234]
[2024-12-02 20:02:16.450709] user = 62218 Cloud 265/568
[2024-12-02 20:02:16.475455] user = 62218 Local 265/568
[2024-12-02 20:02:16.607029] user = 62218 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:19.240528] user = 62218 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4041666666666667
Training on augumented user 62227 0/50 current_auc = 0.4041666666666667
User 62227 AUC after training: 0.4041666666666667
User 62227 does not improve AUC. Reverting changes.
Training on augumented user 119785 1/50 current_auc = 0.4041666666666667
User 119785 AUC after training: 0.4041666666666667
User 119785 does not improve AUC. Reverting changes.
Training on augumented user 34831 2/50 current_auc = 0.4041666666666667
User 34831 AUC after training: 0.4041666666666667
User 34831 does not improve AUC. Reverting changes.
Training on augumented user 50969 3/50 current_auc = 0.4041666666666667
User 50969 AUC after training: 0.4041666666666667
User 50969 does not improve AUC. Reverting changes.
Training on augumented user 136512 4/50 current_auc = 0.4041666666666667
User 136512 AUC after training: 0.4041666666666667
User 136512 does not improve AUC. Reverting changes.
Training on augumented user 67773 5/50 current_auc = 0.4041666666666667
User 67773 AUC after training: 0.4041666666666667
User 67773 does not improve AUC. Reverting changes.
Training on augumented user 22581 6/50 current_auc = 0.4041666666666667
User 22581 AUC after training: 0.4041666666666667
User 22581 does not improve AUC. Reverting changes.
Training on augumented user 120134 7/50 current_auc = 0.4041666666666667
User 120134 AUC after training: 0.4041666666666667
User 120134 does not improve AUC. Reverting changes.
Training on augumented user 82471 8/50 current_auc = 0.4041666666666667
User 82471 AUC after training: 0.4041666666666667
User 82471 does not improve AUC. Reverting changes.
Training on augumented user 92633 9/50 current_auc = 0.4041666666666667
User 92633 AUC after training: 0.4041666666666667
User 92633 does not improve AUC. Reverting changes.
Training on augumented user 37521 10/50 current_auc = 0.4041666666666667
User 37521 AUC after training: 0.4041666666666667
User 37521 does not improve AUC. Reverting changes.
Training on augumented user 115083 11/50 current_auc = 0.4041666666666667
User 115083 AUC after training: 0.4041666666666667
User 115083 does not improve AUC. Reverting changes.
Training on augumented user 45925 12/50 current_auc = 0.4041666666666667
User 45925 AUC after training: 0.4041666666666667
User 45925 does not improve AUC. Reverting changes.
Training on augumented user 93729 13/50 current_auc = 0.4041666666666667
User 93729 AUC after training: 0.4041666666666667
User 93729 does not improve AUC. Reverting changes.
Training on augumented user 68019 14/50 current_auc = 0.4041666666666667
User 68019 AUC after training: 0.4041666666666667
User 68019 does not improve AUC. Reverting changes.
Training on augumented user 90989 15/50 current_auc = 0.4041666666666667
User 90989 AUC after training: 0.4041666666666667
User 90989 does not improve AUC. Reverting changes.
Training on augumented user 16289 16/50 current_auc = 0.4041666666666667
User 16289 AUC after training: 0.4041666666666667
User 16289 does not improve AUC. Reverting changes.
Training on augumented user 125999 17/50 current_auc = 0.4041666666666667
User 125999 AUC after training: 0.4041666666666667
User 125999 does not improve AUC. Reverting changes.
Training on augumented user 17678 18/50 current_auc = 0.4041666666666667
User 17678 AUC after training: 0.4041666666666667
User 17678 does not improve AUC. Reverting changes.
Training on augumented user 106064 19/50 current_auc = 0.4041666666666667
User 106064 AUC after training: 0.4041666666666667
User 106064 does not improve AUC. Reverting changes.
Training on augumented user 99890 20/50 current_auc = 0.4041666666666667
User 99890 AUC after training: 0.4083333333333333
User 99890 improves AUC. Keeping the model.
Training on augumented user 59332 21/50 current_auc = 0.4083333333333333
User 59332 AUC after training: 0.39999999999999997
User 59332 does not improve AUC. Reverting changes.
Training on augumented user 83190 22/50 current_auc = 0.4083333333333333
User 83190 AUC after training: 0.39999999999999997
User 83190 does not improve AUC. Reverting changes.
Training on augumented user 88728 23/50 current_auc = 0.4083333333333333
User 88728 AUC after training: 0.4041666666666667
User 88728 does not improve AUC. Reverting changes.
Training on augumented user 123010 24/50 current_auc = 0.4083333333333333
User 123010 AUC after training: 0.39999999999999997
User 123010 does not improve AUC. Reverting changes.
Training on augumented user 58050 25/50 current_auc = 0.4083333333333333
User 58050 AUC after training: 0.39999999999999997
User 58050 does not improve AUC. Reverting changes.
Training on augumented user 94118 26/50 current_auc = 0.4083333333333333
User 94118 AUC after training: 0.4083333333333333
User 94118 does not improve AUC. Reverting changes.
Training on augumented user 43243 27/50 current_auc = 0.4083333333333333
User 43243 AUC after training: 0.4083333333333333
User 43243 does not improve AUC. Reverting changes.
Training on augumented user 107487 28/50 current_auc = 0.4083333333333333
User 107487 AUC after training: 0.4083333333333333
User 107487 does not improve AUC. Reverting changes.
Training on augumented user 16007 29/50 current_auc = 0.4083333333333333
User 16007 AUC after training: 0.4083333333333333
User 16007 does not improve AUC. Reverting changes.
Training on augumented user 126530 30/50 current_auc = 0.4083333333333333
User 126530 AUC after training: 0.4083333333333333
User 126530 does not improve AUC. Reverting changes.
Training on augumented user 23860 31/50 current_auc = 0.4083333333333333
User 23860 AUC after training: 0.4083333333333333
User 23860 does not improve AUC. Reverting changes.
Training on augumented user 123326 32/50 current_auc = 0.4083333333333333
User 123326 AUC after training: 0.4083333333333333
User 123326 does not improve AUC. Reverting changes.
Training on augumented user 45572 33/50 current_auc = 0.4083333333333333
User 45572 AUC after training: 0.4041666666666667
User 45572 does not improve AUC. Reverting changes.
Training on augumented user 76080 34/50 current_auc = 0.4083333333333333
User 76080 AUC after training: 0.4041666666666667
User 76080 does not improve AUC. Reverting changes.
Training on augumented user 76521 35/50 current_auc = 0.4083333333333333
User 76521 AUC after training: 0.4041666666666667
User 76521 does not improve AUC. Reverting changes.
Training on augumented user 104107 36/50 current_auc = 0.4083333333333333
User 104107 AUC after training: 0.4041666666666667
User 104107 does not improve AUC. Reverting changes.
Training on augumented user 88152 37/50 current_auc = 0.4083333333333333
User 88152 AUC after training: 0.4083333333333333
User 88152 does not improve AUC. Reverting changes.
Training on augumented user 80895 38/50 current_auc = 0.4083333333333333
User 80895 AUC after training: 0.4041666666666667
User 80895 does not improve AUC. Reverting changes.
Training on augumented user 37269 39/50 current_auc = 0.4083333333333333
User 37269 AUC after training: 0.4041666666666667
User 37269 does not improve AUC. Reverting changes.
Training on augumented user 129806 40/50 current_auc = 0.4083333333333333
User 129806 AUC after training: 0.4083333333333333
User 129806 does not improve AUC. Reverting changes.
Training on augumented user 64489 41/50 current_auc = 0.4083333333333333
User 64489 AUC after training: 0.4083333333333333
User 64489 does not improve AUC. Reverting changes.
Training on augumented user 96578 42/50 current_auc = 0.4083333333333333
User 96578 AUC after training: 0.4041666666666667
User 96578 does not improve AUC. Reverting changes.
Training on augumented user 62528 43/50 current_auc = 0.4083333333333333
User 62528 AUC after training: 0.4083333333333333
User 62528 does not improve AUC. Reverting changes.
Training on augumented user 29357 44/50 current_auc = 0.4083333333333333
User 29357 AUC after training: 0.4083333333333333
User 29357 does not improve AUC. Reverting changes.
Training on augumented user 38512 45/50 current_auc = 0.4083333333333333
User 38512 AUC after training: 0.39999999999999997
User 38512 does not improve AUC. Reverting changes.
Training on augumented user 115126 46/50 current_auc = 0.4083333333333333
User 115126 AUC after training: 0.4041666666666666
User 115126 does not improve AUC. Reverting changes.
Training on augumented user 82767 47/50 current_auc = 0.4083333333333333
User 82767 AUC after training: 0.4083333333333333
User 82767 does not improve AUC. Reverting changes.
Training on augumented user 7122 48/50 current_auc = 0.4083333333333333
User 7122 AUC after training: 0.4041666666666667
User 7122 does not improve AUC. Reverting changes.
Training on augumented user 41234 49/50 current_auc = 0.4083333333333333
User 41234 AUC after training: 0.4083333333333333
User 41234 does not improve AUC. Reverting changes.
[2024-12-02 20:02:49.720610] start test user 62234 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:50.222543] start test user 62234 266/568 recall augumented users by random, augumented_users = [77902, 130610, 84264, 135820, 71253, 74142, 94808, 60390, 119836, 18137, 56547, 80365, 1430, 68367, 41064, 64796, 87730, 135330, 97758, 122168, 4899, 16760, 5512, 5030, 77382, 3154, 19289, 57380, 37950, 17405, 50826, 21884, 91805, 3792, 66997, 47013, 116179, 126004, 82832, 53976, 126805, 133751, 97284, 57428, 115974, 98170, 99825, 56244, 63659, 70993]
[2024-12-02 20:02:50.237466] user = 62234 Cloud 266/568
[2024-12-02 20:02:50.252798] user = 62234 Local 266/568
[2024-12-02 20:02:50.277685] user = 62234 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:52.713239] user = 62234 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6292629262926294
Training on augumented user 77902 0/50 current_auc = 0.6292629262926294
User 77902 AUC after training: 0.6266960029336269
User 77902 does not improve AUC. Reverting changes.
Training on augumented user 130610 1/50 current_auc = 0.6292629262926294
User 130610 AUC after training: 0.6281628162816283
User 130610 does not improve AUC. Reverting changes.
Training on augumented user 84264 2/50 current_auc = 0.6292629262926294
User 84264 AUC after training: 0.6292629262926294
User 84264 does not improve AUC. Reverting changes.
Training on augumented user 135820 3/50 current_auc = 0.6292629262926294
User 135820 AUC after training: 0.6281628162816283
User 135820 does not improve AUC. Reverting changes.
Training on augumented user 71253 4/50 current_auc = 0.6292629262926294
User 71253 AUC after training: 0.6263292995966263
User 71253 does not improve AUC. Reverting changes.
Training on augumented user 74142 5/50 current_auc = 0.6292629262926294
User 74142 AUC after training: 0.6296296296296297
User 74142 improves AUC. Keeping the model.
Training on augumented user 94808 6/50 current_auc = 0.6296296296296297
User 94808 AUC after training: 0.62999633296663
User 94808 improves AUC. Keeping the model.
Training on augumented user 60390 7/50 current_auc = 0.62999633296663
User 60390 AUC after training: 0.6281628162816283
User 60390 does not improve AUC. Reverting changes.
Training on augumented user 119836 8/50 current_auc = 0.62999633296663
User 119836 AUC after training: 0.6281628162816283
User 119836 does not improve AUC. Reverting changes.
Training on augumented user 18137 9/50 current_auc = 0.62999633296663
User 18137 AUC after training: 0.6307297396406308
User 18137 improves AUC. Keeping the model.
Training on augumented user 56547 10/50 current_auc = 0.6307297396406308
User 56547 AUC after training: 0.6296296296296297
User 56547 does not improve AUC. Reverting changes.
Training on augumented user 80365 11/50 current_auc = 0.6307297396406308
User 80365 AUC after training: 0.6263292995966265
User 80365 does not improve AUC. Reverting changes.
Training on augumented user 1430 12/50 current_auc = 0.6307297396406308
User 1430 AUC after training: 0.6310964429776312
User 1430 improves AUC. Keeping the model.
Training on augumented user 68367 13/50 current_auc = 0.6310964429776312
User 68367 AUC after training: 0.6351301796846353
User 68367 improves AUC. Keeping the model.
Training on augumented user 41064 14/50 current_auc = 0.6351301796846353
User 41064 AUC after training: 0.6310964429776311
User 41064 does not improve AUC. Reverting changes.
Training on augumented user 64796 15/50 current_auc = 0.6351301796846353
User 64796 AUC after training: 0.6354968830216355
User 64796 improves AUC. Keeping the model.
Training on augumented user 87730 16/50 current_auc = 0.6354968830216355
User 87730 AUC after training: 0.6332966629996334
User 87730 does not improve AUC. Reverting changes.
Training on augumented user 135330 17/50 current_auc = 0.6354968830216355
User 135330 AUC after training: 0.6358635863586359
User 135330 improves AUC. Keeping the model.
Training on augumented user 97758 18/50 current_auc = 0.6358635863586359
User 97758 AUC after training: 0.6354968830216355
User 97758 does not improve AUC. Reverting changes.
Training on augumented user 122168 19/50 current_auc = 0.6358635863586359
User 122168 AUC after training: 0.6343967730106345
User 122168 does not improve AUC. Reverting changes.
Training on augumented user 4899 20/50 current_auc = 0.6358635863586359
User 4899 AUC after training: 0.6351301796846351
User 4899 does not improve AUC. Reverting changes.
Training on augumented user 16760 21/50 current_auc = 0.6358635863586359
User 16760 AUC after training: 0.6336633663366336
User 16760 does not improve AUC. Reverting changes.
Training on augumented user 5512 22/50 current_auc = 0.6358635863586359
User 5512 AUC after training: 0.6358635863586358
User 5512 does not improve AUC. Reverting changes.
Training on augumented user 5030 23/50 current_auc = 0.6358635863586359
User 5030 AUC after training: 0.632929959662633
User 5030 does not improve AUC. Reverting changes.
Training on augumented user 77382 24/50 current_auc = 0.6358635863586359
User 77382 AUC after training: 0.636963696369637
User 77382 improves AUC. Keeping the model.
Training on augumented user 3154 25/50 current_auc = 0.636963696369637
User 3154 AUC after training: 0.6365969930326367
User 3154 does not improve AUC. Reverting changes.
Training on augumented user 19289 26/50 current_auc = 0.636963696369637
User 19289 AUC after training: 0.6354968830216355
User 19289 does not improve AUC. Reverting changes.
Training on augumented user 57380 27/50 current_auc = 0.636963696369637
User 57380 AUC after training: 0.6365969930326366
User 57380 does not improve AUC. Reverting changes.
Training on augumented user 37950 28/50 current_auc = 0.636963696369637
User 37950 AUC after training: 0.6365969930326367
User 37950 does not improve AUC. Reverting changes.
Training on augumented user 17405 29/50 current_auc = 0.636963696369637
User 17405 AUC after training: 0.6351301796846351
User 17405 does not improve AUC. Reverting changes.
Training on augumented user 50826 30/50 current_auc = 0.636963696369637
User 50826 AUC after training: 0.6365969930326367
User 50826 does not improve AUC. Reverting changes.
Training on augumented user 21884 31/50 current_auc = 0.636963696369637
User 21884 AUC after training: 0.6354968830216355
User 21884 does not improve AUC. Reverting changes.
Training on augumented user 91805 32/50 current_auc = 0.636963696369637
User 91805 AUC after training: 0.6365969930326367
User 91805 does not improve AUC. Reverting changes.
Training on augumented user 3792 33/50 current_auc = 0.636963696369637
User 3792 AUC after training: 0.6354968830216357
User 3792 does not improve AUC. Reverting changes.
Training on augumented user 66997 34/50 current_auc = 0.636963696369637
User 66997 AUC after training: 0.6358635863586359
User 66997 does not improve AUC. Reverting changes.
Training on augumented user 47013 35/50 current_auc = 0.636963696369637
User 47013 AUC after training: 0.6373303997066374
User 47013 improves AUC. Keeping the model.
Training on augumented user 116179 36/50 current_auc = 0.6373303997066374
User 116179 AUC after training: 0.6373303997066374
User 116179 does not improve AUC. Reverting changes.
Training on augumented user 126004 37/50 current_auc = 0.6373303997066374
User 126004 AUC after training: 0.6354968830216355
User 126004 does not improve AUC. Reverting changes.
Training on augumented user 82832 38/50 current_auc = 0.6373303997066374
User 82832 AUC after training: 0.6373303997066374
User 82832 does not improve AUC. Reverting changes.
Training on augumented user 53976 39/50 current_auc = 0.6373303997066374
User 53976 AUC after training: 0.6380638063806381
User 53976 improves AUC. Keeping the model.
Training on augumented user 126805 40/50 current_auc = 0.6380638063806381
User 126805 AUC after training: 0.636963696369637
User 126805 does not improve AUC. Reverting changes.
Training on augumented user 133751 41/50 current_auc = 0.6380638063806381
User 133751 AUC after training: 0.6376971030436377
User 133751 does not improve AUC. Reverting changes.
Training on augumented user 97284 42/50 current_auc = 0.6380638063806381
User 97284 AUC after training: 0.6384305097176385
User 97284 improves AUC. Keeping the model.
Training on augumented user 57428 43/50 current_auc = 0.6384305097176385
User 57428 AUC after training: 0.6373303997066374
User 57428 does not improve AUC. Reverting changes.
Training on augumented user 115974 44/50 current_auc = 0.6384305097176385
User 115974 AUC after training: 0.636963696369637
User 115974 does not improve AUC. Reverting changes.
Training on augumented user 98170 45/50 current_auc = 0.6384305097176385
User 98170 AUC after training: 0.6380638063806381
User 98170 does not improve AUC. Reverting changes.
Training on augumented user 99825 46/50 current_auc = 0.6384305097176385
User 99825 AUC after training: 0.6387972130546389
User 99825 improves AUC. Keeping the model.
Training on augumented user 56244 47/50 current_auc = 0.6387972130546389
User 56244 AUC after training: 0.6373303997066374
User 56244 does not improve AUC. Reverting changes.
Training on augumented user 63659 48/50 current_auc = 0.6387972130546389
User 63659 AUC after training: 0.6373303997066374
User 63659 does not improve AUC. Reverting changes.
Training on augumented user 70993 49/50 current_auc = 0.6387972130546389
User 70993 AUC after training: 0.6376971030436377
User 70993 does not improve AUC. Reverting changes.
[2024-12-02 20:03:23.428681] start test user 62243 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:23.870407] start test user 62243 267/568 recall augumented users by random, augumented_users = [72302, 64433, 25692, 87088, 134567, 36390, 58352, 65279, 22418, 33084, 16565, 98189, 48554, 64530, 132086, 70994, 123612, 16676, 9868, 86183, 28780, 37480, 72161, 34005, 1248, 66061, 75263, 100435, 116286, 46454, 14332, 2811, 1599, 54870, 113800, 47067, 124685, 70342, 18513, 116779, 18926, 31977, 74560, 53650, 70958, 114302, 119113, 123788, 123232, 134020]
[2024-12-02 20:03:23.885027] user = 62243 Cloud 267/568
[2024-12-02 20:03:23.915530] user = 62243 Local 267/568
[2024-12-02 20:03:23.960092] user = 62243 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:26.208249] user = 62243 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5889053254437869
Training on augumented user 72302 0/50 current_auc = 0.5889053254437869
User 72302 AUC after training: 0.5874260355029586
User 72302 does not improve AUC. Reverting changes.
Training on augumented user 64433 1/50 current_auc = 0.5889053254437869
User 64433 AUC after training: 0.5892011834319526
User 64433 improves AUC. Keeping the model.
Training on augumented user 25692 2/50 current_auc = 0.5892011834319526
User 25692 AUC after training: 0.5894970414201183
User 25692 improves AUC. Keeping the model.
Training on augumented user 87088 3/50 current_auc = 0.5894970414201183
User 87088 AUC after training: 0.5893491124260355
User 87088 does not improve AUC. Reverting changes.
Training on augumented user 134567 4/50 current_auc = 0.5894970414201183
User 134567 AUC after training: 0.5899408284023668
User 134567 improves AUC. Keeping the model.
Training on augumented user 36390 5/50 current_auc = 0.5899408284023668
User 36390 AUC after training: 0.589792899408284
User 36390 does not improve AUC. Reverting changes.
Training on augumented user 58352 6/50 current_auc = 0.5899408284023668
User 58352 AUC after training: 0.5897928994082839
User 58352 does not improve AUC. Reverting changes.
Training on augumented user 65279 7/50 current_auc = 0.5899408284023668
User 65279 AUC after training: 0.5902366863905325
User 65279 improves AUC. Keeping the model.
Training on augumented user 22418 8/50 current_auc = 0.5902366863905325
User 22418 AUC after training: 0.5896449704142013
User 22418 does not improve AUC. Reverting changes.
Training on augumented user 33084 9/50 current_auc = 0.5902366863905325
User 33084 AUC after training: 0.5896449704142012
User 33084 does not improve AUC. Reverting changes.
Training on augumented user 16565 10/50 current_auc = 0.5902366863905325
User 16565 AUC after training: 0.5897928994082839
User 16565 does not improve AUC. Reverting changes.
Training on augumented user 98189 11/50 current_auc = 0.5902366863905325
User 98189 AUC after training: 0.5893491124260355
User 98189 does not improve AUC. Reverting changes.
Training on augumented user 48554 12/50 current_auc = 0.5902366863905325
User 48554 AUC after training: 0.5880177514792899
User 48554 does not improve AUC. Reverting changes.
Training on augumented user 64530 13/50 current_auc = 0.5902366863905325
User 64530 AUC after training: 0.5896449704142013
User 64530 does not improve AUC. Reverting changes.
Training on augumented user 132086 14/50 current_auc = 0.5902366863905325
User 132086 AUC after training: 0.5896449704142012
User 132086 does not improve AUC. Reverting changes.
Training on augumented user 70994 15/50 current_auc = 0.5902366863905325
User 70994 AUC after training: 0.5894970414201183
User 70994 does not improve AUC. Reverting changes.
Training on augumented user 123612 16/50 current_auc = 0.5902366863905325
User 123612 AUC after training: 0.5884615384615385
User 123612 does not improve AUC. Reverting changes.
Training on augumented user 16676 17/50 current_auc = 0.5902366863905325
User 16676 AUC after training: 0.5909763313609468
User 16676 improves AUC. Keeping the model.
Training on augumented user 9868 18/50 current_auc = 0.5909763313609468
User 9868 AUC after training: 0.5915680473372781
User 9868 improves AUC. Keeping the model.
Training on augumented user 86183 19/50 current_auc = 0.5915680473372781
User 86183 AUC after training: 0.5917159763313609
User 86183 improves AUC. Keeping the model.
Training on augumented user 28780 20/50 current_auc = 0.5917159763313609
User 28780 AUC after training: 0.5915680473372781
User 28780 does not improve AUC. Reverting changes.
Training on augumented user 37480 21/50 current_auc = 0.5917159763313609
User 37480 AUC after training: 0.5914201183431953
User 37480 does not improve AUC. Reverting changes.
Training on augumented user 72161 22/50 current_auc = 0.5917159763313609
User 72161 AUC after training: 0.5911242603550296
User 72161 does not improve AUC. Reverting changes.
Training on augumented user 34005 23/50 current_auc = 0.5917159763313609
User 34005 AUC after training: 0.5918639053254438
User 34005 improves AUC. Keeping the model.
Training on augumented user 1248 24/50 current_auc = 0.5918639053254438
User 1248 AUC after training: 0.5921597633136094
User 1248 improves AUC. Keeping the model.
Training on augumented user 66061 25/50 current_auc = 0.5921597633136094
User 66061 AUC after training: 0.592603550295858
User 66061 improves AUC. Keeping the model.
Training on augumented user 75263 26/50 current_auc = 0.592603550295858
User 75263 AUC after training: 0.5923076923076923
User 75263 does not improve AUC. Reverting changes.
Training on augumented user 100435 27/50 current_auc = 0.592603550295858
User 100435 AUC after training: 0.592603550295858
User 100435 does not improve AUC. Reverting changes.
Training on augumented user 116286 28/50 current_auc = 0.592603550295858
User 116286 AUC after training: 0.5923076923076922
User 116286 does not improve AUC. Reverting changes.
Training on augumented user 46454 29/50 current_auc = 0.592603550295858
User 46454 AUC after training: 0.5921597633136094
User 46454 does not improve AUC. Reverting changes.
Training on augumented user 14332 30/50 current_auc = 0.592603550295858
User 14332 AUC after training: 0.5920118343195266
User 14332 does not improve AUC. Reverting changes.
Training on augumented user 2811 31/50 current_auc = 0.592603550295858
User 2811 AUC after training: 0.5918639053254438
User 2811 does not improve AUC. Reverting changes.
Training on augumented user 1599 32/50 current_auc = 0.592603550295858
User 1599 AUC after training: 0.592603550295858
User 1599 does not improve AUC. Reverting changes.
Training on augumented user 54870 33/50 current_auc = 0.592603550295858
User 54870 AUC after training: 0.5923076923076923
User 54870 does not improve AUC. Reverting changes.
Training on augumented user 113800 34/50 current_auc = 0.592603550295858
User 113800 AUC after training: 0.5911242603550296
User 113800 does not improve AUC. Reverting changes.
Training on augumented user 47067 35/50 current_auc = 0.592603550295858
User 47067 AUC after training: 0.5923076923076922
User 47067 does not improve AUC. Reverting changes.
Training on augumented user 124685 36/50 current_auc = 0.592603550295858
User 124685 AUC after training: 0.5928994082840237
User 124685 improves AUC. Keeping the model.
Training on augumented user 70342 37/50 current_auc = 0.5928994082840237
User 70342 AUC after training: 0.5924556213017751
User 70342 does not improve AUC. Reverting changes.
Training on augumented user 18513 38/50 current_auc = 0.5928994082840237
User 18513 AUC after training: 0.5933431952662722
User 18513 improves AUC. Keeping the model.
Training on augumented user 116779 39/50 current_auc = 0.5933431952662722
User 116779 AUC after training: 0.5933431952662721
User 116779 does not improve AUC. Reverting changes.
Training on augumented user 18926 40/50 current_auc = 0.5933431952662722
User 18926 AUC after training: 0.5930473372781065
User 18926 does not improve AUC. Reverting changes.
Training on augumented user 31977 41/50 current_auc = 0.5933431952662722
User 31977 AUC after training: 0.593491124260355
User 31977 improves AUC. Keeping the model.
Training on augumented user 74560 42/50 current_auc = 0.593491124260355
User 74560 AUC after training: 0.5936390532544379
User 74560 improves AUC. Keeping the model.
Training on augumented user 53650 43/50 current_auc = 0.5936390532544379
User 53650 AUC after training: 0.5920118343195266
User 53650 does not improve AUC. Reverting changes.
Training on augumented user 70958 44/50 current_auc = 0.5936390532544379
User 70958 AUC after training: 0.5936390532544379
User 70958 does not improve AUC. Reverting changes.
Training on augumented user 114302 45/50 current_auc = 0.5936390532544379
User 114302 AUC after training: 0.5933431952662722
User 114302 does not improve AUC. Reverting changes.
Training on augumented user 119113 46/50 current_auc = 0.5936390532544379
User 119113 AUC after training: 0.5930473372781065
User 119113 does not improve AUC. Reverting changes.
Training on augumented user 123788 47/50 current_auc = 0.5936390532544379
User 123788 AUC after training: 0.5931952662721893
User 123788 does not improve AUC. Reverting changes.
Training on augumented user 123232 48/50 current_auc = 0.5936390532544379
User 123232 AUC after training: 0.592603550295858
User 123232 does not improve AUC. Reverting changes.
Training on augumented user 134020 49/50 current_auc = 0.5936390532544379
User 134020 AUC after training: 0.5936390532544379
User 134020 does not improve AUC. Reverting changes.
[2024-12-02 20:03:54.889548] start test user 62259 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:55.325888] start test user 62259 268/568 recall augumented users by random, augumented_users = [16562, 133924, 130673, 130576, 31678, 5617, 99141, 26148, 93922, 128685, 42753, 114725, 53323, 38344, 106670, 85610, 124565, 47851, 12527, 48537, 101514, 69607, 125664, 26251, 63983, 113076, 2894, 116159, 84712, 3603, 115667, 27297, 129111, 62663, 80974, 128136, 16161, 80558, 63444, 61082, 92515, 94343, 45309, 54421, 97445, 44486, 9092, 111070, 46771, 48650]
[2024-12-02 20:03:55.341261] user = 62259 Cloud 268/568
[2024-12-02 20:03:55.352512] user = 62259 Local 268/568
[2024-12-02 20:03:55.383394] user = 62259 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:57.287056] user = 62259 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.728
Training on augumented user 16562 0/50 current_auc = 0.728
User 16562 AUC after training: 0.728
User 16562 does not improve AUC. Reverting changes.
Training on augumented user 133924 1/50 current_auc = 0.728
User 133924 AUC after training: 0.728
User 133924 does not improve AUC. Reverting changes.
Training on augumented user 130673 2/50 current_auc = 0.728
User 130673 AUC after training: 0.728
User 130673 does not improve AUC. Reverting changes.
Training on augumented user 130576 3/50 current_auc = 0.728
User 130576 AUC after training: 0.728
User 130576 does not improve AUC. Reverting changes.
Training on augumented user 31678 4/50 current_auc = 0.728
User 31678 AUC after training: 0.724
User 31678 does not improve AUC. Reverting changes.
Training on augumented user 5617 5/50 current_auc = 0.728
User 5617 AUC after training: 0.728
User 5617 does not improve AUC. Reverting changes.
Training on augumented user 99141 6/50 current_auc = 0.728
User 99141 AUC after training: 0.728
User 99141 does not improve AUC. Reverting changes.
Training on augumented user 26148 7/50 current_auc = 0.728
User 26148 AUC after training: 0.726
User 26148 does not improve AUC. Reverting changes.
Training on augumented user 93922 8/50 current_auc = 0.728
User 93922 AUC after training: 0.728
User 93922 does not improve AUC. Reverting changes.
Training on augumented user 128685 9/50 current_auc = 0.728
User 128685 AUC after training: 0.728
User 128685 does not improve AUC. Reverting changes.
Training on augumented user 42753 10/50 current_auc = 0.728
User 42753 AUC after training: 0.728
User 42753 does not improve AUC. Reverting changes.
Training on augumented user 114725 11/50 current_auc = 0.728
User 114725 AUC after training: 0.728
User 114725 does not improve AUC. Reverting changes.
Training on augumented user 53323 12/50 current_auc = 0.728
User 53323 AUC after training: 0.728
User 53323 does not improve AUC. Reverting changes.
Training on augumented user 38344 13/50 current_auc = 0.728
User 38344 AUC after training: 0.728
User 38344 does not improve AUC. Reverting changes.
Training on augumented user 106670 14/50 current_auc = 0.728
User 106670 AUC after training: 0.728
User 106670 does not improve AUC. Reverting changes.
Training on augumented user 85610 15/50 current_auc = 0.728
User 85610 AUC after training: 0.728
User 85610 does not improve AUC. Reverting changes.
Training on augumented user 124565 16/50 current_auc = 0.728
User 124565 AUC after training: 0.728
User 124565 does not improve AUC. Reverting changes.
Training on augumented user 47851 17/50 current_auc = 0.728
User 47851 AUC after training: 0.728
User 47851 does not improve AUC. Reverting changes.
Training on augumented user 12527 18/50 current_auc = 0.728
User 12527 AUC after training: 0.728
User 12527 does not improve AUC. Reverting changes.
Training on augumented user 48537 19/50 current_auc = 0.728
User 48537 AUC after training: 0.728
User 48537 does not improve AUC. Reverting changes.
Training on augumented user 101514 20/50 current_auc = 0.728
User 101514 AUC after training: 0.728
User 101514 does not improve AUC. Reverting changes.
Training on augumented user 69607 21/50 current_auc = 0.728
User 69607 AUC after training: 0.728
User 69607 does not improve AUC. Reverting changes.
Training on augumented user 125664 22/50 current_auc = 0.728
User 125664 AUC after training: 0.728
User 125664 does not improve AUC. Reverting changes.
Training on augumented user 26251 23/50 current_auc = 0.728
User 26251 AUC after training: 0.728
User 26251 does not improve AUC. Reverting changes.
Training on augumented user 63983 24/50 current_auc = 0.728
User 63983 AUC after training: 0.728
User 63983 does not improve AUC. Reverting changes.
Training on augumented user 113076 25/50 current_auc = 0.728
User 113076 AUC after training: 0.728
User 113076 does not improve AUC. Reverting changes.
Training on augumented user 2894 26/50 current_auc = 0.728
User 2894 AUC after training: 0.728
User 2894 does not improve AUC. Reverting changes.
Training on augumented user 116159 27/50 current_auc = 0.728
User 116159 AUC after training: 0.728
User 116159 does not improve AUC. Reverting changes.
Training on augumented user 84712 28/50 current_auc = 0.728
User 84712 AUC after training: 0.728
User 84712 does not improve AUC. Reverting changes.
Training on augumented user 3603 29/50 current_auc = 0.728
User 3603 AUC after training: 0.728
User 3603 does not improve AUC. Reverting changes.
Training on augumented user 115667 30/50 current_auc = 0.728
User 115667 AUC after training: 0.728
User 115667 does not improve AUC. Reverting changes.
Training on augumented user 27297 31/50 current_auc = 0.728
User 27297 AUC after training: 0.728
User 27297 does not improve AUC. Reverting changes.
Training on augumented user 129111 32/50 current_auc = 0.728
User 129111 AUC after training: 0.728
User 129111 does not improve AUC. Reverting changes.
Training on augumented user 62663 33/50 current_auc = 0.728
User 62663 AUC after training: 0.728
User 62663 does not improve AUC. Reverting changes.
Training on augumented user 80974 34/50 current_auc = 0.728
User 80974 AUC after training: 0.726
User 80974 does not improve AUC. Reverting changes.
Training on augumented user 128136 35/50 current_auc = 0.728
User 128136 AUC after training: 0.726
User 128136 does not improve AUC. Reverting changes.
Training on augumented user 16161 36/50 current_auc = 0.728
User 16161 AUC after training: 0.728
User 16161 does not improve AUC. Reverting changes.
Training on augumented user 80558 37/50 current_auc = 0.728
User 80558 AUC after training: 0.728
User 80558 does not improve AUC. Reverting changes.
Training on augumented user 63444 38/50 current_auc = 0.728
User 63444 AUC after training: 0.73
User 63444 improves AUC. Keeping the model.
Training on augumented user 61082 39/50 current_auc = 0.73
User 61082 AUC after training: 0.73
User 61082 does not improve AUC. Reverting changes.
Training on augumented user 92515 40/50 current_auc = 0.73
User 92515 AUC after training: 0.726
User 92515 does not improve AUC. Reverting changes.
Training on augumented user 94343 41/50 current_auc = 0.73
User 94343 AUC after training: 0.728
User 94343 does not improve AUC. Reverting changes.
Training on augumented user 45309 42/50 current_auc = 0.73
User 45309 AUC after training: 0.73
User 45309 does not improve AUC. Reverting changes.
Training on augumented user 54421 43/50 current_auc = 0.73
User 54421 AUC after training: 0.738
User 54421 improves AUC. Keeping the model.
Training on augumented user 97445 44/50 current_auc = 0.738
User 97445 AUC after training: 0.728
User 97445 does not improve AUC. Reverting changes.
Training on augumented user 44486 45/50 current_auc = 0.738
User 44486 AUC after training: 0.74
User 44486 improves AUC. Keeping the model.
Training on augumented user 9092 46/50 current_auc = 0.74
User 9092 AUC after training: 0.742
User 9092 improves AUC. Keeping the model.
Training on augumented user 111070 47/50 current_auc = 0.742
User 111070 AUC after training: 0.736
User 111070 does not improve AUC. Reverting changes.
Training on augumented user 46771 48/50 current_auc = 0.742
User 46771 AUC after training: 0.74
User 46771 does not improve AUC. Reverting changes.
Training on augumented user 48650 49/50 current_auc = 0.742
User 48650 AUC after training: 0.74
User 48650 does not improve AUC. Reverting changes.
[2024-12-02 20:04:23.632790] start test user 62340 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:24.044864] start test user 62340 269/568 recall augumented users by random, augumented_users = [104806, 33127, 62586, 137007, 101009, 48149, 34557, 23791, 119402, 95846, 103669, 114138, 131788, 91219, 113349, 68106, 125578, 2100, 70962, 18431, 78232, 102127, 53922, 90355, 81628, 34757, 123166, 64157, 71934, 86698, 68540, 69260, 135030, 70229, 30682, 25145, 26741, 74832, 30676, 16197, 6100, 119314, 136942, 124982, 62087, 56344, 83556, 56888, 88196, 37584]
[2024-12-02 20:04:24.061311] user = 62340 Cloud 269/568
[2024-12-02 20:04:24.091833] user = 62340 Local 269/568
[2024-12-02 20:04:24.236502] user = 62340 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:27.330232] user = 62340 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6621840094062316
Training on augumented user 104806 0/50 current_auc = 0.6621840094062316
User 104806 AUC after training: 0.6618165784832452
User 104806 does not improve AUC. Reverting changes.
Training on augumented user 33127 1/50 current_auc = 0.6621840094062316
User 33127 AUC after training: 0.6624779541446209
User 33127 improves AUC. Keeping the model.
Training on augumented user 62586 2/50 current_auc = 0.6624779541446209
User 62586 AUC after training: 0.6621840094062317
User 62586 does not improve AUC. Reverting changes.
Training on augumented user 137007 3/50 current_auc = 0.6624779541446209
User 137007 AUC after training: 0.6622574955908289
User 137007 does not improve AUC. Reverting changes.
Training on augumented user 101009 4/50 current_auc = 0.6624779541446209
User 101009 AUC after training: 0.6621105232216344
User 101009 does not improve AUC. Reverting changes.
Training on augumented user 48149 5/50 current_auc = 0.6624779541446209
User 48149 AUC after training: 0.6629188712522047
User 48149 improves AUC. Keeping the model.
Training on augumented user 34557 6/50 current_auc = 0.6629188712522047
User 34557 AUC after training: 0.6629923574368018
User 34557 improves AUC. Keeping the model.
Training on augumented user 23791 7/50 current_auc = 0.6629923574368018
User 23791 AUC after training: 0.6626984126984127
User 23791 does not improve AUC. Reverting changes.
Training on augumented user 119402 8/50 current_auc = 0.6629923574368018
User 119402 AUC after training: 0.6625514403292182
User 119402 does not improve AUC. Reverting changes.
Training on augumented user 95846 9/50 current_auc = 0.6629923574368018
User 95846 AUC after training: 0.6633597883597883
User 95846 improves AUC. Keeping the model.
Training on augumented user 103669 10/50 current_auc = 0.6633597883597883
User 103669 AUC after training: 0.6626984126984127
User 103669 does not improve AUC. Reverting changes.
Training on augumented user 114138 11/50 current_auc = 0.6633597883597883
User 114138 AUC after training: 0.6623309817754262
User 114138 does not improve AUC. Reverting changes.
Training on augumented user 131788 12/50 current_auc = 0.6633597883597883
User 131788 AUC after training: 0.6626249265138154
User 131788 does not improve AUC. Reverting changes.
Training on augumented user 91219 13/50 current_auc = 0.6633597883597883
User 91219 AUC after training: 0.6629923574368018
User 91219 does not improve AUC. Reverting changes.
Training on augumented user 113349 14/50 current_auc = 0.6633597883597883
User 113349 AUC after training: 0.6629923574368018
User 113349 does not improve AUC. Reverting changes.
Training on augumented user 68106 15/50 current_auc = 0.6633597883597883
User 68106 AUC after training: 0.6621105232216343
User 68106 does not improve AUC. Reverting changes.
Training on augumented user 125578 16/50 current_auc = 0.6633597883597883
User 125578 AUC after training: 0.6629923574368018
User 125578 does not improve AUC. Reverting changes.
Training on augumented user 2100 17/50 current_auc = 0.6633597883597883
User 2100 AUC after training: 0.6632863021751911
User 2100 does not improve AUC. Reverting changes.
Training on augumented user 70962 18/50 current_auc = 0.6633597883597883
User 70962 AUC after training: 0.6621840094062317
User 70962 does not improve AUC. Reverting changes.
Training on augumented user 18431 19/50 current_auc = 0.6633597883597883
User 18431 AUC after training: 0.6629188712522046
User 18431 does not improve AUC. Reverting changes.
Training on augumented user 78232 20/50 current_auc = 0.6633597883597883
User 78232 AUC after training: 0.6632863021751911
User 78232 does not improve AUC. Reverting changes.
Training on augumented user 102127 21/50 current_auc = 0.6633597883597883
User 102127 AUC after training: 0.6632863021751911
User 102127 does not improve AUC. Reverting changes.
Training on augumented user 53922 22/50 current_auc = 0.6633597883597883
User 53922 AUC after training: 0.6632128159905938
User 53922 does not improve AUC. Reverting changes.
Training on augumented user 90355 23/50 current_auc = 0.6633597883597883
User 90355 AUC after training: 0.6623309817754263
User 90355 does not improve AUC. Reverting changes.
Training on augumented user 81628 24/50 current_auc = 0.6633597883597883
User 81628 AUC after training: 0.66277189888301
User 81628 does not improve AUC. Reverting changes.
Training on augumented user 34757 25/50 current_auc = 0.6633597883597883
User 34757 AUC after training: 0.6624044679600235
User 34757 does not improve AUC. Reverting changes.
Training on augumented user 123166 26/50 current_auc = 0.6633597883597883
User 123166 AUC after training: 0.6632863021751911
User 123166 does not improve AUC. Reverting changes.
Training on augumented user 64157 27/50 current_auc = 0.6633597883597883
User 64157 AUC after training: 0.6630658436213992
User 64157 does not improve AUC. Reverting changes.
Training on augumented user 71934 28/50 current_auc = 0.6633597883597883
User 71934 AUC after training: 0.6632128159905938
User 71934 does not improve AUC. Reverting changes.
Training on augumented user 86698 29/50 current_auc = 0.6633597883597883
User 86698 AUC after training: 0.6630658436213992
User 86698 does not improve AUC. Reverting changes.
Training on augumented user 68540 30/50 current_auc = 0.6633597883597883
User 68540 AUC after training: 0.6630658436213991
User 68540 does not improve AUC. Reverting changes.
Training on augumented user 69260 31/50 current_auc = 0.6633597883597883
User 69260 AUC after training: 0.6628453850676072
User 69260 does not improve AUC. Reverting changes.
Training on augumented user 135030 32/50 current_auc = 0.6633597883597883
User 135030 AUC after training: 0.663286302175191
User 135030 does not improve AUC. Reverting changes.
Training on augumented user 70229 33/50 current_auc = 0.6633597883597883
User 70229 AUC after training: 0.6629923574368018
User 70229 does not improve AUC. Reverting changes.
Training on augumented user 30682 34/50 current_auc = 0.6633597883597883
User 30682 AUC after training: 0.6632128159905937
User 30682 does not improve AUC. Reverting changes.
Training on augumented user 25145 35/50 current_auc = 0.6633597883597883
User 25145 AUC after training: 0.6629188712522046
User 25145 does not improve AUC. Reverting changes.
Training on augumented user 26741 36/50 current_auc = 0.6633597883597883
User 26741 AUC after training: 0.6629923574368018
User 26741 does not improve AUC. Reverting changes.
Training on augumented user 74832 37/50 current_auc = 0.6633597883597883
User 74832 AUC after training: 0.6629923574368018
User 74832 does not improve AUC. Reverting changes.
Training on augumented user 30676 38/50 current_auc = 0.6633597883597883
User 30676 AUC after training: 0.6633597883597884
User 30676 improves AUC. Keeping the model.
Training on augumented user 16197 39/50 current_auc = 0.6633597883597884
User 16197 AUC after training: 0.6626984126984127
User 16197 does not improve AUC. Reverting changes.
Training on augumented user 6100 40/50 current_auc = 0.6633597883597884
User 6100 AUC after training: 0.6634332745443856
User 6100 improves AUC. Keeping the model.
Training on augumented user 119314 41/50 current_auc = 0.6634332745443856
User 119314 AUC after training: 0.6629923574368018
User 119314 does not improve AUC. Reverting changes.
Training on augumented user 136942 42/50 current_auc = 0.6634332745443856
User 136942 AUC after training: 0.6631393298059964
User 136942 does not improve AUC. Reverting changes.
Training on augumented user 124982 43/50 current_auc = 0.6634332745443856
User 124982 AUC after training: 0.6626984126984127
User 124982 does not improve AUC. Reverting changes.
Training on augumented user 62087 44/50 current_auc = 0.6634332745443856
User 62087 AUC after training: 0.6630658436213992
User 62087 does not improve AUC. Reverting changes.
Training on augumented user 56344 45/50 current_auc = 0.6634332745443856
User 56344 AUC after training: 0.6628453850676073
User 56344 does not improve AUC. Reverting changes.
Training on augumented user 83556 46/50 current_auc = 0.6634332745443856
User 83556 AUC after training: 0.6634332745443857
User 83556 improves AUC. Keeping the model.
Training on augumented user 56888 47/50 current_auc = 0.6634332745443857
User 56888 AUC after training: 0.6634332745443856
User 56888 does not improve AUC. Reverting changes.
Training on augumented user 88196 48/50 current_auc = 0.6634332745443857
User 88196 AUC after training: 0.663506760728983
User 88196 improves AUC. Keeping the model.
Training on augumented user 37584 49/50 current_auc = 0.663506760728983
User 37584 AUC after training: 0.6638007054673721
User 37584 improves AUC. Keeping the model.
[2024-12-02 20:04:54.222460] start test user 62342 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:55.081268] start test user 62342 270/568 recall augumented users by random, augumented_users = [93702, 81154, 22259, 64264, 5545, 89565, 121453, 50881, 131755, 97498, 113620, 44442, 8636, 120114, 12532, 103594, 122528, 134913, 24688, 73586, 38779, 135608, 67673, 31157, 74999, 90031, 120568, 2971, 128931, 44634, 78878, 7757, 35026, 136848, 18426, 13883, 80718, 111268, 31135, 39710, 123428, 28289, 56982, 98571, 6696, 107755, 112109, 76848, 108946, 136008]
[2024-12-02 20:04:55.095841] user = 62342 Cloud 270/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:04:55.102336] user = 62342 Local 270/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:04:55.126662] user = 62342 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:04:58.181646] user = 62342 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 93702 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93702 AUC after training: 0.5
User 93702 does not improve AUC. Reverting changes.
Training on augumented user 81154 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81154 AUC after training: 0.5
User 81154 does not improve AUC. Reverting changes.
Training on augumented user 22259 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22259 AUC after training: 0.5
User 22259 does not improve AUC. Reverting changes.
Training on augumented user 64264 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64264 AUC after training: 0.5
User 64264 does not improve AUC. Reverting changes.
Training on augumented user 5545 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5545 AUC after training: 0.5
User 5545 does not improve AUC. Reverting changes.
Training on augumented user 89565 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89565 AUC after training: 0.5
User 89565 does not improve AUC. Reverting changes.
Training on augumented user 121453 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121453 AUC after training: 0.5
User 121453 does not improve AUC. Reverting changes.
Training on augumented user 50881 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50881 AUC after training: 0.5
User 50881 does not improve AUC. Reverting changes.
Training on augumented user 131755 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131755 AUC after training: 0.5
User 131755 does not improve AUC. Reverting changes.
Training on augumented user 97498 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97498 AUC after training: 0.5
User 97498 does not improve AUC. Reverting changes.
Training on augumented user 113620 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113620 AUC after training: 0.5
User 113620 does not improve AUC. Reverting changes.
Training on augumented user 44442 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44442 AUC after training: 0.5
User 44442 does not improve AUC. Reverting changes.
Training on augumented user 8636 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8636 AUC after training: 0.5
User 8636 does not improve AUC. Reverting changes.
Training on augumented user 120114 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120114 AUC after training: 0.5
User 120114 does not improve AUC. Reverting changes.
Training on augumented user 12532 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12532 AUC after training: 0.5
User 12532 does not improve AUC. Reverting changes.
Training on augumented user 103594 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103594 AUC after training: 0.5
User 103594 does not improve AUC. Reverting changes.
Training on augumented user 122528 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122528 AUC after training: 0.5
User 122528 does not improve AUC. Reverting changes.
Training on augumented user 134913 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134913 AUC after training: 0.5
User 134913 does not improve AUC. Reverting changes.
Training on augumented user 24688 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24688 AUC after training: 0.5
User 24688 does not improve AUC. Reverting changes.
Training on augumented user 73586 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73586 AUC after training: 0.5
User 73586 does not improve AUC. Reverting changes.
Training on augumented user 38779 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38779 AUC after training: 0.5
User 38779 does not improve AUC. Reverting changes.
Training on augumented user 135608 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135608 AUC after training: 0.5
User 135608 does not improve AUC. Reverting changes.
Training on augumented user 67673 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67673 AUC after training: 0.5
User 67673 does not improve AUC. Reverting changes.
Training on augumented user 31157 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31157 AUC after training: 0.5
User 31157 does not improve AUC. Reverting changes.
Training on augumented user 74999 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74999 AUC after training: 0.5
User 74999 does not improve AUC. Reverting changes.
Training on augumented user 90031 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90031 AUC after training: 0.5
User 90031 does not improve AUC. Reverting changes.
Training on augumented user 120568 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120568 AUC after training: 0.5
User 120568 does not improve AUC. Reverting changes.
Training on augumented user 2971 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2971 AUC after training: 0.5
User 2971 does not improve AUC. Reverting changes.
Training on augumented user 128931 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128931 AUC after training: 0.5
User 128931 does not improve AUC. Reverting changes.
Training on augumented user 44634 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44634 AUC after training: 0.5
User 44634 does not improve AUC. Reverting changes.
Training on augumented user 78878 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78878 AUC after training: 0.5
User 78878 does not improve AUC. Reverting changes.
Training on augumented user 7757 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7757 AUC after training: 0.5
User 7757 does not improve AUC. Reverting changes.
Training on augumented user 35026 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35026 AUC after training: 0.5
User 35026 does not improve AUC. Reverting changes.
Training on augumented user 136848 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136848 AUC after training: 0.5
User 136848 does not improve AUC. Reverting changes.
Training on augumented user 18426 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18426 AUC after training: 0.5
User 18426 does not improve AUC. Reverting changes.
Training on augumented user 13883 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13883 AUC after training: 0.5
User 13883 does not improve AUC. Reverting changes.
Training on augumented user 80718 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80718 AUC after training: 0.5
User 80718 does not improve AUC. Reverting changes.
Training on augumented user 111268 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111268 AUC after training: 0.5
User 111268 does not improve AUC. Reverting changes.
Training on augumented user 31135 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31135 AUC after training: 0.5
User 31135 does not improve AUC. Reverting changes.
Training on augumented user 39710 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39710 AUC after training: 0.5
User 39710 does not improve AUC. Reverting changes.
Training on augumented user 123428 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123428 AUC after training: 0.5
User 123428 does not improve AUC. Reverting changes.
Training on augumented user 28289 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28289 AUC after training: 0.5
User 28289 does not improve AUC. Reverting changes.
Training on augumented user 56982 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56982 AUC after training: 0.5
User 56982 does not improve AUC. Reverting changes.
Training on augumented user 98571 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98571 AUC after training: 0.5
User 98571 does not improve AUC. Reverting changes.
Training on augumented user 6696 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6696 AUC after training: 0.5
User 6696 does not improve AUC. Reverting changes.
Training on augumented user 107755 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107755 AUC after training: 0.5
User 107755 does not improve AUC. Reverting changes.
Training on augumented user 112109 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112109 AUC after training: 0.5
User 112109 does not improve AUC. Reverting changes.
Training on augumented user 76848 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76848 AUC after training: 0.5
User 76848 does not improve AUC. Reverting changes.
Training on augumented user 108946 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108946 AUC after training: 0.5
User 108946 does not improve AUC. Reverting changes.
Training on augumented user 136008 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136008 AUC after training: 0.5
User 136008 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:05:28.572000] start test user 62348 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:29.142171] start test user 62348 271/568 recall augumented users by random, augumented_users = [34183, 125342, 119325, 95330, 52681, 1362, 29107, 135059, 91243, 78586, 115765, 11174, 3883, 91417, 100162, 88586, 82200, 48350, 21783, 85120, 101364, 68638, 116136, 21554, 84587, 11062, 94157, 114396, 99983, 99790, 85535, 78856, 72446, 9620, 128928, 89901, 94038, 87257, 125931, 38694, 114235, 130339, 74099, 87007, 75376, 126748, 82175, 85774, 133135, 25404]
[2024-12-02 20:05:29.157790] user = 62348 Cloud 271/568
[2024-12-02 20:05:29.168779] user = 62348 Local 271/568
[2024-12-02 20:05:29.220370] user = 62348 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:30.748807] user = 62348 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5035460992907801
Training on augumented user 34183 0/50 current_auc = 0.5035460992907801
User 34183 AUC after training: 0.5035460992907801
User 34183 does not improve AUC. Reverting changes.
Training on augumented user 125342 1/50 current_auc = 0.5035460992907801
User 125342 AUC after training: 0.5070921985815603
User 125342 improves AUC. Keeping the model.
Training on augumented user 119325 2/50 current_auc = 0.5070921985815603
User 119325 AUC after training: 0.5106382978723405
User 119325 improves AUC. Keeping the model.
Training on augumented user 95330 3/50 current_auc = 0.5106382978723405
User 95330 AUC after training: 0.5070921985815603
User 95330 does not improve AUC. Reverting changes.
Training on augumented user 52681 4/50 current_auc = 0.5106382978723405
User 52681 AUC after training: 0.5035460992907802
User 52681 does not improve AUC. Reverting changes.
Training on augumented user 1362 5/50 current_auc = 0.5106382978723405
User 1362 AUC after training: 0.5106382978723405
User 1362 does not improve AUC. Reverting changes.
Training on augumented user 29107 6/50 current_auc = 0.5106382978723405
User 29107 AUC after training: 0.5035460992907802
User 29107 does not improve AUC. Reverting changes.
Training on augumented user 135059 7/50 current_auc = 0.5106382978723405
User 135059 AUC after training: 0.5106382978723405
User 135059 does not improve AUC. Reverting changes.
Training on augumented user 91243 8/50 current_auc = 0.5106382978723405
User 91243 AUC after training: 0.5070921985815603
User 91243 does not improve AUC. Reverting changes.
Training on augumented user 78586 9/50 current_auc = 0.5106382978723405
User 78586 AUC after training: 0.5035460992907801
User 78586 does not improve AUC. Reverting changes.
Training on augumented user 115765 10/50 current_auc = 0.5106382978723405
User 115765 AUC after training: 0.5070921985815603
User 115765 does not improve AUC. Reverting changes.
Training on augumented user 11174 11/50 current_auc = 0.5106382978723405
User 11174 AUC after training: 0.5106382978723405
User 11174 does not improve AUC. Reverting changes.
Training on augumented user 3883 12/50 current_auc = 0.5106382978723405
User 3883 AUC after training: 0.5106382978723405
User 3883 does not improve AUC. Reverting changes.
Training on augumented user 91417 13/50 current_auc = 0.5106382978723405
User 91417 AUC after training: 0.5106382978723405
User 91417 does not improve AUC. Reverting changes.
Training on augumented user 100162 14/50 current_auc = 0.5106382978723405
User 100162 AUC after training: 0.5106382978723405
User 100162 does not improve AUC. Reverting changes.
Training on augumented user 88586 15/50 current_auc = 0.5106382978723405
User 88586 AUC after training: 0.5035460992907802
User 88586 does not improve AUC. Reverting changes.
Training on augumented user 82200 16/50 current_auc = 0.5106382978723405
User 82200 AUC after training: 0.5106382978723405
User 82200 does not improve AUC. Reverting changes.
Training on augumented user 48350 17/50 current_auc = 0.5106382978723405
User 48350 AUC after training: 0.5035460992907802
User 48350 does not improve AUC. Reverting changes.
Training on augumented user 21783 18/50 current_auc = 0.5106382978723405
User 21783 AUC after training: 0.5106382978723405
User 21783 does not improve AUC. Reverting changes.
Training on augumented user 85120 19/50 current_auc = 0.5106382978723405
User 85120 AUC after training: 0.5070921985815603
User 85120 does not improve AUC. Reverting changes.
Training on augumented user 101364 20/50 current_auc = 0.5106382978723405
User 101364 AUC after training: 0.5106382978723405
User 101364 does not improve AUC. Reverting changes.
Training on augumented user 68638 21/50 current_auc = 0.5106382978723405
User 68638 AUC after training: 0.5035460992907802
User 68638 does not improve AUC. Reverting changes.
Training on augumented user 116136 22/50 current_auc = 0.5106382978723405
User 116136 AUC after training: 0.5106382978723405
User 116136 does not improve AUC. Reverting changes.
Training on augumented user 21554 23/50 current_auc = 0.5106382978723405
User 21554 AUC after training: 0.5035460992907802
User 21554 does not improve AUC. Reverting changes.
Training on augumented user 84587 24/50 current_auc = 0.5106382978723405
User 84587 AUC after training: 0.5106382978723405
User 84587 does not improve AUC. Reverting changes.
Training on augumented user 11062 25/50 current_auc = 0.5106382978723405
User 11062 AUC after training: 0.5106382978723405
User 11062 does not improve AUC. Reverting changes.
Training on augumented user 94157 26/50 current_auc = 0.5106382978723405
User 94157 AUC after training: 0.5070921985815603
User 94157 does not improve AUC. Reverting changes.
Training on augumented user 114396 27/50 current_auc = 0.5106382978723405
User 114396 AUC after training: 0.5070921985815603
User 114396 does not improve AUC. Reverting changes.
Training on augumented user 99983 28/50 current_auc = 0.5106382978723405
User 99983 AUC after training: 0.5035460992907802
User 99983 does not improve AUC. Reverting changes.
Training on augumented user 99790 29/50 current_auc = 0.5106382978723405
User 99790 AUC after training: 0.5106382978723405
User 99790 does not improve AUC. Reverting changes.
Training on augumented user 85535 30/50 current_auc = 0.5106382978723405
User 85535 AUC after training: 0.5106382978723405
User 85535 does not improve AUC. Reverting changes.
Training on augumented user 78856 31/50 current_auc = 0.5106382978723405
User 78856 AUC after training: 0.5070921985815603
User 78856 does not improve AUC. Reverting changes.
Training on augumented user 72446 32/50 current_auc = 0.5106382978723405
User 72446 AUC after training: 0.5106382978723405
User 72446 does not improve AUC. Reverting changes.
Training on augumented user 9620 33/50 current_auc = 0.5106382978723405
User 9620 AUC after training: 0.5106382978723405
User 9620 does not improve AUC. Reverting changes.
Training on augumented user 128928 34/50 current_auc = 0.5106382978723405
User 128928 AUC after training: 0.5106382978723405
User 128928 does not improve AUC. Reverting changes.
Training on augumented user 89901 35/50 current_auc = 0.5106382978723405
User 89901 AUC after training: 0.5035460992907802
User 89901 does not improve AUC. Reverting changes.
Training on augumented user 94038 36/50 current_auc = 0.5106382978723405
User 94038 AUC after training: 0.5106382978723405
User 94038 does not improve AUC. Reverting changes.
Training on augumented user 87257 37/50 current_auc = 0.5106382978723405
User 87257 AUC after training: 0.5070921985815603
User 87257 does not improve AUC. Reverting changes.
Training on augumented user 125931 38/50 current_auc = 0.5106382978723405
User 125931 AUC after training: 0.5106382978723405
User 125931 does not improve AUC. Reverting changes.
Training on augumented user 38694 39/50 current_auc = 0.5106382978723405
User 38694 AUC after training: 0.5106382978723405
User 38694 does not improve AUC. Reverting changes.
Training on augumented user 114235 40/50 current_auc = 0.5106382978723405
User 114235 AUC after training: 0.5035460992907802
User 114235 does not improve AUC. Reverting changes.
Training on augumented user 130339 41/50 current_auc = 0.5106382978723405
User 130339 AUC after training: 0.5106382978723405
User 130339 does not improve AUC. Reverting changes.
Training on augumented user 74099 42/50 current_auc = 0.5106382978723405
User 74099 AUC after training: 0.5106382978723405
User 74099 does not improve AUC. Reverting changes.
Training on augumented user 87007 43/50 current_auc = 0.5106382978723405
User 87007 AUC after training: 0.5106382978723405
User 87007 does not improve AUC. Reverting changes.
Training on augumented user 75376 44/50 current_auc = 0.5106382978723405
User 75376 AUC after training: 0.5141843971631206
User 75376 improves AUC. Keeping the model.
Training on augumented user 126748 45/50 current_auc = 0.5141843971631206
User 126748 AUC after training: 0.5106382978723405
User 126748 does not improve AUC. Reverting changes.
Training on augumented user 82175 46/50 current_auc = 0.5141843971631206
User 82175 AUC after training: 0.5106382978723404
User 82175 does not improve AUC. Reverting changes.
Training on augumented user 85774 47/50 current_auc = 0.5141843971631206
User 85774 AUC after training: 0.5141843971631206
User 85774 does not improve AUC. Reverting changes.
Training on augumented user 133135 48/50 current_auc = 0.5141843971631206
User 133135 AUC after training: 0.5070921985815603
User 133135 does not improve AUC. Reverting changes.
Training on augumented user 25404 49/50 current_auc = 0.5141843971631206
User 25404 AUC after training: 0.5070921985815603
User 25404 does not improve AUC. Reverting changes.
[2024-12-02 20:05:59.542868] start test user 62349 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:00.161552] start test user 62349 272/568 recall augumented users by random, augumented_users = [42066, 2226, 123191, 21840, 62348, 135713, 19594, 69738, 81502, 79105, 122502, 29695, 34915, 83592, 21609, 124607, 20971, 45482, 96299, 72871, 129594, 6870, 29833, 23112, 76646, 38765, 58597, 16288, 127125, 61816, 38368, 44867, 39431, 34424, 57978, 82311, 32079, 100800, 56330, 29336, 74927, 54266, 37416, 109752, 8969, 29743, 25082, 93043, 130236, 68817]
[2024-12-02 20:06:00.183475] user = 62349 Cloud 272/568
[2024-12-02 20:06:00.193069] user = 62349 Local 272/568
[2024-12-02 20:06:00.374946] user = 62349 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:02.814351] user = 62349 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.738095238095238
Training on augumented user 42066 0/50 current_auc = 0.738095238095238
User 42066 AUC after training: 0.738095238095238
User 42066 does not improve AUC. Reverting changes.
Training on augumented user 2226 1/50 current_auc = 0.738095238095238
User 2226 AUC after training: 0.738095238095238
User 2226 does not improve AUC. Reverting changes.
Training on augumented user 123191 2/50 current_auc = 0.738095238095238
User 123191 AUC after training: 0.738095238095238
User 123191 does not improve AUC. Reverting changes.
Training on augumented user 21840 3/50 current_auc = 0.738095238095238
User 21840 AUC after training: 0.738095238095238
User 21840 does not improve AUC. Reverting changes.
Training on augumented user 62348 4/50 current_auc = 0.738095238095238
User 62348 AUC after training: 0.738095238095238
User 62348 does not improve AUC. Reverting changes.
Training on augumented user 135713 5/50 current_auc = 0.738095238095238
User 135713 AUC after training: 0.738095238095238
User 135713 does not improve AUC. Reverting changes.
Training on augumented user 19594 6/50 current_auc = 0.738095238095238
User 19594 AUC after training: 0.738095238095238
User 19594 does not improve AUC. Reverting changes.
Training on augumented user 69738 7/50 current_auc = 0.738095238095238
User 69738 AUC after training: 0.738095238095238
User 69738 does not improve AUC. Reverting changes.
Training on augumented user 81502 8/50 current_auc = 0.738095238095238
User 81502 AUC after training: 0.738095238095238
User 81502 does not improve AUC. Reverting changes.
Training on augumented user 79105 9/50 current_auc = 0.738095238095238
User 79105 AUC after training: 0.738095238095238
User 79105 does not improve AUC. Reverting changes.
Training on augumented user 122502 10/50 current_auc = 0.738095238095238
User 122502 AUC after training: 0.738095238095238
User 122502 does not improve AUC. Reverting changes.
Training on augumented user 29695 11/50 current_auc = 0.738095238095238
User 29695 AUC after training: 0.738095238095238
User 29695 does not improve AUC. Reverting changes.
Training on augumented user 34915 12/50 current_auc = 0.738095238095238
User 34915 AUC after training: 0.738095238095238
User 34915 does not improve AUC. Reverting changes.
Training on augumented user 83592 13/50 current_auc = 0.738095238095238
User 83592 AUC after training: 0.738095238095238
User 83592 does not improve AUC. Reverting changes.
Training on augumented user 21609 14/50 current_auc = 0.738095238095238
User 21609 AUC after training: 0.738095238095238
User 21609 does not improve AUC. Reverting changes.
Training on augumented user 124607 15/50 current_auc = 0.738095238095238
User 124607 AUC after training: 0.738095238095238
User 124607 does not improve AUC. Reverting changes.
Training on augumented user 20971 16/50 current_auc = 0.738095238095238
User 20971 AUC after training: 0.738095238095238
User 20971 does not improve AUC. Reverting changes.
Training on augumented user 45482 17/50 current_auc = 0.738095238095238
User 45482 AUC after training: 0.738095238095238
User 45482 does not improve AUC. Reverting changes.
Training on augumented user 96299 18/50 current_auc = 0.738095238095238
User 96299 AUC after training: 0.738095238095238
User 96299 does not improve AUC. Reverting changes.
Training on augumented user 72871 19/50 current_auc = 0.738095238095238
User 72871 AUC after training: 0.738095238095238
User 72871 does not improve AUC. Reverting changes.
Training on augumented user 129594 20/50 current_auc = 0.738095238095238
User 129594 AUC after training: 0.738095238095238
User 129594 does not improve AUC. Reverting changes.
Training on augumented user 6870 21/50 current_auc = 0.738095238095238
User 6870 AUC after training: 0.738095238095238
User 6870 does not improve AUC. Reverting changes.
Training on augumented user 29833 22/50 current_auc = 0.738095238095238
User 29833 AUC after training: 0.738095238095238
User 29833 does not improve AUC. Reverting changes.
Training on augumented user 23112 23/50 current_auc = 0.738095238095238
User 23112 AUC after training: 0.738095238095238
User 23112 does not improve AUC. Reverting changes.
Training on augumented user 76646 24/50 current_auc = 0.738095238095238
User 76646 AUC after training: 0.738095238095238
User 76646 does not improve AUC. Reverting changes.
Training on augumented user 38765 25/50 current_auc = 0.738095238095238
User 38765 AUC after training: 0.738095238095238
User 38765 does not improve AUC. Reverting changes.
Training on augumented user 58597 26/50 current_auc = 0.738095238095238
User 58597 AUC after training: 0.738095238095238
User 58597 does not improve AUC. Reverting changes.
Training on augumented user 16288 27/50 current_auc = 0.738095238095238
User 16288 AUC after training: 0.738095238095238
User 16288 does not improve AUC. Reverting changes.
Training on augumented user 127125 28/50 current_auc = 0.738095238095238
User 127125 AUC after training: 0.738095238095238
User 127125 does not improve AUC. Reverting changes.
Training on augumented user 61816 29/50 current_auc = 0.738095238095238
User 61816 AUC after training: 0.738095238095238
User 61816 does not improve AUC. Reverting changes.
Training on augumented user 38368 30/50 current_auc = 0.738095238095238
User 38368 AUC after training: 0.738095238095238
User 38368 does not improve AUC. Reverting changes.
Training on augumented user 44867 31/50 current_auc = 0.738095238095238
User 44867 AUC after training: 0.738095238095238
User 44867 does not improve AUC. Reverting changes.
Training on augumented user 39431 32/50 current_auc = 0.738095238095238
User 39431 AUC after training: 0.738095238095238
User 39431 does not improve AUC. Reverting changes.
Training on augumented user 34424 33/50 current_auc = 0.738095238095238
User 34424 AUC after training: 0.7261904761904762
User 34424 does not improve AUC. Reverting changes.
Training on augumented user 57978 34/50 current_auc = 0.738095238095238
User 57978 AUC after training: 0.738095238095238
User 57978 does not improve AUC. Reverting changes.
Training on augumented user 82311 35/50 current_auc = 0.738095238095238
User 82311 AUC after training: 0.738095238095238
User 82311 does not improve AUC. Reverting changes.
Training on augumented user 32079 36/50 current_auc = 0.738095238095238
User 32079 AUC after training: 0.738095238095238
User 32079 does not improve AUC. Reverting changes.
Training on augumented user 100800 37/50 current_auc = 0.738095238095238
User 100800 AUC after training: 0.738095238095238
User 100800 does not improve AUC. Reverting changes.
Training on augumented user 56330 38/50 current_auc = 0.738095238095238
User 56330 AUC after training: 0.738095238095238
User 56330 does not improve AUC. Reverting changes.
Training on augumented user 29336 39/50 current_auc = 0.738095238095238
User 29336 AUC after training: 0.738095238095238
User 29336 does not improve AUC. Reverting changes.
Training on augumented user 74927 40/50 current_auc = 0.738095238095238
User 74927 AUC after training: 0.738095238095238
User 74927 does not improve AUC. Reverting changes.
Training on augumented user 54266 41/50 current_auc = 0.738095238095238
User 54266 AUC after training: 0.738095238095238
User 54266 does not improve AUC. Reverting changes.
Training on augumented user 37416 42/50 current_auc = 0.738095238095238
User 37416 AUC after training: 0.738095238095238
User 37416 does not improve AUC. Reverting changes.
Training on augumented user 109752 43/50 current_auc = 0.738095238095238
User 109752 AUC after training: 0.738095238095238
User 109752 does not improve AUC. Reverting changes.
Training on augumented user 8969 44/50 current_auc = 0.738095238095238
User 8969 AUC after training: 0.738095238095238
User 8969 does not improve AUC. Reverting changes.
Training on augumented user 29743 45/50 current_auc = 0.738095238095238
User 29743 AUC after training: 0.738095238095238
User 29743 does not improve AUC. Reverting changes.
Training on augumented user 25082 46/50 current_auc = 0.738095238095238
User 25082 AUC after training: 0.738095238095238
User 25082 does not improve AUC. Reverting changes.
Training on augumented user 93043 47/50 current_auc = 0.738095238095238
User 93043 AUC after training: 0.738095238095238
User 93043 does not improve AUC. Reverting changes.
Training on augumented user 130236 48/50 current_auc = 0.738095238095238
User 130236 AUC after training: 0.738095238095238
User 130236 does not improve AUC. Reverting changes.
Training on augumented user 68817 49/50 current_auc = 0.738095238095238
User 68817 AUC after training: 0.7261904761904762
User 68817 does not improve AUC. Reverting changes.
[2024-12-02 20:06:32.738915] start test user 62357 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:33.184999] start test user 62357 273/568 recall augumented users by random, augumented_users = [34656, 52454, 24518, 27137, 108707, 44518, 20794, 41439, 38700, 99429, 2100, 133468, 42322, 112223, 29812, 94420, 31785, 60259, 100012, 65605, 53426, 58892, 35765, 54285, 88638, 18682, 122307, 14079, 80781, 13721, 105480, 123355, 89926, 252, 23542, 41298, 76922, 7529, 63197, 117207, 60279, 128580, 85568, 50667, 29495, 12613, 10528, 116296, 36755, 111586]
[2024-12-02 20:06:33.200549] user = 62357 Cloud 273/568
[2024-12-02 20:06:33.227349] user = 62357 Local 273/568
[2024-12-02 20:06:33.298660] user = 62357 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:35.175100] user = 62357 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7218035275030094
Training on augumented user 34656 0/50 current_auc = 0.7218035275030094
User 34656 AUC after training: 0.7223268959020255
User 34656 improves AUC. Keeping the model.
Training on augumented user 52454 1/50 current_auc = 0.7223268959020255
User 52454 AUC after training: 0.7220390432825666
User 52454 does not improve AUC. Reverting changes.
Training on augumented user 24518 2/50 current_auc = 0.7223268959020255
User 24518 AUC after training: 0.7223268959020254
User 24518 does not improve AUC. Reverting changes.
Training on augumented user 27137 3/50 current_auc = 0.7223268959020255
User 27137 AUC after training: 0.7221698853823206
User 27137 does not improve AUC. Reverting changes.
Training on augumented user 108707 4/50 current_auc = 0.7223268959020255
User 108707 AUC after training: 0.7216988538232061
User 108707 does not improve AUC. Reverting changes.
Training on augumented user 44518 5/50 current_auc = 0.7223268959020255
User 44518 AUC after training: 0.7220128748626158
User 44518 does not improve AUC. Reverting changes.
Training on augumented user 20794 6/50 current_auc = 0.7223268959020255
User 20794 AUC after training: 0.7219605380227142
User 20794 does not improve AUC. Reverting changes.
Training on augumented user 41439 7/50 current_auc = 0.7223268959020255
User 41439 AUC after training: 0.7204427696655676
User 41439 does not improve AUC. Reverting changes.
Training on augumented user 38700 8/50 current_auc = 0.7223268959020255
User 38700 AUC after training: 0.7212016538441409
User 38700 does not improve AUC. Reverting changes.
Training on augumented user 99429 9/50 current_auc = 0.7223268959020255
User 99429 AUC after training: 0.7216726854032552
User 99429 does not improve AUC. Reverting changes.
Training on augumented user 2100 10/50 current_auc = 0.7223268959020255
User 2100 AUC after training: 0.7221698853823205
User 2100 does not improve AUC. Reverting changes.
Training on augumented user 133468 11/50 current_auc = 0.7223268959020255
User 133468 AUC after training: 0.7220128748626158
User 133468 does not improve AUC. Reverting changes.
Training on augumented user 42322 12/50 current_auc = 0.7223268959020255
User 42322 AUC after training: 0.7220128748626158
User 42322 does not improve AUC. Reverting changes.
Training on augumented user 112223 13/50 current_auc = 0.7223268959020255
User 112223 AUC after training: 0.7218296959229602
User 112223 does not improve AUC. Reverting changes.
Training on augumented user 29812 14/50 current_auc = 0.7223268959020255
User 29812 AUC after training: 0.7222745590621238
User 29812 does not improve AUC. Reverting changes.
Training on augumented user 94420 15/50 current_auc = 0.7223268959020255
User 94420 AUC after training: 0.7220652117025174
User 94420 does not improve AUC. Reverting changes.
Training on augumented user 31785 16/50 current_auc = 0.7223268959020255
User 31785 AUC after training: 0.7221175485424189
User 31785 does not improve AUC. Reverting changes.
Training on augumented user 60259 17/50 current_auc = 0.7223268959020255
User 60259 AUC after training: 0.7219343696027634
User 60259 does not improve AUC. Reverting changes.
Training on augumented user 100012 18/50 current_auc = 0.7223268959020255
User 100012 AUC after training: 0.7216203485633538
User 100012 does not improve AUC. Reverting changes.
Training on augumented user 65605 19/50 current_auc = 0.7223268959020255
User 65605 AUC after training: 0.7220128748626158
User 65605 does not improve AUC. Reverting changes.
Training on augumented user 53426 20/50 current_auc = 0.7223268959020255
User 53426 AUC after training: 0.7209661380645837
User 53426 does not improve AUC. Reverting changes.
Training on augumented user 58892 21/50 current_auc = 0.7223268959020255
User 58892 AUC after training: 0.722379232741927
User 58892 improves AUC. Keeping the model.
Training on augumented user 35765 22/50 current_auc = 0.722379232741927
User 35765 AUC after training: 0.7217250222431568
User 35765 does not improve AUC. Reverting changes.
Training on augumented user 54285 23/50 current_auc = 0.722379232741927
User 54285 AUC after training: 0.7222222222222222
User 54285 does not improve AUC. Reverting changes.
Training on augumented user 88638 24/50 current_auc = 0.722379232741927
User 88638 AUC after training: 0.7214110012037473
User 88638 does not improve AUC. Reverting changes.
Training on augumented user 18682 25/50 current_auc = 0.722379232741927
User 18682 AUC after training: 0.7218820327628618
User 18682 does not improve AUC. Reverting changes.
Training on augumented user 122307 26/50 current_auc = 0.722379232741927
User 122307 AUC after training: 0.7207829591249281
User 122307 does not improve AUC. Reverting changes.
Training on augumented user 14079 27/50 current_auc = 0.722379232741927
User 14079 AUC after training: 0.7217250222431569
User 14079 does not improve AUC. Reverting changes.
Training on augumented user 80781 28/50 current_auc = 0.722379232741927
User 80781 AUC after training: 0.7220652117025174
User 80781 does not improve AUC. Reverting changes.
Training on augumented user 13721 29/50 current_auc = 0.722379232741927
User 13721 AUC after training: 0.7218296959229602
User 13721 does not improve AUC. Reverting changes.
Training on augumented user 105480 30/50 current_auc = 0.722379232741927
User 105480 AUC after training: 0.7220913801224682
User 105480 does not improve AUC. Reverting changes.
Training on augumented user 123355 31/50 current_auc = 0.722379232741927
User 123355 AUC after training: 0.7215156748835505
User 123355 does not improve AUC. Reverting changes.
Training on augumented user 89926 32/50 current_auc = 0.722379232741927
User 89926 AUC after training: 0.7220390432825666
User 89926 does not improve AUC. Reverting changes.
Training on augumented user 252 33/50 current_auc = 0.722379232741927
User 252 AUC after training: 0.7211754854241901
User 252 does not improve AUC. Reverting changes.
Training on augumented user 23542 34/50 current_auc = 0.722379232741927
User 23542 AUC after training: 0.7218820327628619
User 23542 does not improve AUC. Reverting changes.
Training on augumented user 41298 35/50 current_auc = 0.722379232741927
User 41298 AUC after training: 0.7220652117025174
User 41298 does not improve AUC. Reverting changes.
Training on augumented user 76922 36/50 current_auc = 0.722379232741927
User 76922 AUC after training: 0.7220652117025174
User 76922 does not improve AUC. Reverting changes.
Training on augumented user 7529 37/50 current_auc = 0.722379232741927
User 7529 AUC after training: 0.7218296959229601
User 7529 does not improve AUC. Reverting changes.
Training on augumented user 63197 38/50 current_auc = 0.722379232741927
User 63197 AUC after training: 0.7218296959229602
User 63197 does not improve AUC. Reverting changes.
Training on augumented user 117207 39/50 current_auc = 0.722379232741927
User 117207 AUC after training: 0.7221437169623698
User 117207 does not improve AUC. Reverting changes.
Training on augumented user 60279 40/50 current_auc = 0.722379232741927
User 60279 AUC after training: 0.7218820327628618
User 60279 does not improve AUC. Reverting changes.
Training on augumented user 128580 41/50 current_auc = 0.722379232741927
User 128580 AUC after training: 0.721725022243157
User 128580 does not improve AUC. Reverting changes.
Training on augumented user 85568 42/50 current_auc = 0.722379232741927
User 85568 AUC after training: 0.7222222222222222
User 85568 does not improve AUC. Reverting changes.
Training on augumented user 50667 43/50 current_auc = 0.722379232741927
User 50667 AUC after training: 0.7220128748626158
User 50667 does not improve AUC. Reverting changes.
Training on augumented user 29495 44/50 current_auc = 0.722379232741927
User 29495 AUC after training: 0.7216203485633538
User 29495 does not improve AUC. Reverting changes.
Training on augumented user 12613 45/50 current_auc = 0.722379232741927
User 12613 AUC after training: 0.7215680117234521
User 12613 does not improve AUC. Reverting changes.
Training on augumented user 10528 46/50 current_auc = 0.722379232741927
User 10528 AUC after training: 0.7220652117025174
User 10528 does not improve AUC. Reverting changes.
Training on augumented user 116296 47/50 current_auc = 0.722379232741927
User 116296 AUC after training: 0.7220128748626158
User 116296 does not improve AUC. Reverting changes.
Training on augumented user 36755 48/50 current_auc = 0.722379232741927
User 36755 AUC after training: 0.7219867064426649
User 36755 does not improve AUC. Reverting changes.
Training on augumented user 111586 49/50 current_auc = 0.722379232741927
User 111586 AUC after training: 0.7218035275030094
User 111586 does not improve AUC. Reverting changes.
[2024-12-02 20:07:04.357411] start test user 62368 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:04.809400] start test user 62368 274/568 recall augumented users by random, augumented_users = [24612, 13598, 124097, 56810, 21791, 77569, 95965, 106452, 86032, 135772, 102532, 102799, 17792, 18332, 36754, 24171, 38523, 9646, 133033, 102727, 133825, 95916, 87679, 124422, 104024, 84055, 74736, 68283, 136921, 122651, 60258, 133943, 46467, 104469, 11050, 21581, 21055, 90518, 71511, 67636, 121709, 66826, 61596, 75472, 44336, 117363, 64659, 29205, 82839, 1505]
[2024-12-02 20:07:04.824529] user = 62368 Cloud 274/568
[2024-12-02 20:07:04.861487] user = 62368 Local 274/568
[2024-12-02 20:07:04.974336] user = 62368 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:07.624705] user = 62368 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6369965423792169
Training on augumented user 24612 0/50 current_auc = 0.6369965423792169
User 24612 AUC after training: 0.6380712082982898
User 24612 improves AUC. Keeping the model.
Training on augumented user 13598 1/50 current_auc = 0.6380712082982898
User 13598 AUC after training: 0.6374637884309877
User 13598 does not improve AUC. Reverting changes.
Training on augumented user 124097 2/50 current_auc = 0.6380712082982898
User 124097 AUC after training: 0.6374637884309877
User 124097 does not improve AUC. Reverting changes.
Training on augumented user 56810 3/50 current_auc = 0.6380712082982898
User 56810 AUC after training: 0.6385851789552378
User 56810 improves AUC. Keeping the model.
Training on augumented user 21791 4/50 current_auc = 0.6385851789552378
User 21791 AUC after training: 0.6382581067189983
User 21791 does not improve AUC. Reverting changes.
Training on augumented user 77569 5/50 current_auc = 0.6385851789552378
User 77569 AUC after training: 0.6379310344827587
User 77569 does not improve AUC. Reverting changes.
Training on augumented user 95965 6/50 current_auc = 0.6385851789552378
User 95965 AUC after training: 0.6383048313241753
User 95965 does not improve AUC. Reverting changes.
Training on augumented user 106452 7/50 current_auc = 0.6385851789552378
User 106452 AUC after training: 0.6386319035604149
User 106452 improves AUC. Keeping the model.
Training on augumented user 86032 8/50 current_auc = 0.6386319035604149
User 86032 AUC after training: 0.638678628165592
User 86032 improves AUC. Keeping the model.
Training on augumented user 135772 9/50 current_auc = 0.638678628165592
User 135772 AUC after training: 0.638117932903467
User 135772 does not improve AUC. Reverting changes.
Training on augumented user 102532 10/50 current_auc = 0.638678628165592
User 102532 AUC after training: 0.6376974114568732
User 102532 does not improve AUC. Reverting changes.
Training on augumented user 102799 11/50 current_auc = 0.638678628165592
User 102799 AUC after training: 0.6384917297448837
User 102799 does not improve AUC. Reverting changes.
Training on augumented user 17792 12/50 current_auc = 0.638678628165592
User 17792 AUC after training: 0.636576020932623
User 17792 does not improve AUC. Reverting changes.
Training on augumented user 18332 13/50 current_auc = 0.638678628165592
User 18332 AUC after training: 0.6378375852724044
User 18332 does not improve AUC. Reverting changes.
Training on augumented user 36754 14/50 current_auc = 0.638678628165592
User 36754 AUC after training: 0.638725352770769
User 36754 improves AUC. Keeping the model.
Training on augumented user 24171 15/50 current_auc = 0.638725352770769
User 24171 AUC after training: 0.6392626857303056
User 24171 improves AUC. Keeping the model.
Training on augumented user 38523 16/50 current_auc = 0.6392626857303056
User 38523 AUC after training: 0.6397299317820765
User 38523 improves AUC. Keeping the model.
Training on augumented user 9646 17/50 current_auc = 0.6397299317820765
User 9646 AUC after training: 0.639800018689842
User 9646 improves AUC. Keeping the model.
Training on augumented user 133033 18/50 current_auc = 0.639800018689842
User 133033 AUC after training: 0.6401037286234932
User 133033 improves AUC. Keeping the model.
Training on augumented user 102727 19/50 current_auc = 0.6401037286234932
User 102727 AUC after training: 0.639753294084665
User 102727 does not improve AUC. Reverting changes.
Training on augumented user 133825 20/50 current_auc = 0.6401037286234932
User 133825 AUC after training: 0.6388188019811233
User 133825 does not improve AUC. Reverting changes.
Training on augumented user 95916 21/50 current_auc = 0.6401037286234932
User 95916 AUC after training: 0.6393561349406598
User 95916 does not improve AUC. Reverting changes.
Training on augumented user 87679 22/50 current_auc = 0.6401037286234932
User 87679 AUC after training: 0.6396131202691338
User 87679 does not improve AUC. Reverting changes.
Training on augumented user 124422 23/50 current_auc = 0.6401037286234932
User 124422 AUC after training: 0.6397299317820764
User 124422 does not improve AUC. Reverting changes.
Training on augumented user 104024 24/50 current_auc = 0.6401037286234932
User 104024 AUC after training: 0.6395663956639566
User 104024 does not improve AUC. Reverting changes.
Training on augumented user 84055 25/50 current_auc = 0.6401037286234932
User 84055 AUC after training: 0.6394729464536025
User 84055 does not improve AUC. Reverting changes.
Training on augumented user 74736 26/50 current_auc = 0.6401037286234932
User 74736 AUC after training: 0.6398701055976077
User 74736 does not improve AUC. Reverting changes.
Training on augumented user 68283 27/50 current_auc = 0.6401037286234932
User 68283 AUC after training: 0.640010279413139
User 68283 does not improve AUC. Reverting changes.
Training on augumented user 136921 28/50 current_auc = 0.6401037286234932
User 136921 AUC after training: 0.6393327726380713
User 136921 does not improve AUC. Reverting changes.
Training on augumented user 122651 29/50 current_auc = 0.6401037286234932
User 122651 AUC after training: 0.6395430333613682
User 122651 does not improve AUC. Reverting changes.
Training on augumented user 60258 30/50 current_auc = 0.6401037286234932
User 60258 AUC after training: 0.6402439024390243
User 60258 improves AUC. Keeping the model.
Training on augumented user 133943 31/50 current_auc = 0.6402439024390243
User 133943 AUC after training: 0.6398233809924305
User 133943 does not improve AUC. Reverting changes.
Training on augumented user 46467 32/50 current_auc = 0.6402439024390243
User 46467 AUC after training: 0.6399168302027848
User 46467 does not improve AUC. Reverting changes.
Training on augumented user 104469 33/50 current_auc = 0.6402439024390243
User 104469 AUC after training: 0.6404308008597328
User 104469 improves AUC. Keeping the model.
Training on augumented user 11050 34/50 current_auc = 0.6404308008597328
User 11050 AUC after training: 0.6395897579665452
User 11050 does not improve AUC. Reverting changes.
Training on augumented user 21581 35/50 current_auc = 0.6404308008597328
User 21581 AUC after training: 0.6396832071768994
User 21581 does not improve AUC. Reverting changes.
Training on augumented user 21055 36/50 current_auc = 0.6404308008597328
User 21055 AUC after training: 0.6405476123726755
User 21055 improves AUC. Keeping the model.
Training on augumented user 90518 37/50 current_auc = 0.6405476123726755
User 90518 AUC after training: 0.6392626857303056
User 90518 does not improve AUC. Reverting changes.
Training on augumented user 71511 38/50 current_auc = 0.6405476123726755
User 71511 AUC after training: 0.6398701055976077
User 71511 does not improve AUC. Reverting changes.
Training on augumented user 67636 39/50 current_auc = 0.6405476123726755
User 67636 AUC after training: 0.6400102794131389
User 67636 does not improve AUC. Reverting changes.
Training on augumented user 121709 40/50 current_auc = 0.6405476123726755
User 121709 AUC after training: 0.6403840762545557
User 121709 does not improve AUC. Reverting changes.
Training on augumented user 66826 41/50 current_auc = 0.6405476123726755
User 66826 AUC after training: 0.6409914961218578
User 66826 improves AUC. Keeping the model.
Training on augumented user 61596 42/50 current_auc = 0.6409914961218578
User 61596 AUC after training: 0.6409447715166806
User 61596 does not improve AUC. Reverting changes.
Training on augumented user 75472 43/50 current_auc = 0.6409914961218578
User 75472 AUC after training: 0.6388188019811232
User 75472 does not improve AUC. Reverting changes.
Training on augumented user 44336 44/50 current_auc = 0.6409914961218578
User 44336 AUC after training: 0.6401037286234932
User 44336 does not improve AUC. Reverting changes.
Training on augumented user 117363 45/50 current_auc = 0.6409914961218578
User 117363 AUC after training: 0.6401504532286703
User 117363 does not improve AUC. Reverting changes.
Training on augumented user 64659 46/50 current_auc = 0.6409914961218578
User 64659 AUC after training: 0.6403840762545557
User 64659 does not improve AUC. Reverting changes.
Training on augumented user 29205 47/50 current_auc = 0.6409914961218578
User 29205 AUC after training: 0.6399401925053733
User 29205 does not improve AUC. Reverting changes.
Training on augumented user 82839 48/50 current_auc = 0.6409914961218578
User 82839 AUC after training: 0.6382814690215869
User 82839 does not improve AUC. Reverting changes.
Training on augumented user 1505 49/50 current_auc = 0.6409914961218578
User 1505 AUC after training: 0.6404074385571442
User 1505 does not improve AUC. Reverting changes.
[2024-12-02 20:07:35.239549] start test user 62383 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:35.652003] start test user 62383 275/568 recall augumented users by random, augumented_users = [64489, 54386, 79594, 79588, 72031, 36084, 84222, 89084, 39410, 28380, 120552, 18970, 111165, 11298, 88963, 44123, 55655, 70542, 60473, 19630, 63442, 44374, 131727, 32482, 55482, 93664, 102524, 107387, 47366, 89878, 109214, 85078, 20602, 113809, 43142, 108637, 105608, 131670, 26908, 38484, 36058, 1099, 18678, 115187, 123610, 57268, 123864, 118244, 136025, 86571]
[2024-12-02 20:07:35.667629] user = 62383 Cloud 275/568
[2024-12-02 20:07:35.678302] user = 62383 Local 275/568
[2024-12-02 20:07:35.734322] user = 62383 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:37.191076] user = 62383 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46875
Training on augumented user 64489 0/50 current_auc = 0.46875
User 64489 AUC after training: 0.46875
User 64489 does not improve AUC. Reverting changes.
Training on augumented user 54386 1/50 current_auc = 0.46875
User 54386 AUC after training: 0.4765625
User 54386 improves AUC. Keeping the model.
Training on augumented user 79594 2/50 current_auc = 0.4765625
User 79594 AUC after training: 0.4765625
User 79594 does not improve AUC. Reverting changes.
Training on augumented user 79588 3/50 current_auc = 0.4765625
User 79588 AUC after training: 0.4765625
User 79588 does not improve AUC. Reverting changes.
Training on augumented user 72031 4/50 current_auc = 0.4765625
User 72031 AUC after training: 0.484375
User 72031 improves AUC. Keeping the model.
Training on augumented user 36084 5/50 current_auc = 0.484375
User 36084 AUC after training: 0.484375
User 36084 does not improve AUC. Reverting changes.
Training on augumented user 84222 6/50 current_auc = 0.484375
User 84222 AUC after training: 0.4765625
User 84222 does not improve AUC. Reverting changes.
Training on augumented user 89084 7/50 current_auc = 0.484375
User 89084 AUC after training: 0.484375
User 89084 does not improve AUC. Reverting changes.
Training on augumented user 39410 8/50 current_auc = 0.484375
User 39410 AUC after training: 0.484375
User 39410 does not improve AUC. Reverting changes.
Training on augumented user 28380 9/50 current_auc = 0.484375
User 28380 AUC after training: 0.46875
User 28380 does not improve AUC. Reverting changes.
Training on augumented user 120552 10/50 current_auc = 0.484375
User 120552 AUC after training: 0.484375
User 120552 does not improve AUC. Reverting changes.
Training on augumented user 18970 11/50 current_auc = 0.484375
User 18970 AUC after training: 0.4609375
User 18970 does not improve AUC. Reverting changes.
Training on augumented user 111165 12/50 current_auc = 0.484375
User 111165 AUC after training: 0.4765625
User 111165 does not improve AUC. Reverting changes.
Training on augumented user 11298 13/50 current_auc = 0.484375
User 11298 AUC after training: 0.484375
User 11298 does not improve AUC. Reverting changes.
Training on augumented user 88963 14/50 current_auc = 0.484375
User 88963 AUC after training: 0.4765625
User 88963 does not improve AUC. Reverting changes.
Training on augumented user 44123 15/50 current_auc = 0.484375
User 44123 AUC after training: 0.4765625
User 44123 does not improve AUC. Reverting changes.
Training on augumented user 55655 16/50 current_auc = 0.484375
User 55655 AUC after training: 0.4765625
User 55655 does not improve AUC. Reverting changes.
Training on augumented user 70542 17/50 current_auc = 0.484375
User 70542 AUC after training: 0.484375
User 70542 does not improve AUC. Reverting changes.
Training on augumented user 60473 18/50 current_auc = 0.484375
User 60473 AUC after training: 0.484375
User 60473 does not improve AUC. Reverting changes.
Training on augumented user 19630 19/50 current_auc = 0.484375
User 19630 AUC after training: 0.4609375
User 19630 does not improve AUC. Reverting changes.
Training on augumented user 63442 20/50 current_auc = 0.484375
User 63442 AUC after training: 0.484375
User 63442 does not improve AUC. Reverting changes.
Training on augumented user 44374 21/50 current_auc = 0.484375
User 44374 AUC after training: 0.4609375
User 44374 does not improve AUC. Reverting changes.
Training on augumented user 131727 22/50 current_auc = 0.484375
User 131727 AUC after training: 0.4609375
User 131727 does not improve AUC. Reverting changes.
Training on augumented user 32482 23/50 current_auc = 0.484375
User 32482 AUC after training: 0.484375
User 32482 does not improve AUC. Reverting changes.
Training on augumented user 55482 24/50 current_auc = 0.484375
User 55482 AUC after training: 0.484375
User 55482 does not improve AUC. Reverting changes.
Training on augumented user 93664 25/50 current_auc = 0.484375
User 93664 AUC after training: 0.4609375
User 93664 does not improve AUC. Reverting changes.
Training on augumented user 102524 26/50 current_auc = 0.484375
User 102524 AUC after training: 0.4609375
User 102524 does not improve AUC. Reverting changes.
Training on augumented user 107387 27/50 current_auc = 0.484375
User 107387 AUC after training: 0.46875
User 107387 does not improve AUC. Reverting changes.
Training on augumented user 47366 28/50 current_auc = 0.484375
User 47366 AUC after training: 0.484375
User 47366 does not improve AUC. Reverting changes.
Training on augumented user 89878 29/50 current_auc = 0.484375
User 89878 AUC after training: 0.484375
User 89878 does not improve AUC. Reverting changes.
Training on augumented user 109214 30/50 current_auc = 0.484375
User 109214 AUC after training: 0.46875
User 109214 does not improve AUC. Reverting changes.
Training on augumented user 85078 31/50 current_auc = 0.484375
User 85078 AUC after training: 0.4765625
User 85078 does not improve AUC. Reverting changes.
Training on augumented user 20602 32/50 current_auc = 0.484375
User 20602 AUC after training: 0.4765625
User 20602 does not improve AUC. Reverting changes.
Training on augumented user 113809 33/50 current_auc = 0.484375
User 113809 AUC after training: 0.4765625
User 113809 does not improve AUC. Reverting changes.
Training on augumented user 43142 34/50 current_auc = 0.484375
User 43142 AUC after training: 0.484375
User 43142 does not improve AUC. Reverting changes.
Training on augumented user 108637 35/50 current_auc = 0.484375
User 108637 AUC after training: 0.4609375
User 108637 does not improve AUC. Reverting changes.
Training on augumented user 105608 36/50 current_auc = 0.484375
User 105608 AUC after training: 0.4765625
User 105608 does not improve AUC. Reverting changes.
Training on augumented user 131670 37/50 current_auc = 0.484375
User 131670 AUC after training: 0.4609375
User 131670 does not improve AUC. Reverting changes.
Training on augumented user 26908 38/50 current_auc = 0.484375
User 26908 AUC after training: 0.484375
User 26908 does not improve AUC. Reverting changes.
Training on augumented user 38484 39/50 current_auc = 0.484375
User 38484 AUC after training: 0.4609375
User 38484 does not improve AUC. Reverting changes.
Training on augumented user 36058 40/50 current_auc = 0.484375
User 36058 AUC after training: 0.484375
User 36058 does not improve AUC. Reverting changes.
Training on augumented user 1099 41/50 current_auc = 0.484375
User 1099 AUC after training: 0.4765625
User 1099 does not improve AUC. Reverting changes.
Training on augumented user 18678 42/50 current_auc = 0.484375
User 18678 AUC after training: 0.46875
User 18678 does not improve AUC. Reverting changes.
Training on augumented user 115187 43/50 current_auc = 0.484375
User 115187 AUC after training: 0.46875
User 115187 does not improve AUC. Reverting changes.
Training on augumented user 123610 44/50 current_auc = 0.484375
User 123610 AUC after training: 0.484375
User 123610 does not improve AUC. Reverting changes.
Training on augumented user 57268 45/50 current_auc = 0.484375
User 57268 AUC after training: 0.46875
User 57268 does not improve AUC. Reverting changes.
Training on augumented user 123864 46/50 current_auc = 0.484375
User 123864 AUC after training: 0.484375
User 123864 does not improve AUC. Reverting changes.
Training on augumented user 118244 47/50 current_auc = 0.484375
User 118244 AUC after training: 0.484375
User 118244 does not improve AUC. Reverting changes.
Training on augumented user 136025 48/50 current_auc = 0.484375
User 136025 AUC after training: 0.4765625
User 136025 does not improve AUC. Reverting changes.
Training on augumented user 86571 49/50 current_auc = 0.484375
User 86571 AUC after training: 0.4765625
User 86571 does not improve AUC. Reverting changes.
[2024-12-02 20:08:08.466268] start test user 62387 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:09.205104] start test user 62387 276/568 recall augumented users by random, augumented_users = [127985, 6710, 106916, 22534, 33016, 61348, 125383, 40026, 102621, 134257, 7338, 132205, 5682, 50646, 5484, 831, 99763, 16135, 57806, 85178, 30846, 7841, 1639, 86356, 730, 123549, 37448, 74207, 65047, 87025, 51091, 130406, 95167, 36921, 103533, 86708, 27756, 131648, 103944, 106164, 6860, 103634, 37097, 68898, 77978, 58185, 120741, 11886, 31482, 68659]
[2024-12-02 20:08:09.256128] user = 62387 Cloud 276/568
[2024-12-02 20:08:09.266954] user = 62387 Local 276/568
[2024-12-02 20:08:09.394883] user = 62387 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:11.918604] user = 62387 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6875
Training on augumented user 127985 0/50 current_auc = 0.6875
User 127985 AUC after training: 0.6875
User 127985 does not improve AUC. Reverting changes.
Training on augumented user 6710 1/50 current_auc = 0.6875
User 6710 AUC after training: 0.6875
User 6710 does not improve AUC. Reverting changes.
Training on augumented user 106916 2/50 current_auc = 0.6875
User 106916 AUC after training: 0.6875
User 106916 does not improve AUC. Reverting changes.
Training on augumented user 22534 3/50 current_auc = 0.6875
User 22534 AUC after training: 0.6875
User 22534 does not improve AUC. Reverting changes.
Training on augumented user 33016 4/50 current_auc = 0.6875
User 33016 AUC after training: 0.6875
User 33016 does not improve AUC. Reverting changes.
Training on augumented user 61348 5/50 current_auc = 0.6875
User 61348 AUC after training: 0.6875
User 61348 does not improve AUC. Reverting changes.
Training on augumented user 125383 6/50 current_auc = 0.6875
User 125383 AUC after training: 0.6875
User 125383 does not improve AUC. Reverting changes.
Training on augumented user 40026 7/50 current_auc = 0.6875
User 40026 AUC after training: 0.6875
User 40026 does not improve AUC. Reverting changes.
Training on augumented user 102621 8/50 current_auc = 0.6875
User 102621 AUC after training: 0.6875
User 102621 does not improve AUC. Reverting changes.
Training on augumented user 134257 9/50 current_auc = 0.6875
User 134257 AUC after training: 0.6875
User 134257 does not improve AUC. Reverting changes.
Training on augumented user 7338 10/50 current_auc = 0.6875
User 7338 AUC after training: 0.6875
User 7338 does not improve AUC. Reverting changes.
Training on augumented user 132205 11/50 current_auc = 0.6875
User 132205 AUC after training: 0.6875
User 132205 does not improve AUC. Reverting changes.
Training on augumented user 5682 12/50 current_auc = 0.6875
User 5682 AUC after training: 0.6875
User 5682 does not improve AUC. Reverting changes.
Training on augumented user 50646 13/50 current_auc = 0.6875
User 50646 AUC after training: 0.6875
User 50646 does not improve AUC. Reverting changes.
Training on augumented user 5484 14/50 current_auc = 0.6875
User 5484 AUC after training: 0.6875
User 5484 does not improve AUC. Reverting changes.
Training on augumented user 831 15/50 current_auc = 0.6875
User 831 AUC after training: 0.6875
User 831 does not improve AUC. Reverting changes.
Training on augumented user 99763 16/50 current_auc = 0.6875
User 99763 AUC after training: 0.6875
User 99763 does not improve AUC. Reverting changes.
Training on augumented user 16135 17/50 current_auc = 0.6875
User 16135 AUC after training: 0.6875
User 16135 does not improve AUC. Reverting changes.
Training on augumented user 57806 18/50 current_auc = 0.6875
User 57806 AUC after training: 0.6875
User 57806 does not improve AUC. Reverting changes.
Training on augumented user 85178 19/50 current_auc = 0.6875
User 85178 AUC after training: 0.6875
User 85178 does not improve AUC. Reverting changes.
Training on augumented user 30846 20/50 current_auc = 0.6875
User 30846 AUC after training: 0.6875
User 30846 does not improve AUC. Reverting changes.
Training on augumented user 7841 21/50 current_auc = 0.6875
User 7841 AUC after training: 0.6875
User 7841 does not improve AUC. Reverting changes.
Training on augumented user 1639 22/50 current_auc = 0.6875
User 1639 AUC after training: 0.6875
User 1639 does not improve AUC. Reverting changes.
Training on augumented user 86356 23/50 current_auc = 0.6875
User 86356 AUC after training: 0.6875
User 86356 does not improve AUC. Reverting changes.
Training on augumented user 730 24/50 current_auc = 0.6875
User 730 AUC after training: 0.6875
User 730 does not improve AUC. Reverting changes.
Training on augumented user 123549 25/50 current_auc = 0.6875
User 123549 AUC after training: 0.6875
User 123549 does not improve AUC. Reverting changes.
Training on augumented user 37448 26/50 current_auc = 0.6875
User 37448 AUC after training: 0.6875
User 37448 does not improve AUC. Reverting changes.
Training on augumented user 74207 27/50 current_auc = 0.6875
User 74207 AUC after training: 0.6875
User 74207 does not improve AUC. Reverting changes.
Training on augumented user 65047 28/50 current_auc = 0.6875
User 65047 AUC after training: 0.6875
User 65047 does not improve AUC. Reverting changes.
Training on augumented user 87025 29/50 current_auc = 0.6875
User 87025 AUC after training: 0.6875
User 87025 does not improve AUC. Reverting changes.
Training on augumented user 51091 30/50 current_auc = 0.6875
User 51091 AUC after training: 0.6875
User 51091 does not improve AUC. Reverting changes.
Training on augumented user 130406 31/50 current_auc = 0.6875
User 130406 AUC after training: 0.6875
User 130406 does not improve AUC. Reverting changes.
Training on augumented user 95167 32/50 current_auc = 0.6875
User 95167 AUC after training: 0.7
User 95167 improves AUC. Keeping the model.
Training on augumented user 36921 33/50 current_auc = 0.7
User 36921 AUC after training: 0.7
User 36921 does not improve AUC. Reverting changes.
Training on augumented user 103533 34/50 current_auc = 0.7
User 103533 AUC after training: 0.6875
User 103533 does not improve AUC. Reverting changes.
Training on augumented user 86708 35/50 current_auc = 0.7
User 86708 AUC after training: 0.7
User 86708 does not improve AUC. Reverting changes.
Training on augumented user 27756 36/50 current_auc = 0.7
User 27756 AUC after training: 0.7
User 27756 does not improve AUC. Reverting changes.
Training on augumented user 131648 37/50 current_auc = 0.7
User 131648 AUC after training: 0.7
User 131648 does not improve AUC. Reverting changes.
Training on augumented user 103944 38/50 current_auc = 0.7
User 103944 AUC after training: 0.6875
User 103944 does not improve AUC. Reverting changes.
Training on augumented user 106164 39/50 current_auc = 0.7
User 106164 AUC after training: 0.7
User 106164 does not improve AUC. Reverting changes.
Training on augumented user 6860 40/50 current_auc = 0.7
User 6860 AUC after training: 0.6875
User 6860 does not improve AUC. Reverting changes.
Training on augumented user 103634 41/50 current_auc = 0.7
User 103634 AUC after training: 0.7
User 103634 does not improve AUC. Reverting changes.
Training on augumented user 37097 42/50 current_auc = 0.7
User 37097 AUC after training: 0.7
User 37097 does not improve AUC. Reverting changes.
Training on augumented user 68898 43/50 current_auc = 0.7
User 68898 AUC after training: 0.7
User 68898 does not improve AUC. Reverting changes.
Training on augumented user 77978 44/50 current_auc = 0.7
User 77978 AUC after training: 0.7
User 77978 does not improve AUC. Reverting changes.
Training on augumented user 58185 45/50 current_auc = 0.7
User 58185 AUC after training: 0.7
User 58185 does not improve AUC. Reverting changes.
Training on augumented user 120741 46/50 current_auc = 0.7
User 120741 AUC after training: 0.7
User 120741 does not improve AUC. Reverting changes.
Training on augumented user 11886 47/50 current_auc = 0.7
User 11886 AUC after training: 0.7
User 11886 does not improve AUC. Reverting changes.
Training on augumented user 31482 48/50 current_auc = 0.7
User 31482 AUC after training: 0.6875
User 31482 does not improve AUC. Reverting changes.
Training on augumented user 68659 49/50 current_auc = 0.7
User 68659 AUC after training: 0.7
User 68659 does not improve AUC. Reverting changes.
[2024-12-02 20:08:42.425484] start test user 62408 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:42.975656] start test user 62408 277/568 recall augumented users by random, augumented_users = [90586, 57522, 19944, 26720, 60369, 16946, 57885, 89397, 11328, 129567, 6305, 17221, 69637, 87289, 137751, 39537, 104373, 84139, 98196, 20354, 35008, 54942, 74887, 94647, 11235, 43930, 106668, 38381, 19192, 70896, 130852, 133421, 5963, 3723, 50894, 48870, 95085, 44845, 118977, 97024, 81866, 127542, 109789, 42646, 44765, 79023, 62848, 68587, 50780, 69975]
[2024-12-02 20:08:43.003346] user = 62408 Cloud 277/568
[2024-12-02 20:08:43.044643] user = 62408 Local 277/568
[2024-12-02 20:08:43.182151] user = 62408 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:45.634067] user = 62408 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.743451888613179
Training on augumented user 90586 0/50 current_auc = 0.743451888613179
User 90586 AUC after training: 0.7438654535428729
User 90586 improves AUC. Keeping the model.
Training on augumented user 57522 1/50 current_auc = 0.7438654535428729
User 57522 AUC after training: 0.7431761786600496
User 57522 does not improve AUC. Reverting changes.
Training on augumented user 19944 2/50 current_auc = 0.7438654535428729
User 19944 AUC after training: 0.7441411634960021
User 19944 improves AUC. Keeping the model.
Training on augumented user 26720 3/50 current_auc = 0.7441411634960021
User 26720 AUC after training: 0.7439343810311552
User 26720 does not improve AUC. Reverting changes.
Training on augumented user 60369 4/50 current_auc = 0.7441411634960021
User 60369 AUC after training: 0.743658671078026
User 60369 does not improve AUC. Reverting changes.
Training on augumented user 16946 5/50 current_auc = 0.7441411634960021
User 16946 AUC after training: 0.7431761786600497
User 16946 does not improve AUC. Reverting changes.
Training on augumented user 57885 6/50 current_auc = 0.7441411634960021
User 57885 AUC after training: 0.7442790184725668
User 57885 improves AUC. Keeping the model.
Training on augumented user 89397 7/50 current_auc = 0.7442790184725668
User 89397 AUC after training: 0.7433829611248967
User 89397 does not improve AUC. Reverting changes.
Training on augumented user 11328 8/50 current_auc = 0.7442790184725668
User 11328 AUC after training: 0.7442100909842846
User 11328 does not improve AUC. Reverting changes.
Training on augumented user 129567 9/50 current_auc = 0.7442790184725668
User 129567 AUC after training: 0.7438654535428729
User 129567 does not improve AUC. Reverting changes.
Training on augumented user 6305 10/50 current_auc = 0.7442790184725668
User 6305 AUC after training: 0.7433829611248967
User 6305 does not improve AUC. Reverting changes.
Training on augumented user 17221 11/50 current_auc = 0.7442790184725668
User 17221 AUC after training: 0.7435208161014613
User 17221 does not improve AUC. Reverting changes.
Training on augumented user 69637 12/50 current_auc = 0.7442790184725668
User 69637 AUC after training: 0.7435208161014613
User 69637 does not improve AUC. Reverting changes.
Training on augumented user 87289 13/50 current_auc = 0.7442790184725668
User 87289 AUC after training: 0.7438654535428729
User 87289 does not improve AUC. Reverting changes.
Training on augumented user 137751 14/50 current_auc = 0.7442790184725668
User 137751 AUC after training: 0.7441411634960022
User 137751 does not improve AUC. Reverting changes.
Training on augumented user 39537 15/50 current_auc = 0.7442790184725668
User 39537 AUC after training: 0.7438654535428729
User 39537 does not improve AUC. Reverting changes.
Training on augumented user 104373 16/50 current_auc = 0.7442790184725668
User 104373 AUC after training: 0.7438654535428729
User 104373 does not improve AUC. Reverting changes.
Training on augumented user 84139 17/50 current_auc = 0.7442790184725668
User 84139 AUC after training: 0.7440033085194375
User 84139 does not improve AUC. Reverting changes.
Training on augumented user 98196 18/50 current_auc = 0.7442790184725668
User 98196 AUC after training: 0.7431072511717673
User 98196 does not improve AUC. Reverting changes.
Training on augumented user 20354 19/50 current_auc = 0.7442790184725668
User 20354 AUC after training: 0.7440033085194375
User 20354 does not improve AUC. Reverting changes.
Training on augumented user 35008 20/50 current_auc = 0.7442790184725668
User 35008 AUC after training: 0.7437275985663082
User 35008 does not improve AUC. Reverting changes.
Training on augumented user 54942 21/50 current_auc = 0.7442790184725668
User 54942 AUC after training: 0.7437275985663082
User 54942 does not improve AUC. Reverting changes.
Training on augumented user 74887 22/50 current_auc = 0.7442790184725668
User 74887 AUC after training: 0.7438654535428729
User 74887 does not improve AUC. Reverting changes.
Training on augumented user 94647 23/50 current_auc = 0.7442790184725668
User 94647 AUC after training: 0.7442790184725668
User 94647 does not improve AUC. Reverting changes.
Training on augumented user 11235 24/50 current_auc = 0.7442790184725668
User 11235 AUC after training: 0.7438654535428729
User 11235 does not improve AUC. Reverting changes.
Training on augumented user 43930 25/50 current_auc = 0.7442790184725668
User 43930 AUC after training: 0.7437965260545906
User 43930 does not improve AUC. Reverting changes.
Training on augumented user 106668 26/50 current_auc = 0.7442790184725668
User 106668 AUC after training: 0.7440033085194375
User 106668 does not improve AUC. Reverting changes.
Training on augumented user 38381 27/50 current_auc = 0.7442790184725668
User 38381 AUC after training: 0.7434518886131789
User 38381 does not improve AUC. Reverting changes.
Training on augumented user 19192 28/50 current_auc = 0.7442790184725668
User 19192 AUC after training: 0.7441411634960021
User 19192 does not improve AUC. Reverting changes.
Training on augumented user 70896 29/50 current_auc = 0.7442790184725668
User 70896 AUC after training: 0.7440033085194375
User 70896 does not improve AUC. Reverting changes.
Training on augumented user 130852 30/50 current_auc = 0.7442790184725668
User 130852 AUC after training: 0.743451888613179
User 130852 does not improve AUC. Reverting changes.
Training on augumented user 133421 31/50 current_auc = 0.7442790184725668
User 133421 AUC after training: 0.7435897435897436
User 133421 does not improve AUC. Reverting changes.
Training on augumented user 5963 32/50 current_auc = 0.7442790184725668
User 5963 AUC after training: 0.7435208161014613
User 5963 does not improve AUC. Reverting changes.
Training on augumented user 3723 33/50 current_auc = 0.7442790184725668
User 3723 AUC after training: 0.7433829611248965
User 3723 does not improve AUC. Reverting changes.
Training on augumented user 50894 34/50 current_auc = 0.7442790184725668
User 50894 AUC after training: 0.7438654535428728
User 50894 does not improve AUC. Reverting changes.
Training on augumented user 48870 35/50 current_auc = 0.7442790184725668
User 48870 AUC after training: 0.7432451061483321
User 48870 does not improve AUC. Reverting changes.
Training on augumented user 95085 36/50 current_auc = 0.7442790184725668
User 95085 AUC after training: 0.7433829611248967
User 95085 does not improve AUC. Reverting changes.
Training on augumented user 44845 37/50 current_auc = 0.7442790184725668
User 44845 AUC after training: 0.7435208161014613
User 44845 does not improve AUC. Reverting changes.
Training on augumented user 118977 38/50 current_auc = 0.7442790184725668
User 118977 AUC after training: 0.7437965260545907
User 118977 does not improve AUC. Reverting changes.
Training on augumented user 97024 39/50 current_auc = 0.7442790184725668
User 97024 AUC after training: 0.743658671078026
User 97024 does not improve AUC. Reverting changes.
Training on augumented user 81866 40/50 current_auc = 0.7442790184725668
User 81866 AUC after training: 0.7438654535428729
User 81866 does not improve AUC. Reverting changes.
Training on augumented user 127542 41/50 current_auc = 0.7442790184725668
User 127542 AUC after training: 0.7435208161014614
User 127542 does not improve AUC. Reverting changes.
Training on augumented user 109789 42/50 current_auc = 0.7442790184725668
User 109789 AUC after training: 0.743038323683485
User 109789 does not improve AUC. Reverting changes.
Training on augumented user 42646 43/50 current_auc = 0.7442790184725668
User 42646 AUC after training: 0.7438654535428729
User 42646 does not improve AUC. Reverting changes.
Training on augumented user 44765 44/50 current_auc = 0.7442790184725668
User 44765 AUC after training: 0.7440033085194375
User 44765 does not improve AUC. Reverting changes.
Training on augumented user 79023 45/50 current_auc = 0.7442790184725668
User 79023 AUC after training: 0.7437965260545906
User 79023 does not improve AUC. Reverting changes.
Training on augumented user 62848 46/50 current_auc = 0.7442790184725668
User 62848 AUC after training: 0.743245106148332
User 62848 does not improve AUC. Reverting changes.
Training on augumented user 68587 47/50 current_auc = 0.7442790184725668
User 68587 AUC after training: 0.7434518886131789
User 68587 does not improve AUC. Reverting changes.
Training on augumented user 50780 48/50 current_auc = 0.7442790184725668
User 50780 AUC after training: 0.7433829611248967
User 50780 does not improve AUC. Reverting changes.
Training on augumented user 69975 49/50 current_auc = 0.7442790184725668
User 69975 AUC after training: 0.7438654535428728
User 69975 does not improve AUC. Reverting changes.
[2024-12-02 20:09:21.207588] start test user 62430 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:22.049321] start test user 62430 278/568 recall augumented users by random, augumented_users = [88255, 114507, 25135, 79536, 55223, 31605, 8826, 20173, 22568, 1136, 19022, 116072, 19126, 105533, 110006, 80523, 14, 9663, 18633, 70722, 11915, 124883, 112135, 79889, 95938, 8666, 41284, 9853, 39226, 41689, 116469, 41567, 81851, 106344, 74658, 45424, 83372, 53474, 61377, 106614, 49314, 50204, 10052, 32009, 67075, 102316, 107728, 122418, 45720, 30938]
[2024-12-02 20:09:22.065373] user = 62430 Cloud 278/568
[2024-12-02 20:09:22.103996] user = 62430 Local 278/568
[2024-12-02 20:09:22.392479] user = 62430 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:24.402536] user = 62430 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7137867647058823
Training on augumented user 88255 0/50 current_auc = 0.7137867647058823
User 88255 AUC after training: 0.7130514705882353
User 88255 does not improve AUC. Reverting changes.
Training on augumented user 114507 1/50 current_auc = 0.7137867647058823
User 114507 AUC after training: 0.7137867647058823
User 114507 does not improve AUC. Reverting changes.
Training on augumented user 25135 2/50 current_auc = 0.7137867647058823
User 25135 AUC after training: 0.7123161764705882
User 25135 does not improve AUC. Reverting changes.
Training on augumented user 79536 3/50 current_auc = 0.7137867647058823
User 79536 AUC after training: 0.7143382352941176
User 79536 improves AUC. Keeping the model.
Training on augumented user 55223 4/50 current_auc = 0.7143382352941176
User 55223 AUC after training: 0.7143382352941177
User 55223 improves AUC. Keeping the model.
Training on augumented user 31605 5/50 current_auc = 0.7143382352941177
User 31605 AUC after training: 0.7145220588235294
User 31605 improves AUC. Keeping the model.
Training on augumented user 8826 6/50 current_auc = 0.7145220588235294
User 8826 AUC after training: 0.7137867647058823
User 8826 does not improve AUC. Reverting changes.
Training on augumented user 20173 7/50 current_auc = 0.7145220588235294
User 20173 AUC after training: 0.7137867647058823
User 20173 does not improve AUC. Reverting changes.
Training on augumented user 22568 8/50 current_auc = 0.7145220588235294
User 22568 AUC after training: 0.7147058823529411
User 22568 improves AUC. Keeping the model.
Training on augumented user 1136 9/50 current_auc = 0.7147058823529411
User 1136 AUC after training: 0.7147058823529412
User 1136 improves AUC. Keeping the model.
Training on augumented user 19022 10/50 current_auc = 0.7147058823529412
User 19022 AUC after training: 0.7145220588235294
User 19022 does not improve AUC. Reverting changes.
Training on augumented user 116072 11/50 current_auc = 0.7147058823529412
User 116072 AUC after training: 0.7143382352941177
User 116072 does not improve AUC. Reverting changes.
Training on augumented user 19126 12/50 current_auc = 0.7147058823529412
User 19126 AUC after training: 0.7150735294117646
User 19126 improves AUC. Keeping the model.
Training on augumented user 105533 13/50 current_auc = 0.7150735294117646
User 105533 AUC after training: 0.714889705882353
User 105533 does not improve AUC. Reverting changes.
Training on augumented user 110006 14/50 current_auc = 0.7150735294117646
User 110006 AUC after training: 0.7147058823529412
User 110006 does not improve AUC. Reverting changes.
Training on augumented user 80523 15/50 current_auc = 0.7150735294117646
User 80523 AUC after training: 0.7143382352941176
User 80523 does not improve AUC. Reverting changes.
Training on augumented user 14 16/50 current_auc = 0.7150735294117646
User 14 AUC after training: 0.7134191176470589
User 14 does not improve AUC. Reverting changes.
Training on augumented user 9663 17/50 current_auc = 0.7150735294117646
User 9663 AUC after training: 0.7152573529411764
User 9663 improves AUC. Keeping the model.
Training on augumented user 18633 18/50 current_auc = 0.7152573529411764
User 18633 AUC after training: 0.7150735294117647
User 18633 does not improve AUC. Reverting changes.
Training on augumented user 70722 19/50 current_auc = 0.7152573529411764
User 70722 AUC after training: 0.7150735294117647
User 70722 does not improve AUC. Reverting changes.
Training on augumented user 11915 20/50 current_auc = 0.7152573529411764
User 11915 AUC after training: 0.7156250000000001
User 11915 improves AUC. Keeping the model.
Training on augumented user 124883 21/50 current_auc = 0.7156250000000001
User 124883 AUC after training: 0.7152573529411765
User 124883 does not improve AUC. Reverting changes.
Training on augumented user 112135 22/50 current_auc = 0.7156250000000001
User 112135 AUC after training: 0.7152573529411764
User 112135 does not improve AUC. Reverting changes.
Training on augumented user 79889 23/50 current_auc = 0.7156250000000001
User 79889 AUC after training: 0.7161764705882353
User 79889 improves AUC. Keeping the model.
Training on augumented user 95938 24/50 current_auc = 0.7161764705882353
User 95938 AUC after training: 0.7167279411764707
User 95938 improves AUC. Keeping the model.
Training on augumented user 8666 25/50 current_auc = 0.7167279411764707
User 8666 AUC after training: 0.7161764705882353
User 8666 does not improve AUC. Reverting changes.
Training on augumented user 41284 26/50 current_auc = 0.7167279411764707
User 41284 AUC after training: 0.7161764705882353
User 41284 does not improve AUC. Reverting changes.
Training on augumented user 9853 27/50 current_auc = 0.7167279411764707
User 9853 AUC after training: 0.7161764705882353
User 9853 does not improve AUC. Reverting changes.
Training on augumented user 39226 28/50 current_auc = 0.7167279411764707
User 39226 AUC after training: 0.7158088235294118
User 39226 does not improve AUC. Reverting changes.
Training on augumented user 41689 29/50 current_auc = 0.7167279411764707
User 41689 AUC after training: 0.7154411764705882
User 41689 does not improve AUC. Reverting changes.
Training on augumented user 116469 30/50 current_auc = 0.7167279411764707
User 116469 AUC after training: 0.7161764705882353
User 116469 does not improve AUC. Reverting changes.
Training on augumented user 41567 31/50 current_auc = 0.7167279411764707
User 41567 AUC after training: 0.7161764705882353
User 41567 does not improve AUC. Reverting changes.
Training on augumented user 81851 32/50 current_auc = 0.7167279411764707
User 81851 AUC after training: 0.7165441176470588
User 81851 does not improve AUC. Reverting changes.
Training on augumented user 106344 33/50 current_auc = 0.7167279411764707
User 106344 AUC after training: 0.716360294117647
User 106344 does not improve AUC. Reverting changes.
Training on augumented user 74658 34/50 current_auc = 0.7167279411764707
User 74658 AUC after training: 0.7159926470588235
User 74658 does not improve AUC. Reverting changes.
Training on augumented user 45424 35/50 current_auc = 0.7167279411764707
User 45424 AUC after training: 0.7159926470588236
User 45424 does not improve AUC. Reverting changes.
Training on augumented user 83372 36/50 current_auc = 0.7167279411764707
User 83372 AUC after training: 0.7156250000000001
User 83372 does not improve AUC. Reverting changes.
Training on augumented user 53474 37/50 current_auc = 0.7167279411764707
User 53474 AUC after training: 0.716360294117647
User 53474 does not improve AUC. Reverting changes.
Training on augumented user 61377 38/50 current_auc = 0.7167279411764707
User 61377 AUC after training: 0.7161764705882353
User 61377 does not improve AUC. Reverting changes.
Training on augumented user 106614 39/50 current_auc = 0.7167279411764707
User 106614 AUC after training: 0.7187500000000001
User 106614 improves AUC. Keeping the model.
Training on augumented user 49314 40/50 current_auc = 0.7187500000000001
User 49314 AUC after training: 0.7196691176470589
User 49314 improves AUC. Keeping the model.
Training on augumented user 50204 41/50 current_auc = 0.7196691176470589
User 50204 AUC after training: 0.7200367647058824
User 50204 improves AUC. Keeping the model.
Training on augumented user 10052 42/50 current_auc = 0.7200367647058824
User 10052 AUC after training: 0.7194852941176471
User 10052 does not improve AUC. Reverting changes.
Training on augumented user 32009 43/50 current_auc = 0.7200367647058824
User 32009 AUC after training: 0.7204044117647059
User 32009 improves AUC. Keeping the model.
Training on augumented user 67075 44/50 current_auc = 0.7204044117647059
User 67075 AUC after training: 0.7174632352941176
User 67075 does not improve AUC. Reverting changes.
Training on augumented user 102316 45/50 current_auc = 0.7204044117647059
User 102316 AUC after training: 0.7205882352941178
User 102316 improves AUC. Keeping the model.
Training on augumented user 107728 46/50 current_auc = 0.7205882352941178
User 107728 AUC after training: 0.7204044117647059
User 107728 does not improve AUC. Reverting changes.
Training on augumented user 122418 47/50 current_auc = 0.7205882352941178
User 122418 AUC after training: 0.7205882352941178
User 122418 does not improve AUC. Reverting changes.
Training on augumented user 45720 48/50 current_auc = 0.7205882352941178
User 45720 AUC after training: 0.7193014705882352
User 45720 does not improve AUC. Reverting changes.
Training on augumented user 30938 49/50 current_auc = 0.7205882352941178
User 30938 AUC after training: 0.7204044117647058
User 30938 does not improve AUC. Reverting changes.
[2024-12-02 20:09:54.067733] start test user 62467 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:54.490311] start test user 62467 279/568 recall augumented users by random, augumented_users = [93235, 127834, 108096, 46704, 34663, 53425, 128092, 29710, 45425, 22120, 112791, 97715, 117993, 41166, 109618, 36329, 86672, 137018, 23540, 38676, 94511, 42902, 113873, 32887, 69696, 83799, 120455, 74929, 116472, 114588, 50524, 79363, 30343, 119154, 96192, 8017, 108696, 85001, 133780, 41762, 100985, 70026, 3348, 1406, 13146, 80760, 53315, 16346, 58067, 54898]
[2024-12-02 20:09:54.505046] user = 62467 Cloud 279/568
[2024-12-02 20:09:54.514811] user = 62467 Local 279/568
[2024-12-02 20:09:54.548774] user = 62467 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:57.164070] user = 62467 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.65
Training on augumented user 93235 0/50 current_auc = 0.65
User 93235 AUC after training: 0.65
User 93235 does not improve AUC. Reverting changes.
Training on augumented user 127834 1/50 current_auc = 0.65
User 127834 AUC after training: 0.6642857142857143
User 127834 improves AUC. Keeping the model.
Training on augumented user 108096 2/50 current_auc = 0.6642857142857143
User 108096 AUC after training: 0.6571428571428571
User 108096 does not improve AUC. Reverting changes.
Training on augumented user 46704 3/50 current_auc = 0.6642857142857143
User 46704 AUC after training: 0.6785714285714286
User 46704 improves AUC. Keeping the model.
Training on augumented user 34663 4/50 current_auc = 0.6785714285714286
User 34663 AUC after training: 0.6714285714285715
User 34663 does not improve AUC. Reverting changes.
Training on augumented user 53425 5/50 current_auc = 0.6785714285714286
User 53425 AUC after training: 0.6785714285714286
User 53425 does not improve AUC. Reverting changes.
Training on augumented user 128092 6/50 current_auc = 0.6785714285714286
User 128092 AUC after training: 0.6714285714285715
User 128092 does not improve AUC. Reverting changes.
Training on augumented user 29710 7/50 current_auc = 0.6785714285714286
User 29710 AUC after training: 0.6785714285714286
User 29710 does not improve AUC. Reverting changes.
Training on augumented user 45425 8/50 current_auc = 0.6785714285714286
User 45425 AUC after training: 0.6714285714285715
User 45425 does not improve AUC. Reverting changes.
Training on augumented user 22120 9/50 current_auc = 0.6785714285714286
User 22120 AUC after training: 0.6785714285714286
User 22120 does not improve AUC. Reverting changes.
Training on augumented user 112791 10/50 current_auc = 0.6785714285714286
User 112791 AUC after training: 0.6714285714285715
User 112791 does not improve AUC. Reverting changes.
Training on augumented user 97715 11/50 current_auc = 0.6785714285714286
User 97715 AUC after training: 0.6714285714285715
User 97715 does not improve AUC. Reverting changes.
Training on augumented user 117993 12/50 current_auc = 0.6785714285714286
User 117993 AUC after training: 0.6785714285714286
User 117993 does not improve AUC. Reverting changes.
Training on augumented user 41166 13/50 current_auc = 0.6785714285714286
User 41166 AUC after training: 0.6714285714285715
User 41166 does not improve AUC. Reverting changes.
Training on augumented user 109618 14/50 current_auc = 0.6785714285714286
User 109618 AUC after training: 0.6785714285714286
User 109618 does not improve AUC. Reverting changes.
Training on augumented user 36329 15/50 current_auc = 0.6785714285714286
User 36329 AUC after training: 0.6714285714285715
User 36329 does not improve AUC. Reverting changes.
Training on augumented user 86672 16/50 current_auc = 0.6785714285714286
User 86672 AUC after training: 0.6785714285714285
User 86672 does not improve AUC. Reverting changes.
Training on augumented user 137018 17/50 current_auc = 0.6785714285714286
User 137018 AUC after training: 0.6642857142857143
User 137018 does not improve AUC. Reverting changes.
Training on augumented user 23540 18/50 current_auc = 0.6785714285714286
User 23540 AUC after training: 0.6571428571428571
User 23540 does not improve AUC. Reverting changes.
Training on augumented user 38676 19/50 current_auc = 0.6785714285714286
User 38676 AUC after training: 0.6785714285714286
User 38676 does not improve AUC. Reverting changes.
Training on augumented user 94511 20/50 current_auc = 0.6785714285714286
User 94511 AUC after training: 0.6785714285714286
User 94511 does not improve AUC. Reverting changes.
Training on augumented user 42902 21/50 current_auc = 0.6785714285714286
User 42902 AUC after training: 0.6714285714285715
User 42902 does not improve AUC. Reverting changes.
Training on augumented user 113873 22/50 current_auc = 0.6785714285714286
User 113873 AUC after training: 0.6642857142857143
User 113873 does not improve AUC. Reverting changes.
Training on augumented user 32887 23/50 current_auc = 0.6785714285714286
User 32887 AUC after training: 0.6714285714285715
User 32887 does not improve AUC. Reverting changes.
Training on augumented user 69696 24/50 current_auc = 0.6785714285714286
User 69696 AUC after training: 0.6714285714285715
User 69696 does not improve AUC. Reverting changes.
Training on augumented user 83799 25/50 current_auc = 0.6785714285714286
User 83799 AUC after training: 0.6714285714285715
User 83799 does not improve AUC. Reverting changes.
Training on augumented user 120455 26/50 current_auc = 0.6785714285714286
User 120455 AUC after training: 0.6785714285714286
User 120455 does not improve AUC. Reverting changes.
Training on augumented user 74929 27/50 current_auc = 0.6785714285714286
User 74929 AUC after training: 0.6714285714285715
User 74929 does not improve AUC. Reverting changes.
Training on augumented user 116472 28/50 current_auc = 0.6785714285714286
User 116472 AUC after training: 0.6714285714285715
User 116472 does not improve AUC. Reverting changes.
Training on augumented user 114588 29/50 current_auc = 0.6785714285714286
User 114588 AUC after training: 0.6785714285714286
User 114588 does not improve AUC. Reverting changes.
Training on augumented user 50524 30/50 current_auc = 0.6785714285714286
User 50524 AUC after training: 0.6785714285714286
User 50524 does not improve AUC. Reverting changes.
Training on augumented user 79363 31/50 current_auc = 0.6785714285714286
User 79363 AUC after training: 0.6785714285714286
User 79363 does not improve AUC. Reverting changes.
Training on augumented user 30343 32/50 current_auc = 0.6785714285714286
User 30343 AUC after training: 0.6785714285714286
User 30343 does not improve AUC. Reverting changes.
Training on augumented user 119154 33/50 current_auc = 0.6785714285714286
User 119154 AUC after training: 0.6571428571428571
User 119154 does not improve AUC. Reverting changes.
Training on augumented user 96192 34/50 current_auc = 0.6785714285714286
User 96192 AUC after training: 0.6785714285714286
User 96192 does not improve AUC. Reverting changes.
Training on augumented user 8017 35/50 current_auc = 0.6785714285714286
User 8017 AUC after training: 0.6785714285714286
User 8017 does not improve AUC. Reverting changes.
Training on augumented user 108696 36/50 current_auc = 0.6785714285714286
User 108696 AUC after training: 0.6714285714285715
User 108696 does not improve AUC. Reverting changes.
Training on augumented user 85001 37/50 current_auc = 0.6785714285714286
User 85001 AUC after training: 0.6785714285714286
User 85001 does not improve AUC. Reverting changes.
Training on augumented user 133780 38/50 current_auc = 0.6785714285714286
User 133780 AUC after training: 0.6785714285714286
User 133780 does not improve AUC. Reverting changes.
Training on augumented user 41762 39/50 current_auc = 0.6785714285714286
User 41762 AUC after training: 0.6714285714285715
User 41762 does not improve AUC. Reverting changes.
Training on augumented user 100985 40/50 current_auc = 0.6785714285714286
User 100985 AUC after training: 0.6785714285714286
User 100985 does not improve AUC. Reverting changes.
Training on augumented user 70026 41/50 current_auc = 0.6785714285714286
User 70026 AUC after training: 0.6642857142857144
User 70026 does not improve AUC. Reverting changes.
Training on augumented user 3348 42/50 current_auc = 0.6785714285714286
User 3348 AUC after training: 0.6714285714285715
User 3348 does not improve AUC. Reverting changes.
Training on augumented user 1406 43/50 current_auc = 0.6785714285714286
User 1406 AUC after training: 0.6714285714285715
User 1406 does not improve AUC. Reverting changes.
Training on augumented user 13146 44/50 current_auc = 0.6785714285714286
User 13146 AUC after training: 0.6785714285714286
User 13146 does not improve AUC. Reverting changes.
Training on augumented user 80760 45/50 current_auc = 0.6785714285714286
User 80760 AUC after training: 0.6642857142857143
User 80760 does not improve AUC. Reverting changes.
Training on augumented user 53315 46/50 current_auc = 0.6785714285714286
User 53315 AUC after training: 0.6714285714285715
User 53315 does not improve AUC. Reverting changes.
Training on augumented user 16346 47/50 current_auc = 0.6785714285714286
User 16346 AUC after training: 0.6714285714285715
User 16346 does not improve AUC. Reverting changes.
Training on augumented user 58067 48/50 current_auc = 0.6785714285714286
User 58067 AUC after training: 0.6785714285714286
User 58067 does not improve AUC. Reverting changes.
Training on augumented user 54898 49/50 current_auc = 0.6785714285714286
User 54898 AUC after training: 0.6785714285714286
User 54898 does not improve AUC. Reverting changes.
[2024-12-02 20:10:24.708192] start test user 62505 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:25.127946] start test user 62505 280/568 recall augumented users by random, augumented_users = [49745, 50733, 75094, 54819, 61665, 125121, 105442, 118927, 12672, 21575, 118790, 3201, 47129, 74851, 27276, 70132, 111089, 1223, 61433, 93907, 33401, 72295, 11147, 121080, 126926, 101899, 104173, 93127, 40393, 73333, 121817, 32723, 30784, 124189, 38882, 56792, 116055, 7625, 120860, 11894, 133312, 9080, 122051, 78923, 92935, 137350, 92761, 35145, 98162, 15195]
[2024-12-02 20:10:25.142840] user = 62505 Cloud 280/568
[2024-12-02 20:10:25.155647] user = 62505 Local 280/568
[2024-12-02 20:10:25.200388] user = 62505 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:27.596870] user = 62505 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44147157190635455
Training on augumented user 49745 0/50 current_auc = 0.44147157190635455
User 49745 AUC after training: 0.4389632107023411
User 49745 does not improve AUC. Reverting changes.
Training on augumented user 50733 1/50 current_auc = 0.44147157190635455
User 50733 AUC after training: 0.43979933110367897
User 50733 does not improve AUC. Reverting changes.
Training on augumented user 75094 2/50 current_auc = 0.44147157190635455
User 75094 AUC after training: 0.44147157190635455
User 75094 does not improve AUC. Reverting changes.
Training on augumented user 54819 3/50 current_auc = 0.44147157190635455
User 54819 AUC after training: 0.4406354515050167
User 54819 does not improve AUC. Reverting changes.
Training on augumented user 61665 4/50 current_auc = 0.44147157190635455
User 61665 AUC after training: 0.44147157190635455
User 61665 does not improve AUC. Reverting changes.
Training on augumented user 125121 5/50 current_auc = 0.44147157190635455
User 125121 AUC after training: 0.4423076923076923
User 125121 improves AUC. Keeping the model.
Training on augumented user 105442 6/50 current_auc = 0.4423076923076923
User 105442 AUC after training: 0.44147157190635455
User 105442 does not improve AUC. Reverting changes.
Training on augumented user 118927 7/50 current_auc = 0.4423076923076923
User 118927 AUC after training: 0.4414715719063545
User 118927 does not improve AUC. Reverting changes.
Training on augumented user 12672 8/50 current_auc = 0.4423076923076923
User 12672 AUC after training: 0.4423076923076923
User 12672 does not improve AUC. Reverting changes.
Training on augumented user 21575 9/50 current_auc = 0.4423076923076923
User 21575 AUC after training: 0.44147157190635455
User 21575 does not improve AUC. Reverting changes.
Training on augumented user 118790 10/50 current_auc = 0.4423076923076923
User 118790 AUC after training: 0.4406354515050167
User 118790 does not improve AUC. Reverting changes.
Training on augumented user 3201 11/50 current_auc = 0.4423076923076923
User 3201 AUC after training: 0.43979933110367897
User 3201 does not improve AUC. Reverting changes.
Training on augumented user 47129 12/50 current_auc = 0.4423076923076923
User 47129 AUC after training: 0.4414715719063545
User 47129 does not improve AUC. Reverting changes.
Training on augumented user 74851 13/50 current_auc = 0.4423076923076923
User 74851 AUC after training: 0.44314381270903014
User 74851 improves AUC. Keeping the model.
Training on augumented user 27276 14/50 current_auc = 0.44314381270903014
User 27276 AUC after training: 0.44230769230769235
User 27276 does not improve AUC. Reverting changes.
Training on augumented user 70132 15/50 current_auc = 0.44314381270903014
User 70132 AUC after training: 0.4414715719063545
User 70132 does not improve AUC. Reverting changes.
Training on augumented user 111089 16/50 current_auc = 0.44314381270903014
User 111089 AUC after training: 0.44314381270903014
User 111089 does not improve AUC. Reverting changes.
Training on augumented user 1223 17/50 current_auc = 0.44314381270903014
User 1223 AUC after training: 0.4423076923076923
User 1223 does not improve AUC. Reverting changes.
Training on augumented user 61433 18/50 current_auc = 0.44314381270903014
User 61433 AUC after training: 0.4439799331103679
User 61433 improves AUC. Keeping the model.
Training on augumented user 93907 19/50 current_auc = 0.4439799331103679
User 93907 AUC after training: 0.44314381270903014
User 93907 does not improve AUC. Reverting changes.
Training on augumented user 33401 20/50 current_auc = 0.4439799331103679
User 33401 AUC after training: 0.4406354515050167
User 33401 does not improve AUC. Reverting changes.
Training on augumented user 72295 21/50 current_auc = 0.4439799331103679
User 72295 AUC after training: 0.44314381270903014
User 72295 does not improve AUC. Reverting changes.
Training on augumented user 11147 22/50 current_auc = 0.4439799331103679
User 11147 AUC after training: 0.4431438127090301
User 11147 does not improve AUC. Reverting changes.
Training on augumented user 121080 23/50 current_auc = 0.4439799331103679
User 121080 AUC after training: 0.4439799331103679
User 121080 does not improve AUC. Reverting changes.
Training on augumented user 126926 24/50 current_auc = 0.4439799331103679
User 126926 AUC after training: 0.4489966555183946
User 126926 improves AUC. Keeping the model.
Training on augumented user 101899 25/50 current_auc = 0.4489966555183946
User 101899 AUC after training: 0.4523411371237458
User 101899 improves AUC. Keeping the model.
Training on augumented user 104173 26/50 current_auc = 0.4523411371237458
User 104173 AUC after training: 0.4531772575250836
User 104173 improves AUC. Keeping the model.
Training on augumented user 93127 27/50 current_auc = 0.4531772575250836
User 93127 AUC after training: 0.45401337792642144
User 93127 improves AUC. Keeping the model.
Training on augumented user 40393 28/50 current_auc = 0.45401337792642144
User 40393 AUC after training: 0.4581939799331104
User 40393 improves AUC. Keeping the model.
Training on augumented user 73333 29/50 current_auc = 0.4581939799331104
User 73333 AUC after training: 0.4548494983277592
User 73333 does not improve AUC. Reverting changes.
Training on augumented user 121817 30/50 current_auc = 0.4581939799331104
User 121817 AUC after training: 0.4565217391304348
User 121817 does not improve AUC. Reverting changes.
Training on augumented user 32723 31/50 current_auc = 0.4581939799331104
User 32723 AUC after training: 0.4573578595317726
User 32723 does not improve AUC. Reverting changes.
Training on augumented user 30784 32/50 current_auc = 0.4581939799331104
User 30784 AUC after training: 0.4573578595317726
User 30784 does not improve AUC. Reverting changes.
Training on augumented user 124189 33/50 current_auc = 0.4581939799331104
User 124189 AUC after training: 0.4565217391304348
User 124189 does not improve AUC. Reverting changes.
Training on augumented user 38882 34/50 current_auc = 0.4581939799331104
User 38882 AUC after training: 0.45401337792642144
User 38882 does not improve AUC. Reverting changes.
Training on augumented user 56792 35/50 current_auc = 0.4581939799331104
User 56792 AUC after training: 0.45735785953177255
User 56792 does not improve AUC. Reverting changes.
Training on augumented user 116055 36/50 current_auc = 0.4581939799331104
User 116055 AUC after training: 0.45903010033444813
User 116055 improves AUC. Keeping the model.
Training on augumented user 7625 37/50 current_auc = 0.45903010033444813
User 7625 AUC after training: 0.45401337792642144
User 7625 does not improve AUC. Reverting changes.
Training on augumented user 120860 38/50 current_auc = 0.45903010033444813
User 120860 AUC after training: 0.4581939799331104
User 120860 does not improve AUC. Reverting changes.
Training on augumented user 11894 39/50 current_auc = 0.45903010033444813
User 11894 AUC after training: 0.4565217391304348
User 11894 does not improve AUC. Reverting changes.
Training on augumented user 133312 40/50 current_auc = 0.45903010033444813
User 133312 AUC after training: 0.455685618729097
User 133312 does not improve AUC. Reverting changes.
Training on augumented user 9080 41/50 current_auc = 0.45903010033444813
User 9080 AUC after training: 0.4565217391304348
User 9080 does not improve AUC. Reverting changes.
Training on augumented user 122051 42/50 current_auc = 0.45903010033444813
User 122051 AUC after training: 0.45484949832775917
User 122051 does not improve AUC. Reverting changes.
Training on augumented user 78923 43/50 current_auc = 0.45903010033444813
User 78923 AUC after training: 0.4573578595317726
User 78923 does not improve AUC. Reverting changes.
Training on augumented user 92935 44/50 current_auc = 0.45903010033444813
User 92935 AUC after training: 0.459866220735786
User 92935 improves AUC. Keeping the model.
Training on augumented user 137350 45/50 current_auc = 0.459866220735786
User 137350 AUC after training: 0.4581939799331104
User 137350 does not improve AUC. Reverting changes.
Training on augumented user 92761 46/50 current_auc = 0.459866220735786
User 92761 AUC after training: 0.4598662207357859
User 92761 does not improve AUC. Reverting changes.
Training on augumented user 35145 47/50 current_auc = 0.459866220735786
User 35145 AUC after training: 0.45401337792642144
User 35145 does not improve AUC. Reverting changes.
Training on augumented user 98162 48/50 current_auc = 0.459866220735786
User 98162 AUC after training: 0.45903010033444813
User 98162 does not improve AUC. Reverting changes.
Training on augumented user 15195 49/50 current_auc = 0.459866220735786
User 15195 AUC after training: 0.45903010033444813
User 15195 does not improve AUC. Reverting changes.
[2024-12-02 20:10:53.943927] start test user 62511 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:54.788105] start test user 62511 281/568 recall augumented users by random, augumented_users = [59908, 106920, 19097, 92898, 134541, 94732, 112833, 133612, 54163, 57112, 46895, 31276, 10830, 97266, 36303, 109015, 16255, 12085, 66945, 33487, 87168, 109304, 137210, 83320, 98245, 8997, 16022, 29754, 10330, 111181, 7569, 25931, 100157, 110207, 92837, 52503, 7390, 3211, 50341, 50266, 65195, 81981, 71516, 91832, 128663, 77195, 95693, 137667, 109536, 111923]
[2024-12-02 20:10:54.818851] user = 62511 Cloud 281/568
[2024-12-02 20:10:54.859653] user = 62511 Local 281/568
[2024-12-02 20:10:54.911385] user = 62511 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:56.375823] user = 62511 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7515875668449198
Training on augumented user 59908 0/50 current_auc = 0.7515875668449198
User 59908 AUC after training: 0.7513368983957219
User 59908 does not improve AUC. Reverting changes.
Training on augumented user 106920 1/50 current_auc = 0.7515875668449198
User 106920 AUC after training: 0.750668449197861
User 106920 does not improve AUC. Reverting changes.
Training on augumented user 19097 2/50 current_auc = 0.7515875668449198
User 19097 AUC after training: 0.7509191176470589
User 19097 does not improve AUC. Reverting changes.
Training on augumented user 92898 3/50 current_auc = 0.7515875668449198
User 92898 AUC after training: 0.750668449197861
User 92898 does not improve AUC. Reverting changes.
Training on augumented user 134541 4/50 current_auc = 0.7515875668449198
User 134541 AUC after training: 0.7515875668449199
User 134541 improves AUC. Keeping the model.
Training on augumented user 94732 5/50 current_auc = 0.7515875668449199
User 94732 AUC after training: 0.7524231283422459
User 94732 improves AUC. Keeping the model.
Training on augumented user 112833 6/50 current_auc = 0.7524231283422459
User 112833 AUC after training: 0.752423128342246
User 112833 improves AUC. Keeping the model.
Training on augumented user 133612 7/50 current_auc = 0.752423128342246
User 133612 AUC after training: 0.7527573529411764
User 133612 improves AUC. Keeping the model.
Training on augumented user 54163 8/50 current_auc = 0.7527573529411764
User 54163 AUC after training: 0.7540942513368983
User 54163 improves AUC. Keeping the model.
Training on augumented user 57112 9/50 current_auc = 0.7540942513368983
User 57112 AUC after training: 0.7538435828877006
User 57112 does not improve AUC. Reverting changes.
Training on augumented user 46895 10/50 current_auc = 0.7540942513368983
User 46895 AUC after training: 0.7537600267379679
User 46895 does not improve AUC. Reverting changes.
Training on augumented user 31276 11/50 current_auc = 0.7540942513368983
User 31276 AUC after training: 0.7532586898395722
User 31276 does not improve AUC. Reverting changes.
Training on augumented user 10830 12/50 current_auc = 0.7540942513368983
User 10830 AUC after training: 0.7540106951871658
User 10830 does not improve AUC. Reverting changes.
Training on augumented user 97266 13/50 current_auc = 0.7540942513368983
User 97266 AUC after training: 0.7535929144385026
User 97266 does not improve AUC. Reverting changes.
Training on augumented user 36303 14/50 current_auc = 0.7540942513368983
User 36303 AUC after training: 0.7540942513368983
User 36303 does not improve AUC. Reverting changes.
Training on augumented user 109015 15/50 current_auc = 0.7540942513368983
User 109015 AUC after training: 0.7535093582887701
User 109015 does not improve AUC. Reverting changes.
Training on augumented user 16255 16/50 current_auc = 0.7540942513368983
User 16255 AUC after training: 0.7540942513368984
User 16255 improves AUC. Keeping the model.
Training on augumented user 12085 17/50 current_auc = 0.7540942513368984
User 12085 AUC after training: 0.7543449197860963
User 12085 improves AUC. Keeping the model.
Training on augumented user 66945 18/50 current_auc = 0.7543449197860963
User 66945 AUC after training: 0.7542613636363636
User 66945 does not improve AUC. Reverting changes.
Training on augumented user 33487 19/50 current_auc = 0.7543449197860963
User 33487 AUC after training: 0.7549298128342247
User 33487 improves AUC. Keeping the model.
Training on augumented user 87168 20/50 current_auc = 0.7549298128342247
User 87168 AUC after training: 0.754846256684492
User 87168 does not improve AUC. Reverting changes.
Training on augumented user 109304 21/50 current_auc = 0.7549298128342247
User 109304 AUC after training: 0.7557653743315508
User 109304 improves AUC. Keeping the model.
Training on augumented user 137210 22/50 current_auc = 0.7557653743315508
User 137210 AUC after training: 0.7555982620320856
User 137210 does not improve AUC. Reverting changes.
Training on augumented user 83320 23/50 current_auc = 0.7557653743315508
User 83320 AUC after training: 0.7554311497326203
User 83320 does not improve AUC. Reverting changes.
Training on augumented user 98245 24/50 current_auc = 0.7557653743315508
User 98245 AUC after training: 0.7551804812834224
User 98245 does not improve AUC. Reverting changes.
Training on augumented user 8997 25/50 current_auc = 0.7557653743315508
User 8997 AUC after training: 0.7558489304812834
User 8997 improves AUC. Keeping the model.
Training on augumented user 16022 26/50 current_auc = 0.7558489304812834
User 16022 AUC after training: 0.7552640374331551
User 16022 does not improve AUC. Reverting changes.
Training on augumented user 29754 27/50 current_auc = 0.7558489304812834
User 29754 AUC after training: 0.7551804812834224
User 29754 does not improve AUC. Reverting changes.
Training on augumented user 10330 28/50 current_auc = 0.7558489304812834
User 10330 AUC after training: 0.7556818181818181
User 10330 does not improve AUC. Reverting changes.
Training on augumented user 111181 29/50 current_auc = 0.7558489304812834
User 111181 AUC after training: 0.7557653743315508
User 111181 does not improve AUC. Reverting changes.
Training on augumented user 7569 30/50 current_auc = 0.7558489304812834
User 7569 AUC after training: 0.755932486631016
User 7569 improves AUC. Keeping the model.
Training on augumented user 25931 31/50 current_auc = 0.755932486631016
User 25931 AUC after training: 0.7559324866310161
User 25931 improves AUC. Keeping the model.
Training on augumented user 100157 32/50 current_auc = 0.7559324866310161
User 100157 AUC after training: 0.7555982620320855
User 100157 does not improve AUC. Reverting changes.
Training on augumented user 110207 33/50 current_auc = 0.7559324866310161
User 110207 AUC after training: 0.7552640374331551
User 110207 does not improve AUC. Reverting changes.
Training on augumented user 92837 34/50 current_auc = 0.7559324866310161
User 92837 AUC after training: 0.7557653743315509
User 92837 does not improve AUC. Reverting changes.
Training on augumented user 52503 35/50 current_auc = 0.7559324866310161
User 52503 AUC after training: 0.7553475935828877
User 52503 does not improve AUC. Reverting changes.
Training on augumented user 7390 36/50 current_auc = 0.7559324866310161
User 7390 AUC after training: 0.7532586898395722
User 7390 does not improve AUC. Reverting changes.
Training on augumented user 3211 37/50 current_auc = 0.7559324866310161
User 3211 AUC after training: 0.7556818181818182
User 3211 does not improve AUC. Reverting changes.
Training on augumented user 50341 38/50 current_auc = 0.7559324866310161
User 50341 AUC after training: 0.755514705882353
User 50341 does not improve AUC. Reverting changes.
Training on augumented user 50266 39/50 current_auc = 0.7559324866310161
User 50266 AUC after training: 0.75350935828877
User 50266 does not improve AUC. Reverting changes.
Training on augumented user 65195 40/50 current_auc = 0.7559324866310161
User 65195 AUC after training: 0.7554311497326203
User 65195 does not improve AUC. Reverting changes.
Training on augumented user 81981 41/50 current_auc = 0.7559324866310161
User 81981 AUC after training: 0.7559324866310161
User 81981 does not improve AUC. Reverting changes.
Training on augumented user 71516 42/50 current_auc = 0.7559324866310161
User 71516 AUC after training: 0.7552640374331551
User 71516 does not improve AUC. Reverting changes.
Training on augumented user 91832 43/50 current_auc = 0.7559324866310161
User 91832 AUC after training: 0.7558489304812834
User 91832 does not improve AUC. Reverting changes.
Training on augumented user 128663 44/50 current_auc = 0.7559324866310161
User 128663 AUC after training: 0.7556818181818182
User 128663 does not improve AUC. Reverting changes.
Training on augumented user 77195 45/50 current_auc = 0.7559324866310161
User 77195 AUC after training: 0.7560160427807486
User 77195 improves AUC. Keeping the model.
Training on augumented user 95693 46/50 current_auc = 0.7560160427807486
User 95693 AUC after training: 0.7555982620320856
User 95693 does not improve AUC. Reverting changes.
Training on augumented user 137667 47/50 current_auc = 0.7560160427807486
User 137667 AUC after training: 0.7558489304812834
User 137667 does not improve AUC. Reverting changes.
Training on augumented user 109536 48/50 current_auc = 0.7560160427807486
User 109536 AUC after training: 0.7557653743315508
User 109536 does not improve AUC. Reverting changes.
Training on augumented user 111923 49/50 current_auc = 0.7560160427807486
User 111923 AUC after training: 0.7564338235294117
User 111923 improves AUC. Keeping the model.
[2024-12-02 20:11:23.568081] start test user 62571 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:24.246449] start test user 62571 282/568 recall augumented users by random, augumented_users = [65802, 87467, 63998, 59777, 2985, 108851, 99940, 102649, 107294, 125360, 98613, 13482, 1114, 27548, 111985, 105492, 44039, 70905, 58530, 46210, 21133, 9470, 76568, 99868, 13187, 544, 66641, 99017, 24194, 11314, 88786, 56367, 54584, 1465, 118609, 36157, 76742, 125434, 48511, 3303, 112525, 88879, 78510, 1743, 5188, 117353, 68395, 1085, 91880, 105032]
[2024-12-02 20:11:24.263592] user = 62571 Cloud 282/568
[2024-12-02 20:11:24.281285] user = 62571 Local 282/568
[2024-12-02 20:11:24.304354] user = 62571 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:27.440247] user = 62571 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5162162162162163
Training on augumented user 65802 0/50 current_auc = 0.5162162162162163
User 65802 AUC after training: 0.5135135135135135
User 65802 does not improve AUC. Reverting changes.
Training on augumented user 87467 1/50 current_auc = 0.5162162162162163
User 87467 AUC after training: 0.5108108108108108
User 87467 does not improve AUC. Reverting changes.
Training on augumented user 63998 2/50 current_auc = 0.5162162162162163
User 63998 AUC after training: 0.5162162162162163
User 63998 does not improve AUC. Reverting changes.
Training on augumented user 59777 3/50 current_auc = 0.5162162162162163
User 59777 AUC after training: 0.518918918918919
User 59777 improves AUC. Keeping the model.
Training on augumented user 2985 4/50 current_auc = 0.518918918918919
User 2985 AUC after training: 0.518918918918919
User 2985 does not improve AUC. Reverting changes.
Training on augumented user 108851 5/50 current_auc = 0.518918918918919
User 108851 AUC after training: 0.5135135135135135
User 108851 does not improve AUC. Reverting changes.
Training on augumented user 99940 6/50 current_auc = 0.518918918918919
User 99940 AUC after training: 0.5162162162162163
User 99940 does not improve AUC. Reverting changes.
Training on augumented user 102649 7/50 current_auc = 0.518918918918919
User 102649 AUC after training: 0.518918918918919
User 102649 does not improve AUC. Reverting changes.
Training on augumented user 107294 8/50 current_auc = 0.518918918918919
User 107294 AUC after training: 0.5135135135135135
User 107294 does not improve AUC. Reverting changes.
Training on augumented user 125360 9/50 current_auc = 0.518918918918919
User 125360 AUC after training: 0.5162162162162163
User 125360 does not improve AUC. Reverting changes.
Training on augumented user 98613 10/50 current_auc = 0.518918918918919
User 98613 AUC after training: 0.518918918918919
User 98613 does not improve AUC. Reverting changes.
Training on augumented user 13482 11/50 current_auc = 0.518918918918919
User 13482 AUC after training: 0.518918918918919
User 13482 does not improve AUC. Reverting changes.
Training on augumented user 1114 12/50 current_auc = 0.518918918918919
User 1114 AUC after training: 0.518918918918919
User 1114 does not improve AUC. Reverting changes.
Training on augumented user 27548 13/50 current_auc = 0.518918918918919
User 27548 AUC after training: 0.518918918918919
User 27548 does not improve AUC. Reverting changes.
Training on augumented user 111985 14/50 current_auc = 0.518918918918919
User 111985 AUC after training: 0.5162162162162163
User 111985 does not improve AUC. Reverting changes.
Training on augumented user 105492 15/50 current_auc = 0.518918918918919
User 105492 AUC after training: 0.5162162162162163
User 105492 does not improve AUC. Reverting changes.
Training on augumented user 44039 16/50 current_auc = 0.518918918918919
User 44039 AUC after training: 0.518918918918919
User 44039 does not improve AUC. Reverting changes.
Training on augumented user 70905 17/50 current_auc = 0.518918918918919
User 70905 AUC after training: 0.5135135135135136
User 70905 does not improve AUC. Reverting changes.
Training on augumented user 58530 18/50 current_auc = 0.518918918918919
User 58530 AUC after training: 0.5135135135135135
User 58530 does not improve AUC. Reverting changes.
Training on augumented user 46210 19/50 current_auc = 0.518918918918919
User 46210 AUC after training: 0.518918918918919
User 46210 does not improve AUC. Reverting changes.
Training on augumented user 21133 20/50 current_auc = 0.518918918918919
User 21133 AUC after training: 0.5135135135135135
User 21133 does not improve AUC. Reverting changes.
Training on augumented user 9470 21/50 current_auc = 0.518918918918919
User 9470 AUC after training: 0.5135135135135135
User 9470 does not improve AUC. Reverting changes.
Training on augumented user 76568 22/50 current_auc = 0.518918918918919
User 76568 AUC after training: 0.518918918918919
User 76568 does not improve AUC. Reverting changes.
Training on augumented user 99868 23/50 current_auc = 0.518918918918919
User 99868 AUC after training: 0.5162162162162163
User 99868 does not improve AUC. Reverting changes.
Training on augumented user 13187 24/50 current_auc = 0.518918918918919
User 13187 AUC after training: 0.5162162162162163
User 13187 does not improve AUC. Reverting changes.
Training on augumented user 544 25/50 current_auc = 0.518918918918919
User 544 AUC after training: 0.518918918918919
User 544 does not improve AUC. Reverting changes.
Training on augumented user 66641 26/50 current_auc = 0.518918918918919
User 66641 AUC after training: 0.518918918918919
User 66641 does not improve AUC. Reverting changes.
Training on augumented user 99017 27/50 current_auc = 0.518918918918919
User 99017 AUC after training: 0.518918918918919
User 99017 does not improve AUC. Reverting changes.
Training on augumented user 24194 28/50 current_auc = 0.518918918918919
User 24194 AUC after training: 0.5162162162162163
User 24194 does not improve AUC. Reverting changes.
Training on augumented user 11314 29/50 current_auc = 0.518918918918919
User 11314 AUC after training: 0.5108108108108108
User 11314 does not improve AUC. Reverting changes.
Training on augumented user 88786 30/50 current_auc = 0.518918918918919
User 88786 AUC after training: 0.5135135135135135
User 88786 does not improve AUC. Reverting changes.
Training on augumented user 56367 31/50 current_auc = 0.518918918918919
User 56367 AUC after training: 0.5108108108108108
User 56367 does not improve AUC. Reverting changes.
Training on augumented user 54584 32/50 current_auc = 0.518918918918919
User 54584 AUC after training: 0.518918918918919
User 54584 does not improve AUC. Reverting changes.
Training on augumented user 1465 33/50 current_auc = 0.518918918918919
User 1465 AUC after training: 0.518918918918919
User 1465 does not improve AUC. Reverting changes.
Training on augumented user 118609 34/50 current_auc = 0.518918918918919
User 118609 AUC after training: 0.518918918918919
User 118609 does not improve AUC. Reverting changes.
Training on augumented user 36157 35/50 current_auc = 0.518918918918919
User 36157 AUC after training: 0.518918918918919
User 36157 does not improve AUC. Reverting changes.
Training on augumented user 76742 36/50 current_auc = 0.518918918918919
User 76742 AUC after training: 0.5135135135135135
User 76742 does not improve AUC. Reverting changes.
Training on augumented user 125434 37/50 current_auc = 0.518918918918919
User 125434 AUC after training: 0.518918918918919
User 125434 does not improve AUC. Reverting changes.
Training on augumented user 48511 38/50 current_auc = 0.518918918918919
User 48511 AUC after training: 0.518918918918919
User 48511 does not improve AUC. Reverting changes.
Training on augumented user 3303 39/50 current_auc = 0.518918918918919
User 3303 AUC after training: 0.518918918918919
User 3303 does not improve AUC. Reverting changes.
Training on augumented user 112525 40/50 current_auc = 0.518918918918919
User 112525 AUC after training: 0.5135135135135135
User 112525 does not improve AUC. Reverting changes.
Training on augumented user 88879 41/50 current_auc = 0.518918918918919
User 88879 AUC after training: 0.518918918918919
User 88879 does not improve AUC. Reverting changes.
Training on augumented user 78510 42/50 current_auc = 0.518918918918919
User 78510 AUC after training: 0.518918918918919
User 78510 does not improve AUC. Reverting changes.
Training on augumented user 1743 43/50 current_auc = 0.518918918918919
User 1743 AUC after training: 0.5162162162162163
User 1743 does not improve AUC. Reverting changes.
Training on augumented user 5188 44/50 current_auc = 0.518918918918919
User 5188 AUC after training: 0.518918918918919
User 5188 does not improve AUC. Reverting changes.
Training on augumented user 117353 45/50 current_auc = 0.518918918918919
User 117353 AUC after training: 0.518918918918919
User 117353 does not improve AUC. Reverting changes.
Training on augumented user 68395 46/50 current_auc = 0.518918918918919
User 68395 AUC after training: 0.5162162162162163
User 68395 does not improve AUC. Reverting changes.
Training on augumented user 1085 47/50 current_auc = 0.518918918918919
User 1085 AUC after training: 0.5108108108108108
User 1085 does not improve AUC. Reverting changes.
Training on augumented user 91880 48/50 current_auc = 0.518918918918919
User 91880 AUC after training: 0.518918918918919
User 91880 does not improve AUC. Reverting changes.
Training on augumented user 105032 49/50 current_auc = 0.518918918918919
User 105032 AUC after training: 0.518918918918919
User 105032 does not improve AUC. Reverting changes.
[2024-12-02 20:11:56.110057] start test user 62606 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:56.549294] start test user 62606 283/568 recall augumented users by random, augumented_users = [91395, 12756, 60336, 129999, 64905, 6638, 85499, 75862, 23256, 117661, 121399, 137329, 124662, 130059, 108953, 116167, 129822, 93960, 6700, 106689, 136819, 127851, 34651, 49354, 69745, 134664, 66896, 56209, 20248, 44363, 73819, 34835, 28583, 15189, 42342, 94161, 23619, 3191, 79035, 63729, 27164, 92372, 9302, 125234, 138197, 10658, 734, 105117, 100700, 120218]
[2024-12-02 20:11:56.564208] user = 62606 Cloud 283/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:56.573868] user = 62606 Local 283/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:56.605938] user = 62606 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:59.403262] user = 62606 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 91395 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91395 AUC after training: 0.5
User 91395 does not improve AUC. Reverting changes.
Training on augumented user 12756 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12756 AUC after training: 0.5
User 12756 does not improve AUC. Reverting changes.
Training on augumented user 60336 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60336 AUC after training: 0.5
User 60336 does not improve AUC. Reverting changes.
Training on augumented user 129999 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129999 AUC after training: 0.5
User 129999 does not improve AUC. Reverting changes.
Training on augumented user 64905 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64905 AUC after training: 0.5
User 64905 does not improve AUC. Reverting changes.
Training on augumented user 6638 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6638 AUC after training: 0.5
User 6638 does not improve AUC. Reverting changes.
Training on augumented user 85499 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85499 AUC after training: 0.5
User 85499 does not improve AUC. Reverting changes.
Training on augumented user 75862 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75862 AUC after training: 0.5
User 75862 does not improve AUC. Reverting changes.
Training on augumented user 23256 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23256 AUC after training: 0.5
User 23256 does not improve AUC. Reverting changes.
Training on augumented user 117661 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117661 AUC after training: 0.5
User 117661 does not improve AUC. Reverting changes.
Training on augumented user 121399 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121399 AUC after training: 0.5
User 121399 does not improve AUC. Reverting changes.
Training on augumented user 137329 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137329 AUC after training: 0.5
User 137329 does not improve AUC. Reverting changes.
Training on augumented user 124662 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124662 AUC after training: 0.5
User 124662 does not improve AUC. Reverting changes.
Training on augumented user 130059 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130059 AUC after training: 0.5
User 130059 does not improve AUC. Reverting changes.
Training on augumented user 108953 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108953 AUC after training: 0.5
User 108953 does not improve AUC. Reverting changes.
Training on augumented user 116167 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116167 AUC after training: 0.5
User 116167 does not improve AUC. Reverting changes.
Training on augumented user 129822 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129822 AUC after training: 0.5
User 129822 does not improve AUC. Reverting changes.
Training on augumented user 93960 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93960 AUC after training: 0.5
User 93960 does not improve AUC. Reverting changes.
Training on augumented user 6700 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6700 AUC after training: 0.5
User 6700 does not improve AUC. Reverting changes.
Training on augumented user 106689 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106689 AUC after training: 0.5
User 106689 does not improve AUC. Reverting changes.
Training on augumented user 136819 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136819 AUC after training: 0.5
User 136819 does not improve AUC. Reverting changes.
Training on augumented user 127851 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127851 AUC after training: 0.5
User 127851 does not improve AUC. Reverting changes.
Training on augumented user 34651 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34651 AUC after training: 0.5
User 34651 does not improve AUC. Reverting changes.
Training on augumented user 49354 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49354 AUC after training: 0.5
User 49354 does not improve AUC. Reverting changes.
Training on augumented user 69745 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69745 AUC after training: 0.5
User 69745 does not improve AUC. Reverting changes.
Training on augumented user 134664 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134664 AUC after training: 0.5
User 134664 does not improve AUC. Reverting changes.
Training on augumented user 66896 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66896 AUC after training: 0.5
User 66896 does not improve AUC. Reverting changes.
Training on augumented user 56209 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56209 AUC after training: 0.5
User 56209 does not improve AUC. Reverting changes.
Training on augumented user 20248 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20248 AUC after training: 0.5
User 20248 does not improve AUC. Reverting changes.
Training on augumented user 44363 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44363 AUC after training: 0.5
User 44363 does not improve AUC. Reverting changes.
Training on augumented user 73819 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73819 AUC after training: 0.5
User 73819 does not improve AUC. Reverting changes.
Training on augumented user 34835 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34835 AUC after training: 0.5
User 34835 does not improve AUC. Reverting changes.
Training on augumented user 28583 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28583 AUC after training: 0.5
User 28583 does not improve AUC. Reverting changes.
Training on augumented user 15189 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15189 AUC after training: 0.5
User 15189 does not improve AUC. Reverting changes.
Training on augumented user 42342 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42342 AUC after training: 0.5
User 42342 does not improve AUC. Reverting changes.
Training on augumented user 94161 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94161 AUC after training: 0.5
User 94161 does not improve AUC. Reverting changes.
Training on augumented user 23619 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23619 AUC after training: 0.5
User 23619 does not improve AUC. Reverting changes.
Training on augumented user 3191 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3191 AUC after training: 0.5
User 3191 does not improve AUC. Reverting changes.
Training on augumented user 79035 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79035 AUC after training: 0.5
User 79035 does not improve AUC. Reverting changes.
Training on augumented user 63729 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63729 AUC after training: 0.5
User 63729 does not improve AUC. Reverting changes.
Training on augumented user 27164 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27164 AUC after training: 0.5
User 27164 does not improve AUC. Reverting changes.
Training on augumented user 92372 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92372 AUC after training: 0.5
User 92372 does not improve AUC. Reverting changes.
Training on augumented user 9302 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9302 AUC after training: 0.5
User 9302 does not improve AUC. Reverting changes.
Training on augumented user 125234 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125234 AUC after training: 0.5
User 125234 does not improve AUC. Reverting changes.
Training on augumented user 138197 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138197 AUC after training: 0.5
User 138197 does not improve AUC. Reverting changes.
Training on augumented user 10658 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10658 AUC after training: 0.5
User 10658 does not improve AUC. Reverting changes.
Training on augumented user 734 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 734 AUC after training: 0.5
User 734 does not improve AUC. Reverting changes.
Training on augumented user 105117 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105117 AUC after training: 0.5
User 105117 does not improve AUC. Reverting changes.
Training on augumented user 100700 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100700 AUC after training: 0.5
User 100700 does not improve AUC. Reverting changes.
Training on augumented user 120218 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120218 AUC after training: 0.5
User 120218 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:12:31.293763] start test user 62614 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:31.810353] start test user 62614 284/568 recall augumented users by random, augumented_users = [136629, 4670, 101672, 123071, 6964, 24858, 117283, 88379, 85421, 56678, 36620, 127927, 16095, 37658, 57780, 86555, 21919, 47139, 60997, 31778, 75807, 46807, 77588, 120562, 29403, 50767, 41851, 2398, 92532, 86160, 109638, 69002, 11271, 99418, 112771, 10174, 120756, 66696, 41888, 35776, 37746, 18666, 38505, 133181, 46737, 126235, 43835, 31676, 98766, 95161]
[2024-12-02 20:12:31.824979] user = 62614 Cloud 284/568
[2024-12-02 20:12:31.834960] user = 62614 Local 284/568
[2024-12-02 20:12:31.854789] user = 62614 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:34.171168] user = 62614 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7118055555555556
Training on augumented user 136629 0/50 current_auc = 0.7118055555555556
User 136629 AUC after training: 0.7118055555555556
User 136629 does not improve AUC. Reverting changes.
Training on augumented user 4670 1/50 current_auc = 0.7118055555555556
User 4670 AUC after training: 0.7118055555555556
User 4670 does not improve AUC. Reverting changes.
Training on augumented user 101672 2/50 current_auc = 0.7118055555555556
User 101672 AUC after training: 0.7083333333333333
User 101672 does not improve AUC. Reverting changes.
Training on augumented user 123071 3/50 current_auc = 0.7118055555555556
User 123071 AUC after training: 0.7083333333333333
User 123071 does not improve AUC. Reverting changes.
Training on augumented user 6964 4/50 current_auc = 0.7118055555555556
User 6964 AUC after training: 0.7083333333333334
User 6964 does not improve AUC. Reverting changes.
Training on augumented user 24858 5/50 current_auc = 0.7118055555555556
User 24858 AUC after training: 0.7083333333333334
User 24858 does not improve AUC. Reverting changes.
Training on augumented user 117283 6/50 current_auc = 0.7118055555555556
User 117283 AUC after training: 0.7152777777777778
User 117283 improves AUC. Keeping the model.
Training on augumented user 88379 7/50 current_auc = 0.7152777777777778
User 88379 AUC after training: 0.7152777777777778
User 88379 does not improve AUC. Reverting changes.
Training on augumented user 85421 8/50 current_auc = 0.7152777777777778
User 85421 AUC after training: 0.7152777777777778
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 56678 9/50 current_auc = 0.7152777777777778
User 56678 AUC after training: 0.7083333333333333
User 56678 does not improve AUC. Reverting changes.
Training on augumented user 36620 10/50 current_auc = 0.7152777777777778
User 36620 AUC after training: 0.71875
User 36620 improves AUC. Keeping the model.
Training on augumented user 127927 11/50 current_auc = 0.71875
User 127927 AUC after training: 0.7152777777777778
User 127927 does not improve AUC. Reverting changes.
Training on augumented user 16095 12/50 current_auc = 0.71875
User 16095 AUC after training: 0.7222222222222223
User 16095 improves AUC. Keeping the model.
Training on augumented user 37658 13/50 current_auc = 0.7222222222222223
User 37658 AUC after training: 0.71875
User 37658 does not improve AUC. Reverting changes.
Training on augumented user 57780 14/50 current_auc = 0.7222222222222223
User 57780 AUC after training: 0.71875
User 57780 does not improve AUC. Reverting changes.
Training on augumented user 86555 15/50 current_auc = 0.7222222222222223
User 86555 AUC after training: 0.7118055555555556
User 86555 does not improve AUC. Reverting changes.
Training on augumented user 21919 16/50 current_auc = 0.7222222222222223
User 21919 AUC after training: 0.7222222222222223
User 21919 does not improve AUC. Reverting changes.
Training on augumented user 47139 17/50 current_auc = 0.7222222222222223
User 47139 AUC after training: 0.71875
User 47139 does not improve AUC. Reverting changes.
Training on augumented user 60997 18/50 current_auc = 0.7222222222222223
User 60997 AUC after training: 0.7152777777777778
User 60997 does not improve AUC. Reverting changes.
Training on augumented user 31778 19/50 current_auc = 0.7222222222222223
User 31778 AUC after training: 0.71875
User 31778 does not improve AUC. Reverting changes.
Training on augumented user 75807 20/50 current_auc = 0.7222222222222223
User 75807 AUC after training: 0.71875
User 75807 does not improve AUC. Reverting changes.
Training on augumented user 46807 21/50 current_auc = 0.7222222222222223
User 46807 AUC after training: 0.7118055555555556
User 46807 does not improve AUC. Reverting changes.
Training on augumented user 77588 22/50 current_auc = 0.7222222222222223
User 77588 AUC after training: 0.71875
User 77588 does not improve AUC. Reverting changes.
Training on augumented user 120562 23/50 current_auc = 0.7222222222222223
User 120562 AUC after training: 0.71875
User 120562 does not improve AUC. Reverting changes.
Training on augumented user 29403 24/50 current_auc = 0.7222222222222223
User 29403 AUC after training: 0.7222222222222223
User 29403 does not improve AUC. Reverting changes.
Training on augumented user 50767 25/50 current_auc = 0.7222222222222223
User 50767 AUC after training: 0.7083333333333334
User 50767 does not improve AUC. Reverting changes.
Training on augumented user 41851 26/50 current_auc = 0.7222222222222223
User 41851 AUC after training: 0.71875
User 41851 does not improve AUC. Reverting changes.
Training on augumented user 2398 27/50 current_auc = 0.7222222222222223
User 2398 AUC after training: 0.7222222222222223
User 2398 does not improve AUC. Reverting changes.
Training on augumented user 92532 28/50 current_auc = 0.7222222222222223
User 92532 AUC after training: 0.7083333333333334
User 92532 does not improve AUC. Reverting changes.
Training on augumented user 86160 29/50 current_auc = 0.7222222222222223
User 86160 AUC after training: 0.7222222222222223
User 86160 does not improve AUC. Reverting changes.
Training on augumented user 109638 30/50 current_auc = 0.7222222222222223
User 109638 AUC after training: 0.71875
User 109638 does not improve AUC. Reverting changes.
Training on augumented user 69002 31/50 current_auc = 0.7222222222222223
User 69002 AUC after training: 0.71875
User 69002 does not improve AUC. Reverting changes.
Training on augumented user 11271 32/50 current_auc = 0.7222222222222223
User 11271 AUC after training: 0.71875
User 11271 does not improve AUC. Reverting changes.
Training on augumented user 99418 33/50 current_auc = 0.7222222222222223
User 99418 AUC after training: 0.7222222222222223
User 99418 does not improve AUC. Reverting changes.
Training on augumented user 112771 34/50 current_auc = 0.7222222222222223
User 112771 AUC after training: 0.7222222222222223
User 112771 does not improve AUC. Reverting changes.
Training on augumented user 10174 35/50 current_auc = 0.7222222222222223
User 10174 AUC after training: 0.7222222222222223
User 10174 does not improve AUC. Reverting changes.
Training on augumented user 120756 36/50 current_auc = 0.7222222222222223
User 120756 AUC after training: 0.7222222222222223
User 120756 does not improve AUC. Reverting changes.
Training on augumented user 66696 37/50 current_auc = 0.7222222222222223
User 66696 AUC after training: 0.7152777777777778
User 66696 does not improve AUC. Reverting changes.
Training on augumented user 41888 38/50 current_auc = 0.7222222222222223
User 41888 AUC after training: 0.71875
User 41888 does not improve AUC. Reverting changes.
Training on augumented user 35776 39/50 current_auc = 0.7222222222222223
User 35776 AUC after training: 0.71875
User 35776 does not improve AUC. Reverting changes.
Training on augumented user 37746 40/50 current_auc = 0.7222222222222223
User 37746 AUC after training: 0.71875
User 37746 does not improve AUC. Reverting changes.
Training on augumented user 18666 41/50 current_auc = 0.7222222222222223
User 18666 AUC after training: 0.7118055555555556
User 18666 does not improve AUC. Reverting changes.
Training on augumented user 38505 42/50 current_auc = 0.7222222222222223
User 38505 AUC after training: 0.71875
User 38505 does not improve AUC. Reverting changes.
Training on augumented user 133181 43/50 current_auc = 0.7222222222222223
User 133181 AUC after training: 0.71875
User 133181 does not improve AUC. Reverting changes.
Training on augumented user 46737 44/50 current_auc = 0.7222222222222223
User 46737 AUC after training: 0.7118055555555556
User 46737 does not improve AUC. Reverting changes.
Training on augumented user 126235 45/50 current_auc = 0.7222222222222223
User 126235 AUC after training: 0.71875
User 126235 does not improve AUC. Reverting changes.
Training on augumented user 43835 46/50 current_auc = 0.7222222222222223
User 43835 AUC after training: 0.71875
User 43835 does not improve AUC. Reverting changes.
Training on augumented user 31676 47/50 current_auc = 0.7222222222222223
User 31676 AUC after training: 0.71875
User 31676 does not improve AUC. Reverting changes.
Training on augumented user 98766 48/50 current_auc = 0.7222222222222223
User 98766 AUC after training: 0.71875
User 98766 does not improve AUC. Reverting changes.
Training on augumented user 95161 49/50 current_auc = 0.7222222222222223
User 95161 AUC after training: 0.71875
User 95161 does not improve AUC. Reverting changes.
[2024-12-02 20:13:07.460726] start test user 62681 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:08.051713] start test user 62681 285/568 recall augumented users by random, augumented_users = [79566, 21925, 105883, 54334, 72250, 103586, 96885, 55573, 63457, 92236, 74176, 59269, 94517, 108850, 22980, 18324, 59734, 82334, 82664, 105706, 83543, 105171, 48766, 63766, 82867, 76631, 117588, 54970, 100860, 69658, 110631, 45248, 27186, 6232, 66587, 21106, 99629, 106328, 105680, 74423, 47600, 99990, 123143, 111065, 93576, 43455, 800, 4440, 66769, 1284]
[2024-12-02 20:13:08.067869] user = 62681 Cloud 285/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:08.082045] user = 62681 Local 285/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:08.097749] user = 62681 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:10.966569] user = 62681 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 79566 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79566 AUC after training: 0.5
User 79566 does not improve AUC. Reverting changes.
Training on augumented user 21925 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21925 AUC after training: 0.5
User 21925 does not improve AUC. Reverting changes.
Training on augumented user 105883 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105883 AUC after training: 0.5
User 105883 does not improve AUC. Reverting changes.
Training on augumented user 54334 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54334 AUC after training: 0.5
User 54334 does not improve AUC. Reverting changes.
Training on augumented user 72250 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72250 AUC after training: 0.5
User 72250 does not improve AUC. Reverting changes.
Training on augumented user 103586 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103586 AUC after training: 0.5
User 103586 does not improve AUC. Reverting changes.
Training on augumented user 96885 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96885 AUC after training: 0.5
User 96885 does not improve AUC. Reverting changes.
Training on augumented user 55573 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55573 AUC after training: 0.5
User 55573 does not improve AUC. Reverting changes.
Training on augumented user 63457 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63457 AUC after training: 0.5
User 63457 does not improve AUC. Reverting changes.
Training on augumented user 92236 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92236 AUC after training: 0.5
User 92236 does not improve AUC. Reverting changes.
Training on augumented user 74176 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74176 AUC after training: 0.5
User 74176 does not improve AUC. Reverting changes.
Training on augumented user 59269 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59269 AUC after training: 0.5
User 59269 does not improve AUC. Reverting changes.
Training on augumented user 94517 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94517 AUC after training: 0.5
User 94517 does not improve AUC. Reverting changes.
Training on augumented user 108850 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108850 AUC after training: 0.5
User 108850 does not improve AUC. Reverting changes.
Training on augumented user 22980 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22980 AUC after training: 0.5
User 22980 does not improve AUC. Reverting changes.
Training on augumented user 18324 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18324 AUC after training: 0.5
User 18324 does not improve AUC. Reverting changes.
Training on augumented user 59734 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59734 AUC after training: 0.5
User 59734 does not improve AUC. Reverting changes.
Training on augumented user 82334 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82334 AUC after training: 0.5
User 82334 does not improve AUC. Reverting changes.
Training on augumented user 82664 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82664 AUC after training: 0.5
User 82664 does not improve AUC. Reverting changes.
Training on augumented user 105706 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105706 AUC after training: 0.5
User 105706 does not improve AUC. Reverting changes.
Training on augumented user 83543 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83543 AUC after training: 0.5
User 83543 does not improve AUC. Reverting changes.
Training on augumented user 105171 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105171 AUC after training: 0.5
User 105171 does not improve AUC. Reverting changes.
Training on augumented user 48766 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48766 AUC after training: 0.5
User 48766 does not improve AUC. Reverting changes.
Training on augumented user 63766 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63766 AUC after training: 0.5
User 63766 does not improve AUC. Reverting changes.
Training on augumented user 82867 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82867 AUC after training: 0.5
User 82867 does not improve AUC. Reverting changes.
Training on augumented user 76631 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76631 AUC after training: 0.5
User 76631 does not improve AUC. Reverting changes.
Training on augumented user 117588 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117588 AUC after training: 0.5
User 117588 does not improve AUC. Reverting changes.
Training on augumented user 54970 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54970 AUC after training: 0.5
User 54970 does not improve AUC. Reverting changes.
Training on augumented user 100860 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100860 AUC after training: 0.5
User 100860 does not improve AUC. Reverting changes.
Training on augumented user 69658 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69658 AUC after training: 0.5
User 69658 does not improve AUC. Reverting changes.
Training on augumented user 110631 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110631 AUC after training: 0.5
User 110631 does not improve AUC. Reverting changes.
Training on augumented user 45248 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45248 AUC after training: 0.5
User 45248 does not improve AUC. Reverting changes.
Training on augumented user 27186 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27186 AUC after training: 0.5
User 27186 does not improve AUC. Reverting changes.
Training on augumented user 6232 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6232 AUC after training: 0.5
User 6232 does not improve AUC. Reverting changes.
Training on augumented user 66587 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66587 AUC after training: 0.5
User 66587 does not improve AUC. Reverting changes.
Training on augumented user 21106 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21106 AUC after training: 0.5
User 21106 does not improve AUC. Reverting changes.
Training on augumented user 99629 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99629 AUC after training: 0.5
User 99629 does not improve AUC. Reverting changes.
Training on augumented user 106328 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106328 AUC after training: 0.5
User 106328 does not improve AUC. Reverting changes.
Training on augumented user 105680 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105680 AUC after training: 0.5
User 105680 does not improve AUC. Reverting changes.
Training on augumented user 74423 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74423 AUC after training: 0.5
User 74423 does not improve AUC. Reverting changes.
Training on augumented user 47600 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47600 AUC after training: 0.5
User 47600 does not improve AUC. Reverting changes.
Training on augumented user 99990 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99990 AUC after training: 0.5
User 99990 does not improve AUC. Reverting changes.
Training on augumented user 123143 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123143 AUC after training: 0.5
User 123143 does not improve AUC. Reverting changes.
Training on augumented user 111065 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111065 AUC after training: 0.5
User 111065 does not improve AUC. Reverting changes.
Training on augumented user 93576 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93576 AUC after training: 0.5
User 93576 does not improve AUC. Reverting changes.
Training on augumented user 43455 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43455 AUC after training: 0.5
User 43455 does not improve AUC. Reverting changes.
Training on augumented user 800 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 800 AUC after training: 0.5
User 800 does not improve AUC. Reverting changes.
Training on augumented user 4440 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4440 AUC after training: 0.5
User 4440 does not improve AUC. Reverting changes.
Training on augumented user 66769 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66769 AUC after training: 0.5
User 66769 does not improve AUC. Reverting changes.
Training on augumented user 1284 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1284 AUC after training: 0.5
User 1284 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:37.192489] start test user 62693 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:37.620159] start test user 62693 286/568 recall augumented users by random, augumented_users = [131624, 3986, 51368, 69687, 78585, 60911, 33807, 121687, 77296, 59094, 51060, 104068, 20307, 110935, 8697, 68840, 117786, 100847, 138463, 83023, 40767, 51003, 59232, 27284, 23100, 93563, 23960, 106711, 112832, 43184, 24807, 42467, 28375, 120445, 3661, 36820, 100790, 80933, 37068, 56889, 137379, 116177, 98135, 9865, 78375, 135685, 85916, 6846, 60539, 129899]
[2024-12-02 20:13:37.635566] user = 62693 Cloud 286/568
[2024-12-02 20:13:37.646027] user = 62693 Local 286/568
[2024-12-02 20:13:37.711677] user = 62693 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:39.505531] user = 62693 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 131624 0/50 current_auc = 0.6666666666666667
User 131624 AUC after training: 0.6666666666666667
User 131624 does not improve AUC. Reverting changes.
Training on augumented user 3986 1/50 current_auc = 0.6666666666666667
User 3986 AUC after training: 0.6666666666666667
User 3986 does not improve AUC. Reverting changes.
Training on augumented user 51368 2/50 current_auc = 0.6666666666666667
User 51368 AUC after training: 0.6666666666666667
User 51368 does not improve AUC. Reverting changes.
Training on augumented user 69687 3/50 current_auc = 0.6666666666666667
User 69687 AUC after training: 0.6666666666666667
User 69687 does not improve AUC. Reverting changes.
Training on augumented user 78585 4/50 current_auc = 0.6666666666666667
User 78585 AUC after training: 0.6666666666666667
User 78585 does not improve AUC. Reverting changes.
Training on augumented user 60911 5/50 current_auc = 0.6666666666666667
User 60911 AUC after training: 0.6666666666666667
User 60911 does not improve AUC. Reverting changes.
Training on augumented user 33807 6/50 current_auc = 0.6666666666666667
User 33807 AUC after training: 0.6666666666666667
User 33807 does not improve AUC. Reverting changes.
Training on augumented user 121687 7/50 current_auc = 0.6666666666666667
User 121687 AUC after training: 0.6666666666666667
User 121687 does not improve AUC. Reverting changes.
Training on augumented user 77296 8/50 current_auc = 0.6666666666666667
User 77296 AUC after training: 0.6666666666666667
User 77296 does not improve AUC. Reverting changes.
Training on augumented user 59094 9/50 current_auc = 0.6666666666666667
User 59094 AUC after training: 0.6666666666666667
User 59094 does not improve AUC. Reverting changes.
Training on augumented user 51060 10/50 current_auc = 0.6666666666666667
User 51060 AUC after training: 0.6666666666666667
User 51060 does not improve AUC. Reverting changes.
Training on augumented user 104068 11/50 current_auc = 0.6666666666666667
User 104068 AUC after training: 0.6666666666666667
User 104068 does not improve AUC. Reverting changes.
Training on augumented user 20307 12/50 current_auc = 0.6666666666666667
User 20307 AUC after training: 0.6666666666666667
User 20307 does not improve AUC. Reverting changes.
Training on augumented user 110935 13/50 current_auc = 0.6666666666666667
User 110935 AUC after training: 0.6666666666666667
User 110935 does not improve AUC. Reverting changes.
Training on augumented user 8697 14/50 current_auc = 0.6666666666666667
User 8697 AUC after training: 0.6666666666666667
User 8697 does not improve AUC. Reverting changes.
Training on augumented user 68840 15/50 current_auc = 0.6666666666666667
User 68840 AUC after training: 0.6666666666666667
User 68840 does not improve AUC. Reverting changes.
Training on augumented user 117786 16/50 current_auc = 0.6666666666666667
User 117786 AUC after training: 0.6666666666666667
User 117786 does not improve AUC. Reverting changes.
Training on augumented user 100847 17/50 current_auc = 0.6666666666666667
User 100847 AUC after training: 0.6666666666666667
User 100847 does not improve AUC. Reverting changes.
Training on augumented user 138463 18/50 current_auc = 0.6666666666666667
User 138463 AUC after training: 0.6666666666666667
User 138463 does not improve AUC. Reverting changes.
Training on augumented user 83023 19/50 current_auc = 0.6666666666666667
User 83023 AUC after training: 0.6666666666666667
User 83023 does not improve AUC. Reverting changes.
Training on augumented user 40767 20/50 current_auc = 0.6666666666666667
User 40767 AUC after training: 0.6666666666666667
User 40767 does not improve AUC. Reverting changes.
Training on augumented user 51003 21/50 current_auc = 0.6666666666666667
User 51003 AUC after training: 0.6666666666666667
User 51003 does not improve AUC. Reverting changes.
Training on augumented user 59232 22/50 current_auc = 0.6666666666666667
User 59232 AUC after training: 0.6666666666666667
User 59232 does not improve AUC. Reverting changes.
Training on augumented user 27284 23/50 current_auc = 0.6666666666666667
User 27284 AUC after training: 0.6666666666666667
User 27284 does not improve AUC. Reverting changes.
Training on augumented user 23100 24/50 current_auc = 0.6666666666666667
User 23100 AUC after training: 0.6666666666666667
User 23100 does not improve AUC. Reverting changes.
Training on augumented user 93563 25/50 current_auc = 0.6666666666666667
User 93563 AUC after training: 0.6666666666666667
User 93563 does not improve AUC. Reverting changes.
Training on augumented user 23960 26/50 current_auc = 0.6666666666666667
User 23960 AUC after training: 0.6666666666666667
User 23960 does not improve AUC. Reverting changes.
Training on augumented user 106711 27/50 current_auc = 0.6666666666666667
User 106711 AUC after training: 0.6666666666666667
User 106711 does not improve AUC. Reverting changes.
Training on augumented user 112832 28/50 current_auc = 0.6666666666666667
User 112832 AUC after training: 0.6666666666666667
User 112832 does not improve AUC. Reverting changes.
Training on augumented user 43184 29/50 current_auc = 0.6666666666666667
User 43184 AUC after training: 0.6666666666666667
User 43184 does not improve AUC. Reverting changes.
Training on augumented user 24807 30/50 current_auc = 0.6666666666666667
User 24807 AUC after training: 0.6666666666666667
User 24807 does not improve AUC. Reverting changes.
Training on augumented user 42467 31/50 current_auc = 0.6666666666666667
User 42467 AUC after training: 0.6666666666666667
User 42467 does not improve AUC. Reverting changes.
Training on augumented user 28375 32/50 current_auc = 0.6666666666666667
User 28375 AUC after training: 0.6666666666666667
User 28375 does not improve AUC. Reverting changes.
Training on augumented user 120445 33/50 current_auc = 0.6666666666666667
User 120445 AUC after training: 0.6666666666666667
User 120445 does not improve AUC. Reverting changes.
Training on augumented user 3661 34/50 current_auc = 0.6666666666666667
User 3661 AUC after training: 0.6666666666666667
User 3661 does not improve AUC. Reverting changes.
Training on augumented user 36820 35/50 current_auc = 0.6666666666666667
User 36820 AUC after training: 0.6666666666666667
User 36820 does not improve AUC. Reverting changes.
Training on augumented user 100790 36/50 current_auc = 0.6666666666666667
User 100790 AUC after training: 0.6666666666666667
User 100790 does not improve AUC. Reverting changes.
Training on augumented user 80933 37/50 current_auc = 0.6666666666666667
User 80933 AUC after training: 0.6666666666666667
User 80933 does not improve AUC. Reverting changes.
Training on augumented user 37068 38/50 current_auc = 0.6666666666666667
User 37068 AUC after training: 0.6666666666666667
User 37068 does not improve AUC. Reverting changes.
Training on augumented user 56889 39/50 current_auc = 0.6666666666666667
User 56889 AUC after training: 0.6666666666666667
User 56889 does not improve AUC. Reverting changes.
Training on augumented user 137379 40/50 current_auc = 0.6666666666666667
User 137379 AUC after training: 0.6666666666666667
User 137379 does not improve AUC. Reverting changes.
Training on augumented user 116177 41/50 current_auc = 0.6666666666666667
User 116177 AUC after training: 0.6666666666666667
User 116177 does not improve AUC. Reverting changes.
Training on augumented user 98135 42/50 current_auc = 0.6666666666666667
User 98135 AUC after training: 0.6666666666666667
User 98135 does not improve AUC. Reverting changes.
Training on augumented user 9865 43/50 current_auc = 0.6666666666666667
User 9865 AUC after training: 0.6666666666666667
User 9865 does not improve AUC. Reverting changes.
Training on augumented user 78375 44/50 current_auc = 0.6666666666666667
User 78375 AUC after training: 0.6666666666666667
User 78375 does not improve AUC. Reverting changes.
Training on augumented user 135685 45/50 current_auc = 0.6666666666666667
User 135685 AUC after training: 0.6666666666666667
User 135685 does not improve AUC. Reverting changes.
Training on augumented user 85916 46/50 current_auc = 0.6666666666666667
User 85916 AUC after training: 0.6666666666666667
User 85916 does not improve AUC. Reverting changes.
Training on augumented user 6846 47/50 current_auc = 0.6666666666666667
User 6846 AUC after training: 0.6666666666666667
User 6846 does not improve AUC. Reverting changes.
Training on augumented user 60539 48/50 current_auc = 0.6666666666666667
User 60539 AUC after training: 0.6666666666666667
User 60539 does not improve AUC. Reverting changes.
Training on augumented user 129899 49/50 current_auc = 0.6666666666666667
User 129899 AUC after training: 0.6666666666666667
User 129899 does not improve AUC. Reverting changes.
[2024-12-02 20:14:06.327799] start test user 62714 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:06.879451] start test user 62714 287/568 recall augumented users by random, augumented_users = [93079, 34266, 63153, 101844, 8513, 8180, 65583, 45129, 40921, 134147, 9973, 102901, 130028, 99055, 137156, 17062, 18464, 13535, 73512, 120212, 56093, 99072, 32436, 61126, 88023, 26579, 52380, 130536, 84485, 116552, 3003, 134215, 121402, 15153, 104752, 43459, 131989, 80384, 14650, 94042, 118158, 79914, 89108, 106130, 32171, 110368, 56342, 6944, 5794, 87407]
[2024-12-02 20:14:06.894997] user = 62714 Cloud 287/568
[2024-12-02 20:14:06.925940] user = 62714 Local 287/568
[2024-12-02 20:14:07.027828] user = 62714 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:09.086797] user = 62714 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5841423948220065
Training on augumented user 93079 0/50 current_auc = 0.5841423948220065
User 93079 AUC after training: 0.5842831011678626
User 93079 improves AUC. Keeping the model.
Training on augumented user 34266 1/50 current_auc = 0.5842831011678626
User 34266 AUC after training: 0.5830167440551568
User 34266 does not improve AUC. Reverting changes.
Training on augumented user 63153 2/50 current_auc = 0.5842831011678626
User 63153 AUC after training: 0.5842831011678626
User 63153 does not improve AUC. Reverting changes.
Training on augumented user 101844 3/50 current_auc = 0.5842831011678626
User 101844 AUC after training: 0.583860982130294
User 101844 does not improve AUC. Reverting changes.
Training on augumented user 8513 4/50 current_auc = 0.5842831011678626
User 8513 AUC after training: 0.5835795694385817
User 8513 does not improve AUC. Reverting changes.
Training on augumented user 8180 5/50 current_auc = 0.5842831011678626
User 8180 AUC after training: 0.5842831011678626
User 8180 does not improve AUC. Reverting changes.
Training on augumented user 65583 6/50 current_auc = 0.5842831011678626
User 65583 AUC after training: 0.5841423948220065
User 65583 does not improve AUC. Reverting changes.
Training on augumented user 45129 7/50 current_auc = 0.5842831011678626
User 45129 AUC after training: 0.5842831011678626
User 45129 does not improve AUC. Reverting changes.
Training on augumented user 40921 8/50 current_auc = 0.5842831011678626
User 40921 AUC after training: 0.5841423948220064
User 40921 does not improve AUC. Reverting changes.
Training on augumented user 134147 9/50 current_auc = 0.5842831011678626
User 134147 AUC after training: 0.5835795694385817
User 134147 does not improve AUC. Reverting changes.
Training on augumented user 9973 10/50 current_auc = 0.5842831011678626
User 9973 AUC after training: 0.5840016884761503
User 9973 does not improve AUC. Reverting changes.
Training on augumented user 102901 11/50 current_auc = 0.5842831011678626
User 102901 AUC after training: 0.5845645138595751
User 102901 improves AUC. Keeping the model.
Training on augumented user 130028 12/50 current_auc = 0.5845645138595751
User 130028 AUC after training: 0.5831574504010131
User 130028 does not improve AUC. Reverting changes.
Training on augumented user 99055 13/50 current_auc = 0.5845645138595751
User 99055 AUC after training: 0.5840016884761503
User 99055 does not improve AUC. Reverting changes.
Training on augumented user 137156 14/50 current_auc = 0.5845645138595751
User 137156 AUC after training: 0.5841423948220065
User 137156 does not improve AUC. Reverting changes.
Training on augumented user 17062 15/50 current_auc = 0.5845645138595751
User 17062 AUC after training: 0.5837202757844379
User 17062 does not improve AUC. Reverting changes.
Training on augumented user 18464 16/50 current_auc = 0.5845645138595751
User 18464 AUC after training: 0.583860982130294
User 18464 does not improve AUC. Reverting changes.
Training on augumented user 13535 17/50 current_auc = 0.5845645138595751
User 13535 AUC after training: 0.5842831011678626
User 13535 does not improve AUC. Reverting changes.
Training on augumented user 73512 18/50 current_auc = 0.5845645138595751
User 73512 AUC after training: 0.5830167440551568
User 73512 does not improve AUC. Reverting changes.
Training on augumented user 120212 19/50 current_auc = 0.5845645138595751
User 120212 AUC after training: 0.5842831011678626
User 120212 does not improve AUC. Reverting changes.
Training on augumented user 56093 20/50 current_auc = 0.5845645138595751
User 56093 AUC after training: 0.5841423948220065
User 56093 does not improve AUC. Reverting changes.
Training on augumented user 99072 21/50 current_auc = 0.5845645138595751
User 99072 AUC after training: 0.5835795694385817
User 99072 does not improve AUC. Reverting changes.
Training on augumented user 32436 22/50 current_auc = 0.5845645138595751
User 32436 AUC after training: 0.5841423948220065
User 32436 does not improve AUC. Reverting changes.
Training on augumented user 61126 23/50 current_auc = 0.5845645138595751
User 61126 AUC after training: 0.5842831011678626
User 61126 does not improve AUC. Reverting changes.
Training on augumented user 88023 24/50 current_auc = 0.5845645138595751
User 88023 AUC after training: 0.5832981567468694
User 88023 does not improve AUC. Reverting changes.
Training on augumented user 26579 25/50 current_auc = 0.5845645138595751
User 26579 AUC after training: 0.5837202757844379
User 26579 does not improve AUC. Reverting changes.
Training on augumented user 52380 26/50 current_auc = 0.5845645138595751
User 52380 AUC after training: 0.5842831011678626
User 52380 does not improve AUC. Reverting changes.
Training on augumented user 130536 27/50 current_auc = 0.5845645138595751
User 130536 AUC after training: 0.583860982130294
User 130536 does not improve AUC. Reverting changes.
Training on augumented user 84485 28/50 current_auc = 0.5845645138595751
User 84485 AUC after training: 0.5832981567468694
User 84485 does not improve AUC. Reverting changes.
Training on augumented user 116552 29/50 current_auc = 0.5845645138595751
User 116552 AUC after training: 0.5842831011678626
User 116552 does not improve AUC. Reverting changes.
Training on augumented user 3003 30/50 current_auc = 0.5845645138595751
User 3003 AUC after training: 0.5841423948220065
User 3003 does not improve AUC. Reverting changes.
Training on augumented user 134215 31/50 current_auc = 0.5845645138595751
User 134215 AUC after training: 0.5841423948220065
User 134215 does not improve AUC. Reverting changes.
Training on augumented user 121402 32/50 current_auc = 0.5845645138595751
User 121402 AUC after training: 0.5845645138595751
User 121402 does not improve AUC. Reverting changes.
Training on augumented user 15153 33/50 current_auc = 0.5845645138595751
User 15153 AUC after training: 0.5841423948220064
User 15153 does not improve AUC. Reverting changes.
Training on augumented user 104752 34/50 current_auc = 0.5845645138595751
User 104752 AUC after training: 0.5840016884761503
User 104752 does not improve AUC. Reverting changes.
Training on augumented user 43459 35/50 current_auc = 0.5845645138595751
User 43459 AUC after training: 0.5831574504010131
User 43459 does not improve AUC. Reverting changes.
Training on augumented user 131989 36/50 current_auc = 0.5845645138595751
User 131989 AUC after training: 0.5834388630927254
User 131989 does not improve AUC. Reverting changes.
Training on augumented user 80384 37/50 current_auc = 0.5845645138595751
User 80384 AUC after training: 0.583860982130294
User 80384 does not improve AUC. Reverting changes.
Training on augumented user 14650 38/50 current_auc = 0.5845645138595751
User 14650 AUC after training: 0.5847052202054313
User 14650 improves AUC. Keeping the model.
Training on augumented user 94042 39/50 current_auc = 0.5847052202054313
User 94042 AUC after training: 0.5849162797242156
User 94042 improves AUC. Keeping the model.
Training on augumented user 118158 40/50 current_auc = 0.5849162797242156
User 118158 AUC after training: 0.58660475587449
User 118158 improves AUC. Keeping the model.
Training on augumented user 79914 41/50 current_auc = 0.58660475587449
User 79914 AUC after training: 0.5864640495286337
User 79914 does not improve AUC. Reverting changes.
Training on augumented user 89108 42/50 current_auc = 0.58660475587449
User 89108 AUC after training: 0.5854087519347122
User 89108 does not improve AUC. Reverting changes.
Training on augumented user 106130 43/50 current_auc = 0.58660475587449
User 106130 AUC after training: 0.5857605177993528
User 106130 does not improve AUC. Reverting changes.
Training on augumented user 32171 44/50 current_auc = 0.58660475587449
User 32171 AUC after training: 0.5859012241452088
User 32171 does not improve AUC. Reverting changes.
Training on augumented user 110368 45/50 current_auc = 0.58660475587449
User 110368 AUC after training: 0.5857605177993527
User 110368 does not improve AUC. Reverting changes.
Training on augumented user 56342 46/50 current_auc = 0.58660475587449
User 56342 AUC after training: 0.5839313353032222
User 56342 does not improve AUC. Reverting changes.
Training on augumented user 6944 47/50 current_auc = 0.58660475587449
User 6944 AUC after training: 0.5854791051076403
User 6944 does not improve AUC. Reverting changes.
Training on augumented user 5794 48/50 current_auc = 0.58660475587449
User 5794 AUC after training: 0.5863936963557057
User 5794 does not improve AUC. Reverting changes.
Training on augumented user 87407 49/50 current_auc = 0.58660475587449
User 87407 AUC after training: 0.5861826368369214
User 87407 does not improve AUC. Reverting changes.
[2024-12-02 20:14:40.026877] start test user 62719 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:40.716082] start test user 62719 288/568 recall augumented users by random, augumented_users = [11054, 78904, 58889, 82194, 96529, 84722, 53128, 571, 123019, 85209, 117772, 66861, 111384, 47643, 94338, 57922, 18291, 48065, 94793, 81221, 16040, 85822, 47112, 138420, 68308, 7292, 87422, 136141, 89278, 63016, 85536, 77821, 45730, 60734, 123919, 96698, 11641, 135790, 49784, 82234, 30311, 60199, 34979, 65845, 115583, 110836, 102489, 18376, 74542, 80405]
[2024-12-02 20:14:40.731786] user = 62719 Cloud 288/568
[2024-12-02 20:14:40.745836] user = 62719 Local 288/568
[2024-12-02 20:14:40.795375] user = 62719 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:43.431094] user = 62719 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7270114942528736
Training on augumented user 11054 0/50 current_auc = 0.7270114942528736
User 11054 AUC after training: 0.7270114942528736
User 11054 does not improve AUC. Reverting changes.
Training on augumented user 78904 1/50 current_auc = 0.7270114942528736
User 78904 AUC after training: 0.7265325670498084
User 78904 does not improve AUC. Reverting changes.
Training on augumented user 58889 2/50 current_auc = 0.7270114942528736
User 58889 AUC after training: 0.7279693486590039
User 58889 improves AUC. Keeping the model.
Training on augumented user 82194 3/50 current_auc = 0.7279693486590039
User 82194 AUC after training: 0.7289272030651341
User 82194 improves AUC. Keeping the model.
Training on augumented user 96529 4/50 current_auc = 0.7289272030651341
User 96529 AUC after training: 0.7279693486590039
User 96529 does not improve AUC. Reverting changes.
Training on augumented user 84722 5/50 current_auc = 0.7289272030651341
User 84722 AUC after training: 0.7289272030651341
User 84722 does not improve AUC. Reverting changes.
Training on augumented user 53128 6/50 current_auc = 0.7289272030651341
User 53128 AUC after training: 0.7289272030651341
User 53128 does not improve AUC. Reverting changes.
Training on augumented user 571 7/50 current_auc = 0.7289272030651341
User 571 AUC after training: 0.7279693486590039
User 571 does not improve AUC. Reverting changes.
Training on augumented user 123019 8/50 current_auc = 0.7289272030651341
User 123019 AUC after training: 0.7241379310344828
User 123019 does not improve AUC. Reverting changes.
Training on augumented user 85209 9/50 current_auc = 0.7289272030651341
User 85209 AUC after training: 0.7298850574712643
User 85209 improves AUC. Keeping the model.
Training on augumented user 117772 10/50 current_auc = 0.7298850574712643
User 117772 AUC after training: 0.7298850574712643
User 117772 does not improve AUC. Reverting changes.
Training on augumented user 66861 11/50 current_auc = 0.7298850574712643
User 66861 AUC after training: 0.7279693486590038
User 66861 does not improve AUC. Reverting changes.
Training on augumented user 111384 12/50 current_auc = 0.7298850574712643
User 111384 AUC after training: 0.7308429118773947
User 111384 improves AUC. Keeping the model.
Training on augumented user 47643 13/50 current_auc = 0.7308429118773947
User 47643 AUC after training: 0.7270114942528736
User 47643 does not improve AUC. Reverting changes.
Training on augumented user 94338 14/50 current_auc = 0.7308429118773947
User 94338 AUC after training: 0.7308429118773947
User 94338 does not improve AUC. Reverting changes.
Training on augumented user 57922 15/50 current_auc = 0.7308429118773947
User 57922 AUC after training: 0.7279693486590039
User 57922 does not improve AUC. Reverting changes.
Training on augumented user 18291 16/50 current_auc = 0.7308429118773947
User 18291 AUC after training: 0.7308429118773947
User 18291 does not improve AUC. Reverting changes.
Training on augumented user 48065 17/50 current_auc = 0.7308429118773947
User 48065 AUC after training: 0.7289272030651341
User 48065 does not improve AUC. Reverting changes.
Training on augumented user 94793 18/50 current_auc = 0.7308429118773947
User 94793 AUC after training: 0.7289272030651341
User 94793 does not improve AUC. Reverting changes.
Training on augumented user 81221 19/50 current_auc = 0.7308429118773947
User 81221 AUC after training: 0.7289272030651341
User 81221 does not improve AUC. Reverting changes.
Training on augumented user 16040 20/50 current_auc = 0.7308429118773947
User 16040 AUC after training: 0.724616858237548
User 16040 does not improve AUC. Reverting changes.
Training on augumented user 85822 21/50 current_auc = 0.7308429118773947
User 85822 AUC after training: 0.7274904214559387
User 85822 does not improve AUC. Reverting changes.
Training on augumented user 47112 22/50 current_auc = 0.7308429118773947
User 47112 AUC after training: 0.7289272030651341
User 47112 does not improve AUC. Reverting changes.
Training on augumented user 138420 23/50 current_auc = 0.7308429118773947
User 138420 AUC after training: 0.7289272030651341
User 138420 does not improve AUC. Reverting changes.
Training on augumented user 68308 24/50 current_auc = 0.7308429118773947
User 68308 AUC after training: 0.7289272030651341
User 68308 does not improve AUC. Reverting changes.
Training on augumented user 7292 25/50 current_auc = 0.7308429118773947
User 7292 AUC after training: 0.7298850574712643
User 7292 does not improve AUC. Reverting changes.
Training on augumented user 87422 26/50 current_auc = 0.7308429118773947
User 87422 AUC after training: 0.7289272030651341
User 87422 does not improve AUC. Reverting changes.
Training on augumented user 136141 27/50 current_auc = 0.7308429118773947
User 136141 AUC after training: 0.7303639846743295
User 136141 does not improve AUC. Reverting changes.
Training on augumented user 89278 28/50 current_auc = 0.7308429118773947
User 89278 AUC after training: 0.7279693486590039
User 89278 does not improve AUC. Reverting changes.
Training on augumented user 63016 29/50 current_auc = 0.7308429118773947
User 63016 AUC after training: 0.7298850574712644
User 63016 does not improve AUC. Reverting changes.
Training on augumented user 85536 30/50 current_auc = 0.7308429118773947
User 85536 AUC after training: 0.7279693486590038
User 85536 does not improve AUC. Reverting changes.
Training on augumented user 77821 31/50 current_auc = 0.7308429118773947
User 77821 AUC after training: 0.7308429118773947
User 77821 does not improve AUC. Reverting changes.
Training on augumented user 45730 32/50 current_auc = 0.7308429118773947
User 45730 AUC after training: 0.7265325670498084
User 45730 does not improve AUC. Reverting changes.
Training on augumented user 60734 33/50 current_auc = 0.7308429118773947
User 60734 AUC after training: 0.7279693486590038
User 60734 does not improve AUC. Reverting changes.
Training on augumented user 123919 34/50 current_auc = 0.7308429118773947
User 123919 AUC after training: 0.7270114942528736
User 123919 does not improve AUC. Reverting changes.
Training on augumented user 96698 35/50 current_auc = 0.7308429118773947
User 96698 AUC after training: 0.7265325670498084
User 96698 does not improve AUC. Reverting changes.
Training on augumented user 11641 36/50 current_auc = 0.7308429118773947
User 11641 AUC after training: 0.7298850574712644
User 11641 does not improve AUC. Reverting changes.
Training on augumented user 135790 37/50 current_auc = 0.7308429118773947
User 135790 AUC after training: 0.7274904214559387
User 135790 does not improve AUC. Reverting changes.
Training on augumented user 49784 38/50 current_auc = 0.7308429118773947
User 49784 AUC after training: 0.7260536398467432
User 49784 does not improve AUC. Reverting changes.
Training on augumented user 82234 39/50 current_auc = 0.7308429118773947
User 82234 AUC after training: 0.7279693486590039
User 82234 does not improve AUC. Reverting changes.
Training on augumented user 30311 40/50 current_auc = 0.7308429118773947
User 30311 AUC after training: 0.7270114942528736
User 30311 does not improve AUC. Reverting changes.
Training on augumented user 60199 41/50 current_auc = 0.7308429118773947
User 60199 AUC after training: 0.7308429118773947
User 60199 does not improve AUC. Reverting changes.
Training on augumented user 34979 42/50 current_auc = 0.7308429118773947
User 34979 AUC after training: 0.7270114942528736
User 34979 does not improve AUC. Reverting changes.
Training on augumented user 65845 43/50 current_auc = 0.7308429118773947
User 65845 AUC after training: 0.7298850574712644
User 65845 does not improve AUC. Reverting changes.
Training on augumented user 115583 44/50 current_auc = 0.7308429118773947
User 115583 AUC after training: 0.7289272030651341
User 115583 does not improve AUC. Reverting changes.
Training on augumented user 110836 45/50 current_auc = 0.7308429118773947
User 110836 AUC after training: 0.7236590038314177
User 110836 does not improve AUC. Reverting changes.
Training on augumented user 102489 46/50 current_auc = 0.7308429118773947
User 102489 AUC after training: 0.7298850574712644
User 102489 does not improve AUC. Reverting changes.
Training on augumented user 18376 47/50 current_auc = 0.7308429118773947
User 18376 AUC after training: 0.7274904214559387
User 18376 does not improve AUC. Reverting changes.
Training on augumented user 74542 48/50 current_auc = 0.7308429118773947
User 74542 AUC after training: 0.7255747126436781
User 74542 does not improve AUC. Reverting changes.
Training on augumented user 80405 49/50 current_auc = 0.7308429118773947
User 80405 AUC after training: 0.7298850574712644
User 80405 does not improve AUC. Reverting changes.
[2024-12-02 20:15:11.201456] start test user 62734 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:11.655963] start test user 62734 289/568 recall augumented users by random, augumented_users = [13969, 2172, 72667, 12543, 97394, 42646, 138411, 7659, 32120, 102595, 52742, 64208, 137107, 51354, 5508, 130036, 73542, 36708, 28103, 93261, 60744, 105393, 9548, 56578, 20863, 120550, 18731, 22084, 121048, 126631, 107421, 113015, 131079, 126010, 96953, 41785, 111364, 91921, 106060, 102713, 117118, 112596, 106588, 7688, 62224, 87427, 3906, 24082, 52865, 87482]
[2024-12-02 20:15:11.670948] user = 62734 Cloud 289/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:11.684857] user = 62734 Local 289/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:11.724380] user = 62734 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:13.911556] user = 62734 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 13969 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13969 AUC after training: 0.5
User 13969 does not improve AUC. Reverting changes.
Training on augumented user 2172 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2172 AUC after training: 0.5
User 2172 does not improve AUC. Reverting changes.
Training on augumented user 72667 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72667 AUC after training: 0.5
User 72667 does not improve AUC. Reverting changes.
Training on augumented user 12543 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12543 AUC after training: 0.5
User 12543 does not improve AUC. Reverting changes.
Training on augumented user 97394 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97394 AUC after training: 0.5
User 97394 does not improve AUC. Reverting changes.
Training on augumented user 42646 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42646 AUC after training: 0.5
User 42646 does not improve AUC. Reverting changes.
Training on augumented user 138411 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138411 AUC after training: 0.5
User 138411 does not improve AUC. Reverting changes.
Training on augumented user 7659 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7659 AUC after training: 0.5
User 7659 does not improve AUC. Reverting changes.
Training on augumented user 32120 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32120 AUC after training: 0.5
User 32120 does not improve AUC. Reverting changes.
Training on augumented user 102595 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102595 AUC after training: 0.5
User 102595 does not improve AUC. Reverting changes.
Training on augumented user 52742 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52742 AUC after training: 0.5
User 52742 does not improve AUC. Reverting changes.
Training on augumented user 64208 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64208 AUC after training: 0.5
User 64208 does not improve AUC. Reverting changes.
Training on augumented user 137107 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137107 AUC after training: 0.5
User 137107 does not improve AUC. Reverting changes.
Training on augumented user 51354 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51354 AUC after training: 0.5
User 51354 does not improve AUC. Reverting changes.
Training on augumented user 5508 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5508 AUC after training: 0.5
User 5508 does not improve AUC. Reverting changes.
Training on augumented user 130036 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130036 AUC after training: 0.5
User 130036 does not improve AUC. Reverting changes.
Training on augumented user 73542 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73542 AUC after training: 0.5
User 73542 does not improve AUC. Reverting changes.
Training on augumented user 36708 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36708 AUC after training: 0.5
User 36708 does not improve AUC. Reverting changes.
Training on augumented user 28103 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28103 AUC after training: 0.5
User 28103 does not improve AUC. Reverting changes.
Training on augumented user 93261 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93261 AUC after training: 0.5
User 93261 does not improve AUC. Reverting changes.
Training on augumented user 60744 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60744 AUC after training: 0.5
User 60744 does not improve AUC. Reverting changes.
Training on augumented user 105393 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105393 AUC after training: 0.5
User 105393 does not improve AUC. Reverting changes.
Training on augumented user 9548 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9548 AUC after training: 0.5
User 9548 does not improve AUC. Reverting changes.
Training on augumented user 56578 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56578 AUC after training: 0.5
User 56578 does not improve AUC. Reverting changes.
Training on augumented user 20863 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20863 AUC after training: 0.5
User 20863 does not improve AUC. Reverting changes.
Training on augumented user 120550 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120550 AUC after training: 0.5
User 120550 does not improve AUC. Reverting changes.
Training on augumented user 18731 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18731 AUC after training: 0.5
User 18731 does not improve AUC. Reverting changes.
Training on augumented user 22084 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22084 AUC after training: 0.5
User 22084 does not improve AUC. Reverting changes.
Training on augumented user 121048 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121048 AUC after training: 0.5
User 121048 does not improve AUC. Reverting changes.
Training on augumented user 126631 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126631 AUC after training: 0.5
User 126631 does not improve AUC. Reverting changes.
Training on augumented user 107421 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107421 AUC after training: 0.5
User 107421 does not improve AUC. Reverting changes.
Training on augumented user 113015 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113015 AUC after training: 0.5
User 113015 does not improve AUC. Reverting changes.
Training on augumented user 131079 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131079 AUC after training: 0.5
User 131079 does not improve AUC. Reverting changes.
Training on augumented user 126010 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126010 AUC after training: 0.5
User 126010 does not improve AUC. Reverting changes.
Training on augumented user 96953 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96953 AUC after training: 0.5
User 96953 does not improve AUC. Reverting changes.
Training on augumented user 41785 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41785 AUC after training: 0.5
User 41785 does not improve AUC. Reverting changes.
Training on augumented user 111364 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111364 AUC after training: 0.5
User 111364 does not improve AUC. Reverting changes.
Training on augumented user 91921 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91921 AUC after training: 0.5
User 91921 does not improve AUC. Reverting changes.
Training on augumented user 106060 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106060 AUC after training: 0.5
User 106060 does not improve AUC. Reverting changes.
Training on augumented user 102713 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102713 AUC after training: 0.5
User 102713 does not improve AUC. Reverting changes.
Training on augumented user 117118 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117118 AUC after training: 0.5
User 117118 does not improve AUC. Reverting changes.
Training on augumented user 112596 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112596 AUC after training: 0.5
User 112596 does not improve AUC. Reverting changes.
Training on augumented user 106588 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106588 AUC after training: 0.5
User 106588 does not improve AUC. Reverting changes.
Training on augumented user 7688 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7688 AUC after training: 0.5
User 7688 does not improve AUC. Reverting changes.
Training on augumented user 62224 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62224 AUC after training: 0.5
User 62224 does not improve AUC. Reverting changes.
Training on augumented user 87427 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87427 AUC after training: 0.5
User 87427 does not improve AUC. Reverting changes.
Training on augumented user 3906 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3906 AUC after training: 0.5
User 3906 does not improve AUC. Reverting changes.
Training on augumented user 24082 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24082 AUC after training: 0.5
User 24082 does not improve AUC. Reverting changes.
Training on augumented user 52865 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52865 AUC after training: 0.5
User 52865 does not improve AUC. Reverting changes.
Training on augumented user 87482 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87482 AUC after training: 0.5
User 87482 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:38.599612] start test user 62755 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:39.013315] start test user 62755 290/568 recall augumented users by random, augumented_users = [33372, 82035, 72129, 11997, 126162, 71224, 70959, 80405, 22915, 10951, 28023, 54879, 131954, 108167, 35295, 40678, 25708, 10070, 116495, 74709, 15277, 17418, 23565, 32108, 92742, 111051, 15709, 18284, 92927, 41573, 63996, 116690, 138259, 132331, 70200, 89332, 16124, 18172, 102883, 124089, 10740, 122314, 61597, 3128, 61587, 129350, 84535, 66096, 73832, 87286]
[2024-12-02 20:15:39.026907] user = 62755 Cloud 290/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:39.031983] user = 62755 Local 290/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:39.079043] user = 62755 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:40.646106] user = 62755 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 33372 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33372 AUC after training: 0.5
User 33372 does not improve AUC. Reverting changes.
Training on augumented user 82035 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82035 AUC after training: 0.5
User 82035 does not improve AUC. Reverting changes.
Training on augumented user 72129 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72129 AUC after training: 0.5
User 72129 does not improve AUC. Reverting changes.
Training on augumented user 11997 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11997 AUC after training: 0.5
User 11997 does not improve AUC. Reverting changes.
Training on augumented user 126162 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126162 AUC after training: 0.5
User 126162 does not improve AUC. Reverting changes.
Training on augumented user 71224 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71224 AUC after training: 0.5
User 71224 does not improve AUC. Reverting changes.
Training on augumented user 70959 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70959 AUC after training: 0.5
User 70959 does not improve AUC. Reverting changes.
Training on augumented user 80405 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80405 AUC after training: 0.5
User 80405 does not improve AUC. Reverting changes.
Training on augumented user 22915 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22915 AUC after training: 0.5
User 22915 does not improve AUC. Reverting changes.
Training on augumented user 10951 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10951 AUC after training: 0.5
User 10951 does not improve AUC. Reverting changes.
Training on augumented user 28023 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28023 AUC after training: 0.5
User 28023 does not improve AUC. Reverting changes.
Training on augumented user 54879 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54879 AUC after training: 0.5
User 54879 does not improve AUC. Reverting changes.
Training on augumented user 131954 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131954 AUC after training: 0.5
User 131954 does not improve AUC. Reverting changes.
Training on augumented user 108167 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108167 AUC after training: 0.5
User 108167 does not improve AUC. Reverting changes.
Training on augumented user 35295 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35295 AUC after training: 0.5
User 35295 does not improve AUC. Reverting changes.
Training on augumented user 40678 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40678 AUC after training: 0.5
User 40678 does not improve AUC. Reverting changes.
Training on augumented user 25708 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25708 AUC after training: 0.5
User 25708 does not improve AUC. Reverting changes.
Training on augumented user 10070 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10070 AUC after training: 0.5
User 10070 does not improve AUC. Reverting changes.
Training on augumented user 116495 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116495 AUC after training: 0.5
User 116495 does not improve AUC. Reverting changes.
Training on augumented user 74709 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74709 AUC after training: 0.5
User 74709 does not improve AUC. Reverting changes.
Training on augumented user 15277 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15277 AUC after training: 0.5
User 15277 does not improve AUC. Reverting changes.
Training on augumented user 17418 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17418 AUC after training: 0.5
User 17418 does not improve AUC. Reverting changes.
Training on augumented user 23565 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23565 AUC after training: 0.5
User 23565 does not improve AUC. Reverting changes.
Training on augumented user 32108 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32108 AUC after training: 0.5
User 32108 does not improve AUC. Reverting changes.
Training on augumented user 92742 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92742 AUC after training: 0.5
User 92742 does not improve AUC. Reverting changes.
Training on augumented user 111051 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111051 AUC after training: 0.5
User 111051 does not improve AUC. Reverting changes.
Training on augumented user 15709 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15709 AUC after training: 0.5
User 15709 does not improve AUC. Reverting changes.
Training on augumented user 18284 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18284 AUC after training: 0.5
User 18284 does not improve AUC. Reverting changes.
Training on augumented user 92927 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92927 AUC after training: 0.5
User 92927 does not improve AUC. Reverting changes.
Training on augumented user 41573 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41573 AUC after training: 0.5
User 41573 does not improve AUC. Reverting changes.
Training on augumented user 63996 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63996 AUC after training: 0.5
User 63996 does not improve AUC. Reverting changes.
Training on augumented user 116690 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116690 AUC after training: 0.5
User 116690 does not improve AUC. Reverting changes.
Training on augumented user 138259 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138259 AUC after training: 0.5
User 138259 does not improve AUC. Reverting changes.
Training on augumented user 132331 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132331 AUC after training: 0.5
User 132331 does not improve AUC. Reverting changes.
Training on augumented user 70200 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70200 AUC after training: 0.5
User 70200 does not improve AUC. Reverting changes.
Training on augumented user 89332 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89332 AUC after training: 0.5
User 89332 does not improve AUC. Reverting changes.
Training on augumented user 16124 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16124 AUC after training: 0.5
User 16124 does not improve AUC. Reverting changes.
Training on augumented user 18172 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18172 AUC after training: 0.5
User 18172 does not improve AUC. Reverting changes.
Training on augumented user 102883 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102883 AUC after training: 0.5
User 102883 does not improve AUC. Reverting changes.
Training on augumented user 124089 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124089 AUC after training: 0.5
User 124089 does not improve AUC. Reverting changes.
Training on augumented user 10740 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10740 AUC after training: 0.5
User 10740 does not improve AUC. Reverting changes.
Training on augumented user 122314 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122314 AUC after training: 0.5
User 122314 does not improve AUC. Reverting changes.
Training on augumented user 61597 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61597 AUC after training: 0.5
User 61597 does not improve AUC. Reverting changes.
Training on augumented user 3128 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3128 AUC after training: 0.5
User 3128 does not improve AUC. Reverting changes.
Training on augumented user 61587 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61587 AUC after training: 0.5
User 61587 does not improve AUC. Reverting changes.
Training on augumented user 129350 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129350 AUC after training: 0.5
User 129350 does not improve AUC. Reverting changes.
Training on augumented user 84535 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84535 AUC after training: 0.5
User 84535 does not improve AUC. Reverting changes.
Training on augumented user 66096 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66096 AUC after training: 0.5
User 66096 does not improve AUC. Reverting changes.
Training on augumented user 73832 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73832 AUC after training: 0.5
User 73832 does not improve AUC. Reverting changes.
Training on augumented user 87286 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87286 AUC after training: 0.5
User 87286 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:06.547604] start test user 62756 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:06.963956] start test user 62756 291/568 recall augumented users by random, augumented_users = [45589, 127095, 36309, 25490, 11261, 133344, 57804, 31019, 132326, 51586, 39107, 96172, 137833, 89762, 36967, 37919, 118296, 12329, 87785, 117363, 110587, 134192, 104090, 132143, 21434, 68395, 94055, 28497, 136345, 129091, 71431, 85615, 38078, 71252, 16348, 138423, 106975, 27786, 135494, 63139, 83730, 58213, 86362, 56427, 72703, 37260, 109994, 17413, 10863, 12131]
[2024-12-02 20:16:06.978695] user = 62756 Cloud 291/568
[2024-12-02 20:16:06.996168] user = 62756 Local 291/568
[2024-12-02 20:16:07.022226] user = 62756 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:10.436020] user = 62756 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6480113636363636
Training on augumented user 45589 0/50 current_auc = 0.6480113636363636
User 45589 AUC after training: 0.6488636363636364
User 45589 improves AUC. Keeping the model.
Training on augumented user 127095 1/50 current_auc = 0.6488636363636364
User 127095 AUC after training: 0.6485795454545455
User 127095 does not improve AUC. Reverting changes.
Training on augumented user 36309 2/50 current_auc = 0.6488636363636364
User 36309 AUC after training: 0.6488636363636364
User 36309 does not improve AUC. Reverting changes.
Training on augumented user 25490 3/50 current_auc = 0.6488636363636364
User 25490 AUC after training: 0.6488636363636363
User 25490 does not improve AUC. Reverting changes.
Training on augumented user 11261 4/50 current_auc = 0.6488636363636364
User 11261 AUC after training: 0.6480113636363636
User 11261 does not improve AUC. Reverting changes.
Training on augumented user 133344 5/50 current_auc = 0.6488636363636364
User 133344 AUC after training: 0.6488636363636364
User 133344 does not improve AUC. Reverting changes.
Training on augumented user 57804 6/50 current_auc = 0.6488636363636364
User 57804 AUC after training: 0.6477272727272727
User 57804 does not improve AUC. Reverting changes.
Training on augumented user 31019 7/50 current_auc = 0.6488636363636364
User 31019 AUC after training: 0.6482954545454546
User 31019 does not improve AUC. Reverting changes.
Training on augumented user 132326 8/50 current_auc = 0.6488636363636364
User 132326 AUC after training: 0.6482954545454546
User 132326 does not improve AUC. Reverting changes.
Training on augumented user 51586 9/50 current_auc = 0.6488636363636364
User 51586 AUC after training: 0.6480113636363636
User 51586 does not improve AUC. Reverting changes.
Training on augumented user 39107 10/50 current_auc = 0.6488636363636364
User 39107 AUC after training: 0.6434659090909092
User 39107 does not improve AUC. Reverting changes.
Training on augumented user 96172 11/50 current_auc = 0.6488636363636364
User 96172 AUC after training: 0.6471590909090909
User 96172 does not improve AUC. Reverting changes.
Training on augumented user 137833 12/50 current_auc = 0.6488636363636364
User 137833 AUC after training: 0.6491477272727273
User 137833 improves AUC. Keeping the model.
Training on augumented user 89762 13/50 current_auc = 0.6491477272727273
User 89762 AUC after training: 0.6485795454545455
User 89762 does not improve AUC. Reverting changes.
Training on augumented user 36967 14/50 current_auc = 0.6491477272727273
User 36967 AUC after training: 0.6488636363636364
User 36967 does not improve AUC. Reverting changes.
Training on augumented user 37919 15/50 current_auc = 0.6491477272727273
User 37919 AUC after training: 0.6485795454545454
User 37919 does not improve AUC. Reverting changes.
Training on augumented user 118296 16/50 current_auc = 0.6491477272727273
User 118296 AUC after training: 0.6468750000000001
User 118296 does not improve AUC. Reverting changes.
Training on augumented user 12329 17/50 current_auc = 0.6491477272727273
User 12329 AUC after training: 0.6477272727272728
User 12329 does not improve AUC. Reverting changes.
Training on augumented user 87785 18/50 current_auc = 0.6491477272727273
User 87785 AUC after training: 0.6482954545454545
User 87785 does not improve AUC. Reverting changes.
Training on augumented user 117363 19/50 current_auc = 0.6491477272727273
User 117363 AUC after training: 0.6491477272727273
User 117363 does not improve AUC. Reverting changes.
Training on augumented user 110587 20/50 current_auc = 0.6491477272727273
User 110587 AUC after training: 0.6491477272727273
User 110587 does not improve AUC. Reverting changes.
Training on augumented user 134192 21/50 current_auc = 0.6491477272727273
User 134192 AUC after training: 0.6491477272727273
User 134192 does not improve AUC. Reverting changes.
Training on augumented user 104090 22/50 current_auc = 0.6491477272727273
User 104090 AUC after training: 0.6491477272727273
User 104090 does not improve AUC. Reverting changes.
Training on augumented user 132143 23/50 current_auc = 0.6491477272727273
User 132143 AUC after training: 0.6485795454545455
User 132143 does not improve AUC. Reverting changes.
Training on augumented user 21434 24/50 current_auc = 0.6491477272727273
User 21434 AUC after training: 0.6485795454545454
User 21434 does not improve AUC. Reverting changes.
Training on augumented user 68395 25/50 current_auc = 0.6491477272727273
User 68395 AUC after training: 0.6491477272727273
User 68395 does not improve AUC. Reverting changes.
Training on augumented user 94055 26/50 current_auc = 0.6491477272727273
User 94055 AUC after training: 0.6482954545454547
User 94055 does not improve AUC. Reverting changes.
Training on augumented user 28497 27/50 current_auc = 0.6491477272727273
User 28497 AUC after training: 0.6482954545454546
User 28497 does not improve AUC. Reverting changes.
Training on augumented user 136345 28/50 current_auc = 0.6491477272727273
User 136345 AUC after training: 0.6491477272727273
User 136345 does not improve AUC. Reverting changes.
Training on augumented user 129091 29/50 current_auc = 0.6491477272727273
User 129091 AUC after training: 0.6491477272727273
User 129091 does not improve AUC. Reverting changes.
Training on augumented user 71431 30/50 current_auc = 0.6491477272727273
User 71431 AUC after training: 0.6504261363636364
User 71431 improves AUC. Keeping the model.
Training on augumented user 85615 31/50 current_auc = 0.6504261363636364
User 85615 AUC after training: 0.65
User 85615 does not improve AUC. Reverting changes.
Training on augumented user 38078 32/50 current_auc = 0.6504261363636364
User 38078 AUC after training: 0.650284090909091
User 38078 does not improve AUC. Reverting changes.
Training on augumented user 71252 33/50 current_auc = 0.6504261363636364
User 71252 AUC after training: 0.6505681818181819
User 71252 improves AUC. Keeping the model.
Training on augumented user 16348 34/50 current_auc = 0.6505681818181819
User 16348 AUC after training: 0.6511363636363636
User 16348 improves AUC. Keeping the model.
Training on augumented user 138423 35/50 current_auc = 0.6511363636363636
User 138423 AUC after training: 0.6505681818181819
User 138423 does not improve AUC. Reverting changes.
Training on augumented user 106975 36/50 current_auc = 0.6511363636363636
User 106975 AUC after training: 0.6505681818181819
User 106975 does not improve AUC. Reverting changes.
Training on augumented user 27786 37/50 current_auc = 0.6511363636363636
User 27786 AUC after training: 0.6511363636363636
User 27786 does not improve AUC. Reverting changes.
Training on augumented user 135494 38/50 current_auc = 0.6511363636363636
User 135494 AUC after training: 0.6508522727272728
User 135494 does not improve AUC. Reverting changes.
Training on augumented user 63139 39/50 current_auc = 0.6511363636363636
User 63139 AUC after training: 0.6482954545454547
User 63139 does not improve AUC. Reverting changes.
Training on augumented user 83730 40/50 current_auc = 0.6511363636363636
User 83730 AUC after training: 0.6505681818181819
User 83730 does not improve AUC. Reverting changes.
Training on augumented user 58213 41/50 current_auc = 0.6511363636363636
User 58213 AUC after training: 0.6501420454545455
User 58213 does not improve AUC. Reverting changes.
Training on augumented user 86362 42/50 current_auc = 0.6511363636363636
User 86362 AUC after training: 0.6508522727272728
User 86362 does not improve AUC. Reverting changes.
Training on augumented user 56427 43/50 current_auc = 0.6511363636363636
User 56427 AUC after training: 0.6504261363636363
User 56427 does not improve AUC. Reverting changes.
Training on augumented user 72703 44/50 current_auc = 0.6511363636363636
User 72703 AUC after training: 0.6488636363636364
User 72703 does not improve AUC. Reverting changes.
Training on augumented user 37260 45/50 current_auc = 0.6511363636363636
User 37260 AUC after training: 0.6511363636363636
User 37260 does not improve AUC. Reverting changes.
Training on augumented user 109994 46/50 current_auc = 0.6511363636363636
User 109994 AUC after training: 0.6511363636363636
User 109994 does not improve AUC. Reverting changes.
Training on augumented user 17413 47/50 current_auc = 0.6511363636363636
User 17413 AUC after training: 0.6511363636363636
User 17413 does not improve AUC. Reverting changes.
Training on augumented user 10863 48/50 current_auc = 0.6511363636363636
User 10863 AUC after training: 0.6509943181818182
User 10863 does not improve AUC. Reverting changes.
Training on augumented user 12131 49/50 current_auc = 0.6511363636363636
User 12131 AUC after training: 0.6505681818181819
User 12131 does not improve AUC. Reverting changes.
[2024-12-02 20:16:39.470168] start test user 62769 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:40.060773] start test user 62769 292/568 recall augumented users by random, augumented_users = [128484, 62978, 79991, 106861, 39504, 10654, 128278, 21280, 110389, 50567, 111004, 17272, 98434, 84614, 23631, 130014, 27865, 99027, 133000, 78408, 65476, 50433, 67682, 108204, 17900, 42246, 62835, 89019, 77659, 133365, 61504, 130264, 116232, 87691, 39428, 1749, 22603, 89309, 33248, 24638, 16792, 130754, 49913, 108330, 71128, 20712, 68679, 36075, 89316, 10179]
[2024-12-02 20:16:40.082304] user = 62769 Cloud 292/568
[2024-12-02 20:16:40.098471] user = 62769 Local 292/568
[2024-12-02 20:16:40.165461] user = 62769 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:42.921590] user = 62769 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 128484 0/50 current_auc = 0.7777777777777778
User 128484 AUC after training: 0.7777777777777778
User 128484 does not improve AUC. Reverting changes.
Training on augumented user 62978 1/50 current_auc = 0.7777777777777778
User 62978 AUC after training: 0.7777777777777778
User 62978 does not improve AUC. Reverting changes.
Training on augumented user 79991 2/50 current_auc = 0.7777777777777778
User 79991 AUC after training: 0.7777777777777778
User 79991 does not improve AUC. Reverting changes.
Training on augumented user 106861 3/50 current_auc = 0.7777777777777778
User 106861 AUC after training: 0.7777777777777778
User 106861 does not improve AUC. Reverting changes.
Training on augumented user 39504 4/50 current_auc = 0.7777777777777778
User 39504 AUC after training: 0.7777777777777778
User 39504 does not improve AUC. Reverting changes.
Training on augumented user 10654 5/50 current_auc = 0.7777777777777778
User 10654 AUC after training: 0.7777777777777778
User 10654 does not improve AUC. Reverting changes.
Training on augumented user 128278 6/50 current_auc = 0.7777777777777778
User 128278 AUC after training: 0.7777777777777778
User 128278 does not improve AUC. Reverting changes.
Training on augumented user 21280 7/50 current_auc = 0.7777777777777778
User 21280 AUC after training: 0.7777777777777778
User 21280 does not improve AUC. Reverting changes.
Training on augumented user 110389 8/50 current_auc = 0.7777777777777778
User 110389 AUC after training: 0.7777777777777778
User 110389 does not improve AUC. Reverting changes.
Training on augumented user 50567 9/50 current_auc = 0.7777777777777778
User 50567 AUC after training: 0.7777777777777778
User 50567 does not improve AUC. Reverting changes.
Training on augumented user 111004 10/50 current_auc = 0.7777777777777778
User 111004 AUC after training: 0.7777777777777778
User 111004 does not improve AUC. Reverting changes.
Training on augumented user 17272 11/50 current_auc = 0.7777777777777778
User 17272 AUC after training: 0.7777777777777778
User 17272 does not improve AUC. Reverting changes.
Training on augumented user 98434 12/50 current_auc = 0.7777777777777778
User 98434 AUC after training: 0.7777777777777778
User 98434 does not improve AUC. Reverting changes.
Training on augumented user 84614 13/50 current_auc = 0.7777777777777778
User 84614 AUC after training: 0.7833333333333333
User 84614 improves AUC. Keeping the model.
Training on augumented user 23631 14/50 current_auc = 0.7833333333333333
User 23631 AUC after training: 0.788888888888889
User 23631 improves AUC. Keeping the model.
Training on augumented user 130014 15/50 current_auc = 0.788888888888889
User 130014 AUC after training: 0.7833333333333333
User 130014 does not improve AUC. Reverting changes.
Training on augumented user 27865 16/50 current_auc = 0.788888888888889
User 27865 AUC after training: 0.7944444444444445
User 27865 improves AUC. Keeping the model.
Training on augumented user 99027 17/50 current_auc = 0.7944444444444445
User 99027 AUC after training: 0.788888888888889
User 99027 does not improve AUC. Reverting changes.
Training on augumented user 133000 18/50 current_auc = 0.7944444444444445
User 133000 AUC after training: 0.7944444444444445
User 133000 does not improve AUC. Reverting changes.
Training on augumented user 78408 19/50 current_auc = 0.7944444444444445
User 78408 AUC after training: 0.788888888888889
User 78408 does not improve AUC. Reverting changes.
Training on augumented user 65476 20/50 current_auc = 0.7944444444444445
User 65476 AUC after training: 0.7944444444444445
User 65476 does not improve AUC. Reverting changes.
Training on augumented user 50433 21/50 current_auc = 0.7944444444444445
User 50433 AUC after training: 0.788888888888889
User 50433 does not improve AUC. Reverting changes.
Training on augumented user 67682 22/50 current_auc = 0.7944444444444445
User 67682 AUC after training: 0.7944444444444445
User 67682 does not improve AUC. Reverting changes.
Training on augumented user 108204 23/50 current_auc = 0.7944444444444445
User 108204 AUC after training: 0.7944444444444445
User 108204 does not improve AUC. Reverting changes.
Training on augumented user 17900 24/50 current_auc = 0.7944444444444445
User 17900 AUC after training: 0.7833333333333333
User 17900 does not improve AUC. Reverting changes.
Training on augumented user 42246 25/50 current_auc = 0.7944444444444445
User 42246 AUC after training: 0.7944444444444445
User 42246 does not improve AUC. Reverting changes.
Training on augumented user 62835 26/50 current_auc = 0.7944444444444445
User 62835 AUC after training: 0.788888888888889
User 62835 does not improve AUC. Reverting changes.
Training on augumented user 89019 27/50 current_auc = 0.7944444444444445
User 89019 AUC after training: 0.788888888888889
User 89019 does not improve AUC. Reverting changes.
Training on augumented user 77659 28/50 current_auc = 0.7944444444444445
User 77659 AUC after training: 0.788888888888889
User 77659 does not improve AUC. Reverting changes.
Training on augumented user 133365 29/50 current_auc = 0.7944444444444445
User 133365 AUC after training: 0.8166666666666667
User 133365 improves AUC. Keeping the model.
Training on augumented user 61504 30/50 current_auc = 0.8166666666666667
User 61504 AUC after training: 0.8111111111111111
User 61504 does not improve AUC. Reverting changes.
Training on augumented user 130264 31/50 current_auc = 0.8166666666666667
User 130264 AUC after training: 0.8222222222222222
User 130264 improves AUC. Keeping the model.
Training on augumented user 116232 32/50 current_auc = 0.8222222222222222
User 116232 AUC after training: 0.8166666666666667
User 116232 does not improve AUC. Reverting changes.
Training on augumented user 87691 33/50 current_auc = 0.8222222222222222
User 87691 AUC after training: 0.8222222222222222
User 87691 does not improve AUC. Reverting changes.
Training on augumented user 39428 34/50 current_auc = 0.8222222222222222
User 39428 AUC after training: 0.8166666666666667
User 39428 does not improve AUC. Reverting changes.
Training on augumented user 1749 35/50 current_auc = 0.8222222222222222
User 1749 AUC after training: 0.8166666666666667
User 1749 does not improve AUC. Reverting changes.
Training on augumented user 22603 36/50 current_auc = 0.8222222222222222
User 22603 AUC after training: 0.8222222222222222
User 22603 does not improve AUC. Reverting changes.
Training on augumented user 89309 37/50 current_auc = 0.8222222222222222
User 89309 AUC after training: 0.8222222222222222
User 89309 does not improve AUC. Reverting changes.
Training on augumented user 33248 38/50 current_auc = 0.8222222222222222
User 33248 AUC after training: 0.8166666666666667
User 33248 does not improve AUC. Reverting changes.
Training on augumented user 24638 39/50 current_auc = 0.8222222222222222
User 24638 AUC after training: 0.8222222222222222
User 24638 does not improve AUC. Reverting changes.
Training on augumented user 16792 40/50 current_auc = 0.8222222222222222
User 16792 AUC after training: 0.8222222222222222
User 16792 does not improve AUC. Reverting changes.
Training on augumented user 130754 41/50 current_auc = 0.8222222222222222
User 130754 AUC after training: 0.8222222222222222
User 130754 does not improve AUC. Reverting changes.
Training on augumented user 49913 42/50 current_auc = 0.8222222222222222
User 49913 AUC after training: 0.8222222222222222
User 49913 does not improve AUC. Reverting changes.
Training on augumented user 108330 43/50 current_auc = 0.8222222222222222
User 108330 AUC after training: 0.8222222222222222
User 108330 does not improve AUC. Reverting changes.
Training on augumented user 71128 44/50 current_auc = 0.8222222222222222
User 71128 AUC after training: 0.8222222222222222
User 71128 does not improve AUC. Reverting changes.
Training on augumented user 20712 45/50 current_auc = 0.8222222222222222
User 20712 AUC after training: 0.8055555555555556
User 20712 does not improve AUC. Reverting changes.
Training on augumented user 68679 46/50 current_auc = 0.8222222222222222
User 68679 AUC after training: 0.8222222222222222
User 68679 does not improve AUC. Reverting changes.
Training on augumented user 36075 47/50 current_auc = 0.8222222222222222
User 36075 AUC after training: 0.8055555555555556
User 36075 does not improve AUC. Reverting changes.
Training on augumented user 89316 48/50 current_auc = 0.8222222222222222
User 89316 AUC after training: 0.8222222222222222
User 89316 does not improve AUC. Reverting changes.
Training on augumented user 10179 49/50 current_auc = 0.8222222222222222
User 10179 AUC after training: 0.8222222222222222
User 10179 does not improve AUC. Reverting changes.
[2024-12-02 20:17:16.771918] start test user 62797 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:17.265337] start test user 62797 293/568 recall augumented users by random, augumented_users = [27888, 126710, 53529, 111793, 49409, 10953, 39974, 30064, 9254, 12357, 127590, 118934, 80936, 87301, 89709, 57867, 22707, 57395, 94357, 52423, 49507, 59566, 63144, 81155, 23979, 17780, 64068, 68620, 127517, 118149, 56641, 20507, 86437, 100610, 12890, 46626, 138061, 110625, 49448, 66049, 807, 72484, 5480, 772, 72820, 97714, 70945, 17419, 30981, 20443]
[2024-12-02 20:17:17.307091] user = 62797 Cloud 293/568
[2024-12-02 20:17:17.315825] user = 62797 Local 293/568
[2024-12-02 20:17:17.413208] user = 62797 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:20.115005] user = 62797 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 27888 0/50 current_auc = 0.0
User 27888 AUC after training: 0.0
User 27888 does not improve AUC. Reverting changes.
Training on augumented user 126710 1/50 current_auc = 0.0
User 126710 AUC after training: 0.0
User 126710 does not improve AUC. Reverting changes.
Training on augumented user 53529 2/50 current_auc = 0.0
User 53529 AUC after training: 0.0
User 53529 does not improve AUC. Reverting changes.
Training on augumented user 111793 3/50 current_auc = 0.0
User 111793 AUC after training: 0.0
User 111793 does not improve AUC. Reverting changes.
Training on augumented user 49409 4/50 current_auc = 0.0
User 49409 AUC after training: 0.0
User 49409 does not improve AUC. Reverting changes.
Training on augumented user 10953 5/50 current_auc = 0.0
User 10953 AUC after training: 0.0
User 10953 does not improve AUC. Reverting changes.
Training on augumented user 39974 6/50 current_auc = 0.0
User 39974 AUC after training: 0.0
User 39974 does not improve AUC. Reverting changes.
Training on augumented user 30064 7/50 current_auc = 0.0
User 30064 AUC after training: 0.0
User 30064 does not improve AUC. Reverting changes.
Training on augumented user 9254 8/50 current_auc = 0.0
User 9254 AUC after training: 0.0
User 9254 does not improve AUC. Reverting changes.
Training on augumented user 12357 9/50 current_auc = 0.0
User 12357 AUC after training: 0.0
User 12357 does not improve AUC. Reverting changes.
Training on augumented user 127590 10/50 current_auc = 0.0
User 127590 AUC after training: 0.0
User 127590 does not improve AUC. Reverting changes.
Training on augumented user 118934 11/50 current_auc = 0.0
User 118934 AUC after training: 0.0
User 118934 does not improve AUC. Reverting changes.
Training on augumented user 80936 12/50 current_auc = 0.0
User 80936 AUC after training: 0.0
User 80936 does not improve AUC. Reverting changes.
Training on augumented user 87301 13/50 current_auc = 0.0
User 87301 AUC after training: 0.0
User 87301 does not improve AUC. Reverting changes.
Training on augumented user 89709 14/50 current_auc = 0.0
User 89709 AUC after training: 0.0
User 89709 does not improve AUC. Reverting changes.
Training on augumented user 57867 15/50 current_auc = 0.0
User 57867 AUC after training: 0.0
User 57867 does not improve AUC. Reverting changes.
Training on augumented user 22707 16/50 current_auc = 0.0
User 22707 AUC after training: 0.0
User 22707 does not improve AUC. Reverting changes.
Training on augumented user 57395 17/50 current_auc = 0.0
User 57395 AUC after training: 0.0
User 57395 does not improve AUC. Reverting changes.
Training on augumented user 94357 18/50 current_auc = 0.0
User 94357 AUC after training: 0.0
User 94357 does not improve AUC. Reverting changes.
Training on augumented user 52423 19/50 current_auc = 0.0
User 52423 AUC after training: 0.0
User 52423 does not improve AUC. Reverting changes.
Training on augumented user 49507 20/50 current_auc = 0.0
User 49507 AUC after training: 0.0
User 49507 does not improve AUC. Reverting changes.
Training on augumented user 59566 21/50 current_auc = 0.0
User 59566 AUC after training: 0.0
User 59566 does not improve AUC. Reverting changes.
Training on augumented user 63144 22/50 current_auc = 0.0
User 63144 AUC after training: 0.0
User 63144 does not improve AUC. Reverting changes.
Training on augumented user 81155 23/50 current_auc = 0.0
User 81155 AUC after training: 0.0
User 81155 does not improve AUC. Reverting changes.
Training on augumented user 23979 24/50 current_auc = 0.0
User 23979 AUC after training: 0.0
User 23979 does not improve AUC. Reverting changes.
Training on augumented user 17780 25/50 current_auc = 0.0
User 17780 AUC after training: 0.0
User 17780 does not improve AUC. Reverting changes.
Training on augumented user 64068 26/50 current_auc = 0.0
User 64068 AUC after training: 0.0
User 64068 does not improve AUC. Reverting changes.
Training on augumented user 68620 27/50 current_auc = 0.0
User 68620 AUC after training: 0.0
User 68620 does not improve AUC. Reverting changes.
Training on augumented user 127517 28/50 current_auc = 0.0
User 127517 AUC after training: 0.0
User 127517 does not improve AUC. Reverting changes.
Training on augumented user 118149 29/50 current_auc = 0.0
User 118149 AUC after training: 0.0
User 118149 does not improve AUC. Reverting changes.
Training on augumented user 56641 30/50 current_auc = 0.0
User 56641 AUC after training: 0.0
User 56641 does not improve AUC. Reverting changes.
Training on augumented user 20507 31/50 current_auc = 0.0
User 20507 AUC after training: 0.0
User 20507 does not improve AUC. Reverting changes.
Training on augumented user 86437 32/50 current_auc = 0.0
User 86437 AUC after training: 0.0
User 86437 does not improve AUC. Reverting changes.
Training on augumented user 100610 33/50 current_auc = 0.0
User 100610 AUC after training: 0.0
User 100610 does not improve AUC. Reverting changes.
Training on augumented user 12890 34/50 current_auc = 0.0
User 12890 AUC after training: 0.0
User 12890 does not improve AUC. Reverting changes.
Training on augumented user 46626 35/50 current_auc = 0.0
User 46626 AUC after training: 0.0
User 46626 does not improve AUC. Reverting changes.
Training on augumented user 138061 36/50 current_auc = 0.0
User 138061 AUC after training: 0.0
User 138061 does not improve AUC. Reverting changes.
Training on augumented user 110625 37/50 current_auc = 0.0
User 110625 AUC after training: 0.0
User 110625 does not improve AUC. Reverting changes.
Training on augumented user 49448 38/50 current_auc = 0.0
User 49448 AUC after training: 0.0
User 49448 does not improve AUC. Reverting changes.
Training on augumented user 66049 39/50 current_auc = 0.0
User 66049 AUC after training: 0.0
User 66049 does not improve AUC. Reverting changes.
Training on augumented user 807 40/50 current_auc = 0.0
User 807 AUC after training: 0.0
User 807 does not improve AUC. Reverting changes.
Training on augumented user 72484 41/50 current_auc = 0.0
User 72484 AUC after training: 0.0
User 72484 does not improve AUC. Reverting changes.
Training on augumented user 5480 42/50 current_auc = 0.0
User 5480 AUC after training: 0.0
User 5480 does not improve AUC. Reverting changes.
Training on augumented user 772 43/50 current_auc = 0.0
User 772 AUC after training: 0.0
User 772 does not improve AUC. Reverting changes.
Training on augumented user 72820 44/50 current_auc = 0.0
User 72820 AUC after training: 0.0
User 72820 does not improve AUC. Reverting changes.
Training on augumented user 97714 45/50 current_auc = 0.0
User 97714 AUC after training: 0.0
User 97714 does not improve AUC. Reverting changes.
Training on augumented user 70945 46/50 current_auc = 0.0
User 70945 AUC after training: 0.0
User 70945 does not improve AUC. Reverting changes.
Training on augumented user 17419 47/50 current_auc = 0.0
User 17419 AUC after training: 0.0
User 17419 does not improve AUC. Reverting changes.
Training on augumented user 30981 48/50 current_auc = 0.0
User 30981 AUC after training: 0.0
User 30981 does not improve AUC. Reverting changes.
Training on augumented user 20443 49/50 current_auc = 0.0
User 20443 AUC after training: 0.0
User 20443 does not improve AUC. Reverting changes.
[2024-12-02 20:17:52.767873] start test user 62800 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:53.447105] start test user 62800 294/568 recall augumented users by random, augumented_users = [64949, 57659, 82731, 51510, 25631, 84824, 87248, 136917, 9032, 94037, 13760, 74821, 5802, 117223, 135433, 88242, 105141, 30981, 74479, 81482, 233, 137347, 53161, 99529, 121420, 58490, 20014, 51364, 43578, 92980, 106591, 37905, 56959, 17009, 71095, 38205, 108281, 11578, 44720, 89128, 117196, 105476, 136730, 31965, 96192, 137232, 10710, 46494, 28924, 27627]
[2024-12-02 20:17:53.463156] user = 62800 Cloud 294/568
[2024-12-02 20:17:53.473248] user = 62800 Local 294/568
[2024-12-02 20:17:53.653154] user = 62800 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:56.265977] user = 62800 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6615384615384615
Training on augumented user 64949 0/50 current_auc = 0.6615384615384615
User 64949 AUC after training: 0.6615384615384615
User 64949 does not improve AUC. Reverting changes.
Training on augumented user 57659 1/50 current_auc = 0.6615384615384615
User 57659 AUC after training: 0.6615384615384615
User 57659 does not improve AUC. Reverting changes.
Training on augumented user 82731 2/50 current_auc = 0.6615384615384615
User 82731 AUC after training: 0.6615384615384615
User 82731 does not improve AUC. Reverting changes.
Training on augumented user 51510 3/50 current_auc = 0.6615384615384615
User 51510 AUC after training: 0.6615384615384615
User 51510 does not improve AUC. Reverting changes.
Training on augumented user 25631 4/50 current_auc = 0.6615384615384615
User 25631 AUC after training: 0.6615384615384615
User 25631 does not improve AUC. Reverting changes.
Training on augumented user 84824 5/50 current_auc = 0.6615384615384615
User 84824 AUC after training: 0.6615384615384615
User 84824 does not improve AUC. Reverting changes.
Training on augumented user 87248 6/50 current_auc = 0.6615384615384615
User 87248 AUC after training: 0.6615384615384615
User 87248 does not improve AUC. Reverting changes.
Training on augumented user 136917 7/50 current_auc = 0.6615384615384615
User 136917 AUC after training: 0.6615384615384615
User 136917 does not improve AUC. Reverting changes.
Training on augumented user 9032 8/50 current_auc = 0.6615384615384615
User 9032 AUC after training: 0.6461538461538461
User 9032 does not improve AUC. Reverting changes.
Training on augumented user 94037 9/50 current_auc = 0.6615384615384615
User 94037 AUC after training: 0.6615384615384615
User 94037 does not improve AUC. Reverting changes.
Training on augumented user 13760 10/50 current_auc = 0.6615384615384615
User 13760 AUC after training: 0.6615384615384615
User 13760 does not improve AUC. Reverting changes.
Training on augumented user 74821 11/50 current_auc = 0.6615384615384615
User 74821 AUC after training: 0.6615384615384615
User 74821 does not improve AUC. Reverting changes.
Training on augumented user 5802 12/50 current_auc = 0.6615384615384615
User 5802 AUC after training: 0.6615384615384615
User 5802 does not improve AUC. Reverting changes.
Training on augumented user 117223 13/50 current_auc = 0.6615384615384615
User 117223 AUC after training: 0.6615384615384615
User 117223 does not improve AUC. Reverting changes.
Training on augumented user 135433 14/50 current_auc = 0.6615384615384615
User 135433 AUC after training: 0.6615384615384615
User 135433 does not improve AUC. Reverting changes.
Training on augumented user 88242 15/50 current_auc = 0.6615384615384615
User 88242 AUC after training: 0.6615384615384615
User 88242 does not improve AUC. Reverting changes.
Training on augumented user 105141 16/50 current_auc = 0.6615384615384615
User 105141 AUC after training: 0.6615384615384615
User 105141 does not improve AUC. Reverting changes.
Training on augumented user 30981 17/50 current_auc = 0.6615384615384615
User 30981 AUC after training: 0.6615384615384615
User 30981 does not improve AUC. Reverting changes.
Training on augumented user 74479 18/50 current_auc = 0.6615384615384615
User 74479 AUC after training: 0.6615384615384615
User 74479 does not improve AUC. Reverting changes.
Training on augumented user 81482 19/50 current_auc = 0.6615384615384615
User 81482 AUC after training: 0.6615384615384615
User 81482 does not improve AUC. Reverting changes.
Training on augumented user 233 20/50 current_auc = 0.6615384615384615
User 233 AUC after training: 0.6615384615384615
User 233 does not improve AUC. Reverting changes.
Training on augumented user 137347 21/50 current_auc = 0.6615384615384615
User 137347 AUC after training: 0.6615384615384615
User 137347 does not improve AUC. Reverting changes.
Training on augumented user 53161 22/50 current_auc = 0.6615384615384615
User 53161 AUC after training: 0.6615384615384615
User 53161 does not improve AUC. Reverting changes.
Training on augumented user 99529 23/50 current_auc = 0.6615384615384615
User 99529 AUC after training: 0.6615384615384615
User 99529 does not improve AUC. Reverting changes.
Training on augumented user 121420 24/50 current_auc = 0.6615384615384615
User 121420 AUC after training: 0.6615384615384615
User 121420 does not improve AUC. Reverting changes.
Training on augumented user 58490 25/50 current_auc = 0.6615384615384615
User 58490 AUC after training: 0.6615384615384615
User 58490 does not improve AUC. Reverting changes.
Training on augumented user 20014 26/50 current_auc = 0.6615384615384615
User 20014 AUC after training: 0.6615384615384615
User 20014 does not improve AUC. Reverting changes.
Training on augumented user 51364 27/50 current_auc = 0.6615384615384615
User 51364 AUC after training: 0.6615384615384615
User 51364 does not improve AUC. Reverting changes.
Training on augumented user 43578 28/50 current_auc = 0.6615384615384615
User 43578 AUC after training: 0.6615384615384615
User 43578 does not improve AUC. Reverting changes.
Training on augumented user 92980 29/50 current_auc = 0.6615384615384615
User 92980 AUC after training: 0.6615384615384615
User 92980 does not improve AUC. Reverting changes.
Training on augumented user 106591 30/50 current_auc = 0.6615384615384615
User 106591 AUC after training: 0.6615384615384615
User 106591 does not improve AUC. Reverting changes.
Training on augumented user 37905 31/50 current_auc = 0.6615384615384615
User 37905 AUC after training: 0.6615384615384615
User 37905 does not improve AUC. Reverting changes.
Training on augumented user 56959 32/50 current_auc = 0.6615384615384615
User 56959 AUC after training: 0.6615384615384615
User 56959 does not improve AUC. Reverting changes.
Training on augumented user 17009 33/50 current_auc = 0.6615384615384615
User 17009 AUC after training: 0.6615384615384615
User 17009 does not improve AUC. Reverting changes.
Training on augumented user 71095 34/50 current_auc = 0.6615384615384615
User 71095 AUC after training: 0.6615384615384615
User 71095 does not improve AUC. Reverting changes.
Training on augumented user 38205 35/50 current_auc = 0.6615384615384615
User 38205 AUC after training: 0.6615384615384615
User 38205 does not improve AUC. Reverting changes.
Training on augumented user 108281 36/50 current_auc = 0.6615384615384615
User 108281 AUC after training: 0.6615384615384615
User 108281 does not improve AUC. Reverting changes.
Training on augumented user 11578 37/50 current_auc = 0.6615384615384615
User 11578 AUC after training: 0.6615384615384615
User 11578 does not improve AUC. Reverting changes.
Training on augumented user 44720 38/50 current_auc = 0.6615384615384615
User 44720 AUC after training: 0.6615384615384615
User 44720 does not improve AUC. Reverting changes.
Training on augumented user 89128 39/50 current_auc = 0.6615384615384615
User 89128 AUC after training: 0.6615384615384615
User 89128 does not improve AUC. Reverting changes.
Training on augumented user 117196 40/50 current_auc = 0.6615384615384615
User 117196 AUC after training: 0.6615384615384615
User 117196 does not improve AUC. Reverting changes.
Training on augumented user 105476 41/50 current_auc = 0.6615384615384615
User 105476 AUC after training: 0.6615384615384615
User 105476 does not improve AUC. Reverting changes.
Training on augumented user 136730 42/50 current_auc = 0.6615384615384615
User 136730 AUC after training: 0.6615384615384615
User 136730 does not improve AUC. Reverting changes.
Training on augumented user 31965 43/50 current_auc = 0.6615384615384615
User 31965 AUC after training: 0.6615384615384615
User 31965 does not improve AUC. Reverting changes.
Training on augumented user 96192 44/50 current_auc = 0.6615384615384615
User 96192 AUC after training: 0.6615384615384615
User 96192 does not improve AUC. Reverting changes.
Training on augumented user 137232 45/50 current_auc = 0.6615384615384615
User 137232 AUC after training: 0.6615384615384615
User 137232 does not improve AUC. Reverting changes.
Training on augumented user 10710 46/50 current_auc = 0.6615384615384615
User 10710 AUC after training: 0.6615384615384615
User 10710 does not improve AUC. Reverting changes.
Training on augumented user 46494 47/50 current_auc = 0.6615384615384615
User 46494 AUC after training: 0.6615384615384615
User 46494 does not improve AUC. Reverting changes.
Training on augumented user 28924 48/50 current_auc = 0.6615384615384615
User 28924 AUC after training: 0.6615384615384615
User 28924 does not improve AUC. Reverting changes.
Training on augumented user 27627 49/50 current_auc = 0.6615384615384615
User 27627 AUC after training: 0.6615384615384615
User 27627 does not improve AUC. Reverting changes.
[2024-12-02 20:18:24.884782] start test user 62805 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:25.421133] start test user 62805 295/568 recall augumented users by random, augumented_users = [104154, 116178, 5491, 51638, 37862, 34824, 116434, 90174, 79679, 127389, 133156, 81551, 7630, 5943, 60702, 75982, 72635, 38637, 23244, 27099, 136199, 50668, 95780, 98105, 100640, 17221, 4931, 80669, 58331, 30375, 56201, 61935, 7203, 132260, 94167, 76351, 35407, 47134, 109160, 130578, 116003, 7850, 29561, 463, 89394, 48408, 114939, 131162, 103686, 99131]
[2024-12-02 20:18:25.440467] user = 62805 Cloud 295/568
[2024-12-02 20:18:25.487600] user = 62805 Local 295/568
[2024-12-02 20:18:25.604942] user = 62805 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:27.718989] user = 62805 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6009398496240601
Training on augumented user 104154 0/50 current_auc = 0.6009398496240601
User 104154 AUC after training: 0.6010827067669173
User 104154 improves AUC. Keeping the model.
Training on augumented user 116178 1/50 current_auc = 0.6010827067669173
User 116178 AUC after training: 0.601548872180451
User 116178 improves AUC. Keeping the model.
Training on augumented user 5491 2/50 current_auc = 0.601548872180451
User 5491 AUC after training: 0.6017293233082707
User 5491 improves AUC. Keeping the model.
Training on augumented user 51638 3/50 current_auc = 0.6017293233082707
User 51638 AUC after training: 0.6008872180451128
User 51638 does not improve AUC. Reverting changes.
Training on augumented user 37862 4/50 current_auc = 0.6017293233082707
User 37862 AUC after training: 0.6013082706766917
User 37862 does not improve AUC. Reverting changes.
Training on augumented user 34824 5/50 current_auc = 0.6017293233082707
User 34824 AUC after training: 0.601436090225564
User 34824 does not improve AUC. Reverting changes.
Training on augumented user 116434 6/50 current_auc = 0.6017293233082707
User 116434 AUC after training: 0.601203007518797
User 116434 does not improve AUC. Reverting changes.
Training on augumented user 90174 7/50 current_auc = 0.6017293233082707
User 90174 AUC after training: 0.6015338345864661
User 90174 does not improve AUC. Reverting changes.
Training on augumented user 79679 8/50 current_auc = 0.6017293233082707
User 79679 AUC after training: 0.600827067669173
User 79679 does not improve AUC. Reverting changes.
Training on augumented user 127389 9/50 current_auc = 0.6017293233082707
User 127389 AUC after training: 0.6010751879699248
User 127389 does not improve AUC. Reverting changes.
Training on augumented user 133156 10/50 current_auc = 0.6017293233082707
User 133156 AUC after training: 0.6013082706766917
User 133156 does not improve AUC. Reverting changes.
Training on augumented user 81551 11/50 current_auc = 0.6017293233082707
User 81551 AUC after training: 0.6006315789473684
User 81551 does not improve AUC. Reverting changes.
Training on augumented user 7630 12/50 current_auc = 0.6017293233082707
User 7630 AUC after training: 0.600172932330827
User 7630 does not improve AUC. Reverting changes.
Training on augumented user 5943 13/50 current_auc = 0.6017293233082707
User 5943 AUC after training: 0.6009022556390977
User 5943 does not improve AUC. Reverting changes.
Training on augumented user 60702 14/50 current_auc = 0.6017293233082707
User 60702 AUC after training: 0.6014736842105263
User 60702 does not improve AUC. Reverting changes.
Training on augumented user 75982 15/50 current_auc = 0.6017293233082707
User 75982 AUC after training: 0.6016691729323308
User 75982 does not improve AUC. Reverting changes.
Training on augumented user 72635 16/50 current_auc = 0.6017293233082707
User 72635 AUC after training: 0.6015263157894736
User 72635 does not improve AUC. Reverting changes.
Training on augumented user 38637 17/50 current_auc = 0.6017293233082707
User 38637 AUC after training: 0.6015338345864661
User 38637 does not improve AUC. Reverting changes.
Training on augumented user 23244 18/50 current_auc = 0.6017293233082707
User 23244 AUC after training: 0.6015187969924812
User 23244 does not improve AUC. Reverting changes.
Training on augumented user 27099 19/50 current_auc = 0.6017293233082707
User 27099 AUC after training: 0.6011879699248119
User 27099 does not improve AUC. Reverting changes.
Training on augumented user 136199 20/50 current_auc = 0.6017293233082707
User 136199 AUC after training: 0.601375939849624
User 136199 does not improve AUC. Reverting changes.
Training on augumented user 50668 21/50 current_auc = 0.6017293233082707
User 50668 AUC after training: 0.6014586466165415
User 50668 does not improve AUC. Reverting changes.
Training on augumented user 95780 22/50 current_auc = 0.6017293233082707
User 95780 AUC after training: 0.6016390977443609
User 95780 does not improve AUC. Reverting changes.
Training on augumented user 98105 23/50 current_auc = 0.6017293233082707
User 98105 AUC after training: 0.6008721804511279
User 98105 does not improve AUC. Reverting changes.
Training on augumented user 100640 24/50 current_auc = 0.6017293233082707
User 100640 AUC after training: 0.6010827067669172
User 100640 does not improve AUC. Reverting changes.
Training on augumented user 17221 25/50 current_auc = 0.6017293233082707
User 17221 AUC after training: 0.6013533834586466
User 17221 does not improve AUC. Reverting changes.
Training on augumented user 4931 26/50 current_auc = 0.6017293233082707
User 4931 AUC after training: 0.6014436090225563
User 4931 does not improve AUC. Reverting changes.
Training on augumented user 80669 27/50 current_auc = 0.6017293233082707
User 80669 AUC after training: 0.6012631578947368
User 80669 does not improve AUC. Reverting changes.
Training on augumented user 58331 28/50 current_auc = 0.6017293233082707
User 58331 AUC after training: 0.6018721804511278
User 58331 improves AUC. Keeping the model.
Training on augumented user 30375 29/50 current_auc = 0.6018721804511278
User 30375 AUC after training: 0.601233082706767
User 30375 does not improve AUC. Reverting changes.
Training on augumented user 56201 30/50 current_auc = 0.6018721804511278
User 56201 AUC after training: 0.6014285714285714
User 56201 does not improve AUC. Reverting changes.
Training on augumented user 61935 31/50 current_auc = 0.6018721804511278
User 61935 AUC after training: 0.6016766917293234
User 61935 does not improve AUC. Reverting changes.
Training on augumented user 7203 32/50 current_auc = 0.6018721804511278
User 7203 AUC after training: 0.6012706766917293
User 7203 does not improve AUC. Reverting changes.
Training on augumented user 132260 33/50 current_auc = 0.6018721804511278
User 132260 AUC after training: 0.6008646616541353
User 132260 does not improve AUC. Reverting changes.
Training on augumented user 94167 34/50 current_auc = 0.6018721804511278
User 94167 AUC after training: 0.6010225563909775
User 94167 does not improve AUC. Reverting changes.
Training on augumented user 76351 35/50 current_auc = 0.6018721804511278
User 76351 AUC after training: 0.6018646616541352
User 76351 does not improve AUC. Reverting changes.
Training on augumented user 35407 36/50 current_auc = 0.6018721804511278
User 35407 AUC after training: 0.6018421052631578
User 35407 does not improve AUC. Reverting changes.
Training on augumented user 47134 37/50 current_auc = 0.6018721804511278
User 47134 AUC after training: 0.6014962406015039
User 47134 does not improve AUC. Reverting changes.
Training on augumented user 109160 38/50 current_auc = 0.6018721804511278
User 109160 AUC after training: 0.6014661654135338
User 109160 does not improve AUC. Reverting changes.
Training on augumented user 130578 39/50 current_auc = 0.6018721804511278
User 130578 AUC after training: 0.6016766917293234
User 130578 does not improve AUC. Reverting changes.
Training on augumented user 116003 40/50 current_auc = 0.6018721804511278
User 116003 AUC after training: 0.6012255639097744
User 116003 does not improve AUC. Reverting changes.
Training on augumented user 7850 41/50 current_auc = 0.6018721804511278
User 7850 AUC after training: 0.6019548872180451
User 7850 improves AUC. Keeping the model.
Training on augumented user 29561 42/50 current_auc = 0.6019548872180451
User 29561 AUC after training: 0.601609022556391
User 29561 does not improve AUC. Reverting changes.
Training on augumented user 463 43/50 current_auc = 0.6019548872180451
User 463 AUC after training: 0.6017443609022557
User 463 does not improve AUC. Reverting changes.
Training on augumented user 89394 44/50 current_auc = 0.6019548872180451
User 89394 AUC after training: 0.6005112781954887
User 89394 does not improve AUC. Reverting changes.
Training on augumented user 48408 45/50 current_auc = 0.6019548872180451
User 48408 AUC after training: 0.6015488721804512
User 48408 does not improve AUC. Reverting changes.
Training on augumented user 114939 46/50 current_auc = 0.6019548872180451
User 114939 AUC after training: 0.6020601503759399
User 114939 improves AUC. Keeping the model.
Training on augumented user 131162 47/50 current_auc = 0.6020601503759399
User 131162 AUC after training: 0.6017593984962406
User 131162 does not improve AUC. Reverting changes.
Training on augumented user 103686 48/50 current_auc = 0.6020601503759399
User 103686 AUC after training: 0.6018721804511278
User 103686 does not improve AUC. Reverting changes.
Training on augumented user 99131 49/50 current_auc = 0.6020601503759399
User 99131 AUC after training: 0.6016917293233083
User 99131 does not improve AUC. Reverting changes.
[2024-12-02 20:18:59.754933] start test user 62810 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:00.481582] start test user 62810 296/568 recall augumented users by random, augumented_users = [86112, 77611, 50451, 8105, 63594, 113260, 47231, 42827, 89888, 71796, 11088, 67238, 57476, 16938, 51430, 97823, 116142, 12618, 8376, 129230, 30407, 42354, 42247, 54471, 131872, 86228, 30521, 123528, 73796, 32844, 59957, 41798, 6010, 82619, 122926, 51052, 71076, 24868, 122465, 68220, 66011, 32172, 124264, 119721, 117281, 79320, 102666, 115115, 72242, 115559]
[2024-12-02 20:19:00.529910] user = 62810 Cloud 296/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:00.537954] user = 62810 Local 296/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:00.586304] user = 62810 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:03.774593] user = 62810 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 86112 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86112 AUC after training: 0.5
User 86112 does not improve AUC. Reverting changes.
Training on augumented user 77611 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77611 AUC after training: 0.5
User 77611 does not improve AUC. Reverting changes.
Training on augumented user 50451 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50451 AUC after training: 0.5
User 50451 does not improve AUC. Reverting changes.
Training on augumented user 8105 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8105 AUC after training: 0.5
User 8105 does not improve AUC. Reverting changes.
Training on augumented user 63594 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63594 AUC after training: 0.5
User 63594 does not improve AUC. Reverting changes.
Training on augumented user 113260 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113260 AUC after training: 0.5
User 113260 does not improve AUC. Reverting changes.
Training on augumented user 47231 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47231 AUC after training: 0.5
User 47231 does not improve AUC. Reverting changes.
Training on augumented user 42827 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42827 AUC after training: 0.5
User 42827 does not improve AUC. Reverting changes.
Training on augumented user 89888 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89888 AUC after training: 0.5
User 89888 does not improve AUC. Reverting changes.
Training on augumented user 71796 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71796 AUC after training: 0.5
User 71796 does not improve AUC. Reverting changes.
Training on augumented user 11088 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11088 AUC after training: 0.5
User 11088 does not improve AUC. Reverting changes.
Training on augumented user 67238 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67238 AUC after training: 0.5
User 67238 does not improve AUC. Reverting changes.
Training on augumented user 57476 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57476 AUC after training: 0.5
User 57476 does not improve AUC. Reverting changes.
Training on augumented user 16938 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16938 AUC after training: 0.5
User 16938 does not improve AUC. Reverting changes.
Training on augumented user 51430 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51430 AUC after training: 0.5
User 51430 does not improve AUC. Reverting changes.
Training on augumented user 97823 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97823 AUC after training: 0.5
User 97823 does not improve AUC. Reverting changes.
Training on augumented user 116142 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116142 AUC after training: 0.5
User 116142 does not improve AUC. Reverting changes.
Training on augumented user 12618 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12618 AUC after training: 0.5
User 12618 does not improve AUC. Reverting changes.
Training on augumented user 8376 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8376 AUC after training: 0.5
User 8376 does not improve AUC. Reverting changes.
Training on augumented user 129230 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129230 AUC after training: 0.5
User 129230 does not improve AUC. Reverting changes.
Training on augumented user 30407 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30407 AUC after training: 0.5
User 30407 does not improve AUC. Reverting changes.
Training on augumented user 42354 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42354 AUC after training: 0.5
User 42354 does not improve AUC. Reverting changes.
Training on augumented user 42247 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42247 AUC after training: 0.5
User 42247 does not improve AUC. Reverting changes.
Training on augumented user 54471 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54471 AUC after training: 0.5
User 54471 does not improve AUC. Reverting changes.
Training on augumented user 131872 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131872 AUC after training: 0.5
User 131872 does not improve AUC. Reverting changes.
Training on augumented user 86228 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86228 AUC after training: 0.5
User 86228 does not improve AUC. Reverting changes.
Training on augumented user 30521 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30521 AUC after training: 0.5
User 30521 does not improve AUC. Reverting changes.
Training on augumented user 123528 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123528 AUC after training: 0.5
User 123528 does not improve AUC. Reverting changes.
Training on augumented user 73796 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73796 AUC after training: 0.5
User 73796 does not improve AUC. Reverting changes.
Training on augumented user 32844 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32844 AUC after training: 0.5
User 32844 does not improve AUC. Reverting changes.
Training on augumented user 59957 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59957 AUC after training: 0.5
User 59957 does not improve AUC. Reverting changes.
Training on augumented user 41798 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41798 AUC after training: 0.5
User 41798 does not improve AUC. Reverting changes.
Training on augumented user 6010 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6010 AUC after training: 0.5
User 6010 does not improve AUC. Reverting changes.
Training on augumented user 82619 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82619 AUC after training: 0.5
User 82619 does not improve AUC. Reverting changes.
Training on augumented user 122926 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122926 AUC after training: 0.5
User 122926 does not improve AUC. Reverting changes.
Training on augumented user 51052 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51052 AUC after training: 0.5
User 51052 does not improve AUC. Reverting changes.
Training on augumented user 71076 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71076 AUC after training: 0.5
User 71076 does not improve AUC. Reverting changes.
Training on augumented user 24868 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24868 AUC after training: 0.5
User 24868 does not improve AUC. Reverting changes.
Training on augumented user 122465 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122465 AUC after training: 0.5
User 122465 does not improve AUC. Reverting changes.
Training on augumented user 68220 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68220 AUC after training: 0.5
User 68220 does not improve AUC. Reverting changes.
Training on augumented user 66011 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66011 AUC after training: 0.5
User 66011 does not improve AUC. Reverting changes.
Training on augumented user 32172 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32172 AUC after training: 0.5
User 32172 does not improve AUC. Reverting changes.
Training on augumented user 124264 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124264 AUC after training: 0.5
User 124264 does not improve AUC. Reverting changes.
Training on augumented user 119721 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119721 AUC after training: 0.5
User 119721 does not improve AUC. Reverting changes.
Training on augumented user 117281 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117281 AUC after training: 0.5
User 117281 does not improve AUC. Reverting changes.
Training on augumented user 79320 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79320 AUC after training: 0.5
User 79320 does not improve AUC. Reverting changes.
Training on augumented user 102666 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102666 AUC after training: 0.5
User 102666 does not improve AUC. Reverting changes.
Training on augumented user 115115 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115115 AUC after training: 0.5
User 115115 does not improve AUC. Reverting changes.
Training on augumented user 72242 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72242 AUC after training: 0.5
User 72242 does not improve AUC. Reverting changes.
Training on augumented user 115559 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115559 AUC after training: 0.5
User 115559 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:35.955342] start test user 62812 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:36.802491] start test user 62812 297/568 recall augumented users by random, augumented_users = [131995, 51269, 87235, 56948, 115364, 116789, 67275, 61048, 35706, 82160, 108644, 125803, 124272, 131809, 69742, 46030, 33124, 29845, 93704, 131650, 125873, 82790, 135190, 16370, 114803, 18574, 53955, 112770, 59808, 57888, 74930, 113736, 7958, 4171, 2629, 51423, 39721, 34580, 127978, 93055, 82834, 69820, 117378, 67904, 17115, 45241, 97, 120057, 93004, 57394]
[2024-12-02 20:19:36.825103] user = 62812 Cloud 297/568
[2024-12-02 20:19:36.855841] user = 62812 Local 297/568
[2024-12-02 20:19:37.502400] user = 62812 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:39.628710] user = 62812 MPDA- 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.582010582010582
Training on augumented user 131995 0/50 current_auc = 0.582010582010582
User 131995 AUC after training: 0.5815221815221815
User 131995 does not improve AUC. Reverting changes.
Training on augumented user 51269 1/50 current_auc = 0.582010582010582
User 51269 AUC after training: 0.5820919820919821
User 51269 improves AUC. Keeping the model.
Training on augumented user 87235 2/50 current_auc = 0.5820919820919821
User 87235 AUC after training: 0.5817663817663817
User 87235 does not improve AUC. Reverting changes.
Training on augumented user 56948 3/50 current_auc = 0.5820919820919821
User 56948 AUC after training: 0.5819291819291819
User 56948 does not improve AUC. Reverting changes.
Training on augumented user 115364 4/50 current_auc = 0.5820919820919821
User 115364 AUC after training: 0.5829059829059828
User 115364 improves AUC. Keeping the model.
Training on augumented user 116789 5/50 current_auc = 0.5829059829059828
User 116789 AUC after training: 0.5823361823361823
User 116789 does not improve AUC. Reverting changes.
Training on augumented user 67275 6/50 current_auc = 0.5829059829059828
User 67275 AUC after training: 0.5823361823361823
User 67275 does not improve AUC. Reverting changes.
Training on augumented user 61048 7/50 current_auc = 0.5829059829059828
User 61048 AUC after training: 0.5833129833129833
User 61048 improves AUC. Keeping the model.
Training on augumented user 35706 8/50 current_auc = 0.5833129833129833
User 35706 AUC after training: 0.5829059829059828
User 35706 does not improve AUC. Reverting changes.
Training on augumented user 82160 9/50 current_auc = 0.5833129833129833
User 82160 AUC after training: 0.5829873829873831
User 82160 does not improve AUC. Reverting changes.
Training on augumented user 108644 10/50 current_auc = 0.5833129833129833
User 108644 AUC after training: 0.5827431827431828
User 108644 does not improve AUC. Reverting changes.
Training on augumented user 125803 11/50 current_auc = 0.5833129833129833
User 125803 AUC after training: 0.5834757834757835
User 125803 improves AUC. Keeping the model.
Training on augumented user 124272 12/50 current_auc = 0.5834757834757835
User 124272 AUC after training: 0.5839641839641839
User 124272 improves AUC. Keeping the model.
Training on augumented user 131809 13/50 current_auc = 0.5839641839641839
User 131809 AUC after training: 0.584126984126984
User 131809 improves AUC. Keeping the model.
Training on augumented user 69742 14/50 current_auc = 0.584126984126984
User 69742 AUC after training: 0.5844525844525845
User 69742 improves AUC. Keeping the model.
Training on augumented user 46030 15/50 current_auc = 0.5844525844525845
User 46030 AUC after training: 0.5838013838013838
User 46030 does not improve AUC. Reverting changes.
Training on augumented user 33124 16/50 current_auc = 0.5844525844525845
User 33124 AUC after training: 0.5842083842083842
User 33124 does not improve AUC. Reverting changes.
Training on augumented user 29845 17/50 current_auc = 0.5844525844525845
User 29845 AUC after training: 0.5846967846967848
User 29845 improves AUC. Keeping the model.
Training on augumented user 93704 18/50 current_auc = 0.5846967846967848
User 93704 AUC after training: 0.5862433862433862
User 93704 improves AUC. Keeping the model.
Training on augumented user 131650 19/50 current_auc = 0.5862433862433862
User 131650 AUC after training: 0.5860805860805861
User 131650 does not improve AUC. Reverting changes.
Training on augumented user 125873 20/50 current_auc = 0.5862433862433862
User 125873 AUC after training: 0.5864875864875865
User 125873 improves AUC. Keeping the model.
Training on augumented user 82790 21/50 current_auc = 0.5864875864875865
User 82790 AUC after training: 0.5860805860805861
User 82790 does not improve AUC. Reverting changes.
Training on augumented user 135190 22/50 current_auc = 0.5864875864875865
User 135190 AUC after training: 0.5856735856735857
User 135190 does not improve AUC. Reverting changes.
Training on augumented user 16370 23/50 current_auc = 0.5864875864875865
User 16370 AUC after training: 0.5849409849409849
User 16370 does not improve AUC. Reverting changes.
Training on augumented user 114803 24/50 current_auc = 0.5864875864875865
User 114803 AUC after training: 0.5854293854293855
User 114803 does not improve AUC. Reverting changes.
Training on augumented user 18574 25/50 current_auc = 0.5864875864875865
User 18574 AUC after training: 0.5864061864061864
User 18574 does not improve AUC. Reverting changes.
Training on augumented user 53955 26/50 current_auc = 0.5864875864875865
User 53955 AUC after training: 0.5855107855107856
User 53955 does not improve AUC. Reverting changes.
Training on augumented user 112770 27/50 current_auc = 0.5864875864875865
User 112770 AUC after training: 0.5853479853479854
User 112770 does not improve AUC. Reverting changes.
Training on augumented user 59808 28/50 current_auc = 0.5864875864875865
User 59808 AUC after training: 0.5860805860805861
User 59808 does not improve AUC. Reverting changes.
Training on augumented user 57888 29/50 current_auc = 0.5864875864875865
User 57888 AUC after training: 0.5855107855107856
User 57888 does not improve AUC. Reverting changes.
Training on augumented user 74930 30/50 current_auc = 0.5864875864875865
User 74930 AUC after training: 0.5856735856735857
User 74930 does not improve AUC. Reverting changes.
Training on augumented user 113736 31/50 current_auc = 0.5864875864875865
User 113736 AUC after training: 0.5862433862433862
User 113736 does not improve AUC. Reverting changes.
Training on augumented user 7958 32/50 current_auc = 0.5864875864875865
User 7958 AUC after training: 0.5855921855921855
User 7958 does not improve AUC. Reverting changes.
Training on augumented user 4171 33/50 current_auc = 0.5864875864875865
User 4171 AUC after training: 0.5857549857549857
User 4171 does not improve AUC. Reverting changes.
Training on augumented user 2629 34/50 current_auc = 0.5864875864875865
User 2629 AUC after training: 0.5859177859177859
User 2629 does not improve AUC. Reverting changes.
Training on augumented user 51423 35/50 current_auc = 0.5864875864875865
User 51423 AUC after training: 0.5857549857549857
User 51423 does not improve AUC. Reverting changes.
Training on augumented user 39721 36/50 current_auc = 0.5864875864875865
User 39721 AUC after training: 0.5862433862433862
User 39721 does not improve AUC. Reverting changes.
Training on augumented user 34580 37/50 current_auc = 0.5864875864875865
User 34580 AUC after training: 0.5854293854293854
User 34580 does not improve AUC. Reverting changes.
Training on augumented user 127978 38/50 current_auc = 0.5864875864875865
User 127978 AUC after training: 0.5848595848595848
User 127978 does not improve AUC. Reverting changes.
Training on augumented user 93055 39/50 current_auc = 0.5864875864875865
User 93055 AUC after training: 0.5860805860805861
User 93055 does not improve AUC. Reverting changes.
Training on augumented user 82834 40/50 current_auc = 0.5864875864875865
User 82834 AUC after training: 0.5856735856735857
User 82834 does not improve AUC. Reverting changes.
Training on augumented user 69820 41/50 current_auc = 0.5864875864875865
User 69820 AUC after training: 0.5842083842083842
User 69820 does not improve AUC. Reverting changes.
Training on augumented user 117378 42/50 current_auc = 0.5864875864875865
User 117378 AUC after training: 0.5857549857549857
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 67904 43/50 current_auc = 0.5864875864875865
User 67904 AUC after training: 0.585999185999186
User 67904 does not improve AUC. Reverting changes.
Training on augumented user 17115 44/50 current_auc = 0.5864875864875865
User 17115 AUC after training: 0.5851851851851851
User 17115 does not improve AUC. Reverting changes.
Training on augumented user 45241 45/50 current_auc = 0.5864875864875865
User 45241 AUC after training: 0.5857549857549857
User 45241 does not improve AUC. Reverting changes.
Training on augumented user 97 46/50 current_auc = 0.5864875864875865
User 97 AUC after training: 0.5860805860805861
User 97 does not improve AUC. Reverting changes.
Training on augumented user 120057 47/50 current_auc = 0.5864875864875865
User 120057 AUC after training: 0.5854293854293854
User 120057 does not improve AUC. Reverting changes.
Training on augumented user 93004 48/50 current_auc = 0.5864875864875865
User 93004 AUC after training: 0.5853479853479854
User 93004 does not improve AUC. Reverting changes.
Training on augumented user 57394 49/50 current_auc = 0.5864875864875865
User 57394 AUC after training: 0.5859177859177859
User 57394 does not improve AUC. Reverting changes.
[2024-12-02 20:20:06.445136] start test user 62829 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:06.868297] start test user 62829 298/568 recall augumented users by random, augumented_users = [130153, 88890, 120550, 29685, 39830, 69236, 111747, 14759, 87758, 88419, 57456, 101092, 6313, 73338, 123141, 84301, 86449, 37624, 64932, 123734, 106258, 31200, 137545, 81402, 96666, 1959, 118947, 4138, 52741, 36355, 88520, 61260, 119168, 46063, 2930, 15523, 137210, 18315, 22432, 21241, 86777, 12690, 59995, 45068, 36276, 86569, 95212, 79207, 80168, 111285]
[2024-12-02 20:20:06.883117] user = 62829 Cloud 298/568
[2024-12-02 20:20:06.892896] user = 62829 Local 298/568
[2024-12-02 20:20:06.932863] user = 62829 Local+ 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:08.856834] user = 62829 MPDA- 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48803827751196177
Training on augumented user 130153 0/50 current_auc = 0.48803827751196177
User 130153 AUC after training: 0.4928229665071771
User 130153 improves AUC. Keeping the model.
Training on augumented user 88890 1/50 current_auc = 0.4928229665071771
User 88890 AUC after training: 0.4928229665071771
User 88890 does not improve AUC. Reverting changes.
Training on augumented user 120550 2/50 current_auc = 0.4928229665071771
User 120550 AUC after training: 0.4928229665071771
User 120550 does not improve AUC. Reverting changes.
Training on augumented user 29685 3/50 current_auc = 0.4928229665071771
User 29685 AUC after training: 0.4928229665071771
User 29685 does not improve AUC. Reverting changes.
Training on augumented user 39830 4/50 current_auc = 0.4928229665071771
User 39830 AUC after training: 0.48803827751196177
User 39830 does not improve AUC. Reverting changes.
Training on augumented user 69236 5/50 current_auc = 0.4928229665071771
User 69236 AUC after training: 0.4928229665071771
User 69236 does not improve AUC. Reverting changes.
Training on augumented user 111747 6/50 current_auc = 0.4928229665071771
User 111747 AUC after training: 0.48803827751196177
User 111747 does not improve AUC. Reverting changes.
Training on augumented user 14759 7/50 current_auc = 0.4928229665071771
User 14759 AUC after training: 0.48803827751196177
User 14759 does not improve AUC. Reverting changes.
Training on augumented user 87758 8/50 current_auc = 0.4928229665071771
User 87758 AUC after training: 0.4928229665071771
User 87758 does not improve AUC. Reverting changes.
Training on augumented user 88419 9/50 current_auc = 0.4928229665071771
User 88419 AUC after training: 0.4928229665071771
User 88419 does not improve AUC. Reverting changes.
Training on augumented user 57456 10/50 current_auc = 0.4928229665071771
User 57456 AUC after training: 0.48803827751196177
User 57456 does not improve AUC. Reverting changes.
Training on augumented user 101092 11/50 current_auc = 0.4928229665071771
User 101092 AUC after training: 0.4928229665071771
User 101092 does not improve AUC. Reverting changes.
Training on augumented user 6313 12/50 current_auc = 0.4928229665071771
User 6313 AUC after training: 0.4928229665071771
User 6313 does not improve AUC. Reverting changes.
Training on augumented user 73338 13/50 current_auc = 0.4928229665071771
User 73338 AUC after training: 0.4928229665071771
User 73338 does not improve AUC. Reverting changes.
Training on augumented user 123141 14/50 current_auc = 0.4928229665071771
User 123141 AUC after training: 0.4928229665071771
User 123141 does not improve AUC. Reverting changes.
Training on augumented user 84301 15/50 current_auc = 0.4928229665071771
User 84301 AUC after training: 0.4928229665071771
User 84301 does not improve AUC. Reverting changes.
Training on augumented user 86449 16/50 current_auc = 0.4928229665071771
User 86449 AUC after training: 0.4928229665071771
User 86449 does not improve AUC. Reverting changes.
Training on augumented user 37624 17/50 current_auc = 0.4928229665071771
User 37624 AUC after training: 0.4928229665071771
User 37624 does not improve AUC. Reverting changes.
Training on augumented user 64932 18/50 current_auc = 0.4928229665071771
User 64932 AUC after training: 0.4928229665071771
User 64932 does not improve AUC. Reverting changes.
Training on augumented user 123734 19/50 current_auc = 0.4928229665071771
User 123734 AUC after training: 0.4928229665071771
User 123734 does not improve AUC. Reverting changes.
Training on augumented user 106258 20/50 current_auc = 0.4928229665071771
User 106258 AUC after training: 0.4928229665071771
User 106258 does not improve AUC. Reverting changes.
Training on augumented user 31200 21/50 current_auc = 0.4928229665071771
User 31200 AUC after training: 0.48803827751196177
User 31200 does not improve AUC. Reverting changes.
Training on augumented user 137545 22/50 current_auc = 0.4928229665071771
User 137545 AUC after training: 0.4928229665071771
User 137545 does not improve AUC. Reverting changes.
Training on augumented user 81402 23/50 current_auc = 0.4928229665071771
User 81402 AUC after training: 0.48803827751196177
User 81402 does not improve AUC. Reverting changes.
Training on augumented user 96666 24/50 current_auc = 0.4928229665071771
User 96666 AUC after training: 0.48803827751196177
User 96666 does not improve AUC. Reverting changes.
Training on augumented user 1959 25/50 current_auc = 0.4928229665071771
User 1959 AUC after training: 0.49043062200956944
User 1959 does not improve AUC. Reverting changes.
Training on augumented user 118947 26/50 current_auc = 0.4928229665071771
User 118947 AUC after training: 0.46889952153110054
User 118947 does not improve AUC. Reverting changes.
Training on augumented user 4138 27/50 current_auc = 0.4928229665071771
User 4138 AUC after training: 0.4856459330143541
User 4138 does not improve AUC. Reverting changes.
Training on augumented user 52741 28/50 current_auc = 0.4928229665071771
User 52741 AUC after training: 0.4928229665071771
User 52741 does not improve AUC. Reverting changes.
Training on augumented user 36355 29/50 current_auc = 0.4928229665071771
User 36355 AUC after training: 0.4952153110047848
User 36355 improves AUC. Keeping the model.
Training on augumented user 88520 30/50 current_auc = 0.4952153110047848
User 88520 AUC after training: 0.4928229665071771
User 88520 does not improve AUC. Reverting changes.
Training on augumented user 61260 31/50 current_auc = 0.4952153110047848
User 61260 AUC after training: 0.4928229665071771
User 61260 does not improve AUC. Reverting changes.
Training on augumented user 119168 32/50 current_auc = 0.4952153110047848
User 119168 AUC after training: 0.4928229665071771
User 119168 does not improve AUC. Reverting changes.
Training on augumented user 46063 33/50 current_auc = 0.4952153110047848
User 46063 AUC after training: 0.4928229665071771
User 46063 does not improve AUC. Reverting changes.
Training on augumented user 2930 34/50 current_auc = 0.4952153110047848
User 2930 AUC after training: 0.48086124401913877
User 2930 does not improve AUC. Reverting changes.
Training on augumented user 15523 35/50 current_auc = 0.4952153110047848
User 15523 AUC after training: 0.4928229665071771
User 15523 does not improve AUC. Reverting changes.
Training on augumented user 137210 36/50 current_auc = 0.4952153110047848
User 137210 AUC after training: 0.4928229665071771
User 137210 does not improve AUC. Reverting changes.
Training on augumented user 18315 37/50 current_auc = 0.4952153110047848
User 18315 AUC after training: 0.48803827751196177
User 18315 does not improve AUC. Reverting changes.
Training on augumented user 22432 38/50 current_auc = 0.4952153110047848
User 22432 AUC after training: 0.4928229665071771
User 22432 does not improve AUC. Reverting changes.
Training on augumented user 21241 39/50 current_auc = 0.4952153110047848
User 21241 AUC after training: 0.4928229665071771
User 21241 does not improve AUC. Reverting changes.
Training on augumented user 86777 40/50 current_auc = 0.4952153110047848
User 86777 AUC after training: 0.4928229665071771
User 86777 does not improve AUC. Reverting changes.
Training on augumented user 12690 41/50 current_auc = 0.4952153110047848
User 12690 AUC after training: 0.48803827751196177
User 12690 does not improve AUC. Reverting changes.
Training on augumented user 59995 42/50 current_auc = 0.4952153110047848
User 59995 AUC after training: 0.4928229665071771
User 59995 does not improve AUC. Reverting changes.
Training on augumented user 45068 43/50 current_auc = 0.4952153110047848
User 45068 AUC after training: 0.49043062200956944
User 45068 does not improve AUC. Reverting changes.
Training on augumented user 36276 44/50 current_auc = 0.4952153110047848
User 36276 AUC after training: 0.4928229665071771
User 36276 does not improve AUC. Reverting changes.
Training on augumented user 86569 45/50 current_auc = 0.4952153110047848
User 86569 AUC after training: 0.4928229665071771
User 86569 does not improve AUC. Reverting changes.
Training on augumented user 95212 46/50 current_auc = 0.4952153110047848
User 95212 AUC after training: 0.4928229665071771
User 95212 does not improve AUC. Reverting changes.
Training on augumented user 79207 47/50 current_auc = 0.4952153110047848
User 79207 AUC after training: 0.4928229665071771
User 79207 does not improve AUC. Reverting changes.
Training on augumented user 80168 48/50 current_auc = 0.4952153110047848
User 80168 AUC after training: 0.4928229665071771
User 80168 does not improve AUC. Reverting changes.
Training on augumented user 111285 49/50 current_auc = 0.4952153110047848
User 111285 AUC after training: 0.4928229665071771
User 111285 does not improve AUC. Reverting changes.
[2024-12-02 20:20:39.096535] start test user 62859 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:39.514939] start test user 62859 299/568 recall augumented users by random, augumented_users = [109826, 26235, 116131, 45162, 114852, 90995, 44049, 54972, 13668, 97691, 58247, 124093, 125486, 9876, 50934, 83764, 1784, 39697, 96618, 17258, 109566, 6686, 121077, 29476, 72730, 11205, 31505, 62770, 82395, 127210, 102131, 31820, 39133, 47069, 123599, 20575, 127757, 88309, 75640, 46708, 5444, 69997, 34650, 42893, 67757, 89951, 6087, 131962, 72357, 134579]
[2024-12-02 20:20:39.529953] user = 62859 Cloud 299/568
[2024-12-02 20:20:39.538044] user = 62859 Local 299/568
[2024-12-02 20:20:39.575446] user = 62859 Local+ 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:42.345682] user = 62859 MPDA- 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4285714285714286
Training on augumented user 109826 0/50 current_auc = 0.4285714285714286
User 109826 AUC after training: 0.44285714285714284
User 109826 improves AUC. Keeping the model.
Training on augumented user 26235 1/50 current_auc = 0.44285714285714284
User 26235 AUC after training: 0.44285714285714284
User 26235 does not improve AUC. Reverting changes.
Training on augumented user 116131 2/50 current_auc = 0.44285714285714284
User 116131 AUC after training: 0.45714285714285713
User 116131 improves AUC. Keeping the model.
Training on augumented user 45162 3/50 current_auc = 0.45714285714285713
User 45162 AUC after training: 0.5
User 45162 improves AUC. Keeping the model.
Training on augumented user 114852 4/50 current_auc = 0.5
User 114852 AUC after training: 0.5
User 114852 does not improve AUC. Reverting changes.
Training on augumented user 90995 5/50 current_auc = 0.5
User 90995 AUC after training: 0.4571428571428571
User 90995 does not improve AUC. Reverting changes.
Training on augumented user 44049 6/50 current_auc = 0.5
User 44049 AUC after training: 0.4857142857142857
User 44049 does not improve AUC. Reverting changes.
Training on augumented user 54972 7/50 current_auc = 0.5
User 54972 AUC after training: 0.45714285714285713
User 54972 does not improve AUC. Reverting changes.
Training on augumented user 13668 8/50 current_auc = 0.5
User 13668 AUC after training: 0.5
User 13668 does not improve AUC. Reverting changes.
Training on augumented user 97691 9/50 current_auc = 0.5
User 97691 AUC after training: 0.4571428571428571
User 97691 does not improve AUC. Reverting changes.
Training on augumented user 58247 10/50 current_auc = 0.5
User 58247 AUC after training: 0.48571428571428565
User 58247 does not improve AUC. Reverting changes.
Training on augumented user 124093 11/50 current_auc = 0.5
User 124093 AUC after training: 0.4714285714285714
User 124093 does not improve AUC. Reverting changes.
Training on augumented user 125486 12/50 current_auc = 0.5
User 125486 AUC after training: 0.48571428571428565
User 125486 does not improve AUC. Reverting changes.
Training on augumented user 9876 13/50 current_auc = 0.5
User 9876 AUC after training: 0.4714285714285714
User 9876 does not improve AUC. Reverting changes.
Training on augumented user 50934 14/50 current_auc = 0.5
User 50934 AUC after training: 0.44285714285714284
User 50934 does not improve AUC. Reverting changes.
Training on augumented user 83764 15/50 current_auc = 0.5
User 83764 AUC after training: 0.44285714285714284
User 83764 does not improve AUC. Reverting changes.
Training on augumented user 1784 16/50 current_auc = 0.5
User 1784 AUC after training: 0.4857142857142857
User 1784 does not improve AUC. Reverting changes.
Training on augumented user 39697 17/50 current_auc = 0.5
User 39697 AUC after training: 0.4714285714285714
User 39697 does not improve AUC. Reverting changes.
Training on augumented user 96618 18/50 current_auc = 0.5
User 96618 AUC after training: 0.4714285714285714
User 96618 does not improve AUC. Reverting changes.
Training on augumented user 17258 19/50 current_auc = 0.5
User 17258 AUC after training: 0.4714285714285714
User 17258 does not improve AUC. Reverting changes.
Training on augumented user 109566 20/50 current_auc = 0.5
User 109566 AUC after training: 0.4857142857142857
User 109566 does not improve AUC. Reverting changes.
Training on augumented user 6686 21/50 current_auc = 0.5
User 6686 AUC after training: 0.4571428571428571
User 6686 does not improve AUC. Reverting changes.
Training on augumented user 121077 22/50 current_auc = 0.5
User 121077 AUC after training: 0.4714285714285714
User 121077 does not improve AUC. Reverting changes.
Training on augumented user 29476 23/50 current_auc = 0.5
User 29476 AUC after training: 0.4714285714285714
User 29476 does not improve AUC. Reverting changes.
Training on augumented user 72730 24/50 current_auc = 0.5
User 72730 AUC after training: 0.5
User 72730 does not improve AUC. Reverting changes.
Training on augumented user 11205 25/50 current_auc = 0.5
User 11205 AUC after training: 0.4714285714285714
User 11205 does not improve AUC. Reverting changes.
Training on augumented user 31505 26/50 current_auc = 0.5
User 31505 AUC after training: 0.44285714285714284
User 31505 does not improve AUC. Reverting changes.
Training on augumented user 62770 27/50 current_auc = 0.5
User 62770 AUC after training: 0.44285714285714284
User 62770 does not improve AUC. Reverting changes.
Training on augumented user 82395 28/50 current_auc = 0.5
User 82395 AUC after training: 0.44285714285714284
User 82395 does not improve AUC. Reverting changes.
Training on augumented user 127210 29/50 current_auc = 0.5
User 127210 AUC after training: 0.47142857142857136
User 127210 does not improve AUC. Reverting changes.
Training on augumented user 102131 30/50 current_auc = 0.5
User 102131 AUC after training: 0.45714285714285713
User 102131 does not improve AUC. Reverting changes.
Training on augumented user 31820 31/50 current_auc = 0.5
User 31820 AUC after training: 0.45714285714285713
User 31820 does not improve AUC. Reverting changes.
Training on augumented user 39133 32/50 current_auc = 0.5
User 39133 AUC after training: 0.5
User 39133 does not improve AUC. Reverting changes.
Training on augumented user 47069 33/50 current_auc = 0.5
User 47069 AUC after training: 0.45714285714285713
User 47069 does not improve AUC. Reverting changes.
Training on augumented user 123599 34/50 current_auc = 0.5
User 123599 AUC after training: 0.48571428571428565
User 123599 does not improve AUC. Reverting changes.
Training on augumented user 20575 35/50 current_auc = 0.5
User 20575 AUC after training: 0.44285714285714284
User 20575 does not improve AUC. Reverting changes.
Training on augumented user 127757 36/50 current_auc = 0.5
User 127757 AUC after training: 0.4714285714285714
User 127757 does not improve AUC. Reverting changes.
Training on augumented user 88309 37/50 current_auc = 0.5
User 88309 AUC after training: 0.5
User 88309 does not improve AUC. Reverting changes.
Training on augumented user 75640 38/50 current_auc = 0.5
User 75640 AUC after training: 0.4571428571428571
User 75640 does not improve AUC. Reverting changes.
Training on augumented user 46708 39/50 current_auc = 0.5
User 46708 AUC after training: 0.5
User 46708 does not improve AUC. Reverting changes.
Training on augumented user 5444 40/50 current_auc = 0.5
User 5444 AUC after training: 0.5
User 5444 does not improve AUC. Reverting changes.
Training on augumented user 69997 41/50 current_auc = 0.5
User 69997 AUC after training: 0.4714285714285714
User 69997 does not improve AUC. Reverting changes.
Training on augumented user 34650 42/50 current_auc = 0.5
User 34650 AUC after training: 0.4428571428571428
User 34650 does not improve AUC. Reverting changes.
Training on augumented user 42893 43/50 current_auc = 0.5
User 42893 AUC after training: 0.4857142857142857
User 42893 does not improve AUC. Reverting changes.
Training on augumented user 67757 44/50 current_auc = 0.5
User 67757 AUC after training: 0.5
User 67757 does not improve AUC. Reverting changes.
Training on augumented user 89951 45/50 current_auc = 0.5
User 89951 AUC after training: 0.4857142857142857
User 89951 does not improve AUC. Reverting changes.
Training on augumented user 6087 46/50 current_auc = 0.5
User 6087 AUC after training: 0.5
User 6087 does not improve AUC. Reverting changes.
Training on augumented user 131962 47/50 current_auc = 0.5
User 131962 AUC after training: 0.5
User 131962 does not improve AUC. Reverting changes.
Training on augumented user 72357 48/50 current_auc = 0.5
User 72357 AUC after training: 0.48571428571428565
User 72357 does not improve AUC. Reverting changes.
Training on augumented user 134579 49/50 current_auc = 0.5
User 134579 AUC after training: 0.4857142857142857
User 134579 does not improve AUC. Reverting changes.
[2024-12-02 20:21:15.394983] start test user 62868 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:15.819182] start test user 62868 300/568 recall augumented users by random, augumented_users = [108347, 121419, 7530, 30868, 71910, 50623, 114527, 126201, 46448, 133707, 110400, 17186, 23273, 135405, 19745, 65162, 6779, 64285, 112037, 70241, 31032, 38460, 17579, 12138, 105591, 41464, 77878, 94868, 84311, 134648, 39404, 88804, 67382, 133600, 100771, 91343, 70148, 99339, 42652, 124546, 92686, 107663, 1097, 61263, 2429, 29193, 90059, 115770, 3663, 137300]
[2024-12-02 20:21:15.831759] user = 62868 Cloud 300/568
[2024-12-02 20:21:15.839991] user = 62868 Local 300/568
[2024-12-02 20:21:15.864807] user = 62868 Local+ 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:18.146352] user = 62868 MPDA- 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.1428571428571429
Training on augumented user 108347 0/50 current_auc = 0.1428571428571429
User 108347 AUC after training: 0.1428571428571429
User 108347 does not improve AUC. Reverting changes.
Training on augumented user 121419 1/50 current_auc = 0.1428571428571429
User 121419 AUC after training: 0.1428571428571429
User 121419 does not improve AUC. Reverting changes.
Training on augumented user 7530 2/50 current_auc = 0.1428571428571429
User 7530 AUC after training: 0.1428571428571429
User 7530 does not improve AUC. Reverting changes.
Training on augumented user 30868 3/50 current_auc = 0.1428571428571429
User 30868 AUC after training: 0.1428571428571429
User 30868 does not improve AUC. Reverting changes.
Training on augumented user 71910 4/50 current_auc = 0.1428571428571429
User 71910 AUC after training: 0.1428571428571429
User 71910 does not improve AUC. Reverting changes.
Training on augumented user 50623 5/50 current_auc = 0.1428571428571429
User 50623 AUC after training: 0.1428571428571429
User 50623 does not improve AUC. Reverting changes.
Training on augumented user 114527 6/50 current_auc = 0.1428571428571429
User 114527 AUC after training: 0.1428571428571429
User 114527 does not improve AUC. Reverting changes.
Training on augumented user 126201 7/50 current_auc = 0.1428571428571429
User 126201 AUC after training: 0.1428571428571429
User 126201 does not improve AUC. Reverting changes.
Training on augumented user 46448 8/50 current_auc = 0.1428571428571429
User 46448 AUC after training: 0.1428571428571429
User 46448 does not improve AUC. Reverting changes.
Training on augumented user 133707 9/50 current_auc = 0.1428571428571429
User 133707 AUC after training: 0.1428571428571429
User 133707 does not improve AUC. Reverting changes.
Training on augumented user 110400 10/50 current_auc = 0.1428571428571429
User 110400 AUC after training: 0.1428571428571429
User 110400 does not improve AUC. Reverting changes.
Training on augumented user 17186 11/50 current_auc = 0.1428571428571429
User 17186 AUC after training: 0.1428571428571429
User 17186 does not improve AUC. Reverting changes.
Training on augumented user 23273 12/50 current_auc = 0.1428571428571429
User 23273 AUC after training: 0.1428571428571429
User 23273 does not improve AUC. Reverting changes.
Training on augumented user 135405 13/50 current_auc = 0.1428571428571429
User 135405 AUC after training: 0.1428571428571429
User 135405 does not improve AUC. Reverting changes.
Training on augumented user 19745 14/50 current_auc = 0.1428571428571429
User 19745 AUC after training: 0.1428571428571429
User 19745 does not improve AUC. Reverting changes.
Training on augumented user 65162 15/50 current_auc = 0.1428571428571429
User 65162 AUC after training: 0.1428571428571429
User 65162 does not improve AUC. Reverting changes.
Training on augumented user 6779 16/50 current_auc = 0.1428571428571429
User 6779 AUC after training: 0.1428571428571429
User 6779 does not improve AUC. Reverting changes.
Training on augumented user 64285 17/50 current_auc = 0.1428571428571429
User 64285 AUC after training: 0.1428571428571429
User 64285 does not improve AUC. Reverting changes.
Training on augumented user 112037 18/50 current_auc = 0.1428571428571429
User 112037 AUC after training: 0.1428571428571429
User 112037 does not improve AUC. Reverting changes.
Training on augumented user 70241 19/50 current_auc = 0.1428571428571429
User 70241 AUC after training: 0.1428571428571429
User 70241 does not improve AUC. Reverting changes.
Training on augumented user 31032 20/50 current_auc = 0.1428571428571429
User 31032 AUC after training: 0.1428571428571429
User 31032 does not improve AUC. Reverting changes.
Training on augumented user 38460 21/50 current_auc = 0.1428571428571429
User 38460 AUC after training: 0.1428571428571429
User 38460 does not improve AUC. Reverting changes.
Training on augumented user 17579 22/50 current_auc = 0.1428571428571429
User 17579 AUC after training: 0.1428571428571429
User 17579 does not improve AUC. Reverting changes.
Training on augumented user 12138 23/50 current_auc = 0.1428571428571429
User 12138 AUC after training: 0.1428571428571429
User 12138 does not improve AUC. Reverting changes.
Training on augumented user 105591 24/50 current_auc = 0.1428571428571429
User 105591 AUC after training: 0.1428571428571429
User 105591 does not improve AUC. Reverting changes.
Training on augumented user 41464 25/50 current_auc = 0.1428571428571429
User 41464 AUC after training: 0.1428571428571429
User 41464 does not improve AUC. Reverting changes.
Training on augumented user 77878 26/50 current_auc = 0.1428571428571429
User 77878 AUC after training: 0.1428571428571429
User 77878 does not improve AUC. Reverting changes.
Training on augumented user 94868 27/50 current_auc = 0.1428571428571429
User 94868 AUC after training: 0.1428571428571429
User 94868 does not improve AUC. Reverting changes.
Training on augumented user 84311 28/50 current_auc = 0.1428571428571429
User 84311 AUC after training: 0.1428571428571429
User 84311 does not improve AUC. Reverting changes.
Training on augumented user 134648 29/50 current_auc = 0.1428571428571429
User 134648 AUC after training: 0.1428571428571429
User 134648 does not improve AUC. Reverting changes.
Training on augumented user 39404 30/50 current_auc = 0.1428571428571429
User 39404 AUC after training: 0.1428571428571429
User 39404 does not improve AUC. Reverting changes.
Training on augumented user 88804 31/50 current_auc = 0.1428571428571429
User 88804 AUC after training: 0.1428571428571429
User 88804 does not improve AUC. Reverting changes.
Training on augumented user 67382 32/50 current_auc = 0.1428571428571429
User 67382 AUC after training: 0.1428571428571429
User 67382 does not improve AUC. Reverting changes.
Training on augumented user 133600 33/50 current_auc = 0.1428571428571429
User 133600 AUC after training: 0.1428571428571429
User 133600 does not improve AUC. Reverting changes.
Training on augumented user 100771 34/50 current_auc = 0.1428571428571429
User 100771 AUC after training: 0.1428571428571429
User 100771 does not improve AUC. Reverting changes.
Training on augumented user 91343 35/50 current_auc = 0.1428571428571429
User 91343 AUC after training: 0.1428571428571429
User 91343 does not improve AUC. Reverting changes.
Training on augumented user 70148 36/50 current_auc = 0.1428571428571429
User 70148 AUC after training: 0.1428571428571429
User 70148 does not improve AUC. Reverting changes.
Training on augumented user 99339 37/50 current_auc = 0.1428571428571429
User 99339 AUC after training: 0.1428571428571429
User 99339 does not improve AUC. Reverting changes.
Training on augumented user 42652 38/50 current_auc = 0.1428571428571429
User 42652 AUC after training: 0.1428571428571429
User 42652 does not improve AUC. Reverting changes.
Training on augumented user 124546 39/50 current_auc = 0.1428571428571429
User 124546 AUC after training: 0.1428571428571429
User 124546 does not improve AUC. Reverting changes.
Training on augumented user 92686 40/50 current_auc = 0.1428571428571429
User 92686 AUC after training: 0.1428571428571429
User 92686 does not improve AUC. Reverting changes.
Training on augumented user 107663 41/50 current_auc = 0.1428571428571429
User 107663 AUC after training: 0.1428571428571429
User 107663 does not improve AUC. Reverting changes.
Training on augumented user 1097 42/50 current_auc = 0.1428571428571429
User 1097 AUC after training: 0.1428571428571429
User 1097 does not improve AUC. Reverting changes.
Training on augumented user 61263 43/50 current_auc = 0.1428571428571429
User 61263 AUC after training: 0.1428571428571429
User 61263 does not improve AUC. Reverting changes.
Training on augumented user 2429 44/50 current_auc = 0.1428571428571429
User 2429 AUC after training: 0.1428571428571429
User 2429 does not improve AUC. Reverting changes.
Training on augumented user 29193 45/50 current_auc = 0.1428571428571429
User 29193 AUC after training: 0.1428571428571429
User 29193 does not improve AUC. Reverting changes.
Training on augumented user 90059 46/50 current_auc = 0.1428571428571429
User 90059 AUC after training: 0.1428571428571429
User 90059 does not improve AUC. Reverting changes.
Training on augumented user 115770 47/50 current_auc = 0.1428571428571429
User 115770 AUC after training: 0.1428571428571429
User 115770 does not improve AUC. Reverting changes.
Training on augumented user 3663 48/50 current_auc = 0.1428571428571429
User 3663 AUC after training: 0.1428571428571429
User 3663 does not improve AUC. Reverting changes.
Training on augumented user 137300 49/50 current_auc = 0.1428571428571429
User 137300 AUC after training: 0.1428571428571429
User 137300 does not improve AUC. Reverting changes.
[2024-12-02 20:21:49.117904] start test user 62876 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:49.900919] start test user 62876 301/568 recall augumented users by random, augumented_users = [31425, 101060, 38504, 21415, 112720, 122099, 36540, 117856, 126859, 3874, 54240, 88286, 44490, 125137, 92069, 113903, 45115, 124436, 81325, 81783, 18401, 109909, 18502, 132606, 107800, 29134, 136807, 136427, 17940, 72414, 131615, 17756, 46424, 135037, 34225, 34108, 28505, 125384, 22275, 110271, 91942, 129229, 73846, 117939, 45206, 16082, 32854, 113081, 2757, 60022]
[2024-12-02 20:21:49.946588] user = 62876 Cloud 301/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:49.960814] user = 62876 Local 301/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:50.003080] user = 62876 Local+ 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:52.303926] user = 62876 MPDA- 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 31425 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31425 AUC after training: 0.5
User 31425 does not improve AUC. Reverting changes.
Training on augumented user 101060 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101060 AUC after training: 0.5
User 101060 does not improve AUC. Reverting changes.
Training on augumented user 38504 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38504 AUC after training: 0.5
User 38504 does not improve AUC. Reverting changes.
Training on augumented user 21415 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21415 AUC after training: 0.5
User 21415 does not improve AUC. Reverting changes.
Training on augumented user 112720 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112720 AUC after training: 0.5
User 112720 does not improve AUC. Reverting changes.
Training on augumented user 122099 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122099 AUC after training: 0.5
User 122099 does not improve AUC. Reverting changes.
Training on augumented user 36540 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36540 AUC after training: 0.5
User 36540 does not improve AUC. Reverting changes.
Training on augumented user 117856 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117856 AUC after training: 0.5
User 117856 does not improve AUC. Reverting changes.
Training on augumented user 126859 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126859 AUC after training: 0.5
User 126859 does not improve AUC. Reverting changes.
Training on augumented user 3874 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3874 AUC after training: 0.5
User 3874 does not improve AUC. Reverting changes.
Training on augumented user 54240 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54240 AUC after training: 0.5
User 54240 does not improve AUC. Reverting changes.
Training on augumented user 88286 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88286 AUC after training: 0.5
User 88286 does not improve AUC. Reverting changes.
Training on augumented user 44490 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44490 AUC after training: 0.5
User 44490 does not improve AUC. Reverting changes.
Training on augumented user 125137 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125137 AUC after training: 0.5
User 125137 does not improve AUC. Reverting changes.
Training on augumented user 92069 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92069 AUC after training: 0.5
User 92069 does not improve AUC. Reverting changes.
Training on augumented user 113903 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113903 AUC after training: 0.5
User 113903 does not improve AUC. Reverting changes.
Training on augumented user 45115 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45115 AUC after training: 0.5
User 45115 does not improve AUC. Reverting changes.
Training on augumented user 124436 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124436 AUC after training: 0.5
User 124436 does not improve AUC. Reverting changes.
Training on augumented user 81325 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81325 AUC after training: 0.5
User 81325 does not improve AUC. Reverting changes.
Training on augumented user 81783 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81783 AUC after training: 0.5
User 81783 does not improve AUC. Reverting changes.
Training on augumented user 18401 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18401 AUC after training: 0.5
User 18401 does not improve AUC. Reverting changes.
Training on augumented user 109909 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109909 AUC after training: 0.5
User 109909 does not improve AUC. Reverting changes.
Training on augumented user 18502 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18502 AUC after training: 0.5
User 18502 does not improve AUC. Reverting changes.
Training on augumented user 132606 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132606 AUC after training: 0.5
User 132606 does not improve AUC. Reverting changes.
Training on augumented user 107800 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107800 AUC after training: 0.5
User 107800 does not improve AUC. Reverting changes.
Training on augumented user 29134 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29134 AUC after training: 0.5
User 29134 does not improve AUC. Reverting changes.
Training on augumented user 136807 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136807 AUC after training: 0.5
User 136807 does not improve AUC. Reverting changes.
Training on augumented user 136427 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136427 AUC after training: 0.5
User 136427 does not improve AUC. Reverting changes.
Training on augumented user 17940 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17940 AUC after training: 0.5
User 17940 does not improve AUC. Reverting changes.
Training on augumented user 72414 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72414 AUC after training: 0.5
User 72414 does not improve AUC. Reverting changes.
Training on augumented user 131615 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131615 AUC after training: 0.5
User 131615 does not improve AUC. Reverting changes.
Training on augumented user 17756 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17756 AUC after training: 0.5
User 17756 does not improve AUC. Reverting changes.
Training on augumented user 46424 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46424 AUC after training: 0.5
User 46424 does not improve AUC. Reverting changes.
Training on augumented user 135037 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135037 AUC after training: 0.5
User 135037 does not improve AUC. Reverting changes.
Training on augumented user 34225 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34225 AUC after training: 0.5
User 34225 does not improve AUC. Reverting changes.
Training on augumented user 34108 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34108 AUC after training: 0.5
User 34108 does not improve AUC. Reverting changes.
Training on augumented user 28505 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28505 AUC after training: 0.5
User 28505 does not improve AUC. Reverting changes.
Training on augumented user 125384 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125384 AUC after training: 0.5
User 125384 does not improve AUC. Reverting changes.
Training on augumented user 22275 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22275 AUC after training: 0.5
User 22275 does not improve AUC. Reverting changes.
Training on augumented user 110271 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110271 AUC after training: 0.5
User 110271 does not improve AUC. Reverting changes.
Training on augumented user 91942 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91942 AUC after training: 0.5
User 91942 does not improve AUC. Reverting changes.
Training on augumented user 129229 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129229 AUC after training: 0.5
User 129229 does not improve AUC. Reverting changes.
Training on augumented user 73846 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73846 AUC after training: 0.5
User 73846 does not improve AUC. Reverting changes.
Training on augumented user 117939 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117939 AUC after training: 0.5
User 117939 does not improve AUC. Reverting changes.
Training on augumented user 45206 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45206 AUC after training: 0.5
User 45206 does not improve AUC. Reverting changes.
Training on augumented user 16082 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16082 AUC after training: 0.5
User 16082 does not improve AUC. Reverting changes.
Training on augumented user 32854 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32854 AUC after training: 0.5
User 32854 does not improve AUC. Reverting changes.
Training on augumented user 113081 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113081 AUC after training: 0.5
User 113081 does not improve AUC. Reverting changes.
Training on augumented user 2757 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2757 AUC after training: 0.5
User 2757 does not improve AUC. Reverting changes.
Training on augumented user 60022 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60022 AUC after training: 0.5
User 60022 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:17.066916] start test user 62892 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:17.609497] start test user 62892 302/568 recall augumented users by random, augumented_users = [30015, 57023, 28460, 47409, 103002, 119432, 15641, 29556, 111872, 131224, 38044, 4452, 50954, 9718, 4859, 75483, 71096, 17610, 118392, 49932, 79533, 112371, 69594, 8893, 49269, 30236, 23917, 38640, 32692, 61206, 22310, 31129, 115277, 67343, 16327, 59930, 128713, 104455, 71808, 25927, 94129, 52721, 53076, 72408, 21431, 126446, 120731, 90525, 119405, 59080]
[2024-12-02 20:22:17.624392] user = 62892 Cloud 302/568
[2024-12-02 20:22:17.635716] user = 62892 Local 302/568
[2024-12-02 20:22:17.655506] user = 62892 Local+ 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:20.033995] user = 62892 MPDA- 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5510204081632653
Training on augumented user 30015 0/50 current_auc = 0.5510204081632653
User 30015 AUC after training: 0.5510204081632653
User 30015 does not improve AUC. Reverting changes.
Training on augumented user 57023 1/50 current_auc = 0.5510204081632653
User 57023 AUC after training: 0.5510204081632653
User 57023 does not improve AUC. Reverting changes.
Training on augumented user 28460 2/50 current_auc = 0.5510204081632653
User 28460 AUC after training: 0.5510204081632653
User 28460 does not improve AUC. Reverting changes.
Training on augumented user 47409 3/50 current_auc = 0.5510204081632653
User 47409 AUC after training: 0.5510204081632653
User 47409 does not improve AUC. Reverting changes.
Training on augumented user 103002 4/50 current_auc = 0.5510204081632653
User 103002 AUC after training: 0.5510204081632653
User 103002 does not improve AUC. Reverting changes.
Training on augumented user 119432 5/50 current_auc = 0.5510204081632653
User 119432 AUC after training: 0.5510204081632653
User 119432 does not improve AUC. Reverting changes.
Training on augumented user 15641 6/50 current_auc = 0.5510204081632653
User 15641 AUC after training: 0.5510204081632653
User 15641 does not improve AUC. Reverting changes.
Training on augumented user 29556 7/50 current_auc = 0.5510204081632653
User 29556 AUC after training: 0.5510204081632653
User 29556 does not improve AUC. Reverting changes.
Training on augumented user 111872 8/50 current_auc = 0.5510204081632653
User 111872 AUC after training: 0.5510204081632653
User 111872 does not improve AUC. Reverting changes.
Training on augumented user 131224 9/50 current_auc = 0.5510204081632653
User 131224 AUC after training: 0.5510204081632653
User 131224 does not improve AUC. Reverting changes.
Training on augumented user 38044 10/50 current_auc = 0.5510204081632653
User 38044 AUC after training: 0.5510204081632653
User 38044 does not improve AUC. Reverting changes.
Training on augumented user 4452 11/50 current_auc = 0.5510204081632653
User 4452 AUC after training: 0.5510204081632653
User 4452 does not improve AUC. Reverting changes.
Training on augumented user 50954 12/50 current_auc = 0.5510204081632653
User 50954 AUC after training: 0.5510204081632653
User 50954 does not improve AUC. Reverting changes.
Training on augumented user 9718 13/50 current_auc = 0.5510204081632653
User 9718 AUC after training: 0.5510204081632653
User 9718 does not improve AUC. Reverting changes.
Training on augumented user 4859 14/50 current_auc = 0.5510204081632653
User 4859 AUC after training: 0.5510204081632653
User 4859 does not improve AUC. Reverting changes.
Training on augumented user 75483 15/50 current_auc = 0.5510204081632653
User 75483 AUC after training: 0.5510204081632653
User 75483 does not improve AUC. Reverting changes.
Training on augumented user 71096 16/50 current_auc = 0.5510204081632653
User 71096 AUC after training: 0.5510204081632653
User 71096 does not improve AUC. Reverting changes.
Training on augumented user 17610 17/50 current_auc = 0.5510204081632653
User 17610 AUC after training: 0.5510204081632653
User 17610 does not improve AUC. Reverting changes.
Training on augumented user 118392 18/50 current_auc = 0.5510204081632653
User 118392 AUC after training: 0.5510204081632653
User 118392 does not improve AUC. Reverting changes.
Training on augumented user 49932 19/50 current_auc = 0.5510204081632653
User 49932 AUC after training: 0.5510204081632653
User 49932 does not improve AUC. Reverting changes.
Training on augumented user 79533 20/50 current_auc = 0.5510204081632653
User 79533 AUC after training: 0.5510204081632653
User 79533 does not improve AUC. Reverting changes.
Training on augumented user 112371 21/50 current_auc = 0.5510204081632653
User 112371 AUC after training: 0.5510204081632653
User 112371 does not improve AUC. Reverting changes.
Training on augumented user 69594 22/50 current_auc = 0.5510204081632653
User 69594 AUC after training: 0.5510204081632653
User 69594 does not improve AUC. Reverting changes.
Training on augumented user 8893 23/50 current_auc = 0.5510204081632653
User 8893 AUC after training: 0.5510204081632653
User 8893 does not improve AUC. Reverting changes.
Training on augumented user 49269 24/50 current_auc = 0.5510204081632653
User 49269 AUC after training: 0.5510204081632653
User 49269 does not improve AUC. Reverting changes.
Training on augumented user 30236 25/50 current_auc = 0.5510204081632653
User 30236 AUC after training: 0.5510204081632653
User 30236 does not improve AUC. Reverting changes.
Training on augumented user 23917 26/50 current_auc = 0.5510204081632653
User 23917 AUC after training: 0.5510204081632653
User 23917 does not improve AUC. Reverting changes.
Training on augumented user 38640 27/50 current_auc = 0.5510204081632653
User 38640 AUC after training: 0.5510204081632653
User 38640 does not improve AUC. Reverting changes.
Training on augumented user 32692 28/50 current_auc = 0.5510204081632653
User 32692 AUC after training: 0.5510204081632653
User 32692 does not improve AUC. Reverting changes.
Training on augumented user 61206 29/50 current_auc = 0.5510204081632653
User 61206 AUC after training: 0.5510204081632653
User 61206 does not improve AUC. Reverting changes.
Training on augumented user 22310 30/50 current_auc = 0.5510204081632653
User 22310 AUC after training: 0.5510204081632653
User 22310 does not improve AUC. Reverting changes.
Training on augumented user 31129 31/50 current_auc = 0.5510204081632653
User 31129 AUC after training: 0.5510204081632653
User 31129 does not improve AUC. Reverting changes.
Training on augumented user 115277 32/50 current_auc = 0.5510204081632653
User 115277 AUC after training: 0.5510204081632653
User 115277 does not improve AUC. Reverting changes.
Training on augumented user 67343 33/50 current_auc = 0.5510204081632653
User 67343 AUC after training: 0.5510204081632653
User 67343 does not improve AUC. Reverting changes.
Training on augumented user 16327 34/50 current_auc = 0.5510204081632653
User 16327 AUC after training: 0.5510204081632653
User 16327 does not improve AUC. Reverting changes.
Training on augumented user 59930 35/50 current_auc = 0.5510204081632653
User 59930 AUC after training: 0.5510204081632653
User 59930 does not improve AUC. Reverting changes.
Training on augumented user 128713 36/50 current_auc = 0.5510204081632653
User 128713 AUC after training: 0.5510204081632653
User 128713 does not improve AUC. Reverting changes.
Training on augumented user 104455 37/50 current_auc = 0.5510204081632653
User 104455 AUC after training: 0.5510204081632653
User 104455 does not improve AUC. Reverting changes.
Training on augumented user 71808 38/50 current_auc = 0.5510204081632653
User 71808 AUC after training: 0.5510204081632653
User 71808 does not improve AUC. Reverting changes.
Training on augumented user 25927 39/50 current_auc = 0.5510204081632653
User 25927 AUC after training: 0.5510204081632653
User 25927 does not improve AUC. Reverting changes.
Training on augumented user 94129 40/50 current_auc = 0.5510204081632653
User 94129 AUC after training: 0.5510204081632653
User 94129 does not improve AUC. Reverting changes.
Training on augumented user 52721 41/50 current_auc = 0.5510204081632653
User 52721 AUC after training: 0.5510204081632653
User 52721 does not improve AUC. Reverting changes.
Training on augumented user 53076 42/50 current_auc = 0.5510204081632653
User 53076 AUC after training: 0.5510204081632653
User 53076 does not improve AUC. Reverting changes.
Training on augumented user 72408 43/50 current_auc = 0.5510204081632653
User 72408 AUC after training: 0.5510204081632653
User 72408 does not improve AUC. Reverting changes.
Training on augumented user 21431 44/50 current_auc = 0.5510204081632653
User 21431 AUC after training: 0.5510204081632653
User 21431 does not improve AUC. Reverting changes.
Training on augumented user 126446 45/50 current_auc = 0.5510204081632653
User 126446 AUC after training: 0.5510204081632653
User 126446 does not improve AUC. Reverting changes.
Training on augumented user 120731 46/50 current_auc = 0.5510204081632653
User 120731 AUC after training: 0.5510204081632653
User 120731 does not improve AUC. Reverting changes.
Training on augumented user 90525 47/50 current_auc = 0.5510204081632653
User 90525 AUC after training: 0.5510204081632653
User 90525 does not improve AUC. Reverting changes.
Training on augumented user 119405 48/50 current_auc = 0.5510204081632653
User 119405 AUC after training: 0.5510204081632653
User 119405 does not improve AUC. Reverting changes.
Training on augumented user 59080 49/50 current_auc = 0.5510204081632653
User 59080 AUC after training: 0.5510204081632653
User 59080 does not improve AUC. Reverting changes.
[2024-12-02 20:22:47.566036] start test user 62925 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:48.487018] start test user 62925 303/568 recall augumented users by random, augumented_users = [50792, 130831, 29181, 14267, 7342, 40836, 137864, 58459, 55026, 10744, 96220, 113715, 60615, 122631, 133319, 133971, 110549, 123275, 50345, 128967, 74111, 79521, 36909, 116447, 125741, 127722, 112181, 134053, 120372, 84054, 12692, 82802, 206, 41954, 69783, 124751, 95558, 103298, 100328, 133406, 7869, 15677, 68720, 31131, 496, 31332, 123845, 124612, 51710, 52136]
[2024-12-02 20:22:48.538642] user = 62925 Cloud 303/568
[2024-12-02 20:22:48.634192] user = 62925 Local 303/568
[2024-12-02 20:22:49.122275] user = 62925 Local+ 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:50.953437] user = 62925 MPDA- 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5382245430809399
Training on augumented user 50792 0/50 current_auc = 0.5382245430809399
User 50792 AUC after training: 0.5395300261096606
User 50792 improves AUC. Keeping the model.
Training on augumented user 130831 1/50 current_auc = 0.5395300261096606
User 130831 AUC after training: 0.5398433420365536
User 130831 improves AUC. Keeping the model.
Training on augumented user 29181 2/50 current_auc = 0.5398433420365536
User 29181 AUC after training: 0.5397389033942558
User 29181 does not improve AUC. Reverting changes.
Training on augumented user 14267 3/50 current_auc = 0.5398433420365536
User 14267 AUC after training: 0.5401044386422976
User 14267 improves AUC. Keeping the model.
Training on augumented user 7342 4/50 current_auc = 0.5401044386422976
User 7342 AUC after training: 0.5395822454308095
User 7342 does not improve AUC. Reverting changes.
Training on augumented user 40836 5/50 current_auc = 0.5401044386422976
User 40836 AUC after training: 0.5397911227154047
User 40836 does not improve AUC. Reverting changes.
Training on augumented user 137864 6/50 current_auc = 0.5401044386422976
User 137864 AUC after training: 0.5394255874673629
User 137864 does not improve AUC. Reverting changes.
Training on augumented user 58459 7/50 current_auc = 0.5401044386422976
User 58459 AUC after training: 0.5392689295039165
User 58459 does not improve AUC. Reverting changes.
Training on augumented user 55026 8/50 current_auc = 0.5401044386422976
User 55026 AUC after training: 0.5397911227154047
User 55026 does not improve AUC. Reverting changes.
Training on augumented user 10744 9/50 current_auc = 0.5401044386422976
User 10744 AUC after training: 0.5400522193211488
User 10744 does not improve AUC. Reverting changes.
Training on augumented user 96220 10/50 current_auc = 0.5401044386422976
User 96220 AUC after training: 0.5381201044386423
User 96220 does not improve AUC. Reverting changes.
Training on augumented user 113715 11/50 current_auc = 0.5401044386422976
User 113715 AUC after training: 0.5397389033942559
User 113715 does not improve AUC. Reverting changes.
Training on augumented user 60615 12/50 current_auc = 0.5401044386422976
User 60615 AUC after training: 0.5393733681462141
User 60615 does not improve AUC. Reverting changes.
Training on augumented user 122631 13/50 current_auc = 0.5401044386422976
User 122631 AUC after training: 0.5394778067885118
User 122631 does not improve AUC. Reverting changes.
Training on augumented user 133319 14/50 current_auc = 0.5401044386422976
User 133319 AUC after training: 0.5398433420365535
User 133319 does not improve AUC. Reverting changes.
Training on augumented user 133971 15/50 current_auc = 0.5401044386422976
User 133971 AUC after training: 0.5388511749347259
User 133971 does not improve AUC. Reverting changes.
Training on augumented user 110549 16/50 current_auc = 0.5401044386422976
User 110549 AUC after training: 0.5391122715404699
User 110549 does not improve AUC. Reverting changes.
Training on augumented user 123275 17/50 current_auc = 0.5401044386422976
User 123275 AUC after training: 0.5401566579634465
User 123275 improves AUC. Keeping the model.
Training on augumented user 50345 18/50 current_auc = 0.5401566579634465
User 50345 AUC after training: 0.54
User 50345 does not improve AUC. Reverting changes.
Training on augumented user 128967 19/50 current_auc = 0.5401566579634465
User 128967 AUC after training: 0.5405221932114883
User 128967 improves AUC. Keeping the model.
Training on augumented user 74111 20/50 current_auc = 0.5405221932114883
User 74111 AUC after training: 0.5404177545691906
User 74111 does not improve AUC. Reverting changes.
Training on augumented user 79521 21/50 current_auc = 0.5405221932114883
User 79521 AUC after training: 0.539686684073107
User 79521 does not improve AUC. Reverting changes.
Training on augumented user 36909 22/50 current_auc = 0.5405221932114883
User 36909 AUC after training: 0.5408877284595299
User 36909 improves AUC. Keeping the model.
Training on augumented user 116447 23/50 current_auc = 0.5408877284595299
User 116447 AUC after training: 0.5407832898172323
User 116447 does not improve AUC. Reverting changes.
Training on augumented user 125741 24/50 current_auc = 0.5408877284595299
User 125741 AUC after training: 0.5408877284595299
User 125741 does not improve AUC. Reverting changes.
Training on augumented user 127722 25/50 current_auc = 0.5408877284595299
User 127722 AUC after training: 0.54088772845953
User 127722 improves AUC. Keeping the model.
Training on augumented user 112181 26/50 current_auc = 0.54088772845953
User 112181 AUC after training: 0.5407832898172323
User 112181 does not improve AUC. Reverting changes.
Training on augumented user 134053 27/50 current_auc = 0.54088772845953
User 134053 AUC after training: 0.541201044386423
User 134053 improves AUC. Keeping the model.
Training on augumented user 120372 28/50 current_auc = 0.541201044386423
User 120372 AUC after training: 0.5414099216710182
User 120372 improves AUC. Keeping the model.
Training on augumented user 84054 29/50 current_auc = 0.5414099216710182
User 84054 AUC after training: 0.5409399477806789
User 84054 does not improve AUC. Reverting changes.
Training on augumented user 12692 30/50 current_auc = 0.5414099216710182
User 12692 AUC after training: 0.5415143603133159
User 12692 improves AUC. Keeping the model.
Training on augumented user 82802 31/50 current_auc = 0.5415143603133159
User 82802 AUC after training: 0.542402088772846
User 82802 improves AUC. Keeping the model.
Training on augumented user 206 32/50 current_auc = 0.542402088772846
User 206 AUC after training: 0.5418276762402089
User 206 does not improve AUC. Reverting changes.
Training on augumented user 41954 33/50 current_auc = 0.542402088772846
User 41954 AUC after training: 0.5424543080939948
User 41954 improves AUC. Keeping the model.
Training on augumented user 69783 34/50 current_auc = 0.5424543080939948
User 69783 AUC after training: 0.54177545691906
User 69783 does not improve AUC. Reverting changes.
Training on augumented user 124751 35/50 current_auc = 0.5424543080939948
User 124751 AUC after training: 0.5422976501305483
User 124751 does not improve AUC. Reverting changes.
Training on augumented user 95558 36/50 current_auc = 0.5424543080939948
User 95558 AUC after training: 0.541827676240209
User 95558 does not improve AUC. Reverting changes.
Training on augumented user 103298 37/50 current_auc = 0.5424543080939948
User 103298 AUC after training: 0.5428198433420366
User 103298 improves AUC. Keeping the model.
Training on augumented user 100328 38/50 current_auc = 0.5428198433420366
User 100328 AUC after training: 0.5421932114882506
User 100328 does not improve AUC. Reverting changes.
Training on augumented user 133406 39/50 current_auc = 0.5428198433420366
User 133406 AUC after training: 0.5417232375979112
User 133406 does not improve AUC. Reverting changes.
Training on augumented user 7869 40/50 current_auc = 0.5428198433420366
User 7869 AUC after training: 0.54266318537859
User 7869 does not improve AUC. Reverting changes.
Training on augumented user 15677 41/50 current_auc = 0.5428198433420366
User 15677 AUC after training: 0.5425065274151436
User 15677 does not improve AUC. Reverting changes.
Training on augumented user 68720 42/50 current_auc = 0.5428198433420366
User 68720 AUC after training: 0.5425065274151436
User 68720 does not improve AUC. Reverting changes.
Training on augumented user 31131 43/50 current_auc = 0.5428198433420366
User 31131 AUC after training: 0.542402088772846
User 31131 does not improve AUC. Reverting changes.
Training on augumented user 496 44/50 current_auc = 0.5428198433420366
User 496 AUC after training: 0.5414099216710182
User 496 does not improve AUC. Reverting changes.
Training on augumented user 31332 45/50 current_auc = 0.5428198433420366
User 31332 AUC after training: 0.5427154046997389
User 31332 does not improve AUC. Reverting changes.
Training on augumented user 123845 46/50 current_auc = 0.5428198433420366
User 123845 AUC after training: 0.5413054830287206
User 123845 does not improve AUC. Reverting changes.
Training on augumented user 124612 47/50 current_auc = 0.5428198433420366
User 124612 AUC after training: 0.5424020887728459
User 124612 does not improve AUC. Reverting changes.
Training on augumented user 51710 48/50 current_auc = 0.5428198433420366
User 51710 AUC after training: 0.543289817232376
User 51710 improves AUC. Keeping the model.
Training on augumented user 52136 49/50 current_auc = 0.543289817232376
User 52136 AUC after training: 0.5436553524804177
User 52136 improves AUC. Keeping the model.
[2024-12-02 20:23:19.593736] start test user 62984 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:20.106934] start test user 62984 304/568 recall augumented users by random, augumented_users = [108996, 53124, 47414, 76125, 84192, 72790, 68904, 44250, 110647, 84964, 70890, 74999, 135013, 20657, 8985, 126187, 15658, 67401, 112051, 131229, 113227, 32481, 120719, 75352, 130933, 110888, 114935, 88559, 113979, 109263, 89874, 29134, 124021, 39871, 56344, 39364, 39654, 134576, 64835, 85196, 1034, 134461, 63574, 50843, 131561, 21680, 81415, 88952, 27092, 97266]
[2024-12-02 20:23:20.123109] user = 62984 Cloud 304/568
[2024-12-02 20:23:20.139358] user = 62984 Local 304/568
[2024-12-02 20:23:20.275341] user = 62984 Local+ 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:22.019649] user = 62984 MPDA- 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7705686630369025
Training on augumented user 108996 0/50 current_auc = 0.7705686630369025
User 108996 AUC after training: 0.7702661826981246
User 108996 does not improve AUC. Reverting changes.
Training on augumented user 53124 1/50 current_auc = 0.7705686630369025
User 53124 AUC after training: 0.7713248638838475
User 53124 improves AUC. Keeping the model.
Training on augumented user 47414 2/50 current_auc = 0.7713248638838475
User 47414 AUC after training: 0.7704174228675136
User 47414 does not improve AUC. Reverting changes.
Training on augumented user 76125 3/50 current_auc = 0.7713248638838475
User 76125 AUC after training: 0.7711736237144585
User 76125 does not improve AUC. Reverting changes.
Training on augumented user 84192 4/50 current_auc = 0.7713248638838475
User 84192 AUC after training: 0.7707199032062915
User 84192 does not improve AUC. Reverting changes.
Training on augumented user 72790 5/50 current_auc = 0.7713248638838475
User 72790 AUC after training: 0.7707199032062915
User 72790 does not improve AUC. Reverting changes.
Training on augumented user 68904 6/50 current_auc = 0.7713248638838475
User 68904 AUC after training: 0.7711736237144585
User 68904 does not improve AUC. Reverting changes.
Training on augumented user 44250 7/50 current_auc = 0.7713248638838475
User 44250 AUC after training: 0.7713248638838475
User 44250 does not improve AUC. Reverting changes.
Training on augumented user 110647 8/50 current_auc = 0.7713248638838475
User 110647 AUC after training: 0.7710223835450695
User 110647 does not improve AUC. Reverting changes.
Training on augumented user 84964 9/50 current_auc = 0.7713248638838475
User 84964 AUC after training: 0.7711736237144585
User 84964 does not improve AUC. Reverting changes.
Training on augumented user 70890 10/50 current_auc = 0.7713248638838475
User 70890 AUC after training: 0.7702661826981245
User 70890 does not improve AUC. Reverting changes.
Training on augumented user 74999 11/50 current_auc = 0.7713248638838475
User 74999 AUC after training: 0.7717785843920145
User 74999 improves AUC. Keeping the model.
Training on augumented user 135013 12/50 current_auc = 0.7717785843920145
User 135013 AUC after training: 0.7716273442226255
User 135013 does not improve AUC. Reverting changes.
Training on augumented user 20657 13/50 current_auc = 0.7717785843920145
User 20657 AUC after training: 0.7716273442226255
User 20657 does not improve AUC. Reverting changes.
Training on augumented user 8985 14/50 current_auc = 0.7717785843920145
User 8985 AUC after training: 0.7716273442226255
User 8985 does not improve AUC. Reverting changes.
Training on augumented user 126187 15/50 current_auc = 0.7717785843920145
User 126187 AUC after training: 0.7717785843920145
User 126187 does not improve AUC. Reverting changes.
Training on augumented user 15658 16/50 current_auc = 0.7717785843920145
User 15658 AUC after training: 0.7716273442226255
User 15658 does not improve AUC. Reverting changes.
Training on augumented user 67401 17/50 current_auc = 0.7717785843920145
User 67401 AUC after training: 0.7717785843920145
User 67401 does not improve AUC. Reverting changes.
Training on augumented user 112051 18/50 current_auc = 0.7717785843920145
User 112051 AUC after training: 0.7713248638838475
User 112051 does not improve AUC. Reverting changes.
Training on augumented user 131229 19/50 current_auc = 0.7717785843920145
User 131229 AUC after training: 0.7717785843920144
User 131229 does not improve AUC. Reverting changes.
Training on augumented user 113227 20/50 current_auc = 0.7717785843920145
User 113227 AUC after training: 0.7711736237144585
User 113227 does not improve AUC. Reverting changes.
Training on augumented user 32481 21/50 current_auc = 0.7717785843920145
User 32481 AUC after training: 0.7717785843920145
User 32481 does not improve AUC. Reverting changes.
Training on augumented user 120719 22/50 current_auc = 0.7717785843920145
User 120719 AUC after training: 0.7716273442226256
User 120719 does not improve AUC. Reverting changes.
Training on augumented user 75352 23/50 current_auc = 0.7717785843920145
User 75352 AUC after training: 0.7720810647307925
User 75352 improves AUC. Keeping the model.
Training on augumented user 130933 24/50 current_auc = 0.7720810647307925
User 130933 AUC after training: 0.7722323049001815
User 130933 improves AUC. Keeping the model.
Training on augumented user 110888 25/50 current_auc = 0.7722323049001815
User 110888 AUC after training: 0.7719298245614035
User 110888 does not improve AUC. Reverting changes.
Training on augumented user 114935 26/50 current_auc = 0.7722323049001815
User 114935 AUC after training: 0.7717785843920144
User 114935 does not improve AUC. Reverting changes.
Training on augumented user 88559 27/50 current_auc = 0.7722323049001815
User 88559 AUC after training: 0.7716273442226256
User 88559 does not improve AUC. Reverting changes.
Training on augumented user 113979 28/50 current_auc = 0.7722323049001815
User 113979 AUC after training: 0.7717785843920144
User 113979 does not improve AUC. Reverting changes.
Training on augumented user 109263 29/50 current_auc = 0.7722323049001815
User 109263 AUC after training: 0.7716273442226256
User 109263 does not improve AUC. Reverting changes.
Training on augumented user 89874 30/50 current_auc = 0.7722323049001815
User 89874 AUC after training: 0.7720810647307925
User 89874 does not improve AUC. Reverting changes.
Training on augumented user 29134 31/50 current_auc = 0.7722323049001815
User 29134 AUC after training: 0.7720810647307925
User 29134 does not improve AUC. Reverting changes.
Training on augumented user 124021 32/50 current_auc = 0.7722323049001815
User 124021 AUC after training: 0.7720810647307925
User 124021 does not improve AUC. Reverting changes.
Training on augumented user 39871 33/50 current_auc = 0.7722323049001815
User 39871 AUC after training: 0.7711736237144585
User 39871 does not improve AUC. Reverting changes.
Training on augumented user 56344 34/50 current_auc = 0.7722323049001815
User 56344 AUC after training: 0.7719298245614035
User 56344 does not improve AUC. Reverting changes.
Training on augumented user 39364 35/50 current_auc = 0.7722323049001815
User 39364 AUC after training: 0.7717785843920144
User 39364 does not improve AUC. Reverting changes.
Training on augumented user 39654 36/50 current_auc = 0.7722323049001815
User 39654 AUC after training: 0.7720810647307925
User 39654 does not improve AUC. Reverting changes.
Training on augumented user 134576 37/50 current_auc = 0.7722323049001815
User 134576 AUC after training: 0.7720810647307925
User 134576 does not improve AUC. Reverting changes.
Training on augumented user 64835 38/50 current_auc = 0.7722323049001815
User 64835 AUC after training: 0.7708711433756805
User 64835 does not improve AUC. Reverting changes.
Training on augumented user 85196 39/50 current_auc = 0.7722323049001815
User 85196 AUC after training: 0.7717785843920145
User 85196 does not improve AUC. Reverting changes.
Training on augumented user 1034 40/50 current_auc = 0.7722323049001815
User 1034 AUC after training: 0.7717785843920145
User 1034 does not improve AUC. Reverting changes.
Training on augumented user 134461 41/50 current_auc = 0.7722323049001815
User 134461 AUC after training: 0.7722323049001815
User 134461 does not improve AUC. Reverting changes.
Training on augumented user 63574 42/50 current_auc = 0.7722323049001815
User 63574 AUC after training: 0.7722323049001815
User 63574 does not improve AUC. Reverting changes.
Training on augumented user 50843 43/50 current_auc = 0.7722323049001815
User 50843 AUC after training: 0.7716273442226256
User 50843 does not improve AUC. Reverting changes.
Training on augumented user 131561 44/50 current_auc = 0.7722323049001815
User 131561 AUC after training: 0.7719298245614035
User 131561 does not improve AUC. Reverting changes.
Training on augumented user 21680 45/50 current_auc = 0.7722323049001815
User 21680 AUC after training: 0.7719298245614035
User 21680 does not improve AUC. Reverting changes.
Training on augumented user 81415 46/50 current_auc = 0.7722323049001815
User 81415 AUC after training: 0.7723835450695705
User 81415 improves AUC. Keeping the model.
Training on augumented user 88952 47/50 current_auc = 0.7723835450695705
User 88952 AUC after training: 0.7726860254083484
User 88952 improves AUC. Keeping the model.
Training on augumented user 27092 48/50 current_auc = 0.7726860254083484
User 27092 AUC after training: 0.7725347852389594
User 27092 does not improve AUC. Reverting changes.
Training on augumented user 97266 49/50 current_auc = 0.7726860254083484
User 97266 AUC after training: 0.7723835450695705
User 97266 does not improve AUC. Reverting changes.
[2024-12-02 20:23:48.684535] start test user 63046 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:49.310392] start test user 63046 305/568 recall augumented users by random, augumented_users = [89279, 62680, 35978, 122392, 77287, 56453, 33990, 11978, 3236, 47185, 119761, 12293, 122658, 22589, 90243, 32893, 23700, 4230, 14962, 119766, 1806, 116307, 28689, 52350, 51461, 11905, 105341, 3349, 65893, 23674, 5351, 121473, 16958, 117161, 121111, 54751, 107236, 81811, 83593, 40285, 107922, 51293, 112470, 95400, 56400, 38770, 48502, 68820, 8616, 40106]
[2024-12-02 20:23:49.327627] user = 63046 Cloud 305/568
[2024-12-02 20:23:49.391047] user = 63046 Local 305/568
[2024-12-02 20:23:49.560698] user = 63046 Local+ 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:52.449609] user = 63046 MPDA- 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.501884133694327
Training on augumented user 89279 0/50 current_auc = 0.501884133694327
User 89279 AUC after training: 0.5023670419101
User 89279 improves AUC. Keeping the model.
Training on augumented user 62680 1/50 current_auc = 0.5023670419101
User 62680 AUC after training: 0.5019078832787093
User 62680 does not improve AUC. Reverting changes.
Training on augumented user 35978 2/50 current_auc = 0.5023670419101
User 35978 AUC after training: 0.5035861872417233
User 35978 improves AUC. Keeping the model.
Training on augumented user 122392 3/50 current_auc = 0.5035861872417233
User 122392 AUC after training: 0.5031982773634796
User 122392 does not improve AUC. Reverting changes.
Training on augumented user 77287 4/50 current_auc = 0.5035861872417233
User 77287 AUC after training: 0.5012033122753685
User 77287 does not improve AUC. Reverting changes.
Training on augumented user 56453 5/50 current_auc = 0.5035861872417233
User 56453 AUC after training: 0.5031586947228424
User 56453 does not improve AUC. Reverting changes.
Training on augumented user 33990 6/50 current_auc = 0.5035861872417233
User 33990 AUC after training: 0.5025887046976678
User 33990 does not improve AUC. Reverting changes.
Training on augumented user 11978 7/50 current_auc = 0.5035861872417233
User 11978 AUC after training: 0.5062223911081556
User 11978 improves AUC. Keeping the model.
Training on augumented user 3236 8/50 current_auc = 0.5062223911081556
User 3236 AUC after training: 0.5012033122753685
User 3236 does not improve AUC. Reverting changes.
Training on augumented user 47185 9/50 current_auc = 0.5062223911081556
User 47185 AUC after training: 0.5063886381988315
User 47185 improves AUC. Keeping the model.
Training on augumented user 119761 10/50 current_auc = 0.5063886381988315
User 119761 AUC after training: 0.5078373628461501
User 119761 improves AUC. Keeping the model.
Training on augumented user 12293 11/50 current_auc = 0.5078373628461501
User 12293 AUC after training: 0.5074969521366709
User 12293 does not improve AUC. Reverting changes.
Training on augumented user 122658 12/50 current_auc = 0.5078373628461501
